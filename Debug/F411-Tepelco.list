
F411-Tepelco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  0800f698  0800f698  0001f698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff24  0800ff24  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff24  0800ff24  0001ff24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff2c  0800ff2c  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff2c  0800ff2c  0001ff2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff30  0800ff30  0001ff30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800ff34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003590  20000178  080100ac  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003708  080100ac  00023708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000147c6  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d5b  00000000  00000000  000349b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00037710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dea  00000000  00000000  00038838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018569  00000000  00000000  00039622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172cc  00000000  00000000  00051b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009366e  00000000  00000000  00068e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005460  00000000  00000000  000fc4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00101928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f680 	.word	0x0800f680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	0800f680 	.word	0x0800f680

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b09a      	sub	sp, #104	; 0x68
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=34,//ETH.SIPR[3]=6,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2222      	movs	r2, #34	; 0x22
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory
		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	//----------------------- ETHERNET W5100 Environment-------------------------//

	//----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f005 fd09 	bl	80062e8 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008d6:	4943      	ldr	r1, [pc, #268]	; (80009e4 <main+0x350>)
 80008d8:	4843      	ldr	r0, [pc, #268]	; (80009e8 <main+0x354>)
 80008da:	f00d feeb 	bl	800e6b4 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008de:	4943      	ldr	r1, [pc, #268]	; (80009ec <main+0x358>)
 80008e0:	4843      	ldr	r0, [pc, #268]	; (80009f0 <main+0x35c>)
 80008e2:	f00d fee7 	bl	800e6b4 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008e6:	4943      	ldr	r1, [pc, #268]	; (80009f4 <main+0x360>)
 80008e8:	4843      	ldr	r0, [pc, #268]	; (80009f8 <main+0x364>)
 80008ea:	f00d fee3 	bl	800e6b4 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008ee:	4943      	ldr	r1, [pc, #268]	; (80009fc <main+0x368>)
 80008f0:	4843      	ldr	r0, [pc, #268]	; (8000a00 <main+0x36c>)
 80008f2:	f00d fedf 	bl	800e6b4 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008f6:	4943      	ldr	r1, [pc, #268]	; (8000a04 <main+0x370>)
 80008f8:	4843      	ldr	r0, [pc, #268]	; (8000a08 <main+0x374>)
 80008fa:	f00d fedb 	bl	800e6b4 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80008fe:	4943      	ldr	r1, [pc, #268]	; (8000a0c <main+0x378>)
 8000900:	4843      	ldr	r0, [pc, #268]	; (8000a10 <main+0x37c>)
 8000902:	f00d fed7 	bl	800e6b4 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000906:	4943      	ldr	r1, [pc, #268]	; (8000a14 <main+0x380>)
 8000908:	4843      	ldr	r0, [pc, #268]	; (8000a18 <main+0x384>)
 800090a:	f00d fed3 	bl	800e6b4 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800090e:	4943      	ldr	r1, [pc, #268]	; (8000a1c <main+0x388>)
 8000910:	4843      	ldr	r0, [pc, #268]	; (8000a20 <main+0x38c>)
 8000912:	f00d fecf 	bl	800e6b4 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <main+0x34c>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <main+0x34c>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000948:	2206      	movs	r2, #6
 800094a:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 8000950:	2201      	movs	r2, #1
 8000952:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000958:	2203      	movs	r2, #3
 800095a:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000978:	220a      	movs	r2, #10
 800097a:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000988:	2233      	movs	r2, #51	; 0x33
 800098a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000998:	2235      	movs	r2, #53	; 0x35
 800099a:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
		wf._DBG_EN=1;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50

	// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //

		spi_no_debug=1;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <main+0x390>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <main+0x348>)
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <main+0x394>)
 80009d0:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009d2:	4b02      	ldr	r3, [pc, #8]	; (80009dc <main+0x348>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d8:	4b00      	ldr	r3, [pc, #0]	; (80009dc <main+0x348>)
 80009da:	e027      	b.n	8000a2c <main+0x398>
 80009dc:	20001cb0 	.word	0x20001cb0
 80009e0:	200002bc 	.word	0x200002bc
 80009e4:	20000024 	.word	0x20000024
 80009e8:	200002c2 	.word	0x200002c2
 80009ec:	2000002c 	.word	0x2000002c
 80009f0:	200002e2 	.word	0x200002e2
 80009f4:	20000038 	.word	0x20000038
 80009f8:	200002f2 	.word	0x200002f2
 80009fc:	20000048 	.word	0x20000048
 8000a00:	20000302 	.word	0x20000302
 8000a04:	20000050 	.word	0x20000050
 8000a08:	20000308 	.word	0x20000308
 8000a0c:	20000060 	.word	0x20000060
 8000a10:	2000031e 	.word	0x2000031e
 8000a14:	20000070 	.word	0x20000070
 8000a18:	2000032e 	.word	0x2000032e
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	20000318 	.word	0x20000318
 8000a24:	20003168 	.word	0x20003168
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	4a58      	ldr	r2, [pc, #352]	; (8000b90 <main+0x4fc>)
 8000a2e:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a30:	4858      	ldr	r0, [pc, #352]	; (8000b94 <main+0x500>)
 8000a32:	f00b f83b 	bl	800baac <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a36:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <main+0x500>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a3c:	4856      	ldr	r0, [pc, #344]	; (8000b98 <main+0x504>)
 8000a3e:	f00b f835 	bl	800baac <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a42:	4b55      	ldr	r3, [pc, #340]	; (8000b98 <main+0x504>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a48:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4852      	ldr	r0, [pc, #328]	; (8000b98 <main+0x504>)
 8000a50:	f00b f8cf 	bl	800bbf2 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f001 fde0 	bl	8002618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 fa6a 	bl	8000f30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a5c:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <main+0x508>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <main+0x50c>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	099b      	lsrs	r3, r3, #6
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fdc9 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 fbcb 	bl	8001208 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a72:	f000 fac5 	bl	8001000 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a76:	f000 fb73 	bl	8001160 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a7a:	f000 fb9b 	bl	80011b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a7e:	f000 faf5 	bl	800106c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	4847      	ldr	r0, [pc, #284]	; (8000ba4 <main+0x510>)
 8000a88:	f002 fa9a 	bl	8002fc0 <HAL_GPIO_WritePin>
	ITM0_Write("\r\n INICIO OK\r\n",14);
 8000a8c:	210e      	movs	r1, #14
 8000a8e:	4846      	ldr	r0, [pc, #280]	; (8000ba8 <main+0x514>)
 8000a90:	f000 fc42 	bl	8001318 <ITM0_Write>
	HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);		//Escucho el puerto serie
 8000a94:	2201      	movs	r2, #1
 8000a96:	4945      	ldr	r1, [pc, #276]	; (8000bac <main+0x518>)
 8000a98:	4845      	ldr	r0, [pc, #276]	; (8000bb0 <main+0x51c>)
 8000a9a:	f004 fbba 	bl	8005212 <HAL_UART_Receive_IT>
	ESP8266_HW_Reset();		 						          	//Reseteo el modulo desde el pin de RESET
 8000a9e:	f001 fa51 	bl	8001f44 <ESP8266_HW_Reset>
	if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",17);
 8000aa2:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <main+0x520>)
 8000aa4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <main+0x420>
 8000aac:	2111      	movs	r1, #17
 8000aae:	4842      	ldr	r0, [pc, #264]	; (8000bb8 <main+0x524>)
 8000ab0:	f000 fc32 	bl	8001318 <ITM0_Write>
	if (WF_SER_DBG) HAL_UART_Transmit_IT(&huart2, "\r\n RESET ESP8266 \r\n",17);
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <main+0x528>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d004      	beq.n	8000ac6 <main+0x432>
 8000abc:	2211      	movs	r2, #17
 8000abe:	493e      	ldr	r1, [pc, #248]	; (8000bb8 <main+0x524>)
 8000ac0:	483f      	ldr	r0, [pc, #252]	; (8000bc0 <main+0x52c>)
 8000ac2:	f004 fb61 	bl	8005188 <HAL_UART_Transmit_IT>
	if (ETH_DBG_EN) ITM0_Write("\r\n SET-UP W5100 \r\n",17);
 8000ac6:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <main+0x530>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <main+0x442>
 8000ace:	2111      	movs	r1, #17
 8000ad0:	483d      	ldr	r0, [pc, #244]	; (8000bc8 <main+0x534>)
 8000ad2:	f000 fc21 	bl	8001318 <ITM0_Write>

	ETH.operacion=SPI_WRITE;
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <main+0x538>)
 8000ad8:	22f0      	movs	r2, #240	; 0xf0
 8000ada:	729a      	strb	r2, [r3, #10]
	ETH.TX[1]= 0;
 8000adc:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <main+0x538>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	755a      	strb	r2, [r3, #21]
	ETH.TX[2]= 1;
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <main+0x538>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	759a      	strb	r2, [r3, #22]
	ETH.TX[3]= 192;
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <main+0x538>)
 8000aea:	22c0      	movs	r2, #192	; 0xc0
 8000aec:	75da      	strb	r2, [r3, #23]

	eth_init(&ETH);
 8000aee:	4837      	ldr	r0, [pc, #220]	; (8000bcc <main+0x538>)
 8000af0:	f00c fca8 	bl	800d444 <eth_init>

	eth_socket_init(&ETH,0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	4835      	ldr	r0, [pc, #212]	; (8000bcc <main+0x538>)
 8000af8:	f00c fd1e 	bl	800d538 <eth_socket_init>

	SPI_ETH_READ_EN=1;
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <main+0x53c>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
	ETH.operacion=SPI_READ;
 8000b02:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <main+0x538>)
 8000b04:	220f      	movs	r2, #15
 8000b06:	729a      	strb	r2, [r3, #10]
	ETH.TX[1]= 0;
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <main+0x538>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	755a      	strb	r2, [r3, #21]
	ETH.TX[2]= 1;
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <main+0x538>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	759a      	strb	r2, [r3, #22]
	ETH.TX[3]= 0;
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <main+0x538>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <main+0x51c>)
 8000b1c:	f001 fa3a 	bl	8001f94 <ESP8266_HW_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d115      	bne.n	8000b52 <main+0x4be>
     {
   	  ESP_HW_Init=1;
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <main+0x540>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",19);
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <main+0x520>)
 8000b2e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <main+0x4aa>
 8000b36:	2113      	movs	r1, #19
 8000b38:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <main+0x544>)
 8000b3a:	f000 fbed 	bl	8001318 <ITM0_Write>
   	  if (WF_SER_DBG) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",19);
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <main+0x528>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d05f      	beq.n	8000c06 <main+0x572>
 8000b46:	2213      	movs	r2, #19
 8000b48:	4923      	ldr	r1, [pc, #140]	; (8000bd8 <main+0x544>)
 8000b4a:	481d      	ldr	r0, [pc, #116]	; (8000bc0 <main+0x52c>)
 8000b4c:	f004 fb1c 	bl	8005188 <HAL_UART_Transmit_IT>
 8000b50:	e059      	b.n	8000c06 <main+0x572>
     }
     else
     {
   	  ESP8266_HW_Reset(); 				//Si no logra resetear con el comando de AT+RESTORE, pruebo el resete desde hardware
 8000b52:	f001 f9f7 	bl	8001f44 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <main+0x51c>)
 8000b58:	f001 fa1c 	bl	8001f94 <ESP8266_HW_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d13c      	bne.n	8000bdc <main+0x548>
   	  {
   		  ESP_HW_Init=1;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <main+0x540>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",19);
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <main+0x520>)
 8000b6a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <main+0x4e6>
 8000b72:	2113      	movs	r1, #19
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <main+0x544>)
 8000b76:	f000 fbcf 	bl	8001318 <ITM0_Write>
   		  if (WF_SER_DBG) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",19);
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <main+0x528>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d041      	beq.n	8000c06 <main+0x572>
 8000b82:	2213      	movs	r2, #19
 8000b84:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <main+0x544>)
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <main+0x52c>)
 8000b88:	f004 fafe 	bl	8005188 <HAL_UART_Transmit_IT>
 8000b8c:	e03b      	b.n	8000c06 <main+0x572>
 8000b8e:	bf00      	nop
 8000b90:	20000194 	.word	0x20000194
 8000b94:	20001010 	.word	0x20001010
 8000b98:	20001660 	.word	0x20001660
 8000b9c:	20000084 	.word	0x20000084
 8000ba0:	10624dd3 	.word	0x10624dd3
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	0800f698 	.word	0x0800f698
 8000bac:	2000357c 	.word	0x2000357c
 8000bb0:	20000234 	.word	0x20000234
 8000bb4:	200002bc 	.word	0x200002bc
 8000bb8:	0800f6a8 	.word	0x0800f6a8
 8000bbc:	20000021 	.word	0x20000021
 8000bc0:	20000278 	.word	0x20000278
 8000bc4:	20003172 	.word	0x20003172
 8000bc8:	0800f6bc 	.word	0x0800f6bc
 8000bcc:	20001cb0 	.word	0x20001cb0
 8000bd0:	20003174 	.word	0x20003174
 8000bd4:	2000316b 	.word	0x2000316b
 8000bd8:	0800f6d0 	.word	0x0800f6d0
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bdc:	4bad      	ldr	r3, [pc, #692]	; (8000e94 <main+0x800>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",24);
 8000be2:	4bad      	ldr	r3, [pc, #692]	; (8000e98 <main+0x804>)
 8000be4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <main+0x560>
 8000bec:	2118      	movs	r1, #24
 8000bee:	48ab      	ldr	r0, [pc, #684]	; (8000e9c <main+0x808>)
 8000bf0:	f000 fb92 	bl	8001318 <ITM0_Write>
   		  if (WF_SER_DBG) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init Fail\r\n",24);
 8000bf4:	4baa      	ldr	r3, [pc, #680]	; (8000ea0 <main+0x80c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d004      	beq.n	8000c06 <main+0x572>
 8000bfc:	2218      	movs	r2, #24
 8000bfe:	49a7      	ldr	r1, [pc, #668]	; (8000e9c <main+0x808>)
 8000c00:	48a8      	ldr	r0, [pc, #672]	; (8000ea4 <main+0x810>)
 8000c02:	f004 fac1 	bl	8005188 <HAL_UART_Transmit_IT>
   	  }
     }

     HAL_Delay(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f001 fd77 	bl	80026fc <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /**************[ INICIO PIDO ENVIAR DATOS ]**************/
	  	  if (ESP_HW_Init==1)
 8000c0e:	4ba1      	ldr	r3, [pc, #644]	; (8000e94 <main+0x800>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	f040 80a9 	bne.w	8000d6a <main+0x6d6>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000c18:	4ba3      	ldr	r3, [pc, #652]	; (8000ea8 <main+0x814>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	f040 80a4 	bne.w	8000d6a <main+0x6d6>
 8000c22:	4b9d      	ldr	r3, [pc, #628]	; (8000e98 <main+0x804>)
 8000c24:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f040 809e 	bne.w	8000d6a <main+0x6d6>
 8000c2e:	4b9a      	ldr	r3, [pc, #616]	; (8000e98 <main+0x804>)
 8000c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c34:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c38:	f340 8097 	ble.w	8000d6a <main+0x6d6>
 8000c3c:	4b9b      	ldr	r3, [pc, #620]	; (8000eac <main+0x818>)
 8000c3e:	7c9b      	ldrb	r3, [r3, #18]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 8092 	beq.w	8000d6a <main+0x6d6>
	  			{	ETH.S0_data_available=0;
 8000c46:	4b99      	ldr	r3, [pc, #612]	; (8000eac <main+0x818>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c4c:	4b98      	ldr	r3, [pc, #608]	; (8000eb0 <main+0x81c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c52:	4b95      	ldr	r3, [pc, #596]	; (8000ea8 <main+0x814>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4896      	ldr	r0, [pc, #600]	; (8000eb4 <main+0x820>)
 8000c5c:	f00a fff5 	bl	800bc4a <ModBUS_F03_Read>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4698      	mov	r8, r3
 8000c64:	2101      	movs	r1, #1
 8000c66:	4893      	ldr	r0, [pc, #588]	; (8000eb4 <main+0x820>)
 8000c68:	f00a ffef 	bl	800bc4a <ModBUS_F03_Read>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461c      	mov	r4, r3
 8000c70:	2102      	movs	r1, #2
 8000c72:	4890      	ldr	r0, [pc, #576]	; (8000eb4 <main+0x820>)
 8000c74:	f00a ffe9 	bl	800bc4a <ModBUS_F03_Read>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	488d      	ldr	r0, [pc, #564]	; (8000eb4 <main+0x820>)
 8000c80:	f00a ffe3 	bl	800bc4a <ModBUS_F03_Read>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461e      	mov	r6, r3
 8000c88:	2104      	movs	r1, #4
 8000c8a:	488a      	ldr	r0, [pc, #552]	; (8000eb4 <main+0x820>)
 8000c8c:	f00a ffdd 	bl	800bc4a <ModBUS_F03_Read>
 8000c90:	4603      	mov	r3, r0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	2105      	movs	r1, #5
 8000c96:	4887      	ldr	r0, [pc, #540]	; (8000eb4 <main+0x820>)
 8000c98:	f00a ffd7 	bl	800bc4a <ModBUS_F03_Read>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	2106      	movs	r1, #6
 8000ca2:	4884      	ldr	r0, [pc, #528]	; (8000eb4 <main+0x820>)
 8000ca4:	f00a ffd1 	bl	800bc4a <ModBUS_F03_Read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	2107      	movs	r1, #7
 8000cae:	4881      	ldr	r0, [pc, #516]	; (8000eb4 <main+0x820>)
 8000cb0:	f00a ffcb 	bl	800bc4a <ModBUS_F03_Read>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	2108      	movs	r1, #8
 8000cba:	487e      	ldr	r0, [pc, #504]	; (8000eb4 <main+0x820>)
 8000cbc:	f00a ffc5 	bl	800bc4a <ModBUS_F03_Read>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	2109      	movs	r1, #9
 8000cc6:	487b      	ldr	r0, [pc, #492]	; (8000eb4 <main+0x820>)
 8000cc8:	f00a ffbf 	bl	800bc4a <ModBUS_F03_Read>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd4:	9312      	str	r3, [sp, #72]	; 0x48
 8000cd6:	4b78      	ldr	r3, [pc, #480]	; (8000eb8 <main+0x824>)
 8000cd8:	9311      	str	r3, [sp, #68]	; 0x44
 8000cda:	4b78      	ldr	r3, [pc, #480]	; (8000ebc <main+0x828>)
 8000cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8000cde:	2300      	movs	r3, #0
 8000ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	930d      	str	r3, [sp, #52]	; 0x34
 8000cea:	2300      	movs	r3, #0
 8000cec:	930c      	str	r3, [sp, #48]	; 0x30
 8000cee:	2300      	movs	r3, #0
 8000cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8000cfa:	9208      	str	r2, [sp, #32]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	9207      	str	r2, [sp, #28]
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	9206      	str	r2, [sp, #24]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	9205      	str	r2, [sp, #20]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	9204      	str	r2, [sp, #16]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	9303      	str	r3, [sp, #12]
 8000d10:	9602      	str	r6, [sp, #8]
 8000d12:	9501      	str	r5, [sp, #4]
 8000d14:	9400      	str	r4, [sp, #0]
 8000d16:	4643      	mov	r3, r8
 8000d18:	4a69      	ldr	r2, [pc, #420]	; (8000ec0 <main+0x82c>)
 8000d1a:	496a      	ldr	r1, [pc, #424]	; (8000ec4 <main+0x830>)
 8000d1c:	486a      	ldr	r0, [pc, #424]	; (8000ec8 <main+0x834>)
 8000d1e:	f00a fb3b 	bl	800b398 <httpPOST>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <main+0x6d6>
	  								ModBUS_F03_Read(&mb_eth,7),
	  								ModBUS_F03_Read(&mb_eth,8),
									ModBUS_F03_Read(&mb_eth,9),
									0,0,0,0,0,0,TEPELCO,post, body, 512))
	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d28:	4864      	ldr	r0, [pc, #400]	; (8000ebc <main+0x828>)
 8000d2a:	f7ff fa63 	bl	80001f4 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	2341      	movs	r3, #65	; 0x41
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	4960      	ldr	r1, [pc, #384]	; (8000ebc <main+0x828>)
 8000d3a:	4864      	ldr	r0, [pc, #400]	; (8000ecc <main+0x838>)
 8000d3c:	f00d f9e2 	bl	800e104 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d40:	485e      	ldr	r0, [pc, #376]	; (8000ebc <main+0x828>)
 8000d42:	f7ff fa57 	bl	80001f4 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <main+0x804>)
 8000d4c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d50:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <main+0x804>)
 8000d52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d807      	bhi.n	8000d6a <main+0x6d6>
	  							{
	  								EnviarDatos(&wf);
 8000d5a:	484f      	ldr	r0, [pc, #316]	; (8000e98 <main+0x804>)
 8000d5c:	f005 faae 	bl	80062bc <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d60:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <main+0x804>)
 8000d62:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1_WF==1)||(FLAG_TIMEOUT_WF==1))  //Si recibí datos o me fui por TimeOUT
 8000d6a:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <main+0x83c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d003      	beq.n	8000d7a <main+0x6e6>
 8000d72:	4b58      	ldr	r3, [pc, #352]	; (8000ed4 <main+0x840>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d163      	bne.n	8000e42 <main+0x7ae>
	  		{
	  			if(FLAG_UART1_WF==1)
 8000d7a:	4b55      	ldr	r3, [pc, #340]	; (8000ed0 <main+0x83c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10b      	bne.n	8000d9a <main+0x706>
	  				{
	  					CopiaVector(wf._uartRCVD,UART1_WF_RX_vect_hld,UART1_WF_RX_items,1,CMP_VECT);
 8000d82:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <main+0x844>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b55      	ldr	r3, [pc, #340]	; (8000edc <main+0x848>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4954      	ldr	r1, [pc, #336]	; (8000ee0 <main+0x84c>)
 8000d8e:	4855      	ldr	r0, [pc, #340]	; (8000ee4 <main+0x850>)
 8000d90:	f00d f9b8 	bl	800e104 <CopiaVector>
	  					FLAG_UART1_WF=0;
 8000d94:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <main+0x83c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
	  				}
	  			if(FLAG_TIMEOUT_WF==1)
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <main+0x840>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d102      	bne.n	8000da8 <main+0x714>
	  					{
	  						FLAG_TIMEOUT_WF=0;
 8000da2:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <main+0x840>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000da8:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <main+0x800>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d148      	bne.n	8000e42 <main+0x7ae>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART1_WF_RX_items;
 8000db0:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <main+0x844>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a38      	ldr	r2, [pc, #224]	; (8000e98 <main+0x804>)
 8000db6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART1_WF_RX_vect_hld,UART1_WF_RX_items,1,CMP_VECT);
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <main+0x844>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b47      	ldr	r3, [pc, #284]	; (8000edc <main+0x848>)
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4946      	ldr	r1, [pc, #280]	; (8000ee0 <main+0x84c>)
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <main+0x850>)
 8000dc8:	f00d f99c 	bl	800e104 <CopiaVector>
	  					dummy_int=AT_ESP8266_ND(&wf);
 8000dcc:	4832      	ldr	r0, [pc, #200]	; (8000e98 <main+0x804>)
 8000dce:	f005 fb5b 	bl	8006488 <AT_ESP8266_ND>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a44      	ldr	r2, [pc, #272]	; (8000ee8 <main+0x854>)
 8000dd6:	6013      	str	r3, [r2, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <main+0x804>)
 8000dda:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d12f      	bne.n	8000e42 <main+0x7ae>
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <main+0x804>)
 8000de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000de8:	2b63      	cmp	r3, #99	; 0x63
 8000dea:	d12a      	bne.n	8000e42 <main+0x7ae>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <main+0x804>)
 8000dee:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000df2:	2341      	movs	r3, #65	; 0x41
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	493c      	ldr	r1, [pc, #240]	; (8000eec <main+0x858>)
 8000dfa:	483d      	ldr	r0, [pc, #244]	; (8000ef0 <main+0x85c>)
 8000dfc:	f00d f982 	bl	800e104 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e00:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <main+0x804>)
 8000e02:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e06:	4a3b      	ldr	r2, [pc, #236]	; (8000ef4 <main+0x860>)
 8000e08:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000e0c:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <main+0x860>)
 8000e0e:	f00a ffa1 	bl	800bd54 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <main+0x860>)
 8000e14:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e18:	2341      	movs	r3, #65	; 0x41
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4936      	ldr	r1, [pc, #216]	; (8000ef8 <main+0x864>)
 8000e20:	482a      	ldr	r0, [pc, #168]	; (8000ecc <main+0x838>)
 8000e22:	f00d f96f 	bl	800e104 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <main+0x860>)
 8000e28:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <main+0x804>)
 8000e2e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <main+0x804>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <main+0x804>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <main+0x800>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <main+0x7c8>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	492b      	ldr	r1, [pc, #172]	; (8000efc <main+0x868>)
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <main+0x804>)
 8000e50:	f008 fdc2 	bl	80099d8 <WiFi_Conn_ND>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <main+0x86c>)
 8000e5a:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <main+0x870>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	f47f aed4 	bne.w	8000c0e <main+0x57a>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6c:	4826      	ldr	r0, [pc, #152]	; (8000f08 <main+0x874>)
 8000e6e:	f002 f8a7 	bl	8002fc0 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000e72:	2115      	movs	r1, #21
 8000e74:	4825      	ldr	r0, [pc, #148]	; (8000f0c <main+0x878>)
 8000e76:	f000 fa4f 	bl	8001318 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000e7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7e:	f001 fc3d 	bl	80026fc <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e88:	481f      	ldr	r0, [pc, #124]	; (8000f08 <main+0x874>)
 8000e8a:	f002 f899 	bl	8002fc0 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000e8e:	2118      	movs	r1, #24
 8000e90:	e03e      	b.n	8000f10 <main+0x87c>
 8000e92:	bf00      	nop
 8000e94:	2000316b 	.word	0x2000316b
 8000e98:	200002bc 	.word	0x200002bc
 8000e9c:	0800f6e4 	.word	0x0800f6e4
 8000ea0:	20000021 	.word	0x20000021
 8000ea4:	20000278 	.word	0x20000278
 8000ea8:	20003173 	.word	0x20003173
 8000eac:	20001cb0 	.word	0x20001cb0
 8000eb0:	200035ac 	.word	0x200035ac
 8000eb4:	20001010 	.word	0x20001010
 8000eb8:	20002f18 	.word	0x20002f18
 8000ebc:	20002d18 	.word	0x20002d18
 8000ec0:	2000001c 	.word	0x2000001c
 8000ec4:	2000000c 	.word	0x2000000c
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000550 	.word	0x20000550
 8000ed0:	2000316f 	.word	0x2000316f
 8000ed4:	2000316e 	.word	0x2000316e
 8000ed8:	20003580 	.word	0x20003580
 8000edc:	20003578 	.word	0x20003578
 8000ee0:	20003378 	.word	0x20003378
 8000ee4:	20000950 	.word	0x20000950
 8000ee8:	20003594 	.word	0x20003594
 8000eec:	20000350 	.word	0x20000350
 8000ef0:	20001672 	.word	0x20001672
 8000ef4:	20001660 	.word	0x20001660
 8000ef8:	20001878 	.word	0x20001878
 8000efc:	20000234 	.word	0x20000234
 8000f00:	20003171 	.word	0x20003171
 8000f04:	20003170 	.word	0x20003170
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	0800f6fc 	.word	0x0800f6fc
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <main+0x894>)
 8000f12:	f000 fa01 	bl	8001318 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000f16:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f1a:	f001 fbef 	bl	80026fc <HAL_Delay>
	  				esp_restart=0;
 8000f1e:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <main+0x898>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000f24:	e673      	b.n	8000c0e <main+0x57a>
 8000f26:	bf00      	nop
 8000f28:	0800f714 	.word	0x0800f714
 8000f2c:	20003170 	.word	0x20003170

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00d facf 	bl	800e4e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 f837 	bl	8003028 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc0:	f001 f868 	bl	8002094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2103      	movs	r1, #3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fa99 	bl	8003518 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fec:	f001 f852 	bl	8002094 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	; 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_SPI1_Init+0x64>)
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <MX_SPI1_Init+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SPI1_Init+0x64>)
 800100c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_SPI1_Init+0x64>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_SPI1_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_SPI1_Init+0x64>)
 800104c:	220a      	movs	r2, #10
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_SPI1_Init+0x64>)
 8001052:	f002 fc41 	bl	80038d8 <HAL_SPI_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800105c:	f001 f81a 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000194 	.word	0x20000194
 8001068:	40013000 	.word	0x40013000

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <MX_TIM2_Init+0xf0>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_TIM2_Init+0xf0>)
 80010a6:	2264      	movs	r2, #100	; 0x64
 80010a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <MX_TIM2_Init+0xf0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_TIM2_Init+0xf0>)
 80010b2:	2264      	movs	r2, #100	; 0x64
 80010b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <MX_TIM2_Init+0xf0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_TIM2_Init+0xf0>)
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c2:	4826      	ldr	r0, [pc, #152]	; (800115c <MX_TIM2_Init+0xf0>)
 80010c4:	f002 fefe 	bl	8003ec4 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80010ce:	f000 ffe1 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	481f      	ldr	r0, [pc, #124]	; (800115c <MX_TIM2_Init+0xf0>)
 80010e0:	f003 fb06 	bl	80046f0 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 ffd3 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80010ee:	481b      	ldr	r0, [pc, #108]	; (800115c <MX_TIM2_Init+0xf0>)
 80010f0:	f002 ff37 	bl	8003f62 <HAL_TIM_OC_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 ffcb 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80010fe:	2108      	movs	r1, #8
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <MX_TIM2_Init+0xf0>)
 8001102:	f003 f937 	bl	8004374 <HAL_TIM_OnePulse_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800110c:	f000 ffc2 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4619      	mov	r1, r3
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <MX_TIM2_Init+0xf0>)
 8001120:	f003 fea2 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800112a:	f000 ffb3 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800112e:	2320      	movs	r3, #32
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM2_Init+0xf0>)
 8001146:	f003 fa77 	bl	8004638 <HAL_TIM_OC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001150:	f000 ffa0 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3738      	adds	r7, #56	; 0x38
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200001ec 	.word	0x200001ec

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART1_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001198:	f003 fee8 	bl	8004f6c <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 ff77 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000234 	.word	0x20000234
 80011b0:	40011000 	.word	0x40011000

080011b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART2_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ec:	f003 febe 	bl	8004f6c <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 ff4d 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000278 	.word	0x20000278
 8001204:	40004400 	.word	0x40004400

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <MX_GPIO_Init+0x104>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a39      	ldr	r2, [pc, #228]	; (800130c <MX_GPIO_Init+0x104>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <MX_GPIO_Init+0x104>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <MX_GPIO_Init+0x104>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <MX_GPIO_Init+0x104>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <MX_GPIO_Init+0x104>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_GPIO_Init+0x104>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2b      	ldr	r2, [pc, #172]	; (800130c <MX_GPIO_Init+0x104>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_GPIO_Init+0x104>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_GPIO_Init+0x104>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a24      	ldr	r2, [pc, #144]	; (800130c <MX_GPIO_Init+0x104>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_GPIO_Init+0x104>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	481e      	ldr	r0, [pc, #120]	; (8001310 <MX_GPIO_Init+0x108>)
 8001296:	f001 fe93 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2102      	movs	r1, #2
 800129e:	481d      	ldr	r0, [pc, #116]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012a0:	f001 fe8e 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2110      	movs	r1, #16
 80012a8:	481a      	ldr	r0, [pc, #104]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012aa:	f001 fe89 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_GPIO_Init+0x108>)
 80012c8:	f001 fc12 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 WiFi_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|WiFi_EN_Pin;
 80012cc:	f240 1301 	movw	r3, #257	; 0x101
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012e2:	f001 fc05 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 80012e6:	2312      	movs	r3, #18
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012fe:	f001 fbf7 	bl	8002af0 <HAL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40020800 	.word	0x40020800
 8001314:	40020000 	.word	0x40020000

08001318 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e009      	b.n	800133c <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f987 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf1      	blt.n	8001328 <ITM0_Write+0x10>
  }
  return len;
 8001344:	683b      	ldr	r3, [r7, #0]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 8001356:	4bb7      	ldr	r3, [pc, #732]	; (8001634 <SysTick_Handler+0x2e4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	4ab5      	ldr	r2, [pc, #724]	; (8001634 <SysTick_Handler+0x2e4>)
 800135e:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001360:	4bb5      	ldr	r3, [pc, #724]	; (8001638 <SysTick_Handler+0x2e8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	4ab4      	ldr	r2, [pc, #720]	; (8001638 <SysTick_Handler+0x2e8>)
 8001368:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800136a:	4bb4      	ldr	r3, [pc, #720]	; (800163c <SysTick_Handler+0x2ec>)
 800136c:	7a1b      	ldrb	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <SysTick_Handler+0x2c>
 8001372:	4bb3      	ldr	r3, [pc, #716]	; (8001640 <SysTick_Handler+0x2f0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4ab1      	ldr	r2, [pc, #708]	; (8001640 <SysTick_Handler+0x2f0>)
 800137a:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 800137c:	4baf      	ldr	r3, [pc, #700]	; (800163c <SysTick_Handler+0x2ec>)
 800137e:	7a1b      	ldrb	r3, [r3, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00c      	beq.n	800139e <SysTick_Handler+0x4e>
 8001384:	4bad      	ldr	r3, [pc, #692]	; (800163c <SysTick_Handler+0x2ec>)
 8001386:	88db      	ldrh	r3, [r3, #6]
 8001388:	461a      	mov	r2, r3
 800138a:	4bad      	ldr	r3, [pc, #692]	; (8001640 <SysTick_Handler+0x2f0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	da05      	bge.n	800139e <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 8001392:	4baa      	ldr	r3, [pc, #680]	; (800163c <SysTick_Handler+0x2ec>)
 8001394:	2200      	movs	r2, #0
 8001396:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 8001398:	4ba9      	ldr	r3, [pc, #676]	; (8001640 <SysTick_Handler+0x2f0>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
		}


// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 800139e:	4ba9      	ldr	r3, [pc, #676]	; (8001644 <SysTick_Handler+0x2f4>)
 80013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a4:	f240 2261 	movw	r2, #609	; 0x261
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d005      	beq.n	80013b8 <SysTick_Handler+0x68>
 80013ac:	4ba5      	ldr	r3, [pc, #660]	; (8001644 <SysTick_Handler+0x2f4>)
 80013ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80013b6:	d109      	bne.n	80013cc <SysTick_Handler+0x7c>
 80013b8:	4ba2      	ldr	r3, [pc, #648]	; (8001644 <SysTick_Handler+0x2f4>)
 80013ba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d104      	bne.n	80013cc <SysTick_Handler+0x7c>
 80013c2:	4ba1      	ldr	r3, [pc, #644]	; (8001648 <SysTick_Handler+0x2f8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a9f      	ldr	r2, [pc, #636]	; (8001648 <SysTick_Handler+0x2f8>)
 80013ca:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>=20000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;		//Envío de datos cada 20 segs
 80013cc:	4b9e      	ldr	r3, [pc, #632]	; (8001648 <SysTick_Handler+0x2f8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013d4:	4293      	cmp	r3, r2
 80013d6:	dd0c      	ble.n	80013f2 <SysTick_Handler+0xa2>
 80013d8:	4b9a      	ldr	r3, [pc, #616]	; (8001644 <SysTick_Handler+0x2f4>)
 80013da:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d007      	beq.n	80013f2 <SysTick_Handler+0xa2>
 80013e2:	4b98      	ldr	r3, [pc, #608]	; (8001644 <SysTick_Handler+0x2f4>)
 80013e4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <SysTick_Handler+0xa2>
 80013ec:	4b97      	ldr	r3, [pc, #604]	; (800164c <SysTick_Handler+0x2fc>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 80013f2:	4b97      	ldr	r3, [pc, #604]	; (8001650 <SysTick_Handler+0x300>)
 80013f4:	7b9b      	ldrb	r3, [r3, #14]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10e      	bne.n	8001418 <SysTick_Handler+0xc8>
	{
		ETH.ETH_WDG++;
 80013fa:	4b95      	ldr	r3, [pc, #596]	; (8001650 <SysTick_Handler+0x300>)
 80013fc:	899b      	ldrh	r3, [r3, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b93      	ldr	r3, [pc, #588]	; (8001650 <SysTick_Handler+0x300>)
 8001404:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000) ETH.ETH_WDG=64000;		//Si alcanza valor límite lo dejo en 64000
 8001406:	4b92      	ldr	r3, [pc, #584]	; (8001650 <SysTick_Handler+0x300>)
 8001408:	899b      	ldrh	r3, [r3, #12]
 800140a:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800140e:	d303      	bcc.n	8001418 <SysTick_Handler+0xc8>
 8001410:	4b8f      	ldr	r3, [pc, #572]	; (8001650 <SysTick_Handler+0x300>)
 8001412:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001416:	819a      	strh	r2, [r3, #12]
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)
 8001418:	4b86      	ldr	r3, [pc, #536]	; (8001634 <SysTick_Handler+0x2e4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b64      	cmp	r3, #100	; 0x64
 800141e:	f040 83f5 	bne.w	8001c0c <SysTick_Handler+0x8bc>
  {
	dbgn++;
 8001422:	4b8c      	ldr	r3, [pc, #560]	; (8001654 <SysTick_Handler+0x304>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a8a      	ldr	r2, [pc, #552]	; (8001654 <SysTick_Handler+0x304>)
 800142a:	6013      	str	r3, [r2, #0]
	ms_ticks=0;
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <SysTick_Handler+0x2e4>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
	min_ticks++;
 8001432:	4b89      	ldr	r3, [pc, #548]	; (8001658 <SysTick_Handler+0x308>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a87      	ldr	r2, [pc, #540]	; (8001658 <SysTick_Handler+0x308>)
 800143a:	6013      	str	r3, [r2, #0]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4886      	ldr	r0, [pc, #536]	; (800165c <SysTick_Handler+0x30c>)
 8001442:	f001 fdd6 	bl	8002ff2 <HAL_GPIO_TogglePin>

	if(spi_no_debug)
 8001446:	4b86      	ldr	r3, [pc, #536]	; (8001660 <SysTick_Handler+0x310>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 839f 	beq.w	8001b8e <SysTick_Handler+0x83e>
	  {
	  if(SPI_ETH_READ_EN)
 8001450:	4b84      	ldr	r3, [pc, #528]	; (8001664 <SysTick_Handler+0x314>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 839e 	beq.w	8001b96 <SysTick_Handler+0x846>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 800145a:	2100      	movs	r1, #0
 800145c:	487c      	ldr	r0, [pc, #496]	; (8001650 <SysTick_Handler+0x300>)
 800145e:	f00c f8e7 	bl	800d630 <eth_rd_SOCKET_STAT>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <SysTick_Handler+0x300>)
 8001468:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 800146a:	4b79      	ldr	r3, [pc, #484]	; (8001650 <SysTick_Handler+0x300>)
 800146c:	7b9b      	ldrb	r3, [r3, #14]
 800146e:	2b5f      	cmp	r3, #95	; 0x5f
 8001470:	f200 83c5 	bhi.w	8001bfe <SysTick_Handler+0x8ae>
 8001474:	a201      	add	r2, pc, #4	; (adr r2, 800147c <SysTick_Handler+0x12c>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	080015fd 	.word	0x080015fd
 8001480:	08001bff 	.word	0x08001bff
 8001484:	08001bff 	.word	0x08001bff
 8001488:	08001bff 	.word	0x08001bff
 800148c:	08001bff 	.word	0x08001bff
 8001490:	08001bff 	.word	0x08001bff
 8001494:	08001bff 	.word	0x08001bff
 8001498:	08001bff 	.word	0x08001bff
 800149c:	08001bff 	.word	0x08001bff
 80014a0:	08001bff 	.word	0x08001bff
 80014a4:	08001bff 	.word	0x08001bff
 80014a8:	08001bff 	.word	0x08001bff
 80014ac:	08001bff 	.word	0x08001bff
 80014b0:	08001bff 	.word	0x08001bff
 80014b4:	08001bff 	.word	0x08001bff
 80014b8:	08001bff 	.word	0x08001bff
 80014bc:	08001bff 	.word	0x08001bff
 80014c0:	08001bff 	.word	0x08001bff
 80014c4:	08001bff 	.word	0x08001bff
 80014c8:	08001671 	.word	0x08001671
 80014cc:	080016c3 	.word	0x080016c3
 80014d0:	080016db 	.word	0x080016db
 80014d4:	080016f3 	.word	0x080016f3
 80014d8:	0800170b 	.word	0x0800170b
 80014dc:	08001a6b 	.word	0x08001a6b
 80014e0:	08001bff 	.word	0x08001bff
 80014e4:	08001a83 	.word	0x08001a83
 80014e8:	08001a9b 	.word	0x08001a9b
 80014ec:	08001ad9 	.word	0x08001ad9
 80014f0:	08001b17 	.word	0x08001b17
 80014f4:	08001bff 	.word	0x08001bff
 80014f8:	08001bff 	.word	0x08001bff
 80014fc:	08001bff 	.word	0x08001bff
 8001500:	08001bff 	.word	0x08001bff
 8001504:	08001b2f 	.word	0x08001b2f
 8001508:	08001bff 	.word	0x08001bff
 800150c:	08001bff 	.word	0x08001bff
 8001510:	08001bff 	.word	0x08001bff
 8001514:	08001bff 	.word	0x08001bff
 8001518:	08001bff 	.word	0x08001bff
 800151c:	08001bff 	.word	0x08001bff
 8001520:	08001bff 	.word	0x08001bff
 8001524:	08001bff 	.word	0x08001bff
 8001528:	08001bff 	.word	0x08001bff
 800152c:	08001bff 	.word	0x08001bff
 8001530:	08001bff 	.word	0x08001bff
 8001534:	08001bff 	.word	0x08001bff
 8001538:	08001bff 	.word	0x08001bff
 800153c:	08001bff 	.word	0x08001bff
 8001540:	08001bff 	.word	0x08001bff
 8001544:	08001b47 	.word	0x08001b47
 8001548:	08001bff 	.word	0x08001bff
 800154c:	08001bff 	.word	0x08001bff
 8001550:	08001bff 	.word	0x08001bff
 8001554:	08001bff 	.word	0x08001bff
 8001558:	08001bff 	.word	0x08001bff
 800155c:	08001bff 	.word	0x08001bff
 8001560:	08001bff 	.word	0x08001bff
 8001564:	08001bff 	.word	0x08001bff
 8001568:	08001bff 	.word	0x08001bff
 800156c:	08001bff 	.word	0x08001bff
 8001570:	08001bff 	.word	0x08001bff
 8001574:	08001bff 	.word	0x08001bff
 8001578:	08001bff 	.word	0x08001bff
 800157c:	08001bff 	.word	0x08001bff
 8001580:	08001bff 	.word	0x08001bff
 8001584:	08001b5f 	.word	0x08001b5f
 8001588:	08001bff 	.word	0x08001bff
 800158c:	08001bff 	.word	0x08001bff
 8001590:	08001bff 	.word	0x08001bff
 8001594:	08001bff 	.word	0x08001bff
 8001598:	08001bff 	.word	0x08001bff
 800159c:	08001bff 	.word	0x08001bff
 80015a0:	08001bff 	.word	0x08001bff
 80015a4:	08001bff 	.word	0x08001bff
 80015a8:	08001bff 	.word	0x08001bff
 80015ac:	08001bff 	.word	0x08001bff
 80015b0:	08001bff 	.word	0x08001bff
 80015b4:	08001bff 	.word	0x08001bff
 80015b8:	08001bff 	.word	0x08001bff
 80015bc:	08001bff 	.word	0x08001bff
 80015c0:	08001bff 	.word	0x08001bff
 80015c4:	08001bff 	.word	0x08001bff
 80015c8:	08001bff 	.word	0x08001bff
 80015cc:	08001bff 	.word	0x08001bff
 80015d0:	08001bff 	.word	0x08001bff
 80015d4:	08001bff 	.word	0x08001bff
 80015d8:	08001bff 	.word	0x08001bff
 80015dc:	08001bff 	.word	0x08001bff
 80015e0:	08001bff 	.word	0x08001bff
 80015e4:	08001bff 	.word	0x08001bff
 80015e8:	08001bff 	.word	0x08001bff
 80015ec:	08001bff 	.word	0x08001bff
 80015f0:	08001bff 	.word	0x08001bff
 80015f4:	08001bff 	.word	0x08001bff
 80015f8:	08001b77 	.word	0x08001b77
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <SysTick_Handler+0x318>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <SysTick_Handler+0x2bc>
 8001604:	2113      	movs	r1, #19
 8001606:	4819      	ldr	r0, [pc, #100]	; (800166c <SysTick_Handler+0x31c>)
 8001608:	f7ff fe86 	bl	8001318 <ITM0_Write>
					 eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 800160c:	2201      	movs	r2, #1
 800160e:	2100      	movs	r1, #0
 8001610:	480f      	ldr	r0, [pc, #60]	; (8001650 <SysTick_Handler+0x300>)
 8001612:	f00b fedb 	bl	800d3cc <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <SysTick_Handler+0x300>)
 8001618:	899b      	ldrh	r3, [r3, #12]
 800161a:	f241 3287 	movw	r2, #4999	; 0x1387
 800161e:	4293      	cmp	r3, r2
 8001620:	f240 82bb 	bls.w	8001b9a <SysTick_Handler+0x84a>
					 {
						 eth_init(&ETH);
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <SysTick_Handler+0x300>)
 8001626:	f00b ff0d 	bl	800d444 <eth_init>
						 eth_socket_init(&ETH,0);
 800162a:	2100      	movs	r1, #0
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <SysTick_Handler+0x300>)
 800162e:	f00b ff83 	bl	800d538 <eth_socket_init>
					 }

				 }
			 break;
 8001632:	e2b2      	b.n	8001b9a <SysTick_Handler+0x84a>
 8001634:	20003118 	.word	0x20003118
 8001638:	20003584 	.word	0x20003584
 800163c:	20001010 	.word	0x20001010
 8001640:	20003588 	.word	0x20003588
 8001644:	200002bc 	.word	0x200002bc
 8001648:	200035ac 	.word	0x200035ac
 800164c:	20003173 	.word	0x20003173
 8001650:	20001cb0 	.word	0x20001cb0
 8001654:	200035b0 	.word	0x200035b0
 8001658:	2000311c 	.word	0x2000311c
 800165c:	40020800 	.word	0x40020800
 8001660:	20003168 	.word	0x20003168
 8001664:	20003174 	.word	0x20003174
 8001668:	20003172 	.word	0x20003172
 800166c:	0800f730 	.word	0x0800f730
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001670:	4baa      	ldr	r3, [pc, #680]	; (800191c <SysTick_Handler+0x5cc>)
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800167a:	2b01      	cmp	r3, #1
 800167c:	d110      	bne.n	80016a0 <SysTick_Handler+0x350>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 800167e:	4ba8      	ldr	r3, [pc, #672]	; (8001920 <SysTick_Handler+0x5d0>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <SysTick_Handler+0x33e>
 8001686:	2111      	movs	r1, #17
 8001688:	48a6      	ldr	r0, [pc, #664]	; (8001924 <SysTick_Handler+0x5d4>)
 800168a:	f7ff fe45 	bl	8001318 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 800168e:	2202      	movs	r2, #2
 8001690:	2100      	movs	r1, #0
 8001692:	48a2      	ldr	r0, [pc, #648]	; (800191c <SysTick_Handler+0x5cc>)
 8001694:	f00b fe9a 	bl	800d3cc <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001698:	4ba0      	ldr	r3, [pc, #640]	; (800191c <SysTick_Handler+0x5cc>)
 800169a:	2200      	movs	r2, #0
 800169c:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 800169e:	e2ae      	b.n	8001bfe <SysTick_Handler+0x8ae>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 80016a0:	2204      	movs	r2, #4
 80016a2:	2100      	movs	r1, #0
 80016a4:	489d      	ldr	r0, [pc, #628]	; (800191c <SysTick_Handler+0x5cc>)
 80016a6:	f00b fe91 	bl	800d3cc <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 80016aa:	4b9d      	ldr	r3, [pc, #628]	; (8001920 <SysTick_Handler+0x5d0>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <SysTick_Handler+0x36a>
 80016b2:	2115      	movs	r1, #21
 80016b4:	489c      	ldr	r0, [pc, #624]	; (8001928 <SysTick_Handler+0x5d8>)
 80016b6:	f7ff fe2f 	bl	8001318 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 80016ba:	4b98      	ldr	r3, [pc, #608]	; (800191c <SysTick_Handler+0x5cc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	819a      	strh	r2, [r3, #12]
			 break;
 80016c0:	e29d      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 80016c2:	4b97      	ldr	r3, [pc, #604]	; (8001920 <SysTick_Handler+0x5d0>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <SysTick_Handler+0x382>
 80016ca:	2113      	movs	r1, #19
 80016cc:	4897      	ldr	r0, [pc, #604]	; (800192c <SysTick_Handler+0x5dc>)
 80016ce:	f7ff fe23 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80016d2:	4b92      	ldr	r3, [pc, #584]	; (800191c <SysTick_Handler+0x5cc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80016d8:	e291      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 80016da:	4b91      	ldr	r3, [pc, #580]	; (8001920 <SysTick_Handler+0x5d0>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <SysTick_Handler+0x39a>
 80016e2:	2114      	movs	r1, #20
 80016e4:	4892      	ldr	r0, [pc, #584]	; (8001930 <SysTick_Handler+0x5e0>)
 80016e6:	f7ff fe17 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80016ea:	4b8c      	ldr	r3, [pc, #560]	; (800191c <SysTick_Handler+0x5cc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80016f0:	e285      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <SysTick_Handler+0x5d0>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <SysTick_Handler+0x3b2>
 80016fa:	2114      	movs	r1, #20
 80016fc:	488d      	ldr	r0, [pc, #564]	; (8001934 <SysTick_Handler+0x5e4>)
 80016fe:	f7ff fe0b 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001702:	4b86      	ldr	r3, [pc, #536]	; (800191c <SysTick_Handler+0x5cc>)
 8001704:	2200      	movs	r2, #0
 8001706:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001708:	e279      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 800170a:	4b85      	ldr	r3, [pc, #532]	; (8001920 <SysTick_Handler+0x5d0>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <SysTick_Handler+0x3ca>
 8001712:	2118      	movs	r1, #24
 8001714:	4888      	ldr	r0, [pc, #544]	; (8001938 <SysTick_Handler+0x5e8>)
 8001716:	f7ff fdff 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800171a:	4b80      	ldr	r3, [pc, #512]	; (800191c <SysTick_Handler+0x5cc>)
 800171c:	2200      	movs	r2, #0
 800171e:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001720:	4b7e      	ldr	r3, [pc, #504]	; (800191c <SysTick_Handler+0x5cc>)
 8001722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800172a:	2b01      	cmp	r3, #1
 800172c:	f040 8089 	bne.w	8001842 <SysTick_Handler+0x4f2>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001730:	2302      	movs	r3, #2
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	4b81      	ldr	r3, [pc, #516]	; (800193c <SysTick_Handler+0x5ec>)
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	230f      	movs	r3, #15
 800173a:	2226      	movs	r2, #38	; 0x26
 800173c:	2104      	movs	r1, #4
 800173e:	4877      	ldr	r0, [pc, #476]	; (800191c <SysTick_Handler+0x5cc>)
 8001740:	f00b fd19 	bl	800d176 <SPI_ETH_REG>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b7d      	ldr	r3, [pc, #500]	; (8001940 <SysTick_Handler+0x5f0>)
 800174a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 800174c:	4b7c      	ldr	r3, [pc, #496]	; (8001940 <SysTick_Handler+0x5f0>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 8253 	beq.w	8001bfc <SysTick_Handler+0x8ac>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001756:	4b7a      	ldr	r3, [pc, #488]	; (8001940 <SysTick_Handler+0x5f0>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	4a7a      	ldr	r2, [pc, #488]	; (8001944 <SysTick_Handler+0x5f4>)
 800175c:	2100      	movs	r1, #0
 800175e:	486f      	ldr	r0, [pc, #444]	; (800191c <SysTick_Handler+0x5cc>)
 8001760:	f00b ffa0 	bl	800d6a4 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001764:	4b77      	ldr	r3, [pc, #476]	; (8001944 <SysTick_Handler+0x5f4>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 800176e:	486b      	ldr	r0, [pc, #428]	; (800191c <SysTick_Handler+0x5cc>)
 8001770:	f00b fd79 	bl	800d266 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001774:	2240      	movs	r2, #64	; 0x40
 8001776:	2100      	movs	r1, #0
 8001778:	4868      	ldr	r0, [pc, #416]	; (800191c <SysTick_Handler+0x5cc>)
 800177a:	f00b fe27 	bl	800d3cc <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 800177e:	bf00      	nop
 8001780:	2100      	movs	r1, #0
 8001782:	4866      	ldr	r0, [pc, #408]	; (800191c <SysTick_Handler+0x5cc>)
 8001784:	f00b ff71 	bl	800d66a <eth_rd_SOCKET_CMD>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f8      	bne.n	8001780 <SysTick_Handler+0x430>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 800178e:	4b6c      	ldr	r3, [pc, #432]	; (8001940 <SysTick_Handler+0x5f0>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	2300      	movs	r3, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2300      	movs	r3, #0
 800179a:	496b      	ldr	r1, [pc, #428]	; (8001948 <SysTick_Handler+0x5f8>)
 800179c:	486b      	ldr	r0, [pc, #428]	; (800194c <SysTick_Handler+0x5fc>)
 800179e:	f00c fcb1 	bl	800e104 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80017a2:	4b67      	ldr	r3, [pc, #412]	; (8001940 <SysTick_Handler+0x5f0>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b69      	ldr	r3, [pc, #420]	; (8001950 <SysTick_Handler+0x600>)
 80017aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 80017ae:	4b64      	ldr	r3, [pc, #400]	; (8001940 <SysTick_Handler+0x5f0>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <SysTick_Handler+0x46c>
 80017b6:	4b59      	ldr	r3, [pc, #356]	; (800191c <SysTick_Handler+0x5cc>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 80017bc:	4b64      	ldr	r3, [pc, #400]	; (8001950 <SysTick_Handler+0x600>)
 80017be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80017c2:	4619      	mov	r1, r3
 80017c4:	4861      	ldr	r0, [pc, #388]	; (800194c <SysTick_Handler+0x5fc>)
 80017c6:	f00a f9c5 	bl	800bb54 <ModBUS_Check>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00d      	beq.n	80017ec <SysTick_Handler+0x49c>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 80017d0:	485f      	ldr	r0, [pc, #380]	; (8001950 <SysTick_Handler+0x600>)
 80017d2:	f00a fabf 	bl	800bd54 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 80017d6:	4b5e      	ldr	r3, [pc, #376]	; (8001950 <SysTick_Handler+0x600>)
 80017d8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	495c      	ldr	r1, [pc, #368]	; (8001954 <SysTick_Handler+0x604>)
 80017e4:	4858      	ldr	r0, [pc, #352]	; (8001948 <SysTick_Handler+0x5f8>)
 80017e6:	f00c fc8d 	bl	800e104 <CopiaVector>
 80017ea:	e007      	b.n	80017fc <SysTick_Handler+0x4ac>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 80017ec:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <SysTick_Handler+0x5d0>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <SysTick_Handler+0x4ac>
 80017f4:	2111      	movs	r1, #17
 80017f6:	4858      	ldr	r0, [pc, #352]	; (8001958 <SysTick_Handler+0x608>)
 80017f8:	f7ff fd8e 	bl	8001318 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 80017fc:	4b54      	ldr	r3, [pc, #336]	; (8001950 <SysTick_Handler+0x600>)
 80017fe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b55      	ldr	r3, [pc, #340]	; (800195c <SysTick_Handler+0x60c>)
 8001806:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <SysTick_Handler+0x60c>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	4a54      	ldr	r2, [pc, #336]	; (8001960 <SysTick_Handler+0x610>)
 800180e:	2100      	movs	r1, #0
 8001810:	4842      	ldr	r0, [pc, #264]	; (800191c <SysTick_Handler+0x5cc>)
 8001812:	f00c f817 	bl	800d844 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001816:	4b52      	ldr	r3, [pc, #328]	; (8001960 <SysTick_Handler+0x610>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	f240 4124 	movw	r1, #1060	; 0x424
 8001820:	483e      	ldr	r0, [pc, #248]	; (800191c <SysTick_Handler+0x5cc>)
 8001822:	f00b fd20 	bl	800d266 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001826:	2220      	movs	r2, #32
 8001828:	2100      	movs	r1, #0
 800182a:	483c      	ldr	r0, [pc, #240]	; (800191c <SysTick_Handler+0x5cc>)
 800182c:	f00b fdce 	bl	800d3cc <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001830:	bf00      	nop
 8001832:	2100      	movs	r1, #0
 8001834:	4839      	ldr	r0, [pc, #228]	; (800191c <SysTick_Handler+0x5cc>)
 8001836:	f00b ff18 	bl	800d66a <eth_rd_SOCKET_CMD>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f8      	bne.n	8001832 <SysTick_Handler+0x4e2>

							}
						}
					}
				 }
			 break;
 8001840:	e1dc      	b.n	8001bfc <SysTick_Handler+0x8ac>
						if (mb_eth._w_answer==0)
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <SysTick_Handler+0x600>)
 8001844:	7a1b      	ldrb	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 8090 	bne.w	800196c <SysTick_Handler+0x61c>
							ETH.data[0]=0x00;
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <SysTick_Handler+0x5cc>)
 800184e:	2200      	movs	r2, #0
 8001850:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001852:	4b32      	ldr	r3, [pc, #200]	; (800191c <SysTick_Handler+0x5cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <SysTick_Handler+0x5cc>)
 800185a:	2200      	movs	r2, #0
 800185c:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <SysTick_Handler+0x5cc>)
 8001860:	2200      	movs	r2, #0
 8001862:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <SysTick_Handler+0x5cc>)
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <SysTick_Handler+0x5cc>)
 800186e:	2206      	movs	r2, #6
 8001870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <SysTick_Handler+0x5cc>)
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <SysTick_Handler+0x5cc>)
 800187e:	2203      	movs	r2, #3
 8001880:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <SysTick_Handler+0x5cc>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <SysTick_Handler+0x5cc>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <SysTick_Handler+0x5cc>)
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <SysTick_Handler+0x5cc>)
 800189e:	220a      	movs	r2, #10
 80018a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <SysTick_Handler+0x60c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 80018aa:	220f      	movs	r2, #15
 80018ac:	2100      	movs	r1, #0
 80018ae:	4828      	ldr	r0, [pc, #160]	; (8001950 <SysTick_Handler+0x600>)
 80018b0:	f00a f9f9 	bl	800bca6 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 80018b4:	2300      	movs	r3, #0
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	220c      	movs	r2, #12
 80018bc:	4925      	ldr	r1, [pc, #148]	; (8001954 <SysTick_Handler+0x604>)
 80018be:	4822      	ldr	r0, [pc, #136]	; (8001948 <SysTick_Handler+0x5f8>)
 80018c0:	f00c fc20 	bl	800e104 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <SysTick_Handler+0x60c>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	4a25      	ldr	r2, [pc, #148]	; (8001960 <SysTick_Handler+0x610>)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <SysTick_Handler+0x5cc>)
 80018ce:	f00b ffb9 	bl	800d844 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <SysTick_Handler+0x610>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	f240 4124 	movw	r1, #1060	; 0x424
 80018dc:	480f      	ldr	r0, [pc, #60]	; (800191c <SysTick_Handler+0x5cc>)
 80018de:	f00b fcc2 	bl	800d266 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 80018e2:	2220      	movs	r2, #32
 80018e4:	2100      	movs	r1, #0
 80018e6:	480d      	ldr	r0, [pc, #52]	; (800191c <SysTick_Handler+0x5cc>)
 80018e8:	f00b fd70 	bl	800d3cc <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80018ec:	bf00      	nop
 80018ee:	2100      	movs	r1, #0
 80018f0:	480a      	ldr	r0, [pc, #40]	; (800191c <SysTick_Handler+0x5cc>)
 80018f2:	f00b feba 	bl	800d66a <eth_rd_SOCKET_CMD>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f8      	bne.n	80018ee <SysTick_Handler+0x59e>
							mb_eth._w_answer=1;	// Waiting answer flag
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <SysTick_Handler+0x600>)
 80018fe:	2201      	movs	r2, #1
 8001900:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <SysTick_Handler+0x614>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Handler+0x5d0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8175 	beq.w	8001bfc <SysTick_Handler+0x8ac>
 8001912:	2117      	movs	r1, #23
 8001914:	4814      	ldr	r0, [pc, #80]	; (8001968 <SysTick_Handler+0x618>)
 8001916:	f7ff fcff 	bl	8001318 <ITM0_Write>
			 break;
 800191a:	e16f      	b.n	8001bfc <SysTick_Handler+0x8ac>
 800191c:	20001cb0 	.word	0x20001cb0
 8001920:	20003172 	.word	0x20003172
 8001924:	0800f744 	.word	0x0800f744
 8001928:	0800f758 	.word	0x0800f758
 800192c:	0800f770 	.word	0x0800f770
 8001930:	0800f784 	.word	0x0800f784
 8001934:	0800f79c 	.word	0x0800f79c
 8001938:	0800f7b4 	.word	0x0800f7b4
 800193c:	20003128 	.word	0x20003128
 8001940:	20003120 	.word	0x20003120
 8001944:	20003124 	.word	0x20003124
 8001948:	20001ccc 	.word	0x20001ccc
 800194c:	20001022 	.word	0x20001022
 8001950:	20001010 	.word	0x20001010
 8001954:	20001228 	.word	0x20001228
 8001958:	0800f7d0 	.word	0x0800f7d0
 800195c:	20003126 	.word	0x20003126
 8001960:	20003122 	.word	0x20003122
 8001964:	20003588 	.word	0x20003588
 8001968:	0800f7e0 	.word	0x0800f7e0
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800196c:	2302      	movs	r3, #2
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <SysTick_Handler+0x850>)
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	230f      	movs	r3, #15
 8001976:	2226      	movs	r2, #38	; 0x26
 8001978:	2104      	movs	r1, #4
 800197a:	488a      	ldr	r0, [pc, #552]	; (8001ba4 <SysTick_Handler+0x854>)
 800197c:	f00b fbfb 	bl	800d176 <SPI_ETH_REG>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <SysTick_Handler+0x858>)
 8001986:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001988:	4b87      	ldr	r3, [pc, #540]	; (8001ba8 <SysTick_Handler+0x858>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8135 	beq.w	8001bfc <SysTick_Handler+0x8ac>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001992:	4b85      	ldr	r3, [pc, #532]	; (8001ba8 <SysTick_Handler+0x858>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	4a85      	ldr	r2, [pc, #532]	; (8001bac <SysTick_Handler+0x85c>)
 8001998:	2100      	movs	r1, #0
 800199a:	4882      	ldr	r0, [pc, #520]	; (8001ba4 <SysTick_Handler+0x854>)
 800199c:	f00b fe82 	bl	800d6a4 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 80019a0:	4b82      	ldr	r3, [pc, #520]	; (8001bac <SysTick_Handler+0x85c>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80019aa:	487e      	ldr	r0, [pc, #504]	; (8001ba4 <SysTick_Handler+0x854>)
 80019ac:	f00b fc5b 	bl	800d266 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 80019b0:	2240      	movs	r2, #64	; 0x40
 80019b2:	2100      	movs	r1, #0
 80019b4:	487b      	ldr	r0, [pc, #492]	; (8001ba4 <SysTick_Handler+0x854>)
 80019b6:	f00b fd09 	bl	800d3cc <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80019ba:	bf00      	nop
 80019bc:	2100      	movs	r1, #0
 80019be:	4879      	ldr	r0, [pc, #484]	; (8001ba4 <SysTick_Handler+0x854>)
 80019c0:	f00b fe53 	bl	800d66a <eth_rd_SOCKET_CMD>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f8      	bne.n	80019bc <SysTick_Handler+0x66c>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80019ca:	4b77      	ldr	r3, [pc, #476]	; (8001ba8 <SysTick_Handler+0x858>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2300      	movs	r3, #0
 80019d6:	4976      	ldr	r1, [pc, #472]	; (8001bb0 <SysTick_Handler+0x860>)
 80019d8:	4876      	ldr	r0, [pc, #472]	; (8001bb4 <SysTick_Handler+0x864>)
 80019da:	f00c fb93 	bl	800e104 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80019de:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <SysTick_Handler+0x858>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b74      	ldr	r3, [pc, #464]	; (8001bb8 <SysTick_Handler+0x868>)
 80019e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 80019ea:	4b6f      	ldr	r3, [pc, #444]	; (8001ba8 <SysTick_Handler+0x858>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <SysTick_Handler+0x6a8>
 80019f2:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <SysTick_Handler+0x854>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 80019f8:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <SysTick_Handler+0x868>)
 80019fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80019fe:	4619      	mov	r1, r3
 8001a00:	486c      	ldr	r0, [pc, #432]	; (8001bb4 <SysTick_Handler+0x864>)
 8001a02:	f00a f8a7 	bl	800bb54 <ModBUS_Check>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d024      	beq.n	8001a56 <SysTick_Handler+0x706>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <SysTick_Handler+0x868>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001a12:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <SysTick_Handler+0x86c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a18:	4867      	ldr	r0, [pc, #412]	; (8001bb8 <SysTick_Handler+0x868>)
 8001a1a:	f00a f99b 	bl	800bd54 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001a1e:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <SysTick_Handler+0x868>)
 8001a20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	4962      	ldr	r1, [pc, #392]	; (8001bb4 <SysTick_Handler+0x864>)
 8001a2c:	4864      	ldr	r0, [pc, #400]	; (8001bc0 <SysTick_Handler+0x870>)
 8001a2e:	f00c fb69 	bl	800e104 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001a32:	2300      	movs	r3, #0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2300      	movs	r3, #0
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	4962      	ldr	r1, [pc, #392]	; (8001bc4 <SysTick_Handler+0x874>)
 8001a3c:	4862      	ldr	r0, [pc, #392]	; (8001bc8 <SysTick_Handler+0x878>)
 8001a3e:	f00c fb61 	bl	800e104 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001a42:	4b62      	ldr	r3, [pc, #392]	; (8001bcc <SysTick_Handler+0x87c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80d8 	beq.w	8001bfc <SysTick_Handler+0x8ac>
 8001a4c:	2117      	movs	r1, #23
 8001a4e:	4860      	ldr	r0, [pc, #384]	; (8001bd0 <SysTick_Handler+0x880>)
 8001a50:	f7ff fc62 	bl	8001318 <ITM0_Write>
			 break;
 8001a54:	e0d2      	b.n	8001bfc <SysTick_Handler+0x8ac>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001a56:	4b5d      	ldr	r3, [pc, #372]	; (8001bcc <SysTick_Handler+0x87c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80ce 	beq.w	8001bfc <SysTick_Handler+0x8ac>
 8001a60:	2111      	movs	r1, #17
 8001a62:	485c      	ldr	r0, [pc, #368]	; (8001bd4 <SysTick_Handler+0x884>)
 8001a64:	f7ff fc58 	bl	8001318 <ITM0_Write>
			 break;
 8001a68:	e0c8      	b.n	8001bfc <SysTick_Handler+0x8ac>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001a6a:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <SysTick_Handler+0x87c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <SysTick_Handler+0x72a>
 8001a72:	2115      	movs	r1, #21
 8001a74:	4858      	ldr	r0, [pc, #352]	; (8001bd8 <SysTick_Handler+0x888>)
 8001a76:	f7ff fc4f 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <SysTick_Handler+0x854>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a80:	e0bd      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001a82:	4b52      	ldr	r3, [pc, #328]	; (8001bcc <SysTick_Handler+0x87c>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <SysTick_Handler+0x742>
 8001a8a:	2114      	movs	r1, #20
 8001a8c:	4853      	ldr	r0, [pc, #332]	; (8001bdc <SysTick_Handler+0x88c>)
 8001a8e:	f7ff fc43 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a92:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <SysTick_Handler+0x854>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a98:	e0b1      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <SysTick_Handler+0x87c>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <SysTick_Handler+0x75a>
 8001aa2:	2116      	movs	r1, #22
 8001aa4:	484e      	ldr	r0, [pc, #312]	; (8001be0 <SysTick_Handler+0x890>)
 8001aa6:	f7ff fc37 	bl	8001318 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001aaa:	2208      	movs	r2, #8
 8001aac:	2100      	movs	r1, #0
 8001aae:	483d      	ldr	r0, [pc, #244]	; (8001ba4 <SysTick_Handler+0x854>)
 8001ab0:	f00b fc8c 	bl	800d3cc <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ab4:	bf00      	nop
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <SysTick_Handler+0x850>)
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	230f      	movs	r3, #15
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	4837      	ldr	r0, [pc, #220]	; (8001ba4 <SysTick_Handler+0x854>)
 8001ac6:	f00b fb56 	bl	800d176 <SPI_ETH_REG>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f2      	bne.n	8001ab6 <SysTick_Handler+0x766>
					{}
					ETH.ETH_WDG=0;
 8001ad0:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <SysTick_Handler+0x854>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ad6:	e092      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001ad8:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <SysTick_Handler+0x87c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <SysTick_Handler+0x798>
 8001ae0:	2117      	movs	r1, #23
 8001ae2:	4840      	ldr	r0, [pc, #256]	; (8001be4 <SysTick_Handler+0x894>)
 8001ae4:	f7ff fc18 	bl	8001318 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001ae8:	2208      	movs	r2, #8
 8001aea:	2100      	movs	r1, #0
 8001aec:	482d      	ldr	r0, [pc, #180]	; (8001ba4 <SysTick_Handler+0x854>)
 8001aee:	f00b fc6d 	bl	800d3cc <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001af2:	bf00      	nop
 8001af4:	2301      	movs	r3, #1
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <SysTick_Handler+0x850>)
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	230f      	movs	r3, #15
 8001afe:	2201      	movs	r2, #1
 8001b00:	2104      	movs	r1, #4
 8001b02:	4828      	ldr	r0, [pc, #160]	; (8001ba4 <SysTick_Handler+0x854>)
 8001b04:	f00b fb37 	bl	800d176 <SPI_ETH_REG>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f2      	bne.n	8001af4 <SysTick_Handler+0x7a4>
					{}
					ETH.ETH_WDG=0;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <SysTick_Handler+0x854>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b14:	e073      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <SysTick_Handler+0x87c>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <SysTick_Handler+0x7d6>
 8001b1e:	2115      	movs	r1, #21
 8001b20:	4831      	ldr	r0, [pc, #196]	; (8001be8 <SysTick_Handler+0x898>)
 8001b22:	f7ff fbf9 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <SysTick_Handler+0x854>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b2c:	e067      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001b2e:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <SysTick_Handler+0x87c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <SysTick_Handler+0x7ee>
 8001b36:	2110      	movs	r1, #16
 8001b38:	482c      	ldr	r0, [pc, #176]	; (8001bec <SysTick_Handler+0x89c>)
 8001b3a:	f7ff fbed 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <SysTick_Handler+0x854>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b44:	e05b      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <SysTick_Handler+0x87c>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <SysTick_Handler+0x806>
 8001b4e:	2112      	movs	r1, #18
 8001b50:	4827      	ldr	r0, [pc, #156]	; (8001bf0 <SysTick_Handler+0x8a0>)
 8001b52:	f7ff fbe1 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <SysTick_Handler+0x854>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b5c:	e04f      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <SysTick_Handler+0x87c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <SysTick_Handler+0x81e>
 8001b66:	2113      	movs	r1, #19
 8001b68:	4822      	ldr	r0, [pc, #136]	; (8001bf4 <SysTick_Handler+0x8a4>)
 8001b6a:	f7ff fbd5 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <SysTick_Handler+0x854>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b74:	e043      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <SysTick_Handler+0x87c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <SysTick_Handler+0x836>
 8001b7e:	2111      	movs	r1, #17
 8001b80:	481d      	ldr	r0, [pc, #116]	; (8001bf8 <SysTick_Handler+0x8a8>)
 8001b82:	f7ff fbc9 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <SysTick_Handler+0x854>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b8c:	e037      	b.n	8001bfe <SysTick_Handler+0x8ae>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <SysTick_Handler+0x854>)
 8001b90:	f00b faca 	bl	800d128 <SPI_ETH>
 8001b94:	e033      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 default:
 8001b96:	bf00      	nop
 8001b98:	e031      	b.n	8001bfe <SysTick_Handler+0x8ae>
			 break;
 8001b9a:	bf00      	nop
 8001b9c:	e02f      	b.n	8001bfe <SysTick_Handler+0x8ae>
 8001b9e:	bf00      	nop
 8001ba0:	20003128 	.word	0x20003128
 8001ba4:	20001cb0 	.word	0x20001cb0
 8001ba8:	20003120 	.word	0x20003120
 8001bac:	20003124 	.word	0x20003124
 8001bb0:	20001ccc 	.word	0x20001ccc
 8001bb4:	20001022 	.word	0x20001022
 8001bb8:	20001010 	.word	0x20001010
 8001bbc:	20003588 	.word	0x20003588
 8001bc0:	200024cc 	.word	0x200024cc
 8001bc4:	20001434 	.word	0x20001434
 8001bc8:	20001a84 	.word	0x20001a84
 8001bcc:	20003172 	.word	0x20003172
 8001bd0:	0800f7f4 	.word	0x0800f7f4
 8001bd4:	0800f7d0 	.word	0x0800f7d0
 8001bd8:	0800f808 	.word	0x0800f808
 8001bdc:	0800f820 	.word	0x0800f820
 8001be0:	0800f838 	.word	0x0800f838
 8001be4:	0800f850 	.word	0x0800f850
 8001be8:	0800f868 	.word	0x0800f868
 8001bec:	0800f880 	.word	0x0800f880
 8001bf0:	0800f894 	.word	0x0800f894
 8001bf4:	0800f8a8 	.word	0x0800f8a8
 8001bf8:	0800f8bc 	.word	0x0800f8bc
			 break;
 8001bfc:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <SysTick_Handler+0x9e0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d102      	bne.n	8001c0c <SysTick_Handler+0x8bc>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001c06:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <SysTick_Handler+0x9e0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001c0c:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <SysTick_Handler+0x9e4>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d104      	bne.n	8001c1e <SysTick_Handler+0x8ce>
 8001c14:	4b48      	ldr	r3, [pc, #288]	; (8001d38 <SysTick_Handler+0x9e8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a47      	ldr	r2, [pc, #284]	; (8001d38 <SysTick_Handler+0x9e8>)
 8001c1c:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001c1e:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <SysTick_Handler+0x9e8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	dd0f      	ble.n	8001c46 <SysTick_Handler+0x8f6>
	{
		USART1_ticks=0;
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <SysTick_Handler+0x9e8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001c2c:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <SysTick_Handler+0x9ec>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001c32:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <SysTick_Handler+0x9e4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001c38:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <SysTick_Handler+0x9f0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a41      	ldr	r2, [pc, #260]	; (8001d44 <SysTick_Handler+0x9f4>)
 8001c3e:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001c40:	4b3f      	ldr	r3, [pc, #252]	; (8001d40 <SysTick_Handler+0x9f0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c46:	f000 fd39 	bl	80026bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//Solo cuento cuando no estahaciendo otra cosa
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d105      	bne.n	8001c60 <SysTick_Handler+0x910>
	{
		ticks++;
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <SysTick_Handler+0x9fc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <SysTick_Handler+0x9fc>)
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e002      	b.n	8001c66 <SysTick_Handler+0x916>
	}
	else
	{
		ticks=0;
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <SysTick_Handler+0x9fc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001c66:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001c68:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d158      	bne.n	8001d22 <SysTick_Handler+0x9d2>
	{
		if (FLAG_TIMEOUT_WF!=1)
 8001c70:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <SysTick_Handler+0xa00>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d017      	beq.n	8001ca8 <SysTick_Handler+0x958>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001c78:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001c7a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d006      	beq.n	8001c90 <SysTick_Handler+0x940>
 8001c82:	4b31      	ldr	r3, [pc, #196]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001c84:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001c8c:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001c92:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d106      	bne.n	8001ca8 <SysTick_Handler+0x958>
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001c9c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001ca4:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001caa:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d018      	beq.n	8001ce4 <SysTick_Handler+0x994>
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001cb4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001cb8:	f241 527c 	movw	r2, #5500	; 0x157c
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	dd11      	ble.n	8001ce4 <SysTick_Handler+0x994>
		{
			FLAG_TIMEOUT_WF=1;
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <SysTick_Handler+0xa00>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <SysTick_Handler+0xa04>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f242 020c 	movw	r2, #8204	; 0x200c
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d107      	bne.n	8001ce4 <SysTick_Handler+0x994>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4920      	ldr	r1, [pc, #128]	; (8001d58 <SysTick_Handler+0xa08>)
 8001cd8:	481e      	ldr	r0, [pc, #120]	; (8001d54 <SysTick_Handler+0xa04>)
 8001cda:	f003 fa9a 	bl	8005212 <HAL_UART_Receive_IT>
				EN_UART1_WF_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <SysTick_Handler+0xa0c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
			}
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001ce6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d11d      	bne.n	8001d2a <SysTick_Handler+0x9da>
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001cf0:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001cf4:	f245 0214 	movw	r2, #20500	; 0x5014
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	dd16      	ble.n	8001d2a <SysTick_Handler+0x9da>
		{
			FLAG_TIMEOUT_WF=1;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <SysTick_Handler+0xa00>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <SysTick_Handler+0xa04>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f242 020c 	movw	r2, #8204	; 0x200c
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d10c      	bne.n	8001d2a <SysTick_Handler+0x9da>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);
 8001d10:	2201      	movs	r2, #1
 8001d12:	4911      	ldr	r1, [pc, #68]	; (8001d58 <SysTick_Handler+0xa08>)
 8001d14:	480f      	ldr	r0, [pc, #60]	; (8001d54 <SysTick_Handler+0xa04>)
 8001d16:	f003 fa7c 	bl	8005212 <HAL_UART_Receive_IT>
				EN_UART1_WF_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <SysTick_Handler+0xa0c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d20:	e003      	b.n	8001d2a <SysTick_Handler+0x9da>
		wf._ticks=0;
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <SysTick_Handler+0x9f8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000311c 	.word	0x2000311c
 8001d34:	2000316d 	.word	0x2000316d
 8001d38:	2000359c 	.word	0x2000359c
 8001d3c:	200035a0 	.word	0x200035a0
 8001d40:	20003598 	.word	0x20003598
 8001d44:	200035a4 	.word	0x200035a4
 8001d48:	200002bc 	.word	0x200002bc
 8001d4c:	2000358c 	.word	0x2000358c
 8001d50:	2000316e 	.word	0x2000316e
 8001d54:	20000234 	.word	0x20000234
 8001d58:	2000357c 	.word	0x2000357c
 8001d5c:	2000316c 	.word	0x2000316c

08001d60 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_UART_ErrorCallback+0x98>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d11c      	bne.n	8001dac <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]

			 wf._debug_count9++;
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_UART_ErrorCallback+0x9c>)
 8001d7c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001d80:	3301      	adds	r3, #1
 8001d82:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <HAL_UART_ErrorCallback+0x9c>)
 8001d84:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	613b      	str	r3, [r7, #16]

		 HAL_UART_DeInit(ERRUART);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f003 f934 	bl	8005006 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8001d9e:	f7ff f9df 	bl	8001160 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART1_WF_RX_byte,1);
 8001da2:	2201      	movs	r2, #1
 8001da4:	4916      	ldr	r1, [pc, #88]	; (8001e00 <HAL_UART_ErrorCallback+0xa0>)
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f003 fa33 	bl	8005212 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <HAL_UART_ErrorCallback+0xa4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d11c      	bne.n	8001df0 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]

			 wf._debug_count9++;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_UART_ErrorCallback+0x9c>)
 8001dc0:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <HAL_UART_ErrorCallback+0x9c>)
 8001dc8:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	60bb      	str	r3, [r7, #8]

		 HAL_UART_DeInit(ERRUART);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f003 f912 	bl	8005006 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8001de2:	f7ff f9e7 	bl	80011b4 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART1_WF_RX_byte,1);
 8001de6:	2201      	movs	r2, #1
 8001de8:	4905      	ldr	r1, [pc, #20]	; (8001e00 <HAL_UART_ErrorCallback+0xa0>)
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f003 fa11 	bl	8005212 <HAL_UART_Receive_IT>
	}
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40011000 	.word	0x40011000
 8001dfc:	200002bc 	.word	0x200002bc
 8001e00:	2000357c 	.word	0x2000357c
 8001e04:	40004400 	.word	0x40004400

08001e08 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <HAL_UART_RxCpltCallback+0x64>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d123      	bne.n	8001e62 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART1_WF_RX_vect[UART1_WF_RX_pos]=UART1_WF_RX_byte[0];
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_UART_RxCpltCallback+0x68>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <HAL_UART_RxCpltCallback+0x6c>)
 8001e20:	7811      	ldrb	r1, [r2, #0]
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_UART_RxCpltCallback+0x70>)
 8001e24:	54d1      	strb	r1, [r2, r3]
			UART1_WF_RX_pos++;
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_UART_RxCpltCallback+0x68>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_UART_RxCpltCallback+0x68>)
 8001e2e:	6013      	str	r3, [r2, #0]
			if(UART1_WF_RX_pos>=512) UART1_WF_RX_pos=512;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_UART_RxCpltCallback+0x68>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e38:	db03      	blt.n	8001e42 <HAL_UART_RxCpltCallback+0x3a>
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_UART_RxCpltCallback+0x68>)
 8001e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e40:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001e42:	2100      	movs	r1, #0
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <HAL_UART_RxCpltCallback+0x74>)
 8001e46:	f002 f8e5 	bl	8004014 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8001e4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e4e:	2201      	movs	r2, #1
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_WF_TMR=1;	//Habilito Timeout de software
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_UART_RxCpltCallback+0x78>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART1_WF_RX_byte,1);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4906      	ldr	r1, [pc, #24]	; (8001e74 <HAL_UART_RxCpltCallback+0x6c>)
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f003 f9d8 	bl	8005212 <HAL_UART_Receive_IT>
		 }
 }
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40011000 	.word	0x40011000
 8001e70:	200035a8 	.word	0x200035a8
 8001e74:	2000357c 	.word	0x2000357c
 8001e78:	20003178 	.word	0x20003178
 8001e7c:	200001ec 	.word	0x200001ec
 8001e80:	2000316c 	.word	0x2000316c

08001e84 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	6078      	str	r0, [r7, #4]
		if(TIMER->Instance==TIM2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e94:	d139      	bne.n	8001f0a <HAL_TIM_OC_DelayElapsedCallback+0x86>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001e96:	2100      	movs	r1, #0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f002 f9b9 	bl	8004210 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1_WF=1;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
				 EN_UART1_WF_TMR=0;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
				 UART1_WF_RX_items=UART1_WF_RX_pos;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001eb0:	6013      	str	r3, [r2, #0]
				 UART1_WF_RX_pos=0;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
				 UART1_WF_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART1_WF_RX_vect_hld,UART1_WF_RX_vect,UART1_WF_RX_items,1,CMP_VECT);
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	4916      	ldr	r1, [pc, #88]	; (8001f24 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001ecc:	4817      	ldr	r0, [pc, #92]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001ece:	f00c f919 	bl	800e104 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4916      	ldr	r1, [pc, #88]	; (8001f30 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001ed6:	4817      	ldr	r0, [pc, #92]	; (8001f34 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8001ed8:	f003 f99b 	bl	8005212 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN)ITM0_Write((uint8_t *)UART1_WF_RX_vect_hld,UART1_WF_RX_items);
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001ede:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	480f      	ldr	r0, [pc, #60]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001eee:	f7ff fa13 	bl	8001318 <ITM0_Write>

				 if (WF_SER_DBG)HAL_UART_Transmit_IT(&huart2,(uint8_t *)UART1_WF_RX_vect_hld,UART1_WF_RX_items);
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_TIM_OC_DelayElapsedCallback+0x86>
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	490a      	ldr	r1, [pc, #40]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001f04:	480e      	ldr	r0, [pc, #56]	; (8001f40 <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8001f06:	f003 f93f 	bl	8005188 <HAL_UART_Transmit_IT>

		}
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000316f 	.word	0x2000316f
 8001f18:	2000316c 	.word	0x2000316c
 8001f1c:	200035a8 	.word	0x200035a8
 8001f20:	20003580 	.word	0x20003580
 8001f24:	20003178 	.word	0x20003178
 8001f28:	20003578 	.word	0x20003578
 8001f2c:	20003378 	.word	0x20003378
 8001f30:	2000357c 	.word	0x2000357c
 8001f34:	20000234 	.word	0x20000234
 8001f38:	200002bc 	.word	0x200002bc
 8001f3c:	20000021 	.word	0x20000021
 8001f40:	20000278 	.word	0x20000278

08001f44 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <ESP8266_HW_Reset+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <ESP8266_HW_Reset+0x44>)
 8001f56:	f001 f833 	bl	8002fc0 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8001f5a:	2115      	movs	r1, #21
 8001f5c:	480b      	ldr	r0, [pc, #44]	; (8001f8c <ESP8266_HW_Reset+0x48>)
 8001f5e:	f7ff f9db 	bl	8001318 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 8001f62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f66:	f000 fbc9 	bl	80026fc <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	4808      	ldr	r0, [pc, #32]	; (8001f90 <ESP8266_HW_Reset+0x4c>)
 8001f6e:	f7ff f9d3 	bl	8001318 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <ESP8266_HW_Reset+0x44>)
 8001f7a:	f001 f821 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20003169 	.word	0x20003169
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	0800f6fc 	.word	0x0800f6fc
 8001f90:	0800f8d0 	.word	0x0800f8d0

08001f94 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af06      	add	r7, sp, #24
 8001f9a:	6078      	str	r0, [r7, #4]
	do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",12,100);
 8001f9c:	2364      	movs	r3, #100	; 0x64
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	492d      	ldr	r1, [pc, #180]	; (8002058 <ESP8266_HW_Init+0xc4>)
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f003 f85e 	bl	8005064 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8001fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fac:	f000 fba6 	bl	80026fc <HAL_Delay>
		  wf._n_fcomp=5;			//Cdad de elementos del vector a analizar
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <ESP8266_HW_Init+0xc8>)
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART1_WF_RX_items;
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <ESP8266_HW_Init+0xcc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <ESP8266_HW_Init+0xc8>)
 8001fbe:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  while(FT_String_ND(UART1_WF_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001fc2:	e00e      	b.n	8001fe2 <ESP8266_HW_Init+0x4e>
		  {
			  wf._n_orig=UART1_WF_RX_items;
 8001fc4:	4b26      	ldr	r3, [pc, #152]	; (8002060 <ESP8266_HW_Init+0xcc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a24      	ldr	r2, [pc, #144]	; (800205c <ESP8266_HW_Init+0xc8>)
 8001fca:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <ESP8266_HW_Init+0xd0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	dd03      	ble.n	8001fe2 <ESP8266_HW_Init+0x4e>
					 {
						 ESP_InitF=1;
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <ESP8266_HW_Init+0xd4>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
						 break;
 8001fe0:	e014      	b.n	800200c <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART1_WF_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <ESP8266_HW_Init+0xd8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	9205      	str	r2, [sp, #20]
 8001fe8:	9304      	str	r3, [sp, #16]
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <ESP8266_HW_Init+0xdc>)
 8001fec:	9303      	str	r3, [sp, #12]
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <ESP8266_HW_Init+0xe0>)
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <ESP8266_HW_Init+0xe4>)
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <ESP8266_HW_Init+0xe8>)
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <ESP8266_HW_Init+0xec>)
 8001ffc:	4a21      	ldr	r2, [pc, #132]	; (8002084 <ESP8266_HW_Init+0xf0>)
 8001ffe:	4922      	ldr	r1, [pc, #136]	; (8002088 <ESP8266_HW_Init+0xf4>)
 8002000:	4822      	ldr	r0, [pc, #136]	; (800208c <ESP8266_HW_Init+0xf8>)
 8002002:	f00b fd03 	bl	800da0c <FT_String_ND>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d1db      	bne.n	8001fc4 <ESP8266_HW_Init+0x30>
					 }
		  }

		  if (ESP_ticks<5000)
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <ESP8266_HW_Init+0xd0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f241 3287 	movw	r2, #4999	; 0x1387
 8002014:	4293      	cmp	r3, r2
 8002016:	dc06      	bgt.n	8002026 <ESP8266_HW_Init+0x92>
		  {
			  ESP_REinit=10;	//Condición de salida
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <ESP8266_HW_Init+0xfc>)
 800201a:	220a      	movs	r2, #10
 800201c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <ESP8266_HW_Init+0xd0>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e008      	b.n	8002038 <ESP8266_HW_Init+0xa4>
		  }
		  else
		  {
			  ESP_REinit++;		//Conteo de la cantidad de veces que se reinicia el ciclo
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <ESP8266_HW_Init+0xfc>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <ESP8266_HW_Init+0xfc>)
 8002030:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <ESP8266_HW_Init+0xd0>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
		  }

	 } while (ESP_REinit<=5);
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <ESP8266_HW_Init+0xfc>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b05      	cmp	r3, #5
 800203e:	d9ad      	bls.n	8001f9c <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <ESP8266_HW_Init+0xfc>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b0a      	cmp	r3, #10
 8002046:	d101      	bne.n	800204c <ESP8266_HW_Init+0xb8>
	  {
		  return(1);
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <ESP8266_HW_Init+0xba>
	  }
	  else
	  {
		  return(0);
 800204c:	2300      	movs	r3, #0
	  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	0800f8e0 	.word	0x0800f8e0
 800205c:	200002bc 	.word	0x200002bc
 8002060:	20003580 	.word	0x20003580
 8002064:	20003584 	.word	0x20003584
 8002068:	2000316a 	.word	0x2000316a
 800206c:	20001004 	.word	0x20001004
 8002070:	20000d50 	.word	0x20000d50
 8002074:	20003590 	.word	0x20003590
 8002078:	20000f9c 	.word	0x20000f9c
 800207c:	20000b50 	.word	0x20000b50
 8002080:	20000fa8 	.word	0x20000fa8
 8002084:	0800f8f0 	.word	0x0800f8f0
 8002088:	20000f94 	.word	0x20000f94
 800208c:	20003378 	.word	0x20003378
 8002090:	20003169 	.word	0x20003169

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
}
 800209a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209c:	e7fe      	b.n	800209c <Error_Handler+0x8>
	...

080020a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_MspInit+0x4c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_MspInit+0x4c>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_MspInit+0x4c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_MspInit+0x4c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_MspInit+0x4c>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_MspInit+0x4c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800

080020f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_SPI_MspInit+0xc0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d149      	bne.n	80021a6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 800211c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a18      	ldr	r2, [pc, #96]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002166:	23a0      	movs	r3, #160	; 0xa0
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002176:	2305      	movs	r3, #5
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <HAL_SPI_MspInit+0xc8>)
 8002182:	f000 fcb5 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002186:	2310      	movs	r3, #16
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002196:	2305      	movs	r3, #5
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4806      	ldr	r0, [pc, #24]	; (80021bc <HAL_SPI_MspInit+0xcc>)
 80021a2:	f000 fca5 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40013000 	.word	0x40013000
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400

080021c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d0:	d115      	bne.n	80021fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_TIM_Base_MspInit+0x48>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <HAL_TIM_Base_MspInit+0x48>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_TIM_Base_MspInit+0x48>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	201c      	movs	r0, #28
 80021f4:	f000 fba5 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021f8:	201c      	movs	r0, #28
 80021fa:	f000 fbbe 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <HAL_UART_MspInit+0x108>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d135      	bne.n	800229a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_UART_MspInit+0x10c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a38      	ldr	r2, [pc, #224]	; (8002318 <HAL_UART_MspInit+0x10c>)
 8002238:	f043 0310 	orr.w	r3, r3, #16
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_UART_MspInit+0x10c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_UART_MspInit+0x10c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a31      	ldr	r2, [pc, #196]	; (8002318 <HAL_UART_MspInit+0x10c>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <HAL_UART_MspInit+0x10c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_WF_TX_Pin|USART1_WF_RX_Pin;
 8002266:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002278:	2307      	movs	r3, #7
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	4619      	mov	r1, r3
 8002282:	4826      	ldr	r0, [pc, #152]	; (800231c <HAL_UART_MspInit+0x110>)
 8002284:	f000 fc34 	bl	8002af0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	2025      	movs	r0, #37	; 0x25
 800228e:	f000 fb58 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002292:	2025      	movs	r0, #37	; 0x25
 8002294:	f000 fb71 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002298:	e038      	b.n	800230c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a20      	ldr	r2, [pc, #128]	; (8002320 <HAL_UART_MspInit+0x114>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d133      	bne.n	800230c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_UART_MspInit+0x10c>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_UART_MspInit+0x10c>)
 80022ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b2:	6413      	str	r3, [r2, #64]	; 0x40
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_UART_MspInit+0x10c>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_UART_MspInit+0x10c>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <HAL_UART_MspInit+0x10c>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6313      	str	r3, [r2, #48]	; 0x30
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_UART_MspInit+0x10c>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_DBG_TX_Pin|USART2_DBG_RX_Pin;
 80022dc:	230c      	movs	r3, #12
 80022de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ec:	2307      	movs	r3, #7
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4619      	mov	r1, r3
 80022f6:	4809      	ldr	r0, [pc, #36]	; (800231c <HAL_UART_MspInit+0x110>)
 80022f8:	f000 fbfa 	bl	8002af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2026      	movs	r0, #38	; 0x26
 8002302:	f000 fb1e 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002306:	2026      	movs	r0, #38	; 0x26
 8002308:	f000 fb37 	bl	800297a <HAL_NVIC_EnableIRQ>
}
 800230c:	bf00      	nop
 800230e:	3730      	adds	r7, #48	; 0x30
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40011000 	.word	0x40011000
 8002318:	40023800 	.word	0x40023800
 800231c:	40020000 	.word	0x40020000
 8002320:	40004400 	.word	0x40004400

08002324 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_UART_MspDeInit+0x5c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d10e      	bne.n	8002354 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_UART_MspDeInit+0x60>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <HAL_UART_MspDeInit+0x60>)
 800233c:	f023 0310 	bic.w	r3, r3, #16
 8002340:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_WF_TX_Pin|USART1_WF_RX_Pin);
 8002342:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002346:	4810      	ldr	r0, [pc, #64]	; (8002388 <HAL_UART_MspDeInit+0x64>)
 8002348:	f000 fd56 	bl	8002df8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800234c:	2025      	movs	r0, #37	; 0x25
 800234e:	f000 fb22 	bl	8002996 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002352:	e011      	b.n	8002378 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_UART_MspDeInit+0x68>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10c      	bne.n	8002378 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_UART_MspDeInit+0x60>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_UART_MspDeInit+0x60>)
 8002364:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_DBG_TX_Pin|USART2_DBG_RX_Pin);
 800236a:	210c      	movs	r1, #12
 800236c:	4806      	ldr	r0, [pc, #24]	; (8002388 <HAL_UART_MspDeInit+0x64>)
 800236e:	f000 fd43 	bl	8002df8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002372:	2026      	movs	r0, #38	; 0x26
 8002374:	f000 fb0f 	bl	8002996 <HAL_NVIC_DisableIRQ>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40011000 	.word	0x40011000
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000
 800238c:	40004400 	.word	0x40004400

08002390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <NMI_Handler+0x4>

08002396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <HardFault_Handler+0x4>

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <MemManage_Handler+0x4>

080023a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <BusFault_Handler+0x4>

080023a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <UsageFault_Handler+0x4>

080023ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <TIM2_IRQHandler+0x10>)
 80023de:	f002 f823 	bl	8004428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200001ec 	.word	0x200001ec

080023ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <USART1_IRQHandler+0x10>)
 80023f2:	f002 ff3f 	bl	8005274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000234 	.word	0x20000234

08002400 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <USART2_IRQHandler+0x10>)
 8002406:	f002 ff35 	bl	8005274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000278 	.word	0x20000278

08002414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
	return 1;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_kill>:

int _kill(int pid, int sig)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800242e:	f00c f915 	bl	800e65c <__errno>
 8002432:	4603      	mov	r3, r0
 8002434:	2216      	movs	r2, #22
 8002436:	601a      	str	r2, [r3, #0]
	return -1;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_exit>:

void _exit (int status)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ffe7 	bl	8002424 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002456:	e7fe      	b.n	8002456 <_exit+0x12>

08002458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e00a      	b.n	8002480 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800246a:	f3af 8000 	nop.w
 800246e:	4601      	mov	r1, r0
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	60ba      	str	r2, [r7, #8]
 8002476:	b2ca      	uxtb	r2, r1
 8002478:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	dbf0      	blt.n	800246a <_read+0x12>
	}

return len;
 8002488:	687b      	ldr	r3, [r7, #4]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	e009      	b.n	80024b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	60ba      	str	r2, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	dbf1      	blt.n	80024a4 <_write+0x12>
	}
	return len;
 80024c0:	687b      	ldr	r3, [r7, #4]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_close>:

int _close(int file)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
	return -1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024f2:	605a      	str	r2, [r3, #4]
	return 0;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <_isatty>:

int _isatty(int file)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
	return 1;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
	return 0;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800253c:	4a14      	ldr	r2, [pc, #80]	; (8002590 <_sbrk+0x5c>)
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <_sbrk+0x60>)
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <_sbrk+0x64>)
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <_sbrk+0x68>)
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <_sbrk+0x64>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	429a      	cmp	r2, r3
 8002562:	d207      	bcs.n	8002574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002564:	f00c f87a 	bl	800e65c <__errno>
 8002568:	4603      	mov	r3, r0
 800256a:	220c      	movs	r2, #12
 800256c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	e009      	b.n	8002588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <_sbrk+0x64>)
 8002584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20020000 	.word	0x20020000
 8002594:	00000400 	.word	0x00000400
 8002598:	200035b4 	.word	0x200035b4
 800259c:	20003708 	.word	0x20003708

080025a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <SystemInit+0x20>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <SystemInit+0x20>)
 80025ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c8:	480d      	ldr	r0, [pc, #52]	; (8002600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025ca:	490e      	ldr	r1, [pc, #56]	; (8002604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025cc:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d0:	e002      	b.n	80025d8 <LoopCopyDataInit>

080025d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025d6:	3304      	adds	r3, #4

080025d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025dc:	d3f9      	bcc.n	80025d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025e0:	4c0b      	ldr	r4, [pc, #44]	; (8002610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e4:	e001      	b.n	80025ea <LoopFillZerobss>

080025e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e8:	3204      	adds	r2, #4

080025ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ec:	d3fb      	bcc.n	80025e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ee:	f7ff ffd7 	bl	80025a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025f2:	f00c f839 	bl	800e668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f6:	f7fe f84d 	bl	8000694 <main>
  bx  lr    
 80025fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002604:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002608:	0800ff34 	.word	0x0800ff34
  ldr r2, =_sbss
 800260c:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002610:	20003708 	.word	0x20003708

08002614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC_IRQHandler>
	...

08002618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0d      	ldr	r2, [pc, #52]	; (8002658 <HAL_Init+0x40>)
 8002622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_Init+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_Init+0x40>)
 800262e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_Init+0x40>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002640:	2003      	movs	r0, #3
 8002642:	f000 f973 	bl	800292c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002646:	200f      	movs	r0, #15
 8002648:	f000 f808 	bl	800265c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800264c:	f7ff fd28 	bl	80020a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023c00 	.word	0x40023c00

0800265c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_InitTick+0x54>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_InitTick+0x58>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002672:	fbb3 f3f1 	udiv	r3, r3, r1
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f999 	bl	80029b2 <HAL_SYSTICK_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00e      	b.n	80026a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b0f      	cmp	r3, #15
 800268e:	d80a      	bhi.n	80026a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002690:	2200      	movs	r2, #0
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f000 f953 	bl	8002942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800269c:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <HAL_InitTick+0x5c>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000084 	.word	0x20000084
 80026b4:	2000008c 	.word	0x2000008c
 80026b8:	20000088 	.word	0x20000088

080026bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_IncTick+0x20>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_IncTick+0x24>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_IncTick+0x24>)
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	2000008c 	.word	0x2000008c
 80026e0:	200035b8 	.word	0x200035b8

080026e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return uwTick;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_GetTick+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	200035b8 	.word	0x200035b8

080026fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff ffee 	bl	80026e4 <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d005      	beq.n	8002722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_Delay+0x44>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002722:	bf00      	nop
 8002724:	f7ff ffde 	bl	80026e4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d8f7      	bhi.n	8002724 <HAL_Delay+0x28>
  {
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000008c 	.word	0x2000008c

08002744 <__NVIC_SetPriorityGrouping>:
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <__NVIC_EnableIRQ+0x38>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_DisableIRQ>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	db12      	blt.n	800281c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	490a      	ldr	r1, [pc, #40]	; (8002828 <__NVIC_DisableIRQ+0x44>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2001      	movs	r0, #1
 8002806:	fa00 f202 	lsl.w	r2, r0, r2
 800280a:	3320      	adds	r3, #32
 800280c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002810:	f3bf 8f4f 	dsb	sy
}
 8002814:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002816:	f3bf 8f6f 	isb	sy
}
 800281a:	bf00      	nop
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <SysTick_Config>:
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f8:	d301      	bcc.n	80028fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <SysTick_Config+0x40>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002906:	210f      	movs	r1, #15
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f7ff ff8e 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SysTick_Config+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SysTick_Config+0x40>)
 8002918:	2207      	movs	r2, #7
 800291a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000e010 	.word	0xe000e010

0800292c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff05 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002954:	f7ff ff1a 	bl	800278c <__NVIC_GetPriorityGrouping>
 8002958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff8e 	bl	8002880 <NVIC_EncodePriority>
 8002964:	4602      	mov	r2, r0
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff5d 	bl	800282c <__NVIC_SetPriority>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff0d 	bl	80027a8 <__NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff1d 	bl	80027e4 <__NVIC_DisableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff94 	bl	80028e8 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff fe84 	bl	80026e4 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d008      	beq.n	80029fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e052      	b.n	8002aa2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0216 	bic.w	r2, r2, #22
 8002a0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <HAL_DMA_Abort+0x62>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0208 	bic.w	r2, r2, #8
 8002a3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4c:	e013      	b.n	8002a76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4e:	f7ff fe49 	bl	80026e4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d90c      	bls.n	8002a76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e015      	b.n	8002aa2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e4      	bne.n	8002a4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	223f      	movs	r2, #63	; 0x3f
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d004      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e00c      	b.n	8002ae2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2205      	movs	r2, #5
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	; 0x24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	e159      	b.n	8002dc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	f040 8148 	bne.w	8002dba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d005      	beq.n	8002b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d130      	bne.n	8002ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 0201 	and.w	r2, r3, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d017      	beq.n	8002be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d123      	bne.n	8002c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	08da      	lsrs	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3208      	adds	r2, #8
 8002c2e:	69b9      	ldr	r1, [r7, #24]
 8002c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a2 	beq.w	8002dba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <HAL_GPIO_Init+0x2e8>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	4a56      	ldr	r2, [pc, #344]	; (8002dd8 <HAL_GPIO_Init+0x2e8>)
 8002c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c84:	6453      	str	r3, [r2, #68]	; 0x44
 8002c86:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <HAL_GPIO_Init+0x2e8>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c92:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a49      	ldr	r2, [pc, #292]	; (8002de0 <HAL_GPIO_Init+0x2f0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d019      	beq.n	8002cf2 <HAL_GPIO_Init+0x202>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a48      	ldr	r2, [pc, #288]	; (8002de4 <HAL_GPIO_Init+0x2f4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_GPIO_Init+0x1fe>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a47      	ldr	r2, [pc, #284]	; (8002de8 <HAL_GPIO_Init+0x2f8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00d      	beq.n	8002cea <HAL_GPIO_Init+0x1fa>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a46      	ldr	r2, [pc, #280]	; (8002dec <HAL_GPIO_Init+0x2fc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d007      	beq.n	8002ce6 <HAL_GPIO_Init+0x1f6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a45      	ldr	r2, [pc, #276]	; (8002df0 <HAL_GPIO_Init+0x300>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_GPIO_Init+0x1f2>
 8002cde:	2304      	movs	r3, #4
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4935      	ldr	r1, [pc, #212]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d12:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d36:	4a2f      	ldr	r2, [pc, #188]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d60:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d66:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db4:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <HAL_GPIO_Init+0x304>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f aea2 	bls.w	8002b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3724      	adds	r7, #36	; 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40013c00 	.word	0x40013c00

08002df8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e0bb      	b.n	8002f8c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e14:	2201      	movs	r2, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	f040 80ab 	bne.w	8002f86 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e30:	4a5c      	ldr	r2, [pc, #368]	; (8002fa4 <HAL_GPIO_DeInit+0x1ac>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3302      	adds	r3, #2
 8002e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	220f      	movs	r2, #15
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a54      	ldr	r2, [pc, #336]	; (8002fa8 <HAL_GPIO_DeInit+0x1b0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d019      	beq.n	8002e8e <HAL_GPIO_DeInit+0x96>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a53      	ldr	r2, [pc, #332]	; (8002fac <HAL_GPIO_DeInit+0x1b4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_GPIO_DeInit+0x92>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a52      	ldr	r2, [pc, #328]	; (8002fb0 <HAL_GPIO_DeInit+0x1b8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00d      	beq.n	8002e86 <HAL_GPIO_DeInit+0x8e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a51      	ldr	r2, [pc, #324]	; (8002fb4 <HAL_GPIO_DeInit+0x1bc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <HAL_GPIO_DeInit+0x8a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a50      	ldr	r2, [pc, #320]	; (8002fb8 <HAL_GPIO_DeInit+0x1c0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <HAL_GPIO_DeInit+0x86>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_DeInit+0x98>
 8002e7e:	2307      	movs	r3, #7
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_DeInit+0x98>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_DeInit+0x98>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_DeInit+0x98>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_DeInit+0x98>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d132      	bne.n	8002f06 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ea0:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_GPIO_DeInit+0x1c4>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	4944      	ldr	r1, [pc, #272]	; (8002fbc <HAL_GPIO_DeInit+0x1c4>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002eae:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_GPIO_DeInit+0x1c4>)
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	4941      	ldr	r1, [pc, #260]	; (8002fbc <HAL_GPIO_DeInit+0x1c4>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ebc:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_GPIO_DeInit+0x1c4>)
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	493d      	ldr	r1, [pc, #244]	; (8002fbc <HAL_GPIO_DeInit+0x1c4>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002eca:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <HAL_GPIO_DeInit+0x1c4>)
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	493a      	ldr	r1, [pc, #232]	; (8002fbc <HAL_GPIO_DeInit+0x1c4>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ee8:	4a2e      	ldr	r2, [pc, #184]	; (8002fa4 <HAL_GPIO_DeInit+0x1ac>)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	482a      	ldr	r0, [pc, #168]	; (8002fa4 <HAL_GPIO_DeInit+0x1ac>)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	400a      	ands	r2, r1
 8002f00:	3302      	adds	r3, #2
 8002f02:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2103      	movs	r1, #3
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3208      	adds	r2, #8
 8002f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	220f      	movs	r2, #15
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	08d2      	lsrs	r2, r2, #3
 8002f3c:	4019      	ands	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3208      	adds	r2, #8
 8002f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2103      	movs	r1, #3
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	2101      	movs	r1, #1
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2103      	movs	r1, #3
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	401a      	ands	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	f67f af40 	bls.w	8002e14 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020c00 	.word	0x40020c00
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40013c00 	.word	0x40013c00

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fdc:	e003      	b.n	8002fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003004:	887a      	ldrh	r2, [r7, #2]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4013      	ands	r3, r2
 800300a:	041a      	lsls	r2, r3, #16
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43d9      	mvns	r1, r3
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	400b      	ands	r3, r1
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e267      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d075      	beq.n	8003132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003046:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b04      	cmp	r3, #4
 8003050:	d00c      	beq.n	800306c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003052:	4b85      	ldr	r3, [pc, #532]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305a:	2b08      	cmp	r3, #8
 800305c:	d112      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305e:	4b82      	ldr	r3, [pc, #520]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306a:	d10b      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	4b7e      	ldr	r3, [pc, #504]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d05b      	beq.n	8003130 <HAL_RCC_OscConfig+0x108>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d157      	bne.n	8003130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e242      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d106      	bne.n	800309c <HAL_RCC_OscConfig+0x74>
 800308e:	4b76      	ldr	r3, [pc, #472]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a75      	ldr	r2, [pc, #468]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xb0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x98>
 80030a6:	4b70      	ldr	r3, [pc, #448]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6f      	ldr	r2, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6c      	ldr	r2, [pc, #432]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xb0>
 80030c0:	4b69      	ldr	r3, [pc, #420]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a68      	ldr	r2, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a65      	ldr	r2, [pc, #404]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7ff fb00 	bl	80026e4 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e8:	f7ff fafc 	bl	80026e4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e207      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b5b      	ldr	r3, [pc, #364]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xc0>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff faec 	bl	80026e4 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7ff fae8 	bl	80026e4 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1f3      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b51      	ldr	r3, [pc, #324]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0xe8>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11c      	bne.n	8003190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003156:	4b44      	ldr	r3, [pc, #272]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x152>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1c7      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4937      	ldr	r1, [pc, #220]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	e03a      	b.n	8003206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003198:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_RCC_OscConfig+0x244>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7ff faa1 	bl	80026e4 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a6:	f7ff fa9d 	bl	80026e4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1a8      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4925      	ldr	r1, [pc, #148]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_OscConfig+0x244>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7ff fa80 	bl	80026e4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e8:	f7ff fa7c 	bl	80026e4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e187      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d036      	beq.n	8003280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_RCC_OscConfig+0x248>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7ff fa60 	bl	80026e4 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003228:	f7ff fa5c 	bl	80026e4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e167      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800323c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x200>
 8003246:	e01b      	b.n	8003280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_OscConfig+0x248>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7ff fa49 	bl	80026e4 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	e00e      	b.n	8003274 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003256:	f7ff fa45 	bl	80026e4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d907      	bls.n	8003274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e150      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
 8003268:	40023800 	.word	0x40023800
 800326c:	42470000 	.word	0x42470000
 8003270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ea      	bne.n	8003256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8097 	beq.w	80033bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003292:	4b81      	ldr	r3, [pc, #516]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	4b7d      	ldr	r3, [pc, #500]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a7c      	ldr	r2, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b77      	ldr	r3, [pc, #476]	; (800349c <HAL_RCC_OscConfig+0x474>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b74      	ldr	r3, [pc, #464]	; (800349c <HAL_RCC_OscConfig+0x474>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a73      	ldr	r2, [pc, #460]	; (800349c <HAL_RCC_OscConfig+0x474>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7ff fa05 	bl	80026e4 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7ff fa01 	bl	80026e4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e10c      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b6a      	ldr	r3, [pc, #424]	; (800349c <HAL_RCC_OscConfig+0x474>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x2ea>
 8003304:	4b64      	ldr	r3, [pc, #400]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a63      	ldr	r2, [pc, #396]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	e01c      	b.n	800334c <HAL_RCC_OscConfig+0x324>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x30c>
 800331a:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a5e      	ldr	r2, [pc, #376]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	4b5c      	ldr	r3, [pc, #368]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4a5b      	ldr	r2, [pc, #364]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6713      	str	r3, [r2, #112]	; 0x70
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0x324>
 8003334:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
 8003340:	4b55      	ldr	r3, [pc, #340]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a54      	ldr	r2, [pc, #336]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d015      	beq.n	8003380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7ff f9c6 	bl	80026e4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	e00a      	b.n	8003372 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7ff f9c2 	bl	80026e4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0cb      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	4b49      	ldr	r3, [pc, #292]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0ee      	beq.n	800335c <HAL_RCC_OscConfig+0x334>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003380:	f7ff f9b0 	bl	80026e4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7ff f9ac 	bl	80026e4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0b5      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1ee      	bne.n	8003388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	4a38      	ldr	r2, [pc, #224]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a1 	beq.w	8003508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033c6:	4b34      	ldr	r3, [pc, #208]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d05c      	beq.n	800348c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d141      	bne.n	800345e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_OscConfig+0x478>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7ff f980 	bl	80026e4 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7ff f97c 	bl	80026e4 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e087      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	019b      	lsls	r3, r3, #6
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	491b      	ldr	r1, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x478>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7ff f955 	bl	80026e4 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343e:	f7ff f951 	bl	80026e4 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e05c      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x416>
 800345c:	e054      	b.n	8003508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_RCC_OscConfig+0x478>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7ff f93e 	bl	80026e4 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346c:	f7ff f93a 	bl	80026e4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e045      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x444>
 800348a:	e03d      	b.n	8003508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e038      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000
 80034a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x4ec>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d028      	beq.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d121      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d11a      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034dc:	4293      	cmp	r3, r2
 80034de:	d111      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	3b01      	subs	r3, #1
 80034ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0cc      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d90c      	bls.n	8003554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b8      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800358e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	494d      	ldr	r1, [pc, #308]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d044      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d119      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e067      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4934      	ldr	r1, [pc, #208]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7ff f86c 	bl	80026e4 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7ff f868 	bl	80026e4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e04f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d20c      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4916      	ldr	r1, [pc, #88]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f821 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	490a      	ldr	r1, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe ffcc 	bl	800265c <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023c00 	.word	0x40023c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	0800fd28 	.word	0x0800fd28
 80036dc:	20000084 	.word	0x20000084
 80036e0:	20000088 	.word	0x20000088

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e8:	b090      	sub	sp, #64	; 0x40
 80036ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
 80036f0:	2300      	movs	r3, #0
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f4:	2300      	movs	r3, #0
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fc:	4b59      	ldr	r3, [pc, #356]	; (8003864 <HAL_RCC_GetSysClockFreq+0x180>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d00d      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x40>
 8003708:	2b08      	cmp	r3, #8
 800370a:	f200 80a1 	bhi.w	8003850 <HAL_RCC_GetSysClockFreq+0x16c>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x34>
 8003712:	2b04      	cmp	r3, #4
 8003714:	d003      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x3a>
 8003716:	e09b      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <HAL_RCC_GetSysClockFreq+0x184>)
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800371c:	e09b      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800371e:	4b53      	ldr	r3, [pc, #332]	; (800386c <HAL_RCC_GetSysClockFreq+0x188>)
 8003720:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003722:	e098      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003724:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <HAL_RCC_GetSysClockFreq+0x180>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372e:	4b4d      	ldr	r3, [pc, #308]	; (8003864 <HAL_RCC_GetSysClockFreq+0x180>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d028      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373a:	4b4a      	ldr	r3, [pc, #296]	; (8003864 <HAL_RCC_GetSysClockFreq+0x180>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	099b      	lsrs	r3, r3, #6
 8003740:	2200      	movs	r2, #0
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	627a      	str	r2, [r7, #36]	; 0x24
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800374c:	2100      	movs	r1, #0
 800374e:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_RCC_GetSysClockFreq+0x188>)
 8003750:	fb03 f201 	mul.w	r2, r3, r1
 8003754:	2300      	movs	r3, #0
 8003756:	fb00 f303 	mul.w	r3, r0, r3
 800375a:	4413      	add	r3, r2
 800375c:	4a43      	ldr	r2, [pc, #268]	; (800386c <HAL_RCC_GetSysClockFreq+0x188>)
 800375e:	fba0 1202 	umull	r1, r2, r0, r2
 8003762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003764:	460a      	mov	r2, r1
 8003766:	62ba      	str	r2, [r7, #40]	; 0x28
 8003768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376a:	4413      	add	r3, r2
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003770:	2200      	movs	r2, #0
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	61fa      	str	r2, [r7, #28]
 8003776:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800377a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800377e:	f7fc fd97 	bl	80002b0 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4613      	mov	r3, r2
 8003788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378a:	e053      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <HAL_RCC_GetSysClockFreq+0x180>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	2200      	movs	r2, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	617a      	str	r2, [r7, #20]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800379e:	f04f 0b00 	mov.w	fp, #0
 80037a2:	4652      	mov	r2, sl
 80037a4:	465b      	mov	r3, fp
 80037a6:	f04f 0000 	mov.w	r0, #0
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	0159      	lsls	r1, r3, #5
 80037b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b4:	0150      	lsls	r0, r2, #5
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	ebb2 080a 	subs.w	r8, r2, sl
 80037be:	eb63 090b 	sbc.w	r9, r3, fp
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037d6:	ebb2 0408 	subs.w	r4, r2, r8
 80037da:	eb63 0509 	sbc.w	r5, r3, r9
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	00eb      	lsls	r3, r5, #3
 80037e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ec:	00e2      	lsls	r2, r4, #3
 80037ee:	4614      	mov	r4, r2
 80037f0:	461d      	mov	r5, r3
 80037f2:	eb14 030a 	adds.w	r3, r4, sl
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	eb45 030b 	adc.w	r3, r5, fp
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	e9d7 4500 	ldrd	r4, r5, [r7]
 800380a:	4629      	mov	r1, r5
 800380c:	028b      	lsls	r3, r1, #10
 800380e:	4621      	mov	r1, r4
 8003810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003814:	4621      	mov	r1, r4
 8003816:	028a      	lsls	r2, r1, #10
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381e:	2200      	movs	r2, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	60fa      	str	r2, [r7, #12]
 8003824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003828:	f7fc fd42 	bl	80002b0 <__aeabi_uldivmod>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4613      	mov	r3, r2
 8003832:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_GetSysClockFreq+0x180>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	3301      	adds	r3, #1
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800384e:	e002      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetSysClockFreq+0x184>)
 8003852:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003858:	4618      	mov	r0, r3
 800385a:	3740      	adds	r7, #64	; 0x40
 800385c:	46bd      	mov	sp, r7
 800385e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800
 8003868:	00f42400 	.word	0x00f42400
 800386c:	017d7840 	.word	0x017d7840

08003870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_GetHCLKFreq+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000084 	.word	0x20000084

08003888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800388c:	f7ff fff0 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0a9b      	lsrs	r3, r3, #10
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4903      	ldr	r1, [pc, #12]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40023800 	.word	0x40023800
 80038ac:	0800fd38 	.word	0x0800fd38

080038b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038b4:	f7ff ffdc 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0b5b      	lsrs	r3, r3, #13
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	0800fd38 	.word	0x0800fd38

080038d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07b      	b.n	80039e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d108      	bne.n	8003904 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038fa:	d009      	beq.n	8003910 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	61da      	str	r2, [r3, #28]
 8003902:	e005      	b.n	8003910 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fe fbe0 	bl	80020f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003946:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	ea42 0103 	orr.w	r1, r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	f003 0104 	and.w	r1, r3, #4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0210 	and.w	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b08c      	sub	sp, #48	; 0x30
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039f8:	2301      	movs	r3, #1
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x26>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e18a      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x33c>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a18:	f7fe fe64 	bl	80026e4 <HAL_GetTick>
 8003a1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d00f      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x70>
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a40:	d107      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x68>
 8003a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d003      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
 8003a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a58:	e15b      	b.n	8003d12 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_SPI_TransmitReceive+0x82>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_SPI_TransmitReceive+0x82>
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a72:	e14e      	b.n	8003d12 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d003      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2205      	movs	r2, #5
 8003a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	887a      	ldrh	r2, [r7, #2]
 8003a9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d007      	beq.n	8003adc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ada:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae4:	d178      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x10a>
 8003aee:	8b7b      	ldrh	r3, [r7, #26]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d166      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	881a      	ldrh	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	1c9a      	adds	r2, r3, #2
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b18:	e053      	b.n	8003bc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d11b      	bne.n	8003b60 <HAL_SPI_TransmitReceive+0x176>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <HAL_SPI_TransmitReceive+0x176>
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d113      	bne.n	8003b60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d119      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x1b8>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d014      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	b292      	uxth	r2, r2
 8003b84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	1c9a      	adds	r2, r3, #2
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ba2:	f7fe fd9f 	bl	80026e4 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d807      	bhi.n	8003bc2 <HAL_SPI_TransmitReceive+0x1d8>
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d003      	beq.n	8003bc2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bc0:	e0a7      	b.n	8003d12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1a6      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x130>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1a1      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x130>
 8003bd6:	e07c      	b.n	8003cd2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x1fc>
 8003be0:	8b7b      	ldrh	r3, [r7, #26]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d16b      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	7812      	ldrb	r2, [r2, #0]
 8003bf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c0c:	e057      	b.n	8003cbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d11c      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x26c>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d017      	beq.n	8003c56 <HAL_SPI_TransmitReceive+0x26c>
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d114      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	7812      	ldrb	r2, [r2, #0]
 8003c38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d119      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x2ae>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d014      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c94:	2301      	movs	r3, #1
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c98:	f7fe fd24 	bl	80026e4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d803      	bhi.n	8003cb0 <HAL_SPI_TransmitReceive+0x2c6>
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x2cc>
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cbc:	e029      	b.n	8003d12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1a2      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x224>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d19d      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f8b2 	bl	8003e40 <SPI_EndRxTxTransaction>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cee:	e010      	b.n	8003d12 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e000      	b.n	8003d12 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3730      	adds	r7, #48	; 0x30
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d40:	f7fe fcd0 	bl	80026e4 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d50:	f7fe fcc8 	bl	80026e4 <HAL_GetTick>
 8003d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d56:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	015b      	lsls	r3, r3, #5
 8003d5c:	0d1b      	lsrs	r3, r3, #20
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	fb02 f303 	mul.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d66:	e054      	b.n	8003e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d050      	beq.n	8003e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d70:	f7fe fcb8 	bl	80026e4 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d902      	bls.n	8003d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d13d      	bne.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d9e:	d111      	bne.n	8003dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da8:	d004      	beq.n	8003db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d107      	bne.n	8003dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d10f      	bne.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e017      	b.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d19b      	bne.n	8003d68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000084 	.word	0x20000084

08003e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <SPI_EndRxTxTransaction+0x7c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <SPI_EndRxTxTransaction+0x80>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0d5b      	lsrs	r3, r3, #21
 8003e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d112      	bne.n	8003e92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff ff5a 	bl	8003d30 <SPI_WaitFlagStateUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e00f      	b.n	8003eb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	2b80      	cmp	r3, #128	; 0x80
 8003eaa:	d0f2      	beq.n	8003e92 <SPI_EndRxTxTransaction+0x52>
 8003eac:	e000      	b.n	8003eb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003eae:	bf00      	nop
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000084 	.word	0x20000084
 8003ec0:	165e9f81 	.word	0x165e9f81

08003ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e041      	b.n	8003f5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fe f968 	bl	80021c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 fce4 	bl	80048d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e041      	b.n	8003ff8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f839 	bl	8004000 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f000 fc95 	bl	80048d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_TIM_OC_Start_IT+0x28>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e022      	b.n	8004082 <HAL_TIM_OC_Start_IT+0x6e>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d109      	bne.n	8004056 <HAL_TIM_OC_Start_IT+0x42>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e015      	b.n	8004082 <HAL_TIM_OC_Start_IT+0x6e>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d109      	bne.n	8004070 <HAL_TIM_OC_Start_IT+0x5c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e008      	b.n	8004082 <HAL_TIM_OC_Start_IT+0x6e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	bf14      	ite	ne
 800407c:	2301      	movne	r3, #1
 800407e:	2300      	moveq	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0b3      	b.n	80041f2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <HAL_TIM_OC_Start_IT+0x86>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004098:	e013      	b.n	80040c2 <HAL_TIM_OC_Start_IT+0xae>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d104      	bne.n	80040aa <HAL_TIM_OC_Start_IT+0x96>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a8:	e00b      	b.n	80040c2 <HAL_TIM_OC_Start_IT+0xae>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_OC_Start_IT+0xa6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	e003      	b.n	80040c2 <HAL_TIM_OC_Start_IT+0xae>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d841      	bhi.n	800414c <HAL_TIM_OC_Start_IT+0x138>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <HAL_TIM_OC_Start_IT+0xbc>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	08004105 	.word	0x08004105
 80040d4:	0800414d 	.word	0x0800414d
 80040d8:	0800414d 	.word	0x0800414d
 80040dc:	0800414d 	.word	0x0800414d
 80040e0:	08004117 	.word	0x08004117
 80040e4:	0800414d 	.word	0x0800414d
 80040e8:	0800414d 	.word	0x0800414d
 80040ec:	0800414d 	.word	0x0800414d
 80040f0:	08004129 	.word	0x08004129
 80040f4:	0800414d 	.word	0x0800414d
 80040f8:	0800414d 	.word	0x0800414d
 80040fc:	0800414d 	.word	0x0800414d
 8004100:	0800413b 	.word	0x0800413b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0202 	orr.w	r2, r2, #2
 8004112:	60da      	str	r2, [r3, #12]
      break;
 8004114:	e01d      	b.n	8004152 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0204 	orr.w	r2, r2, #4
 8004124:	60da      	str	r2, [r3, #12]
      break;
 8004126:	e014      	b.n	8004152 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0208 	orr.w	r2, r2, #8
 8004136:	60da      	str	r2, [r3, #12]
      break;
 8004138:	e00b      	b.n	8004152 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0210 	orr.w	r2, r2, #16
 8004148:	60da      	str	r2, [r3, #12]
      break;
 800414a:	e002      	b.n	8004152 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      break;
 8004150:	bf00      	nop
  }

  if (status == HAL_OK)
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d14b      	bne.n	80041f0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2201      	movs	r2, #1
 800415e:	6839      	ldr	r1, [r7, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fe5b 	bl	8004e1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a24      	ldr	r2, [pc, #144]	; (80041fc <HAL_TIM_OC_Start_IT+0x1e8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d107      	bne.n	8004180 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_TIM_OC_Start_IT+0x1e8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_TIM_OC_Start_IT+0x1a8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d013      	beq.n	80041bc <HAL_TIM_OC_Start_IT+0x1a8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_TIM_OC_Start_IT+0x1ec>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_TIM_OC_Start_IT+0x1a8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a18      	ldr	r2, [pc, #96]	; (8004204 <HAL_TIM_OC_Start_IT+0x1f0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_TIM_OC_Start_IT+0x1a8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <HAL_TIM_OC_Start_IT+0x1f4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIM_OC_Start_IT+0x1a8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <HAL_TIM_OC_Start_IT+0x1f8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d111      	bne.n	80041e0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d010      	beq.n	80041f0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041de:	e007      	b.n	80041f0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40014000 	.word	0x40014000

08004210 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b0c      	cmp	r3, #12
 8004222:	d841      	bhi.n	80042a8 <HAL_TIM_OC_Stop_IT+0x98>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <HAL_TIM_OC_Stop_IT+0x1c>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004261 	.word	0x08004261
 8004230:	080042a9 	.word	0x080042a9
 8004234:	080042a9 	.word	0x080042a9
 8004238:	080042a9 	.word	0x080042a9
 800423c:	08004273 	.word	0x08004273
 8004240:	080042a9 	.word	0x080042a9
 8004244:	080042a9 	.word	0x080042a9
 8004248:	080042a9 	.word	0x080042a9
 800424c:	08004285 	.word	0x08004285
 8004250:	080042a9 	.word	0x080042a9
 8004254:	080042a9 	.word	0x080042a9
 8004258:	080042a9 	.word	0x080042a9
 800425c:	08004297 	.word	0x08004297
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0202 	bic.w	r2, r2, #2
 800426e:	60da      	str	r2, [r3, #12]
      break;
 8004270:	e01d      	b.n	80042ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0204 	bic.w	r2, r2, #4
 8004280:	60da      	str	r2, [r3, #12]
      break;
 8004282:	e014      	b.n	80042ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0208 	bic.w	r2, r2, #8
 8004292:	60da      	str	r2, [r3, #12]
      break;
 8004294:	e00b      	b.n	80042ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0210 	bic.w	r2, r2, #16
 80042a4:	60da      	str	r2, [r3, #12]
      break;
 80042a6:	e002      	b.n	80042ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d157      	bne.n	8004364 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2200      	movs	r2, #0
 80042ba:	6839      	ldr	r1, [r7, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fdad 	bl	8004e1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2a      	ldr	r2, [pc, #168]	; (8004370 <HAL_TIM_OC_Stop_IT+0x160>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d117      	bne.n	80042fc <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a1a      	ldr	r2, [r3, #32]
 80042d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10f      	bne.n	80042fc <HAL_TIM_OC_Stop_IT+0xec>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	f240 4344 	movw	r3, #1092	; 0x444
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_TIM_OC_Stop_IT+0xec>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	f241 1311 	movw	r3, #4369	; 0x1111
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10f      	bne.n	800432c <HAL_TIM_OC_Stop_IT+0x11c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	f240 4344 	movw	r3, #1092	; 0x444
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d107      	bne.n	800432c <HAL_TIM_OC_Stop_IT+0x11c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <HAL_TIM_OC_Stop_IT+0x12c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800433a:	e013      	b.n	8004364 <HAL_TIM_OC_Stop_IT+0x154>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d104      	bne.n	800434c <HAL_TIM_OC_Stop_IT+0x13c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800434a:	e00b      	b.n	8004364 <HAL_TIM_OC_Stop_IT+0x154>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b08      	cmp	r3, #8
 8004350:	d104      	bne.n	800435c <HAL_TIM_OC_Stop_IT+0x14c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800435a:	e003      	b.n	8004364 <HAL_TIM_OC_Stop_IT+0x154>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004364:	7bfb      	ldrb	r3, [r7, #15]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000

08004374 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e041      	b.n	800440c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d106      	bne.n	80043a2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f839 	bl	8004414 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f000 fa8b 	bl	80048d0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0208 	bic.w	r2, r2, #8
 80043c8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d122      	bne.n	8004484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b02      	cmp	r3, #2
 800444a:	d11b      	bne.n	8004484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0202 	mvn.w	r2, #2
 8004454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa11 	bl	8004892 <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd fd06 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fa14 	bl	80048a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b04      	cmp	r3, #4
 8004490:	d122      	bne.n	80044d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b04      	cmp	r3, #4
 800449e:	d11b      	bne.n	80044d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0204 	mvn.w	r2, #4
 80044a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9e7 	bl	8004892 <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fd fcdc 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f9ea 	bl	80048a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d122      	bne.n	800452c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0208 	mvn.w	r2, #8
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2204      	movs	r2, #4
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9bd 	bl	8004892 <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd fcb2 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f9c0 	bl	80048a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b10      	cmp	r3, #16
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b10      	cmp	r3, #16
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0210 	mvn.w	r2, #16
 8004550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2208      	movs	r2, #8
 8004556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f993 	bl	8004892 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fd fc88 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f996 	bl	80048a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b01      	cmp	r3, #1
 800458c:	d10e      	bne.n	80045ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d107      	bne.n	80045ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0201 	mvn.w	r2, #1
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f969 	bl	800487e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d10e      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	2b80      	cmp	r3, #128	; 0x80
 80045c6:	d107      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fcc0 	bl	8004f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d10e      	bne.n	8004604 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	d107      	bne.n	8004604 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f95b 	bl	80048ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b20      	cmp	r3, #32
 8004610:	d10e      	bne.n	8004630 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b20      	cmp	r3, #32
 800461e:	d107      	bne.n	8004630 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0220 	mvn.w	r2, #32
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fc8a 	bl	8004f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004652:	2302      	movs	r3, #2
 8004654:	e048      	b.n	80046e8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d839      	bhi.n	80046d8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	080046a1 	.word	0x080046a1
 8004670:	080046d9 	.word	0x080046d9
 8004674:	080046d9 	.word	0x080046d9
 8004678:	080046d9 	.word	0x080046d9
 800467c:	080046af 	.word	0x080046af
 8004680:	080046d9 	.word	0x080046d9
 8004684:	080046d9 	.word	0x080046d9
 8004688:	080046d9 	.word	0x080046d9
 800468c:	080046bd 	.word	0x080046bd
 8004690:	080046d9 	.word	0x080046d9
 8004694:	080046d9 	.word	0x080046d9
 8004698:	080046d9 	.word	0x080046d9
 800469c:	080046cb 	.word	0x080046cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f992 	bl	80049d0 <TIM_OC1_SetConfig>
      break;
 80046ac:	e017      	b.n	80046de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f9f1 	bl	8004a9c <TIM_OC2_SetConfig>
      break;
 80046ba:	e010      	b.n	80046de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa56 	bl	8004b74 <TIM_OC3_SetConfig>
      break;
 80046c8:	e009      	b.n	80046de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fab9 	bl	8004c48 <TIM_OC4_SetConfig>
      break;
 80046d6:	e002      	b.n	80046de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
      break;
 80046dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIM_ConfigClockSource+0x1c>
 8004708:	2302      	movs	r3, #2
 800470a:	e0b4      	b.n	8004876 <HAL_TIM_ConfigClockSource+0x186>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800472a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004744:	d03e      	beq.n	80047c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474a:	f200 8087 	bhi.w	800485c <HAL_TIM_ConfigClockSource+0x16c>
 800474e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004752:	f000 8086 	beq.w	8004862 <HAL_TIM_ConfigClockSource+0x172>
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	d87f      	bhi.n	800485c <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b70      	cmp	r3, #112	; 0x70
 800475e:	d01a      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0xa6>
 8004760:	2b70      	cmp	r3, #112	; 0x70
 8004762:	d87b      	bhi.n	800485c <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b60      	cmp	r3, #96	; 0x60
 8004766:	d050      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x11a>
 8004768:	2b60      	cmp	r3, #96	; 0x60
 800476a:	d877      	bhi.n	800485c <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b50      	cmp	r3, #80	; 0x50
 800476e:	d03c      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0xfa>
 8004770:	2b50      	cmp	r3, #80	; 0x50
 8004772:	d873      	bhi.n	800485c <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d058      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x13a>
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d86f      	bhi.n	800485c <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b30      	cmp	r3, #48	; 0x30
 800477e:	d064      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x15a>
 8004780:	2b30      	cmp	r3, #48	; 0x30
 8004782:	d86b      	bhi.n	800485c <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b20      	cmp	r3, #32
 8004786:	d060      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x15a>
 8004788:	2b20      	cmp	r3, #32
 800478a:	d867      	bhi.n	800485c <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d05c      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x15a>
 8004790:	2b10      	cmp	r3, #16
 8004792:	d05a      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	e062      	b.n	800485c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6899      	ldr	r1, [r3, #8]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f000 fb19 	bl	8004ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	609a      	str	r2, [r3, #8]
      break;
 80047c2:	e04f      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6899      	ldr	r1, [r3, #8]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f000 fb02 	bl	8004ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e6:	609a      	str	r2, [r3, #8]
      break;
 80047e8:	e03c      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f000 fa76 	bl	8004ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2150      	movs	r1, #80	; 0x50
 8004802:	4618      	mov	r0, r3
 8004804:	f000 facf 	bl	8004da6 <TIM_ITRx_SetConfig>
      break;
 8004808:	e02c      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	461a      	mov	r2, r3
 8004818:	f000 fa95 	bl	8004d46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2160      	movs	r1, #96	; 0x60
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fabf 	bl	8004da6 <TIM_ITRx_SetConfig>
      break;
 8004828:	e01c      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	461a      	mov	r2, r3
 8004838:	f000 fa56 	bl	8004ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2140      	movs	r1, #64	; 0x40
 8004842:	4618      	mov	r0, r3
 8004844:	f000 faaf 	bl	8004da6 <TIM_ITRx_SetConfig>
      break;
 8004848:	e00c      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4619      	mov	r1, r3
 8004854:	4610      	mov	r0, r2
 8004856:	f000 faa6 	bl	8004da6 <TIM_ITRx_SetConfig>
      break;
 800485a:	e003      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
      break;
 8004860:	e000      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a34      	ldr	r2, [pc, #208]	; (80049b4 <TIM_Base_SetConfig+0xe4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00f      	beq.n	8004908 <TIM_Base_SetConfig+0x38>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d00b      	beq.n	8004908 <TIM_Base_SetConfig+0x38>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a31      	ldr	r2, [pc, #196]	; (80049b8 <TIM_Base_SetConfig+0xe8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_Base_SetConfig+0x38>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a30      	ldr	r2, [pc, #192]	; (80049bc <TIM_Base_SetConfig+0xec>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_Base_SetConfig+0x38>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <TIM_Base_SetConfig+0xf0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d108      	bne.n	800491a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <TIM_Base_SetConfig+0xe4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01b      	beq.n	800495a <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004928:	d017      	beq.n	800495a <TIM_Base_SetConfig+0x8a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a22      	ldr	r2, [pc, #136]	; (80049b8 <TIM_Base_SetConfig+0xe8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <TIM_Base_SetConfig+0x8a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a21      	ldr	r2, [pc, #132]	; (80049bc <TIM_Base_SetConfig+0xec>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00f      	beq.n	800495a <TIM_Base_SetConfig+0x8a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <TIM_Base_SetConfig+0xf0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00b      	beq.n	800495a <TIM_Base_SetConfig+0x8a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <TIM_Base_SetConfig+0xf4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <TIM_Base_SetConfig+0x8a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <TIM_Base_SetConfig+0xf8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_Base_SetConfig+0x8a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <TIM_Base_SetConfig+0xfc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d108      	bne.n	800496c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <TIM_Base_SetConfig+0xe4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d103      	bne.n	80049a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	615a      	str	r2, [r3, #20]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800

080049d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f023 0302 	bic.w	r3, r3, #2
 8004a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <TIM_OC1_SetConfig+0xc8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10c      	bne.n	8004a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0308 	bic.w	r3, r3, #8
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <TIM_OC1_SetConfig+0xc8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d111      	bne.n	8004a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	621a      	str	r2, [r3, #32]
}
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40010000 	.word	0x40010000

08004a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0210 	bic.w	r2, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0320 	bic.w	r3, r3, #32
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a1e      	ldr	r2, [pc, #120]	; (8004b70 <TIM_OC2_SetConfig+0xd4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d10d      	bne.n	8004b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <TIM_OC2_SetConfig+0xd4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d113      	bne.n	8004b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000

08004b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0303 	bic.w	r3, r3, #3
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <TIM_OC3_SetConfig+0xd0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d10d      	bne.n	8004bee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a14      	ldr	r2, [pc, #80]	; (8004c44 <TIM_OC3_SetConfig+0xd0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d113      	bne.n	8004c1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	621a      	str	r2, [r3, #32]
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40010000 	.word	0x40010000

08004c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	031b      	lsls	r3, r3, #12
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a10      	ldr	r2, [pc, #64]	; (8004ce4 <TIM_OC4_SetConfig+0x9c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d109      	bne.n	8004cbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40010000 	.word	0x40010000

08004ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f023 0201 	bic.w	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 030a 	bic.w	r3, r3, #10
 8004d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b087      	sub	sp, #28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0210 	bic.w	r2, r3, #16
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	031b      	lsls	r3, r3, #12
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f043 0307 	orr.w	r3, r3, #7
 8004dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	609a      	str	r2, [r3, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	021a      	lsls	r2, r3, #8
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	609a      	str	r2, [r3, #8]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2201      	movs	r2, #1
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	401a      	ands	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a1a      	ldr	r2, [r3, #32]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	431a      	orrs	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e050      	b.n	8004f22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1c      	ldr	r2, [pc, #112]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d018      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ecc:	d013      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a18      	ldr	r2, [pc, #96]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a16      	ldr	r2, [pc, #88]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d009      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d10c      	bne.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40014000 	.word	0x40014000

08004f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e03f      	b.n	8004ffe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fd f93a 	bl	800220c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fe49 	bl	8005c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e021      	b.n	800505c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2224      	movs	r2, #36	; 0x24
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800502e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7fd f977 	bl	8002324 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b20      	cmp	r3, #32
 8005082:	d17c      	bne.n	800517e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_UART_Transmit+0x2c>
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e075      	b.n	8005180 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_UART_Transmit+0x3e>
 800509e:	2302      	movs	r3, #2
 80050a0:	e06e      	b.n	8005180 <HAL_UART_Transmit+0x11c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2221      	movs	r2, #33	; 0x21
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b8:	f7fd fb14 	bl	80026e4 <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	d108      	bne.n	80050e6 <HAL_UART_Transmit+0x82>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	e003      	b.n	80050ee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050f6:	e02a      	b.n	800514e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2200      	movs	r2, #0
 8005100:	2180      	movs	r1, #128	; 0x80
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fb5a 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e036      	b.n	8005180 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005126:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	3302      	adds	r3, #2
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e007      	b.n	8005140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3301      	adds	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1cf      	bne.n	80050f8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2200      	movs	r2, #0
 8005160:	2140      	movs	r1, #64	; 0x40
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fb2a 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e006      	b.n	8005180 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	e000      	b.n	8005180 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800517e:	2302      	movs	r3, #2
  }
}
 8005180:	4618      	mov	r0, r3
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b20      	cmp	r3, #32
 80051a0:	d130      	bne.n	8005204 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <HAL_UART_Transmit_IT+0x26>
 80051a8:	88fb      	ldrh	r3, [r7, #6]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e029      	b.n	8005206 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_UART_Transmit_IT+0x38>
 80051bc:	2302      	movs	r3, #2
 80051be:	e022      	b.n	8005206 <HAL_UART_Transmit_IT+0x7e>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	88fa      	ldrh	r2, [r7, #6]
 80051d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2221      	movs	r2, #33	; 0x21
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051fe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b20      	cmp	r3, #32
 800522a:	d11d      	bne.n	8005268 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_UART_Receive_IT+0x26>
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e016      	b.n	800526a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_UART_Receive_IT+0x38>
 8005246:	2302      	movs	r3, #2
 8005248:	e00f      	b.n	800526a <HAL_UART_Receive_IT+0x58>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	461a      	mov	r2, r3
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fb1a 	bl	8005898 <UART_Start_Receive_IT>
 8005264:	4603      	mov	r3, r0
 8005266:	e000      	b.n	800526a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b0ba      	sub	sp, #232	; 0xe8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800529a:	2300      	movs	r3, #0
 800529c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10f      	bne.n	80052da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <HAL_UART_IRQHandler+0x66>
 80052c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fbfd 	bl	8005ad2 <UART_Receive_IT>
      return;
 80052d8:	e256      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80de 	beq.w	80054a0 <HAL_UART_IRQHandler+0x22c>
 80052e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80d1 	beq.w	80054a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_UART_IRQHandler+0xae>
 800530a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f043 0201 	orr.w	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <HAL_UART_IRQHandler+0xd2>
 800532e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f043 0202 	orr.w	r2, r3, #2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_UART_IRQHandler+0xf6>
 8005352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d011      	beq.n	800539a <HAL_UART_IRQHandler+0x126>
 8005376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d105      	bne.n	800538e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f043 0208 	orr.w	r2, r3, #8
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 81ed 	beq.w	800577e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_UART_IRQHandler+0x14e>
 80053b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fb88 	bl	8005ad2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <HAL_UART_IRQHandler+0x17a>
 80053e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d04f      	beq.n	800548e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa90 	bl	8005914 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d141      	bne.n	8005486 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3314      	adds	r3, #20
 8005408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800541c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3314      	adds	r3, #20
 800542a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800542e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800543a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d9      	bne.n	8005402 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	2b00      	cmp	r3, #0
 8005454:	d013      	beq.n	800547e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	4a7d      	ldr	r2, [pc, #500]	; (8005650 <HAL_UART_IRQHandler+0x3dc>)
 800545c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	4618      	mov	r0, r3
 8005464:	f7fd fb21 	bl	8002aaa <HAL_DMA_Abort_IT>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d016      	beq.n	800549c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005478:	4610      	mov	r0, r2
 800547a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547c:	e00e      	b.n	800549c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fc fc6e 	bl	8001d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005484:	e00a      	b.n	800549c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc fc6a 	bl	8001d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548c:	e006      	b.n	800549c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fc fc66 	bl	8001d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800549a:	e170      	b.n	800577e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549c:	bf00      	nop
    return;
 800549e:	e16e      	b.n	800577e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	f040 814a 	bne.w	800573e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8143 	beq.w	800573e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 813c 	beq.w	800573e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	f040 80b4 	bne.w	8005654 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8140 	beq.w	8005782 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800550a:	429a      	cmp	r2, r3
 800550c:	f080 8139 	bcs.w	8005782 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005516:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005522:	f000 8088 	beq.w	8005636 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800553c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800555e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800556a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1d9      	bne.n	8005526 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3314      	adds	r3, #20
 8005592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800559a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800559e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e1      	bne.n	8005572 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3314      	adds	r3, #20
 80055b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3314      	adds	r3, #20
 80055ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e3      	bne.n	80055ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005606:	f023 0310 	bic.w	r3, r3, #16
 800560a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005618:	65ba      	str	r2, [r7, #88]	; 0x58
 800561a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800561e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e3      	bne.n	80055f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	4618      	mov	r0, r3
 8005632:	f7fd f9ca 	bl	80029ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563e:	b29b      	uxth	r3, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	b29b      	uxth	r3, r3
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f8ac 	bl	80057a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800564c:	e099      	b.n	8005782 <HAL_UART_IRQHandler+0x50e>
 800564e:	bf00      	nop
 8005650:	080059db 	.word	0x080059db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565c:	b29b      	uxth	r3, r3
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 808b 	beq.w	8005786 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8086 	beq.w	8005786 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800569e:	647a      	str	r2, [r7, #68]	; 0x44
 80056a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e3      	bne.n	800567a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3314      	adds	r3, #20
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	623b      	str	r3, [r7, #32]
   return(result);
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056d6:	633a      	str	r2, [r7, #48]	; 0x30
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e3      	bne.n	80056b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	60fb      	str	r3, [r7, #12]
   return(result);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0310 	bic.w	r3, r3, #16
 800570e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800571c:	61fa      	str	r2, [r7, #28]
 800571e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	69b9      	ldr	r1, [r7, #24]
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	617b      	str	r3, [r7, #20]
   return(result);
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e3      	bne.n	80056f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f834 	bl	80057a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800573c:	e023      	b.n	8005786 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_UART_IRQHandler+0x4ea>
 800574a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f953 	bl	8005a02 <UART_Transmit_IT>
    return;
 800575c:	e014      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00e      	beq.n	8005788 <HAL_UART_IRQHandler+0x514>
 800576a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f993 	bl	8005aa2 <UART_EndTransmit_IT>
    return;
 800577c:	e004      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
    return;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
      return;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
      return;
 8005786:	bf00      	nop
  }
}
 8005788:	37e8      	adds	r7, #232	; 0xe8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop

08005790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b090      	sub	sp, #64	; 0x40
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	603b      	str	r3, [r7, #0]
 80057c8:	4613      	mov	r3, r2
 80057ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057cc:	e050      	b.n	8005870 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d04c      	beq.n	8005870 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <UART_WaitOnFlagUntilTimeout+0x30>
 80057dc:	f7fc ff82 	bl	80026e4 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d241      	bcs.n	8005870 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	330c      	adds	r3, #12
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800580c:	637a      	str	r2, [r7, #52]	; 0x34
 800580e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3314      	adds	r3, #20
 8005826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	613b      	str	r3, [r7, #16]
   return(result);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3314      	adds	r3, #20
 800583e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005840:	623a      	str	r2, [r7, #32]
 8005842:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	69f9      	ldr	r1, [r7, #28]
 8005846:	6a3a      	ldr	r2, [r7, #32]
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	61bb      	str	r3, [r7, #24]
   return(result);
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e00f      	b.n	8005890 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4013      	ands	r3, r2
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	429a      	cmp	r2, r3
 800587e:	bf0c      	ite	eq
 8005880:	2301      	moveq	r3, #1
 8005882:	2300      	movne	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	429a      	cmp	r2, r3
 800588c:	d09f      	beq.n	80057ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3740      	adds	r7, #64	; 0x40
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2222      	movs	r2, #34	; 0x22
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695a      	ldr	r2, [r3, #20]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0220 	orr.w	r2, r2, #32
 8005904:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b095      	sub	sp, #84	; 0x54
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800593c:	643a      	str	r2, [r7, #64]	; 0x40
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e5      	bne.n	800591c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	64bb      	str	r3, [r7, #72]	; 0x48
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	2b01      	cmp	r3, #1
 800598a:	d119      	bne.n	80059c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	60bb      	str	r3, [r7, #8]
   return(result);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	647b      	str	r3, [r7, #68]	; 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059ac:	61ba      	str	r2, [r7, #24]
 80059ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059ce:	bf00      	nop
 80059d0:	3754      	adds	r7, #84	; 0x54
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7fc f9b3 	bl	8001d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b21      	cmp	r3, #33	; 0x21
 8005a14:	d13e      	bne.n	8005a94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1e:	d114      	bne.n	8005a4a <UART_Transmit_IT+0x48>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d110      	bne.n	8005a4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	1c9a      	adds	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]
 8005a48:	e008      	b.n	8005a5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	1c59      	adds	r1, r3, #1
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6211      	str	r1, [r2, #32]
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff fe64 	bl	8005790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b08c      	sub	sp, #48	; 0x30
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b22      	cmp	r3, #34	; 0x22
 8005ae4:	f040 80ab 	bne.w	8005c3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af0:	d117      	bne.n	8005b22 <UART_Receive_IT+0x50>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d113      	bne.n	8005b22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b20:	e026      	b.n	8005b70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b34:	d007      	beq.n	8005b46 <UART_Receive_IT+0x74>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <UART_Receive_IT+0x82>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e008      	b.n	8005b66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d15a      	bne.n	8005c3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0220 	bic.w	r2, r2, #32
 8005b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d135      	bne.n	8005c30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	330c      	adds	r3, #12
 8005bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f023 0310 	bic.w	r3, r3, #16
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	330c      	adds	r3, #12
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	623a      	str	r2, [r7, #32]
 8005bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	69f9      	ldr	r1, [r7, #28]
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b10      	cmp	r3, #16
 8005c0a:	d10a      	bne.n	8005c22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fdbb 	bl	80057a4 <HAL_UARTEx_RxEventCallback>
 8005c2e:	e002      	b.n	8005c36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7fc f8e9 	bl	8001e08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e002      	b.n	8005c40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e000      	b.n	8005c40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c3e:	2302      	movs	r3, #2
  }
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3730      	adds	r7, #48	; 0x30
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c4c:	b0c0      	sub	sp, #256	; 0x100
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c64:	68d9      	ldr	r1, [r3, #12]
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	ea40 0301 	orr.w	r3, r0, r1
 8005c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ca0:	f021 010c 	bic.w	r1, r1, #12
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc2:	6999      	ldr	r1, [r3, #24]
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	ea40 0301 	orr.w	r3, r0, r1
 8005cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b8f      	ldr	r3, [pc, #572]	; (8005f14 <UART_SetConfig+0x2cc>)
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d005      	beq.n	8005ce8 <UART_SetConfig+0xa0>
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b8d      	ldr	r3, [pc, #564]	; (8005f18 <UART_SetConfig+0x2d0>)
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d104      	bne.n	8005cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ce8:	f7fd fde2 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 8005cec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005cf0:	e003      	b.n	8005cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cf2:	f7fd fdc9 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8005cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d04:	f040 810c 	bne.w	8005f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	1891      	adds	r1, r2, r2
 8005d20:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d22:	415b      	adcs	r3, r3
 8005d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	eb12 0801 	adds.w	r8, r2, r1
 8005d30:	4629      	mov	r1, r5
 8005d32:	eb43 0901 	adc.w	r9, r3, r1
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d4a:	4690      	mov	r8, r2
 8005d4c:	4699      	mov	r9, r3
 8005d4e:	4623      	mov	r3, r4
 8005d50:	eb18 0303 	adds.w	r3, r8, r3
 8005d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d58:	462b      	mov	r3, r5
 8005d5a:	eb49 0303 	adc.w	r3, r9, r3
 8005d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d76:	460b      	mov	r3, r1
 8005d78:	18db      	adds	r3, r3, r3
 8005d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	eb42 0303 	adc.w	r3, r2, r3
 8005d82:	657b      	str	r3, [r7, #84]	; 0x54
 8005d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d8c:	f7fa fa90 	bl	80002b0 <__aeabi_uldivmod>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4b61      	ldr	r3, [pc, #388]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005d96:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	011c      	lsls	r4, r3, #4
 8005d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005da8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	1891      	adds	r1, r2, r2
 8005db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005db8:	415b      	adcs	r3, r3
 8005dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de0:	4692      	mov	sl, r2
 8005de2:	469b      	mov	fp, r3
 8005de4:	4643      	mov	r3, r8
 8005de6:	eb1a 0303 	adds.w	r3, sl, r3
 8005dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dee:	464b      	mov	r3, r9
 8005df0:	eb4b 0303 	adc.w	r3, fp, r3
 8005df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	18db      	adds	r3, r3, r3
 8005e10:	643b      	str	r3, [r7, #64]	; 0x40
 8005e12:	4613      	mov	r3, r2
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	647b      	str	r3, [r7, #68]	; 0x44
 8005e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e22:	f7fa fa45 	bl	80002b0 <__aeabi_uldivmod>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4b3b      	ldr	r3, [pc, #236]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2264      	movs	r2, #100	; 0x64
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	1acb      	subs	r3, r1, r3
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e42:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005e44:	fba3 2302 	umull	r2, r3, r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e50:	441c      	add	r4, r3
 8005e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e64:	4642      	mov	r2, r8
 8005e66:	464b      	mov	r3, r9
 8005e68:	1891      	adds	r1, r2, r2
 8005e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e6c:	415b      	adcs	r3, r3
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e74:	4641      	mov	r1, r8
 8005e76:	1851      	adds	r1, r2, r1
 8005e78:	6339      	str	r1, [r7, #48]	; 0x30
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	414b      	adcs	r3, r1
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	00cb      	lsls	r3, r1, #3
 8005e90:	4651      	mov	r1, sl
 8005e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e96:	4651      	mov	r1, sl
 8005e98:	00ca      	lsls	r2, r1, #3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	460a      	mov	r2, r1
 8005eac:	eb42 0303 	adc.w	r3, r2, r3
 8005eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ec8:	460b      	mov	r3, r1
 8005eca:	18db      	adds	r3, r3, r3
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ece:	4613      	mov	r3, r2
 8005ed0:	eb42 0303 	adc.w	r3, r2, r3
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ede:	f7fa f9e7 	bl	80002b0 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	2164      	movs	r1, #100	; 0x64
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	3332      	adds	r3, #50	; 0x32
 8005efa:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	f003 0207 	and.w	r2, r3, #7
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4422      	add	r2, r4
 8005f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f10:	e106      	b.n	8006120 <UART_SetConfig+0x4d8>
 8005f12:	bf00      	nop
 8005f14:	40011000 	.word	0x40011000
 8005f18:	40011400 	.word	0x40011400
 8005f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f32:	4642      	mov	r2, r8
 8005f34:	464b      	mov	r3, r9
 8005f36:	1891      	adds	r1, r2, r2
 8005f38:	6239      	str	r1, [r7, #32]
 8005f3a:	415b      	adcs	r3, r3
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f42:	4641      	mov	r1, r8
 8005f44:	1854      	adds	r4, r2, r1
 8005f46:	4649      	mov	r1, r9
 8005f48:	eb43 0501 	adc.w	r5, r3, r1
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	00eb      	lsls	r3, r5, #3
 8005f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f5a:	00e2      	lsls	r2, r4, #3
 8005f5c:	4614      	mov	r4, r2
 8005f5e:	461d      	mov	r5, r3
 8005f60:	4643      	mov	r3, r8
 8005f62:	18e3      	adds	r3, r4, r3
 8005f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f68:	464b      	mov	r3, r9
 8005f6a:	eb45 0303 	adc.w	r3, r5, r3
 8005f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f8e:	4629      	mov	r1, r5
 8005f90:	008b      	lsls	r3, r1, #2
 8005f92:	4621      	mov	r1, r4
 8005f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f98:	4621      	mov	r1, r4
 8005f9a:	008a      	lsls	r2, r1, #2
 8005f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005fa0:	f7fa f986 	bl	80002b0 <__aeabi_uldivmod>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4b60      	ldr	r3, [pc, #384]	; (800612c <UART_SetConfig+0x4e4>)
 8005faa:	fba3 2302 	umull	r2, r3, r3, r2
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	011c      	lsls	r4, r3, #4
 8005fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	1891      	adds	r1, r2, r2
 8005fca:	61b9      	str	r1, [r7, #24]
 8005fcc:	415b      	adcs	r3, r3
 8005fce:	61fb      	str	r3, [r7, #28]
 8005fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	1851      	adds	r1, r2, r1
 8005fd8:	6139      	str	r1, [r7, #16]
 8005fda:	4649      	mov	r1, r9
 8005fdc:	414b      	adcs	r3, r1
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fec:	4659      	mov	r1, fp
 8005fee:	00cb      	lsls	r3, r1, #3
 8005ff0:	4651      	mov	r1, sl
 8005ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff6:	4651      	mov	r1, sl
 8005ff8:	00ca      	lsls	r2, r1, #3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4603      	mov	r3, r0
 8006000:	4642      	mov	r2, r8
 8006002:	189b      	adds	r3, r3, r2
 8006004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006008:	464b      	mov	r3, r9
 800600a:	460a      	mov	r2, r1
 800600c:	eb42 0303 	adc.w	r3, r2, r3
 8006010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	67bb      	str	r3, [r7, #120]	; 0x78
 800601e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800602c:	4649      	mov	r1, r9
 800602e:	008b      	lsls	r3, r1, #2
 8006030:	4641      	mov	r1, r8
 8006032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006036:	4641      	mov	r1, r8
 8006038:	008a      	lsls	r2, r1, #2
 800603a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800603e:	f7fa f937 	bl	80002b0 <__aeabi_uldivmod>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4611      	mov	r1, r2
 8006048:	4b38      	ldr	r3, [pc, #224]	; (800612c <UART_SetConfig+0x4e4>)
 800604a:	fba3 2301 	umull	r2, r3, r3, r1
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	2264      	movs	r2, #100	; 0x64
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	1acb      	subs	r3, r1, r3
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	3332      	adds	r3, #50	; 0x32
 800605c:	4a33      	ldr	r2, [pc, #204]	; (800612c <UART_SetConfig+0x4e4>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006068:	441c      	add	r4, r3
 800606a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606e:	2200      	movs	r2, #0
 8006070:	673b      	str	r3, [r7, #112]	; 0x70
 8006072:	677a      	str	r2, [r7, #116]	; 0x74
 8006074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006078:	4642      	mov	r2, r8
 800607a:	464b      	mov	r3, r9
 800607c:	1891      	adds	r1, r2, r2
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	415b      	adcs	r3, r3
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006088:	4641      	mov	r1, r8
 800608a:	1851      	adds	r1, r2, r1
 800608c:	6039      	str	r1, [r7, #0]
 800608e:	4649      	mov	r1, r9
 8006090:	414b      	adcs	r3, r1
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060a0:	4659      	mov	r1, fp
 80060a2:	00cb      	lsls	r3, r1, #3
 80060a4:	4651      	mov	r1, sl
 80060a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060aa:	4651      	mov	r1, sl
 80060ac:	00ca      	lsls	r2, r1, #3
 80060ae:	4610      	mov	r0, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	4642      	mov	r2, r8
 80060b6:	189b      	adds	r3, r3, r2
 80060b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ba:	464b      	mov	r3, r9
 80060bc:	460a      	mov	r2, r1
 80060be:	eb42 0303 	adc.w	r3, r2, r3
 80060c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	663b      	str	r3, [r7, #96]	; 0x60
 80060ce:	667a      	str	r2, [r7, #100]	; 0x64
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060dc:	4649      	mov	r1, r9
 80060de:	008b      	lsls	r3, r1, #2
 80060e0:	4641      	mov	r1, r8
 80060e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e6:	4641      	mov	r1, r8
 80060e8:	008a      	lsls	r2, r1, #2
 80060ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060ee:	f7fa f8df 	bl	80002b0 <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <UART_SetConfig+0x4e4>)
 80060f8:	fba3 1302 	umull	r1, r3, r3, r2
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	2164      	movs	r1, #100	; 0x64
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	3332      	adds	r3, #50	; 0x32
 800610a:	4a08      	ldr	r2, [pc, #32]	; (800612c <UART_SetConfig+0x4e4>)
 800610c:	fba2 2303 	umull	r2, r3, r2, r3
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 020f 	and.w	r2, r3, #15
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4422      	add	r2, r4
 800611e:	609a      	str	r2, [r3, #8]
}
 8006120:	bf00      	nop
 8006122:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006126:	46bd      	mov	sp, r7
 8006128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800612c:	51eb851f 	.word	0x51eb851f

08006130 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <MUX>:
void MUX(struct WIFI *a)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2204      	movs	r2, #4
 80061c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <IPDef>:
void IPDef(struct WIFI *a)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2205      	movs	r2, #5
 80061ec:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2206      	movs	r2, #6
 8006244:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2208      	movs	r2, #8
 8006270:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2209      	movs	r2, #9
 800629c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2207      	movs	r2, #7
 80062c8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006476:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800648e:	af06      	add	r7, sp, #24
 8006490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006494:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006498:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800649a:	2300      	movs	r3, #0
 800649c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80064a0:	2300      	movs	r3, #0
 80064a2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80064a6:	2300      	movs	r3, #0
 80064a8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80064b2:	2300      	movs	r3, #0
 80064b4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 80064b8:	2320      	movs	r3, #32
 80064ba:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 80064be:	2322      	movs	r3, #34	; 0x22
 80064c0:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 80064c4:	4b7c      	ldr	r3, [pc, #496]	; (80066b8 <AT_ESP8266_ND+0x230>)
 80064c6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 80064ca:	4a7c      	ldr	r2, [pc, #496]	; (80066bc <AT_ESP8266_ND+0x234>)
 80064cc:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	4611      	mov	r1, r2
 80064d4:	8019      	strh	r1, [r3, #0]
 80064d6:	3302      	adds	r3, #2
 80064d8:	0c12      	lsrs	r2, r2, #16
 80064da:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80064dc:	f642 4322 	movw	r3, #11298	; 0x2c22
 80064e0:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80064e4:	f640 230d 	movw	r3, #2573	; 0xa0d
 80064e8:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80064f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800650c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006516:	4618      	mov	r0, r3
 8006518:	f7f9 fe6c 	bl	80001f4 <strlen>
 800651c:	4603      	mov	r3, r0
 800651e:	461a      	mov	r2, r3
 8006520:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006524:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 800652e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006532:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 800653e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006542:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800654c:	4618      	mov	r0, r3
 800654e:	f7f9 fe51 	bl	80001f4 <strlen>
 8006552:	4603      	mov	r3, r0
 8006554:	461a      	mov	r2, r3
 8006556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800655a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006564:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006568:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2206      	movs	r2, #6
 8006570:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006574:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006578:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006586:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006594:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800659e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80065ac:	603b      	str	r3, [r7, #0]
 80065ae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80065b2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80065bc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80065c0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80065c4:	6809      	ldr	r1, [r1, #0]
 80065c6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80065ca:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80065ce:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80065d2:	6800      	ldr	r0, [r0, #0]
 80065d4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80065d8:	2300      	movs	r3, #0
 80065da:	9305      	str	r3, [sp, #20]
 80065dc:	9004      	str	r0, [sp, #16]
 80065de:	9103      	str	r1, [sp, #12]
 80065e0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80065e4:	9102      	str	r1, [sp, #8]
 80065e6:	9201      	str	r2, [sp, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	4633      	mov	r3, r6
 80065ee:	4a34      	ldr	r2, [pc, #208]	; (80066c0 <AT_ESP8266_ND+0x238>)
 80065f0:	4629      	mov	r1, r5
 80065f2:	4620      	mov	r0, r4
 80065f4:	f007 fa0a 	bl	800da0c <FT_String_ND>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	f040 8140 	bne.w	8006880 <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2206      	movs	r2, #6
 800660c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800661e:	2b00      	cmp	r3, #0
 8006620:	d150      	bne.n	80066c4 <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006622:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006626:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006634:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800663e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006642:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800664c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006650:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006660:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800666a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800666e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006672:	6809      	ldr	r1, [r1, #0]
 8006674:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006678:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800667c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006680:	6800      	ldr	r0, [r0, #0]
 8006682:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006686:	2304      	movs	r3, #4
 8006688:	9305      	str	r3, [sp, #20]
 800668a:	9004      	str	r0, [sp, #16]
 800668c:	9103      	str	r1, [sp, #12]
 800668e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006692:	9102      	str	r1, [sp, #8]
 8006694:	9201      	str	r2, [sp, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	4633      	mov	r3, r6
 800669c:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <AT_ESP8266_ND+0x238>)
 800669e:	4629      	mov	r1, r5
 80066a0:	4620      	mov	r0, r4
 80066a2:	f007 f9b3 	bl	800da0c <FT_String_ND>
 80066a6:	4602      	mov	r2, r0
 80066a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 80066b6:	e04f      	b.n	8006758 <AT_ESP8266_ND+0x2d0>
 80066b8:	00222c22 	.word	0x00222c22
 80066bc:	0800faf8 	.word	0x0800faf8
 80066c0:	0800f920 	.word	0x0800f920
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 80066c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80066d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80066e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80066ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80066fc:	603b      	str	r3, [r7, #0]
 80066fe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006702:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800670c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006710:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006714:	6809      	ldr	r1, [r1, #0]
 8006716:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800671a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800671e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006722:	6800      	ldr	r0, [r0, #0]
 8006724:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006728:	2305      	movs	r3, #5
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	9004      	str	r0, [sp, #16]
 800672e:	9103      	str	r1, [sp, #12]
 8006730:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006734:	9102      	str	r1, [sp, #8]
 8006736:	9201      	str	r2, [sp, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	4633      	mov	r3, r6
 800673e:	4ad2      	ldr	r2, [pc, #840]	; (8006a88 <AT_ESP8266_ND+0x600>)
 8006740:	4629      	mov	r1, r5
 8006742:	4620      	mov	r0, r4
 8006744:	f007 f962 	bl	800da0c <FT_String_ND>
 8006748:	4602      	mov	r2, r0
 800674a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800674e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800675c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006766:	2b04      	cmp	r3, #4
 8006768:	d15a      	bne.n	8006820 <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 800676a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800676e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2263      	movs	r2, #99	; 0x63
 8006776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 800677a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800677e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800678c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800679a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f103 0094 	add.w	r0, r3, #148	; 0x94
 80067a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f603 0194 	addw	r1, r3, #2196	; 0x894
 80067b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 80067c0:	2341      	movs	r3, #65	; 0x41
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	2300      	movs	r3, #0
 80067c6:	f007 fc9d 	bl	800e104 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 80067ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80067d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f603 0194 	addw	r1, r3, #2196	; 0x894
 80067e6:	2341      	movs	r3, #65	; 0x41
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	2300      	movs	r3, #0
 80067ec:	2205      	movs	r2, #5
 80067ee:	f007 fc89 	bl	800e104 <CopiaVector>

	 		a->_debug_rx_ok++;
 80067f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006806:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006810:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006814:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2201      	movs	r2, #1
 800681c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006820:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006824:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800682e:	2b05      	cmp	r3, #5
 8006830:	d126      	bne.n	8006880 <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 8006832:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006836:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2237      	movs	r2, #55	; 0x37
 800683e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006842:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006846:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2200      	movs	r2, #0
 800684e:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006852:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006856:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006870:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006874:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2201      	movs	r2, #1
 800687c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006880:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006884:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2204      	movs	r2, #4
 800688c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800689e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80068ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80068ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80068ce:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80068d8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80068dc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80068e0:	6809      	ldr	r1, [r1, #0]
 80068e2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80068e6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80068ea:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80068ee:	6800      	ldr	r0, [r0, #0]
 80068f0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80068f4:	2300      	movs	r3, #0
 80068f6:	9305      	str	r3, [sp, #20]
 80068f8:	9004      	str	r0, [sp, #16]
 80068fa:	9103      	str	r1, [sp, #12]
 80068fc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006900:	9102      	str	r1, [sp, #8]
 8006902:	9201      	str	r2, [sp, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	4633      	mov	r3, r6
 800690a:	4a60      	ldr	r2, [pc, #384]	; (8006a8c <AT_ESP8266_ND+0x604>)
 800690c:	4629      	mov	r1, r5
 800690e:	4620      	mov	r0, r4
 8006910:	f007 f87c 	bl	800da0c <FT_String_ND>
 8006914:	4603      	mov	r3, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	f040 83b4 	bne.w	8007084 <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 800691c:	2301      	movs	r3, #1
 800691e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2206      	movs	r2, #6
 800692e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006932:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006936:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800694e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006952:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800695c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006970:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800697a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800697e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006982:	6809      	ldr	r1, [r1, #0]
 8006984:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006988:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800698c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006990:	6800      	ldr	r0, [r0, #0]
 8006992:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006996:	2300      	movs	r3, #0
 8006998:	9305      	str	r3, [sp, #20]
 800699a:	9004      	str	r0, [sp, #16]
 800699c:	9103      	str	r1, [sp, #12]
 800699e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80069a2:	9102      	str	r1, [sp, #8]
 80069a4:	9201      	str	r2, [sp, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	4633      	mov	r3, r6
 80069ac:	4a38      	ldr	r2, [pc, #224]	; (8006a90 <AT_ESP8266_ND+0x608>)
 80069ae:	4629      	mov	r1, r5
 80069b0:	4620      	mov	r0, r4
 80069b2:	f007 f82b 	bl	800da0c <FT_String_ND>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d113      	bne.n	80069e4 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 80069bc:	2313      	movs	r3, #19
 80069be:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 80069c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 80069e0:	f001 bae1 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 80069e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2208      	movs	r2, #8
 80069f0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80069f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006a02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006a1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a2c:	603b      	str	r3, [r7, #0]
 8006a2e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a32:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a3c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a40:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a44:	6809      	ldr	r1, [r1, #0]
 8006a46:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a4a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a4e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a52:	6800      	ldr	r0, [r0, #0]
 8006a54:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9305      	str	r3, [sp, #20]
 8006a5c:	9004      	str	r0, [sp, #16]
 8006a5e:	9103      	str	r1, [sp, #12]
 8006a60:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a64:	9102      	str	r1, [sp, #8]
 8006a66:	9201      	str	r2, [sp, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4633      	mov	r3, r6
 8006a6e:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <AT_ESP8266_ND+0x60c>)
 8006a70:	4629      	mov	r1, r5
 8006a72:	4620      	mov	r0, r4
 8006a74:	f006 ffca 	bl	800da0c <FT_String_ND>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d10c      	bne.n	8006a98 <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8006a7e:	230d      	movs	r3, #13
 8006a80:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006a84:	f001 ba8f 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
 8006a88:	0800f920 	.word	0x0800f920
 8006a8c:	0800f928 	.word	0x0800f928
 8006a90:	0800f930 	.word	0x0800f930
 8006a94:	0800f938 	.word	0x0800f938
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	220a      	movs	r2, #10
 8006aa4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ad6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ae0:	603b      	str	r3, [r7, #0]
 8006ae2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ae6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006af0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006af4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006af8:	6809      	ldr	r1, [r1, #0]
 8006afa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006afe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b02:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b06:	6800      	ldr	r0, [r0, #0]
 8006b08:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9305      	str	r3, [sp, #20]
 8006b10:	9004      	str	r0, [sp, #16]
 8006b12:	9103      	str	r1, [sp, #12]
 8006b14:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b18:	9102      	str	r1, [sp, #8]
 8006b1a:	9201      	str	r2, [sp, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	4633      	mov	r3, r6
 8006b22:	4aaa      	ldr	r2, [pc, #680]	; (8006dcc <AT_ESP8266_ND+0x944>)
 8006b24:	4629      	mov	r1, r5
 8006b26:	4620      	mov	r0, r4
 8006b28:	f006 ff70 	bl	800da0c <FT_String_ND>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d104      	bne.n	8006b3c <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 8006b32:	231c      	movs	r3, #28
 8006b34:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006b38:	f001 ba35 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	220f      	movs	r2, #15
 8006b48:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006b4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b84:	603b      	str	r3, [r7, #0]
 8006b86:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b8a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b94:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b98:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b9c:	6809      	ldr	r1, [r1, #0]
 8006b9e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ba2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ba6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9305      	str	r3, [sp, #20]
 8006bb4:	9004      	str	r0, [sp, #16]
 8006bb6:	9103      	str	r1, [sp, #12]
 8006bb8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006bbc:	9102      	str	r1, [sp, #8]
 8006bbe:	9201      	str	r2, [sp, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	4633      	mov	r3, r6
 8006bc6:	4a82      	ldr	r2, [pc, #520]	; (8006dd0 <AT_ESP8266_ND+0x948>)
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f006 ff1e 	bl	800da0c <FT_String_ND>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d104      	bne.n	8006be0 <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006bd6:	2317      	movs	r3, #23
 8006bd8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006bdc:	f001 b9e3 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2203      	movs	r2, #3
 8006bec:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8006bf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006bfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c2e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c32:	6812      	ldr	r2, [r2, #0]
 8006c34:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c38:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c3c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c40:	6809      	ldr	r1, [r1, #0]
 8006c42:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c46:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c4a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c4e:	6800      	ldr	r0, [r0, #0]
 8006c50:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006c54:	2300      	movs	r3, #0
 8006c56:	9305      	str	r3, [sp, #20]
 8006c58:	9004      	str	r0, [sp, #16]
 8006c5a:	9103      	str	r1, [sp, #12]
 8006c5c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c60:	9102      	str	r1, [sp, #8]
 8006c62:	9201      	str	r2, [sp, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	4633      	mov	r3, r6
 8006c6a:	4a5a      	ldr	r2, [pc, #360]	; (8006dd4 <AT_ESP8266_ND+0x94c>)
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f006 fecc 	bl	800da0c <FT_String_ND>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d104      	bne.n	8006c84 <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 8006c7a:	2314      	movs	r3, #20
 8006c7c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006c80:	f001 b991 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8006c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	220c      	movs	r2, #12
 8006c90:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006ca2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006cb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006cbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cd2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006cdc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ce0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ce4:	6809      	ldr	r1, [r1, #0]
 8006ce6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006cea:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006cee:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	9305      	str	r3, [sp, #20]
 8006cfc:	9004      	str	r0, [sp, #16]
 8006cfe:	9103      	str	r1, [sp, #12]
 8006d00:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d04:	9102      	str	r1, [sp, #8]
 8006d06:	9201      	str	r2, [sp, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	4633      	mov	r3, r6
 8006d0e:	4a32      	ldr	r2, [pc, #200]	; (8006dd8 <AT_ESP8266_ND+0x950>)
 8006d10:	4629      	mov	r1, r5
 8006d12:	4620      	mov	r0, r4
 8006d14:	f006 fe7a 	bl	800da0c <FT_String_ND>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d104      	bne.n	8006d28 <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 8006d1e:	2315      	movs	r3, #21
 8006d20:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d24:	f001 b93f 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006d28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	220b      	movs	r2, #11
 8006d34:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006d38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006d46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006d62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d76:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d80:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d84:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d88:	6809      	ldr	r1, [r1, #0]
 8006d8a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d8e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d92:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d96:	6800      	ldr	r0, [r0, #0]
 8006d98:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9305      	str	r3, [sp, #20]
 8006da0:	9004      	str	r0, [sp, #16]
 8006da2:	9103      	str	r1, [sp, #12]
 8006da4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006da8:	9102      	str	r1, [sp, #8]
 8006daa:	9201      	str	r2, [sp, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	4633      	mov	r3, r6
 8006db2:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <AT_ESP8266_ND+0x954>)
 8006db4:	4629      	mov	r1, r5
 8006db6:	4620      	mov	r0, r4
 8006db8:	f006 fe28 	bl	800da0c <FT_String_ND>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d10e      	bne.n	8006de0 <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 8006dc2:	2309      	movs	r3, #9
 8006dc4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006dc8:	f001 b8ed 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
 8006dcc:	0800f944 	.word	0x0800f944
 8006dd0:	0800f950 	.word	0x0800f950
 8006dd4:	0800f960 	.word	0x0800f960
 8006dd8:	0800f964 	.word	0x0800f964
 8006ddc:	0800f974 	.word	0x0800f974
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8006de0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006de4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	220b      	movs	r2, #11
 8006dec:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006df4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006dfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006e0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006e1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e28:	603b      	str	r3, [r7, #0]
 8006e2a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e2e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e38:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e3c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e40:	6809      	ldr	r1, [r1, #0]
 8006e42:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e46:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e4a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006e54:	2300      	movs	r3, #0
 8006e56:	9305      	str	r3, [sp, #20]
 8006e58:	9004      	str	r0, [sp, #16]
 8006e5a:	9103      	str	r1, [sp, #12]
 8006e5c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e60:	9102      	str	r1, [sp, #8]
 8006e62:	9201      	str	r2, [sp, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4633      	mov	r3, r6
 8006e6a:	4a82      	ldr	r2, [pc, #520]	; (8007074 <AT_ESP8266_ND+0xbec>)
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f006 fdcc 	bl	800da0c <FT_String_ND>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d104      	bne.n	8006e84 <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 8006e7a:	2307      	movs	r3, #7
 8006e7c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e80:	f001 b891 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006e84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	220b      	movs	r2, #11
 8006e90:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006eb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006ebe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ed2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006edc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ee0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ee4:	6809      	ldr	r1, [r1, #0]
 8006ee6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006eea:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006eee:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ef2:	6800      	ldr	r0, [r0, #0]
 8006ef4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9305      	str	r3, [sp, #20]
 8006efc:	9004      	str	r0, [sp, #16]
 8006efe:	9103      	str	r1, [sp, #12]
 8006f00:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f04:	9102      	str	r1, [sp, #8]
 8006f06:	9201      	str	r2, [sp, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	4633      	mov	r3, r6
 8006f0e:	4a5a      	ldr	r2, [pc, #360]	; (8007078 <AT_ESP8266_ND+0xbf0>)
 8006f10:	4629      	mov	r1, r5
 8006f12:	4620      	mov	r0, r4
 8006f14:	f006 fd7a 	bl	800da0c <FT_String_ND>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d104      	bne.n	8006f28 <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 8006f1e:	2308      	movs	r3, #8
 8006f20:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f24:	f001 b83f 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8006f28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	220a      	movs	r2, #10
 8006f34:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006f38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006f62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f70:	603b      	str	r3, [r7, #0]
 8006f72:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f76:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f80:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f84:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f88:	6809      	ldr	r1, [r1, #0]
 8006f8a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f8e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f92:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f96:	6800      	ldr	r0, [r0, #0]
 8006f98:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9305      	str	r3, [sp, #20]
 8006fa0:	9004      	str	r0, [sp, #16]
 8006fa2:	9103      	str	r1, [sp, #12]
 8006fa4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fa8:	9102      	str	r1, [sp, #8]
 8006faa:	9201      	str	r2, [sp, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	4633      	mov	r3, r6
 8006fb2:	4a32      	ldr	r2, [pc, #200]	; (800707c <AT_ESP8266_ND+0xbf4>)
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f006 fd28 	bl	800da0c <FT_String_ND>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d104      	bne.n	8006fcc <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 8006fc2:	231b      	movs	r3, #27
 8006fc4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fc8:	f000 bfed 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8006fcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2207      	movs	r2, #7
 8006fd8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8006fdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fe0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006fea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ff8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ffc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007006:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800700a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800701a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007024:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007028:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800702c:	6809      	ldr	r1, [r1, #0]
 800702e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007032:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007036:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800703a:	6800      	ldr	r0, [r0, #0]
 800703c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007040:	2300      	movs	r3, #0
 8007042:	9305      	str	r3, [sp, #20]
 8007044:	9004      	str	r0, [sp, #16]
 8007046:	9103      	str	r1, [sp, #12]
 8007048:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800704c:	9102      	str	r1, [sp, #8]
 800704e:	9201      	str	r2, [sp, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4633      	mov	r3, r6
 8007056:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <AT_ESP8266_ND+0xbf8>)
 8007058:	4629      	mov	r1, r5
 800705a:	4620      	mov	r0, r4
 800705c:	f006 fcd6 	bl	800da0c <FT_String_ND>
 8007060:	4603      	mov	r3, r0
 8007062:	2b01      	cmp	r3, #1
 8007064:	f040 879f 	bne.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 8007068:	230f      	movs	r3, #15
 800706a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800706e:	f000 bf9a 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
 8007072:	bf00      	nop
 8007074:	0800f980 	.word	0x0800f980
 8007078:	0800f98c 	.word	0x0800f98c
 800707c:	0800f998 	.word	0x0800f998
 8007080:	0800f9a4 	.word	0x0800f9a4
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007084:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007088:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2207      	movs	r2, #7
 8007090:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007094:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007098:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80070a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80070b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80070be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070cc:	603b      	str	r3, [r7, #0]
 80070ce:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070d2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070dc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070e0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070e4:	6809      	ldr	r1, [r1, #0]
 80070e6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070ea:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070ee:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070f2:	6800      	ldr	r0, [r0, #0]
 80070f4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80070f8:	2300      	movs	r3, #0
 80070fa:	9305      	str	r3, [sp, #20]
 80070fc:	9004      	str	r0, [sp, #16]
 80070fe:	9103      	str	r1, [sp, #12]
 8007100:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007104:	9102      	str	r1, [sp, #8]
 8007106:	9201      	str	r2, [sp, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4633      	mov	r3, r6
 800710e:	4aaa      	ldr	r2, [pc, #680]	; (80073b8 <AT_ESP8266_ND+0xf30>)
 8007110:	4629      	mov	r1, r5
 8007112:	4620      	mov	r0, r4
 8007114:	f006 fc7a 	bl	800da0c <FT_String_ND>
 8007118:	4603      	mov	r3, r0
 800711a:	2b01      	cmp	r3, #1
 800711c:	f040 839d 	bne.w	800785a <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 8007120:	2302      	movs	r3, #2
 8007122:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8007126:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800712a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2208      	movs	r2, #8
 8007132:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 8007136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800713a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007144:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007148:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007152:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007156:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007160:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007164:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007174:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800717e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007182:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007186:	6809      	ldr	r1, [r1, #0]
 8007188:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800718c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007190:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007194:	6800      	ldr	r0, [r0, #0]
 8007196:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800719a:	2300      	movs	r3, #0
 800719c:	9305      	str	r3, [sp, #20]
 800719e:	9004      	str	r0, [sp, #16]
 80071a0:	9103      	str	r1, [sp, #12]
 80071a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071a6:	9102      	str	r1, [sp, #8]
 80071a8:	9201      	str	r2, [sp, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	4633      	mov	r3, r6
 80071b0:	4a82      	ldr	r2, [pc, #520]	; (80073bc <AT_ESP8266_ND+0xf34>)
 80071b2:	4629      	mov	r1, r5
 80071b4:	4620      	mov	r0, r4
 80071b6:	f006 fc29 	bl	800da0c <FT_String_ND>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d104      	bne.n	80071ca <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 80071c0:	2306      	movs	r3, #6
 80071c2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071c6:	f000 beee 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80071ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2215      	movs	r2, #21
 80071d6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80071da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80071e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80071f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007204:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007208:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007218:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007222:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007226:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800722a:	6809      	ldr	r1, [r1, #0]
 800722c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007230:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007234:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007238:	6800      	ldr	r0, [r0, #0]
 800723a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800723e:	2300      	movs	r3, #0
 8007240:	9305      	str	r3, [sp, #20]
 8007242:	9004      	str	r0, [sp, #16]
 8007244:	9103      	str	r1, [sp, #12]
 8007246:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800724a:	9102      	str	r1, [sp, #8]
 800724c:	9201      	str	r2, [sp, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	4633      	mov	r3, r6
 8007254:	4a5a      	ldr	r2, [pc, #360]	; (80073c0 <AT_ESP8266_ND+0xf38>)
 8007256:	4629      	mov	r1, r5
 8007258:	4620      	mov	r0, r4
 800725a:	f006 fbd7 	bl	800da0c <FT_String_ND>
 800725e:	4603      	mov	r3, r0
 8007260:	2b01      	cmp	r3, #1
 8007262:	d104      	bne.n	800726e <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8007264:	230e      	movs	r3, #14
 8007266:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800726a:	f000 be9c 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 800726e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007272:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	220c      	movs	r2, #12
 800727a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800727e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007282:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800728c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800729a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800729e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80072a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072bc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072c6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072ca:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072ce:	6809      	ldr	r1, [r1, #0]
 80072d0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072d4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072d8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072dc:	6800      	ldr	r0, [r0, #0]
 80072de:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80072e2:	2300      	movs	r3, #0
 80072e4:	9305      	str	r3, [sp, #20]
 80072e6:	9004      	str	r0, [sp, #16]
 80072e8:	9103      	str	r1, [sp, #12]
 80072ea:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072ee:	9102      	str	r1, [sp, #8]
 80072f0:	9201      	str	r2, [sp, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	4633      	mov	r3, r6
 80072f8:	4a32      	ldr	r2, [pc, #200]	; (80073c4 <AT_ESP8266_ND+0xf3c>)
 80072fa:	4629      	mov	r1, r5
 80072fc:	4620      	mov	r0, r4
 80072fe:	f006 fb85 	bl	800da0c <FT_String_ND>
 8007302:	4603      	mov	r3, r0
 8007304:	2b01      	cmp	r3, #1
 8007306:	d104      	bne.n	8007312 <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 8007308:	2316      	movs	r3, #22
 800730a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800730e:	f000 be4a 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007312:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007316:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	220b      	movs	r2, #11
 800731e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007322:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007326:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007330:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007334:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800733e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007342:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800734c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007350:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007360:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800736a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800736e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007372:	6809      	ldr	r1, [r1, #0]
 8007374:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007378:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800737c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007380:	6800      	ldr	r0, [r0, #0]
 8007382:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007386:	2300      	movs	r3, #0
 8007388:	9305      	str	r3, [sp, #20]
 800738a:	9004      	str	r0, [sp, #16]
 800738c:	9103      	str	r1, [sp, #12]
 800738e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007392:	9102      	str	r1, [sp, #8]
 8007394:	9201      	str	r2, [sp, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	4633      	mov	r3, r6
 800739c:	4a0a      	ldr	r2, [pc, #40]	; (80073c8 <AT_ESP8266_ND+0xf40>)
 800739e:	4629      	mov	r1, r5
 80073a0:	4620      	mov	r0, r4
 80073a2:	f006 fb33 	bl	800da0c <FT_String_ND>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10f      	bne.n	80073cc <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 80073ac:	231a      	movs	r3, #26
 80073ae:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073b2:	f000 bdf8 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
 80073b6:	bf00      	nop
 80073b8:	0800f9ac 	.word	0x0800f9ac
 80073bc:	0800f9b4 	.word	0x0800f9b4
 80073c0:	0800f9c0 	.word	0x0800f9c0
 80073c4:	0800f964 	.word	0x0800f964
 80073c8:	0800f974 	.word	0x0800f974
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80073cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2211      	movs	r2, #17
 80073d8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80073dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80073ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80073f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007406:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800740a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800741a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800741e:	6812      	ldr	r2, [r2, #0]
 8007420:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007424:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007428:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800742c:	6809      	ldr	r1, [r1, #0]
 800742e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007432:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007436:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007440:	2300      	movs	r3, #0
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	9004      	str	r0, [sp, #16]
 8007446:	9103      	str	r1, [sp, #12]
 8007448:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800744c:	9102      	str	r1, [sp, #8]
 800744e:	9201      	str	r2, [sp, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4633      	mov	r3, r6
 8007456:	4aaa      	ldr	r2, [pc, #680]	; (8007700 <AT_ESP8266_ND+0x1278>)
 8007458:	4629      	mov	r1, r5
 800745a:	4620      	mov	r0, r4
 800745c:	f006 fad6 	bl	800da0c <FT_String_ND>
 8007460:	4603      	mov	r3, r0
 8007462:	2b01      	cmp	r3, #1
 8007464:	d104      	bne.n	8007470 <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 8007466:	2311      	movs	r3, #17
 8007468:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800746c:	f000 bd9b 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8007470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	220a      	movs	r2, #10
 800747c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007480:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007484:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800748e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007492:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800749c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80074aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074be:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074c2:	6812      	ldr	r2, [r2, #0]
 80074c4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074c8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074cc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074d0:	6809      	ldr	r1, [r1, #0]
 80074d2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074d6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074da:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074de:	6800      	ldr	r0, [r0, #0]
 80074e0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80074e4:	2300      	movs	r3, #0
 80074e6:	9305      	str	r3, [sp, #20]
 80074e8:	9004      	str	r0, [sp, #16]
 80074ea:	9103      	str	r1, [sp, #12]
 80074ec:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074f0:	9102      	str	r1, [sp, #8]
 80074f2:	9201      	str	r2, [sp, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	4633      	mov	r3, r6
 80074fa:	4a82      	ldr	r2, [pc, #520]	; (8007704 <AT_ESP8266_ND+0x127c>)
 80074fc:	4629      	mov	r1, r5
 80074fe:	4620      	mov	r0, r4
 8007500:	f006 fa84 	bl	800da0c <FT_String_ND>
 8007504:	4603      	mov	r3, r0
 8007506:	2b01      	cmp	r3, #1
 8007508:	d104      	bne.n	8007514 <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 800750a:	231d      	movs	r3, #29
 800750c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007510:	f000 bd49 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007518:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	220b      	movs	r2, #11
 8007520:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007532:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007536:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007540:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007544:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800754e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007552:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800755c:	603b      	str	r3, [r7, #0]
 800755e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007562:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007566:	6812      	ldr	r2, [r2, #0]
 8007568:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800756c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007570:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007574:	6809      	ldr	r1, [r1, #0]
 8007576:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800757a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800757e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007582:	6800      	ldr	r0, [r0, #0]
 8007584:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007588:	2300      	movs	r3, #0
 800758a:	9305      	str	r3, [sp, #20]
 800758c:	9004      	str	r0, [sp, #16]
 800758e:	9103      	str	r1, [sp, #12]
 8007590:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007594:	9102      	str	r1, [sp, #8]
 8007596:	9201      	str	r2, [sp, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	4633      	mov	r3, r6
 800759e:	4a5a      	ldr	r2, [pc, #360]	; (8007708 <AT_ESP8266_ND+0x1280>)
 80075a0:	4629      	mov	r1, r5
 80075a2:	4620      	mov	r0, r4
 80075a4:	f006 fa32 	bl	800da0c <FT_String_ND>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d104      	bne.n	80075b8 <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 80075ae:	231e      	movs	r3, #30
 80075b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075b4:	f000 bcf7 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 80075b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	220b      	movs	r2, #11
 80075c4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80075c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80075d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80075e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80075f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007600:	603b      	str	r3, [r7, #0]
 8007602:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007606:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800760a:	6812      	ldr	r2, [r2, #0]
 800760c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007610:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007614:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007618:	6809      	ldr	r1, [r1, #0]
 800761a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800761e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007622:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007626:	6800      	ldr	r0, [r0, #0]
 8007628:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800762c:	2300      	movs	r3, #0
 800762e:	9305      	str	r3, [sp, #20]
 8007630:	9004      	str	r0, [sp, #16]
 8007632:	9103      	str	r1, [sp, #12]
 8007634:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007638:	9102      	str	r1, [sp, #8]
 800763a:	9201      	str	r2, [sp, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	4633      	mov	r3, r6
 8007642:	4a32      	ldr	r2, [pc, #200]	; (800770c <AT_ESP8266_ND+0x1284>)
 8007644:	4629      	mov	r1, r5
 8007646:	4620      	mov	r0, r4
 8007648:	f006 f9e0 	bl	800da0c <FT_String_ND>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d104      	bne.n	800765c <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 8007652:	231f      	movs	r3, #31
 8007654:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007658:	f000 bca5 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 800765c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007660:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2208      	movs	r2, #8
 8007668:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800766c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007670:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800767a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800767e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800768c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800769a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076a4:	603b      	str	r3, [r7, #0]
 80076a6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076aa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076bc:	6809      	ldr	r1, [r1, #0]
 80076be:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076c2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80076c6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80076ca:	6800      	ldr	r0, [r0, #0]
 80076cc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80076d0:	2300      	movs	r3, #0
 80076d2:	9305      	str	r3, [sp, #20]
 80076d4:	9004      	str	r0, [sp, #16]
 80076d6:	9103      	str	r1, [sp, #12]
 80076d8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076dc:	9102      	str	r1, [sp, #8]
 80076de:	9201      	str	r2, [sp, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	4633      	mov	r3, r6
 80076e6:	4a0a      	ldr	r2, [pc, #40]	; (8007710 <AT_ESP8266_ND+0x1288>)
 80076e8:	4629      	mov	r1, r5
 80076ea:	4620      	mov	r0, r4
 80076ec:	f006 f98e 	bl	800da0c <FT_String_ND>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d10e      	bne.n	8007714 <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 80076f6:	2320      	movs	r3, #32
 80076f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076fc:	f000 bc53 	b.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
 8007700:	0800f9d8 	.word	0x0800f9d8
 8007704:	0800f944 	.word	0x0800f944
 8007708:	0800f980 	.word	0x0800f980
 800770c:	0800f98c 	.word	0x0800f98c
 8007710:	0800f9ec 	.word	0x0800f9ec
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007718:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	220a      	movs	r2, #10
 8007720:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007728:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007732:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007736:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800774e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800775c:	603b      	str	r3, [r7, #0]
 800775e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007762:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800776c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007770:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007774:	6809      	ldr	r1, [r1, #0]
 8007776:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800777a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800777e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007782:	6800      	ldr	r0, [r0, #0]
 8007784:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007788:	2300      	movs	r3, #0
 800778a:	9305      	str	r3, [sp, #20]
 800778c:	9004      	str	r0, [sp, #16]
 800778e:	9103      	str	r1, [sp, #12]
 8007790:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007794:	9102      	str	r1, [sp, #8]
 8007796:	9201      	str	r2, [sp, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	4633      	mov	r3, r6
 800779e:	4ab7      	ldr	r2, [pc, #732]	; (8007a7c <AT_ESP8266_ND+0x15f4>)
 80077a0:	4629      	mov	r1, r5
 80077a2:	4620      	mov	r0, r4
 80077a4:	f006 f932 	bl	800da0c <FT_String_ND>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d103      	bne.n	80077b6 <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 80077ae:	2321      	movs	r3, #33	; 0x21
 80077b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077b4:	e3f7      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 80077b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2205      	movs	r2, #5
 80077c2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80077c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80077d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80077e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80077f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007804:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800780e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007812:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007816:	6809      	ldr	r1, [r1, #0]
 8007818:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800781c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007820:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007824:	6800      	ldr	r0, [r0, #0]
 8007826:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800782a:	2300      	movs	r3, #0
 800782c:	9305      	str	r3, [sp, #20]
 800782e:	9004      	str	r0, [sp, #16]
 8007830:	9103      	str	r1, [sp, #12]
 8007832:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007836:	9102      	str	r1, [sp, #8]
 8007838:	9201      	str	r2, [sp, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4633      	mov	r3, r6
 8007840:	4a8f      	ldr	r2, [pc, #572]	; (8007a80 <AT_ESP8266_ND+0x15f8>)
 8007842:	4629      	mov	r1, r5
 8007844:	4620      	mov	r0, r4
 8007846:	f006 f8e1 	bl	800da0c <FT_String_ND>
 800784a:	4603      	mov	r3, r0
 800784c:	2b01      	cmp	r3, #1
 800784e:	f040 83aa 	bne.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007852:	2322      	movs	r3, #34	; 0x22
 8007854:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007858:	e3a5      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 800785a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	220f      	movs	r2, #15
 8007866:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 800786a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800786e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007878:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800787c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007886:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800788a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007898:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078a8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078ac:	6812      	ldr	r2, [r2, #0]
 80078ae:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078b2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078b6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078ba:	6809      	ldr	r1, [r1, #0]
 80078bc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078c0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80078c4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80078c8:	6800      	ldr	r0, [r0, #0]
 80078ca:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80078ce:	2300      	movs	r3, #0
 80078d0:	9305      	str	r3, [sp, #20]
 80078d2:	9004      	str	r0, [sp, #16]
 80078d4:	9103      	str	r1, [sp, #12]
 80078d6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078da:	9102      	str	r1, [sp, #8]
 80078dc:	9201      	str	r2, [sp, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4633      	mov	r3, r6
 80078e4:	4a67      	ldr	r2, [pc, #412]	; (8007a84 <AT_ESP8266_ND+0x15fc>)
 80078e6:	4629      	mov	r1, r5
 80078e8:	4620      	mov	r0, r4
 80078ea:	f006 f88f 	bl	800da0c <FT_String_ND>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d112      	bne.n	800791a <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 80078f4:	230a      	movs	r3, #10
 80078f6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 80078fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007918:	e345      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 800791a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2209      	movs	r2, #9
 8007926:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800792a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800792e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007938:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800793c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007946:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800794a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007954:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007958:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007968:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800796c:	6812      	ldr	r2, [r2, #0]
 800796e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007972:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007976:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800797a:	6809      	ldr	r1, [r1, #0]
 800797c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007980:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007984:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007988:	6800      	ldr	r0, [r0, #0]
 800798a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800798e:	2300      	movs	r3, #0
 8007990:	9305      	str	r3, [sp, #20]
 8007992:	9004      	str	r0, [sp, #16]
 8007994:	9103      	str	r1, [sp, #12]
 8007996:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800799a:	9102      	str	r1, [sp, #8]
 800799c:	9201      	str	r2, [sp, #4]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	4633      	mov	r3, r6
 80079a4:	4a38      	ldr	r2, [pc, #224]	; (8007a88 <AT_ESP8266_ND+0x1600>)
 80079a6:	4629      	mov	r1, r5
 80079a8:	4620      	mov	r0, r4
 80079aa:	f006 f82f 	bl	800da0c <FT_String_ND>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d112      	bne.n	80079da <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 80079b4:	2319      	movs	r3, #25
 80079b6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 80079ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 80079d8:	e2e5      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 80079da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2208      	movs	r2, #8
 80079e6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80079ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80079f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a28:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a32:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a36:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a3a:	6809      	ldr	r1, [r1, #0]
 8007a3c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a40:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a44:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a48:	6800      	ldr	r0, [r0, #0]
 8007a4a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9305      	str	r3, [sp, #20]
 8007a52:	9004      	str	r0, [sp, #16]
 8007a54:	9103      	str	r1, [sp, #12]
 8007a56:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a5a:	9102      	str	r1, [sp, #8]
 8007a5c:	9201      	str	r2, [sp, #4]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	4633      	mov	r3, r6
 8007a64:	4a09      	ldr	r2, [pc, #36]	; (8007a8c <AT_ESP8266_ND+0x1604>)
 8007a66:	4629      	mov	r1, r5
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f005 ffcf 	bl	800da0c <FT_String_ND>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d10d      	bne.n	8007a90 <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8007a74:	2310      	movs	r3, #16
 8007a76:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a7a:	e294      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
 8007a7c:	0800f998 	.word	0x0800f998
 8007a80:	0800f9f8 	.word	0x0800f9f8
 8007a84:	0800fa00 	.word	0x0800fa00
 8007a88:	0800fa10 	.word	0x0800fa10
 8007a8c:	0800f9b4 	.word	0x0800f9b4
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007aac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ab0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f203 4694 	addw	r6, r3, #1172	; 0x494
 8007aba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007abe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 8007ac8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007acc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007adc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ae6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007aea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007aee:	6809      	ldr	r1, [r1, #0]
 8007af0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007af4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007af8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007afc:	6800      	ldr	r0, [r0, #0]
 8007afe:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b02:	2300      	movs	r3, #0
 8007b04:	9305      	str	r3, [sp, #20]
 8007b06:	9004      	str	r0, [sp, #16]
 8007b08:	9103      	str	r1, [sp, #12]
 8007b0a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b0e:	9102      	str	r1, [sp, #8]
 8007b10:	9201      	str	r2, [sp, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	4663      	mov	r3, ip
 8007b18:	4632      	mov	r2, r6
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f005 ff75 	bl	800da0c <FT_String_ND>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d112      	bne.n	8007b4e <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 8235 	beq.w	8007fa6 <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007b4c:	e22b      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007b4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	220d      	movs	r2, #13
 8007b5a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007b5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007b6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007b7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007b88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b96:	603b      	str	r3, [r7, #0]
 8007b98:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b9c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ba6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007baa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bae:	6809      	ldr	r1, [r1, #0]
 8007bb0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bb4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007bb8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007bbc:	6800      	ldr	r0, [r0, #0]
 8007bbe:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9305      	str	r3, [sp, #20]
 8007bc6:	9004      	str	r0, [sp, #16]
 8007bc8:	9103      	str	r1, [sp, #12]
 8007bca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bce:	9102      	str	r1, [sp, #8]
 8007bd0:	9201      	str	r2, [sp, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	4633      	mov	r3, r6
 8007bd8:	4ac5      	ldr	r2, [pc, #788]	; (8007ef0 <AT_ESP8266_ND+0x1a68>)
 8007bda:	4629      	mov	r1, r5
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f005 ff15 	bl	800da0c <FT_String_ND>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d112      	bne.n	8007c0e <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007be8:	2312      	movs	r3, #18
 8007bea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007bee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007c0c:	e1cb      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007c0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	220d      	movs	r2, #13
 8007c1a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8007c1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007c48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c5c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c66:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c6a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c6e:	6809      	ldr	r1, [r1, #0]
 8007c70:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c74:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c78:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c7c:	6800      	ldr	r0, [r0, #0]
 8007c7e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007c82:	2300      	movs	r3, #0
 8007c84:	9305      	str	r3, [sp, #20]
 8007c86:	9004      	str	r0, [sp, #16]
 8007c88:	9103      	str	r1, [sp, #12]
 8007c8a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c8e:	9102      	str	r1, [sp, #8]
 8007c90:	9201      	str	r2, [sp, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	4633      	mov	r3, r6
 8007c98:	4a96      	ldr	r2, [pc, #600]	; (8007ef4 <AT_ESP8266_ND+0x1a6c>)
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f005 feb5 	bl	800da0c <FT_String_ND>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d112      	bne.n	8007cce <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 8007ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ccc:	e16b      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007cce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	220e      	movs	r2, #14
 8007cda:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 8007cde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007cec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007cfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d1c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d26:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d2a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d2e:	6809      	ldr	r1, [r1, #0]
 8007d30:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d34:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d38:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007d42:	2300      	movs	r3, #0
 8007d44:	9305      	str	r3, [sp, #20]
 8007d46:	9004      	str	r0, [sp, #16]
 8007d48:	9103      	str	r1, [sp, #12]
 8007d4a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d4e:	9102      	str	r1, [sp, #8]
 8007d50:	9201      	str	r2, [sp, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	4633      	mov	r3, r6
 8007d58:	4a67      	ldr	r2, [pc, #412]	; (8007ef8 <AT_ESP8266_ND+0x1a70>)
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f005 fe55 	bl	800da0c <FT_String_ND>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d112      	bne.n	8007d8e <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 8007d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007d86:	230b      	movs	r3, #11
 8007d88:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d8c:	e10b      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007d8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	220a      	movs	r2, #10
 8007d9a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007d9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007da2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007dac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007dba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007dc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007dd6:	603b      	str	r3, [r7, #0]
 8007dd8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ddc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007de0:	6812      	ldr	r2, [r2, #0]
 8007de2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007de6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007dea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007dee:	6809      	ldr	r1, [r1, #0]
 8007df0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007df4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007df8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007dfc:	6800      	ldr	r0, [r0, #0]
 8007dfe:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007e02:	2300      	movs	r3, #0
 8007e04:	9305      	str	r3, [sp, #20]
 8007e06:	9004      	str	r0, [sp, #16]
 8007e08:	9103      	str	r1, [sp, #12]
 8007e0a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e0e:	9102      	str	r1, [sp, #8]
 8007e10:	9201      	str	r2, [sp, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	4633      	mov	r3, r6
 8007e18:	4a38      	ldr	r2, [pc, #224]	; (8007efc <AT_ESP8266_ND+0x1a74>)
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f005 fdf5 	bl	800da0c <FT_String_ND>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d112      	bne.n	8007e4e <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007e28:	2318      	movs	r3, #24
 8007e2a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007e2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007e4c:	e0ab      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007e4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2208      	movs	r2, #8
 8007e5a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007e5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007e6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e9c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ea6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007eaa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007eae:	6809      	ldr	r1, [r1, #0]
 8007eb0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007eb4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007eb8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ebc:	6800      	ldr	r0, [r0, #0]
 8007ebe:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9305      	str	r3, [sp, #20]
 8007ec6:	9004      	str	r0, [sp, #16]
 8007ec8:	9103      	str	r1, [sp, #12]
 8007eca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ece:	9102      	str	r1, [sp, #8]
 8007ed0:	9201      	str	r2, [sp, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	4633      	mov	r3, r6
 8007ed8:	4a09      	ldr	r2, [pc, #36]	; (8007f00 <AT_ESP8266_ND+0x1a78>)
 8007eda:	4629      	mov	r1, r5
 8007edc:	4620      	mov	r0, r4
 8007ede:	f005 fd95 	bl	800da0c <FT_String_ND>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d10d      	bne.n	8007f04 <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007eee:	e05a      	b.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
 8007ef0:	0800fa1c 	.word	0x0800fa1c
 8007ef4:	0800fa2c 	.word	0x0800fa2c
 8007ef8:	0800fa3c 	.word	0x0800fa3c
 8007efc:	0800fa4c 	.word	0x0800fa4c
 8007f00:	0800fa58 	.word	0x0800fa58
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8007f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2209      	movs	r2, #9
 8007f10:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007f14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007f22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007f30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007f3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f4c:	603b      	str	r3, [r7, #0]
 8007f4e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f52:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f5c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f60:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f64:	6809      	ldr	r1, [r1, #0]
 8007f66:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f6a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f6e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f72:	6800      	ldr	r0, [r0, #0]
 8007f74:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9305      	str	r3, [sp, #20]
 8007f7c:	9004      	str	r0, [sp, #16]
 8007f7e:	9103      	str	r1, [sp, #12]
 8007f80:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f84:	9102      	str	r1, [sp, #8]
 8007f86:	9201      	str	r2, [sp, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	4633      	mov	r3, r6
 8007f8e:	4a78      	ldr	r2, [pc, #480]	; (8008170 <AT_ESP8266_ND+0x1ce8>)
 8007f90:	4629      	mov	r1, r5
 8007f92:	4620      	mov	r0, r4
 8007f94:	f005 fd3a 	bl	800da0c <FT_String_ND>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d103      	bne.n	8007fa6 <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 8007f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fa2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8007fa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007faa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	2b08      	cmp	r3, #8
 8007fb8:	f201 84d7 	bhi.w	800996a <AT_ESP8266_ND+0x34e2>
 8007fbc:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <AT_ESP8266_ND+0x1b3c>)
 8007fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc2:	bf00      	nop
 8007fc4:	08007fe9 	.word	0x08007fe9
 8007fc8:	08008179 	.word	0x08008179
 8007fcc:	080083fb 	.word	0x080083fb
 8007fd0:	08008579 	.word	0x08008579
 8007fd4:	08008751 	.word	0x08008751
 8007fd8:	08008a25 	.word	0x08008a25
 8007fdc:	08008ce5 	.word	0x08008ce5
 8007fe0:	0800920d 	.word	0x0800920d
 8007fe4:	080093e3 	.word	0x080093e3
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007fe8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8007ff8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ffc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008006:	2b01      	cmp	r3, #1
 8008008:	d14f      	bne.n	80080aa <AT_ESP8266_ND+0x1c22>
 800800a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800800e:	2b01      	cmp	r3, #1
 8008010:	d04b      	beq.n	80080aa <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 8008012:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008016:	2b02      	cmp	r3, #2
 8008018:	d047      	beq.n	80080aa <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 800801a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800801e:	2b04      	cmp	r3, #4
 8008020:	d043      	beq.n	80080aa <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 8008022:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008026:	2b13      	cmp	r3, #19
 8008028:	d03f      	beq.n	80080aa <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 800802a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800802e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800803a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800803e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2201      	movs	r2, #1
 8008046:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 800804a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800804e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008058:	4620      	mov	r0, r4
 800805a:	f7f8 f8cb 	bl	80001f4 <strlen>
 800805e:	4603      	mov	r3, r0
 8008060:	4423      	add	r3, r4
 8008062:	4a44      	ldr	r2, [pc, #272]	; (8008174 <AT_ESP8266_ND+0x1cec>)
 8008064:	461c      	mov	r4, r3
 8008066:	4613      	mov	r3, r2
 8008068:	cb07      	ldmia	r3!, {r0, r1, r2}
 800806a:	6020      	str	r0, [r4, #0]
 800806c:	6061      	str	r1, [r4, #4]
 800806e:	60a2      	str	r2, [r4, #8]
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008074:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008078:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008082:	4618      	mov	r0, r3
 8008084:	f7f8 f8b6 	bl	80001f4 <strlen>
 8008088:	4603      	mov	r3, r0
 800808a:	461a      	mov	r2, r3
 800808c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 800809a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800809e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2264      	movs	r2, #100	; 0x64
 80080a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 80080aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80080c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d11b      	bne.n	8008112 <AT_ESP8266_ND+0x1c8a>
 80080da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d023      	beq.n	800812a <AT_ESP8266_ND+0x1ca2>
 80080e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080e6:	2b1c      	cmp	r3, #28
 80080e8:	d01f      	beq.n	800812a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 80080ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d01b      	beq.n	800812a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 80080f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d017      	beq.n	800812a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 80080fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080fe:	2b0b      	cmp	r3, #11
 8008100:	d013      	beq.n	800812a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 8008102:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008106:	2b0c      	cmp	r3, #12
 8008108:	d00f      	beq.n	800812a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 800810a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800810e:	2b13      	cmp	r3, #19
 8008110:	d00b      	beq.n	800812a <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8008112:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008116:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008120:	f241 3288 	movw	r2, #5000	; 0x1388
 8008124:	4293      	cmp	r3, r2
 8008126:	f341 842a 	ble.w	800997e <AT_ESP8266_ND+0x34f6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800812a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800812e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800813c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008140:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800814c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008150:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 800815c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2200      	movs	r2, #0
 8008168:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 800816c:	f001 bc07 	b.w	800997e <AT_ESP8266_ND+0x34f6>
 8008170:	0800fa64 	.word	0x0800fa64
 8008174:	0800fa70 	.word	0x0800fa70
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008178:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800817c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800818c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008196:	2b01      	cmp	r3, #1
 8008198:	f040 80c8 	bne.w	800832c <AT_ESP8266_ND+0x1ea4>
 800819c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	f000 80c3 	beq.w	800832c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 80081a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	f000 80be 	beq.w	800832c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 80081b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	f000 80b9 	beq.w	800832c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 80081ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081be:	2b04      	cmp	r3, #4
 80081c0:	f000 80b4 	beq.w	800832c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 80081c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081c8:	2b0a      	cmp	r3, #10
 80081ca:	f000 80af 	beq.w	800832c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 80081ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081d2:	2b0b      	cmp	r3, #11
 80081d4:	f000 80aa 	beq.w	800832c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 80081d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081dc:	2b0c      	cmp	r3, #12
 80081de:	f000 80a5 	beq.w	800832c <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 80081e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80081f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 8008202:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008206:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008210:	4620      	mov	r0, r4
 8008212:	f7f7 ffef 	bl	80001f4 <strlen>
 8008216:	4603      	mov	r3, r0
 8008218:	4423      	add	r3, r4
 800821a:	49d5      	ldr	r1, [pc, #852]	; (8008570 <AT_ESP8266_ND+0x20e8>)
 800821c:	461a      	mov	r2, r3
 800821e:	460b      	mov	r3, r1
 8008220:	cb03      	ldmia	r3!, {r0, r1}
 8008222:	6010      	str	r0, [r2, #0]
 8008224:	6051      	str	r1, [r2, #4]
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 800822a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800822e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008238:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800823c:	2201      	movs	r2, #1
 800823e:	4618      	mov	r0, r3
 8008240:	f006 f957 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008244:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008248:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008252:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008256:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	1d9d      	adds	r5, r3, #6
 800825e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3306      	adds	r3, #6
 800826a:	4618      	mov	r0, r3
 800826c:	f7f7 ffc2 	bl	80001f4 <strlen>
 8008270:	4603      	mov	r3, r0
 8008272:	461a      	mov	r2, r3
 8008274:	4629      	mov	r1, r5
 8008276:	4620      	mov	r0, r4
 8008278:	f006 f93b 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 800827c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008280:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800828a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800828e:	4618      	mov	r0, r3
 8008290:	f7f7 ffb0 	bl	80001f4 <strlen>
 8008294:	4602      	mov	r2, r0
 8008296:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800829a:	4619      	mov	r1, r3
 800829c:	4620      	mov	r0, r4
 800829e:	f006 f928 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 80082a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80082b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80082be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3326      	adds	r3, #38	; 0x26
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7f7 ff92 	bl	80001f4 <strlen>
 80082d0:	4603      	mov	r3, r0
 80082d2:	461a      	mov	r2, r3
 80082d4:	4629      	mov	r1, r5
 80082d6:	4620      	mov	r0, r4
 80082d8:	f006 f90b 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 80082dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80082ea:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80082ee:	2203      	movs	r2, #3
 80082f0:	4618      	mov	r0, r3
 80082f2:	f006 f8fe 	bl	800e4f2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80082f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008304:	4618      	mov	r0, r3
 8008306:	f7f7 ff75 	bl	80001f4 <strlen>
 800830a:	4603      	mov	r3, r0
 800830c:	461a      	mov	r2, r3
 800830e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 800831c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008320:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	22c8      	movs	r2, #200	; 0xc8
 8008328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 800832c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008340:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 800834a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800834e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d11b      	bne.n	8008394 <AT_ESP8266_ND+0x1f0c>
 800835c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008360:	2b01      	cmp	r3, #1
 8008362:	d023      	beq.n	80083ac <AT_ESP8266_ND+0x1f24>
 8008364:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008368:	2b02      	cmp	r3, #2
 800836a:	d01f      	beq.n	80083ac <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 800836c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008370:	2b03      	cmp	r3, #3
 8008372:	d01b      	beq.n	80083ac <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 8008374:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008378:	2b04      	cmp	r3, #4
 800837a:	d017      	beq.n	80083ac <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 800837c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008380:	2b0a      	cmp	r3, #10
 8008382:	d013      	beq.n	80083ac <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 8008384:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008388:	2b0b      	cmp	r3, #11
 800838a:	d00f      	beq.n	80083ac <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 800838c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008390:	2b0c      	cmp	r3, #12
 8008392:	d00b      	beq.n	80083ac <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008394:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008398:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80083a2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80083a6:	4293      	cmp	r3, r2
 80083a8:	f341 82eb 	ble.w	8009982 <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80083ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80083ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 80083be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083c2:	2b0a      	cmp	r3, #10
 80083c4:	d00f      	beq.n	80083e6 <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 80083c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 80083d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 80083e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80083f6:	f001 bac4 	b.w	8009982 <AT_ESP8266_ND+0x34fa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80083fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 800840a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800840e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008418:	2b01      	cmp	r3, #1
 800841a:	d14d      	bne.n	80084b8 <AT_ESP8266_ND+0x2030>
 800841c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008420:	2b04      	cmp	r3, #4
 8008422:	d049      	beq.n	80084b8 <AT_ESP8266_ND+0x2030>
 8008424:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008428:	2b0a      	cmp	r3, #10
 800842a:	d045      	beq.n	80084b8 <AT_ESP8266_ND+0x2030>
 800842c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008430:	2b0d      	cmp	r3, #13
 8008432:	d041      	beq.n	80084b8 <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 8008434:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008438:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2200      	movs	r2, #0
 8008440:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008444:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008448:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2201      	movs	r2, #1
 8008450:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 8008454:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008458:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008462:	4620      	mov	r0, r4
 8008464:	f7f7 fec6 	bl	80001f4 <strlen>
 8008468:	4603      	mov	r3, r0
 800846a:	4423      	add	r3, r4
 800846c:	4941      	ldr	r1, [pc, #260]	; (8008574 <AT_ESP8266_ND+0x20ec>)
 800846e:	461a      	mov	r2, r3
 8008470:	460b      	mov	r3, r1
 8008472:	cb03      	ldmia	r3!, {r0, r1}
 8008474:	6010      	str	r0, [r2, #0]
 8008476:	6051      	str	r1, [r2, #4]
 8008478:	8819      	ldrh	r1, [r3, #0]
 800847a:	789b      	ldrb	r3, [r3, #2]
 800847c:	8111      	strh	r1, [r2, #8]
 800847e:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008480:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008484:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800848e:	4618      	mov	r0, r3
 8008490:	f7f7 feb0 	bl	80001f4 <strlen>
 8008494:	4603      	mov	r3, r0
 8008496:	461a      	mov	r2, r3
 8008498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80084a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80084b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80084b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80084d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d113      	bne.n	8008510 <AT_ESP8266_ND+0x2088>
 80084e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084ec:	2b0a      	cmp	r3, #10
 80084ee:	d01b      	beq.n	8008528 <AT_ESP8266_ND+0x20a0>
 80084f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084f4:	2b0b      	cmp	r3, #11
 80084f6:	d017      	beq.n	8008528 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 80084f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084fc:	2b0c      	cmp	r3, #12
 80084fe:	d013      	beq.n	8008528 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 8008500:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008504:	2b04      	cmp	r3, #4
 8008506:	d00f      	beq.n	8008528 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 8008508:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800850c:	2b0d      	cmp	r3, #13
 800850e:	d00b      	beq.n	8008528 <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800851e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008522:	4293      	cmp	r3, r2
 8008524:	f341 822f 	ble.w	8009986 <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008528:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800852c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800853a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800853e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2200      	movs	r2, #0
 8008546:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800854a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2200      	movs	r2, #0
 8008556:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 800855a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800855e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800856a:	f001 ba0c 	b.w	8009986 <AT_ESP8266_ND+0x34fe>
 800856e:	bf00      	nop
 8008570:	0800fa80 	.word	0x0800fa80
 8008574:	0800fa8c 	.word	0x0800fa8c
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008578:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800857c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008588:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800858c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008596:	2b01      	cmp	r3, #1
 8008598:	d16b      	bne.n	8008672 <AT_ESP8266_ND+0x21ea>
 800859a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d067      	beq.n	8008672 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 80085a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d063      	beq.n	8008672 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 80085aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d05f      	beq.n	8008672 <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 80085b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2200      	movs	r2, #0
 80085be:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80085c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 80085d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d115      	bne.n	8008610 <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 80085e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7f7 fdfe 	bl	80001f4 <strlen>
 80085f8:	4603      	mov	r3, r0
 80085fa:	4423      	add	r3, r4
 80085fc:	4a52      	ldr	r2, [pc, #328]	; (8008748 <AT_ESP8266_ND+0x22c0>)
 80085fe:	461c      	mov	r4, r3
 8008600:	4613      	mov	r3, r2
 8008602:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008604:	6020      	str	r0, [r4, #0]
 8008606:	6061      	str	r1, [r4, #4]
 8008608:	60a2      	str	r2, [r4, #8]
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	81a3      	strh	r3, [r4, #12]
 800860e:	e014      	b.n	800863a <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800861e:	4620      	mov	r0, r4
 8008620:	f7f7 fde8 	bl	80001f4 <strlen>
 8008624:	4603      	mov	r3, r0
 8008626:	4423      	add	r3, r4
 8008628:	4a48      	ldr	r2, [pc, #288]	; (800874c <AT_ESP8266_ND+0x22c4>)
 800862a:	461c      	mov	r4, r3
 800862c:	4613      	mov	r3, r2
 800862e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008630:	6020      	str	r0, [r4, #0]
 8008632:	6061      	str	r1, [r4, #4]
 8008634:	60a2      	str	r2, [r4, #8]
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 800863a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800863e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008648:	4618      	mov	r0, r3
 800864a:	f7f7 fdd3 	bl	80001f4 <strlen>
 800864e:	4603      	mov	r3, r0
 8008650:	461a      	mov	r2, r3
 8008652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008656:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008664:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800866e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008672:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008676:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008686:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008690:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008694:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d123      	bne.n	80086ea <AT_ESP8266_ND+0x2262>
 80086a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d02b      	beq.n	8008702 <AT_ESP8266_ND+0x227a>
 80086aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ae:	2b0b      	cmp	r3, #11
 80086b0:	d027      	beq.n	8008702 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 80086b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b6:	2b0c      	cmp	r3, #12
 80086b8:	d023      	beq.n	8008702 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 80086ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d01f      	beq.n	8008702 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 80086c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d01b      	beq.n	8008702 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 80086ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ce:	2b07      	cmp	r3, #7
 80086d0:	d017      	beq.n	8008702 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 80086d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086d6:	2b08      	cmp	r3, #8
 80086d8:	d013      	beq.n	8008702 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 80086da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086de:	2b1e      	cmp	r3, #30
 80086e0:	d00f      	beq.n	8008702 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 80086e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086e6:	2b1f      	cmp	r3, #31
 80086e8:	d00b      	beq.n	8008702 <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80086ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80086f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086fc:	4293      	cmp	r3, r2
 80086fe:	f341 8144 	ble.w	800998a <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008702:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008706:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008718:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2200      	movs	r2, #0
 8008720:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008728:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008734:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008744:	f001 b921 	b.w	800998a <AT_ESP8266_ND+0x3502>
 8008748:	0800fa98 	.word	0x0800fa98
 800874c:	0800faa8 	.word	0x0800faa8
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008750:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008754:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008764:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800876e:	2b01      	cmp	r3, #1
 8008770:	f040 80f3 	bne.w	800895a <AT_ESP8266_ND+0x24d2>
 8008774:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008778:	2b04      	cmp	r3, #4
 800877a:	f000 80ee 	beq.w	800895a <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 800877e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008782:	2b01      	cmp	r3, #1
 8008784:	f000 80e9 	beq.w	800895a <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 8008788:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800878c:	2b02      	cmp	r3, #2
 800878e:	f000 80e4 	beq.w	800895a <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 8008792:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008796:	2b21      	cmp	r3, #33	; 0x21
 8008798:	f000 80df 	beq.w	800895a <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 800879c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087a0:	2b1b      	cmp	r3, #27
 80087a2:	f000 80da 	beq.w	800895a <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 80087a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80087b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 80087c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087d4:	4620      	mov	r0, r4
 80087d6:	f7f7 fd0d 	bl	80001f4 <strlen>
 80087da:	4603      	mov	r3, r0
 80087dc:	4423      	add	r3, r4
 80087de:	4990      	ldr	r1, [pc, #576]	; (8008a20 <AT_ESP8266_ND+0x2598>)
 80087e0:	461a      	mov	r2, r3
 80087e2:	460b      	mov	r3, r1
 80087e4:	cb03      	ldmia	r3!, {r0, r1}
 80087e6:	6010      	str	r0, [r2, #0]
 80087e8:	6051      	str	r1, [r2, #4]
 80087ea:	8819      	ldrh	r1, [r3, #0]
 80087ec:	789b      	ldrb	r3, [r3, #2]
 80087ee:	8111      	strh	r1, [r2, #8]
 80087f0:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 80087f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008800:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008804:	2201      	movs	r2, #1
 8008806:	4618      	mov	r0, r3
 8008808:	f005 fe73 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 800880c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008810:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800881a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800881e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008828:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800882c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	334c      	adds	r3, #76	; 0x4c
 8008834:	4618      	mov	r0, r3
 8008836:	f7f7 fcdd 	bl	80001f4 <strlen>
 800883a:	4603      	mov	r3, r0
 800883c:	461a      	mov	r2, r3
 800883e:	4629      	mov	r1, r5
 8008840:	4620      	mov	r0, r4
 8008842:	f005 fe56 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008846:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800884a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008854:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008858:	2203      	movs	r2, #3
 800885a:	4618      	mov	r0, r3
 800885c:	f005 fe49 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800886e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008872:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f103 0562 	add.w	r5, r3, #98	; 0x62
 800887c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008880:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3362      	adds	r3, #98	; 0x62
 8008888:	4618      	mov	r0, r3
 800888a:	f7f7 fcb3 	bl	80001f4 <strlen>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	4629      	mov	r1, r5
 8008894:	4620      	mov	r0, r4
 8008896:	f005 fe2c 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,separador,3);
 800889a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800889e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088a8:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80088ac:	2203      	movs	r2, #3
 80088ae:	4618      	mov	r0, r3
 80088b0:	f005 fe1f 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 80088b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80088c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f103 0572 	add.w	r5, r3, #114	; 0x72
 80088d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3372      	adds	r3, #114	; 0x72
 80088dc:	4618      	mov	r0, r3
 80088de:	f7f7 fc89 	bl	80001f4 <strlen>
 80088e2:	4603      	mov	r3, r0
 80088e4:	461a      	mov	r2, r3
 80088e6:	4629      	mov	r1, r5
 80088e8:	4620      	mov	r0, r4
 80088ea:	f005 fe02 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 80088ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088fc:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008900:	2201      	movs	r2, #1
 8008902:	4618      	mov	r0, r3
 8008904:	f005 fdf5 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800890c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008916:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800891a:	2202      	movs	r2, #2
 800891c:	4618      	mov	r0, r3
 800891e:	f005 fde8 	bl	800e4f2 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008930:	4618      	mov	r0, r3
 8008932:	f7f7 fc5f 	bl	80001f4 <strlen>
 8008936:	4603      	mov	r3, r0
 8008938:	461a      	mov	r2, r3
 800893a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800893e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800894c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800895a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800896e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800897c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008986:	2b00      	cmp	r3, #0
 8008988:	d11b      	bne.n	80089c2 <AT_ESP8266_ND+0x253a>
 800898a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800898e:	2b01      	cmp	r3, #1
 8008990:	d023      	beq.n	80089da <AT_ESP8266_ND+0x2552>
 8008992:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008996:	2b0b      	cmp	r3, #11
 8008998:	d01f      	beq.n	80089da <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 800899a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800899e:	2b0c      	cmp	r3, #12
 80089a0:	d01b      	beq.n	80089da <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 80089a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d017      	beq.n	80089da <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 80089aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d013      	beq.n	80089da <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 80089b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089b6:	2b21      	cmp	r3, #33	; 0x21
 80089b8:	d00f      	beq.n	80089da <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 80089ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089be:	2b1b      	cmp	r3, #27
 80089c0:	d00b      	beq.n	80089da <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80089c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80089d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d4:	4293      	cmp	r3, r2
 80089d6:	f340 87da 	ble.w	800998e <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80089da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80089e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80089ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80089fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008a1c:	f000 bfb7 	b.w	800998e <AT_ESP8266_ND+0x3506>
 8008a20:	0800f998 	.word	0x0800f998
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008a24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008a34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	f040 80e2 	bne.w	8008c0c <AT_ESP8266_ND+0x2784>
 8008a48:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a4c:	2b0b      	cmp	r3, #11
 8008a4e:	f000 80dd 	beq.w	8008c0c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8008a52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a56:	2b0c      	cmp	r3, #12
 8008a58:	f000 80d8 	beq.w	8008c0c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008a5c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a60:	2b0e      	cmp	r3, #14
 8008a62:	f000 80d3 	beq.w	8008c0c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 8008a66:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a6a:	2b0f      	cmp	r3, #15
 8008a6c:	f000 80ce 	beq.w	8008c0c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8008a70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a74:	2b10      	cmp	r3, #16
 8008a76:	f000 80c9 	beq.w	8008c0c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 8008a7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	f000 80c4 	beq.w	8008c0c <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8008a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008a94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008aa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f7f7 fb9e 	bl	80001f4 <strlen>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	4423      	add	r3, r4
 8008abc:	4aa5      	ldr	r2, [pc, #660]	; (8008d54 <AT_ESP8266_ND+0x28cc>)
 8008abe:	461c      	mov	r4, r3
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ac4:	6020      	str	r0, [r4, #0]
 8008ac6:	6061      	str	r1, [r4, #4]
 8008ac8:	60a2      	str	r2, [r4, #8]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008ace:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008adc:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f005 fd05 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008ae8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7f7 fb7c 	bl	80001f4 <strlen>
 8008afc:	4603      	mov	r3, r0
 8008afe:	4423      	add	r3, r4
 8008b00:	4a95      	ldr	r2, [pc, #596]	; (8008d58 <AT_ESP8266_ND+0x28d0>)
 8008b02:	6810      	ldr	r0, [r2, #0]
 8008b04:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b14:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008b18:	2203      	movs	r2, #3
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f005 fce9 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3336      	adds	r3, #54	; 0x36
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7f7 fb53 	bl	80001f4 <strlen>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461a      	mov	r2, r3
 8008b52:	4629      	mov	r1, r5
 8008b54:	4620      	mov	r0, r4
 8008b56:	f005 fccc 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b68:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f005 fcbf 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008b90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3346      	adds	r3, #70	; 0x46
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7f7 fb29 	bl	80001f4 <strlen>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f005 fca2 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008bbc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7f7 fb17 	bl	80001f4 <strlen>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f005 fc8f 	bl	800e4f2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008bd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7f7 fb06 	bl	80001f4 <strlen>
 8008be8:	4603      	mov	r3, r0
 8008bea:	461a      	mov	r2, r3
 8008bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008bfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d124      	bne.n	8008c86 <AT_ESP8266_ND+0x27fe>
 8008c3c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c40:	2b0a      	cmp	r3, #10
 8008c42:	d02c      	beq.n	8008c9e <AT_ESP8266_ND+0x2816>
 8008c44:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c48:	2b0b      	cmp	r3, #11
 8008c4a:	d028      	beq.n	8008c9e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_fail)
 8008c4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d024      	beq.n	8008c9e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_wifi_gotip)
 8008c54:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c58:	2b0c      	cmp	r3, #12
 8008c5a:	d020      	beq.n	8008c9e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008c5c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c60:	2b0e      	cmp	r3, #14
 8008c62:	d01c      	beq.n	8008c9e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_conectado)
 8008c64:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c68:	2b0f      	cmp	r3, #15
 8008c6a:	d018      	beq.n	8008c9e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_desconectado)
 8008c6c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c70:	2b10      	cmp	r3, #16
 8008c72:	d014      	beq.n	8008c9e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_error)
 8008c74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d010      	beq.n	8008c9e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_busy_p)))
 8008c7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c84:	d00b      	beq.n	8008c9e <AT_ESP8266_ND+0x2816>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	f340 867a 	ble.w	8009992 <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008c9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008cb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008cc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008cd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008ce0:	f000 be57 	b.w	8009992 <AT_ESP8266_ND+0x350a>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8008cf4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	d007      	beq.n	8008d0c <AT_ESP8266_ND+0x2884>
 8008cfc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d00:	2b0a      	cmp	r3, #10
 8008d02:	d003      	beq.n	8008d0c <AT_ESP8266_ND+0x2884>
 8008d04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d127      	bne.n	8008d5c <AT_ESP8266_ND+0x28d4>
				{
					a->_estado=AT_decode;
 8008d0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008d1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008d2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008d4e:	f000 be22 	b.w	8009996 <AT_ESP8266_ND+0x350e>
 8008d52:	bf00      	nop
 8008d54:	0800fab8 	.word	0x0800fab8
 8008d58:	0800fac8 	.word	0x0800fac8
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	f040 80d1 	bne.w	8008f12 <AT_ESP8266_ND+0x2a8a>
 8008d70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f040 80c7 	bne.w	8008f12 <AT_ESP8266_ND+0x2a8a>
										a->_ejecucion=1;
 8008d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2218      	movs	r2, #24
 8008da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008da4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008db4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008dd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008de2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008df2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7f7 f9f7 	bl	80001f4 <strlen>
 8008e06:	4603      	mov	r3, r0
 8008e08:	4423      	add	r3, r4
 8008e0a:	4ac0      	ldr	r2, [pc, #768]	; (800910c <AT_ESP8266_ND+0x2c84>)
 8008e0c:	461c      	mov	r4, r3
 8008e0e:	4613      	mov	r3, r2
 8008e10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e12:	6020      	str	r0, [r4, #0]
 8008e14:	6061      	str	r1, [r4, #4]
 8008e16:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008e18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008e26:	f107 0214 	add.w	r2, r7, #20
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f005 f935 	bl	800e09c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e40:	f107 0314 	add.w	r3, r7, #20
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7f7 f9d5 	bl	80001f4 <strlen>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	f107 0314 	add.w	r3, r7, #20
 8008e50:	4619      	mov	r1, r3
 8008e52:	4620      	mov	r0, r4
 8008e54:	f005 fb4d 	bl	800e4f2 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008e58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008e66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f005 fc1c 	bl	800e6b4 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008e7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e8a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008e8e:	2202      	movs	r2, #2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f005 fb2e 	bl	800e4f2 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7f7 f9a5 	bl	80001f4 <strlen>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	461a      	mov	r2, r3
 8008eae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f7f7 f992 	bl	80001f4 <strlen>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	4423      	add	r3, r4
 8008ed4:	4a8e      	ldr	r2, [pc, #568]	; (8009110 <AT_ESP8266_ND+0x2c88>)
 8008ed6:	461c      	mov	r4, r3
 8008ed8:	4613      	mov	r3, r2
 8008eda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008edc:	6020      	str	r0, [r4, #0]
 8008ede:	6061      	str	r1, [r4, #4]
 8008ee0:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008ee2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8008f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8008f30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f040 80a6 	bne.w	8009090 <AT_ESP8266_ND+0x2c08>
 8008f44:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f48:	2b13      	cmp	r3, #19
 8008f4a:	f000 80a1 	beq.w	8009090 <AT_ESP8266_ND+0x2c08>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8008f4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8008f5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	f7f7 f937 	bl	80001e0 <strcmp>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d01b      	beq.n	8008fb0 <AT_ESP8266_ND+0x2b28>
 8008f78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d017      	beq.n	8008fb0 <AT_ESP8266_ND+0x2b28>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8008f80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f84:	2b14      	cmp	r3, #20
 8008f86:	d013      	beq.n	8008fb0 <AT_ESP8266_ND+0x2b28>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008f88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	dd78      	ble.n	8009090 <AT_ESP8266_ND+0x2c08>
 8008f9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d16f      	bne.n	8009090 <AT_ESP8266_ND+0x2c08>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8008fb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	dd0e      	ble.n	8008fe4 <AT_ESP8266_ND+0x2b5c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008fc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8008fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009002:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009006:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009020:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009024:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2201      	movs	r2, #1
 800902c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009030:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009034:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f203 4094 	addw	r0, r3, #1172	; 0x494
 800903e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009042:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800904c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009050:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800905a:	2361      	movs	r3, #97	; 0x61
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	2301      	movs	r3, #1
 8009060:	f005 f850 	bl	800e104 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009090:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009094:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800909e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80090a2:	f040 8478 	bne.w	8009996 <AT_ESP8266_ND+0x350e>
 80090a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090aa:	2b13      	cmp	r3, #19
 80090ac:	d032      	beq.n	8009114 <AT_ESP8266_ND+0x2c8c>
 80090ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80090bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c0:	4293      	cmp	r3, r2
 80090c2:	dc27      	bgt.n	8009114 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_disconnect)
 80090c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090c8:	2b0a      	cmp	r3, #10
 80090ca:	d023      	beq.n	8009114 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_fail)
 80090cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d01f      	beq.n	8009114 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_connected)
 80090d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090d8:	2b0b      	cmp	r3, #11
 80090da:	d01b      	beq.n	8009114 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_gotip)
 80090dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e0:	2b0c      	cmp	r3, #12
 80090e2:	d017      	beq.n	8009114 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_desconectado)
 80090e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d013      	beq.n	8009114 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_snd_err)
 80090ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090f0:	2b11      	cmp	r3, #17
 80090f2:	d00f      	beq.n	8009114 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_enviado_error)
 80090f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090f8:	2b12      	cmp	r3, #18
 80090fa:	d00b      	beq.n	8009114 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_busy_p)))
 80090fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009104:	f040 8447 	bne.w	8009996 <AT_ESP8266_ND+0x350e>
 8009108:	e004      	b.n	8009114 <AT_ESP8266_ND+0x2c8c>
 800910a:	bf00      	nop
 800910c:	0800facc 	.word	0x0800facc
 8009110:	0800fad8 	.word	0x0800fad8
									a->_debug_count5++;
 8009114:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009118:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009128:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009132:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009136:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009140:	f241 3288 	movw	r2, #5000	; 0x1388
 8009144:	4293      	cmp	r3, r2
 8009146:	dd25      	ble.n	8009194 <AT_ESP8266_ND+0x2d0c>
										a->_debug_count8++;
 8009148:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800914c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800915c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800916a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009188:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	dd10      	ble.n	80091c8 <AT_ESP8266_ND+0x2d40>
 80091a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091aa:	2b10      	cmp	r3, #16
 80091ac:	d00c      	beq.n	80091c8 <AT_ESP8266_ND+0x2d40>
 80091ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091b2:	2b0a      	cmp	r3, #10
 80091b4:	d008      	beq.n	80091c8 <AT_ESP8266_ND+0x2d40>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 80091b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	220f      	movs	r2, #15
 80091c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80091c6:	e008      	b.n	80091da <AT_ESP8266_ND+0x2d52>
										a->_estado=AT_decode;	//Devuelvo el estado
 80091c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80091d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80091da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80091ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80091fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2200      	movs	r2, #0
 8009206:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 800920a:	e3c4      	b.n	8009996 <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800920c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 800921c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009220:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800922a:	2b01      	cmp	r3, #1
 800922c:	d16f      	bne.n	800930e <AT_ESP8266_ND+0x2e86>
						{
						a->_pasos=0;
 800922e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009232:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2200      	movs	r2, #0
 800923a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800923e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009242:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2201      	movs	r2, #1
 800924a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 800924e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800925c:	4620      	mov	r0, r4
 800925e:	f7f6 ffc9 	bl	80001f4 <strlen>
 8009262:	4603      	mov	r3, r0
 8009264:	4423      	add	r3, r4
 8009266:	4a7a      	ldr	r2, [pc, #488]	; (8009450 <AT_ESP8266_ND+0x2fc8>)
 8009268:	461c      	mov	r4, r3
 800926a:	4615      	mov	r5, r2
 800926c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800926e:	6020      	str	r0, [r4, #0]
 8009270:	6061      	str	r1, [r4, #4]
 8009272:	60a2      	str	r2, [r4, #8]
 8009274:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009276:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800927a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8009292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	335c      	adds	r3, #92	; 0x5c
 800929e:	4618      	mov	r0, r3
 80092a0:	f7f6 ffa8 	bl	80001f4 <strlen>
 80092a4:	4603      	mov	r3, r0
 80092a6:	461a      	mov	r2, r3
 80092a8:	4629      	mov	r1, r5
 80092aa:	4620      	mov	r0, r4
 80092ac:	f005 f921 	bl	800e4f2 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80092b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80092be:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f6 ff96 	bl	80001f4 <strlen>
 80092c8:	4602      	mov	r2, r0
 80092ca:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80092ce:	4619      	mov	r1, r3
 80092d0:	4620      	mov	r0, r4
 80092d2:	f005 f90e 	bl	800e4f2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80092d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7f6 ff85 	bl	80001f4 <strlen>
 80092ea:	4603      	mov	r3, r0
 80092ec:	461a      	mov	r2, r3
 80092ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 80092fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009300:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f44f 7248 	mov.w	r2, #800	; 0x320
 800930a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800930e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009322:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800932c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d123      	bne.n	8009386 <AT_ESP8266_ND+0x2efe>
 800933e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009342:	2b0a      	cmp	r3, #10
 8009344:	d02b      	beq.n	800939e <AT_ESP8266_ND+0x2f16>
 8009346:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800934a:	2b0b      	cmp	r3, #11
 800934c:	d027      	beq.n	800939e <AT_ESP8266_ND+0x2f16>
 800934e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009352:	2b0c      	cmp	r3, #12
 8009354:	d023      	beq.n	800939e <AT_ESP8266_ND+0x2f16>
 8009356:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800935a:	2b0e      	cmp	r3, #14
 800935c:	d01f      	beq.n	800939e <AT_ESP8266_ND+0x2f16>
 800935e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009362:	2b0f      	cmp	r3, #15
 8009364:	d01b      	beq.n	800939e <AT_ESP8266_ND+0x2f16>
 8009366:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800936a:	2b10      	cmp	r3, #16
 800936c:	d017      	beq.n	800939e <AT_ESP8266_ND+0x2f16>
 800936e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009372:	2b15      	cmp	r3, #21
 8009374:	d013      	beq.n	800939e <AT_ESP8266_ND+0x2f16>
 8009376:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800937a:	2b16      	cmp	r3, #22
 800937c:	d00f      	beq.n	800939e <AT_ESP8266_ND+0x2f16>
 800937e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009382:	2b17      	cmp	r3, #23
 8009384:	d00b      	beq.n	800939e <AT_ESP8266_ND+0x2f16>
 8009386:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800938a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009394:	f241 3288 	movw	r2, #5000	; 0x1388
 8009398:	4293      	cmp	r3, r2
 800939a:	f340 82fe 	ble.w	800999a <AT_ESP8266_ND+0x3512>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800939e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80093ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80093b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80093c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80093d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 80093e0:	e2db      	b.n	800999a <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80093e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093e6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	2200      	movs	r2, #0
 80093f0:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 80093f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093f6:	2b10      	cmp	r3, #16
 80093f8:	d007      	beq.n	800940a <AT_ESP8266_ND+0x2f82>
 80093fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093fe:	2b0a      	cmp	r3, #10
 8009400:	d003      	beq.n	800940a <AT_ESP8266_ND+0x2f82>
 8009402:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009406:	2b03      	cmp	r3, #3
 8009408:	d124      	bne.n	8009454 <AT_ESP8266_ND+0x2fcc>
				{
					a->_estado=AT_decode;
 800940a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800940e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 800941c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009420:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2200      	movs	r2, #0
 8009428:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 800942c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009430:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 800943c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009440:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 800944c:	e2a7      	b.n	800999e <AT_ESP8266_ND+0x3516>
 800944e:	bf00      	nop
 8009450:	0800fae4 	.word	0x0800fae4
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009454:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009458:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009462:	2b01      	cmp	r3, #1
 8009464:	f040 8102 	bne.w	800966c <AT_ESP8266_ND+0x31e4>
 8009468:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800946c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009476:	2b00      	cmp	r3, #0
 8009478:	f040 80f8 	bne.w	800966c <AT_ESP8266_ND+0x31e4>
										a->_ejecucion=1;
 800947c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009480:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2201      	movs	r2, #1
 8009488:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 800948c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009490:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2218      	movs	r2, #24
 8009498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800949c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80094ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80094ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80094da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80094ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80094f8:	4620      	mov	r0, r4
 80094fa:	f7f6 fe7b 	bl	80001f4 <strlen>
 80094fe:	4603      	mov	r3, r0
 8009500:	4423      	add	r3, r4
 8009502:	4a83      	ldr	r2, [pc, #524]	; (8009710 <AT_ESP8266_ND+0x3288>)
 8009504:	461c      	mov	r4, r3
 8009506:	4613      	mov	r3, r2
 8009508:	cb07      	ldmia	r3!, {r0, r1, r2}
 800950a:	6020      	str	r0, [r4, #0]
 800950c:	6061      	str	r1, [r4, #4]
 800950e:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 800951e:	f107 020c 	add.w	r2, r7, #12
 8009522:	4611      	mov	r1, r2
 8009524:	4618      	mov	r0, r3
 8009526:	f004 fdb9 	bl	800e09c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 800952a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800952e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009538:	f107 030c 	add.w	r3, r7, #12
 800953c:	4618      	mov	r0, r3
 800953e:	f7f6 fe59 	bl	80001f4 <strlen>
 8009542:	4602      	mov	r2, r0
 8009544:	f107 030c 	add.w	r3, r7, #12
 8009548:	4619      	mov	r1, r3
 800954a:	4620      	mov	r0, r4
 800954c:	f004 ffd1 	bl	800e4f2 <strncat>
										strncat(a->_uart2snd,",",1);
 8009550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800955e:	4620      	mov	r0, r4
 8009560:	f7f6 fe48 	bl	80001f4 <strlen>
 8009564:	4603      	mov	r3, r0
 8009566:	4423      	add	r3, r4
 8009568:	496a      	ldr	r1, [pc, #424]	; (8009714 <AT_ESP8266_ND+0x328c>)
 800956a:	461a      	mov	r2, r3
 800956c:	460b      	mov	r3, r1
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009572:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009576:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009580:	f107 020c 	add.w	r2, r7, #12
 8009584:	4611      	mov	r1, r2
 8009586:	4618      	mov	r0, r3
 8009588:	f004 fd88 	bl	800e09c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 800958c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009590:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800959a:	f107 030c 	add.w	r3, r7, #12
 800959e:	4618      	mov	r0, r3
 80095a0:	f7f6 fe28 	bl	80001f4 <strlen>
 80095a4:	4602      	mov	r2, r0
 80095a6:	f107 030c 	add.w	r3, r7, #12
 80095aa:	4619      	mov	r1, r3
 80095ac:	4620      	mov	r0, r4
 80095ae:	f004 ffa0 	bl	800e4f2 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80095b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80095c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f005 f86f 	bl	800e6b4 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80095d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80095e4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80095e8:	2202      	movs	r2, #2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f004 ff81 	bl	800e4f2 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80095f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80095fe:	4618      	mov	r0, r3
 8009600:	f7f6 fdf8 	bl	80001f4 <strlen>
 8009604:	4603      	mov	r3, r0
 8009606:	461a      	mov	r2, r3
 8009608:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800960c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009616:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800961a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009624:	4620      	mov	r0, r4
 8009626:	f7f6 fde5 	bl	80001f4 <strlen>
 800962a:	4603      	mov	r3, r0
 800962c:	4423      	add	r3, r4
 800962e:	4a3a      	ldr	r2, [pc, #232]	; (8009718 <AT_ESP8266_ND+0x3290>)
 8009630:	461c      	mov	r4, r3
 8009632:	4613      	mov	r3, r2
 8009634:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009636:	6020      	str	r0, [r4, #0]
 8009638:	6061      	str	r1, [r4, #4]
 800963a:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 800963c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009640:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009650:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 800965a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800965e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 800966c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009670:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 800968a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800968e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009698:	2b00      	cmp	r3, #0
 800969a:	f040 80b8 	bne.w	800980e <AT_ESP8266_ND+0x3386>
 800969e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096a2:	2b13      	cmp	r3, #19
 80096a4:	f000 80b3 	beq.w	800980e <AT_ESP8266_ND+0x3386>
 80096a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80096b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 80096c4:	4619      	mov	r1, r3
 80096c6:	4610      	mov	r0, r2
 80096c8:	f7f6 fd8a 	bl	80001e0 <strcmp>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d024      	beq.n	800971c <AT_ESP8266_ND+0x3294>
 80096d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d020      	beq.n	800971c <AT_ESP8266_ND+0x3294>
 80096da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096de:	2b14      	cmp	r3, #20
 80096e0:	d01c      	beq.n	800971c <AT_ESP8266_ND+0x3294>
 80096e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80096f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096f4:	4293      	cmp	r3, r2
 80096f6:	f340 808a 	ble.w	800980e <AT_ESP8266_ND+0x3386>
 80096fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009708:	2b01      	cmp	r3, #1
 800970a:	f040 8080 	bne.w	800980e <AT_ESP8266_ND+0x3386>
 800970e:	e005      	b.n	800971c <AT_ESP8266_ND+0x3294>
 8009710:	0800facc 	.word	0x0800facc
 8009714:	0800faf4 	.word	0x0800faf4
 8009718:	0800fad8 	.word	0x0800fad8
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 800971c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800972a:	f241 3288 	movw	r2, #5000	; 0x1388
 800972e:	4293      	cmp	r3, r2
 8009730:	dd17      	ble.n	8009762 <AT_ESP8266_ND+0x32da>
 8009732:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009736:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009740:	2b01      	cmp	r3, #1
 8009742:	d10e      	bne.n	8009762 <AT_ESP8266_ND+0x32da>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009748:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009766:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009776:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009780:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009784:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009794:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 800979e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80097ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80097bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80097ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80097d8:	2361      	movs	r3, #97	; 0x61
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	2301      	movs	r3, #1
 80097de:	f004 fc91 	bl	800e104 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80097e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80097f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80097fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2200      	movs	r2, #0
 800980a:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 800980e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800981c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009820:	f040 80bd 	bne.w	800999e <AT_ESP8266_ND+0x3516>
 8009824:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009828:	2b13      	cmp	r3, #19
 800982a:	d02b      	beq.n	8009884 <AT_ESP8266_ND+0x33fc>
 800982c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009830:	2b0b      	cmp	r3, #11
 8009832:	d027      	beq.n	8009884 <AT_ESP8266_ND+0x33fc>
 8009834:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009838:	2b0c      	cmp	r3, #12
 800983a:	d023      	beq.n	8009884 <AT_ESP8266_ND+0x33fc>
 800983c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009840:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800984a:	f241 3288 	movw	r2, #5000	; 0x1388
 800984e:	4293      	cmp	r3, r2
 8009850:	dc18      	bgt.n	8009884 <AT_ESP8266_ND+0x33fc>
 8009852:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009856:	2b0a      	cmp	r3, #10
 8009858:	d014      	beq.n	8009884 <AT_ESP8266_ND+0x33fc>
 800985a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800985e:	2b10      	cmp	r3, #16
 8009860:	d010      	beq.n	8009884 <AT_ESP8266_ND+0x33fc>
 8009862:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009866:	2b11      	cmp	r3, #17
 8009868:	d00c      	beq.n	8009884 <AT_ESP8266_ND+0x33fc>
 800986a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800986e:	2b12      	cmp	r3, #18
 8009870:	d008      	beq.n	8009884 <AT_ESP8266_ND+0x33fc>
 8009872:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009876:	2b16      	cmp	r3, #22
 8009878:	d004      	beq.n	8009884 <AT_ESP8266_ND+0x33fc>
 800987a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800987e:	2b19      	cmp	r3, #25
 8009880:	f040 808d 	bne.w	800999e <AT_ESP8266_ND+0x3516>
									a->_debug_count5++;
 8009884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009898:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80098a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80098b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b4:	4293      	cmp	r3, r2
 80098b6:	dd25      	ble.n	8009904 <AT_ESP8266_ND+0x347c>
										a->_debug_count8++;
 80098b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80098d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80098f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009912:	2b02      	cmp	r3, #2
 8009914:	dd07      	ble.n	8009926 <AT_ESP8266_ND+0x349e>
 8009916:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800991a:	2b10      	cmp	r3, #16
 800991c:	d003      	beq.n	8009926 <AT_ESP8266_ND+0x349e>
 800991e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009922:	2b0a      	cmp	r3, #10
 8009924:	d108      	bne.n	8009938 <AT_ESP8266_ND+0x34b0>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009926:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800992a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009938:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800993c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2200      	movs	r2, #0
 8009944:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800994c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2200      	movs	r2, #0
 8009954:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800995c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2200      	movs	r2, #0
 8009964:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009968:	e019      	b.n	800999e <AT_ESP8266_ND+0x3516>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 800996a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800996e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800997c:	e010      	b.n	80099a0 <AT_ESP8266_ND+0x3518>
			break;
 800997e:	bf00      	nop
 8009980:	e00e      	b.n	80099a0 <AT_ESP8266_ND+0x3518>
			break;
 8009982:	bf00      	nop
 8009984:	e00c      	b.n	80099a0 <AT_ESP8266_ND+0x3518>
			break;
 8009986:	bf00      	nop
 8009988:	e00a      	b.n	80099a0 <AT_ESP8266_ND+0x3518>
			break;
 800998a:	bf00      	nop
 800998c:	e008      	b.n	80099a0 <AT_ESP8266_ND+0x3518>
			break;
 800998e:	bf00      	nop
 8009990:	e006      	b.n	80099a0 <AT_ESP8266_ND+0x3518>
			break;
 8009992:	bf00      	nop
 8009994:	e004      	b.n	80099a0 <AT_ESP8266_ND+0x3518>
			break;
 8009996:	bf00      	nop
 8009998:	e002      	b.n	80099a0 <AT_ESP8266_ND+0x3518>
			break;
 800999a:	bf00      	nop
 800999c:	e000      	b.n	80099a0 <AT_ESP8266_ND+0x3518>
			break;
 800999e:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 80099a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 80099b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 80099c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 80099ce:	4618      	mov	r0, r3
 80099d0:	f507 7715 	add.w	r7, r7, #596	; 0x254
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099d8 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099ea:	f240 328d 	movw	r2, #909	; 0x38d
 80099ee:	4293      	cmp	r3, r2
 80099f0:	f001 8430 	beq.w	800b254 <WiFi_Conn_ND+0x187c>
 80099f4:	f240 328d 	movw	r2, #909	; 0x38d
 80099f8:	4293      	cmp	r3, r2
 80099fa:	f301 84c5 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 80099fe:	f240 3289 	movw	r2, #905	; 0x389
 8009a02:	4293      	cmp	r3, r2
 8009a04:	f001 839d 	beq.w	800b142 <WiFi_Conn_ND+0x176a>
 8009a08:	f240 3289 	movw	r2, #905	; 0x389
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	f301 84bb 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009a12:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009a16:	f001 828c 	beq.w	800af32 <WiFi_Conn_ND+0x155a>
 8009a1a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009a1e:	f301 84b3 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009a22:	f240 3229 	movw	r2, #809	; 0x329
 8009a26:	4293      	cmp	r3, r2
 8009a28:	f301 84ae 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009a2c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009a30:	f280 80a5 	bge.w	8009b7e <WiFi_Conn_ND+0x1a6>
 8009a34:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	f000 87c0 	beq.w	800a9be <WiFi_Conn_ND+0xfe6>
 8009a3e:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009a42:	4293      	cmp	r3, r2
 8009a44:	f301 84a0 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009a48:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	f000 8741 	beq.w	800a8d4 <WiFi_Conn_ND+0xefc>
 8009a52:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009a56:	4293      	cmp	r3, r2
 8009a58:	f301 8496 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009a5c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009a60:	f000 866b 	beq.w	800a73a <WiFi_Conn_ND+0xd62>
 8009a64:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009a68:	f301 848e 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009a6c:	f240 2261 	movw	r2, #609	; 0x261
 8009a70:	4293      	cmp	r3, r2
 8009a72:	f000 85ec 	beq.w	800a64e <WiFi_Conn_ND+0xc76>
 8009a76:	f240 2261 	movw	r2, #609	; 0x261
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	f301 8484 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009a80:	f240 225d 	movw	r2, #605	; 0x25d
 8009a84:	4293      	cmp	r3, r2
 8009a86:	f000 8582 	beq.w	800a58e <WiFi_Conn_ND+0xbb6>
 8009a8a:	f240 225d 	movw	r2, #605	; 0x25d
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	f301 847a 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009a94:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009a98:	f000 8500 	beq.w	800a49c <WiFi_Conn_ND+0xac4>
 8009a9c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009aa0:	f301 8472 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009aa4:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	f000 8496 	beq.w	800a3da <WiFi_Conn_ND+0xa02>
 8009aae:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009ab2:	f281 8469 	bge.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009ab6:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009aba:	4293      	cmp	r3, r2
 8009abc:	f000 844c 	beq.w	800a358 <WiFi_Conn_ND+0x980>
 8009ac0:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009ac4:	f281 8460 	bge.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009ac8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009acc:	f000 83d7 	beq.w	800a27e <WiFi_Conn_ND+0x8a6>
 8009ad0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009ad4:	f301 8458 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009ad8:	f240 1299 	movw	r2, #409	; 0x199
 8009adc:	4293      	cmp	r3, r2
 8009ade:	f000 8378 	beq.w	800a1d2 <WiFi_Conn_ND+0x7fa>
 8009ae2:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009ae6:	f281 844f 	bge.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009aea:	f240 1295 	movw	r2, #405	; 0x195
 8009aee:	4293      	cmp	r3, r2
 8009af0:	f000 8333 	beq.w	800a15a <WiFi_Conn_ND+0x782>
 8009af4:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009af8:	f281 8446 	bge.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009afc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009b00:	f000 82aa 	beq.w	800a058 <WiFi_Conn_ND+0x680>
 8009b04:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009b08:	f301 843e 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b0c:	f240 1235 	movw	r2, #309	; 0x135
 8009b10:	4293      	cmp	r3, r2
 8009b12:	f000 827b 	beq.w	800a00c <WiFi_Conn_ND+0x634>
 8009b16:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009b1a:	f281 8435 	bge.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b1e:	f240 1231 	movw	r2, #305	; 0x131
 8009b22:	4293      	cmp	r3, r2
 8009b24:	f000 826d 	beq.w	800a002 <WiFi_Conn_ND+0x62a>
 8009b28:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009b2c:	f281 842c 	bge.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009b34:	f000 8211 	beq.w	8009f5a <WiFi_Conn_ND+0x582>
 8009b38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009b3c:	f301 8424 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b40:	2bd1      	cmp	r3, #209	; 0xd1
 8009b42:	f000 81a5 	beq.w	8009e90 <WiFi_Conn_ND+0x4b8>
 8009b46:	2bd1      	cmp	r3, #209	; 0xd1
 8009b48:	f301 841e 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b4c:	2bcd      	cmp	r3, #205	; 0xcd
 8009b4e:	f000 8175 	beq.w	8009e3c <WiFi_Conn_ND+0x464>
 8009b52:	2bcd      	cmp	r3, #205	; 0xcd
 8009b54:	f301 8418 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b58:	2bc8      	cmp	r3, #200	; 0xc8
 8009b5a:	f000 80f1 	beq.w	8009d40 <WiFi_Conn_ND+0x368>
 8009b5e:	2bc8      	cmp	r3, #200	; 0xc8
 8009b60:	f301 8412 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b64:	2b6d      	cmp	r3, #109	; 0x6d
 8009b66:	f000 80b3 	beq.w	8009cd0 <WiFi_Conn_ND+0x2f8>
 8009b6a:	2b6d      	cmp	r3, #109	; 0x6d
 8009b6c:	f301 840c 	bgt.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b70:	2b64      	cmp	r3, #100	; 0x64
 8009b72:	d021      	beq.n	8009bb8 <WiFi_Conn_ND+0x1e0>
 8009b74:	2b69      	cmp	r3, #105	; 0x69
 8009b76:	f000 8096 	beq.w	8009ca6 <WiFi_Conn_ND+0x2ce>
 8009b7a:	f001 bc05 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b7e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009b82:	2b09      	cmp	r3, #9
 8009b84:	f201 8400 	bhi.w	800b388 <WiFi_Conn_ND+0x19b0>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <WiFi_Conn_ND+0x1b8>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	0800aad5 	.word	0x0800aad5
 8009b94:	0800b389 	.word	0x0800b389
 8009b98:	0800b389 	.word	0x0800b389
 8009b9c:	0800b389 	.word	0x0800b389
 8009ba0:	0800b389 	.word	0x0800b389
 8009ba4:	0800aba3 	.word	0x0800aba3
 8009ba8:	0800ac4d 	.word	0x0800ac4d
 8009bac:	0800acf7 	.word	0x0800acf7
 8009bb0:	0800ada1 	.word	0x0800ada1
 8009bb4:	0800ae4b 	.word	0x0800ae4b
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbe:	2b64      	cmp	r3, #100	; 0x64
 8009bc0:	d046      	beq.n	8009c50 <WiFi_Conn_ND+0x278>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d041      	beq.n	8009c50 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bd2:	2b1c      	cmp	r3, #28
 8009bd4:	d03c      	beq.n	8009c50 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d037      	beq.n	8009c50 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be6:	2b04      	cmp	r3, #4
 8009be8:	d032      	beq.n	8009c50 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf0:	2b13      	cmp	r3, #19
 8009bf2:	d02d      	beq.n	8009c50 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f7fc fab1 	bl	800615c <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d14e      	bne.n	8009ca2 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f7fc fc3f 	bl	8006488 <AT_ESP8266_ND>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d109      	bne.n	8009c38 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f7f7 fb70 	bl	8001318 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	2364      	movs	r3, #100	; 0x64
 8009c48:	68b8      	ldr	r0, [r7, #8]
 8009c4a:	f7fb fa0b 	bl	8005064 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009c4e:	e028      	b.n	8009ca2 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d004      	beq.n	8009c64 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009c60:	2b1c      	cmp	r3, #28
 8009c62:	d103      	bne.n	8009c6c <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	226d      	movs	r2, #109	; 0x6d
 8009c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d00f      	beq.n	8009c96 <WiFi_Conn_ND+0x2be>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	d00a      	beq.n	8009c96 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c86:	2b0b      	cmp	r3, #11
 8009c88:	d005      	beq.n	8009c96 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c90:	2b0c      	cmp	r3, #12
 8009c92:	f041 834a 	bne.w	800b32a <WiFi_Conn_ND+0x1952>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2269      	movs	r2, #105	; 0x69
 8009c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009c9e:	f001 bb44 	b.w	800b32a <WiFi_Conn_ND+0x1952>
 8009ca2:	f001 bb42 	b.w	800b32a <WiFi_Conn_ND+0x1952>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f7fc fa58 	bl	800615c <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2264      	movs	r2, #100	; 0x64
 8009cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009ccc:	f001 bb5c 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00c      	beq.n	8009cf4 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f7fc fa6a 	bl	80061b4 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009cf2:	e00e      	b.n	8009d12 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f7fc fa47 	bl	8006188 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	22c8      	movs	r2, #200	; 0xc8
 8009cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	f041 8308 	bne.w	800b32e <WiFi_Conn_ND+0x1956>
					{
						Cambiar_CWMODE(b);
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f7fc fa1c 	bl	800615c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2264      	movs	r2, #100	; 0x64
 8009d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009d3c:	f001 baf7 	b.w	800b32e <WiFi_Conn_ND+0x1956>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d46:	2bc8      	cmp	r3, #200	; 0xc8
 8009d48:	d04f      	beq.n	8009dea <WiFi_Conn_ND+0x412>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d04a      	beq.n	8009dea <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d045      	beq.n	8009dea <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d040      	beq.n	8009dea <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	d03b      	beq.n	8009dea <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d78:	2b0a      	cmp	r3, #10
 8009d7a:	d036      	beq.n	8009dea <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d82:	2b0b      	cmp	r3, #11
 8009d84:	d031      	beq.n	8009dea <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d8c:	2b0c      	cmp	r3, #12
 8009d8e:	d02c      	beq.n	8009dea <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f7fc f9f9 	bl	8006188 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d124      	bne.n	8009dea <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f7fc fb71 	bl	8006488 <AT_ESP8266_ND>
 8009da6:	4602      	mov	r2, r0
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d109      	bne.n	8009dd4 <WiFi_Conn_ND+0x3fc>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	f7f7 faa2 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	2364      	movs	r3, #100	; 0x64
 8009de4:	68b8      	ldr	r0, [r7, #8]
 8009de6:	f7fb f93d 	bl	8005064 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d004      	beq.n	8009dfe <WiFi_Conn_ND+0x426>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dfa:	2b0c      	cmp	r3, #12
 8009dfc:	d103      	bne.n	8009e06 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	22d1      	movs	r2, #209	; 0xd1
 8009e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d00f      	beq.n	8009e30 <WiFi_Conn_ND+0x458>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d00a      	beq.n	8009e30 <WiFi_Conn_ND+0x458>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d005      	beq.n	8009e30 <WiFi_Conn_ND+0x458>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2a:	2b0a      	cmp	r3, #10
 8009e2c:	f041 8281 	bne.w	800b332 <WiFi_Conn_ND+0x195a>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	22cd      	movs	r2, #205	; 0xcd
 8009e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009e38:	f001 ba7b 	b.w	800b332 <WiFi_Conn_ND+0x195a>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009e3c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009e40:	f7f8 fc5c 	bl	80026fc <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7fc f99f 	bl	8006188 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	22c8      	movs	r2, #200	; 0xc8
 8009e4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	f041 8264 	bne.w	800b336 <WiFi_Conn_ND+0x195e>
					{
						Cambiar_CWMODE(b);
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7fc f974 	bl	800615c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2264      	movs	r2, #100	; 0x64
 8009e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009e8c:	f001 ba53 	b.w	800b336 <WiFi_Conn_ND+0x195e>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d108      	bne.n	8009eb4 <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f240 3229 	movw	r2, #809	; 0x329
 8009ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eba:	2b0a      	cmp	r3, #10
 8009ebc:	d009      	beq.n	8009ed2 <WiFi_Conn_ND+0x4fa>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec4:	2b0d      	cmp	r3, #13
 8009ec6:	d004      	beq.n	8009ed2 <WiFi_Conn_ND+0x4fa>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	d10a      	bne.n	8009ee8 <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f7fc f958 	bl	8006188 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	22c8      	movs	r2, #200	; 0xc8
 8009edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d10e      	bne.n	8009f10 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f7fc f932 	bl	800615c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2264      	movs	r2, #100	; 0x64
 8009efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d011      	beq.n	8009f3e <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7fc f9a2 	bl	8006264 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009f3a:	f001 ba25 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7fc f938 	bl	80061b4 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009f56:	f001 ba17 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f64:	d03b      	beq.n	8009fde <WiFi_Conn_ND+0x606>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d036      	beq.n	8009fde <WiFi_Conn_ND+0x606>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f76:	2b0a      	cmp	r3, #10
 8009f78:	d031      	beq.n	8009fde <WiFi_Conn_ND+0x606>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f80:	2b0d      	cmp	r3, #13
 8009f82:	d02c      	beq.n	8009fde <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7fc f941 	bl	800620c <DesconectarWIFI>
						if(b->_enviaruart==1)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d124      	bne.n	8009fde <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7fc fa77 	bl	8006488 <AT_ESP8266_ND>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d109      	bne.n	8009fc8 <WiFi_Conn_ND+0x5f0>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	f7f7 f9a8 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	2364      	movs	r3, #100	; 0x64
 8009fd8:	68b8      	ldr	r0, [r7, #8]
 8009fda:	f7fb f843 	bl	8005064 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe4:	2b0a      	cmp	r3, #10
 8009fe6:	d005      	beq.n	8009ff4 <WiFi_Conn_ND+0x61c>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fee:	2b0d      	cmp	r3, #13
 8009ff0:	f041 81a3 	bne.w	800b33a <WiFi_Conn_ND+0x1962>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f240 1235 	movw	r2, #309	; 0x135
 8009ffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009ffe:	f001 b99c 	b.w	800b33a <WiFi_Conn_ND+0x1962>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f7fc f894 	bl	8006130 <NOP>
			}
			break;
 800a008:	f001 b9be 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f7fc f8b7 	bl	8006188 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	22c8      	movs	r2, #200	; 0xc8
 800a01e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a030:	2b04      	cmp	r3, #4
 800a032:	f041 8184 	bne.w	800b33e <WiFi_Conn_ND+0x1966>
					{
						Cambiar_CWMODE(b);
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7fc f890 	bl	800615c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2264      	movs	r2, #100	; 0x64
 800a040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a054:	f001 b973 	b.w	800b33e <WiFi_Conn_ND+0x1966>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a062:	d04f      	beq.n	800a104 <WiFi_Conn_ND+0x72c>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	d04a      	beq.n	800a104 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a074:	2b01      	cmp	r3, #1
 800a076:	d045      	beq.n	800a104 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d040      	beq.n	800a104 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a088:	2b07      	cmp	r3, #7
 800a08a:	d03b      	beq.n	800a104 <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a092:	2b08      	cmp	r3, #8
 800a094:	d036      	beq.n	800a104 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09c:	2b1e      	cmp	r3, #30
 800a09e:	d031      	beq.n	800a104 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a6:	2b1f      	cmp	r3, #31
 800a0a8:	d02c      	beq.n	800a104 <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f7fc f882 	bl	80061b4 <MUX>
						if(b->_enviaruart==1)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d124      	bne.n	800a104 <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f7fc f9e4 	bl	8006488 <AT_ESP8266_ND>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d109      	bne.n	800a0ee <WiFi_Conn_ND+0x716>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	f7f7 f915 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	2364      	movs	r3, #100	; 0x64
 800a0fe:	68b8      	ldr	r0, [r7, #8]
 800a100:	f7fa ffb0 	bl	8005064 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d009      	beq.n	800a122 <WiFi_Conn_ND+0x74a>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a114:	2b07      	cmp	r3, #7
 800a116:	d004      	beq.n	800a122 <WiFi_Conn_ND+0x74a>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a11e:	2b08      	cmp	r3, #8
 800a120:	d104      	bne.n	800a12c <WiFi_Conn_ND+0x754>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f240 1299 	movw	r2, #409	; 0x199
 800a128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a132:	2b02      	cmp	r3, #2
 800a134:	d00a      	beq.n	800a14c <WiFi_Conn_ND+0x774>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a13c:	2b1e      	cmp	r3, #30
 800a13e:	d005      	beq.n	800a14c <WiFi_Conn_ND+0x774>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a146:	2b1f      	cmp	r3, #31
 800a148:	f041 80fb 	bne.w	800b342 <WiFi_Conn_ND+0x196a>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f240 1295 	movw	r2, #405	; 0x195
 800a152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a156:	f001 b8f4 	b.w	800b342 <WiFi_Conn_ND+0x196a>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f7fb ffe8 	bl	8006130 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a166:	2b04      	cmp	r3, #4
 800a168:	d112      	bne.n	800a190 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f7fb fff6 	bl	800615c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2264      	movs	r2, #100	; 0x64
 800a174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a196:	2b0a      	cmp	r3, #10
 800a198:	d00a      	beq.n	800a1b0 <WiFi_Conn_ND+0x7d8>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a0:	2b0d      	cmp	r3, #13
 800a1a2:	d005      	beq.n	800a1b0 <WiFi_Conn_ND+0x7d8>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	f041 80cb 	bne.w	800b346 <WiFi_Conn_ND+0x196e>
				{
					ConectarWIFI(b);
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7fb ffe9 	bl	8006188 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	22c8      	movs	r2, #200	; 0xc8
 800a1ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a1ce:	f001 b8ba 	b.w	800b346 <WiFi_Conn_ND+0x196e>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7fb ffac 	bl	8006130 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	d10e      	bne.n	800a208 <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7fb ffb6 	bl	800615c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2264      	movs	r2, #100	; 0x64
 800a1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20e:	2b0a      	cmp	r3, #10
 800a210:	d009      	beq.n	800a226 <WiFi_Conn_ND+0x84e>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a218:	2b0d      	cmp	r3, #13
 800a21a:	d004      	beq.n	800a226 <WiFi_Conn_ND+0x84e>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a222:	2b03      	cmp	r3, #3
 800a224:	d10a      	bne.n	800a23c <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7fb ffae 	bl	8006188 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	22c8      	movs	r2, #200	; 0xc8
 800a230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10d      	bne.n	800a262 <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7fb ffca 	bl	80061e0 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a25e:	f001 b893 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
						IPDef(b);
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7fb ffbc 	bl	80061e0 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a27a:	f001 b885 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a284:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a288:	d045      	beq.n	800a316 <WiFi_Conn_ND+0x93e>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a290:	2b04      	cmp	r3, #4
 800a292:	d040      	beq.n	800a316 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d03b      	beq.n	800a316 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d036      	beq.n	800a316 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ae:	2b1b      	cmp	r3, #27
 800a2b0:	d031      	beq.n	800a316 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b8:	2b21      	cmp	r3, #33	; 0x21
 800a2ba:	d02c      	beq.n	800a316 <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f7fb ff8f 	bl	80061e0 <IPDef>
						if(b->_enviaruart==1)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d124      	bne.n	800a316 <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7fc f8db 	bl	8006488 <AT_ESP8266_ND>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d109      	bne.n	800a300 <WiFi_Conn_ND+0x928>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	f7f7 f80c 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	2364      	movs	r3, #100	; 0x64
 800a310:	68b8      	ldr	r0, [r7, #8]
 800a312:	f7fa fea7 	bl	8005064 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d004      	beq.n	800a32a <WiFi_Conn_ND+0x952>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a326:	2b1b      	cmp	r3, #27
 800a328:	d104      	bne.n	800a334 <WiFi_Conn_ND+0x95c>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d005      	beq.n	800a34a <WiFi_Conn_ND+0x972>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a344:	2b21      	cmp	r3, #33	; 0x21
 800a346:	f041 8000 	bne.w	800b34a <WiFi_Conn_ND+0x1972>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a354:	f000 bff9 	b.w	800b34a <WiFi_Conn_ND+0x1972>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7fb fee9 	bl	8006130 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a364:	2b04      	cmp	r3, #4
 800a366:	d004      	beq.n	800a372 <WiFi_Conn_ND+0x99a>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d112      	bne.n	800a398 <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f7fb fef2 	bl	800615c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2264      	movs	r2, #100	; 0x64
 800a37c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39e:	2b0a      	cmp	r3, #10
 800a3a0:	d00a      	beq.n	800a3b8 <WiFi_Conn_ND+0x9e0>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a8:	2b0d      	cmp	r3, #13
 800a3aa:	d005      	beq.n	800a3b8 <WiFi_Conn_ND+0x9e0>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	f040 87cb 	bne.w	800b34e <WiFi_Conn_ND+0x1976>
				{
					ConectarWIFI(b);
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7fb fee5 	bl	8006188 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	22c8      	movs	r2, #200	; 0xc8
 800a3c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a3d6:	f000 bfba 	b.w	800b34e <WiFi_Conn_ND+0x1976>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f7fb fea8 	bl	8006130 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e6:	2b04      	cmp	r3, #4
 800a3e8:	d112      	bne.n	800a410 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f7fb feb6 	bl	800615c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2264      	movs	r2, #100	; 0x64
 800a3f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a416:	2b0a      	cmp	r3, #10
 800a418:	d009      	beq.n	800a42e <WiFi_Conn_ND+0xa56>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a420:	2b0d      	cmp	r3, #13
 800a422:	d004      	beq.n	800a42e <WiFi_Conn_ND+0xa56>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d10e      	bne.n	800a44c <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7fb feaa 	bl	8006188 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	22c8      	movs	r2, #200	; 0xc8
 800a438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a452:	2b00      	cmp	r3, #0
 800a454:	d111      	bne.n	800a47a <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7fb feee 	bl	8006238 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800a476:	f000 bf87 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
						ConectarWIFI(b);//
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7fb fe84 	bl	8006188 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	22c8      	movs	r2, #200	; 0xc8
 800a484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a498:	f000 bf76 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a4a6:	d04a      	beq.n	800a53e <WiFi_Conn_ND+0xb66>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d045      	beq.n	800a53e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d040      	beq.n	800a53e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c2:	2b0a      	cmp	r3, #10
 800a4c4:	d03b      	beq.n	800a53e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4cc:	2b0e      	cmp	r3, #14
 800a4ce:	d036      	beq.n	800a53e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d6:	2b0f      	cmp	r3, #15
 800a4d8:	d031      	beq.n	800a53e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e0:	2b10      	cmp	r3, #16
 800a4e2:	d02c      	beq.n	800a53e <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f7fb fea7 	bl	8006238 <ConectarTCP>
						if(b->_enviaruart==1)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d124      	bne.n	800a53e <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f7fb ffc7 	bl	8006488 <AT_ESP8266_ND>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a510:	2b01      	cmp	r3, #1
 800a512:	d109      	bne.n	800a528 <WiFi_Conn_ND+0xb50>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a520:	4619      	mov	r1, r3
 800a522:	4610      	mov	r0, r2
 800a524:	f7f6 fef8 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a534:	b29a      	uxth	r2, r3
 800a536:	2364      	movs	r3, #100	; 0x64
 800a538:	68b8      	ldr	r0, [r7, #8]
 800a53a:	f7fa fd93 	bl	8005064 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a544:	2b01      	cmp	r3, #1
 800a546:	d009      	beq.n	800a55c <WiFi_Conn_ND+0xb84>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54e:	2b0e      	cmp	r3, #14
 800a550:	d004      	beq.n	800a55c <WiFi_Conn_ND+0xb84>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a558:	2b0f      	cmp	r3, #15
 800a55a:	d106      	bne.n	800a56a <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f240 2261 	movw	r2, #609	; 0x261
 800a562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a566:	f000 bef4 	b.w	800b352 <WiFi_Conn_ND+0x197a>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a570:	2b02      	cmp	r3, #2
 800a572:	d005      	beq.n	800a580 <WiFi_Conn_ND+0xba8>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57a:	2b10      	cmp	r3, #16
 800a57c:	f040 86e9 	bne.w	800b352 <WiFi_Conn_ND+0x197a>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f240 225d 	movw	r2, #605	; 0x25d
 800a586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a58a:	f000 bee2 	b.w	800b352 <WiFi_Conn_ND+0x197a>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7fb fdce 	bl	8006130 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d112      	bne.n	800a5c4 <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f7fb fddc 	bl	800615c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2264      	movs	r2, #100	; 0x64
 800a5a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ca:	2b0a      	cmp	r3, #10
 800a5cc:	d013      	beq.n	800a5f6 <WiFi_Conn_ND+0xc1e>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d4:	2b0d      	cmp	r3, #13
 800a5d6:	d00e      	beq.n	800a5f6 <WiFi_Conn_ND+0xc1e>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5de:	2b22      	cmp	r3, #34	; 0x22
 800a5e0:	d009      	beq.n	800a5f6 <WiFi_Conn_ND+0xc1e>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d004      	beq.n	800a5f6 <WiFi_Conn_ND+0xc1e>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	d10e      	bne.n	800a614 <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7fb fdc6 	bl	8006188 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	22c8      	movs	r2, #200	; 0xc8
 800a600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61a:	2b10      	cmp	r3, #16
 800a61c:	d005      	beq.n	800a62a <WiFi_Conn_ND+0xc52>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a624:	2b0e      	cmp	r3, #14
 800a626:	f040 8696 	bne.w	800b356 <WiFi_Conn_ND+0x197e>
				{
					ConectarTCP(b);
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7fb fe04 	bl	8006238 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a64a:	f000 be84 	b.w	800b356 <WiFi_Conn_ND+0x197e>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f7fb fd6e 	bl	8006130 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d112      	bne.n	800a684 <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7fb fd7c 	bl	800615c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2264      	movs	r2, #100	; 0x64
 800a668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68a:	2b0a      	cmp	r3, #10
 800a68c:	d009      	beq.n	800a6a2 <WiFi_Conn_ND+0xcca>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a694:	2b0d      	cmp	r3, #13
 800a696:	d004      	beq.n	800a6a2 <WiFi_Conn_ND+0xcca>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d10e      	bne.n	800a6c0 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7fb fd70 	bl	8006188 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	22c8      	movs	r2, #200	; 0xc8
 800a6ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d004      	beq.n	800a6d4 <WiFi_Conn_ND+0xcfc>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d0:	2b10      	cmp	r3, #16
 800a6d2:	d10f      	bne.n	800a6f4 <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7fb fdaf 	bl	8006238 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a6e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fa:	2b0e      	cmp	r3, #14
 800a6fc:	d005      	beq.n	800a70a <WiFi_Conn_ND+0xd32>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a704:	2b0f      	cmp	r3, #15
 800a706:	f040 8628 	bne.w	800b35a <WiFi_Conn_ND+0x1982>
					{
						if(b->_automatizacion >= WF_SEND )
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a710:	2b02      	cmp	r3, #2
 800a712:	f240 8622 	bls.w	800b35a <WiFi_Conn_ND+0x1982>
						{
							EnviarDatos(b);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7fb fdd0 	bl	80062bc <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a736:	f000 be10 	b.w	800b35a <WiFi_Conn_ND+0x1982>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a740:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a744:	d054      	beq.n	800a7f0 <WiFi_Conn_ND+0xe18>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d04f      	beq.n	800a7f0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a756:	2b0a      	cmp	r3, #10
 800a758:	d04a      	beq.n	800a7f0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a760:	2b10      	cmp	r3, #16
 800a762:	d045      	beq.n	800a7f0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76a:	2b11      	cmp	r3, #17
 800a76c:	d040      	beq.n	800a7f0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a774:	2b14      	cmp	r3, #20
 800a776:	d03b      	beq.n	800a7f0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77e:	2b12      	cmp	r3, #18
 800a780:	d036      	beq.n	800a7f0 <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d907      	bls.n	800a79c <WiFi_Conn_ND+0xdc4>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a792:	2b00      	cmp	r3, #0
 800a794:	d002      	beq.n	800a79c <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7fb fd90 	bl	80062bc <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d124      	bne.n	800a7f0 <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7fb fe6e 	bl	8006488 <AT_ESP8266_ND>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d109      	bne.n	800a7da <WiFi_Conn_ND+0xe02>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	f7f6 fd9f 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	2364      	movs	r3, #100	; 0x64
 800a7ea:	68b8      	ldr	r0, [r7, #8]
 800a7ec:	f7fa fc3a 	bl	8005064 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a7fa:	d13b      	bne.n	800a874 <WiFi_Conn_ND+0xe9c>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a802:	2b01      	cmp	r3, #1
 800a804:	d136      	bne.n	800a874 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_error)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d031      	beq.n	800a874 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_wifi_disconnect)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a816:	2b0a      	cmp	r3, #10
 800a818:	d02c      	beq.n	800a874 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_desconectado)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a820:	2b10      	cmp	r3, #16
 800a822:	d027      	beq.n	800a874 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_snd_err)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82a:	2b11      	cmp	r3, #17
 800a82c:	d022      	beq.n	800a874 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a834:	2b12      	cmp	r3, #18
 800a836:	d01d      	beq.n	800a874 <WiFi_Conn_ND+0xe9c>
							{
								b->_enviaruart=0;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a846:	2b01      	cmp	r3, #1
 800a848:	d109      	bne.n	800a85e <WiFi_Conn_ND+0xe86>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a856:	4619      	mov	r1, r3
 800a858:	4610      	mov	r0, r2
 800a85a:	f7f6 fd5d 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	2364      	movs	r3, #100	; 0x64
 800a86e:	68b8      	ldr	r0, [r7, #8]
 800a870:	f7fa fbf8 	bl	8005064 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a87a:	2b13      	cmp	r3, #19
 800a87c:	d104      	bne.n	800a888 <WiFi_Conn_ND+0xeb0>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d019      	beq.n	800a8c6 <WiFi_Conn_ND+0xeee>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a898:	2b0a      	cmp	r3, #10
 800a89a:	d014      	beq.n	800a8c6 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_fail)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d00f      	beq.n	800a8c6 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_desconectado)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ac:	2b10      	cmp	r3, #16
 800a8ae:	d00a      	beq.n	800a8c6 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_snd_err)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b6:	2b11      	cmp	r3, #17
 800a8b8:	d005      	beq.n	800a8c6 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_enviado_error))
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c0:	2b12      	cmp	r3, #18
 800a8c2:	f040 854c 	bne.w	800b35e <WiFi_Conn_ND+0x1986>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a8cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a8d0:	f000 bd45 	b.w	800b35e <WiFi_Conn_ND+0x1986>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f7fb fc2b 	bl	8006130 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d112      	bne.n	800a90a <WiFi_Conn_ND+0xf32>
				{
					Cambiar_CWMODE(b);
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7fb fc39 	bl	800615c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2264      	movs	r2, #100	; 0x64
 800a8ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a910:	2b0a      	cmp	r3, #10
 800a912:	d009      	beq.n	800a928 <WiFi_Conn_ND+0xf50>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91a:	2b0d      	cmp	r3, #13
 800a91c:	d004      	beq.n	800a928 <WiFi_Conn_ND+0xf50>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a924:	2b03      	cmp	r3, #3
 800a926:	d10e      	bne.n	800a946 <WiFi_Conn_ND+0xf6e>
				{
					ConectarWIFI(b);
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7fb fc2d 	bl	8006188 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	22c8      	movs	r2, #200	; 0xc8
 800a932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a94c:	2b0c      	cmp	r3, #12
 800a94e:	d10f      	bne.n	800a970 <WiFi_Conn_ND+0xf98>
				{
					ConectarTCP(b);
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7fb fc71 	bl	8006238 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a95c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a976:	2b02      	cmp	r3, #2
 800a978:	d00f      	beq.n	800a99a <WiFi_Conn_ND+0xfc2>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a980:	2b10      	cmp	r3, #16
 800a982:	d00a      	beq.n	800a99a <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_snd_err)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98a:	2b11      	cmp	r3, #17
 800a98c:	d005      	beq.n	800a99a <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a994:	2b12      	cmp	r3, #18
 800a996:	f040 84e4 	bne.w	800b362 <WiFi_Conn_ND+0x198a>
				{
					ConectarTCP(b);
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f7fb fc4c 	bl	8006238 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a9a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a9ba:	f000 bcd2 	b.w	800b362 <WiFi_Conn_ND+0x198a>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f7fb fbb6 	bl	8006130 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ca:	2b04      	cmp	r3, #4
 800a9cc:	d112      	bne.n	800a9f4 <WiFi_Conn_ND+0x101c>
					{
						Cambiar_CWMODE(b);
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7fb fbc4 	bl	800615c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2264      	movs	r2, #100	; 0x64
 800a9d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fa:	2b0a      	cmp	r3, #10
 800a9fc:	d009      	beq.n	800aa12 <WiFi_Conn_ND+0x103a>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa04:	2b0d      	cmp	r3, #13
 800aa06:	d004      	beq.n	800aa12 <WiFi_Conn_ND+0x103a>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d10e      	bne.n	800aa30 <WiFi_Conn_ND+0x1058>
					{
						ConectarWIFI(b);
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7fb fbb8 	bl	8006188 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	22c8      	movs	r2, #200	; 0xc8
 800aa1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d00e      	beq.n	800aa58 <WiFi_Conn_ND+0x1080>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa40:	2b0b      	cmp	r3, #11
 800aa42:	d009      	beq.n	800aa58 <WiFi_Conn_ND+0x1080>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa4a:	2b0c      	cmp	r3, #12
 800aa4c:	d004      	beq.n	800aa58 <WiFi_Conn_ND+0x1080>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa54:	2b10      	cmp	r3, #16
 800aa56:	d10f      	bne.n	800aa78 <WiFi_Conn_ND+0x10a0>
					{
						ConectarTCP(b);
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f7fb fbed 	bl	8006238 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800aa78:	20c8      	movs	r0, #200	; 0xc8
 800aa7a:	f7f7 fe3f 	bl	80026fc <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d916      	bls.n	800aab6 <WiFi_Conn_ND+0x10de>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d011      	beq.n	800aab6 <WiFi_Conn_ND+0x10de>
					{
							EnviarDatos(b);
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7fb fc12 	bl	80062bc <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800aa9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800aab2:	f000 bc69 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
							b->_estado_conexion=TCP_CONN_OK;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f240 2261 	movw	r2, #609	; 0x261
 800aabc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800aad0:	f000 bc5a 	b.w	800b388 <WiFi_Conn_ND+0x19b0>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aada:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aade:	d045      	beq.n	800ab6c <WiFi_Conn_ND+0x1194>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d040      	beq.n	800ab6c <WiFi_Conn_ND+0x1194>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf0:	2b0a      	cmp	r3, #10
 800aaf2:	d03b      	beq.n	800ab6c <WiFi_Conn_ND+0x1194>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafa:	2b15      	cmp	r3, #21
 800aafc:	d036      	beq.n	800ab6c <WiFi_Conn_ND+0x1194>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab04:	2b16      	cmp	r3, #22
 800ab06:	d031      	beq.n	800ab6c <WiFi_Conn_ND+0x1194>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0e:	2b17      	cmp	r3, #23
 800ab10:	d02c      	beq.n	800ab6c <WiFi_Conn_ND+0x1194>
							{
								CrearServidorTCP(b);
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f7fb fba6 	bl	8006264 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d124      	bne.n	800ab6c <WiFi_Conn_ND+0x1194>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7fb fcb0 	bl	8006488 <AT_ESP8266_ND>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d109      	bne.n	800ab56 <WiFi_Conn_ND+0x117e>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4610      	mov	r0, r2
 800ab52:	f7f6 fbe1 	bl	8001318 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	2364      	movs	r3, #100	; 0x64
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f7fa fa7c 	bl	8005064 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab72:	2b15      	cmp	r3, #21
 800ab74:	d004      	beq.n	800ab80 <WiFi_Conn_ND+0x11a8>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab7c:	2b17      	cmp	r3, #23
 800ab7e:	d104      	bne.n	800ab8a <WiFi_Conn_ND+0x11b2>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f240 3229 	movw	r2, #809	; 0x329
 800ab86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab90:	2b16      	cmp	r3, #22
 800ab92:	f040 83e8 	bne.w	800b366 <WiFi_Conn_ND+0x198e>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f240 3225 	movw	r2, #805	; 0x325
 800ab9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800aba0:	e3e1      	b.n	800b366 <WiFi_Conn_ND+0x198e>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f7fb fac4 	bl	8006130 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d112      	bne.n	800abd8 <WiFi_Conn_ND+0x1200>
							{
								Cambiar_CWMODE(b);
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7fb fad2 	bl	800615c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2264      	movs	r2, #100	; 0x64
 800abbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abde:	2b0a      	cmp	r3, #10
 800abe0:	d009      	beq.n	800abf6 <WiFi_Conn_ND+0x121e>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe8:	2b0d      	cmp	r3, #13
 800abea:	d004      	beq.n	800abf6 <WiFi_Conn_ND+0x121e>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d10e      	bne.n	800ac14 <WiFi_Conn_ND+0x123c>
							{
								ConectarWIFI(b);
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7fb fac6 	bl	8006188 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	22c8      	movs	r2, #200	; 0xc8
 800ac00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac1a:	2b02      	cmp	r3, #2
 800ac1c:	d005      	beq.n	800ac2a <WiFi_Conn_ND+0x1252>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac24:	2b10      	cmp	r3, #16
 800ac26:	f040 83a0 	bne.w	800b36a <WiFi_Conn_ND+0x1992>
							{
								ConectarTCP(b);
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f7fb fb04 	bl	8006238 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800ac4a:	e38e      	b.n	800b36a <WiFi_Conn_ND+0x1992>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7fb fa6f 	bl	8006130 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d112      	bne.n	800ac82 <WiFi_Conn_ND+0x12aa>
							{
								Cambiar_CWMODE(b);
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f7fb fa7d 	bl	800615c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2264      	movs	r2, #100	; 0x64
 800ac66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac88:	2b0a      	cmp	r3, #10
 800ac8a:	d009      	beq.n	800aca0 <WiFi_Conn_ND+0x12c8>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac92:	2b0d      	cmp	r3, #13
 800ac94:	d004      	beq.n	800aca0 <WiFi_Conn_ND+0x12c8>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9c:	2b03      	cmp	r3, #3
 800ac9e:	d10e      	bne.n	800acbe <WiFi_Conn_ND+0x12e6>
							{
								ConectarWIFI(b);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7fb fa71 	bl	8006188 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	22c8      	movs	r2, #200	; 0xc8
 800acaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d005      	beq.n	800acd4 <WiFi_Conn_ND+0x12fc>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acce:	2b10      	cmp	r3, #16
 800acd0:	f040 834d 	bne.w	800b36e <WiFi_Conn_ND+0x1996>
							{
								ConectarTCP(b);
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7fb faaf 	bl	8006238 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ace0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800acf4:	e33b      	b.n	800b36e <WiFi_Conn_ND+0x1996>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7fb fa1a 	bl	8006130 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad02:	2b04      	cmp	r3, #4
 800ad04:	d112      	bne.n	800ad2c <WiFi_Conn_ND+0x1354>
							{
								Cambiar_CWMODE(b);
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7fb fa28 	bl	800615c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2264      	movs	r2, #100	; 0x64
 800ad10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad32:	2b0a      	cmp	r3, #10
 800ad34:	d009      	beq.n	800ad4a <WiFi_Conn_ND+0x1372>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad3c:	2b0d      	cmp	r3, #13
 800ad3e:	d004      	beq.n	800ad4a <WiFi_Conn_ND+0x1372>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d10e      	bne.n	800ad68 <WiFi_Conn_ND+0x1390>
							{
								ConectarWIFI(b);
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f7fb fa1c 	bl	8006188 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	22c8      	movs	r2, #200	; 0xc8
 800ad54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d005      	beq.n	800ad7e <WiFi_Conn_ND+0x13a6>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad78:	2b10      	cmp	r3, #16
 800ad7a:	f040 82fa 	bne.w	800b372 <WiFi_Conn_ND+0x199a>
							{
								ConectarTCP(b);
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f7fb fa5a 	bl	8006238 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ad9e:	e2e8      	b.n	800b372 <WiFi_Conn_ND+0x199a>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f7fb f9c5 	bl	8006130 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adac:	2b04      	cmp	r3, #4
 800adae:	d112      	bne.n	800add6 <WiFi_Conn_ND+0x13fe>
							{
								Cambiar_CWMODE(b);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7fb f9d3 	bl	800615c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2264      	movs	r2, #100	; 0x64
 800adba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800addc:	2b0a      	cmp	r3, #10
 800adde:	d009      	beq.n	800adf4 <WiFi_Conn_ND+0x141c>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade6:	2b0d      	cmp	r3, #13
 800ade8:	d004      	beq.n	800adf4 <WiFi_Conn_ND+0x141c>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf0:	2b03      	cmp	r3, #3
 800adf2:	d10e      	bne.n	800ae12 <WiFi_Conn_ND+0x143a>
							{
								ConectarWIFI(b);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7fb f9c7 	bl	8006188 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	22c8      	movs	r2, #200	; 0xc8
 800adfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d005      	beq.n	800ae28 <WiFi_Conn_ND+0x1450>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae22:	2b10      	cmp	r3, #16
 800ae24:	f040 82a7 	bne.w	800b376 <WiFi_Conn_ND+0x199e>
							{
								ConectarTCP(b);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f7fb fa05 	bl	8006238 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ae48:	e295      	b.n	800b376 <WiFi_Conn_ND+0x199e>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f7fb f970 	bl	8006130 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d112      	bne.n	800ae88 <WiFi_Conn_ND+0x14b0>
								{
									Cambiar_CWMODE(b);
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7fb f97a 	bl	800615c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2264      	movs	r2, #100	; 0x64
 800ae6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8e:	2b0a      	cmp	r3, #10
 800ae90:	d009      	beq.n	800aea6 <WiFi_Conn_ND+0x14ce>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae98:	2b0d      	cmp	r3, #13
 800ae9a:	d004      	beq.n	800aea6 <WiFi_Conn_ND+0x14ce>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d10e      	bne.n	800aec4 <WiFi_Conn_ND+0x14ec>
								{
									ConectarWIFI(b);
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7fb f96e 	bl	8006188 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	22c8      	movs	r2, #200	; 0xc8
 800aeb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d004      	beq.n	800aed8 <WiFi_Conn_ND+0x1500>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed4:	2b10      	cmp	r3, #16
 800aed6:	d10f      	bne.n	800aef8 <WiFi_Conn_ND+0x1520>
								{
									ConectarTCP(b);
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f7fb f9ad 	bl	8006238 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800aefe:	2b01      	cmp	r3, #1
 800af00:	f040 823b 	bne.w	800b37a <WiFi_Conn_ND+0x19a2>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 8235 	beq.w	800b37a <WiFi_Conn_ND+0x19a2>
								{
									EnviarDatosSRVR(b);
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7fb f9bd 	bl	8006290 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f44f 7261 	mov.w	r2, #900	; 0x384
 800af1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800af30:	e223      	b.n	800b37a <WiFi_Conn_ND+0x19a2>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af38:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800af3c:	d063      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af44:	2b02      	cmp	r3, #2
 800af46:	d05e      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_disconnect)&&
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800af4e:	2b0a      	cmp	r3, #10
 800af50:	d059      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_connected)&&
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800af58:	2b0b      	cmp	r3, #11
 800af5a:	d054      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_gotip)&&
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800af62:	2b0c      	cmp	r3, #12
 800af64:	d04f      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_desconectado)&&
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800af6c:	2b10      	cmp	r3, #16
 800af6e:	d04a      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_snd_err)&&
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800af76:	2b11      	cmp	r3, #17
 800af78:	d045      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800af80:	2b12      	cmp	r3, #18
 800af82:	d040      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800af8a:	2b13      	cmp	r3, #19
 800af8c:	d03b      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800af94:	2b16      	cmp	r3, #22
 800af96:	d036      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9e:	2b19      	cmp	r3, #25
 800afa0:	d031      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d02c      	beq.n	800b006 <WiFi_Conn_ND+0x162e>
								{
								EnviarDatosSRVR(b);
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f7fb f96f 	bl	8006290 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d124      	bne.n	800b006 <WiFi_Conn_ND+0x162e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f7fb fa63 	bl	8006488 <AT_ESP8266_ND>
 800afc2:	4602      	mov	r2, r0
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d109      	bne.n	800aff0 <WiFi_Conn_ND+0x1618>
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f7f6 f994 	bl	8001318 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800affc:	b29a      	uxth	r2, r3
 800affe:	2364      	movs	r3, #100	; 0x64
 800b000:	68b8      	ldr	r0, [r7, #8]
 800b002:	f7fa f82f 	bl	8005064 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b00c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b010:	d154      	bne.n	800b0bc <WiFi_Conn_ND+0x16e4>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d14f      	bne.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_error)&&
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b022:	2b02      	cmp	r3, #2
 800b024:	d04a      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_disconnect)&&
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b02c:	2b0a      	cmp	r3, #10
 800b02e:	d045      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_connected)&&
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b036:	2b0b      	cmp	r3, #11
 800b038:	d040      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_gotip)&&
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b040:	2b0c      	cmp	r3, #12
 800b042:	d03b      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_desconectado)&&
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b04a:	2b10      	cmp	r3, #16
 800b04c:	d036      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_snd_err)&&
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b054:	2b11      	cmp	r3, #17
 800b056:	d031      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b05e:	2b12      	cmp	r3, #18
 800b060:	d02c      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b068:	2b13      	cmp	r3, #19
 800b06a:	d027      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b072:	2b16      	cmp	r3, #22
 800b074:	d022      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b07c:	2b19      	cmp	r3, #25
 800b07e:	d01d      	beq.n	800b0bc <WiFi_Conn_ND+0x16e4>
										{
											b->_enviaruart=0;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d109      	bne.n	800b0a6 <WiFi_Conn_ND+0x16ce>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	f7f6 f939 	bl	8001318 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	2364      	movs	r3, #100	; 0x64
 800b0b6:	68b8      	ldr	r0, [r7, #8]
 800b0b8:	f7f9 ffd4 	bl	8005064 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c2:	2b13      	cmp	r3, #19
 800b0c4:	d104      	bne.n	800b0d0 <WiFi_Conn_ND+0x16f8>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f240 328d 	movw	r2, #909	; 0x38d
 800b0cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d02d      	beq.n	800b136 <WiFi_Conn_ND+0x175e>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	d028      	beq.n	800b136 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b0ea:	2b0a      	cmp	r3, #10
 800b0ec:	d023      	beq.n	800b136 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f4:	2b0b      	cmp	r3, #11
 800b0f6:	d01e      	beq.n	800b136 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b0fe:	2b0c      	cmp	r3, #12
 800b100:	d019      	beq.n	800b136 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b108:	2b10      	cmp	r3, #16
 800b10a:	d014      	beq.n	800b136 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b112:	2b11      	cmp	r3, #17
 800b114:	d00f      	beq.n	800b136 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b11c:	2b12      	cmp	r3, #18
 800b11e:	d00a      	beq.n	800b136 <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b126:	2b16      	cmp	r3, #22
 800b128:	d005      	beq.n	800b136 <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b130:	2b19      	cmp	r3, #25
 800b132:	f040 8124 	bne.w	800b37e <WiFi_Conn_ND+0x19a6>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f240 3289 	movw	r2, #905	; 0x389
 800b13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b140:	e11d      	b.n	800b37e <WiFi_Conn_ND+0x19a6>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f7fa fff4 	bl	8006130 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b14e:	2b04      	cmp	r3, #4
 800b150:	d009      	beq.n	800b166 <WiFi_Conn_ND+0x178e>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b158:	2b0b      	cmp	r3, #11
 800b15a:	d004      	beq.n	800b166 <WiFi_Conn_ND+0x178e>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b162:	2b0c      	cmp	r3, #12
 800b164:	d112      	bne.n	800b18c <WiFi_Conn_ND+0x17b4>
							{
								Cambiar_CWMODE(b);
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f7fa fff8 	bl	800615c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2264      	movs	r2, #100	; 0x64
 800b170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b192:	2b0a      	cmp	r3, #10
 800b194:	d009      	beq.n	800b1aa <WiFi_Conn_ND+0x17d2>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19c:	2b0d      	cmp	r3, #13
 800b19e:	d004      	beq.n	800b1aa <WiFi_Conn_ND+0x17d2>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d10e      	bne.n	800b1c8 <WiFi_Conn_ND+0x17f0>
							{
								ConectarWIFI(b);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7fa ffec 	bl	8006188 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	22c8      	movs	r2, #200	; 0xc8
 800b1b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ce:	2b16      	cmp	r3, #22
 800b1d0:	d10c      	bne.n	800b1ec <WiFi_Conn_ND+0x1814>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f240 3225 	movw	r2, #805	; 0x325
 800b1d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f2:	2b18      	cmp	r3, #24
 800b1f4:	d10c      	bne.n	800b210 <WiFi_Conn_ND+0x1838>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f240 3229 	movw	r2, #809	; 0x329
 800b1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b216:	2b19      	cmp	r3, #25
 800b218:	d008      	beq.n	800b22c <WiFi_Conn_ND+0x1854>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b220:	2b11      	cmp	r3, #17
 800b222:	d003      	beq.n	800b22c <WiFi_Conn_ND+0x1854>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2212      	movs	r2, #18
 800b228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b232:	2b01      	cmp	r3, #1
 800b234:	f040 80a5 	bne.w	800b382 <WiFi_Conn_ND+0x19aa>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b252:	e096      	b.n	800b382 <WiFi_Conn_ND+0x19aa>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f7fa ff6b 	bl	8006130 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b260:	2b04      	cmp	r3, #4
 800b262:	d009      	beq.n	800b278 <WiFi_Conn_ND+0x18a0>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b26a:	2b0b      	cmp	r3, #11
 800b26c:	d004      	beq.n	800b278 <WiFi_Conn_ND+0x18a0>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b274:	2b0c      	cmp	r3, #12
 800b276:	d112      	bne.n	800b29e <WiFi_Conn_ND+0x18c6>
								{
									Cambiar_CWMODE(b);
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f7fa ff6f 	bl	800615c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2264      	movs	r2, #100	; 0x64
 800b282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a4:	2b0a      	cmp	r3, #10
 800b2a6:	d009      	beq.n	800b2bc <WiFi_Conn_ND+0x18e4>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ae:	2b0d      	cmp	r3, #13
 800b2b0:	d004      	beq.n	800b2bc <WiFi_Conn_ND+0x18e4>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d10e      	bne.n	800b2da <WiFi_Conn_ND+0x1902>
								{
									ConectarWIFI(b);
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f7fa ff63 	bl	8006188 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	22c8      	movs	r2, #200	; 0xc8
 800b2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d004      	beq.n	800b2ee <WiFi_Conn_ND+0x1916>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d14b      	bne.n	800b386 <WiFi_Conn_ND+0x19ae>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d046      	beq.n	800b386 <WiFi_Conn_ND+0x19ae>
								{
									EnviarDatosSRVR(b);
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7fa ffc9 	bl	8006290 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b328:	e02d      	b.n	800b386 <WiFi_Conn_ND+0x19ae>
			break;
 800b32a:	bf00      	nop
 800b32c:	e02c      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b32e:	bf00      	nop
 800b330:	e02a      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b332:	bf00      	nop
 800b334:	e028      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b336:	bf00      	nop
 800b338:	e026      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b33a:	bf00      	nop
 800b33c:	e024      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b33e:	bf00      	nop
 800b340:	e022      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b342:	bf00      	nop
 800b344:	e020      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b346:	bf00      	nop
 800b348:	e01e      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b34a:	bf00      	nop
 800b34c:	e01c      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b34e:	bf00      	nop
 800b350:	e01a      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b352:	bf00      	nop
 800b354:	e018      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b356:	bf00      	nop
 800b358:	e016      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b35a:	bf00      	nop
 800b35c:	e014      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b35e:	bf00      	nop
 800b360:	e012      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
			break;
 800b362:	bf00      	nop
 800b364:	e010      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
						break;
 800b366:	bf00      	nop
 800b368:	e00e      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
						break;
 800b36a:	bf00      	nop
 800b36c:	e00c      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
						break;
 800b36e:	bf00      	nop
 800b370:	e00a      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
						break;
 800b372:	bf00      	nop
 800b374:	e008      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
						break;
 800b376:	bf00      	nop
 800b378:	e006      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
						break;
 800b37a:	bf00      	nop
 800b37c:	e004      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
						break;
 800b37e:	bf00      	nop
 800b380:	e002      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
						break;
 800b382:	bf00      	nop
 800b384:	e000      	b.n	800b388 <WiFi_Conn_ND+0x19b0>
						break;
 800b386:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop

0800b398 <httpPOST>:

char deviceId[]={',','"','d','e','v','I','d','"',':','\0'};


httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b398:	b5b0      	push	{r4, r5, r7, lr}
 800b39a:	b0a8      	sub	sp, #160	; 0xa0
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b3a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b3ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b3b6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3ba:	f7f4 ff1b 	bl	80001f4 <strlen>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3c6:	4413      	add	r3, r2
 800b3c8:	4aed      	ldr	r2, [pc, #948]	; (800b780 <httpPOST+0x3e8>)
 800b3ca:	6810      	ldr	r0, [r2, #0]
 800b3cc:	6018      	str	r0, [r3, #0]
 800b3ce:	8892      	ldrh	r2, [r2, #4]
 800b3d0:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f7f4 ff0e 	bl	80001f4 <strlen>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	461a      	mov	r2, r3
 800b3dc:	68f9      	ldr	r1, [r7, #12]
 800b3de:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3e2:	f003 f886 	bl	800e4f2 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b3e6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3ea:	f7f4 ff03 	bl	80001f4 <strlen>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3f6:	4413      	add	r3, r2
 800b3f8:	49e2      	ldr	r1, [pc, #904]	; (800b784 <httpPOST+0x3ec>)
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	cb03      	ldmia	r3!, {r0, r1}
 800b400:	6010      	str	r0, [r2, #0]
 800b402:	6051      	str	r1, [r2, #4]
 800b404:	8819      	ldrh	r1, [r3, #0]
 800b406:	789b      	ldrb	r3, [r3, #2]
 800b408:	8111      	strh	r1, [r2, #8]
 800b40a:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b40c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b410:	f7f4 fef0 	bl	80001f4 <strlen>
 800b414:	4603      	mov	r3, r0
 800b416:	461a      	mov	r2, r3
 800b418:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b41c:	4413      	add	r3, r2
 800b41e:	4ada      	ldr	r2, [pc, #872]	; (800b788 <httpPOST+0x3f0>)
 800b420:	8811      	ldrh	r1, [r2, #0]
 800b422:	7892      	ldrb	r2, [r2, #2]
 800b424:	8019      	strh	r1, [r3, #0]
 800b426:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b428:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b42c:	f7f4 fee2 	bl	80001f4 <strlen>
 800b430:	4603      	mov	r3, r0
 800b432:	461a      	mov	r2, r3
 800b434:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b438:	4413      	add	r3, r2
 800b43a:	4ad4      	ldr	r2, [pc, #848]	; (800b78c <httpPOST+0x3f4>)
 800b43c:	6810      	ldr	r0, [r2, #0]
 800b43e:	6018      	str	r0, [r3, #0]
 800b440:	8891      	ldrh	r1, [r2, #4]
 800b442:	7992      	ldrb	r2, [r2, #6]
 800b444:	8099      	strh	r1, [r3, #4]
 800b446:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b448:	68b8      	ldr	r0, [r7, #8]
 800b44a:	f7f4 fed3 	bl	80001f4 <strlen>
 800b44e:	4603      	mov	r3, r0
 800b450:	461a      	mov	r2, r3
 800b452:	68b9      	ldr	r1, [r7, #8]
 800b454:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b458:	f003 f84b 	bl	800e4f2 <strncat>
	strncat(post,":",1);
 800b45c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b460:	f7f4 fec8 	bl	80001f4 <strlen>
 800b464:	4603      	mov	r3, r0
 800b466:	461a      	mov	r2, r3
 800b468:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b46c:	4413      	add	r3, r2
 800b46e:	49c8      	ldr	r1, [pc, #800]	; (800b790 <httpPOST+0x3f8>)
 800b470:	461a      	mov	r2, r3
 800b472:	460b      	mov	r3, r1
 800b474:	881b      	ldrh	r3, [r3, #0]
 800b476:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7f4 febb 	bl	80001f4 <strlen>
 800b47e:	4603      	mov	r3, r0
 800b480:	461a      	mov	r2, r3
 800b482:	6879      	ldr	r1, [r7, #4]
 800b484:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b488:	f003 f833 	bl	800e4f2 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b48c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b490:	f7f4 feb0 	bl	80001f4 <strlen>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b49c:	4413      	add	r3, r2
 800b49e:	4aba      	ldr	r2, [pc, #744]	; (800b788 <httpPOST+0x3f0>)
 800b4a0:	8811      	ldrh	r1, [r2, #0]
 800b4a2:	7892      	ldrb	r2, [r2, #2]
 800b4a4:	8019      	strh	r1, [r3, #0]
 800b4a6:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b4a8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4ac:	f7f4 fea2 	bl	80001f4 <strlen>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4b8:	4413      	add	r3, r2
 800b4ba:	4ab6      	ldr	r2, [pc, #728]	; (800b794 <httpPOST+0x3fc>)
 800b4bc:	461d      	mov	r5, r3
 800b4be:	4614      	mov	r4, r2
 800b4c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4c2:	6028      	str	r0, [r5, #0]
 800b4c4:	6069      	str	r1, [r5, #4]
 800b4c6:	60aa      	str	r2, [r5, #8]
 800b4c8:	60eb      	str	r3, [r5, #12]
 800b4ca:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b4cc:	6128      	str	r0, [r5, #16]
 800b4ce:	6169      	str	r1, [r5, #20]
 800b4d0:	61aa      	str	r2, [r5, #24]
 800b4d2:	8823      	ldrh	r3, [r4, #0]
 800b4d4:	78a2      	ldrb	r2, [r4, #2]
 800b4d6:	83ab      	strh	r3, [r5, #28]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b4dc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4e0:	f7f4 fe88 	bl	80001f4 <strlen>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4ec:	4413      	add	r3, r2
 800b4ee:	4aa6      	ldr	r2, [pc, #664]	; (800b788 <httpPOST+0x3f0>)
 800b4f0:	8811      	ldrh	r1, [r2, #0]
 800b4f2:	7892      	ldrb	r2, [r2, #2]
 800b4f4:	8019      	strh	r1, [r3, #0]
 800b4f6:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b4f8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4fc:	f7f4 fe7a 	bl	80001f4 <strlen>
 800b500:	4603      	mov	r3, r0
 800b502:	461a      	mov	r2, r3
 800b504:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b508:	4413      	add	r3, r2
 800b50a:	4aa3      	ldr	r2, [pc, #652]	; (800b798 <httpPOST+0x400>)
 800b50c:	461c      	mov	r4, r3
 800b50e:	4615      	mov	r5, r2
 800b510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b512:	6020      	str	r0, [r4, #0]
 800b514:	6061      	str	r1, [r4, #4]
 800b516:	60a2      	str	r2, [r4, #8]
 800b518:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b51a:	2300      	movs	r3, #0
 800b51c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800b520:	887b      	ldrh	r3, [r7, #2]
 800b522:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b526:	4611      	mov	r1, r2
 800b528:	4618      	mov	r0, r3
 800b52a:	f002 fdb7 	bl	800e09c <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800b52e:	2300      	movs	r3, #0
 800b530:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800b534:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800b538:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800b53c:	4611      	mov	r1, r2
 800b53e:	4618      	mov	r0, r3
 800b540:	f002 fdac 	bl	800e09c <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800b544:	2300      	movs	r3, #0
 800b546:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800b54a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b54e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b552:	4611      	mov	r1, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f002 fda1 	bl	800e09c <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800b55a:	2300      	movs	r3, #0
 800b55c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800b560:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800b564:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b568:	4611      	mov	r1, r2
 800b56a:	4618      	mov	r0, r3
 800b56c:	f002 fd96 	bl	800e09c <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800b570:	2300      	movs	r3, #0
 800b572:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800b576:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800b57a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b57e:	4611      	mov	r1, r2
 800b580:	4618      	mov	r0, r3
 800b582:	f002 fd8b 	bl	800e09c <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800b586:	2300      	movs	r3, #0
 800b588:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800b58c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800b590:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b594:	4611      	mov	r1, r2
 800b596:	4618      	mov	r0, r3
 800b598:	f002 fd80 	bl	800e09c <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800b59c:	2300      	movs	r3, #0
 800b59e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800b5a2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800b5a6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f002 fd75 	bl	800e09c <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800b5b8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800b5bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f002 fd6a 	bl	800e09c <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800b5ce:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800b5d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f002 fd5f 	bl	800e09c <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800b5e4:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800b5e8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f002 fd54 	bl	800e09c <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800b5fa:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800b5fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b602:	4611      	mov	r1, r2
 800b604:	4618      	mov	r0, r3
 800b606:	f002 fd49 	bl	800e09c <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800b60a:	2300      	movs	r3, #0
 800b60c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800b610:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800b614:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b618:	4611      	mov	r1, r2
 800b61a:	4618      	mov	r0, r3
 800b61c:	f002 fd3e 	bl	800e09c <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800b620:	2300      	movs	r3, #0
 800b622:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800b626:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800b62a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b62e:	4611      	mov	r1, r2
 800b630:	4618      	mov	r0, r3
 800b632:	f002 fd33 	bl	800e09c <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800b636:	2300      	movs	r3, #0
 800b638:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800b63c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800b640:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b644:	4611      	mov	r1, r2
 800b646:	4618      	mov	r0, r3
 800b648:	f002 fd28 	bl	800e09c <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800b64c:	2300      	movs	r3, #0
 800b64e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800b652:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800b656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b65a:	4611      	mov	r1, r2
 800b65c:	4618      	mov	r0, r3
 800b65e:	f002 fd1d 	bl	800e09c <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800b662:	2300      	movs	r3, #0
 800b664:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800b668:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800b66c:	f107 0220 	add.w	r2, r7, #32
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f002 fd12 	bl	800e09c <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800b678:	2300      	movs	r3, #0
 800b67a:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b67c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800b680:	f107 0218 	add.w	r2, r7, #24
 800b684:	4611      	mov	r1, r2
 800b686:	4618      	mov	r0, r3
 800b688:	f002 fd08 	bl	800e09c <INTOA>

	strncat(body,dd1,strlen(dd1));
 800b68c:	4843      	ldr	r0, [pc, #268]	; (800b79c <httpPOST+0x404>)
 800b68e:	f7f4 fdb1 	bl	80001f4 <strlen>
 800b692:	4603      	mov	r3, r0
 800b694:	461a      	mov	r2, r3
 800b696:	4941      	ldr	r1, [pc, #260]	; (800b79c <httpPOST+0x404>)
 800b698:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b69c:	f002 ff29 	bl	800e4f2 <strncat>
	strncat(body,_d1,strlen(_d1));
 800b6a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7f4 fda5 	bl	80001f4 <strlen>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6b6:	f002 ff1c 	bl	800e4f2 <strncat>

	strncat(body,dd2,strlen(dd2));
 800b6ba:	4839      	ldr	r0, [pc, #228]	; (800b7a0 <httpPOST+0x408>)
 800b6bc:	f7f4 fd9a 	bl	80001f4 <strlen>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4936      	ldr	r1, [pc, #216]	; (800b7a0 <httpPOST+0x408>)
 800b6c6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6ca:	f002 ff12 	bl	800e4f2 <strncat>
	strncat(body,_d2,strlen(_d2));
 800b6ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7f4 fd8e 	bl	80001f4 <strlen>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b6de:	4619      	mov	r1, r3
 800b6e0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6e4:	f002 ff05 	bl	800e4f2 <strncat>

	strncat(body,dd3,strlen(dd3));
 800b6e8:	482e      	ldr	r0, [pc, #184]	; (800b7a4 <httpPOST+0x40c>)
 800b6ea:	f7f4 fd83 	bl	80001f4 <strlen>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	492c      	ldr	r1, [pc, #176]	; (800b7a4 <httpPOST+0x40c>)
 800b6f4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6f8:	f002 fefb 	bl	800e4f2 <strncat>
	strncat(body,_d3,strlen(_d3));
 800b6fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b700:	4618      	mov	r0, r3
 800b702:	f7f4 fd77 	bl	80001f4 <strlen>
 800b706:	4602      	mov	r2, r0
 800b708:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b70c:	4619      	mov	r1, r3
 800b70e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b712:	f002 feee 	bl	800e4f2 <strncat>

	strncat(body,dd4,strlen(dd4));
 800b716:	4824      	ldr	r0, [pc, #144]	; (800b7a8 <httpPOST+0x410>)
 800b718:	f7f4 fd6c 	bl	80001f4 <strlen>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	4921      	ldr	r1, [pc, #132]	; (800b7a8 <httpPOST+0x410>)
 800b722:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b726:	f002 fee4 	bl	800e4f2 <strncat>
	strncat(body,_d4,strlen(_d4));
 800b72a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b72e:	4618      	mov	r0, r3
 800b730:	f7f4 fd60 	bl	80001f4 <strlen>
 800b734:	4602      	mov	r2, r0
 800b736:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b73a:	4619      	mov	r1, r3
 800b73c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b740:	f002 fed7 	bl	800e4f2 <strncat>

	strncat(body,dd5,strlen(dd5));
 800b744:	4819      	ldr	r0, [pc, #100]	; (800b7ac <httpPOST+0x414>)
 800b746:	f7f4 fd55 	bl	80001f4 <strlen>
 800b74a:	4603      	mov	r3, r0
 800b74c:	461a      	mov	r2, r3
 800b74e:	4917      	ldr	r1, [pc, #92]	; (800b7ac <httpPOST+0x414>)
 800b750:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b754:	f002 fecd 	bl	800e4f2 <strncat>
	strncat(body,_d5,strlen(_d5));
 800b758:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7f4 fd49 	bl	80001f4 <strlen>
 800b762:	4602      	mov	r2, r0
 800b764:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b768:	4619      	mov	r1, r3
 800b76a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b76e:	f002 fec0 	bl	800e4f2 <strncat>

	strncat(body,dd6,strlen(dd6));
 800b772:	480f      	ldr	r0, [pc, #60]	; (800b7b0 <httpPOST+0x418>)
 800b774:	f7f4 fd3e 	bl	80001f4 <strlen>
 800b778:	4603      	mov	r3, r0
 800b77a:	461a      	mov	r2, r3
 800b77c:	e01a      	b.n	800b7b4 <httpPOST+0x41c>
 800b77e:	bf00      	nop
 800b780:	0800fb0c 	.word	0x0800fb0c
 800b784:	0800fb14 	.word	0x0800fb14
 800b788:	0800fb20 	.word	0x0800fb20
 800b78c:	0800fb24 	.word	0x0800fb24
 800b790:	0800fb2c 	.word	0x0800fb2c
 800b794:	0800fb30 	.word	0x0800fb30
 800b798:	0800fb50 	.word	0x0800fb50
 800b79c:	20000090 	.word	0x20000090
 800b7a0:	20000098 	.word	0x20000098
 800b7a4:	200000a0 	.word	0x200000a0
 800b7a8:	200000a8 	.word	0x200000a8
 800b7ac:	200000b0 	.word	0x200000b0
 800b7b0:	200000b8 	.word	0x200000b8
 800b7b4:	49af      	ldr	r1, [pc, #700]	; (800ba74 <httpPOST+0x6dc>)
 800b7b6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7ba:	f002 fe9a 	bl	800e4f2 <strncat>
	strncat(body,_d6,strlen(_d6));
 800b7be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7f4 fd16 	bl	80001f4 <strlen>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7d4:	f002 fe8d 	bl	800e4f2 <strncat>

	strncat(body,dd7,strlen(dd7));
 800b7d8:	48a7      	ldr	r0, [pc, #668]	; (800ba78 <httpPOST+0x6e0>)
 800b7da:	f7f4 fd0b 	bl	80001f4 <strlen>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	49a5      	ldr	r1, [pc, #660]	; (800ba78 <httpPOST+0x6e0>)
 800b7e4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7e8:	f002 fe83 	bl	800e4f2 <strncat>
	strncat(body,_d7,strlen(_d7));
 800b7ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7f4 fcff 	bl	80001f4 <strlen>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b802:	f002 fe76 	bl	800e4f2 <strncat>

	strncat(body,dd8,strlen(dd8));
 800b806:	489d      	ldr	r0, [pc, #628]	; (800ba7c <httpPOST+0x6e4>)
 800b808:	f7f4 fcf4 	bl	80001f4 <strlen>
 800b80c:	4603      	mov	r3, r0
 800b80e:	461a      	mov	r2, r3
 800b810:	499a      	ldr	r1, [pc, #616]	; (800ba7c <httpPOST+0x6e4>)
 800b812:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b816:	f002 fe6c 	bl	800e4f2 <strncat>
	strncat(body,_d8,strlen(_d8));
 800b81a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b81e:	4618      	mov	r0, r3
 800b820:	f7f4 fce8 	bl	80001f4 <strlen>
 800b824:	4602      	mov	r2, r0
 800b826:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b82a:	4619      	mov	r1, r3
 800b82c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b830:	f002 fe5f 	bl	800e4f2 <strncat>

	strncat(body,dd9,strlen(dd9));
 800b834:	4892      	ldr	r0, [pc, #584]	; (800ba80 <httpPOST+0x6e8>)
 800b836:	f7f4 fcdd 	bl	80001f4 <strlen>
 800b83a:	4603      	mov	r3, r0
 800b83c:	461a      	mov	r2, r3
 800b83e:	4990      	ldr	r1, [pc, #576]	; (800ba80 <httpPOST+0x6e8>)
 800b840:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b844:	f002 fe55 	bl	800e4f2 <strncat>
	strncat(body,_d9,strlen(_d9));
 800b848:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7f4 fcd1 	bl	80001f4 <strlen>
 800b852:	4602      	mov	r2, r0
 800b854:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b858:	4619      	mov	r1, r3
 800b85a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b85e:	f002 fe48 	bl	800e4f2 <strncat>

	strncat(body,dd10,strlen(dd10));
 800b862:	4888      	ldr	r0, [pc, #544]	; (800ba84 <httpPOST+0x6ec>)
 800b864:	f7f4 fcc6 	bl	80001f4 <strlen>
 800b868:	4603      	mov	r3, r0
 800b86a:	461a      	mov	r2, r3
 800b86c:	4985      	ldr	r1, [pc, #532]	; (800ba84 <httpPOST+0x6ec>)
 800b86e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b872:	f002 fe3e 	bl	800e4f2 <strncat>
	strncat(body,_d10,strlen(_d10));
 800b876:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7f4 fcba 	bl	80001f4 <strlen>
 800b880:	4602      	mov	r2, r0
 800b882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b886:	4619      	mov	r1, r3
 800b888:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b88c:	f002 fe31 	bl	800e4f2 <strncat>

	strncat(body,dd11,strlen(dd11));
 800b890:	487d      	ldr	r0, [pc, #500]	; (800ba88 <httpPOST+0x6f0>)
 800b892:	f7f4 fcaf 	bl	80001f4 <strlen>
 800b896:	4603      	mov	r3, r0
 800b898:	461a      	mov	r2, r3
 800b89a:	497b      	ldr	r1, [pc, #492]	; (800ba88 <httpPOST+0x6f0>)
 800b89c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8a0:	f002 fe27 	bl	800e4f2 <strncat>
	strncat(body,_d11,strlen(_d11));
 800b8a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7f4 fca3 	bl	80001f4 <strlen>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8ba:	f002 fe1a 	bl	800e4f2 <strncat>

	strncat(body,dd12,strlen(dd12));
 800b8be:	4873      	ldr	r0, [pc, #460]	; (800ba8c <httpPOST+0x6f4>)
 800b8c0:	f7f4 fc98 	bl	80001f4 <strlen>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	4970      	ldr	r1, [pc, #448]	; (800ba8c <httpPOST+0x6f4>)
 800b8ca:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8ce:	f002 fe10 	bl	800e4f2 <strncat>
	strncat(body,_d12,strlen(_d12));
 800b8d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f4 fc8c 	bl	80001f4 <strlen>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8e8:	f002 fe03 	bl	800e4f2 <strncat>

	strncat(body,dd13,strlen(dd13));
 800b8ec:	4868      	ldr	r0, [pc, #416]	; (800ba90 <httpPOST+0x6f8>)
 800b8ee:	f7f4 fc81 	bl	80001f4 <strlen>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	4966      	ldr	r1, [pc, #408]	; (800ba90 <httpPOST+0x6f8>)
 800b8f8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8fc:	f002 fdf9 	bl	800e4f2 <strncat>
	strncat(body,_d13,strlen(_d13));
 800b900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b904:	4618      	mov	r0, r3
 800b906:	f7f4 fc75 	bl	80001f4 <strlen>
 800b90a:	4602      	mov	r2, r0
 800b90c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b910:	4619      	mov	r1, r3
 800b912:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b916:	f002 fdec 	bl	800e4f2 <strncat>

	strncat(body,dd14,strlen(dd14));
 800b91a:	485e      	ldr	r0, [pc, #376]	; (800ba94 <httpPOST+0x6fc>)
 800b91c:	f7f4 fc6a 	bl	80001f4 <strlen>
 800b920:	4603      	mov	r3, r0
 800b922:	461a      	mov	r2, r3
 800b924:	495b      	ldr	r1, [pc, #364]	; (800ba94 <httpPOST+0x6fc>)
 800b926:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b92a:	f002 fde2 	bl	800e4f2 <strncat>
	strncat(body,_d14,strlen(_d14));
 800b92e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b932:	4618      	mov	r0, r3
 800b934:	f7f4 fc5e 	bl	80001f4 <strlen>
 800b938:	4602      	mov	r2, r0
 800b93a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b93e:	4619      	mov	r1, r3
 800b940:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b944:	f002 fdd5 	bl	800e4f2 <strncat>

	strncat(body,dd15,strlen(dd15));
 800b948:	4853      	ldr	r0, [pc, #332]	; (800ba98 <httpPOST+0x700>)
 800b94a:	f7f4 fc53 	bl	80001f4 <strlen>
 800b94e:	4603      	mov	r3, r0
 800b950:	461a      	mov	r2, r3
 800b952:	4951      	ldr	r1, [pc, #324]	; (800ba98 <httpPOST+0x700>)
 800b954:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b958:	f002 fdcb 	bl	800e4f2 <strncat>
	strncat(body,_d15,strlen(_d15));
 800b95c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b960:	4618      	mov	r0, r3
 800b962:	f7f4 fc47 	bl	80001f4 <strlen>
 800b966:	4602      	mov	r2, r0
 800b968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b96c:	4619      	mov	r1, r3
 800b96e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b972:	f002 fdbe 	bl	800e4f2 <strncat>

	strncat(body,dd16,strlen(dd16));
 800b976:	4849      	ldr	r0, [pc, #292]	; (800ba9c <httpPOST+0x704>)
 800b978:	f7f4 fc3c 	bl	80001f4 <strlen>
 800b97c:	4603      	mov	r3, r0
 800b97e:	461a      	mov	r2, r3
 800b980:	4946      	ldr	r1, [pc, #280]	; (800ba9c <httpPOST+0x704>)
 800b982:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b986:	f002 fdb4 	bl	800e4f2 <strncat>
	strncat(body,_d16,strlen(_d16));
 800b98a:	f107 0320 	add.w	r3, r7, #32
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f4 fc30 	bl	80001f4 <strlen>
 800b994:	4602      	mov	r2, r0
 800b996:	f107 0320 	add.w	r3, r7, #32
 800b99a:	4619      	mov	r1, r3
 800b99c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9a0:	f002 fda7 	bl	800e4f2 <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800b9a4:	483e      	ldr	r0, [pc, #248]	; (800baa0 <httpPOST+0x708>)
 800b9a6:	f7f4 fc25 	bl	80001f4 <strlen>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	493c      	ldr	r1, [pc, #240]	; (800baa0 <httpPOST+0x708>)
 800b9b0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9b4:	f002 fd9d 	bl	800e4f2 <strncat>
	strncat(body,_devId,strlen(_devId));
 800b9b8:	f107 0318 	add.w	r3, r7, #24
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7f4 fc19 	bl	80001f4 <strlen>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	f107 0318 	add.w	r3, r7, #24
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9ce:	f002 fd90 	bl	800e4f2 <strncat>

	strncat(body,"}",strlen("}"));
 800b9d2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9d6:	f7f4 fc0d 	bl	80001f4 <strlen>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9e2:	4413      	add	r3, r2
 800b9e4:	492f      	ldr	r1, [pc, #188]	; (800baa4 <httpPOST+0x70c>)
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	881b      	ldrh	r3, [r3, #0]
 800b9ec:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b9ee:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9f2:	f7f4 fbff 	bl	80001f4 <strlen>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	f107 0310 	add.w	r3, r7, #16
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4610      	mov	r0, r2
 800ba00:	f002 fb4c 	bl	800e09c <INTOA>
	strncat(post,length,strlen(length));
 800ba04:	f107 0310 	add.w	r3, r7, #16
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f4 fbf3 	bl	80001f4 <strlen>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	f107 0310 	add.w	r3, r7, #16
 800ba14:	4619      	mov	r1, r3
 800ba16:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba1a:	f002 fd6a 	bl	800e4f2 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800ba1e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba22:	f7f4 fbe7 	bl	80001f4 <strlen>
 800ba26:	4603      	mov	r3, r0
 800ba28:	461a      	mov	r2, r3
 800ba2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba2e:	4413      	add	r3, r2
 800ba30:	4a1d      	ldr	r2, [pc, #116]	; (800baa8 <httpPOST+0x710>)
 800ba32:	6810      	ldr	r0, [r2, #0]
 800ba34:	6018      	str	r0, [r3, #0]
 800ba36:	7912      	ldrb	r2, [r2, #4]
 800ba38:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800ba3a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba3e:	f7f4 fbd9 	bl	80001f4 <strlen>
 800ba42:	4602      	mov	r2, r0
 800ba44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d20d      	bcs.n	800ba68 <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800ba4c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba50:	f7f4 fbd0 	bl	80001f4 <strlen>
 800ba54:	4603      	mov	r3, r0
 800ba56:	461a      	mov	r2, r3
 800ba58:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800ba5c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba60:	f002 fd47 	bl	800e4f2 <strncat>
		return 1 ;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e000      	b.n	800ba6a <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800ba68:	2300      	movs	r3, #0
		}
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	37a0      	adds	r7, #160	; 0xa0
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bdb0      	pop	{r4, r5, r7, pc}
 800ba72:	bf00      	nop
 800ba74:	200000b8 	.word	0x200000b8
 800ba78:	200000c0 	.word	0x200000c0
 800ba7c:	200000c8 	.word	0x200000c8
 800ba80:	200000d0 	.word	0x200000d0
 800ba84:	200000d8 	.word	0x200000d8
 800ba88:	200000e0 	.word	0x200000e0
 800ba8c:	200000e8 	.word	0x200000e8
 800ba90:	200000f0 	.word	0x200000f0
 800ba94:	200000f8 	.word	0x200000f8
 800ba98:	20000100 	.word	0x20000100
 800ba9c:	20000108 	.word	0x20000108
 800baa0:	20000110 	.word	0x20000110
 800baa4:	0800fb60 	.word	0x0800fb60
 800baa8:	0800fb64 	.word	0x0800fb64

0800baac <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bac6:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2220      	movs	r2, #32
 800bad2:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a1c      	ldr	r2, [pc, #112]	; (800bb4c <ModBUS_Config+0xa0>)
 800bada:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2201      	movs	r2, #1
 800bae2:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2220      	movs	r2, #32
 800bae8:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a18      	ldr	r2, [pc, #96]	; (800bb50 <ModBUS_Config+0xa4>)
 800baf0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2210      	movs	r2, #16
 800bafe:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2210      	movs	r2, #16
 800bb0c:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2220      	movs	r2, #32
 800bb1a:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2201      	movs	r2, #1
 800bb22:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2220      	movs	r2, #32
 800bb2e:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2220      	movs	r2, #32
 800bb3c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr
 800bb4c:	f0f0af5a 	.word	0xf0f0af5a
 800bb50:	a5fa0f0f 	.word	0xa5fa0f0f

0800bb54 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3305      	adds	r3, #5
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	3306      	adds	r3, #6
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d10b      	bne.n	800bb84 <ModBUS_Check+0x30>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	3302      	adds	r3, #2
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	461a      	mov	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	3303      	adds	r3, #3
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <ModBUS_Check+0x30>
	{
		return(1);
 800bb80:	2301      	movs	r3, #1
 800bb82:	e000      	b.n	800bb86 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800bb84:	2300      	movs	r3, #0
	}
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	370c      	adds	r7, #12
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr

0800bb92 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800bb92:	b480      	push	{r7}
 800bb94:	b083      	sub	sp, #12
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7c9b      	ldrb	r3, [r3, #18]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d11d      	bne.n	800bbe4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d116      	bne.n	800bbe4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d10f      	bne.n	800bbe4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d108      	bne.n	800bbe4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d101      	bne.n	800bbe4 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e000      	b.n	800bbe6 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800bbe4:	2300      	movs	r3, #0
	}
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	70fb      	strb	r3, [r7, #3]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bc0c:	78fa      	ldrb	r2, [r7, #3]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d901      	bls.n	800bc16 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800bc12:	2301      	movs	r3, #1
 800bc14:	e013      	b.n	800bc3e <ModBUS_F03_Assign+0x4c>
	}
	else
	{
		m2->_Holding_Registers[(address)+1]=data;
 800bc16:	78fb      	ldrb	r3, [r7, #3]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	883a      	ldrh	r2, [r7, #0]
 800bc1c:	b2d1      	uxtb	r1, r2
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	4413      	add	r3, r2
 800bc22:	460a      	mov	r2, r1
 800bc24:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800bc28:	883b      	ldrh	r3, [r7, #0]
 800bc2a:	0a1b      	lsrs	r3, r3, #8
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	4413      	add	r3, r2
 800bc36:	7bfa      	ldrb	r2, [r7, #15]
 800bc38:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800bc3c:	2300      	movs	r3, #0
	}
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b085      	sub	sp, #20
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	460b      	mov	r3, r1
 800bc54:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bc64:	78fa      	ldrb	r2, [r7, #3]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d901      	bls.n	800bc6e <ModBUS_F03_Read+0x24>
	{
		return(1);
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e015      	b.n	800bc9a <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(address*2)];
 800bc6e:	78fb      	ldrb	r3, [r7, #3]
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	4413      	add	r3, r2
 800bc76:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bc7a:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800bc7c:	89fb      	ldrh	r3, [r7, #14]
 800bc7e:	021b      	lsls	r3, r3, #8
 800bc80:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address*2)+1];
 800bc82:	78fb      	ldrb	r3, [r7, #3]
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	3301      	adds	r3, #1
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	89fb      	ldrh	r3, [r7, #14]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	81fb      	strh	r3, [r7, #14]
		return(n);
 800bc98:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	807b      	strh	r3, [r7, #2]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800bcb6:	887b      	ldrh	r3, [r7, #2]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bf14      	ite	ne
 800bcbc:	2301      	movne	r3, #1
 800bcbe:	2300      	moveq	r3, #0
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800bcca:	887b      	ldrh	r3, [r7, #2]
 800bccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcd0:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800bcd2:	887b      	ldrh	r3, [r7, #2]
 800bcd4:	0a1b      	lsrs	r3, r3, #8
 800bcd6:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800bcd8:	887b      	ldrh	r3, [r7, #2]
 800bcda:	f003 030f 	and.w	r3, r3, #15
 800bcde:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2206      	movs	r2, #6
 800bd0c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2203      	movs	r2, #3
 800bd1e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800bd22:	887b      	ldrh	r3, [r7, #2]
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	787a      	ldrb	r2, [r7, #1]
 800bd38:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	220c      	movs	r2, #12
 800bd40:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800bd44:	bf00      	nop
 800bd46:	4618      	mov	r0, r3
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
	...

0800bd54 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b09c      	sub	sp, #112	; 0x70
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	791b      	ldrb	r3, [r3, #4]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	f041 813f 	bne.w	800cfe4 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f103 0212 	add.w	r2, r3, #18
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd72:	4619      	mov	r1, r3
 800bd74:	4610      	mov	r0, r2
 800bd76:	f7ff feed 	bl	800bb54 <ModBUS_Check>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f001 812f 	beq.w	800cfe0 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	7e5b      	ldrb	r3, [r3, #25]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	2b0f      	cmp	r3, #15
 800bd8a:	f201 80f3 	bhi.w	800cf74 <ModBUS+0x1220>
 800bd8e:	a201      	add	r2, pc, #4	; (adr r2, 800bd94 <ModBUS+0x40>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800bdd5 	.word	0x0800bdd5
 800bd98:	0800c015 	.word	0x0800c015
 800bd9c:	0800c255 	.word	0x0800c255
 800bda0:	0800c48d 	.word	0x0800c48d
 800bda4:	0800c6c5 	.word	0x0800c6c5
 800bda8:	0800c8db 	.word	0x0800c8db
 800bdac:	0800cf75 	.word	0x0800cf75
 800bdb0:	0800cf75 	.word	0x0800cf75
 800bdb4:	0800cf75 	.word	0x0800cf75
 800bdb8:	0800cf75 	.word	0x0800cf75
 800bdbc:	0800cf75 	.word	0x0800cf75
 800bdc0:	0800cf75 	.word	0x0800cf75
 800bdc4:	0800cf75 	.word	0x0800cf75
 800bdc8:	0800cf75 	.word	0x0800cf75
 800bdcc:	0800ca97 	.word	0x0800ca97
 800bdd0:	0800cd27 	.word	0x0800cd27

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	7d9a      	ldrb	r2, [r3, #22]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	7d5a      	ldrb	r2, [r3, #21]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	7d1a      	ldrb	r2, [r3, #20]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	7cda      	ldrb	r2, [r3, #19]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7c9a      	ldrb	r2, [r3, #18]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800be06:	2300      	movs	r3, #0
 800be08:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	7a9b      	ldrb	r3, [r3, #10]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	f040 80e6 	bne.w	800bfe0 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	7e9b      	ldrb	r3, [r3, #26]
 800be18:	b29a      	uxth	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800be26:	021b      	lsls	r3, r3, #8
 800be28:	b29a      	uxth	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800be36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	7edb      	ldrb	r3, [r3, #27]
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	4313      	orrs	r3, r2
 800be50:	b29a      	uxth	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	7f1b      	ldrb	r3, [r3, #28]
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be6a:	021b      	lsls	r3, r3, #8
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be7e:	b29a      	uxth	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	7f5b      	ldrb	r3, [r3, #29]
 800be90:	b29b      	uxth	r3, r3
 800be92:	4313      	orrs	r3, r2
 800be94:	b29a      	uxth	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	429a      	cmp	r2, r3
 800beac:	d87e      	bhi.n	800bfac <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800beb4:	461a      	mov	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bebc:	4413      	add	r3, r2
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800bec4:	4293      	cmp	r3, r2
 800bec6:	dc57      	bgt.n	800bf78 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bec8:	2300      	movs	r3, #0
 800beca:	613b      	str	r3, [r7, #16]
 800becc:	2300      	movs	r3, #0
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	2300      	movs	r3, #0
 800bed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bed4:	2300      	movs	r3, #0
 800bed6:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800bed8:	2300      	movs	r3, #0
 800beda:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800bee8:	40d3      	lsrs	r3, r2
 800beea:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bef2:	08db      	lsrs	r3, r3, #3
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d102      	bne.n	800bf10 <ModBUS+0x1bc>
									{
										bytes=div;
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf0e:	e002      	b.n	800bf16 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	3301      	adds	r3, #1
 800bf14:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800bf16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800bf20:	e00e      	b.n	800bf40 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bf22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf24:	3308      	adds	r3, #8
 800bf26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf28:	b2d1      	uxtb	r1, r2
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	460a      	mov	r2, r1
 800bf30:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800bf34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf36:	0a1b      	lsrs	r3, r3, #8
 800bf38:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800bf3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800bf40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dced      	bgt.n	800bf22 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bf5c:	3303      	adds	r3, #3
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bf6c:	1d9a      	adds	r2, r3, #6
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bf74:	f001 b8d4 	b.w	800d120 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2281      	movs	r2, #129	; 0x81
 800bf84:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2203      	movs	r2, #3
 800bf94:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bf9e:	1d9a      	adds	r2, r3, #6
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	f001 b8ba 	b.w	800d120 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2203      	movs	r2, #3
 800bfb0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2281      	movs	r2, #129	; 0x81
 800bfb8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2203      	movs	r2, #3
 800bfc8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bfd2:	1d9a      	adds	r2, r3, #6
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800bfda:	2303      	movs	r3, #3
 800bfdc:	f001 b8a0 	b.w	800d120 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2281      	movs	r2, #129	; 0x81
 800bfec:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2203      	movs	r2, #3
 800bffc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c006:	1d9a      	adds	r2, r3, #6
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c00e:	2301      	movs	r3, #1
 800c010:	f001 b886 	b.w	800d120 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	7d9a      	ldrb	r2, [r3, #22]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7d5a      	ldrb	r2, [r3, #21]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	7d1a      	ldrb	r2, [r3, #20]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	7cda      	ldrb	r2, [r3, #19]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	7c9a      	ldrb	r2, [r3, #18]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c046:	2300      	movs	r3, #0
 800c048:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	7adb      	ldrb	r3, [r3, #11]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	f040 80e6 	bne.w	800c220 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7e9b      	ldrb	r3, [r3, #26]
 800c058:	b29a      	uxth	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c066:	021b      	lsls	r3, r3, #8
 800c068:	b29a      	uxth	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7edb      	ldrb	r3, [r3, #27]
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	4313      	orrs	r3, r2
 800c090:	b29a      	uxth	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	7f1b      	ldrb	r3, [r3, #28]
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c0aa:	021b      	lsls	r3, r3, #8
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c0ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	7f5b      	ldrb	r3, [r3, #29]
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d87e      	bhi.n	800c1ec <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c0fc:	4413      	add	r3, r2
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800c104:	4293      	cmp	r3, r2
 800c106:	dc57      	bgt.n	800c1b8 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c108:	2300      	movs	r3, #0
 800c10a:	623b      	str	r3, [r7, #32]
 800c10c:	2300      	movs	r3, #0
 800c10e:	61fb      	str	r3, [r7, #28]
 800c110:	2300      	movs	r3, #0
 800c112:	667b      	str	r3, [r7, #100]	; 0x64
 800c114:	2300      	movs	r3, #0
 800c116:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800c118:	2300      	movs	r3, #0
 800c11a:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800c128:	40d3      	lsrs	r3, r2
 800c12a:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c132:	08db      	lsrs	r3, r3, #3
 800c134:	b29b      	uxth	r3, r3
 800c136:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c13e:	f003 0307 	and.w	r3, r3, #7
 800c142:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d102      	bne.n	800c150 <ModBUS+0x3fc>
									{
										bytes=div;
 800c14a:	6a3b      	ldr	r3, [r7, #32]
 800c14c:	667b      	str	r3, [r7, #100]	; 0x64
 800c14e:	e002      	b.n	800c156 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	3301      	adds	r3, #1
 800c154:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800c156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c160:	e00e      	b.n	800c180 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c164:	3308      	adds	r3, #8
 800c166:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c168:	b2d1      	uxtb	r1, r2
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	4413      	add	r3, r2
 800c16e:	460a      	mov	r2, r1
 800c170:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c176:	0a1b      	lsrs	r3, r3, #8
 800c178:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800c17a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c17c:	3b01      	subs	r3, #1
 800c17e:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800c180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c182:	2b00      	cmp	r3, #0
 800c184:	dced      	bgt.n	800c162 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2202      	movs	r2, #2
 800c18a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c19c:	3303      	adds	r3, #3
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c1ac:	1d9a      	adds	r2, r3, #6
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c1b4:	f000 bfb4 	b.w	800d120 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2282      	movs	r2, #130	; 0x82
 800c1c4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2203      	movs	r2, #3
 800c1d4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c1de:	1d9a      	adds	r2, r3, #6
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	f000 bf9a 	b.w	800d120 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2203      	movs	r2, #3
 800c1f0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2282      	movs	r2, #130	; 0x82
 800c1f8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2203      	movs	r2, #3
 800c208:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c212:	1d9a      	adds	r2, r3, #6
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c21a:	2303      	movs	r3, #3
 800c21c:	f000 bf80 	b.w	800d120 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2282      	movs	r2, #130	; 0x82
 800c22c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2203      	movs	r2, #3
 800c23c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c246:	1d9a      	adds	r2, r3, #6
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c24e:	2301      	movs	r3, #1
 800c250:	f000 bf66 	b.w	800d120 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	7d9a      	ldrb	r2, [r3, #22]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	7d5a      	ldrb	r2, [r3, #21]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	7d1a      	ldrb	r2, [r3, #20]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	7cda      	ldrb	r2, [r3, #19]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	7c9a      	ldrb	r2, [r3, #18]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c286:	2300      	movs	r3, #0
 800c288:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	7b1b      	ldrb	r3, [r3, #12]
 800c28e:	2b01      	cmp	r3, #1
 800c290:	f040 80e2 	bne.w	800c458 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	7e9b      	ldrb	r3, [r3, #26]
 800c298:	b29a      	uxth	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c2a6:	021b      	lsls	r3, r3, #8
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c2b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7edb      	ldrb	r3, [r3, #27]
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	7f1b      	ldrb	r3, [r3, #28]
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c2ea:	021b      	lsls	r3, r3, #8
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c2fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	7f5b      	ldrb	r3, [r3, #29]
 800c310:	b29b      	uxth	r3, r3
 800c312:	4313      	orrs	r3, r2
 800c314:	b29a      	uxth	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c328:	b29b      	uxth	r3, r3
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d87a      	bhi.n	800c424 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c334:	461a      	mov	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c33c:	4413      	add	r3, r2
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800c344:	4293      	cmp	r3, r2
 800c346:	dc53      	bgt.n	800c3f0 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c348:	e029      	b.n	800c39e <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c350:	461a      	mov	r2, r3
 800c352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c354:	4413      	add	r3, r2
 800c356:	005a      	lsls	r2, r3, #1
 800c358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	3309      	adds	r3, #9
 800c35e:	6879      	ldr	r1, [r7, #4]
 800c360:	440a      	add	r2, r1
 800c362:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	4413      	add	r3, r2
 800c36a:	460a      	mov	r2, r1
 800c36c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c376:	461a      	mov	r2, r3
 800c378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c37a:	4413      	add	r3, r2
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c382:	3305      	adds	r3, #5
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	6879      	ldr	r1, [r7, #4]
 800c388:	440a      	add	r2, r1
 800c38a:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	4413      	add	r3, r2
 800c392:	460a      	mov	r2, r1
 800c394:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c39a:	3301      	adds	r3, #1
 800c39c:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	dbce      	blt.n	800c34a <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	b2da      	uxtb	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2203      	movs	r2, #3
 800c3c2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c3d4:	3303      	adds	r3, #3
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c3e4:	1d9a      	adds	r2, r3, #6
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c3ec:	f000 be98 	b.w	800d120 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2283      	movs	r2, #131	; 0x83
 800c3fc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2203      	movs	r2, #3
 800c40c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c416:	1d9a      	adds	r2, r3, #6
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c41e:	2302      	movs	r3, #2
 800c420:	f000 be7e 	b.w	800d120 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2203      	movs	r2, #3
 800c428:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2283      	movs	r2, #131	; 0x83
 800c430:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2203      	movs	r2, #3
 800c440:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c44a:	1d9a      	adds	r2, r3, #6
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c452:	2303      	movs	r3, #3
 800c454:	f000 be64 	b.w	800d120 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2283      	movs	r2, #131	; 0x83
 800c464:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2203      	movs	r2, #3
 800c474:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c47e:	1d9a      	adds	r2, r3, #6
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c486:	2301      	movs	r3, #1
 800c488:	f000 be4a 	b.w	800d120 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	7d9a      	ldrb	r2, [r3, #22]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	7d5a      	ldrb	r2, [r3, #21]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	7d1a      	ldrb	r2, [r3, #20]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	7cda      	ldrb	r2, [r3, #19]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	7c9a      	ldrb	r2, [r3, #18]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	7b5b      	ldrb	r3, [r3, #13]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	f040 80e2 	bne.w	800c690 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7e9b      	ldrb	r3, [r3, #26]
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c4de:	021b      	lsls	r3, r3, #8
 800c4e0:	b29a      	uxth	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c4ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	7edb      	ldrb	r3, [r3, #27]
 800c504:	b29b      	uxth	r3, r3
 800c506:	4313      	orrs	r3, r2
 800c508:	b29a      	uxth	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	7f1b      	ldrb	r3, [r3, #28]
 800c514:	b29a      	uxth	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c522:	021b      	lsls	r3, r3, #8
 800c524:	b29a      	uxth	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c532:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c536:	b29a      	uxth	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7f5b      	ldrb	r3, [r3, #29]
 800c548:	b29b      	uxth	r3, r3
 800c54a:	4313      	orrs	r3, r2
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800c560:	b29b      	uxth	r3, r3
 800c562:	429a      	cmp	r2, r3
 800c564:	d87a      	bhi.n	800c65c <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c56c:	461a      	mov	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c574:	4413      	add	r3, r2
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800c57c:	4293      	cmp	r3, r2
 800c57e:	dc53      	bgt.n	800c628 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c580:	e029      	b.n	800c5d6 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c588:	461a      	mov	r2, r3
 800c58a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c58c:	4413      	add	r3, r2
 800c58e:	005a      	lsls	r2, r3, #1
 800c590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	3309      	adds	r3, #9
 800c596:	6879      	ldr	r1, [r7, #4]
 800c598:	440a      	add	r2, r1
 800c59a:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	460a      	mov	r2, r1
 800c5a4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5b2:	4413      	add	r3, r2
 800c5b4:	005b      	lsls	r3, r3, #1
 800c5b6:	1c5a      	adds	r2, r3, #1
 800c5b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5ba:	3305      	adds	r3, #5
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	6879      	ldr	r1, [r7, #4]
 800c5c0:	440a      	add	r2, r1
 800c5c2:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	460a      	mov	r2, r1
 800c5cc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c5d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	dbce      	blt.n	800c582 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	b2da      	uxtb	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2204      	movs	r2, #4
 800c5fa:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2201      	movs	r2, #1
 800c602:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c60c:	3303      	adds	r3, #3
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c61c:	1d9a      	adds	r2, r3, #6
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c624:	f000 bd7c 	b.w	800d120 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2202      	movs	r2, #2
 800c62c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2284      	movs	r2, #132	; 0x84
 800c634:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2203      	movs	r2, #3
 800c644:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c64e:	1d9a      	adds	r2, r3, #6
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c656:	2302      	movs	r3, #2
 800c658:	f000 bd62 	b.w	800d120 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2203      	movs	r2, #3
 800c660:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2284      	movs	r2, #132	; 0x84
 800c668:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2203      	movs	r2, #3
 800c678:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c682:	1d9a      	adds	r2, r3, #6
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c68a:	2303      	movs	r3, #3
 800c68c:	f000 bd48 	b.w	800d120 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2284      	movs	r2, #132	; 0x84
 800c69c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2203      	movs	r2, #3
 800c6ac:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c6b6:	1d9a      	adds	r2, r3, #6
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c6be:	2301      	movs	r3, #1
 800c6c0:	f000 bd2e 	b.w	800d120 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	7d9a      	ldrb	r2, [r3, #22]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	7d5a      	ldrb	r2, [r3, #21]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	7d1a      	ldrb	r2, [r3, #20]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	7cda      	ldrb	r2, [r3, #19]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	7c9a      	ldrb	r2, [r3, #18]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	7b9b      	ldrb	r3, [r3, #14]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	f040 80d1 	bne.w	800c8a6 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	7e9b      	ldrb	r3, [r3, #26]
 800c708:	b29a      	uxth	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c716:	021b      	lsls	r3, r3, #8
 800c718:	b29a      	uxth	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7edb      	ldrb	r3, [r3, #27]
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	4313      	orrs	r3, r2
 800c740:	b29a      	uxth	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	7f1b      	ldrb	r3, [r3, #28]
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c75a:	021b      	lsls	r3, r3, #8
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c76a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c76e:	b29a      	uxth	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7f5b      	ldrb	r3, [r3, #29]
 800c780:	b29b      	uxth	r3, r3
 800c782:	4313      	orrs	r3, r2
 800c784:	b29a      	uxth	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800c792:	461a      	mov	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c79a:	429a      	cmp	r2, r3
 800c79c:	dd69      	ble.n	800c872 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d005      	beq.n	800c7b4 <ModBUS+0xa60>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7ae:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c7b2:	d144      	bne.n	800c83e <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7ba:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c7be:	d10d      	bne.n	800c7dc <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	408a      	lsls	r2, r1
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800c7da:	e003      	b.n	800c7e4 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	7f5a      	ldrb	r2, [r3, #29]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	7f1a      	ldrb	r2, [r3, #28]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	7eda      	ldrb	r2, [r3, #27]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	7e9a      	ldrb	r2, [r3, #26]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2205      	movs	r2, #5
 800c810:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c822:	3306      	adds	r3, #6
 800c824:	b2da      	uxtb	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c832:	1d9a      	adds	r2, r3, #6
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c83a:	f000 bc71 	b.w	800d120 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2202      	movs	r2, #2
 800c842:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2285      	movs	r2, #133	; 0x85
 800c84a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2203      	movs	r2, #3
 800c85a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c864:	1d9a      	adds	r2, r3, #6
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800c86c:	2302      	movs	r3, #2
 800c86e:	f000 bc57 	b.w	800d120 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2203      	movs	r2, #3
 800c876:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2285      	movs	r2, #133	; 0x85
 800c87e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2203      	movs	r2, #3
 800c88e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c898:	1d9a      	adds	r2, r3, #6
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	f000 bc3d 	b.w	800d120 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2285      	movs	r2, #133	; 0x85
 800c8b2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2203      	movs	r2, #3
 800c8c2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c8cc:	1d9a      	adds	r2, r3, #6
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	f000 bc23 	b.w	800d120 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	7d9a      	ldrb	r2, [r3, #22]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	7d5a      	ldrb	r2, [r3, #21]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	7d1a      	ldrb	r2, [r3, #20]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	7cda      	ldrb	r2, [r3, #19]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	7c9a      	ldrb	r2, [r3, #18]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c910:	2300      	movs	r3, #0
 800c912:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7bdb      	ldrb	r3, [r3, #15]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	f040 80a3 	bne.w	800ca64 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	7e9b      	ldrb	r3, [r3, #26]
 800c922:	b29a      	uxth	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c930:	021b      	lsls	r3, r3, #8
 800c932:	b29a      	uxth	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c940:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c944:	b29a      	uxth	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7edb      	ldrb	r3, [r3, #27]
 800c956:	b29b      	uxth	r3, r3
 800c958:	4313      	orrs	r3, r2
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c968:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	7f1b      	ldrb	r3, [r3, #28]
 800c96e:	b29a      	uxth	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c97c:	021b      	lsls	r3, r3, #8
 800c97e:	b29a      	uxth	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c98c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c990:	b29a      	uxth	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	7f5b      	ldrb	r3, [r3, #29]
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d838      	bhi.n	800ca32 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c9c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	7f11      	ldrb	r1, [r2, #28]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	460a      	mov	r2, r1
 800c9cc:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c9d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	7f51      	ldrb	r1, [r2, #29]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	4413      	add	r3, r2
 800c9dc:	460a      	mov	r2, r1
 800c9de:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	7f5a      	ldrb	r2, [r3, #29]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	7f1a      	ldrb	r2, [r3, #28]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	7eda      	ldrb	r2, [r3, #27]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	7e9a      	ldrb	r2, [r3, #26]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2206      	movs	r2, #6
 800ca0e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2206      	movs	r2, #6
 800ca1e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca28:	1d9a      	adds	r2, r3, #6
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ca30:	e376      	b.n	800d120 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2202      	movs	r2, #2
 800ca36:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2286      	movs	r2, #134	; 0x86
 800ca3e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2201      	movs	r2, #1
 800ca46:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2203      	movs	r2, #3
 800ca4e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca58:	1d9a      	adds	r2, r3, #6
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ca60:	2302      	movs	r3, #2
 800ca62:	e35d      	b.n	800d120 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2201      	movs	r2, #1
 800ca68:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2286      	movs	r2, #134	; 0x86
 800ca70:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2203      	movs	r2, #3
 800ca80:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca8a:	1d9a      	adds	r2, r3, #6
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800ca92:	2301      	movs	r3, #1
 800ca94:	e344      	b.n	800d120 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	7d9a      	ldrb	r2, [r3, #22]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	7d5a      	ldrb	r2, [r3, #21]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	7d1a      	ldrb	r2, [r3, #20]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	7cda      	ldrb	r2, [r3, #19]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	7c9a      	ldrb	r2, [r3, #18]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cac8:	2300      	movs	r3, #0
 800caca:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	7c1b      	ldrb	r3, [r3, #16]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	f040 810f 	bne.w	800ccf4 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	7e9b      	ldrb	r3, [r3, #26]
 800cada:	b29a      	uxth	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cae8:	021b      	lsls	r3, r3, #8
 800caea:	b29a      	uxth	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800caf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7edb      	ldrb	r3, [r3, #27]
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	4313      	orrs	r3, r2
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	7f1b      	ldrb	r3, [r3, #28]
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb2c:	021b      	lsls	r3, r3, #8
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7f5b      	ldrb	r3, [r3, #29]
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	4313      	orrs	r3, r2
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	f200 80a8 	bhi.w	800ccc2 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb78:	461a      	mov	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb80:	4413      	add	r3, r2
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	f300 8081 	bgt.w	800cc90 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	657b      	str	r3, [r7, #84]	; 0x54
 800cb92:	2300      	movs	r3, #0
 800cb94:	653b      	str	r3, [r7, #80]	; 0x50
 800cb96:	2300      	movs	r3, #0
 800cb98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	7f9b      	ldrb	r3, [r3, #30]
 800cba2:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800cba4:	e00e      	b.n	800cbc4 <ModBUS+0xe70>
									{
										data=data<<8;
 800cba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cba8:	021b      	lsls	r3, r3, #8
 800cbaa:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800cbac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbae:	330c      	adds	r3, #12
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	7c9b      	ldrb	r3, [r3, #18]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800cbbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800cbc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1ed      	bne.n	800cba6 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbd4:	4093      	lsls	r3, r2
 800cbd6:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cbd8:	e00f      	b.n	800cbfa <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbe4:	4413      	add	r3, r2
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbec:	461a      	mov	r2, r3
 800cbee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800cbf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cc00:	461a      	mov	r2, r3
 800cc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d3e8      	bcc.n	800cbda <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800cc08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc0a:	43db      	mvns	r3, r3
 800cc0c:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cc14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc16:	401a      	ands	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800cc1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc20:	43db      	mvns	r3, r3
 800cc22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc24:	4013      	ands	r3, r2
 800cc26:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cc2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc30:	431a      	orrs	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	7f5a      	ldrb	r2, [r3, #29]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	7f1a      	ldrb	r2, [r3, #28]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	7eda      	ldrb	r2, [r3, #27]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	7e9a      	ldrb	r2, [r3, #26]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	220f      	movs	r2, #15
 800cc64:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cc76:	3306      	adds	r3, #6
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cc86:	1d9a      	adds	r2, r3, #6
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cc8e:	e247      	b.n	800d120 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2202      	movs	r2, #2
 800cc94:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	228f      	movs	r2, #143	; 0x8f
 800cc9c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2203      	movs	r2, #3
 800ccac:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccb6:	1d9a      	adds	r2, r3, #6
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ccbe:	2302      	movs	r3, #2
 800ccc0:	e22e      	b.n	800d120 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2203      	movs	r2, #3
 800ccc6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	228f      	movs	r2, #143	; 0x8f
 800ccce:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2203      	movs	r2, #3
 800ccde:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cce8:	1d9a      	adds	r2, r3, #6
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	e215      	b.n	800d120 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	228f      	movs	r2, #143	; 0x8f
 800cd00:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2203      	movs	r2, #3
 800cd10:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd1a:	1d9a      	adds	r2, r3, #6
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cd22:	2301      	movs	r3, #1
 800cd24:	e1fc      	b.n	800d120 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	7d9a      	ldrb	r2, [r3, #22]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	7d5a      	ldrb	r2, [r3, #21]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	7d1a      	ldrb	r2, [r3, #20]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	7cda      	ldrb	r2, [r3, #19]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	7c9a      	ldrb	r2, [r3, #18]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cd5e:	2300      	movs	r3, #0
 800cd60:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7c5b      	ldrb	r3, [r3, #17]
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	f040 80eb 	bne.w	800cf42 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7e9b      	ldrb	r3, [r3, #26]
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cd7e:	021b      	lsls	r3, r3, #8
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cd8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	7edb      	ldrb	r3, [r3, #27]
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	4313      	orrs	r3, r2
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cdb6:	005b      	lsls	r3, r3, #1
 800cdb8:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	7f1b      	ldrb	r3, [r3, #28]
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cdcc:	021b      	lsls	r3, r3, #8
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cddc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	7f5b      	ldrb	r3, [r3, #29]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d87f      	bhi.n	800cf10 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ce16:	461a      	mov	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ce1e:	4413      	add	r3, r2
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800ce26:	4293      	cmp	r3, r2
 800ce28:	dc59      	bgt.n	800cede <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800ce2a:	e029      	b.n	800ce80 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ce2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce30:	f103 020d 	add.w	r2, r3, #13
 800ce34:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ce36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce3a:	440b      	add	r3, r1
 800ce3c:	6879      	ldr	r1, [r7, #4]
 800ce3e:	440a      	add	r2, r1
 800ce40:	7c91      	ldrb	r1, [r2, #18]
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	4413      	add	r3, r2
 800ce46:	460a      	mov	r2, r1
 800ce48:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800ce4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce50:	3301      	adds	r3, #1
 800ce52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ce56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce5a:	f103 020d 	add.w	r2, r3, #13
 800ce5e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ce60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce64:	440b      	add	r3, r1
 800ce66:	6879      	ldr	r1, [r7, #4]
 800ce68:	440a      	add	r2, r1
 800ce6a:	7c91      	ldrb	r1, [r2, #18]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	4413      	add	r3, r2
 800ce70:	460a      	mov	r2, r1
 800ce72:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800ce76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	7f9b      	ldrb	r3, [r3, #30]
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d3ce      	bcc.n	800ce2c <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	7f5a      	ldrb	r2, [r3, #29]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	7f1a      	ldrb	r2, [r3, #28]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	7eda      	ldrb	r2, [r3, #27]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	7e9a      	ldrb	r2, [r3, #26]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2210      	movs	r2, #16
 800ceba:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2206      	movs	r2, #6
 800ceca:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ced4:	1d9a      	adds	r2, r3, #6
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cedc:	e120      	b.n	800d120 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2202      	movs	r2, #2
 800cee2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2290      	movs	r2, #144	; 0x90
 800ceea:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2203      	movs	r2, #3
 800cefa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf04:	1d9a      	adds	r2, r3, #6
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	e107      	b.n	800d120 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2203      	movs	r2, #3
 800cf14:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2290      	movs	r2, #144	; 0x90
 800cf1c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2203      	movs	r2, #3
 800cf2c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf36:	1d9a      	adds	r2, r3, #6
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cf3e:	2303      	movs	r3, #3
 800cf40:	e0ee      	b.n	800d120 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2201      	movs	r2, #1
 800cf46:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2290      	movs	r2, #144	; 0x90
 800cf4e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2201      	movs	r2, #1
 800cf56:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2203      	movs	r2, #3
 800cf5e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf68:	1d9a      	adds	r2, r3, #6
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cf70:	2301      	movs	r3, #1
 800cf72:	e0d5      	b.n	800d120 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2201      	movs	r2, #1
 800cf78:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	7e5b      	ldrb	r3, [r3, #25]
 800cf80:	3b80      	subs	r3, #128	; 0x80
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	7e1a      	ldrb	r2, [r3, #24]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2203      	movs	r2, #3
 800cf98:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7d9a      	ldrb	r2, [r3, #22]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	7d5a      	ldrb	r2, [r3, #21]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7d1a      	ldrb	r2, [r3, #20]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	7cda      	ldrb	r2, [r3, #19]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7c9a      	ldrb	r2, [r3, #18]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cfd4:	1d9a      	adds	r2, r3, #6
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e09f      	b.n	800d120 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e09d      	b.n	800d120 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	791b      	ldrb	r3, [r3, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f040 8099 	bne.w	800d120 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f103 0212 	add.w	r2, r3, #18
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cffa:	4619      	mov	r1, r3
 800cffc:	4610      	mov	r0, r2
 800cffe:	f7fe fda9 	bl	800bb54 <ModBUS_Check>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	f000 808b 	beq.w	800d120 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7fe fdc1 	bl	800bb92 <ModBUS_Check_tid>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d04f      	beq.n	800d0b6 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	7e5b      	ldrb	r3, [r3, #25]
 800d01a:	2b03      	cmp	r3, #3
 800d01c:	d143      	bne.n	800d0a6 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800d022:	2300      	movs	r3, #0
 800d024:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d02e:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d030:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d032:	021b      	lsls	r3, r3, #8
 800d034:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d040:	4313      	orrs	r3, r2
 800d042:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800d04a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d04e:	2300      	movs	r3, #0
 800d050:	643b      	str	r3, [r7, #64]	; 0x40
 800d052:	e022      	b.n	800d09a <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d056:	005b      	lsls	r3, r3, #1
 800d058:	f103 0209 	add.w	r2, r3, #9
 800d05c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d05e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d060:	440b      	add	r3, r1
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	440a      	add	r2, r1
 800d068:	7c91      	ldrb	r1, [r2, #18]
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	4413      	add	r3, r2
 800d06e:	460a      	mov	r2, r1
 800d070:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800d074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d076:	3305      	adds	r3, #5
 800d078:	005a      	lsls	r2, r3, #1
 800d07a:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07e:	440b      	add	r3, r1
 800d080:	005b      	lsls	r3, r3, #1
 800d082:	3301      	adds	r3, #1
 800d084:	6879      	ldr	r1, [r7, #4]
 800d086:	440a      	add	r2, r1
 800d088:	7c91      	ldrb	r1, [r2, #18]
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	4413      	add	r3, r2
 800d08e:	460a      	mov	r2, r1
 800d090:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800d094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d096:	3301      	adds	r3, #1
 800d098:	643b      	str	r3, [r7, #64]	; 0x40
 800d09a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d09e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	dbd7      	blt.n	800d054 <ModBUS+0x1300>

						}


					}
					break;
 800d0a4:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	7ddb      	ldrb	r3, [r3, #23]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	7e9b      	ldrb	r3, [r3, #26]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0b4:	e034      	b.n	800d120 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	7e5b      	ldrb	r3, [r3, #25]
 800d0ba:	3b81      	subs	r3, #129	; 0x81
 800d0bc:	2b15      	cmp	r3, #21
 800d0be:	d82f      	bhi.n	800d120 <ModBUS+0x13cc>
 800d0c0:	a201      	add	r2, pc, #4	; (adr r2, 800d0c8 <ModBUS+0x1374>)
 800d0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c6:	bf00      	nop
 800d0c8:	0800d121 	.word	0x0800d121
 800d0cc:	0800d121 	.word	0x0800d121
 800d0d0:	0800d121 	.word	0x0800d121
 800d0d4:	0800d121 	.word	0x0800d121
 800d0d8:	0800d121 	.word	0x0800d121
 800d0dc:	0800d121 	.word	0x0800d121
 800d0e0:	0800d121 	.word	0x0800d121
 800d0e4:	0800d121 	.word	0x0800d121
 800d0e8:	0800d121 	.word	0x0800d121
 800d0ec:	0800d121 	.word	0x0800d121
 800d0f0:	0800d121 	.word	0x0800d121
 800d0f4:	0800d121 	.word	0x0800d121
 800d0f8:	0800d121 	.word	0x0800d121
 800d0fc:	0800d121 	.word	0x0800d121
 800d100:	0800d121 	.word	0x0800d121
 800d104:	0800d121 	.word	0x0800d121
 800d108:	0800d121 	.word	0x0800d121
 800d10c:	0800d121 	.word	0x0800d121
 800d110:	0800d121 	.word	0x0800d121
 800d114:	0800d121 	.word	0x0800d121
 800d118:	0800d121 	.word	0x0800d121
 800d11c:	0800d121 	.word	0x0800d121
			}
		}
	}


}
 800d120:	4618      	mov	r0, r3
 800d122:	3770      	adds	r7, #112	; 0x70
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af02      	add	r7, sp, #8
 800d12e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6858      	ldr	r0, [r3, #4]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	891b      	ldrh	r3, [r3, #8]
 800d138:	2200      	movs	r2, #0
 800d13a:	4619      	mov	r1, r3
 800d13c:	f7f5 ff40 	bl	8002fc0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6818      	ldr	r0, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f103 0114 	add.w	r1, r3, #20
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f103 0218 	add.w	r2, r3, #24
 800d150:	2364      	movs	r3, #100	; 0x64
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	2304      	movs	r3, #4
 800d156:	f7f6 fc48 	bl	80039ea <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6858      	ldr	r0, [r3, #4]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	891b      	ldrh	r3, [r3, #8]
 800d162:	2201      	movs	r2, #1
 800d164:	4619      	mov	r1, r3
 800d166:	f7f5 ff2b 	bl	8002fc0 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	7edb      	ldrb	r3, [r3, #27]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b086      	sub	sp, #24
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
 800d17e:	4608      	mov	r0, r1
 800d180:	4611      	mov	r1, r2
 800d182:	461a      	mov	r2, r3
 800d184:	4603      	mov	r3, r0
 800d186:	70fb      	strb	r3, [r7, #3]
 800d188:	460b      	mov	r3, r1
 800d18a:	70bb      	strb	r3, [r7, #2]
 800d18c:	4613      	mov	r3, r2
 800d18e:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800d190:	2300      	movs	r3, #0
 800d192:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	787a      	ldrb	r2, [r7, #1]
 800d198:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	78fa      	ldrb	r2, [r7, #3]
 800d19e:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	78ba      	ldrb	r2, [r7, #2]
 800d1a4:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800d1ac:	787b      	ldrb	r3, [r7, #1]
 800d1ae:	2bf0      	cmp	r3, #240	; 0xf0
 800d1b0:	d11d      	bne.n	800d1ee <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	613b      	str	r3, [r7, #16]
 800d1b6:	e013      	b.n	800d1e0 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	6a3a      	ldr	r2, [r7, #32]
 800d1bc:	4413      	add	r3, r2
 800d1be:	781a      	ldrb	r2, [r3, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f7ff ffaf 	bl	800d128 <SPI_ETH>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	7d9b      	ldrb	r3, [r3, #22]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	613b      	str	r3, [r7, #16]
 800d1e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	dbe6      	blt.n	800d1b8 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800d1ea:	8afb      	ldrh	r3, [r7, #22]
 800d1ec:	e037      	b.n	800d25e <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800d1ee:	787b      	ldrb	r3, [r7, #1]
 800d1f0:	2b0f      	cmp	r3, #15
 800d1f2:	d134      	bne.n	800d25e <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800d1fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	d120      	bne.n	800d244 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800d202:	2300      	movs	r3, #0
 800d204:	60fb      	str	r3, [r7, #12]
 800d206:	e016      	b.n	800d236 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7ff ff8d 	bl	800d128 <SPI_ETH>
 800d20e:	4603      	mov	r3, r0
 800d210:	b29a      	uxth	r2, r3
 800d212:	8afb      	ldrh	r3, [r7, #22]
 800d214:	4313      	orrs	r3, r2
 800d216:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	7d9b      	ldrb	r3, [r3, #22]
 800d21c:	3301      	adds	r3, #1
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d102      	bne.n	800d230 <SPI_ETH_REG+0xba>
 800d22a:	8afb      	ldrh	r3, [r7, #22]
 800d22c:	021b      	lsls	r3, r3, #8
 800d22e:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	3301      	adds	r3, #1
 800d234:	60fb      	str	r3, [r7, #12]
 800d236:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	dbe3      	blt.n	800d208 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800d240:	8afb      	ldrh	r3, [r7, #22]
 800d242:	e00c      	b.n	800d25e <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff ff6f 	bl	800d128 <SPI_ETH>
 800d24a:	4603      	mov	r3, r0
 800d24c:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	7d9b      	ldrb	r3, [r3, #22]
 800d252:	3301      	adds	r3, #1
 800d254:	b2da      	uxtb	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	759a      	strb	r2, [r3, #22]
			return(res);
 800d25a:	8afb      	ldrh	r3, [r7, #22]
 800d25c:	e7ff      	b.n	800d25e <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3718      	adds	r7, #24
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b086      	sub	sp, #24
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	460b      	mov	r3, r1
 800d270:	807b      	strh	r3, [r7, #2]
 800d272:	4613      	mov	r3, r2
 800d274:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800d276:	2300      	movs	r3, #0
 800d278:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	22f0      	movs	r2, #240	; 0xf0
 800d27e:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800d280:	883b      	ldrh	r3, [r7, #0]
 800d282:	b2db      	uxtb	r3, r3
 800d284:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800d286:	883b      	ldrh	r3, [r7, #0]
 800d288:	0a1b      	lsrs	r3, r3, #8
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800d290:	2300      	movs	r3, #0
 800d292:	613b      	str	r3, [r7, #16]
 800d294:	e01b      	b.n	800d2ce <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800d296:	887b      	ldrh	r3, [r7, #2]
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800d29e:	887b      	ldrh	r3, [r7, #2]
 800d2a0:	0a1b      	lsrs	r3, r3, #8
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	755a      	strb	r2, [r3, #21]
		addr++;
 800d2aa:	887b      	ldrh	r3, [r7, #2]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800d2b0:	f107 020c 	add.w	r2, r7, #12
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	781a      	ldrb	r2, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7ff ff32 	bl	800d128 <SPI_ETH>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	613b      	str	r3, [r7, #16]
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	dde0      	ble.n	800d296 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800d2d4:	8afb      	ldrh	r3, [r7, #22]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d2de:	b590      	push	{r4, r7, lr}
 800d2e0:	b087      	sub	sp, #28
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	60f8      	str	r0, [r7, #12]
 800d2e6:	607a      	str	r2, [r7, #4]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	817b      	strh	r3, [r7, #10]
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	220f      	movs	r2, #15
 800d2f6:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d2f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2fe:	d226      	bcs.n	800d34e <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2200      	movs	r2, #0
 800d304:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800d306:	2300      	movs	r3, #0
 800d308:	617b      	str	r3, [r7, #20]
 800d30a:	e01a      	b.n	800d342 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800d30c:	897b      	ldrh	r3, [r7, #10]
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d314:	897b      	ldrh	r3, [r7, #10]
 800d316:	0a1b      	lsrs	r3, r3, #8
 800d318:	b29b      	uxth	r3, r3
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800d320:	893a      	ldrh	r2, [r7, #8]
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	4413      	add	r3, r2
 800d326:	461a      	mov	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	189c      	adds	r4, r3, r2
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f7ff fefb 	bl	800d128 <SPI_ETH>
 800d332:	4603      	mov	r3, r0
 800d334:	7023      	strb	r3, [r4, #0]
				addr++;
 800d336:	897b      	ldrh	r3, [r7, #10]
 800d338:	3301      	adds	r3, #1
 800d33a:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	3301      	adds	r3, #1
 800d340:	617b      	str	r3, [r7, #20]
 800d342:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d344:	697a      	ldr	r2, [r7, #20]
 800d346:	429a      	cmp	r2, r3
 800d348:	dbe0      	blt.n	800d30c <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d34a:	2300      	movs	r3, #0
 800d34c:	e000      	b.n	800d350 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800d34e:	2301      	movs	r3, #1
	}
}
 800d350:	4618      	mov	r0, r3
 800d352:	371c      	adds	r7, #28
 800d354:	46bd      	mov	sp, r7
 800d356:	bd90      	pop	{r4, r7, pc}

0800d358 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	607a      	str	r2, [r7, #4]
 800d362:	461a      	mov	r2, r3
 800d364:	460b      	mov	r3, r1
 800d366:	817b      	strh	r3, [r7, #10]
 800d368:	4613      	mov	r3, r2
 800d36a:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	22f0      	movs	r2, #240	; 0xf0
 800d370:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d372:	8c3b      	ldrh	r3, [r7, #32]
 800d374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d378:	d223      	bcs.n	800d3c2 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800d37a:	2300      	movs	r3, #0
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	e01a      	b.n	800d3b6 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800d380:	897b      	ldrh	r3, [r7, #10]
 800d382:	b2da      	uxtb	r2, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d388:	897b      	ldrh	r3, [r7, #10]
 800d38a:	0a1b      	lsrs	r3, r3, #8
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800d394:	893a      	ldrh	r2, [r7, #8]
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	4413      	add	r3, r2
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	4413      	add	r3, r2
 800d39e:	7f1a      	ldrb	r2, [r3, #28]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f7ff febf 	bl	800d128 <SPI_ETH>
				addr++;
 800d3aa:	897b      	ldrh	r3, [r7, #10]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	617b      	str	r3, [r7, #20]
 800d3b6:	8c3b      	ldrh	r3, [r7, #32]
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	dbe0      	blt.n	800d380 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e000      	b.n	800d3c4 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800d3c2:	2301      	movs	r3, #1
	}
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3718      	adds	r7, #24
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	70fb      	strb	r3, [r7, #3]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	22f0      	movs	r2, #240	; 0xf0
 800d3e0:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800d3e2:	78fb      	ldrb	r3, [r7, #3]
 800d3e4:	3304      	adds	r3, #4
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	78ba      	ldrb	r2, [r7, #2]
 800d3f6:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff fe95 	bl	800d128 <SPI_ETH>
}
 800d3fe:	bf00      	nop
 800d400:	4618      	mov	r0, r3
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	460b      	mov	r3, r1
 800d412:	70fb      	strb	r3, [r7, #3]
 800d414:	4613      	mov	r3, r2
 800d416:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	22f0      	movs	r2, #240	; 0xf0
 800d41c:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800d41e:	78fb      	ldrb	r3, [r7, #3]
 800d420:	3304      	adds	r3, #4
 800d422:	b2da      	uxtb	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	78ba      	ldrb	r2, [r7, #2]
 800d432:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f7ff fe77 	bl	800d128 <SPI_ETH>
}
 800d43a:	bf00      	nop
 800d43c:	4618      	mov	r0, r3
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af02      	add	r7, sp, #8
 800d44a:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d452:	331c      	adds	r3, #28
 800d454:	2204      	movs	r2, #4
 800d456:	9201      	str	r2, [sp, #4]
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	23f0      	movs	r3, #240	; 0xf0
 800d45c:	2201      	movs	r2, #1
 800d45e:	2100      	movs	r1, #0
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7ff fe88 	bl	800d176 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800d466:	2119      	movs	r1, #25
 800d468:	482d      	ldr	r0, [pc, #180]	; (800d520 <eth_init+0xdc>)
 800d46a:	f7f3 ff55 	bl	8001318 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d474:	2204      	movs	r2, #4
 800d476:	9201      	str	r2, [sp, #4]
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	23f0      	movs	r3, #240	; 0xf0
 800d47c:	2205      	movs	r2, #5
 800d47e:	2100      	movs	r1, #0
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff fe78 	bl	800d176 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800d486:	2116      	movs	r1, #22
 800d488:	4826      	ldr	r0, [pc, #152]	; (800d524 <eth_init+0xe0>)
 800d48a:	f7f3 ff45 	bl	8001318 <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d494:	3304      	adds	r3, #4
 800d496:	2206      	movs	r2, #6
 800d498:	9201      	str	r2, [sp, #4]
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	23f0      	movs	r3, #240	; 0xf0
 800d49e:	2209      	movs	r2, #9
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fe67 	bl	800d176 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800d4a8:	2113      	movs	r1, #19
 800d4aa:	481f      	ldr	r0, [pc, #124]	; (800d528 <eth_init+0xe4>)
 800d4ac:	f7f3 ff34 	bl	8001318 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4b6:	330a      	adds	r3, #10
 800d4b8:	2204      	movs	r2, #4
 800d4ba:	9201      	str	r2, [sp, #4]
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	23f0      	movs	r3, #240	; 0xf0
 800d4c0:	220f      	movs	r2, #15
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff fe56 	bl	800d176 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800d4ca:	2112      	movs	r1, #18
 800d4cc:	4817      	ldr	r0, [pc, #92]	; (800d52c <eth_init+0xe8>)
 800d4ce:	f7f3 ff23 	bl	8001318 <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4d8:	330e      	adds	r3, #14
 800d4da:	2201      	movs	r2, #1
 800d4dc:	9201      	str	r2, [sp, #4]
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	23f0      	movs	r3, #240	; 0xf0
 800d4e2:	221a      	movs	r2, #26
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7ff fe45 	bl	800d176 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800d4ec:	2128      	movs	r1, #40	; 0x28
 800d4ee:	4810      	ldr	r0, [pc, #64]	; (800d530 <eth_init+0xec>)
 800d4f0:	f7f3 ff12 	bl	8001318 <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4fa:	330f      	adds	r3, #15
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	9201      	str	r2, [sp, #4]
 800d500:	9300      	str	r3, [sp, #0]
 800d502:	23f0      	movs	r3, #240	; 0xf0
 800d504:	221b      	movs	r2, #27
 800d506:	2100      	movs	r1, #0
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7ff fe34 	bl	800d176 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800d50e:	2128      	movs	r1, #40	; 0x28
 800d510:	4808      	ldr	r0, [pc, #32]	; (800d534 <eth_init+0xf0>)
 800d512:	f7f3 ff01 	bl	8001318 <ITM0_Write>

}
 800d516:	bf00      	nop
 800d518:	4618      	mov	r0, r3
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	0800fb6c 	.word	0x0800fb6c
 800d524:	0800fb88 	.word	0x0800fb88
 800d528:	0800fba4 	.word	0x0800fba4
 800d52c:	0800fbbc 	.word	0x0800fbbc
 800d530:	0800fbd4 	.word	0x0800fbd4
 800d534:	0800fc00 	.word	0x0800fc00

0800d538 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af02      	add	r7, sp, #8
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	460b      	mov	r3, r1
 800d542:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800d544:	78fb      	ldrb	r3, [r7, #3]
 800d546:	2201      	movs	r2, #1
 800d548:	4619      	mov	r1, r3
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7ff ff5c 	bl	800d408 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800d550:	2119      	movs	r1, #25
 800d552:	4830      	ldr	r0, [pc, #192]	; (800d614 <eth_socket_init+0xdc>)
 800d554:	f7f3 fee0 	bl	8001318 <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d55e:	331a      	adds	r3, #26
 800d560:	2202      	movs	r2, #2
 800d562:	9201      	str	r2, [sp, #4]
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	23f0      	movs	r3, #240	; 0xf0
 800d568:	2204      	movs	r2, #4
 800d56a:	2104      	movs	r1, #4
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff fe02 	bl	800d176 <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d572:	212c      	movs	r1, #44	; 0x2c
 800d574:	4828      	ldr	r0, [pc, #160]	; (800d618 <eth_socket_init+0xe0>)
 800d576:	f7f3 fecf 	bl	8001318 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d580:	331c      	adds	r3, #28
 800d582:	2204      	movs	r2, #4
 800d584:	9201      	str	r2, [sp, #4]
 800d586:	9300      	str	r3, [sp, #0]
 800d588:	23f0      	movs	r3, #240	; 0xf0
 800d58a:	220c      	movs	r2, #12
 800d58c:	2104      	movs	r1, #4
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff fdf1 	bl	800d176 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800d594:	212e      	movs	r1, #46	; 0x2e
 800d596:	4821      	ldr	r0, [pc, #132]	; (800d61c <eth_socket_init+0xe4>)
 800d598:	f7f3 febe 	bl	8001318 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d5a2:	2202      	movs	r2, #2
 800d5a4:	9201      	str	r2, [sp, #4]
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	23f0      	movs	r3, #240	; 0xf0
 800d5aa:	2210      	movs	r2, #16
 800d5ac:	2104      	movs	r1, #4
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff fde1 	bl	800d176 <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800d5b4:	2120      	movs	r1, #32
 800d5b6:	481a      	ldr	r0, [pc, #104]	; (800d620 <eth_socket_init+0xe8>)
 800d5b8:	f7f3 feae 	bl	8001318 <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800d5bc:	78fb      	ldrb	r3, [r7, #3]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7ff ff02 	bl	800d3cc <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800d5c8:	2119      	movs	r1, #25
 800d5ca:	4816      	ldr	r0, [pc, #88]	; (800d624 <eth_socket_init+0xec>)
 800d5cc:	f7f3 fea4 	bl	8001318 <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d10a      	bne.n	800d5f4 <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800d5de:	78fb      	ldrb	r3, [r7, #3]
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7ff fef1 	bl	800d3cc <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800d5ea:	211b      	movs	r1, #27
 800d5ec:	480e      	ldr	r0, [pc, #56]	; (800d628 <eth_socket_init+0xf0>)
 800d5ee:	f7f3 fe93 	bl	8001318 <ITM0_Write>
 800d5f2:	e009      	b.n	800d608 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800d5f4:	78fb      	ldrb	r3, [r7, #3]
 800d5f6:	2204      	movs	r2, #4
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7ff fee6 	bl	800d3cc <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800d600:	2115      	movs	r1, #21
 800d602:	480a      	ldr	r0, [pc, #40]	; (800d62c <eth_socket_init+0xf4>)
 800d604:	f7f3 fe88 	bl	8001318 <ITM0_Write>
	 }
}
 800d608:	bf00      	nop
 800d60a:	4618      	mov	r0, r3
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	0800fc2c 	.word	0x0800fc2c
 800d618:	0800fc48 	.word	0x0800fc48
 800d61c:	0800fc78 	.word	0x0800fc78
 800d620:	0800fca8 	.word	0x0800fca8
 800d624:	0800fccc 	.word	0x0800fccc
 800d628:	0800fce8 	.word	0x0800fce8
 800d62c:	0800fd04 	.word	0x0800fd04

0800d630 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	460b      	mov	r3, r1
 800d63a:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	220f      	movs	r2, #15
 800d640:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800d642:	78fb      	ldrb	r3, [r7, #3]
 800d644:	3304      	adds	r3, #4
 800d646:	b2da      	uxtb	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2203      	movs	r2, #3
 800d650:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f7ff fd65 	bl	800d128 <SPI_ETH>
	return(y->RX[3]);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	7edb      	ldrb	r3, [r3, #27]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3708      	adds	r7, #8
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b082      	sub	sp, #8
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
 800d672:	460b      	mov	r3, r1
 800d674:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	220f      	movs	r2, #15
 800d67a:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800d67c:	78fb      	ldrb	r3, [r7, #3]
 800d67e:	3304      	adds	r3, #4
 800d680:	b2da      	uxtb	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2201      	movs	r2, #1
 800d68a:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff fd48 	bl	800d128 <SPI_ETH>
	return(y->RX[3]);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7edb      	ldrb	r3, [r3, #27]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08c      	sub	sp, #48	; 0x30
 800d6a8:	af02      	add	r7, sp, #8
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	607a      	str	r2, [r7, #4]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	72fb      	strb	r3, [r7, #11]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800d6bc:	2300      	movs	r3, #0
 800d6be:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800d6d8:	2300      	movs	r3, #0
 800d6da:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800d6e0:	7afb      	ldrb	r3, [r7, #11]
 800d6e2:	2b03      	cmp	r3, #3
 800d6e4:	d83e      	bhi.n	800d764 <eth_rd_SOCKET_DATA+0xc0>
 800d6e6:	a201      	add	r2, pc, #4	; (adr r2, 800d6ec <eth_rd_SOCKET_DATA+0x48>)
 800d6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ec:	0800d6fd 	.word	0x0800d6fd
 800d6f0:	0800d717 	.word	0x0800d717
 800d6f4:	0800d731 	.word	0x0800d731
 800d6f8:	0800d74b 	.word	0x0800d74b
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d702:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d706:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d70e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d712:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d714:	e033      	b.n	800d77e <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d71c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d720:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d728:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d72c:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d72e:	e026      	b.n	800d77e <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d73a:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d742:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d746:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d748:	e019      	b.n	800d77e <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d750:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d754:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d75c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d760:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d762:	e00c      	b.n	800d77e <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d76a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d76e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d77a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d77c:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d77e:	7afb      	ldrb	r3, [r7, #11]
 800d780:	3304      	adds	r3, #4
 800d782:	b2d9      	uxtb	r1, r3
 800d784:	2302      	movs	r3, #2
 800d786:	9301      	str	r3, [sp, #4]
 800d788:	f107 0310 	add.w	r3, r7, #16
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	230f      	movs	r3, #15
 800d790:	2228      	movs	r2, #40	; 0x28
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7ff fcef 	bl	800d176 <SPI_ETH_REG>
 800d798:	4603      	mov	r3, r0
 800d79a:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800d79c:	8b7a      	ldrh	r2, [r7, #26]
 800d79e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800d7a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d7a6:	8b3b      	ldrh	r3, [r7, #24]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800d7ac:	8b3a      	ldrh	r2, [r7, #24]
 800d7ae:	893b      	ldrh	r3, [r7, #8]
 800d7b0:	441a      	add	r2, r3
 800d7b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	dd2c      	ble.n	800d814 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800d7ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d7bc:	8b3b      	ldrh	r3, [r7, #24]
 800d7be:	1ad3      	subs	r3, r2, r3
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f103 021c 	add.w	r2, r3, #28
 800d7cc:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d7ce:	8af9      	ldrh	r1, [r7, #22]
 800d7d0:	8bfb      	ldrh	r3, [r7, #30]
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f7ff fd81 	bl	800d2de <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d7dc:	8bba      	ldrh	r2, [r7, #28]
 800d7de:	8bfb      	ldrh	r3, [r7, #30]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800d7e4:	893a      	ldrh	r2, [r7, #8]
 800d7e6:	8bfb      	ldrh	r3, [r7, #30]
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800d7ec:	8bfb      	ldrh	r3, [r7, #30]
 800d7ee:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f103 021c 	add.w	r2, r3, #28
 800d7f6:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d7f8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800d7fa:	8c3b      	ldrh	r3, [r7, #32]
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	4603      	mov	r3, r0
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f7ff fd6c 	bl	800d2de <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800d806:	8b7a      	ldrh	r2, [r7, #26]
 800d808:	893b      	ldrh	r3, [r7, #8]
 800d80a:	4413      	add	r3, r2
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	801a      	strh	r2, [r3, #0]
 800d812:	e010      	b.n	800d836 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f103 021c 	add.w	r2, r3, #28
 800d81a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d81c:	8af9      	ldrh	r1, [r7, #22]
 800d81e:	893b      	ldrh	r3, [r7, #8]
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	4603      	mov	r3, r0
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f7ff fd5a 	bl	800d2de <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800d82a:	8b7a      	ldrh	r2, [r7, #26]
 800d82c:	893b      	ldrh	r3, [r7, #8]
 800d82e:	4413      	add	r3, r2
 800d830:	b29a      	uxth	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	b29b      	uxth	r3, r3
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3728      	adds	r7, #40	; 0x28
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop

0800d844 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08c      	sub	sp, #48	; 0x30
 800d848:	af02      	add	r7, sp, #8
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	607a      	str	r2, [r7, #4]
 800d84e:	461a      	mov	r2, r3
 800d850:	460b      	mov	r3, r1
 800d852:	72fb      	strb	r3, [r7, #11]
 800d854:	4613      	mov	r3, r2
 800d856:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d858:	2300      	movs	r3, #0
 800d85a:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800d85c:	2300      	movs	r3, #0
 800d85e:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800d860:	2300      	movs	r3, #0
 800d862:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800d864:	2300      	movs	r3, #0
 800d866:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800d868:	2300      	movs	r3, #0
 800d86a:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800d86c:	2300      	movs	r3, #0
 800d86e:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800d870:	2300      	movs	r3, #0
 800d872:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d874:	2300      	movs	r3, #0
 800d876:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800d878:	2300      	movs	r3, #0
 800d87a:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800d87c:	2300      	movs	r3, #0
 800d87e:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800d880:	2300      	movs	r3, #0
 800d882:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800d884:	7afb      	ldrb	r3, [r7, #11]
 800d886:	2b03      	cmp	r3, #3
 800d888:	d83e      	bhi.n	800d908 <eth_wr_SOCKET_DATA+0xc4>
 800d88a:	a201      	add	r2, pc, #4	; (adr r2, 800d890 <eth_wr_SOCKET_DATA+0x4c>)
 800d88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d890:	0800d8a1 	.word	0x0800d8a1
 800d894:	0800d8bb 	.word	0x0800d8bb
 800d898:	0800d8d5 	.word	0x0800d8d5
 800d89c:	0800d8ef 	.word	0x0800d8ef
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d8aa:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d8b6:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d8b8:	e033      	b.n	800d922 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d8c4:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8d0:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d8d2:	e026      	b.n	800d922 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d8de:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8ea:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d8ec:	e019      	b.n	800d922 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d8f8:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d900:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d904:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d906:	e00c      	b.n	800d922 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d90e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d912:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d91a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d91e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d920:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d922:	e00e      	b.n	800d942 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800d924:	7afb      	ldrb	r3, [r7, #11]
 800d926:	3304      	adds	r3, #4
 800d928:	b2d9      	uxtb	r1, r3
 800d92a:	2302      	movs	r3, #2
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	f107 0310 	add.w	r3, r7, #16
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	230f      	movs	r3, #15
 800d936:	2220      	movs	r2, #32
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f7ff fc1c 	bl	800d176 <SPI_ETH_REG>
 800d93e:	4603      	mov	r3, r0
 800d940:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d942:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d944:	893b      	ldrh	r3, [r7, #8]
 800d946:	429a      	cmp	r2, r3
 800d948:	d3ec      	bcc.n	800d924 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800d94a:	7afb      	ldrb	r3, [r7, #11]
 800d94c:	3304      	adds	r3, #4
 800d94e:	b2d9      	uxtb	r1, r3
 800d950:	2302      	movs	r3, #2
 800d952:	9301      	str	r3, [sp, #4]
 800d954:	f107 0310 	add.w	r3, r7, #16
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	230f      	movs	r3, #15
 800d95c:	2224      	movs	r2, #36	; 0x24
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f7ff fc09 	bl	800d176 <SPI_ETH_REG>
 800d964:	4603      	mov	r3, r0
 800d966:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800d968:	8b3a      	ldrh	r2, [r7, #24]
 800d96a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d96c:	4013      	ands	r3, r2
 800d96e:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800d970:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d972:	8afb      	ldrh	r3, [r7, #22]
 800d974:	4413      	add	r3, r2
 800d976:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800d978:	8afa      	ldrh	r2, [r7, #22]
 800d97a:	893b      	ldrh	r3, [r7, #8]
 800d97c:	441a      	add	r2, r3
 800d97e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d980:	3301      	adds	r3, #1
 800d982:	429a      	cmp	r2, r3
 800d984:	dd2c      	ble.n	800d9e0 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800d986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d988:	8afb      	ldrh	r3, [r7, #22]
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	3301      	adds	r3, #1
 800d990:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f103 021c 	add.w	r2, r3, #28
 800d998:	8c38      	ldrh	r0, [r7, #32]
 800d99a:	8ab9      	ldrh	r1, [r7, #20]
 800d99c:	8bbb      	ldrh	r3, [r7, #28]
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f7ff fcd8 	bl	800d358 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800d9a8:	8b7a      	ldrh	r2, [r7, #26]
 800d9aa:	8bbb      	ldrh	r3, [r7, #28]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800d9b0:	893a      	ldrh	r2, [r7, #8]
 800d9b2:	8bbb      	ldrh	r3, [r7, #28]
 800d9b4:	1ad3      	subs	r3, r2, r3
 800d9b6:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800d9b8:	8bbb      	ldrh	r3, [r7, #28]
 800d9ba:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f103 021c 	add.w	r2, r3, #28
 800d9c2:	8c38      	ldrh	r0, [r7, #32]
 800d9c4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800d9c6:	8bfb      	ldrh	r3, [r7, #30]
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f7ff fcc3 	bl	800d358 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800d9d2:	8b3a      	ldrh	r2, [r7, #24]
 800d9d4:	893b      	ldrh	r3, [r7, #8]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	801a      	strh	r2, [r3, #0]
 800d9de:	e010      	b.n	800da02 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f103 021c 	add.w	r2, r3, #28
 800d9e6:	8c38      	ldrh	r0, [r7, #32]
 800d9e8:	8ab9      	ldrh	r1, [r7, #20]
 800d9ea:	893b      	ldrh	r3, [r7, #8]
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f7ff fcb1 	bl	800d358 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800d9f6:	8b3a      	ldrh	r2, [r7, #24]
 800d9f8:	893b      	ldrh	r3, [r7, #8]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	801a      	strh	r2, [r3, #0]
					}

}
 800da02:	bf00      	nop
 800da04:	4618      	mov	r0, r3
 800da06:	3728      	adds	r7, #40	; 0x28
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b090      	sub	sp, #64	; 0x40
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
 800da18:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da1e:	2300      	movs	r3, #0
 800da20:	63bb      	str	r3, [r7, #56]	; 0x38
 800da22:	2300      	movs	r3, #0
 800da24:	637b      	str	r3, [r7, #52]	; 0x34
 800da26:	2300      	movs	r3, #0
 800da28:	633b      	str	r3, [r7, #48]	; 0x30
 800da2a:	2300      	movs	r3, #0
 800da2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da2e:	2300      	movs	r3, #0
 800da30:	61fb      	str	r3, [r7, #28]
 800da32:	2300      	movs	r3, #0
 800da34:	61bb      	str	r3, [r7, #24]
 800da36:	2300      	movs	r3, #0
 800da38:	62bb      	str	r3, [r7, #40]	; 0x28
 800da3a:	2300      	movs	r3, #0
 800da3c:	627b      	str	r3, [r7, #36]	; 0x24
 800da3e:	2300      	movs	r3, #0
 800da40:	617b      	str	r3, [r7, #20]
 800da42:	2300      	movs	r3, #0
 800da44:	623b      	str	r3, [r7, #32]
 800da46:	2300      	movs	r3, #0
 800da48:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800da56:	69fa      	ldr	r2, [r7, #28]
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	f2c0 8315 	blt.w	800e08a <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800da60:	2300      	movs	r3, #0
 800da62:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800da64:	e00c      	b.n	800da80 <FT_String_ND+0x74>
							{
								n++;
 800da66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da68:	3301      	adds	r3, #1
 800da6a:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800da6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	441a      	add	r2, r3
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	3301      	adds	r3, #1
 800da76:	429a      	cmp	r2, r3
 800da78:	dd02      	ble.n	800da80 <FT_String_ND+0x74>
								{
									estado=0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	623b      	str	r3, [r7, #32]
									break;
 800da7e:	e009      	b.n	800da94 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800da80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	4413      	add	r3, r2
 800da86:	781a      	ldrb	r2, [r3, #0]
 800da88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8a:	6879      	ldr	r1, [r7, #4]
 800da8c:	440b      	add	r3, r1
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	429a      	cmp	r2, r3
 800da92:	d1e8      	bne.n	800da66 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800da94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da96:	3301      	adds	r3, #1
 800da98:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800da9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9c:	3301      	adds	r3, #1
 800da9e:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800daa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d108      	bne.n	800daba <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800daa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	1c5a      	adds	r2, r3, #1
 800dab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dab2:	601a      	str	r2, [r3, #0]
									estado=1;
 800dab4:	2301      	movs	r3, #1
 800dab6:	623b      	str	r3, [r7, #32]
									break;
 800dab8:	e010      	b.n	800dadc <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800daba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	dd02      	ble.n	800dac8 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800dac2:	2300      	movs	r3, #0
 800dac4:	623b      	str	r3, [r7, #32]
									 break;
 800dac6:	e009      	b.n	800dadc <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800dac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	4413      	add	r3, r2
 800dace:	781a      	ldrb	r2, [r3, #0]
 800dad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad2:	6879      	ldr	r1, [r7, #4]
 800dad4:	440b      	add	r3, r1
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d0db      	beq.n	800da94 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	1e5a      	subs	r2, r3, #1
 800dae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae2:	4413      	add	r3, r2
 800dae4:	69fa      	ldr	r2, [r7, #28]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	dd02      	ble.n	800daf0 <FT_String_ND+0xe4>
 800daea:	6a3b      	ldr	r3, [r7, #32]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d1b7      	bne.n	800da60 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800daf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d101      	bne.n	800dafa <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800daf6:	6a3b      	ldr	r3, [r7, #32]
 800daf8:	e2c8      	b.n	800e08c <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800dafa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d12c      	bne.n	800db5a <FT_String_ND+0x14e>
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d129      	bne.n	800db5a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800db06:	e014      	b.n	800db32 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800db08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	441a      	add	r2, r3
 800db10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db12:	4413      	add	r3, r2
 800db14:	3b01      	subs	r3, #1
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	441a      	add	r2, r3
 800db1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db1c:	6819      	ldr	r1, [r3, #0]
 800db1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db20:	440b      	add	r3, r1
 800db22:	3b01      	subs	r3, #1
 800db24:	68f9      	ldr	r1, [r7, #12]
 800db26:	440b      	add	r3, r1
 800db28:	7812      	ldrb	r2, [r2, #0]
 800db2a:	701a      	strb	r2, [r3, #0]
										n3++;
 800db2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2e:	3301      	adds	r3, #1
 800db30:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800db32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db38:	441a      	add	r2, r3
 800db3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3c:	4413      	add	r3, r2
 800db3e:	69fa      	ldr	r2, [r7, #28]
 800db40:	429a      	cmp	r2, r3
 800db42:	dae1      	bge.n	800db08 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800db44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db4a:	4413      	add	r3, r2
 800db4c:	1e5a      	subs	r2, r3, #1
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	601a      	str	r2, [r3, #0]
							estado=3;
 800db52:	2303      	movs	r3, #3
 800db54:	623b      	str	r3, [r7, #32]
							return(estado);
 800db56:	6a3b      	ldr	r3, [r7, #32]
 800db58:	e298      	b.n	800e08c <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800db5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db5c:	2b02      	cmp	r3, #2
 800db5e:	f040 80be 	bne.w	800dcde <FT_String_ND+0x2d2>
 800db62:	6a3b      	ldr	r3, [r7, #32]
 800db64:	2b01      	cmp	r3, #1
 800db66:	f040 80ba 	bne.w	800dcde <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800db6a:	e012      	b.n	800db92 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800db6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	1ad2      	subs	r2, r2, r3
 800db72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db74:	4413      	add	r3, r2
 800db76:	461a      	mov	r2, r3
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	441a      	add	r2, r3
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db80:	440b      	add	r3, r1
 800db82:	7812      	ldrb	r2, [r2, #0]
 800db84:	701a      	strb	r2, [r3, #0]
								n4++;
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	3301      	adds	r3, #1
 800db8a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800db8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db90:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800db92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	1ad2      	subs	r2, r2, r3
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	4413      	add	r3, r2
 800db9c:	69fa      	ldr	r2, [r7, #28]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	dae4      	bge.n	800db6c <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800dba2:	499d      	ldr	r1, [pc, #628]	; (800de18 <FT_String_ND+0x40c>)
 800dba4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dba6:	f000 fcb7 	bl	800e518 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800dbaa:	499c      	ldr	r1, [pc, #624]	; (800de1c <FT_String_ND+0x410>)
 800dbac:	2000      	movs	r0, #0
 800dbae:	f000 fcb3 	bl	800e518 <strtok>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 faf0 	bl	800e19a <atoi>
 800dbba:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800dbbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbbe:	3b01      	subs	r3, #1
 800dbc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	db02      	blt.n	800dbcc <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800dbc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800dbcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbce:	3306      	adds	r3, #6
 800dbd0:	222c      	movs	r2, #44	; 0x2c
 800dbd2:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800dbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd6:	2b09      	cmp	r3, #9
 800dbd8:	dc0d      	bgt.n	800dbf6 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800dbda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbdc:	3308      	adds	r3, #8
 800dbde:	223a      	movs	r2, #58	; 0x3a
 800dbe0:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	3309      	adds	r3, #9
 800dbe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbe8:	4413      	add	r3, r2
 800dbea:	2200      	movs	r2, #0
 800dbec:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	3309      	adds	r3, #9
 800dbf2:	627b      	str	r3, [r7, #36]	; 0x24
 800dbf4:	e021      	b.n	800dc3a <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	2b63      	cmp	r3, #99	; 0x63
 800dbfa:	dc0d      	bgt.n	800dc18 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800dbfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbfe:	3309      	adds	r3, #9
 800dc00:	223a      	movs	r2, #58	; 0x3a
 800dc02:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800dc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc06:	330a      	adds	r3, #10
 800dc08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc0a:	4413      	add	r3, r2
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800dc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc12:	330a      	adds	r3, #10
 800dc14:	627b      	str	r3, [r7, #36]	; 0x24
 800dc16:	e010      	b.n	800dc3a <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc1e:	da0c      	bge.n	800dc3a <FT_String_ND+0x22e>
														{
															c[10]=':';
 800dc20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc22:	330a      	adds	r3, #10
 800dc24:	223a      	movs	r2, #58	; 0x3a
 800dc26:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800dc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2a:	330b      	adds	r3, #11
 800dc2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc2e:	4413      	add	r3, r2
 800dc30:	2200      	movs	r2, #0
 800dc32:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800dc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc36:	330b      	adds	r3, #11
 800dc38:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800dc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc3e:	601a      	str	r2, [r3, #0]
							n4=0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dc44:	e016      	b.n	800dc74 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800dc46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	1ad2      	subs	r2, r2, r3
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	441a      	add	r2, r3
 800dc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc52:	4413      	add	r3, r2
 800dc54:	461a      	mov	r2, r3
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	441a      	add	r2, r3
 800dc5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	1ac9      	subs	r1, r1, r3
 800dc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc62:	440b      	add	r3, r1
 800dc64:	4619      	mov	r1, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	440b      	add	r3, r1
 800dc6a:	7812      	ldrb	r2, [r2, #0]
 800dc6c:	701a      	strb	r2, [r3, #0]
								n4++;
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc70:	3301      	adds	r3, #1
 800dc72:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dc74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	1ad2      	subs	r2, r2, r3
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7c:	441a      	add	r2, r3
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	4413      	add	r3, r2
 800dc82:	69fa      	ldr	r2, [r7, #28]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	dade      	bge.n	800dc46 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800dc88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8c:	441a      	add	r2, r3
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	1e5a      	subs	r2, r3, #1
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800dc98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	1ad2      	subs	r2, r2, r3
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca0:	441a      	add	r2, r3
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	4413      	add	r3, r2
 800dca6:	461a      	mov	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	4413      	add	r3, r2
 800dcac:	2200      	movs	r2, #0
 800dcae:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800dcb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	1ad2      	subs	r2, r2, r3
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	4413      	add	r3, r2
 800dcba:	461a      	mov	r2, r3
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800dcc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	1ad2      	subs	r2, r2, r3
 800dcca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcce:	440b      	add	r3, r1
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d102      	bne.n	800dcda <FT_String_ND+0x2ce>
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	701a      	strb	r2, [r3, #0]
							estado=3;
 800dcda:	2303      	movs	r3, #3
 800dcdc:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800dcde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dce0:	2b03      	cmp	r3, #3
 800dce2:	d146      	bne.n	800dd72 <FT_String_ND+0x366>
 800dce4:	6a3b      	ldr	r3, [r7, #32]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d143      	bne.n	800dd72 <FT_String_ND+0x366>
						{
						n3=0;
 800dcea:	2300      	movs	r3, #0
 800dcec:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800dcee:	e00e      	b.n	800dd0e <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800dcf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf6:	4413      	add	r3, r2
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	441a      	add	r2, r3
 800dcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd00:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd02:	440b      	add	r3, r1
 800dd04:	7812      	ldrb	r2, [r2, #0]
 800dd06:	701a      	strb	r2, [r3, #0]
										n3++;
 800dd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800dd0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	dbec      	blt.n	800dcf0 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800dd1a:	e014      	b.n	800dd46 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800dd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	441a      	add	r2, r3
 800dd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd26:	4413      	add	r3, r2
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	441a      	add	r2, r3
 800dd2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd30:	6819      	ldr	r1, [r3, #0]
 800dd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd34:	440b      	add	r3, r1
 800dd36:	3b01      	subs	r3, #1
 800dd38:	68f9      	ldr	r1, [r7, #12]
 800dd3a:	440b      	add	r3, r1
 800dd3c:	7812      	ldrb	r2, [r2, #0]
 800dd3e:	701a      	strb	r2, [r3, #0]
										n5++;
 800dd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd42:	3301      	adds	r3, #1
 800dd44:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800dd46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	441a      	add	r2, r3
 800dd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd50:	441a      	add	r2, r3
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	dde0      	ble.n	800dd1c <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800dd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd60:	4413      	add	r3, r2
 800dd62:	1e5a      	subs	r2, r3, #1
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800dd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd6c:	601a      	str	r2, [r3, #0]
							estado=3;
 800dd6e:	2303      	movs	r3, #3
 800dd70:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800dd72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd74:	2b04      	cmp	r3, #4
 800dd76:	f040 80bd 	bne.w	800def4 <FT_String_ND+0x4e8>
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	f040 80b9 	bne.w	800def4 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800dd82:	e012      	b.n	800ddaa <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800dd84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	1ad2      	subs	r2, r2, r3
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	4413      	add	r3, r2
 800dd8e:	461a      	mov	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	441a      	add	r2, r3
 800dd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd98:	440b      	add	r3, r1
 800dd9a:	7812      	ldrb	r2, [r2, #0]
 800dd9c:	701a      	strb	r2, [r3, #0]
								n4++;
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	3301      	adds	r3, #1
 800dda2:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800dda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dda8:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ddaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	1ad2      	subs	r2, r2, r3
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	4413      	add	r3, r2
 800ddb4:	69fa      	ldr	r2, [r7, #28]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	dae4      	bge.n	800dd84 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ddba:	4917      	ldr	r1, [pc, #92]	; (800de18 <FT_String_ND+0x40c>)
 800ddbc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ddbe:	f000 fbab 	bl	800e518 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ddc2:	4916      	ldr	r1, [pc, #88]	; (800de1c <FT_String_ND+0x410>)
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	f000 fba7 	bl	800e518 <strtok>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f000 f9e4 	bl	800e19a <atoi>
 800ddd2:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800ddd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddda:	429a      	cmp	r2, r3
 800dddc:	db02      	blt.n	800dde4 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800ddde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dde0:	3b01      	subs	r3, #1
 800dde2:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800dde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dde6:	3306      	adds	r3, #6
 800dde8:	222c      	movs	r2, #44	; 0x2c
 800ddea:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ddec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddee:	2b09      	cmp	r3, #9
 800ddf0:	dc07      	bgt.n	800de02 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800ddf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	223a      	movs	r2, #58	; 0x3a
 800ddf8:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	3309      	adds	r3, #9
 800ddfe:	627b      	str	r3, [r7, #36]	; 0x24
 800de00:	e019      	b.n	800de36 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800de02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de04:	2b63      	cmp	r3, #99	; 0x63
 800de06:	dc0b      	bgt.n	800de20 <FT_String_ND+0x414>
														{
															c[9]=':';
 800de08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de0a:	3309      	adds	r3, #9
 800de0c:	223a      	movs	r2, #58	; 0x3a
 800de0e:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800de10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de12:	330a      	adds	r3, #10
 800de14:	627b      	str	r3, [r7, #36]	; 0x24
 800de16:	e00e      	b.n	800de36 <FT_String_ND+0x42a>
 800de18:	0800fd1c 	.word	0x0800fd1c
 800de1c:	0800fd20 	.word	0x0800fd20
														}
														else
														{
														if (lngd < 1000)
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de26:	da06      	bge.n	800de36 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800de28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de2a:	330a      	adds	r3, #10
 800de2c:	223a      	movs	r2, #58	; 0x3a
 800de2e:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	330b      	adds	r3, #11
 800de34:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800de36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de3a:	601a      	str	r2, [r3, #0]
							n4=0;
 800de3c:	2300      	movs	r3, #0
 800de3e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800de40:	e016      	b.n	800de70 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800de42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	1ad2      	subs	r2, r2, r3
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4a:	441a      	add	r2, r3
 800de4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4e:	4413      	add	r3, r2
 800de50:	461a      	mov	r2, r3
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	441a      	add	r2, r3
 800de56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de58:	69bb      	ldr	r3, [r7, #24]
 800de5a:	1ac9      	subs	r1, r1, r3
 800de5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5e:	440b      	add	r3, r1
 800de60:	4619      	mov	r1, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	440b      	add	r3, r1
 800de66:	7812      	ldrb	r2, [r2, #0]
 800de68:	701a      	strb	r2, [r3, #0]
								n4++;
 800de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6c:	3301      	adds	r3, #1
 800de6e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800de70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	1ad2      	subs	r2, r2, r3
 800de76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de78:	441a      	add	r2, r3
 800de7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7c:	4413      	add	r3, r2
 800de7e:	69fa      	ldr	r2, [r7, #28]
 800de80:	429a      	cmp	r2, r3
 800de82:	dade      	bge.n	800de42 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800de84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de88:	441a      	add	r2, r3
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	1e5a      	subs	r2, r3, #1
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	601a      	str	r2, [r3, #0]
							n5=0;
 800de94:	2300      	movs	r3, #0
 800de96:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800de98:	e00f      	b.n	800deba <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800de9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9e:	1ad2      	subs	r2, r2, r3
 800dea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea2:	4413      	add	r3, r2
 800dea4:	461a      	mov	r2, r3
 800dea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dea8:	441a      	add	r2, r3
 800deaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800deae:	440b      	add	r3, r1
 800deb0:	7812      	ldrb	r2, [r2, #0]
 800deb2:	701a      	strb	r2, [r3, #0]
								n5++;
 800deb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb6:	3301      	adds	r3, #1
 800deb8:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800deba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	1ad2      	subs	r2, r2, r3
 800dec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec2:	441a      	add	r2, r3
 800dec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	dbe6      	blt.n	800de9a <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800decc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ded0:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ded2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded8:	441a      	add	r2, r3
 800deda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dedc:	1ad2      	subs	r2, r2, r3
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4413      	add	r3, r2
 800dee4:	69fa      	ldr	r2, [r7, #28]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d102      	bne.n	800def0 <FT_String_ND+0x4e4>
							{
								estado=4;
 800deea:	2304      	movs	r3, #4
 800deec:	623b      	str	r3, [r7, #32]
 800deee:	e001      	b.n	800def4 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800def0:	2305      	movs	r3, #5
 800def2:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800def4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800def6:	2b05      	cmp	r3, #5
 800def8:	f040 80c5 	bne.w	800e086 <FT_String_ND+0x67a>
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	2b01      	cmp	r3, #1
 800df00:	f040 80c1 	bne.w	800e086 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800df04:	e012      	b.n	800df2c <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800df06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	1ad2      	subs	r2, r2, r3
 800df0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0e:	4413      	add	r3, r2
 800df10:	461a      	mov	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	441a      	add	r2, r3
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800df1a:	440b      	add	r3, r1
 800df1c:	7812      	ldrb	r2, [r2, #0]
 800df1e:	701a      	strb	r2, [r3, #0]
								n4++;
 800df20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df22:	3301      	adds	r3, #1
 800df24:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800df26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df2a:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800df2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	1ad2      	subs	r2, r2, r3
 800df32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df34:	4413      	add	r3, r2
 800df36:	69fa      	ldr	r2, [r7, #28]
 800df38:	429a      	cmp	r2, r3
 800df3a:	dae4      	bge.n	800df06 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800df3c:	4955      	ldr	r1, [pc, #340]	; (800e094 <FT_String_ND+0x688>)
 800df3e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800df40:	f000 faea 	bl	800e518 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800df44:	4954      	ldr	r1, [pc, #336]	; (800e098 <FT_String_ND+0x68c>)
 800df46:	2000      	movs	r0, #0
 800df48:	f000 fae6 	bl	800e518 <strtok>
 800df4c:	4603      	mov	r3, r0
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 f923 	bl	800e19a <atoi>
 800df54:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800df56:	4950      	ldr	r1, [pc, #320]	; (800e098 <FT_String_ND+0x68c>)
 800df58:	2000      	movs	r0, #0
 800df5a:	f000 fadd 	bl	800e518 <strtok>
 800df5e:	4603      	mov	r3, r0
 800df60:	4618      	mov	r0, r3
 800df62:	f000 f91a 	bl	800e19a <atoi>
 800df66:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800df68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df6a:	3b01      	subs	r3, #1
 800df6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df6e:	429a      	cmp	r2, r3
 800df70:	db02      	blt.n	800df78 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800df72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df74:	3b01      	subs	r3, #1
 800df76:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800df78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df7a:	3306      	adds	r3, #6
 800df7c:	222c      	movs	r2, #44	; 0x2c
 800df7e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	2b09      	cmp	r3, #9
 800df84:	dc07      	bgt.n	800df96 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800df86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df88:	330a      	adds	r3, #10
 800df8a:	223a      	movs	r2, #58	; 0x3a
 800df8c:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800df8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df90:	330b      	adds	r3, #11
 800df92:	627b      	str	r3, [r7, #36]	; 0x24
 800df94:	e015      	b.n	800dfc2 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df98:	2b63      	cmp	r3, #99	; 0x63
 800df9a:	dc07      	bgt.n	800dfac <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800df9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df9e:	330b      	adds	r3, #11
 800dfa0:	223a      	movs	r2, #58	; 0x3a
 800dfa2:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800dfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa6:	330c      	adds	r3, #12
 800dfa8:	627b      	str	r3, [r7, #36]	; 0x24
 800dfaa:	e00a      	b.n	800dfc2 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfb2:	da06      	bge.n	800dfc2 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800dfb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfb6:	330c      	adds	r3, #12
 800dfb8:	223a      	movs	r2, #58	; 0x3a
 800dfba:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbe:	330d      	adds	r3, #13
 800dfc0:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800dfc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfc6:	601a      	str	r2, [r3, #0]
							n4=0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dfcc:	e016      	b.n	800dffc <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800dfce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	1ad2      	subs	r2, r2, r3
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd6:	441a      	add	r2, r3
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	4413      	add	r3, r2
 800dfdc:	461a      	mov	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	441a      	add	r2, r3
 800dfe2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	1ac9      	subs	r1, r1, r3
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfea:	440b      	add	r3, r1
 800dfec:	4619      	mov	r1, r3
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	440b      	add	r3, r1
 800dff2:	7812      	ldrb	r2, [r2, #0]
 800dff4:	701a      	strb	r2, [r3, #0]
								n4++;
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	3301      	adds	r3, #1
 800dffa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	1ad2      	subs	r2, r2, r3
 800e002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e004:	441a      	add	r2, r3
 800e006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e008:	4413      	add	r3, r2
 800e00a:	69fa      	ldr	r2, [r7, #28]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	dade      	bge.n	800dfce <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	441a      	add	r2, r3
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	1e5a      	subs	r2, r3, #1
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	601a      	str	r2, [r3, #0]
							n5=0;
 800e020:	2300      	movs	r3, #0
 800e022:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e024:	e00f      	b.n	800e046 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02a:	1ad2      	subs	r2, r2, r3
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	4413      	add	r3, r2
 800e030:	461a      	mov	r2, r3
 800e032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e034:	441a      	add	r2, r3
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e038:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e03a:	440b      	add	r3, r1
 800e03c:	7812      	ldrb	r2, [r2, #0]
 800e03e:	701a      	strb	r2, [r3, #0]
								n5++;
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e042:	3301      	adds	r3, #1
 800e044:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04a:	1ad2      	subs	r2, r2, r3
 800e04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04e:	441a      	add	r2, r3
 800e050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	dbe6      	blt.n	800e026 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e05a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e05c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e064:	441a      	add	r2, r3
 800e066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e068:	1ad2      	subs	r2, r2, r3
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4413      	add	r3, r2
 800e070:	69fa      	ldr	r2, [r7, #28]
 800e072:	429a      	cmp	r2, r3
 800e074:	d105      	bne.n	800e082 <FT_String_ND+0x676>
							{
								estado=4;
 800e076:	2304      	movs	r3, #4
 800e078:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800e07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e07c:	693a      	ldr	r2, [r7, #16]
 800e07e:	601a      	str	r2, [r3, #0]
 800e080:	e001      	b.n	800e086 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800e082:	2305      	movs	r3, #5
 800e084:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	e000      	b.n	800e08c <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800e08a:	2302      	movs	r3, #2
			}
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3740      	adds	r7, #64	; 0x40
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	0800fd1c 	.word	0x0800fd1c
 800e098:	0800fd20 	.word	0x0800fd20

0800e09c <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b088      	sub	sp, #32
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800e0a6:	2330      	movs	r3, #48	; 0x30
 800e0a8:	60bb      	str	r3, [r7, #8]
 800e0aa:	f107 030c 	add.w	r3, r7, #12
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	601a      	str	r2, [r3, #0]
 800e0b2:	605a      	str	r2, [r3, #4]
 800e0b4:	609a      	str	r2, [r3, #8]
 800e0b6:	60da      	str	r2, [r3, #12]
int i=0;	
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800e0bc:	f107 0308 	add.w	r3, r7, #8
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	490f      	ldr	r1, [pc, #60]	; (800e100 <INTOA+0x64>)
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f000 f9a9 	bl	800e41c <siprintf>
		while(i<=strlen(origbuff))
 800e0ca:	e00b      	b.n	800e0e4 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	1c5a      	adds	r2, r3, #1
 800e0d0:	603a      	str	r2, [r7, #0]
 800e0d2:	f107 0108 	add.w	r1, r7, #8
 800e0d6:	69fa      	ldr	r2, [r7, #28]
 800e0d8:	440a      	add	r2, r1
 800e0da:	7812      	ldrb	r2, [r2, #0]
 800e0dc:	701a      	strb	r2, [r3, #0]
		i++;
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800e0e4:	f107 0308 	add.w	r3, r7, #8
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7f2 f883 	bl	80001f4 <strlen>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d2ea      	bcs.n	800e0cc <INTOA+0x30>
		}
		return(i);
 800e0f6:	69fb      	ldr	r3, [r7, #28]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3720      	adds	r7, #32
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	0800fd24 	.word	0x0800fd24

0800e104 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b088      	sub	sp, #32
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
 800e110:	603b      	str	r3, [r7, #0]
int x =0;
 800e112:	2300      	movs	r3, #0
 800e114:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800e116:	2300      	movs	r3, #0
 800e118:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800e11a:	f107 0310 	add.w	r3, r7, #16
 800e11e:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d105      	bne.n	800e132 <CopiaVector+0x2e>
 800e126:	68b8      	ldr	r0, [r7, #8]
 800e128:	f7f2 f864 	bl	80001f4 <strlen>
 800e12c:	4603      	mov	r3, r0
 800e12e:	61bb      	str	r3, [r7, #24]
 800e130:	e02e      	b.n	800e190 <CopiaVector+0x8c>
else
	{
		x=c;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e13c:	dd01      	ble.n	800e142 <CopiaVector+0x3e>
			{
				return(1);
 800e13e:	2301      	movs	r3, #1
 800e140:	e027      	b.n	800e192 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800e142:	2300      	movs	r3, #0
 800e144:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e146:	e00a      	b.n	800e15e <CopiaVector+0x5a>
				{
					*a++=*b++;
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	1c53      	adds	r3, r2, #1
 800e14c:	60bb      	str	r3, [r7, #8]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	1c59      	adds	r1, r3, #1
 800e152:	60f9      	str	r1, [r7, #12]
 800e154:	7812      	ldrb	r2, [r2, #0]
 800e156:	701a      	strb	r2, [r3, #0]
					p++;
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	3301      	adds	r3, #1
 800e15c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e15e:	69fa      	ldr	r2, [r7, #28]
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	429a      	cmp	r2, r3
 800e164:	dbf0      	blt.n	800e148 <CopiaVector+0x44>
				}
				if (d==1)
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d111      	bne.n	800e190 <CopiaVector+0x8c>
				{
				  p=c;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e170:	e008      	b.n	800e184 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	60fa      	str	r2, [r7, #12]
 800e178:	697a      	ldr	r2, [r7, #20]
 800e17a:	7812      	ldrb	r2, [r2, #0]
 800e17c:	701a      	strb	r2, [r3, #0]
					  p++;
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	3301      	adds	r3, #1
 800e182:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	429a      	cmp	r2, r3
 800e18a:	daf2      	bge.n	800e172 <CopiaVector+0x6e>
				  }
				return (0);
 800e18c:	2300      	movs	r3, #0
 800e18e:	e000      	b.n	800e192 <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800e190:	2301      	movs	r3, #1
}
 800e192:	4618      	mov	r0, r3
 800e194:	3720      	adds	r7, #32
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <atoi>:
 800e19a:	220a      	movs	r2, #10
 800e19c:	2100      	movs	r1, #0
 800e19e:	f000 b883 	b.w	800e2a8 <strtol>
	...

0800e1a4 <_strtol_l.constprop.0>:
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1aa:	d001      	beq.n	800e1b0 <_strtol_l.constprop.0+0xc>
 800e1ac:	2b24      	cmp	r3, #36	; 0x24
 800e1ae:	d906      	bls.n	800e1be <_strtol_l.constprop.0+0x1a>
 800e1b0:	f000 fa54 	bl	800e65c <__errno>
 800e1b4:	2316      	movs	r3, #22
 800e1b6:	6003      	str	r3, [r0, #0]
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e2a4 <_strtol_l.constprop.0+0x100>
 800e1c2:	460d      	mov	r5, r1
 800e1c4:	462e      	mov	r6, r5
 800e1c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e1ce:	f017 0708 	ands.w	r7, r7, #8
 800e1d2:	d1f7      	bne.n	800e1c4 <_strtol_l.constprop.0+0x20>
 800e1d4:	2c2d      	cmp	r4, #45	; 0x2d
 800e1d6:	d132      	bne.n	800e23e <_strtol_l.constprop.0+0x9a>
 800e1d8:	782c      	ldrb	r4, [r5, #0]
 800e1da:	2701      	movs	r7, #1
 800e1dc:	1cb5      	adds	r5, r6, #2
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d05b      	beq.n	800e29a <_strtol_l.constprop.0+0xf6>
 800e1e2:	2b10      	cmp	r3, #16
 800e1e4:	d109      	bne.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e1e6:	2c30      	cmp	r4, #48	; 0x30
 800e1e8:	d107      	bne.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e1ea:	782c      	ldrb	r4, [r5, #0]
 800e1ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e1f0:	2c58      	cmp	r4, #88	; 0x58
 800e1f2:	d14d      	bne.n	800e290 <_strtol_l.constprop.0+0xec>
 800e1f4:	786c      	ldrb	r4, [r5, #1]
 800e1f6:	2310      	movs	r3, #16
 800e1f8:	3502      	adds	r5, #2
 800e1fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e1fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800e202:	f04f 0e00 	mov.w	lr, #0
 800e206:	fbb8 f9f3 	udiv	r9, r8, r3
 800e20a:	4676      	mov	r6, lr
 800e20c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e210:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e214:	f1bc 0f09 	cmp.w	ip, #9
 800e218:	d816      	bhi.n	800e248 <_strtol_l.constprop.0+0xa4>
 800e21a:	4664      	mov	r4, ip
 800e21c:	42a3      	cmp	r3, r4
 800e21e:	dd24      	ble.n	800e26a <_strtol_l.constprop.0+0xc6>
 800e220:	f1be 3fff 	cmp.w	lr, #4294967295
 800e224:	d008      	beq.n	800e238 <_strtol_l.constprop.0+0x94>
 800e226:	45b1      	cmp	r9, r6
 800e228:	d31c      	bcc.n	800e264 <_strtol_l.constprop.0+0xc0>
 800e22a:	d101      	bne.n	800e230 <_strtol_l.constprop.0+0x8c>
 800e22c:	45a2      	cmp	sl, r4
 800e22e:	db19      	blt.n	800e264 <_strtol_l.constprop.0+0xc0>
 800e230:	fb06 4603 	mla	r6, r6, r3, r4
 800e234:	f04f 0e01 	mov.w	lr, #1
 800e238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e23c:	e7e8      	b.n	800e210 <_strtol_l.constprop.0+0x6c>
 800e23e:	2c2b      	cmp	r4, #43	; 0x2b
 800e240:	bf04      	itt	eq
 800e242:	782c      	ldrbeq	r4, [r5, #0]
 800e244:	1cb5      	addeq	r5, r6, #2
 800e246:	e7ca      	b.n	800e1de <_strtol_l.constprop.0+0x3a>
 800e248:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e24c:	f1bc 0f19 	cmp.w	ip, #25
 800e250:	d801      	bhi.n	800e256 <_strtol_l.constprop.0+0xb2>
 800e252:	3c37      	subs	r4, #55	; 0x37
 800e254:	e7e2      	b.n	800e21c <_strtol_l.constprop.0+0x78>
 800e256:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e25a:	f1bc 0f19 	cmp.w	ip, #25
 800e25e:	d804      	bhi.n	800e26a <_strtol_l.constprop.0+0xc6>
 800e260:	3c57      	subs	r4, #87	; 0x57
 800e262:	e7db      	b.n	800e21c <_strtol_l.constprop.0+0x78>
 800e264:	f04f 3eff 	mov.w	lr, #4294967295
 800e268:	e7e6      	b.n	800e238 <_strtol_l.constprop.0+0x94>
 800e26a:	f1be 3fff 	cmp.w	lr, #4294967295
 800e26e:	d105      	bne.n	800e27c <_strtol_l.constprop.0+0xd8>
 800e270:	2322      	movs	r3, #34	; 0x22
 800e272:	6003      	str	r3, [r0, #0]
 800e274:	4646      	mov	r6, r8
 800e276:	b942      	cbnz	r2, 800e28a <_strtol_l.constprop.0+0xe6>
 800e278:	4630      	mov	r0, r6
 800e27a:	e79e      	b.n	800e1ba <_strtol_l.constprop.0+0x16>
 800e27c:	b107      	cbz	r7, 800e280 <_strtol_l.constprop.0+0xdc>
 800e27e:	4276      	negs	r6, r6
 800e280:	2a00      	cmp	r2, #0
 800e282:	d0f9      	beq.n	800e278 <_strtol_l.constprop.0+0xd4>
 800e284:	f1be 0f00 	cmp.w	lr, #0
 800e288:	d000      	beq.n	800e28c <_strtol_l.constprop.0+0xe8>
 800e28a:	1e69      	subs	r1, r5, #1
 800e28c:	6011      	str	r1, [r2, #0]
 800e28e:	e7f3      	b.n	800e278 <_strtol_l.constprop.0+0xd4>
 800e290:	2430      	movs	r4, #48	; 0x30
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1b1      	bne.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e296:	2308      	movs	r3, #8
 800e298:	e7af      	b.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e29a:	2c30      	cmp	r4, #48	; 0x30
 800e29c:	d0a5      	beq.n	800e1ea <_strtol_l.constprop.0+0x46>
 800e29e:	230a      	movs	r3, #10
 800e2a0:	e7ab      	b.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e2a2:	bf00      	nop
 800e2a4:	0800fd41 	.word	0x0800fd41

0800e2a8 <strtol>:
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	460a      	mov	r2, r1
 800e2ac:	4601      	mov	r1, r0
 800e2ae:	4802      	ldr	r0, [pc, #8]	; (800e2b8 <strtol+0x10>)
 800e2b0:	6800      	ldr	r0, [r0, #0]
 800e2b2:	f7ff bf77 	b.w	800e1a4 <_strtol_l.constprop.0>
 800e2b6:	bf00      	nop
 800e2b8:	20000174 	.word	0x20000174

0800e2bc <std>:
 800e2bc:	2300      	movs	r3, #0
 800e2be:	b510      	push	{r4, lr}
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	e9c0 3300 	strd	r3, r3, [r0]
 800e2c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2ca:	6083      	str	r3, [r0, #8]
 800e2cc:	8181      	strh	r1, [r0, #12]
 800e2ce:	6643      	str	r3, [r0, #100]	; 0x64
 800e2d0:	81c2      	strh	r2, [r0, #14]
 800e2d2:	6183      	str	r3, [r0, #24]
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	2208      	movs	r2, #8
 800e2d8:	305c      	adds	r0, #92	; 0x5c
 800e2da:	f000 f902 	bl	800e4e2 <memset>
 800e2de:	4b05      	ldr	r3, [pc, #20]	; (800e2f4 <std+0x38>)
 800e2e0:	6263      	str	r3, [r4, #36]	; 0x24
 800e2e2:	4b05      	ldr	r3, [pc, #20]	; (800e2f8 <std+0x3c>)
 800e2e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2e6:	4b05      	ldr	r3, [pc, #20]	; (800e2fc <std+0x40>)
 800e2e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2ea:	4b05      	ldr	r3, [pc, #20]	; (800e300 <std+0x44>)
 800e2ec:	6224      	str	r4, [r4, #32]
 800e2ee:	6323      	str	r3, [r4, #48]	; 0x30
 800e2f0:	bd10      	pop	{r4, pc}
 800e2f2:	bf00      	nop
 800e2f4:	0800e45d 	.word	0x0800e45d
 800e2f8:	0800e47f 	.word	0x0800e47f
 800e2fc:	0800e4b7 	.word	0x0800e4b7
 800e300:	0800e4db 	.word	0x0800e4db

0800e304 <stdio_exit_handler>:
 800e304:	4a02      	ldr	r2, [pc, #8]	; (800e310 <stdio_exit_handler+0xc>)
 800e306:	4903      	ldr	r1, [pc, #12]	; (800e314 <stdio_exit_handler+0x10>)
 800e308:	4803      	ldr	r0, [pc, #12]	; (800e318 <stdio_exit_handler+0x14>)
 800e30a:	f000 b869 	b.w	800e3e0 <_fwalk_sglue>
 800e30e:	bf00      	nop
 800e310:	2000011c 	.word	0x2000011c
 800e314:	0800efdd 	.word	0x0800efdd
 800e318:	20000128 	.word	0x20000128

0800e31c <cleanup_stdio>:
 800e31c:	6841      	ldr	r1, [r0, #4]
 800e31e:	4b0c      	ldr	r3, [pc, #48]	; (800e350 <cleanup_stdio+0x34>)
 800e320:	4299      	cmp	r1, r3
 800e322:	b510      	push	{r4, lr}
 800e324:	4604      	mov	r4, r0
 800e326:	d001      	beq.n	800e32c <cleanup_stdio+0x10>
 800e328:	f000 fe58 	bl	800efdc <_fflush_r>
 800e32c:	68a1      	ldr	r1, [r4, #8]
 800e32e:	4b09      	ldr	r3, [pc, #36]	; (800e354 <cleanup_stdio+0x38>)
 800e330:	4299      	cmp	r1, r3
 800e332:	d002      	beq.n	800e33a <cleanup_stdio+0x1e>
 800e334:	4620      	mov	r0, r4
 800e336:	f000 fe51 	bl	800efdc <_fflush_r>
 800e33a:	68e1      	ldr	r1, [r4, #12]
 800e33c:	4b06      	ldr	r3, [pc, #24]	; (800e358 <cleanup_stdio+0x3c>)
 800e33e:	4299      	cmp	r1, r3
 800e340:	d004      	beq.n	800e34c <cleanup_stdio+0x30>
 800e342:	4620      	mov	r0, r4
 800e344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e348:	f000 be48 	b.w	800efdc <_fflush_r>
 800e34c:	bd10      	pop	{r4, pc}
 800e34e:	bf00      	nop
 800e350:	200035bc 	.word	0x200035bc
 800e354:	20003624 	.word	0x20003624
 800e358:	2000368c 	.word	0x2000368c

0800e35c <global_stdio_init.part.0>:
 800e35c:	b510      	push	{r4, lr}
 800e35e:	4b0b      	ldr	r3, [pc, #44]	; (800e38c <global_stdio_init.part.0+0x30>)
 800e360:	4c0b      	ldr	r4, [pc, #44]	; (800e390 <global_stdio_init.part.0+0x34>)
 800e362:	4a0c      	ldr	r2, [pc, #48]	; (800e394 <global_stdio_init.part.0+0x38>)
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	4620      	mov	r0, r4
 800e368:	2200      	movs	r2, #0
 800e36a:	2104      	movs	r1, #4
 800e36c:	f7ff ffa6 	bl	800e2bc <std>
 800e370:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e374:	2201      	movs	r2, #1
 800e376:	2109      	movs	r1, #9
 800e378:	f7ff ffa0 	bl	800e2bc <std>
 800e37c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e380:	2202      	movs	r2, #2
 800e382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e386:	2112      	movs	r1, #18
 800e388:	f7ff bf98 	b.w	800e2bc <std>
 800e38c:	200036f4 	.word	0x200036f4
 800e390:	200035bc 	.word	0x200035bc
 800e394:	0800e305 	.word	0x0800e305

0800e398 <__sfp_lock_acquire>:
 800e398:	4801      	ldr	r0, [pc, #4]	; (800e3a0 <__sfp_lock_acquire+0x8>)
 800e39a:	f000 b989 	b.w	800e6b0 <__retarget_lock_acquire_recursive>
 800e39e:	bf00      	nop
 800e3a0:	200036fd 	.word	0x200036fd

0800e3a4 <__sfp_lock_release>:
 800e3a4:	4801      	ldr	r0, [pc, #4]	; (800e3ac <__sfp_lock_release+0x8>)
 800e3a6:	f000 b984 	b.w	800e6b2 <__retarget_lock_release_recursive>
 800e3aa:	bf00      	nop
 800e3ac:	200036fd 	.word	0x200036fd

0800e3b0 <__sinit>:
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	f7ff fff0 	bl	800e398 <__sfp_lock_acquire>
 800e3b8:	6a23      	ldr	r3, [r4, #32]
 800e3ba:	b11b      	cbz	r3, 800e3c4 <__sinit+0x14>
 800e3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3c0:	f7ff bff0 	b.w	800e3a4 <__sfp_lock_release>
 800e3c4:	4b04      	ldr	r3, [pc, #16]	; (800e3d8 <__sinit+0x28>)
 800e3c6:	6223      	str	r3, [r4, #32]
 800e3c8:	4b04      	ldr	r3, [pc, #16]	; (800e3dc <__sinit+0x2c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1f5      	bne.n	800e3bc <__sinit+0xc>
 800e3d0:	f7ff ffc4 	bl	800e35c <global_stdio_init.part.0>
 800e3d4:	e7f2      	b.n	800e3bc <__sinit+0xc>
 800e3d6:	bf00      	nop
 800e3d8:	0800e31d 	.word	0x0800e31d
 800e3dc:	200036f4 	.word	0x200036f4

0800e3e0 <_fwalk_sglue>:
 800e3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e4:	4607      	mov	r7, r0
 800e3e6:	4688      	mov	r8, r1
 800e3e8:	4614      	mov	r4, r2
 800e3ea:	2600      	movs	r6, #0
 800e3ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3f0:	f1b9 0901 	subs.w	r9, r9, #1
 800e3f4:	d505      	bpl.n	800e402 <_fwalk_sglue+0x22>
 800e3f6:	6824      	ldr	r4, [r4, #0]
 800e3f8:	2c00      	cmp	r4, #0
 800e3fa:	d1f7      	bne.n	800e3ec <_fwalk_sglue+0xc>
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e402:	89ab      	ldrh	r3, [r5, #12]
 800e404:	2b01      	cmp	r3, #1
 800e406:	d907      	bls.n	800e418 <_fwalk_sglue+0x38>
 800e408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e40c:	3301      	adds	r3, #1
 800e40e:	d003      	beq.n	800e418 <_fwalk_sglue+0x38>
 800e410:	4629      	mov	r1, r5
 800e412:	4638      	mov	r0, r7
 800e414:	47c0      	blx	r8
 800e416:	4306      	orrs	r6, r0
 800e418:	3568      	adds	r5, #104	; 0x68
 800e41a:	e7e9      	b.n	800e3f0 <_fwalk_sglue+0x10>

0800e41c <siprintf>:
 800e41c:	b40e      	push	{r1, r2, r3}
 800e41e:	b500      	push	{lr}
 800e420:	b09c      	sub	sp, #112	; 0x70
 800e422:	ab1d      	add	r3, sp, #116	; 0x74
 800e424:	9002      	str	r0, [sp, #8]
 800e426:	9006      	str	r0, [sp, #24]
 800e428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e42c:	4809      	ldr	r0, [pc, #36]	; (800e454 <siprintf+0x38>)
 800e42e:	9107      	str	r1, [sp, #28]
 800e430:	9104      	str	r1, [sp, #16]
 800e432:	4909      	ldr	r1, [pc, #36]	; (800e458 <siprintf+0x3c>)
 800e434:	f853 2b04 	ldr.w	r2, [r3], #4
 800e438:	9105      	str	r1, [sp, #20]
 800e43a:	6800      	ldr	r0, [r0, #0]
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	a902      	add	r1, sp, #8
 800e440:	f000 fab8 	bl	800e9b4 <_svfiprintf_r>
 800e444:	9b02      	ldr	r3, [sp, #8]
 800e446:	2200      	movs	r2, #0
 800e448:	701a      	strb	r2, [r3, #0]
 800e44a:	b01c      	add	sp, #112	; 0x70
 800e44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e450:	b003      	add	sp, #12
 800e452:	4770      	bx	lr
 800e454:	20000174 	.word	0x20000174
 800e458:	ffff0208 	.word	0xffff0208

0800e45c <__sread>:
 800e45c:	b510      	push	{r4, lr}
 800e45e:	460c      	mov	r4, r1
 800e460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e464:	f000 f8d6 	bl	800e614 <_read_r>
 800e468:	2800      	cmp	r0, #0
 800e46a:	bfab      	itete	ge
 800e46c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e46e:	89a3      	ldrhlt	r3, [r4, #12]
 800e470:	181b      	addge	r3, r3, r0
 800e472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e476:	bfac      	ite	ge
 800e478:	6563      	strge	r3, [r4, #84]	; 0x54
 800e47a:	81a3      	strhlt	r3, [r4, #12]
 800e47c:	bd10      	pop	{r4, pc}

0800e47e <__swrite>:
 800e47e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e482:	461f      	mov	r7, r3
 800e484:	898b      	ldrh	r3, [r1, #12]
 800e486:	05db      	lsls	r3, r3, #23
 800e488:	4605      	mov	r5, r0
 800e48a:	460c      	mov	r4, r1
 800e48c:	4616      	mov	r6, r2
 800e48e:	d505      	bpl.n	800e49c <__swrite+0x1e>
 800e490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e494:	2302      	movs	r3, #2
 800e496:	2200      	movs	r2, #0
 800e498:	f000 f8aa 	bl	800e5f0 <_lseek_r>
 800e49c:	89a3      	ldrh	r3, [r4, #12]
 800e49e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4a6:	81a3      	strh	r3, [r4, #12]
 800e4a8:	4632      	mov	r2, r6
 800e4aa:	463b      	mov	r3, r7
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b2:	f000 b8c1 	b.w	800e638 <_write_r>

0800e4b6 <__sseek>:
 800e4b6:	b510      	push	{r4, lr}
 800e4b8:	460c      	mov	r4, r1
 800e4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4be:	f000 f897 	bl	800e5f0 <_lseek_r>
 800e4c2:	1c43      	adds	r3, r0, #1
 800e4c4:	89a3      	ldrh	r3, [r4, #12]
 800e4c6:	bf15      	itete	ne
 800e4c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4d2:	81a3      	strheq	r3, [r4, #12]
 800e4d4:	bf18      	it	ne
 800e4d6:	81a3      	strhne	r3, [r4, #12]
 800e4d8:	bd10      	pop	{r4, pc}

0800e4da <__sclose>:
 800e4da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4de:	f000 b877 	b.w	800e5d0 <_close_r>

0800e4e2 <memset>:
 800e4e2:	4402      	add	r2, r0
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d100      	bne.n	800e4ec <memset+0xa>
 800e4ea:	4770      	bx	lr
 800e4ec:	f803 1b01 	strb.w	r1, [r3], #1
 800e4f0:	e7f9      	b.n	800e4e6 <memset+0x4>

0800e4f2 <strncat>:
 800e4f2:	b530      	push	{r4, r5, lr}
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	7825      	ldrb	r5, [r4, #0]
 800e4f8:	4623      	mov	r3, r4
 800e4fa:	3401      	adds	r4, #1
 800e4fc:	2d00      	cmp	r5, #0
 800e4fe:	d1fa      	bne.n	800e4f6 <strncat+0x4>
 800e500:	3a01      	subs	r2, #1
 800e502:	d304      	bcc.n	800e50e <strncat+0x1c>
 800e504:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e508:	f803 4b01 	strb.w	r4, [r3], #1
 800e50c:	b904      	cbnz	r4, 800e510 <strncat+0x1e>
 800e50e:	bd30      	pop	{r4, r5, pc}
 800e510:	2a00      	cmp	r2, #0
 800e512:	d1f5      	bne.n	800e500 <strncat+0xe>
 800e514:	701a      	strb	r2, [r3, #0]
 800e516:	e7f3      	b.n	800e500 <strncat+0xe>

0800e518 <strtok>:
 800e518:	4b16      	ldr	r3, [pc, #88]	; (800e574 <strtok+0x5c>)
 800e51a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e51c:	681e      	ldr	r6, [r3, #0]
 800e51e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800e520:	4605      	mov	r5, r0
 800e522:	b9fc      	cbnz	r4, 800e564 <strtok+0x4c>
 800e524:	2050      	movs	r0, #80	; 0x50
 800e526:	9101      	str	r1, [sp, #4]
 800e528:	f000 f936 	bl	800e798 <malloc>
 800e52c:	9901      	ldr	r1, [sp, #4]
 800e52e:	6470      	str	r0, [r6, #68]	; 0x44
 800e530:	4602      	mov	r2, r0
 800e532:	b920      	cbnz	r0, 800e53e <strtok+0x26>
 800e534:	4b10      	ldr	r3, [pc, #64]	; (800e578 <strtok+0x60>)
 800e536:	4811      	ldr	r0, [pc, #68]	; (800e57c <strtok+0x64>)
 800e538:	215b      	movs	r1, #91	; 0x5b
 800e53a:	f000 f8c3 	bl	800e6c4 <__assert_func>
 800e53e:	e9c0 4400 	strd	r4, r4, [r0]
 800e542:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e546:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e54a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e54e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e552:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e556:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e55a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e55e:	6184      	str	r4, [r0, #24]
 800e560:	7704      	strb	r4, [r0, #28]
 800e562:	6244      	str	r4, [r0, #36]	; 0x24
 800e564:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800e566:	2301      	movs	r3, #1
 800e568:	4628      	mov	r0, r5
 800e56a:	b002      	add	sp, #8
 800e56c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e570:	f000 b806 	b.w	800e580 <__strtok_r>
 800e574:	20000174 	.word	0x20000174
 800e578:	0800fe41 	.word	0x0800fe41
 800e57c:	0800fe58 	.word	0x0800fe58

0800e580 <__strtok_r>:
 800e580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e582:	b908      	cbnz	r0, 800e588 <__strtok_r+0x8>
 800e584:	6810      	ldr	r0, [r2, #0]
 800e586:	b188      	cbz	r0, 800e5ac <__strtok_r+0x2c>
 800e588:	4604      	mov	r4, r0
 800e58a:	4620      	mov	r0, r4
 800e58c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e590:	460f      	mov	r7, r1
 800e592:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e596:	b91e      	cbnz	r6, 800e5a0 <__strtok_r+0x20>
 800e598:	b965      	cbnz	r5, 800e5b4 <__strtok_r+0x34>
 800e59a:	6015      	str	r5, [r2, #0]
 800e59c:	4628      	mov	r0, r5
 800e59e:	e005      	b.n	800e5ac <__strtok_r+0x2c>
 800e5a0:	42b5      	cmp	r5, r6
 800e5a2:	d1f6      	bne.n	800e592 <__strtok_r+0x12>
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1f0      	bne.n	800e58a <__strtok_r+0xa>
 800e5a8:	6014      	str	r4, [r2, #0]
 800e5aa:	7003      	strb	r3, [r0, #0]
 800e5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ae:	461c      	mov	r4, r3
 800e5b0:	e00c      	b.n	800e5cc <__strtok_r+0x4c>
 800e5b2:	b915      	cbnz	r5, 800e5ba <__strtok_r+0x3a>
 800e5b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5b8:	460e      	mov	r6, r1
 800e5ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e5be:	42ab      	cmp	r3, r5
 800e5c0:	d1f7      	bne.n	800e5b2 <__strtok_r+0x32>
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d0f3      	beq.n	800e5ae <__strtok_r+0x2e>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e5cc:	6014      	str	r4, [r2, #0]
 800e5ce:	e7ed      	b.n	800e5ac <__strtok_r+0x2c>

0800e5d0 <_close_r>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	4d06      	ldr	r5, [pc, #24]	; (800e5ec <_close_r+0x1c>)
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	4608      	mov	r0, r1
 800e5da:	602b      	str	r3, [r5, #0]
 800e5dc:	f7f3 ff75 	bl	80024ca <_close>
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	d102      	bne.n	800e5ea <_close_r+0x1a>
 800e5e4:	682b      	ldr	r3, [r5, #0]
 800e5e6:	b103      	cbz	r3, 800e5ea <_close_r+0x1a>
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	bd38      	pop	{r3, r4, r5, pc}
 800e5ec:	200036f8 	.word	0x200036f8

0800e5f0 <_lseek_r>:
 800e5f0:	b538      	push	{r3, r4, r5, lr}
 800e5f2:	4d07      	ldr	r5, [pc, #28]	; (800e610 <_lseek_r+0x20>)
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	4608      	mov	r0, r1
 800e5f8:	4611      	mov	r1, r2
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	602a      	str	r2, [r5, #0]
 800e5fe:	461a      	mov	r2, r3
 800e600:	f7f3 ff8a 	bl	8002518 <_lseek>
 800e604:	1c43      	adds	r3, r0, #1
 800e606:	d102      	bne.n	800e60e <_lseek_r+0x1e>
 800e608:	682b      	ldr	r3, [r5, #0]
 800e60a:	b103      	cbz	r3, 800e60e <_lseek_r+0x1e>
 800e60c:	6023      	str	r3, [r4, #0]
 800e60e:	bd38      	pop	{r3, r4, r5, pc}
 800e610:	200036f8 	.word	0x200036f8

0800e614 <_read_r>:
 800e614:	b538      	push	{r3, r4, r5, lr}
 800e616:	4d07      	ldr	r5, [pc, #28]	; (800e634 <_read_r+0x20>)
 800e618:	4604      	mov	r4, r0
 800e61a:	4608      	mov	r0, r1
 800e61c:	4611      	mov	r1, r2
 800e61e:	2200      	movs	r2, #0
 800e620:	602a      	str	r2, [r5, #0]
 800e622:	461a      	mov	r2, r3
 800e624:	f7f3 ff18 	bl	8002458 <_read>
 800e628:	1c43      	adds	r3, r0, #1
 800e62a:	d102      	bne.n	800e632 <_read_r+0x1e>
 800e62c:	682b      	ldr	r3, [r5, #0]
 800e62e:	b103      	cbz	r3, 800e632 <_read_r+0x1e>
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	bd38      	pop	{r3, r4, r5, pc}
 800e634:	200036f8 	.word	0x200036f8

0800e638 <_write_r>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	4d07      	ldr	r5, [pc, #28]	; (800e658 <_write_r+0x20>)
 800e63c:	4604      	mov	r4, r0
 800e63e:	4608      	mov	r0, r1
 800e640:	4611      	mov	r1, r2
 800e642:	2200      	movs	r2, #0
 800e644:	602a      	str	r2, [r5, #0]
 800e646:	461a      	mov	r2, r3
 800e648:	f7f3 ff23 	bl	8002492 <_write>
 800e64c:	1c43      	adds	r3, r0, #1
 800e64e:	d102      	bne.n	800e656 <_write_r+0x1e>
 800e650:	682b      	ldr	r3, [r5, #0]
 800e652:	b103      	cbz	r3, 800e656 <_write_r+0x1e>
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	bd38      	pop	{r3, r4, r5, pc}
 800e658:	200036f8 	.word	0x200036f8

0800e65c <__errno>:
 800e65c:	4b01      	ldr	r3, [pc, #4]	; (800e664 <__errno+0x8>)
 800e65e:	6818      	ldr	r0, [r3, #0]
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop
 800e664:	20000174 	.word	0x20000174

0800e668 <__libc_init_array>:
 800e668:	b570      	push	{r4, r5, r6, lr}
 800e66a:	4d0d      	ldr	r5, [pc, #52]	; (800e6a0 <__libc_init_array+0x38>)
 800e66c:	4c0d      	ldr	r4, [pc, #52]	; (800e6a4 <__libc_init_array+0x3c>)
 800e66e:	1b64      	subs	r4, r4, r5
 800e670:	10a4      	asrs	r4, r4, #2
 800e672:	2600      	movs	r6, #0
 800e674:	42a6      	cmp	r6, r4
 800e676:	d109      	bne.n	800e68c <__libc_init_array+0x24>
 800e678:	4d0b      	ldr	r5, [pc, #44]	; (800e6a8 <__libc_init_array+0x40>)
 800e67a:	4c0c      	ldr	r4, [pc, #48]	; (800e6ac <__libc_init_array+0x44>)
 800e67c:	f001 f800 	bl	800f680 <_init>
 800e680:	1b64      	subs	r4, r4, r5
 800e682:	10a4      	asrs	r4, r4, #2
 800e684:	2600      	movs	r6, #0
 800e686:	42a6      	cmp	r6, r4
 800e688:	d105      	bne.n	800e696 <__libc_init_array+0x2e>
 800e68a:	bd70      	pop	{r4, r5, r6, pc}
 800e68c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e690:	4798      	blx	r3
 800e692:	3601      	adds	r6, #1
 800e694:	e7ee      	b.n	800e674 <__libc_init_array+0xc>
 800e696:	f855 3b04 	ldr.w	r3, [r5], #4
 800e69a:	4798      	blx	r3
 800e69c:	3601      	adds	r6, #1
 800e69e:	e7f2      	b.n	800e686 <__libc_init_array+0x1e>
 800e6a0:	0800ff2c 	.word	0x0800ff2c
 800e6a4:	0800ff2c 	.word	0x0800ff2c
 800e6a8:	0800ff2c 	.word	0x0800ff2c
 800e6ac:	0800ff30 	.word	0x0800ff30

0800e6b0 <__retarget_lock_acquire_recursive>:
 800e6b0:	4770      	bx	lr

0800e6b2 <__retarget_lock_release_recursive>:
 800e6b2:	4770      	bx	lr

0800e6b4 <strcpy>:
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6ba:	f803 2b01 	strb.w	r2, [r3], #1
 800e6be:	2a00      	cmp	r2, #0
 800e6c0:	d1f9      	bne.n	800e6b6 <strcpy+0x2>
 800e6c2:	4770      	bx	lr

0800e6c4 <__assert_func>:
 800e6c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6c6:	4614      	mov	r4, r2
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	4b09      	ldr	r3, [pc, #36]	; (800e6f0 <__assert_func+0x2c>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4605      	mov	r5, r0
 800e6d0:	68d8      	ldr	r0, [r3, #12]
 800e6d2:	b14c      	cbz	r4, 800e6e8 <__assert_func+0x24>
 800e6d4:	4b07      	ldr	r3, [pc, #28]	; (800e6f4 <__assert_func+0x30>)
 800e6d6:	9100      	str	r1, [sp, #0]
 800e6d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6dc:	4906      	ldr	r1, [pc, #24]	; (800e6f8 <__assert_func+0x34>)
 800e6de:	462b      	mov	r3, r5
 800e6e0:	f000 fca4 	bl	800f02c <fiprintf>
 800e6e4:	f000 fcec 	bl	800f0c0 <abort>
 800e6e8:	4b04      	ldr	r3, [pc, #16]	; (800e6fc <__assert_func+0x38>)
 800e6ea:	461c      	mov	r4, r3
 800e6ec:	e7f3      	b.n	800e6d6 <__assert_func+0x12>
 800e6ee:	bf00      	nop
 800e6f0:	20000174 	.word	0x20000174
 800e6f4:	0800feb2 	.word	0x0800feb2
 800e6f8:	0800febf 	.word	0x0800febf
 800e6fc:	0800feed 	.word	0x0800feed

0800e700 <_free_r>:
 800e700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e702:	2900      	cmp	r1, #0
 800e704:	d044      	beq.n	800e790 <_free_r+0x90>
 800e706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e70a:	9001      	str	r0, [sp, #4]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f1a1 0404 	sub.w	r4, r1, #4
 800e712:	bfb8      	it	lt
 800e714:	18e4      	addlt	r4, r4, r3
 800e716:	f000 f8e7 	bl	800e8e8 <__malloc_lock>
 800e71a:	4a1e      	ldr	r2, [pc, #120]	; (800e794 <_free_r+0x94>)
 800e71c:	9801      	ldr	r0, [sp, #4]
 800e71e:	6813      	ldr	r3, [r2, #0]
 800e720:	b933      	cbnz	r3, 800e730 <_free_r+0x30>
 800e722:	6063      	str	r3, [r4, #4]
 800e724:	6014      	str	r4, [r2, #0]
 800e726:	b003      	add	sp, #12
 800e728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e72c:	f000 b8e2 	b.w	800e8f4 <__malloc_unlock>
 800e730:	42a3      	cmp	r3, r4
 800e732:	d908      	bls.n	800e746 <_free_r+0x46>
 800e734:	6825      	ldr	r5, [r4, #0]
 800e736:	1961      	adds	r1, r4, r5
 800e738:	428b      	cmp	r3, r1
 800e73a:	bf01      	itttt	eq
 800e73c:	6819      	ldreq	r1, [r3, #0]
 800e73e:	685b      	ldreq	r3, [r3, #4]
 800e740:	1949      	addeq	r1, r1, r5
 800e742:	6021      	streq	r1, [r4, #0]
 800e744:	e7ed      	b.n	800e722 <_free_r+0x22>
 800e746:	461a      	mov	r2, r3
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	b10b      	cbz	r3, 800e750 <_free_r+0x50>
 800e74c:	42a3      	cmp	r3, r4
 800e74e:	d9fa      	bls.n	800e746 <_free_r+0x46>
 800e750:	6811      	ldr	r1, [r2, #0]
 800e752:	1855      	adds	r5, r2, r1
 800e754:	42a5      	cmp	r5, r4
 800e756:	d10b      	bne.n	800e770 <_free_r+0x70>
 800e758:	6824      	ldr	r4, [r4, #0]
 800e75a:	4421      	add	r1, r4
 800e75c:	1854      	adds	r4, r2, r1
 800e75e:	42a3      	cmp	r3, r4
 800e760:	6011      	str	r1, [r2, #0]
 800e762:	d1e0      	bne.n	800e726 <_free_r+0x26>
 800e764:	681c      	ldr	r4, [r3, #0]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	6053      	str	r3, [r2, #4]
 800e76a:	440c      	add	r4, r1
 800e76c:	6014      	str	r4, [r2, #0]
 800e76e:	e7da      	b.n	800e726 <_free_r+0x26>
 800e770:	d902      	bls.n	800e778 <_free_r+0x78>
 800e772:	230c      	movs	r3, #12
 800e774:	6003      	str	r3, [r0, #0]
 800e776:	e7d6      	b.n	800e726 <_free_r+0x26>
 800e778:	6825      	ldr	r5, [r4, #0]
 800e77a:	1961      	adds	r1, r4, r5
 800e77c:	428b      	cmp	r3, r1
 800e77e:	bf04      	itt	eq
 800e780:	6819      	ldreq	r1, [r3, #0]
 800e782:	685b      	ldreq	r3, [r3, #4]
 800e784:	6063      	str	r3, [r4, #4]
 800e786:	bf04      	itt	eq
 800e788:	1949      	addeq	r1, r1, r5
 800e78a:	6021      	streq	r1, [r4, #0]
 800e78c:	6054      	str	r4, [r2, #4]
 800e78e:	e7ca      	b.n	800e726 <_free_r+0x26>
 800e790:	b003      	add	sp, #12
 800e792:	bd30      	pop	{r4, r5, pc}
 800e794:	20003700 	.word	0x20003700

0800e798 <malloc>:
 800e798:	4b02      	ldr	r3, [pc, #8]	; (800e7a4 <malloc+0xc>)
 800e79a:	4601      	mov	r1, r0
 800e79c:	6818      	ldr	r0, [r3, #0]
 800e79e:	f000 b823 	b.w	800e7e8 <_malloc_r>
 800e7a2:	bf00      	nop
 800e7a4:	20000174 	.word	0x20000174

0800e7a8 <sbrk_aligned>:
 800e7a8:	b570      	push	{r4, r5, r6, lr}
 800e7aa:	4e0e      	ldr	r6, [pc, #56]	; (800e7e4 <sbrk_aligned+0x3c>)
 800e7ac:	460c      	mov	r4, r1
 800e7ae:	6831      	ldr	r1, [r6, #0]
 800e7b0:	4605      	mov	r5, r0
 800e7b2:	b911      	cbnz	r1, 800e7ba <sbrk_aligned+0x12>
 800e7b4:	f000 fc66 	bl	800f084 <_sbrk_r>
 800e7b8:	6030      	str	r0, [r6, #0]
 800e7ba:	4621      	mov	r1, r4
 800e7bc:	4628      	mov	r0, r5
 800e7be:	f000 fc61 	bl	800f084 <_sbrk_r>
 800e7c2:	1c43      	adds	r3, r0, #1
 800e7c4:	d00a      	beq.n	800e7dc <sbrk_aligned+0x34>
 800e7c6:	1cc4      	adds	r4, r0, #3
 800e7c8:	f024 0403 	bic.w	r4, r4, #3
 800e7cc:	42a0      	cmp	r0, r4
 800e7ce:	d007      	beq.n	800e7e0 <sbrk_aligned+0x38>
 800e7d0:	1a21      	subs	r1, r4, r0
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f000 fc56 	bl	800f084 <_sbrk_r>
 800e7d8:	3001      	adds	r0, #1
 800e7da:	d101      	bne.n	800e7e0 <sbrk_aligned+0x38>
 800e7dc:	f04f 34ff 	mov.w	r4, #4294967295
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	bd70      	pop	{r4, r5, r6, pc}
 800e7e4:	20003704 	.word	0x20003704

0800e7e8 <_malloc_r>:
 800e7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7ec:	1ccd      	adds	r5, r1, #3
 800e7ee:	f025 0503 	bic.w	r5, r5, #3
 800e7f2:	3508      	adds	r5, #8
 800e7f4:	2d0c      	cmp	r5, #12
 800e7f6:	bf38      	it	cc
 800e7f8:	250c      	movcc	r5, #12
 800e7fa:	2d00      	cmp	r5, #0
 800e7fc:	4607      	mov	r7, r0
 800e7fe:	db01      	blt.n	800e804 <_malloc_r+0x1c>
 800e800:	42a9      	cmp	r1, r5
 800e802:	d905      	bls.n	800e810 <_malloc_r+0x28>
 800e804:	230c      	movs	r3, #12
 800e806:	603b      	str	r3, [r7, #0]
 800e808:	2600      	movs	r6, #0
 800e80a:	4630      	mov	r0, r6
 800e80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e810:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e8e4 <_malloc_r+0xfc>
 800e814:	f000 f868 	bl	800e8e8 <__malloc_lock>
 800e818:	f8d8 3000 	ldr.w	r3, [r8]
 800e81c:	461c      	mov	r4, r3
 800e81e:	bb5c      	cbnz	r4, 800e878 <_malloc_r+0x90>
 800e820:	4629      	mov	r1, r5
 800e822:	4638      	mov	r0, r7
 800e824:	f7ff ffc0 	bl	800e7a8 <sbrk_aligned>
 800e828:	1c43      	adds	r3, r0, #1
 800e82a:	4604      	mov	r4, r0
 800e82c:	d155      	bne.n	800e8da <_malloc_r+0xf2>
 800e82e:	f8d8 4000 	ldr.w	r4, [r8]
 800e832:	4626      	mov	r6, r4
 800e834:	2e00      	cmp	r6, #0
 800e836:	d145      	bne.n	800e8c4 <_malloc_r+0xdc>
 800e838:	2c00      	cmp	r4, #0
 800e83a:	d048      	beq.n	800e8ce <_malloc_r+0xe6>
 800e83c:	6823      	ldr	r3, [r4, #0]
 800e83e:	4631      	mov	r1, r6
 800e840:	4638      	mov	r0, r7
 800e842:	eb04 0903 	add.w	r9, r4, r3
 800e846:	f000 fc1d 	bl	800f084 <_sbrk_r>
 800e84a:	4581      	cmp	r9, r0
 800e84c:	d13f      	bne.n	800e8ce <_malloc_r+0xe6>
 800e84e:	6821      	ldr	r1, [r4, #0]
 800e850:	1a6d      	subs	r5, r5, r1
 800e852:	4629      	mov	r1, r5
 800e854:	4638      	mov	r0, r7
 800e856:	f7ff ffa7 	bl	800e7a8 <sbrk_aligned>
 800e85a:	3001      	adds	r0, #1
 800e85c:	d037      	beq.n	800e8ce <_malloc_r+0xe6>
 800e85e:	6823      	ldr	r3, [r4, #0]
 800e860:	442b      	add	r3, r5
 800e862:	6023      	str	r3, [r4, #0]
 800e864:	f8d8 3000 	ldr.w	r3, [r8]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d038      	beq.n	800e8de <_malloc_r+0xf6>
 800e86c:	685a      	ldr	r2, [r3, #4]
 800e86e:	42a2      	cmp	r2, r4
 800e870:	d12b      	bne.n	800e8ca <_malloc_r+0xe2>
 800e872:	2200      	movs	r2, #0
 800e874:	605a      	str	r2, [r3, #4]
 800e876:	e00f      	b.n	800e898 <_malloc_r+0xb0>
 800e878:	6822      	ldr	r2, [r4, #0]
 800e87a:	1b52      	subs	r2, r2, r5
 800e87c:	d41f      	bmi.n	800e8be <_malloc_r+0xd6>
 800e87e:	2a0b      	cmp	r2, #11
 800e880:	d917      	bls.n	800e8b2 <_malloc_r+0xca>
 800e882:	1961      	adds	r1, r4, r5
 800e884:	42a3      	cmp	r3, r4
 800e886:	6025      	str	r5, [r4, #0]
 800e888:	bf18      	it	ne
 800e88a:	6059      	strne	r1, [r3, #4]
 800e88c:	6863      	ldr	r3, [r4, #4]
 800e88e:	bf08      	it	eq
 800e890:	f8c8 1000 	streq.w	r1, [r8]
 800e894:	5162      	str	r2, [r4, r5]
 800e896:	604b      	str	r3, [r1, #4]
 800e898:	4638      	mov	r0, r7
 800e89a:	f104 060b 	add.w	r6, r4, #11
 800e89e:	f000 f829 	bl	800e8f4 <__malloc_unlock>
 800e8a2:	f026 0607 	bic.w	r6, r6, #7
 800e8a6:	1d23      	adds	r3, r4, #4
 800e8a8:	1af2      	subs	r2, r6, r3
 800e8aa:	d0ae      	beq.n	800e80a <_malloc_r+0x22>
 800e8ac:	1b9b      	subs	r3, r3, r6
 800e8ae:	50a3      	str	r3, [r4, r2]
 800e8b0:	e7ab      	b.n	800e80a <_malloc_r+0x22>
 800e8b2:	42a3      	cmp	r3, r4
 800e8b4:	6862      	ldr	r2, [r4, #4]
 800e8b6:	d1dd      	bne.n	800e874 <_malloc_r+0x8c>
 800e8b8:	f8c8 2000 	str.w	r2, [r8]
 800e8bc:	e7ec      	b.n	800e898 <_malloc_r+0xb0>
 800e8be:	4623      	mov	r3, r4
 800e8c0:	6864      	ldr	r4, [r4, #4]
 800e8c2:	e7ac      	b.n	800e81e <_malloc_r+0x36>
 800e8c4:	4634      	mov	r4, r6
 800e8c6:	6876      	ldr	r6, [r6, #4]
 800e8c8:	e7b4      	b.n	800e834 <_malloc_r+0x4c>
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	e7cc      	b.n	800e868 <_malloc_r+0x80>
 800e8ce:	230c      	movs	r3, #12
 800e8d0:	603b      	str	r3, [r7, #0]
 800e8d2:	4638      	mov	r0, r7
 800e8d4:	f000 f80e 	bl	800e8f4 <__malloc_unlock>
 800e8d8:	e797      	b.n	800e80a <_malloc_r+0x22>
 800e8da:	6025      	str	r5, [r4, #0]
 800e8dc:	e7dc      	b.n	800e898 <_malloc_r+0xb0>
 800e8de:	605b      	str	r3, [r3, #4]
 800e8e0:	deff      	udf	#255	; 0xff
 800e8e2:	bf00      	nop
 800e8e4:	20003700 	.word	0x20003700

0800e8e8 <__malloc_lock>:
 800e8e8:	4801      	ldr	r0, [pc, #4]	; (800e8f0 <__malloc_lock+0x8>)
 800e8ea:	f7ff bee1 	b.w	800e6b0 <__retarget_lock_acquire_recursive>
 800e8ee:	bf00      	nop
 800e8f0:	200036fc 	.word	0x200036fc

0800e8f4 <__malloc_unlock>:
 800e8f4:	4801      	ldr	r0, [pc, #4]	; (800e8fc <__malloc_unlock+0x8>)
 800e8f6:	f7ff bedc 	b.w	800e6b2 <__retarget_lock_release_recursive>
 800e8fa:	bf00      	nop
 800e8fc:	200036fc 	.word	0x200036fc

0800e900 <__ssputs_r>:
 800e900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e904:	688e      	ldr	r6, [r1, #8]
 800e906:	461f      	mov	r7, r3
 800e908:	42be      	cmp	r6, r7
 800e90a:	680b      	ldr	r3, [r1, #0]
 800e90c:	4682      	mov	sl, r0
 800e90e:	460c      	mov	r4, r1
 800e910:	4690      	mov	r8, r2
 800e912:	d82c      	bhi.n	800e96e <__ssputs_r+0x6e>
 800e914:	898a      	ldrh	r2, [r1, #12]
 800e916:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e91a:	d026      	beq.n	800e96a <__ssputs_r+0x6a>
 800e91c:	6965      	ldr	r5, [r4, #20]
 800e91e:	6909      	ldr	r1, [r1, #16]
 800e920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e924:	eba3 0901 	sub.w	r9, r3, r1
 800e928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e92c:	1c7b      	adds	r3, r7, #1
 800e92e:	444b      	add	r3, r9
 800e930:	106d      	asrs	r5, r5, #1
 800e932:	429d      	cmp	r5, r3
 800e934:	bf38      	it	cc
 800e936:	461d      	movcc	r5, r3
 800e938:	0553      	lsls	r3, r2, #21
 800e93a:	d527      	bpl.n	800e98c <__ssputs_r+0x8c>
 800e93c:	4629      	mov	r1, r5
 800e93e:	f7ff ff53 	bl	800e7e8 <_malloc_r>
 800e942:	4606      	mov	r6, r0
 800e944:	b360      	cbz	r0, 800e9a0 <__ssputs_r+0xa0>
 800e946:	6921      	ldr	r1, [r4, #16]
 800e948:	464a      	mov	r2, r9
 800e94a:	f000 fbab 	bl	800f0a4 <memcpy>
 800e94e:	89a3      	ldrh	r3, [r4, #12]
 800e950:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	6126      	str	r6, [r4, #16]
 800e95c:	6165      	str	r5, [r4, #20]
 800e95e:	444e      	add	r6, r9
 800e960:	eba5 0509 	sub.w	r5, r5, r9
 800e964:	6026      	str	r6, [r4, #0]
 800e966:	60a5      	str	r5, [r4, #8]
 800e968:	463e      	mov	r6, r7
 800e96a:	42be      	cmp	r6, r7
 800e96c:	d900      	bls.n	800e970 <__ssputs_r+0x70>
 800e96e:	463e      	mov	r6, r7
 800e970:	6820      	ldr	r0, [r4, #0]
 800e972:	4632      	mov	r2, r6
 800e974:	4641      	mov	r1, r8
 800e976:	f000 fb6b 	bl	800f050 <memmove>
 800e97a:	68a3      	ldr	r3, [r4, #8]
 800e97c:	1b9b      	subs	r3, r3, r6
 800e97e:	60a3      	str	r3, [r4, #8]
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	4433      	add	r3, r6
 800e984:	6023      	str	r3, [r4, #0]
 800e986:	2000      	movs	r0, #0
 800e988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e98c:	462a      	mov	r2, r5
 800e98e:	f000 fb9e 	bl	800f0ce <_realloc_r>
 800e992:	4606      	mov	r6, r0
 800e994:	2800      	cmp	r0, #0
 800e996:	d1e0      	bne.n	800e95a <__ssputs_r+0x5a>
 800e998:	6921      	ldr	r1, [r4, #16]
 800e99a:	4650      	mov	r0, sl
 800e99c:	f7ff feb0 	bl	800e700 <_free_r>
 800e9a0:	230c      	movs	r3, #12
 800e9a2:	f8ca 3000 	str.w	r3, [sl]
 800e9a6:	89a3      	ldrh	r3, [r4, #12]
 800e9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ac:	81a3      	strh	r3, [r4, #12]
 800e9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b2:	e7e9      	b.n	800e988 <__ssputs_r+0x88>

0800e9b4 <_svfiprintf_r>:
 800e9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b8:	4698      	mov	r8, r3
 800e9ba:	898b      	ldrh	r3, [r1, #12]
 800e9bc:	061b      	lsls	r3, r3, #24
 800e9be:	b09d      	sub	sp, #116	; 0x74
 800e9c0:	4607      	mov	r7, r0
 800e9c2:	460d      	mov	r5, r1
 800e9c4:	4614      	mov	r4, r2
 800e9c6:	d50e      	bpl.n	800e9e6 <_svfiprintf_r+0x32>
 800e9c8:	690b      	ldr	r3, [r1, #16]
 800e9ca:	b963      	cbnz	r3, 800e9e6 <_svfiprintf_r+0x32>
 800e9cc:	2140      	movs	r1, #64	; 0x40
 800e9ce:	f7ff ff0b 	bl	800e7e8 <_malloc_r>
 800e9d2:	6028      	str	r0, [r5, #0]
 800e9d4:	6128      	str	r0, [r5, #16]
 800e9d6:	b920      	cbnz	r0, 800e9e2 <_svfiprintf_r+0x2e>
 800e9d8:	230c      	movs	r3, #12
 800e9da:	603b      	str	r3, [r7, #0]
 800e9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e0:	e0d0      	b.n	800eb84 <_svfiprintf_r+0x1d0>
 800e9e2:	2340      	movs	r3, #64	; 0x40
 800e9e4:	616b      	str	r3, [r5, #20]
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ea:	2320      	movs	r3, #32
 800e9ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9f4:	2330      	movs	r3, #48	; 0x30
 800e9f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eb9c <_svfiprintf_r+0x1e8>
 800e9fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9fe:	f04f 0901 	mov.w	r9, #1
 800ea02:	4623      	mov	r3, r4
 800ea04:	469a      	mov	sl, r3
 800ea06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea0a:	b10a      	cbz	r2, 800ea10 <_svfiprintf_r+0x5c>
 800ea0c:	2a25      	cmp	r2, #37	; 0x25
 800ea0e:	d1f9      	bne.n	800ea04 <_svfiprintf_r+0x50>
 800ea10:	ebba 0b04 	subs.w	fp, sl, r4
 800ea14:	d00b      	beq.n	800ea2e <_svfiprintf_r+0x7a>
 800ea16:	465b      	mov	r3, fp
 800ea18:	4622      	mov	r2, r4
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	4638      	mov	r0, r7
 800ea1e:	f7ff ff6f 	bl	800e900 <__ssputs_r>
 800ea22:	3001      	adds	r0, #1
 800ea24:	f000 80a9 	beq.w	800eb7a <_svfiprintf_r+0x1c6>
 800ea28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea2a:	445a      	add	r2, fp
 800ea2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ea2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f000 80a1 	beq.w	800eb7a <_svfiprintf_r+0x1c6>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea42:	f10a 0a01 	add.w	sl, sl, #1
 800ea46:	9304      	str	r3, [sp, #16]
 800ea48:	9307      	str	r3, [sp, #28]
 800ea4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea4e:	931a      	str	r3, [sp, #104]	; 0x68
 800ea50:	4654      	mov	r4, sl
 800ea52:	2205      	movs	r2, #5
 800ea54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea58:	4850      	ldr	r0, [pc, #320]	; (800eb9c <_svfiprintf_r+0x1e8>)
 800ea5a:	f7f1 fbd9 	bl	8000210 <memchr>
 800ea5e:	9a04      	ldr	r2, [sp, #16]
 800ea60:	b9d8      	cbnz	r0, 800ea9a <_svfiprintf_r+0xe6>
 800ea62:	06d0      	lsls	r0, r2, #27
 800ea64:	bf44      	itt	mi
 800ea66:	2320      	movmi	r3, #32
 800ea68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea6c:	0711      	lsls	r1, r2, #28
 800ea6e:	bf44      	itt	mi
 800ea70:	232b      	movmi	r3, #43	; 0x2b
 800ea72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea76:	f89a 3000 	ldrb.w	r3, [sl]
 800ea7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea7c:	d015      	beq.n	800eaaa <_svfiprintf_r+0xf6>
 800ea7e:	9a07      	ldr	r2, [sp, #28]
 800ea80:	4654      	mov	r4, sl
 800ea82:	2000      	movs	r0, #0
 800ea84:	f04f 0c0a 	mov.w	ip, #10
 800ea88:	4621      	mov	r1, r4
 800ea8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea8e:	3b30      	subs	r3, #48	; 0x30
 800ea90:	2b09      	cmp	r3, #9
 800ea92:	d94d      	bls.n	800eb30 <_svfiprintf_r+0x17c>
 800ea94:	b1b0      	cbz	r0, 800eac4 <_svfiprintf_r+0x110>
 800ea96:	9207      	str	r2, [sp, #28]
 800ea98:	e014      	b.n	800eac4 <_svfiprintf_r+0x110>
 800ea9a:	eba0 0308 	sub.w	r3, r0, r8
 800ea9e:	fa09 f303 	lsl.w	r3, r9, r3
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	9304      	str	r3, [sp, #16]
 800eaa6:	46a2      	mov	sl, r4
 800eaa8:	e7d2      	b.n	800ea50 <_svfiprintf_r+0x9c>
 800eaaa:	9b03      	ldr	r3, [sp, #12]
 800eaac:	1d19      	adds	r1, r3, #4
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	9103      	str	r1, [sp, #12]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	bfbb      	ittet	lt
 800eab6:	425b      	neglt	r3, r3
 800eab8:	f042 0202 	orrlt.w	r2, r2, #2
 800eabc:	9307      	strge	r3, [sp, #28]
 800eabe:	9307      	strlt	r3, [sp, #28]
 800eac0:	bfb8      	it	lt
 800eac2:	9204      	strlt	r2, [sp, #16]
 800eac4:	7823      	ldrb	r3, [r4, #0]
 800eac6:	2b2e      	cmp	r3, #46	; 0x2e
 800eac8:	d10c      	bne.n	800eae4 <_svfiprintf_r+0x130>
 800eaca:	7863      	ldrb	r3, [r4, #1]
 800eacc:	2b2a      	cmp	r3, #42	; 0x2a
 800eace:	d134      	bne.n	800eb3a <_svfiprintf_r+0x186>
 800ead0:	9b03      	ldr	r3, [sp, #12]
 800ead2:	1d1a      	adds	r2, r3, #4
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	9203      	str	r2, [sp, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	bfb8      	it	lt
 800eadc:	f04f 33ff 	movlt.w	r3, #4294967295
 800eae0:	3402      	adds	r4, #2
 800eae2:	9305      	str	r3, [sp, #20]
 800eae4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ebac <_svfiprintf_r+0x1f8>
 800eae8:	7821      	ldrb	r1, [r4, #0]
 800eaea:	2203      	movs	r2, #3
 800eaec:	4650      	mov	r0, sl
 800eaee:	f7f1 fb8f 	bl	8000210 <memchr>
 800eaf2:	b138      	cbz	r0, 800eb04 <_svfiprintf_r+0x150>
 800eaf4:	9b04      	ldr	r3, [sp, #16]
 800eaf6:	eba0 000a 	sub.w	r0, r0, sl
 800eafa:	2240      	movs	r2, #64	; 0x40
 800eafc:	4082      	lsls	r2, r0
 800eafe:	4313      	orrs	r3, r2
 800eb00:	3401      	adds	r4, #1
 800eb02:	9304      	str	r3, [sp, #16]
 800eb04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb08:	4825      	ldr	r0, [pc, #148]	; (800eba0 <_svfiprintf_r+0x1ec>)
 800eb0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb0e:	2206      	movs	r2, #6
 800eb10:	f7f1 fb7e 	bl	8000210 <memchr>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d038      	beq.n	800eb8a <_svfiprintf_r+0x1d6>
 800eb18:	4b22      	ldr	r3, [pc, #136]	; (800eba4 <_svfiprintf_r+0x1f0>)
 800eb1a:	bb1b      	cbnz	r3, 800eb64 <_svfiprintf_r+0x1b0>
 800eb1c:	9b03      	ldr	r3, [sp, #12]
 800eb1e:	3307      	adds	r3, #7
 800eb20:	f023 0307 	bic.w	r3, r3, #7
 800eb24:	3308      	adds	r3, #8
 800eb26:	9303      	str	r3, [sp, #12]
 800eb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb2a:	4433      	add	r3, r6
 800eb2c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb2e:	e768      	b.n	800ea02 <_svfiprintf_r+0x4e>
 800eb30:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb34:	460c      	mov	r4, r1
 800eb36:	2001      	movs	r0, #1
 800eb38:	e7a6      	b.n	800ea88 <_svfiprintf_r+0xd4>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	3401      	adds	r4, #1
 800eb3e:	9305      	str	r3, [sp, #20]
 800eb40:	4619      	mov	r1, r3
 800eb42:	f04f 0c0a 	mov.w	ip, #10
 800eb46:	4620      	mov	r0, r4
 800eb48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb4c:	3a30      	subs	r2, #48	; 0x30
 800eb4e:	2a09      	cmp	r2, #9
 800eb50:	d903      	bls.n	800eb5a <_svfiprintf_r+0x1a6>
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d0c6      	beq.n	800eae4 <_svfiprintf_r+0x130>
 800eb56:	9105      	str	r1, [sp, #20]
 800eb58:	e7c4      	b.n	800eae4 <_svfiprintf_r+0x130>
 800eb5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb5e:	4604      	mov	r4, r0
 800eb60:	2301      	movs	r3, #1
 800eb62:	e7f0      	b.n	800eb46 <_svfiprintf_r+0x192>
 800eb64:	ab03      	add	r3, sp, #12
 800eb66:	9300      	str	r3, [sp, #0]
 800eb68:	462a      	mov	r2, r5
 800eb6a:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <_svfiprintf_r+0x1f4>)
 800eb6c:	a904      	add	r1, sp, #16
 800eb6e:	4638      	mov	r0, r7
 800eb70:	f3af 8000 	nop.w
 800eb74:	1c42      	adds	r2, r0, #1
 800eb76:	4606      	mov	r6, r0
 800eb78:	d1d6      	bne.n	800eb28 <_svfiprintf_r+0x174>
 800eb7a:	89ab      	ldrh	r3, [r5, #12]
 800eb7c:	065b      	lsls	r3, r3, #25
 800eb7e:	f53f af2d 	bmi.w	800e9dc <_svfiprintf_r+0x28>
 800eb82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb84:	b01d      	add	sp, #116	; 0x74
 800eb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8a:	ab03      	add	r3, sp, #12
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	462a      	mov	r2, r5
 800eb90:	4b05      	ldr	r3, [pc, #20]	; (800eba8 <_svfiprintf_r+0x1f4>)
 800eb92:	a904      	add	r1, sp, #16
 800eb94:	4638      	mov	r0, r7
 800eb96:	f000 f879 	bl	800ec8c <_printf_i>
 800eb9a:	e7eb      	b.n	800eb74 <_svfiprintf_r+0x1c0>
 800eb9c:	0800feee 	.word	0x0800feee
 800eba0:	0800fef8 	.word	0x0800fef8
 800eba4:	00000000 	.word	0x00000000
 800eba8:	0800e901 	.word	0x0800e901
 800ebac:	0800fef4 	.word	0x0800fef4

0800ebb0 <_printf_common>:
 800ebb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb4:	4616      	mov	r6, r2
 800ebb6:	4699      	mov	r9, r3
 800ebb8:	688a      	ldr	r2, [r1, #8]
 800ebba:	690b      	ldr	r3, [r1, #16]
 800ebbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	bfb8      	it	lt
 800ebc4:	4613      	movlt	r3, r2
 800ebc6:	6033      	str	r3, [r6, #0]
 800ebc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebcc:	4607      	mov	r7, r0
 800ebce:	460c      	mov	r4, r1
 800ebd0:	b10a      	cbz	r2, 800ebd6 <_printf_common+0x26>
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	6033      	str	r3, [r6, #0]
 800ebd6:	6823      	ldr	r3, [r4, #0]
 800ebd8:	0699      	lsls	r1, r3, #26
 800ebda:	bf42      	ittt	mi
 800ebdc:	6833      	ldrmi	r3, [r6, #0]
 800ebde:	3302      	addmi	r3, #2
 800ebe0:	6033      	strmi	r3, [r6, #0]
 800ebe2:	6825      	ldr	r5, [r4, #0]
 800ebe4:	f015 0506 	ands.w	r5, r5, #6
 800ebe8:	d106      	bne.n	800ebf8 <_printf_common+0x48>
 800ebea:	f104 0a19 	add.w	sl, r4, #25
 800ebee:	68e3      	ldr	r3, [r4, #12]
 800ebf0:	6832      	ldr	r2, [r6, #0]
 800ebf2:	1a9b      	subs	r3, r3, r2
 800ebf4:	42ab      	cmp	r3, r5
 800ebf6:	dc26      	bgt.n	800ec46 <_printf_common+0x96>
 800ebf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebfc:	1e13      	subs	r3, r2, #0
 800ebfe:	6822      	ldr	r2, [r4, #0]
 800ec00:	bf18      	it	ne
 800ec02:	2301      	movne	r3, #1
 800ec04:	0692      	lsls	r2, r2, #26
 800ec06:	d42b      	bmi.n	800ec60 <_printf_common+0xb0>
 800ec08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec0c:	4649      	mov	r1, r9
 800ec0e:	4638      	mov	r0, r7
 800ec10:	47c0      	blx	r8
 800ec12:	3001      	adds	r0, #1
 800ec14:	d01e      	beq.n	800ec54 <_printf_common+0xa4>
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	6922      	ldr	r2, [r4, #16]
 800ec1a:	f003 0306 	and.w	r3, r3, #6
 800ec1e:	2b04      	cmp	r3, #4
 800ec20:	bf02      	ittt	eq
 800ec22:	68e5      	ldreq	r5, [r4, #12]
 800ec24:	6833      	ldreq	r3, [r6, #0]
 800ec26:	1aed      	subeq	r5, r5, r3
 800ec28:	68a3      	ldr	r3, [r4, #8]
 800ec2a:	bf0c      	ite	eq
 800ec2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec30:	2500      	movne	r5, #0
 800ec32:	4293      	cmp	r3, r2
 800ec34:	bfc4      	itt	gt
 800ec36:	1a9b      	subgt	r3, r3, r2
 800ec38:	18ed      	addgt	r5, r5, r3
 800ec3a:	2600      	movs	r6, #0
 800ec3c:	341a      	adds	r4, #26
 800ec3e:	42b5      	cmp	r5, r6
 800ec40:	d11a      	bne.n	800ec78 <_printf_common+0xc8>
 800ec42:	2000      	movs	r0, #0
 800ec44:	e008      	b.n	800ec58 <_printf_common+0xa8>
 800ec46:	2301      	movs	r3, #1
 800ec48:	4652      	mov	r2, sl
 800ec4a:	4649      	mov	r1, r9
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	47c0      	blx	r8
 800ec50:	3001      	adds	r0, #1
 800ec52:	d103      	bne.n	800ec5c <_printf_common+0xac>
 800ec54:	f04f 30ff 	mov.w	r0, #4294967295
 800ec58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec5c:	3501      	adds	r5, #1
 800ec5e:	e7c6      	b.n	800ebee <_printf_common+0x3e>
 800ec60:	18e1      	adds	r1, r4, r3
 800ec62:	1c5a      	adds	r2, r3, #1
 800ec64:	2030      	movs	r0, #48	; 0x30
 800ec66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec6a:	4422      	add	r2, r4
 800ec6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec74:	3302      	adds	r3, #2
 800ec76:	e7c7      	b.n	800ec08 <_printf_common+0x58>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	4622      	mov	r2, r4
 800ec7c:	4649      	mov	r1, r9
 800ec7e:	4638      	mov	r0, r7
 800ec80:	47c0      	blx	r8
 800ec82:	3001      	adds	r0, #1
 800ec84:	d0e6      	beq.n	800ec54 <_printf_common+0xa4>
 800ec86:	3601      	adds	r6, #1
 800ec88:	e7d9      	b.n	800ec3e <_printf_common+0x8e>
	...

0800ec8c <_printf_i>:
 800ec8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec90:	7e0f      	ldrb	r7, [r1, #24]
 800ec92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec94:	2f78      	cmp	r7, #120	; 0x78
 800ec96:	4691      	mov	r9, r2
 800ec98:	4680      	mov	r8, r0
 800ec9a:	460c      	mov	r4, r1
 800ec9c:	469a      	mov	sl, r3
 800ec9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eca2:	d807      	bhi.n	800ecb4 <_printf_i+0x28>
 800eca4:	2f62      	cmp	r7, #98	; 0x62
 800eca6:	d80a      	bhi.n	800ecbe <_printf_i+0x32>
 800eca8:	2f00      	cmp	r7, #0
 800ecaa:	f000 80d4 	beq.w	800ee56 <_printf_i+0x1ca>
 800ecae:	2f58      	cmp	r7, #88	; 0x58
 800ecb0:	f000 80c0 	beq.w	800ee34 <_printf_i+0x1a8>
 800ecb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ecbc:	e03a      	b.n	800ed34 <_printf_i+0xa8>
 800ecbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ecc2:	2b15      	cmp	r3, #21
 800ecc4:	d8f6      	bhi.n	800ecb4 <_printf_i+0x28>
 800ecc6:	a101      	add	r1, pc, #4	; (adr r1, 800eccc <_printf_i+0x40>)
 800ecc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eccc:	0800ed25 	.word	0x0800ed25
 800ecd0:	0800ed39 	.word	0x0800ed39
 800ecd4:	0800ecb5 	.word	0x0800ecb5
 800ecd8:	0800ecb5 	.word	0x0800ecb5
 800ecdc:	0800ecb5 	.word	0x0800ecb5
 800ece0:	0800ecb5 	.word	0x0800ecb5
 800ece4:	0800ed39 	.word	0x0800ed39
 800ece8:	0800ecb5 	.word	0x0800ecb5
 800ecec:	0800ecb5 	.word	0x0800ecb5
 800ecf0:	0800ecb5 	.word	0x0800ecb5
 800ecf4:	0800ecb5 	.word	0x0800ecb5
 800ecf8:	0800ee3d 	.word	0x0800ee3d
 800ecfc:	0800ed65 	.word	0x0800ed65
 800ed00:	0800edf7 	.word	0x0800edf7
 800ed04:	0800ecb5 	.word	0x0800ecb5
 800ed08:	0800ecb5 	.word	0x0800ecb5
 800ed0c:	0800ee5f 	.word	0x0800ee5f
 800ed10:	0800ecb5 	.word	0x0800ecb5
 800ed14:	0800ed65 	.word	0x0800ed65
 800ed18:	0800ecb5 	.word	0x0800ecb5
 800ed1c:	0800ecb5 	.word	0x0800ecb5
 800ed20:	0800edff 	.word	0x0800edff
 800ed24:	682b      	ldr	r3, [r5, #0]
 800ed26:	1d1a      	adds	r2, r3, #4
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	602a      	str	r2, [r5, #0]
 800ed2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed34:	2301      	movs	r3, #1
 800ed36:	e09f      	b.n	800ee78 <_printf_i+0x1ec>
 800ed38:	6820      	ldr	r0, [r4, #0]
 800ed3a:	682b      	ldr	r3, [r5, #0]
 800ed3c:	0607      	lsls	r7, r0, #24
 800ed3e:	f103 0104 	add.w	r1, r3, #4
 800ed42:	6029      	str	r1, [r5, #0]
 800ed44:	d501      	bpl.n	800ed4a <_printf_i+0xbe>
 800ed46:	681e      	ldr	r6, [r3, #0]
 800ed48:	e003      	b.n	800ed52 <_printf_i+0xc6>
 800ed4a:	0646      	lsls	r6, r0, #25
 800ed4c:	d5fb      	bpl.n	800ed46 <_printf_i+0xba>
 800ed4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ed52:	2e00      	cmp	r6, #0
 800ed54:	da03      	bge.n	800ed5e <_printf_i+0xd2>
 800ed56:	232d      	movs	r3, #45	; 0x2d
 800ed58:	4276      	negs	r6, r6
 800ed5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed5e:	485a      	ldr	r0, [pc, #360]	; (800eec8 <_printf_i+0x23c>)
 800ed60:	230a      	movs	r3, #10
 800ed62:	e012      	b.n	800ed8a <_printf_i+0xfe>
 800ed64:	682b      	ldr	r3, [r5, #0]
 800ed66:	6820      	ldr	r0, [r4, #0]
 800ed68:	1d19      	adds	r1, r3, #4
 800ed6a:	6029      	str	r1, [r5, #0]
 800ed6c:	0605      	lsls	r5, r0, #24
 800ed6e:	d501      	bpl.n	800ed74 <_printf_i+0xe8>
 800ed70:	681e      	ldr	r6, [r3, #0]
 800ed72:	e002      	b.n	800ed7a <_printf_i+0xee>
 800ed74:	0641      	lsls	r1, r0, #25
 800ed76:	d5fb      	bpl.n	800ed70 <_printf_i+0xe4>
 800ed78:	881e      	ldrh	r6, [r3, #0]
 800ed7a:	4853      	ldr	r0, [pc, #332]	; (800eec8 <_printf_i+0x23c>)
 800ed7c:	2f6f      	cmp	r7, #111	; 0x6f
 800ed7e:	bf0c      	ite	eq
 800ed80:	2308      	moveq	r3, #8
 800ed82:	230a      	movne	r3, #10
 800ed84:	2100      	movs	r1, #0
 800ed86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed8a:	6865      	ldr	r5, [r4, #4]
 800ed8c:	60a5      	str	r5, [r4, #8]
 800ed8e:	2d00      	cmp	r5, #0
 800ed90:	bfa2      	ittt	ge
 800ed92:	6821      	ldrge	r1, [r4, #0]
 800ed94:	f021 0104 	bicge.w	r1, r1, #4
 800ed98:	6021      	strge	r1, [r4, #0]
 800ed9a:	b90e      	cbnz	r6, 800eda0 <_printf_i+0x114>
 800ed9c:	2d00      	cmp	r5, #0
 800ed9e:	d04b      	beq.n	800ee38 <_printf_i+0x1ac>
 800eda0:	4615      	mov	r5, r2
 800eda2:	fbb6 f1f3 	udiv	r1, r6, r3
 800eda6:	fb03 6711 	mls	r7, r3, r1, r6
 800edaa:	5dc7      	ldrb	r7, [r0, r7]
 800edac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800edb0:	4637      	mov	r7, r6
 800edb2:	42bb      	cmp	r3, r7
 800edb4:	460e      	mov	r6, r1
 800edb6:	d9f4      	bls.n	800eda2 <_printf_i+0x116>
 800edb8:	2b08      	cmp	r3, #8
 800edba:	d10b      	bne.n	800edd4 <_printf_i+0x148>
 800edbc:	6823      	ldr	r3, [r4, #0]
 800edbe:	07de      	lsls	r6, r3, #31
 800edc0:	d508      	bpl.n	800edd4 <_printf_i+0x148>
 800edc2:	6923      	ldr	r3, [r4, #16]
 800edc4:	6861      	ldr	r1, [r4, #4]
 800edc6:	4299      	cmp	r1, r3
 800edc8:	bfde      	ittt	le
 800edca:	2330      	movle	r3, #48	; 0x30
 800edcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800edd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800edd4:	1b52      	subs	r2, r2, r5
 800edd6:	6122      	str	r2, [r4, #16]
 800edd8:	f8cd a000 	str.w	sl, [sp]
 800eddc:	464b      	mov	r3, r9
 800edde:	aa03      	add	r2, sp, #12
 800ede0:	4621      	mov	r1, r4
 800ede2:	4640      	mov	r0, r8
 800ede4:	f7ff fee4 	bl	800ebb0 <_printf_common>
 800ede8:	3001      	adds	r0, #1
 800edea:	d14a      	bne.n	800ee82 <_printf_i+0x1f6>
 800edec:	f04f 30ff 	mov.w	r0, #4294967295
 800edf0:	b004      	add	sp, #16
 800edf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf6:	6823      	ldr	r3, [r4, #0]
 800edf8:	f043 0320 	orr.w	r3, r3, #32
 800edfc:	6023      	str	r3, [r4, #0]
 800edfe:	4833      	ldr	r0, [pc, #204]	; (800eecc <_printf_i+0x240>)
 800ee00:	2778      	movs	r7, #120	; 0x78
 800ee02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee06:	6823      	ldr	r3, [r4, #0]
 800ee08:	6829      	ldr	r1, [r5, #0]
 800ee0a:	061f      	lsls	r7, r3, #24
 800ee0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee10:	d402      	bmi.n	800ee18 <_printf_i+0x18c>
 800ee12:	065f      	lsls	r7, r3, #25
 800ee14:	bf48      	it	mi
 800ee16:	b2b6      	uxthmi	r6, r6
 800ee18:	07df      	lsls	r7, r3, #31
 800ee1a:	bf48      	it	mi
 800ee1c:	f043 0320 	orrmi.w	r3, r3, #32
 800ee20:	6029      	str	r1, [r5, #0]
 800ee22:	bf48      	it	mi
 800ee24:	6023      	strmi	r3, [r4, #0]
 800ee26:	b91e      	cbnz	r6, 800ee30 <_printf_i+0x1a4>
 800ee28:	6823      	ldr	r3, [r4, #0]
 800ee2a:	f023 0320 	bic.w	r3, r3, #32
 800ee2e:	6023      	str	r3, [r4, #0]
 800ee30:	2310      	movs	r3, #16
 800ee32:	e7a7      	b.n	800ed84 <_printf_i+0xf8>
 800ee34:	4824      	ldr	r0, [pc, #144]	; (800eec8 <_printf_i+0x23c>)
 800ee36:	e7e4      	b.n	800ee02 <_printf_i+0x176>
 800ee38:	4615      	mov	r5, r2
 800ee3a:	e7bd      	b.n	800edb8 <_printf_i+0x12c>
 800ee3c:	682b      	ldr	r3, [r5, #0]
 800ee3e:	6826      	ldr	r6, [r4, #0]
 800ee40:	6961      	ldr	r1, [r4, #20]
 800ee42:	1d18      	adds	r0, r3, #4
 800ee44:	6028      	str	r0, [r5, #0]
 800ee46:	0635      	lsls	r5, r6, #24
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	d501      	bpl.n	800ee50 <_printf_i+0x1c4>
 800ee4c:	6019      	str	r1, [r3, #0]
 800ee4e:	e002      	b.n	800ee56 <_printf_i+0x1ca>
 800ee50:	0670      	lsls	r0, r6, #25
 800ee52:	d5fb      	bpl.n	800ee4c <_printf_i+0x1c0>
 800ee54:	8019      	strh	r1, [r3, #0]
 800ee56:	2300      	movs	r3, #0
 800ee58:	6123      	str	r3, [r4, #16]
 800ee5a:	4615      	mov	r5, r2
 800ee5c:	e7bc      	b.n	800edd8 <_printf_i+0x14c>
 800ee5e:	682b      	ldr	r3, [r5, #0]
 800ee60:	1d1a      	adds	r2, r3, #4
 800ee62:	602a      	str	r2, [r5, #0]
 800ee64:	681d      	ldr	r5, [r3, #0]
 800ee66:	6862      	ldr	r2, [r4, #4]
 800ee68:	2100      	movs	r1, #0
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f7f1 f9d0 	bl	8000210 <memchr>
 800ee70:	b108      	cbz	r0, 800ee76 <_printf_i+0x1ea>
 800ee72:	1b40      	subs	r0, r0, r5
 800ee74:	6060      	str	r0, [r4, #4]
 800ee76:	6863      	ldr	r3, [r4, #4]
 800ee78:	6123      	str	r3, [r4, #16]
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee80:	e7aa      	b.n	800edd8 <_printf_i+0x14c>
 800ee82:	6923      	ldr	r3, [r4, #16]
 800ee84:	462a      	mov	r2, r5
 800ee86:	4649      	mov	r1, r9
 800ee88:	4640      	mov	r0, r8
 800ee8a:	47d0      	blx	sl
 800ee8c:	3001      	adds	r0, #1
 800ee8e:	d0ad      	beq.n	800edec <_printf_i+0x160>
 800ee90:	6823      	ldr	r3, [r4, #0]
 800ee92:	079b      	lsls	r3, r3, #30
 800ee94:	d413      	bmi.n	800eebe <_printf_i+0x232>
 800ee96:	68e0      	ldr	r0, [r4, #12]
 800ee98:	9b03      	ldr	r3, [sp, #12]
 800ee9a:	4298      	cmp	r0, r3
 800ee9c:	bfb8      	it	lt
 800ee9e:	4618      	movlt	r0, r3
 800eea0:	e7a6      	b.n	800edf0 <_printf_i+0x164>
 800eea2:	2301      	movs	r3, #1
 800eea4:	4632      	mov	r2, r6
 800eea6:	4649      	mov	r1, r9
 800eea8:	4640      	mov	r0, r8
 800eeaa:	47d0      	blx	sl
 800eeac:	3001      	adds	r0, #1
 800eeae:	d09d      	beq.n	800edec <_printf_i+0x160>
 800eeb0:	3501      	adds	r5, #1
 800eeb2:	68e3      	ldr	r3, [r4, #12]
 800eeb4:	9903      	ldr	r1, [sp, #12]
 800eeb6:	1a5b      	subs	r3, r3, r1
 800eeb8:	42ab      	cmp	r3, r5
 800eeba:	dcf2      	bgt.n	800eea2 <_printf_i+0x216>
 800eebc:	e7eb      	b.n	800ee96 <_printf_i+0x20a>
 800eebe:	2500      	movs	r5, #0
 800eec0:	f104 0619 	add.w	r6, r4, #25
 800eec4:	e7f5      	b.n	800eeb2 <_printf_i+0x226>
 800eec6:	bf00      	nop
 800eec8:	0800feff 	.word	0x0800feff
 800eecc:	0800ff10 	.word	0x0800ff10

0800eed0 <__sflush_r>:
 800eed0:	898a      	ldrh	r2, [r1, #12]
 800eed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eed6:	4605      	mov	r5, r0
 800eed8:	0710      	lsls	r0, r2, #28
 800eeda:	460c      	mov	r4, r1
 800eedc:	d458      	bmi.n	800ef90 <__sflush_r+0xc0>
 800eede:	684b      	ldr	r3, [r1, #4]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	dc05      	bgt.n	800eef0 <__sflush_r+0x20>
 800eee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	dc02      	bgt.n	800eef0 <__sflush_r+0x20>
 800eeea:	2000      	movs	r0, #0
 800eeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eef2:	2e00      	cmp	r6, #0
 800eef4:	d0f9      	beq.n	800eeea <__sflush_r+0x1a>
 800eef6:	2300      	movs	r3, #0
 800eef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eefc:	682f      	ldr	r7, [r5, #0]
 800eefe:	6a21      	ldr	r1, [r4, #32]
 800ef00:	602b      	str	r3, [r5, #0]
 800ef02:	d032      	beq.n	800ef6a <__sflush_r+0x9a>
 800ef04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef06:	89a3      	ldrh	r3, [r4, #12]
 800ef08:	075a      	lsls	r2, r3, #29
 800ef0a:	d505      	bpl.n	800ef18 <__sflush_r+0x48>
 800ef0c:	6863      	ldr	r3, [r4, #4]
 800ef0e:	1ac0      	subs	r0, r0, r3
 800ef10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef12:	b10b      	cbz	r3, 800ef18 <__sflush_r+0x48>
 800ef14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef16:	1ac0      	subs	r0, r0, r3
 800ef18:	2300      	movs	r3, #0
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef1e:	6a21      	ldr	r1, [r4, #32]
 800ef20:	4628      	mov	r0, r5
 800ef22:	47b0      	blx	r6
 800ef24:	1c43      	adds	r3, r0, #1
 800ef26:	89a3      	ldrh	r3, [r4, #12]
 800ef28:	d106      	bne.n	800ef38 <__sflush_r+0x68>
 800ef2a:	6829      	ldr	r1, [r5, #0]
 800ef2c:	291d      	cmp	r1, #29
 800ef2e:	d82b      	bhi.n	800ef88 <__sflush_r+0xb8>
 800ef30:	4a29      	ldr	r2, [pc, #164]	; (800efd8 <__sflush_r+0x108>)
 800ef32:	410a      	asrs	r2, r1
 800ef34:	07d6      	lsls	r6, r2, #31
 800ef36:	d427      	bmi.n	800ef88 <__sflush_r+0xb8>
 800ef38:	2200      	movs	r2, #0
 800ef3a:	6062      	str	r2, [r4, #4]
 800ef3c:	04d9      	lsls	r1, r3, #19
 800ef3e:	6922      	ldr	r2, [r4, #16]
 800ef40:	6022      	str	r2, [r4, #0]
 800ef42:	d504      	bpl.n	800ef4e <__sflush_r+0x7e>
 800ef44:	1c42      	adds	r2, r0, #1
 800ef46:	d101      	bne.n	800ef4c <__sflush_r+0x7c>
 800ef48:	682b      	ldr	r3, [r5, #0]
 800ef4a:	b903      	cbnz	r3, 800ef4e <__sflush_r+0x7e>
 800ef4c:	6560      	str	r0, [r4, #84]	; 0x54
 800ef4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef50:	602f      	str	r7, [r5, #0]
 800ef52:	2900      	cmp	r1, #0
 800ef54:	d0c9      	beq.n	800eeea <__sflush_r+0x1a>
 800ef56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef5a:	4299      	cmp	r1, r3
 800ef5c:	d002      	beq.n	800ef64 <__sflush_r+0x94>
 800ef5e:	4628      	mov	r0, r5
 800ef60:	f7ff fbce 	bl	800e700 <_free_r>
 800ef64:	2000      	movs	r0, #0
 800ef66:	6360      	str	r0, [r4, #52]	; 0x34
 800ef68:	e7c0      	b.n	800eeec <__sflush_r+0x1c>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	47b0      	blx	r6
 800ef70:	1c41      	adds	r1, r0, #1
 800ef72:	d1c8      	bne.n	800ef06 <__sflush_r+0x36>
 800ef74:	682b      	ldr	r3, [r5, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d0c5      	beq.n	800ef06 <__sflush_r+0x36>
 800ef7a:	2b1d      	cmp	r3, #29
 800ef7c:	d001      	beq.n	800ef82 <__sflush_r+0xb2>
 800ef7e:	2b16      	cmp	r3, #22
 800ef80:	d101      	bne.n	800ef86 <__sflush_r+0xb6>
 800ef82:	602f      	str	r7, [r5, #0]
 800ef84:	e7b1      	b.n	800eeea <__sflush_r+0x1a>
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef8c:	81a3      	strh	r3, [r4, #12]
 800ef8e:	e7ad      	b.n	800eeec <__sflush_r+0x1c>
 800ef90:	690f      	ldr	r7, [r1, #16]
 800ef92:	2f00      	cmp	r7, #0
 800ef94:	d0a9      	beq.n	800eeea <__sflush_r+0x1a>
 800ef96:	0793      	lsls	r3, r2, #30
 800ef98:	680e      	ldr	r6, [r1, #0]
 800ef9a:	bf08      	it	eq
 800ef9c:	694b      	ldreq	r3, [r1, #20]
 800ef9e:	600f      	str	r7, [r1, #0]
 800efa0:	bf18      	it	ne
 800efa2:	2300      	movne	r3, #0
 800efa4:	eba6 0807 	sub.w	r8, r6, r7
 800efa8:	608b      	str	r3, [r1, #8]
 800efaa:	f1b8 0f00 	cmp.w	r8, #0
 800efae:	dd9c      	ble.n	800eeea <__sflush_r+0x1a>
 800efb0:	6a21      	ldr	r1, [r4, #32]
 800efb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efb4:	4643      	mov	r3, r8
 800efb6:	463a      	mov	r2, r7
 800efb8:	4628      	mov	r0, r5
 800efba:	47b0      	blx	r6
 800efbc:	2800      	cmp	r0, #0
 800efbe:	dc06      	bgt.n	800efce <__sflush_r+0xfe>
 800efc0:	89a3      	ldrh	r3, [r4, #12]
 800efc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efc6:	81a3      	strh	r3, [r4, #12]
 800efc8:	f04f 30ff 	mov.w	r0, #4294967295
 800efcc:	e78e      	b.n	800eeec <__sflush_r+0x1c>
 800efce:	4407      	add	r7, r0
 800efd0:	eba8 0800 	sub.w	r8, r8, r0
 800efd4:	e7e9      	b.n	800efaa <__sflush_r+0xda>
 800efd6:	bf00      	nop
 800efd8:	dfbffffe 	.word	0xdfbffffe

0800efdc <_fflush_r>:
 800efdc:	b538      	push	{r3, r4, r5, lr}
 800efde:	690b      	ldr	r3, [r1, #16]
 800efe0:	4605      	mov	r5, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	b913      	cbnz	r3, 800efec <_fflush_r+0x10>
 800efe6:	2500      	movs	r5, #0
 800efe8:	4628      	mov	r0, r5
 800efea:	bd38      	pop	{r3, r4, r5, pc}
 800efec:	b118      	cbz	r0, 800eff6 <_fflush_r+0x1a>
 800efee:	6a03      	ldr	r3, [r0, #32]
 800eff0:	b90b      	cbnz	r3, 800eff6 <_fflush_r+0x1a>
 800eff2:	f7ff f9dd 	bl	800e3b0 <__sinit>
 800eff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d0f3      	beq.n	800efe6 <_fflush_r+0xa>
 800effe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f000:	07d0      	lsls	r0, r2, #31
 800f002:	d404      	bmi.n	800f00e <_fflush_r+0x32>
 800f004:	0599      	lsls	r1, r3, #22
 800f006:	d402      	bmi.n	800f00e <_fflush_r+0x32>
 800f008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f00a:	f7ff fb51 	bl	800e6b0 <__retarget_lock_acquire_recursive>
 800f00e:	4628      	mov	r0, r5
 800f010:	4621      	mov	r1, r4
 800f012:	f7ff ff5d 	bl	800eed0 <__sflush_r>
 800f016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f018:	07da      	lsls	r2, r3, #31
 800f01a:	4605      	mov	r5, r0
 800f01c:	d4e4      	bmi.n	800efe8 <_fflush_r+0xc>
 800f01e:	89a3      	ldrh	r3, [r4, #12]
 800f020:	059b      	lsls	r3, r3, #22
 800f022:	d4e1      	bmi.n	800efe8 <_fflush_r+0xc>
 800f024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f026:	f7ff fb44 	bl	800e6b2 <__retarget_lock_release_recursive>
 800f02a:	e7dd      	b.n	800efe8 <_fflush_r+0xc>

0800f02c <fiprintf>:
 800f02c:	b40e      	push	{r1, r2, r3}
 800f02e:	b503      	push	{r0, r1, lr}
 800f030:	4601      	mov	r1, r0
 800f032:	ab03      	add	r3, sp, #12
 800f034:	4805      	ldr	r0, [pc, #20]	; (800f04c <fiprintf+0x20>)
 800f036:	f853 2b04 	ldr.w	r2, [r3], #4
 800f03a:	6800      	ldr	r0, [r0, #0]
 800f03c:	9301      	str	r3, [sp, #4]
 800f03e:	f000 f89f 	bl	800f180 <_vfiprintf_r>
 800f042:	b002      	add	sp, #8
 800f044:	f85d eb04 	ldr.w	lr, [sp], #4
 800f048:	b003      	add	sp, #12
 800f04a:	4770      	bx	lr
 800f04c:	20000174 	.word	0x20000174

0800f050 <memmove>:
 800f050:	4288      	cmp	r0, r1
 800f052:	b510      	push	{r4, lr}
 800f054:	eb01 0402 	add.w	r4, r1, r2
 800f058:	d902      	bls.n	800f060 <memmove+0x10>
 800f05a:	4284      	cmp	r4, r0
 800f05c:	4623      	mov	r3, r4
 800f05e:	d807      	bhi.n	800f070 <memmove+0x20>
 800f060:	1e43      	subs	r3, r0, #1
 800f062:	42a1      	cmp	r1, r4
 800f064:	d008      	beq.n	800f078 <memmove+0x28>
 800f066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f06a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f06e:	e7f8      	b.n	800f062 <memmove+0x12>
 800f070:	4402      	add	r2, r0
 800f072:	4601      	mov	r1, r0
 800f074:	428a      	cmp	r2, r1
 800f076:	d100      	bne.n	800f07a <memmove+0x2a>
 800f078:	bd10      	pop	{r4, pc}
 800f07a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f07e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f082:	e7f7      	b.n	800f074 <memmove+0x24>

0800f084 <_sbrk_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4d06      	ldr	r5, [pc, #24]	; (800f0a0 <_sbrk_r+0x1c>)
 800f088:	2300      	movs	r3, #0
 800f08a:	4604      	mov	r4, r0
 800f08c:	4608      	mov	r0, r1
 800f08e:	602b      	str	r3, [r5, #0]
 800f090:	f7f3 fa50 	bl	8002534 <_sbrk>
 800f094:	1c43      	adds	r3, r0, #1
 800f096:	d102      	bne.n	800f09e <_sbrk_r+0x1a>
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	b103      	cbz	r3, 800f09e <_sbrk_r+0x1a>
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	bd38      	pop	{r3, r4, r5, pc}
 800f0a0:	200036f8 	.word	0x200036f8

0800f0a4 <memcpy>:
 800f0a4:	440a      	add	r2, r1
 800f0a6:	4291      	cmp	r1, r2
 800f0a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0ac:	d100      	bne.n	800f0b0 <memcpy+0xc>
 800f0ae:	4770      	bx	lr
 800f0b0:	b510      	push	{r4, lr}
 800f0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0ba:	4291      	cmp	r1, r2
 800f0bc:	d1f9      	bne.n	800f0b2 <memcpy+0xe>
 800f0be:	bd10      	pop	{r4, pc}

0800f0c0 <abort>:
 800f0c0:	b508      	push	{r3, lr}
 800f0c2:	2006      	movs	r0, #6
 800f0c4:	f000 fa34 	bl	800f530 <raise>
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	f7f3 f9bb 	bl	8002444 <_exit>

0800f0ce <_realloc_r>:
 800f0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d2:	4680      	mov	r8, r0
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	460e      	mov	r6, r1
 800f0d8:	b921      	cbnz	r1, 800f0e4 <_realloc_r+0x16>
 800f0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0de:	4611      	mov	r1, r2
 800f0e0:	f7ff bb82 	b.w	800e7e8 <_malloc_r>
 800f0e4:	b92a      	cbnz	r2, 800f0f2 <_realloc_r+0x24>
 800f0e6:	f7ff fb0b 	bl	800e700 <_free_r>
 800f0ea:	4625      	mov	r5, r4
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f2:	f000 fa39 	bl	800f568 <_malloc_usable_size_r>
 800f0f6:	4284      	cmp	r4, r0
 800f0f8:	4607      	mov	r7, r0
 800f0fa:	d802      	bhi.n	800f102 <_realloc_r+0x34>
 800f0fc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f100:	d812      	bhi.n	800f128 <_realloc_r+0x5a>
 800f102:	4621      	mov	r1, r4
 800f104:	4640      	mov	r0, r8
 800f106:	f7ff fb6f 	bl	800e7e8 <_malloc_r>
 800f10a:	4605      	mov	r5, r0
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d0ed      	beq.n	800f0ec <_realloc_r+0x1e>
 800f110:	42bc      	cmp	r4, r7
 800f112:	4622      	mov	r2, r4
 800f114:	4631      	mov	r1, r6
 800f116:	bf28      	it	cs
 800f118:	463a      	movcs	r2, r7
 800f11a:	f7ff ffc3 	bl	800f0a4 <memcpy>
 800f11e:	4631      	mov	r1, r6
 800f120:	4640      	mov	r0, r8
 800f122:	f7ff faed 	bl	800e700 <_free_r>
 800f126:	e7e1      	b.n	800f0ec <_realloc_r+0x1e>
 800f128:	4635      	mov	r5, r6
 800f12a:	e7df      	b.n	800f0ec <_realloc_r+0x1e>

0800f12c <__sfputc_r>:
 800f12c:	6893      	ldr	r3, [r2, #8]
 800f12e:	3b01      	subs	r3, #1
 800f130:	2b00      	cmp	r3, #0
 800f132:	b410      	push	{r4}
 800f134:	6093      	str	r3, [r2, #8]
 800f136:	da08      	bge.n	800f14a <__sfputc_r+0x1e>
 800f138:	6994      	ldr	r4, [r2, #24]
 800f13a:	42a3      	cmp	r3, r4
 800f13c:	db01      	blt.n	800f142 <__sfputc_r+0x16>
 800f13e:	290a      	cmp	r1, #10
 800f140:	d103      	bne.n	800f14a <__sfputc_r+0x1e>
 800f142:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f146:	f000 b935 	b.w	800f3b4 <__swbuf_r>
 800f14a:	6813      	ldr	r3, [r2, #0]
 800f14c:	1c58      	adds	r0, r3, #1
 800f14e:	6010      	str	r0, [r2, #0]
 800f150:	7019      	strb	r1, [r3, #0]
 800f152:	4608      	mov	r0, r1
 800f154:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f158:	4770      	bx	lr

0800f15a <__sfputs_r>:
 800f15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15c:	4606      	mov	r6, r0
 800f15e:	460f      	mov	r7, r1
 800f160:	4614      	mov	r4, r2
 800f162:	18d5      	adds	r5, r2, r3
 800f164:	42ac      	cmp	r4, r5
 800f166:	d101      	bne.n	800f16c <__sfputs_r+0x12>
 800f168:	2000      	movs	r0, #0
 800f16a:	e007      	b.n	800f17c <__sfputs_r+0x22>
 800f16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f170:	463a      	mov	r2, r7
 800f172:	4630      	mov	r0, r6
 800f174:	f7ff ffda 	bl	800f12c <__sfputc_r>
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	d1f3      	bne.n	800f164 <__sfputs_r+0xa>
 800f17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f180 <_vfiprintf_r>:
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	460d      	mov	r5, r1
 800f186:	b09d      	sub	sp, #116	; 0x74
 800f188:	4614      	mov	r4, r2
 800f18a:	4698      	mov	r8, r3
 800f18c:	4606      	mov	r6, r0
 800f18e:	b118      	cbz	r0, 800f198 <_vfiprintf_r+0x18>
 800f190:	6a03      	ldr	r3, [r0, #32]
 800f192:	b90b      	cbnz	r3, 800f198 <_vfiprintf_r+0x18>
 800f194:	f7ff f90c 	bl	800e3b0 <__sinit>
 800f198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f19a:	07d9      	lsls	r1, r3, #31
 800f19c:	d405      	bmi.n	800f1aa <_vfiprintf_r+0x2a>
 800f19e:	89ab      	ldrh	r3, [r5, #12]
 800f1a0:	059a      	lsls	r2, r3, #22
 800f1a2:	d402      	bmi.n	800f1aa <_vfiprintf_r+0x2a>
 800f1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1a6:	f7ff fa83 	bl	800e6b0 <__retarget_lock_acquire_recursive>
 800f1aa:	89ab      	ldrh	r3, [r5, #12]
 800f1ac:	071b      	lsls	r3, r3, #28
 800f1ae:	d501      	bpl.n	800f1b4 <_vfiprintf_r+0x34>
 800f1b0:	692b      	ldr	r3, [r5, #16]
 800f1b2:	b99b      	cbnz	r3, 800f1dc <_vfiprintf_r+0x5c>
 800f1b4:	4629      	mov	r1, r5
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	f000 f93a 	bl	800f430 <__swsetup_r>
 800f1bc:	b170      	cbz	r0, 800f1dc <_vfiprintf_r+0x5c>
 800f1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1c0:	07dc      	lsls	r4, r3, #31
 800f1c2:	d504      	bpl.n	800f1ce <_vfiprintf_r+0x4e>
 800f1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c8:	b01d      	add	sp, #116	; 0x74
 800f1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	0598      	lsls	r0, r3, #22
 800f1d2:	d4f7      	bmi.n	800f1c4 <_vfiprintf_r+0x44>
 800f1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1d6:	f7ff fa6c 	bl	800e6b2 <__retarget_lock_release_recursive>
 800f1da:	e7f3      	b.n	800f1c4 <_vfiprintf_r+0x44>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	9309      	str	r3, [sp, #36]	; 0x24
 800f1e0:	2320      	movs	r3, #32
 800f1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1ea:	2330      	movs	r3, #48	; 0x30
 800f1ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f3a0 <_vfiprintf_r+0x220>
 800f1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1f4:	f04f 0901 	mov.w	r9, #1
 800f1f8:	4623      	mov	r3, r4
 800f1fa:	469a      	mov	sl, r3
 800f1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f200:	b10a      	cbz	r2, 800f206 <_vfiprintf_r+0x86>
 800f202:	2a25      	cmp	r2, #37	; 0x25
 800f204:	d1f9      	bne.n	800f1fa <_vfiprintf_r+0x7a>
 800f206:	ebba 0b04 	subs.w	fp, sl, r4
 800f20a:	d00b      	beq.n	800f224 <_vfiprintf_r+0xa4>
 800f20c:	465b      	mov	r3, fp
 800f20e:	4622      	mov	r2, r4
 800f210:	4629      	mov	r1, r5
 800f212:	4630      	mov	r0, r6
 800f214:	f7ff ffa1 	bl	800f15a <__sfputs_r>
 800f218:	3001      	adds	r0, #1
 800f21a:	f000 80a9 	beq.w	800f370 <_vfiprintf_r+0x1f0>
 800f21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f220:	445a      	add	r2, fp
 800f222:	9209      	str	r2, [sp, #36]	; 0x24
 800f224:	f89a 3000 	ldrb.w	r3, [sl]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f000 80a1 	beq.w	800f370 <_vfiprintf_r+0x1f0>
 800f22e:	2300      	movs	r3, #0
 800f230:	f04f 32ff 	mov.w	r2, #4294967295
 800f234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f238:	f10a 0a01 	add.w	sl, sl, #1
 800f23c:	9304      	str	r3, [sp, #16]
 800f23e:	9307      	str	r3, [sp, #28]
 800f240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f244:	931a      	str	r3, [sp, #104]	; 0x68
 800f246:	4654      	mov	r4, sl
 800f248:	2205      	movs	r2, #5
 800f24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f24e:	4854      	ldr	r0, [pc, #336]	; (800f3a0 <_vfiprintf_r+0x220>)
 800f250:	f7f0 ffde 	bl	8000210 <memchr>
 800f254:	9a04      	ldr	r2, [sp, #16]
 800f256:	b9d8      	cbnz	r0, 800f290 <_vfiprintf_r+0x110>
 800f258:	06d1      	lsls	r1, r2, #27
 800f25a:	bf44      	itt	mi
 800f25c:	2320      	movmi	r3, #32
 800f25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f262:	0713      	lsls	r3, r2, #28
 800f264:	bf44      	itt	mi
 800f266:	232b      	movmi	r3, #43	; 0x2b
 800f268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f26c:	f89a 3000 	ldrb.w	r3, [sl]
 800f270:	2b2a      	cmp	r3, #42	; 0x2a
 800f272:	d015      	beq.n	800f2a0 <_vfiprintf_r+0x120>
 800f274:	9a07      	ldr	r2, [sp, #28]
 800f276:	4654      	mov	r4, sl
 800f278:	2000      	movs	r0, #0
 800f27a:	f04f 0c0a 	mov.w	ip, #10
 800f27e:	4621      	mov	r1, r4
 800f280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f284:	3b30      	subs	r3, #48	; 0x30
 800f286:	2b09      	cmp	r3, #9
 800f288:	d94d      	bls.n	800f326 <_vfiprintf_r+0x1a6>
 800f28a:	b1b0      	cbz	r0, 800f2ba <_vfiprintf_r+0x13a>
 800f28c:	9207      	str	r2, [sp, #28]
 800f28e:	e014      	b.n	800f2ba <_vfiprintf_r+0x13a>
 800f290:	eba0 0308 	sub.w	r3, r0, r8
 800f294:	fa09 f303 	lsl.w	r3, r9, r3
 800f298:	4313      	orrs	r3, r2
 800f29a:	9304      	str	r3, [sp, #16]
 800f29c:	46a2      	mov	sl, r4
 800f29e:	e7d2      	b.n	800f246 <_vfiprintf_r+0xc6>
 800f2a0:	9b03      	ldr	r3, [sp, #12]
 800f2a2:	1d19      	adds	r1, r3, #4
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	9103      	str	r1, [sp, #12]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	bfbb      	ittet	lt
 800f2ac:	425b      	neglt	r3, r3
 800f2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f2b2:	9307      	strge	r3, [sp, #28]
 800f2b4:	9307      	strlt	r3, [sp, #28]
 800f2b6:	bfb8      	it	lt
 800f2b8:	9204      	strlt	r2, [sp, #16]
 800f2ba:	7823      	ldrb	r3, [r4, #0]
 800f2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800f2be:	d10c      	bne.n	800f2da <_vfiprintf_r+0x15a>
 800f2c0:	7863      	ldrb	r3, [r4, #1]
 800f2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800f2c4:	d134      	bne.n	800f330 <_vfiprintf_r+0x1b0>
 800f2c6:	9b03      	ldr	r3, [sp, #12]
 800f2c8:	1d1a      	adds	r2, r3, #4
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	9203      	str	r2, [sp, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	bfb8      	it	lt
 800f2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2d6:	3402      	adds	r4, #2
 800f2d8:	9305      	str	r3, [sp, #20]
 800f2da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f3b0 <_vfiprintf_r+0x230>
 800f2de:	7821      	ldrb	r1, [r4, #0]
 800f2e0:	2203      	movs	r2, #3
 800f2e2:	4650      	mov	r0, sl
 800f2e4:	f7f0 ff94 	bl	8000210 <memchr>
 800f2e8:	b138      	cbz	r0, 800f2fa <_vfiprintf_r+0x17a>
 800f2ea:	9b04      	ldr	r3, [sp, #16]
 800f2ec:	eba0 000a 	sub.w	r0, r0, sl
 800f2f0:	2240      	movs	r2, #64	; 0x40
 800f2f2:	4082      	lsls	r2, r0
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	3401      	adds	r4, #1
 800f2f8:	9304      	str	r3, [sp, #16]
 800f2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2fe:	4829      	ldr	r0, [pc, #164]	; (800f3a4 <_vfiprintf_r+0x224>)
 800f300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f304:	2206      	movs	r2, #6
 800f306:	f7f0 ff83 	bl	8000210 <memchr>
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d03f      	beq.n	800f38e <_vfiprintf_r+0x20e>
 800f30e:	4b26      	ldr	r3, [pc, #152]	; (800f3a8 <_vfiprintf_r+0x228>)
 800f310:	bb1b      	cbnz	r3, 800f35a <_vfiprintf_r+0x1da>
 800f312:	9b03      	ldr	r3, [sp, #12]
 800f314:	3307      	adds	r3, #7
 800f316:	f023 0307 	bic.w	r3, r3, #7
 800f31a:	3308      	adds	r3, #8
 800f31c:	9303      	str	r3, [sp, #12]
 800f31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f320:	443b      	add	r3, r7
 800f322:	9309      	str	r3, [sp, #36]	; 0x24
 800f324:	e768      	b.n	800f1f8 <_vfiprintf_r+0x78>
 800f326:	fb0c 3202 	mla	r2, ip, r2, r3
 800f32a:	460c      	mov	r4, r1
 800f32c:	2001      	movs	r0, #1
 800f32e:	e7a6      	b.n	800f27e <_vfiprintf_r+0xfe>
 800f330:	2300      	movs	r3, #0
 800f332:	3401      	adds	r4, #1
 800f334:	9305      	str	r3, [sp, #20]
 800f336:	4619      	mov	r1, r3
 800f338:	f04f 0c0a 	mov.w	ip, #10
 800f33c:	4620      	mov	r0, r4
 800f33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f342:	3a30      	subs	r2, #48	; 0x30
 800f344:	2a09      	cmp	r2, #9
 800f346:	d903      	bls.n	800f350 <_vfiprintf_r+0x1d0>
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d0c6      	beq.n	800f2da <_vfiprintf_r+0x15a>
 800f34c:	9105      	str	r1, [sp, #20]
 800f34e:	e7c4      	b.n	800f2da <_vfiprintf_r+0x15a>
 800f350:	fb0c 2101 	mla	r1, ip, r1, r2
 800f354:	4604      	mov	r4, r0
 800f356:	2301      	movs	r3, #1
 800f358:	e7f0      	b.n	800f33c <_vfiprintf_r+0x1bc>
 800f35a:	ab03      	add	r3, sp, #12
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	462a      	mov	r2, r5
 800f360:	4b12      	ldr	r3, [pc, #72]	; (800f3ac <_vfiprintf_r+0x22c>)
 800f362:	a904      	add	r1, sp, #16
 800f364:	4630      	mov	r0, r6
 800f366:	f3af 8000 	nop.w
 800f36a:	4607      	mov	r7, r0
 800f36c:	1c78      	adds	r0, r7, #1
 800f36e:	d1d6      	bne.n	800f31e <_vfiprintf_r+0x19e>
 800f370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f372:	07d9      	lsls	r1, r3, #31
 800f374:	d405      	bmi.n	800f382 <_vfiprintf_r+0x202>
 800f376:	89ab      	ldrh	r3, [r5, #12]
 800f378:	059a      	lsls	r2, r3, #22
 800f37a:	d402      	bmi.n	800f382 <_vfiprintf_r+0x202>
 800f37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f37e:	f7ff f998 	bl	800e6b2 <__retarget_lock_release_recursive>
 800f382:	89ab      	ldrh	r3, [r5, #12]
 800f384:	065b      	lsls	r3, r3, #25
 800f386:	f53f af1d 	bmi.w	800f1c4 <_vfiprintf_r+0x44>
 800f38a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f38c:	e71c      	b.n	800f1c8 <_vfiprintf_r+0x48>
 800f38e:	ab03      	add	r3, sp, #12
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	462a      	mov	r2, r5
 800f394:	4b05      	ldr	r3, [pc, #20]	; (800f3ac <_vfiprintf_r+0x22c>)
 800f396:	a904      	add	r1, sp, #16
 800f398:	4630      	mov	r0, r6
 800f39a:	f7ff fc77 	bl	800ec8c <_printf_i>
 800f39e:	e7e4      	b.n	800f36a <_vfiprintf_r+0x1ea>
 800f3a0:	0800feee 	.word	0x0800feee
 800f3a4:	0800fef8 	.word	0x0800fef8
 800f3a8:	00000000 	.word	0x00000000
 800f3ac:	0800f15b 	.word	0x0800f15b
 800f3b0:	0800fef4 	.word	0x0800fef4

0800f3b4 <__swbuf_r>:
 800f3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b6:	460e      	mov	r6, r1
 800f3b8:	4614      	mov	r4, r2
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	b118      	cbz	r0, 800f3c6 <__swbuf_r+0x12>
 800f3be:	6a03      	ldr	r3, [r0, #32]
 800f3c0:	b90b      	cbnz	r3, 800f3c6 <__swbuf_r+0x12>
 800f3c2:	f7fe fff5 	bl	800e3b0 <__sinit>
 800f3c6:	69a3      	ldr	r3, [r4, #24]
 800f3c8:	60a3      	str	r3, [r4, #8]
 800f3ca:	89a3      	ldrh	r3, [r4, #12]
 800f3cc:	071a      	lsls	r2, r3, #28
 800f3ce:	d525      	bpl.n	800f41c <__swbuf_r+0x68>
 800f3d0:	6923      	ldr	r3, [r4, #16]
 800f3d2:	b31b      	cbz	r3, 800f41c <__swbuf_r+0x68>
 800f3d4:	6823      	ldr	r3, [r4, #0]
 800f3d6:	6922      	ldr	r2, [r4, #16]
 800f3d8:	1a98      	subs	r0, r3, r2
 800f3da:	6963      	ldr	r3, [r4, #20]
 800f3dc:	b2f6      	uxtb	r6, r6
 800f3de:	4283      	cmp	r3, r0
 800f3e0:	4637      	mov	r7, r6
 800f3e2:	dc04      	bgt.n	800f3ee <__swbuf_r+0x3a>
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f7ff fdf8 	bl	800efdc <_fflush_r>
 800f3ec:	b9e0      	cbnz	r0, 800f428 <__swbuf_r+0x74>
 800f3ee:	68a3      	ldr	r3, [r4, #8]
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	60a3      	str	r3, [r4, #8]
 800f3f4:	6823      	ldr	r3, [r4, #0]
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	6022      	str	r2, [r4, #0]
 800f3fa:	701e      	strb	r6, [r3, #0]
 800f3fc:	6962      	ldr	r2, [r4, #20]
 800f3fe:	1c43      	adds	r3, r0, #1
 800f400:	429a      	cmp	r2, r3
 800f402:	d004      	beq.n	800f40e <__swbuf_r+0x5a>
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	07db      	lsls	r3, r3, #31
 800f408:	d506      	bpl.n	800f418 <__swbuf_r+0x64>
 800f40a:	2e0a      	cmp	r6, #10
 800f40c:	d104      	bne.n	800f418 <__swbuf_r+0x64>
 800f40e:	4621      	mov	r1, r4
 800f410:	4628      	mov	r0, r5
 800f412:	f7ff fde3 	bl	800efdc <_fflush_r>
 800f416:	b938      	cbnz	r0, 800f428 <__swbuf_r+0x74>
 800f418:	4638      	mov	r0, r7
 800f41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f41c:	4621      	mov	r1, r4
 800f41e:	4628      	mov	r0, r5
 800f420:	f000 f806 	bl	800f430 <__swsetup_r>
 800f424:	2800      	cmp	r0, #0
 800f426:	d0d5      	beq.n	800f3d4 <__swbuf_r+0x20>
 800f428:	f04f 37ff 	mov.w	r7, #4294967295
 800f42c:	e7f4      	b.n	800f418 <__swbuf_r+0x64>
	...

0800f430 <__swsetup_r>:
 800f430:	b538      	push	{r3, r4, r5, lr}
 800f432:	4b2a      	ldr	r3, [pc, #168]	; (800f4dc <__swsetup_r+0xac>)
 800f434:	4605      	mov	r5, r0
 800f436:	6818      	ldr	r0, [r3, #0]
 800f438:	460c      	mov	r4, r1
 800f43a:	b118      	cbz	r0, 800f444 <__swsetup_r+0x14>
 800f43c:	6a03      	ldr	r3, [r0, #32]
 800f43e:	b90b      	cbnz	r3, 800f444 <__swsetup_r+0x14>
 800f440:	f7fe ffb6 	bl	800e3b0 <__sinit>
 800f444:	89a3      	ldrh	r3, [r4, #12]
 800f446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f44a:	0718      	lsls	r0, r3, #28
 800f44c:	d422      	bmi.n	800f494 <__swsetup_r+0x64>
 800f44e:	06d9      	lsls	r1, r3, #27
 800f450:	d407      	bmi.n	800f462 <__swsetup_r+0x32>
 800f452:	2309      	movs	r3, #9
 800f454:	602b      	str	r3, [r5, #0]
 800f456:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f45a:	81a3      	strh	r3, [r4, #12]
 800f45c:	f04f 30ff 	mov.w	r0, #4294967295
 800f460:	e034      	b.n	800f4cc <__swsetup_r+0x9c>
 800f462:	0758      	lsls	r0, r3, #29
 800f464:	d512      	bpl.n	800f48c <__swsetup_r+0x5c>
 800f466:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f468:	b141      	cbz	r1, 800f47c <__swsetup_r+0x4c>
 800f46a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f46e:	4299      	cmp	r1, r3
 800f470:	d002      	beq.n	800f478 <__swsetup_r+0x48>
 800f472:	4628      	mov	r0, r5
 800f474:	f7ff f944 	bl	800e700 <_free_r>
 800f478:	2300      	movs	r3, #0
 800f47a:	6363      	str	r3, [r4, #52]	; 0x34
 800f47c:	89a3      	ldrh	r3, [r4, #12]
 800f47e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f482:	81a3      	strh	r3, [r4, #12]
 800f484:	2300      	movs	r3, #0
 800f486:	6063      	str	r3, [r4, #4]
 800f488:	6923      	ldr	r3, [r4, #16]
 800f48a:	6023      	str	r3, [r4, #0]
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	f043 0308 	orr.w	r3, r3, #8
 800f492:	81a3      	strh	r3, [r4, #12]
 800f494:	6923      	ldr	r3, [r4, #16]
 800f496:	b94b      	cbnz	r3, 800f4ac <__swsetup_r+0x7c>
 800f498:	89a3      	ldrh	r3, [r4, #12]
 800f49a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f49e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4a2:	d003      	beq.n	800f4ac <__swsetup_r+0x7c>
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	f000 f88c 	bl	800f5c4 <__smakebuf_r>
 800f4ac:	89a0      	ldrh	r0, [r4, #12]
 800f4ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4b2:	f010 0301 	ands.w	r3, r0, #1
 800f4b6:	d00a      	beq.n	800f4ce <__swsetup_r+0x9e>
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	60a3      	str	r3, [r4, #8]
 800f4bc:	6963      	ldr	r3, [r4, #20]
 800f4be:	425b      	negs	r3, r3
 800f4c0:	61a3      	str	r3, [r4, #24]
 800f4c2:	6923      	ldr	r3, [r4, #16]
 800f4c4:	b943      	cbnz	r3, 800f4d8 <__swsetup_r+0xa8>
 800f4c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4ca:	d1c4      	bne.n	800f456 <__swsetup_r+0x26>
 800f4cc:	bd38      	pop	{r3, r4, r5, pc}
 800f4ce:	0781      	lsls	r1, r0, #30
 800f4d0:	bf58      	it	pl
 800f4d2:	6963      	ldrpl	r3, [r4, #20]
 800f4d4:	60a3      	str	r3, [r4, #8]
 800f4d6:	e7f4      	b.n	800f4c2 <__swsetup_r+0x92>
 800f4d8:	2000      	movs	r0, #0
 800f4da:	e7f7      	b.n	800f4cc <__swsetup_r+0x9c>
 800f4dc:	20000174 	.word	0x20000174

0800f4e0 <_raise_r>:
 800f4e0:	291f      	cmp	r1, #31
 800f4e2:	b538      	push	{r3, r4, r5, lr}
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	460d      	mov	r5, r1
 800f4e8:	d904      	bls.n	800f4f4 <_raise_r+0x14>
 800f4ea:	2316      	movs	r3, #22
 800f4ec:	6003      	str	r3, [r0, #0]
 800f4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f2:	bd38      	pop	{r3, r4, r5, pc}
 800f4f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f4f6:	b112      	cbz	r2, 800f4fe <_raise_r+0x1e>
 800f4f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4fc:	b94b      	cbnz	r3, 800f512 <_raise_r+0x32>
 800f4fe:	4620      	mov	r0, r4
 800f500:	f000 f830 	bl	800f564 <_getpid_r>
 800f504:	462a      	mov	r2, r5
 800f506:	4601      	mov	r1, r0
 800f508:	4620      	mov	r0, r4
 800f50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f50e:	f000 b817 	b.w	800f540 <_kill_r>
 800f512:	2b01      	cmp	r3, #1
 800f514:	d00a      	beq.n	800f52c <_raise_r+0x4c>
 800f516:	1c59      	adds	r1, r3, #1
 800f518:	d103      	bne.n	800f522 <_raise_r+0x42>
 800f51a:	2316      	movs	r3, #22
 800f51c:	6003      	str	r3, [r0, #0]
 800f51e:	2001      	movs	r0, #1
 800f520:	e7e7      	b.n	800f4f2 <_raise_r+0x12>
 800f522:	2400      	movs	r4, #0
 800f524:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f528:	4628      	mov	r0, r5
 800f52a:	4798      	blx	r3
 800f52c:	2000      	movs	r0, #0
 800f52e:	e7e0      	b.n	800f4f2 <_raise_r+0x12>

0800f530 <raise>:
 800f530:	4b02      	ldr	r3, [pc, #8]	; (800f53c <raise+0xc>)
 800f532:	4601      	mov	r1, r0
 800f534:	6818      	ldr	r0, [r3, #0]
 800f536:	f7ff bfd3 	b.w	800f4e0 <_raise_r>
 800f53a:	bf00      	nop
 800f53c:	20000174 	.word	0x20000174

0800f540 <_kill_r>:
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	4d07      	ldr	r5, [pc, #28]	; (800f560 <_kill_r+0x20>)
 800f544:	2300      	movs	r3, #0
 800f546:	4604      	mov	r4, r0
 800f548:	4608      	mov	r0, r1
 800f54a:	4611      	mov	r1, r2
 800f54c:	602b      	str	r3, [r5, #0]
 800f54e:	f7f2 ff69 	bl	8002424 <_kill>
 800f552:	1c43      	adds	r3, r0, #1
 800f554:	d102      	bne.n	800f55c <_kill_r+0x1c>
 800f556:	682b      	ldr	r3, [r5, #0]
 800f558:	b103      	cbz	r3, 800f55c <_kill_r+0x1c>
 800f55a:	6023      	str	r3, [r4, #0]
 800f55c:	bd38      	pop	{r3, r4, r5, pc}
 800f55e:	bf00      	nop
 800f560:	200036f8 	.word	0x200036f8

0800f564 <_getpid_r>:
 800f564:	f7f2 bf56 	b.w	8002414 <_getpid>

0800f568 <_malloc_usable_size_r>:
 800f568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f56c:	1f18      	subs	r0, r3, #4
 800f56e:	2b00      	cmp	r3, #0
 800f570:	bfbc      	itt	lt
 800f572:	580b      	ldrlt	r3, [r1, r0]
 800f574:	18c0      	addlt	r0, r0, r3
 800f576:	4770      	bx	lr

0800f578 <__swhatbuf_r>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	460c      	mov	r4, r1
 800f57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f580:	2900      	cmp	r1, #0
 800f582:	b096      	sub	sp, #88	; 0x58
 800f584:	4615      	mov	r5, r2
 800f586:	461e      	mov	r6, r3
 800f588:	da0d      	bge.n	800f5a6 <__swhatbuf_r+0x2e>
 800f58a:	89a3      	ldrh	r3, [r4, #12]
 800f58c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f590:	f04f 0100 	mov.w	r1, #0
 800f594:	bf0c      	ite	eq
 800f596:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f59a:	2340      	movne	r3, #64	; 0x40
 800f59c:	2000      	movs	r0, #0
 800f59e:	6031      	str	r1, [r6, #0]
 800f5a0:	602b      	str	r3, [r5, #0]
 800f5a2:	b016      	add	sp, #88	; 0x58
 800f5a4:	bd70      	pop	{r4, r5, r6, pc}
 800f5a6:	466a      	mov	r2, sp
 800f5a8:	f000 f848 	bl	800f63c <_fstat_r>
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	dbec      	blt.n	800f58a <__swhatbuf_r+0x12>
 800f5b0:	9901      	ldr	r1, [sp, #4]
 800f5b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f5b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f5ba:	4259      	negs	r1, r3
 800f5bc:	4159      	adcs	r1, r3
 800f5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5c2:	e7eb      	b.n	800f59c <__swhatbuf_r+0x24>

0800f5c4 <__smakebuf_r>:
 800f5c4:	898b      	ldrh	r3, [r1, #12]
 800f5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5c8:	079d      	lsls	r5, r3, #30
 800f5ca:	4606      	mov	r6, r0
 800f5cc:	460c      	mov	r4, r1
 800f5ce:	d507      	bpl.n	800f5e0 <__smakebuf_r+0x1c>
 800f5d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5d4:	6023      	str	r3, [r4, #0]
 800f5d6:	6123      	str	r3, [r4, #16]
 800f5d8:	2301      	movs	r3, #1
 800f5da:	6163      	str	r3, [r4, #20]
 800f5dc:	b002      	add	sp, #8
 800f5de:	bd70      	pop	{r4, r5, r6, pc}
 800f5e0:	ab01      	add	r3, sp, #4
 800f5e2:	466a      	mov	r2, sp
 800f5e4:	f7ff ffc8 	bl	800f578 <__swhatbuf_r>
 800f5e8:	9900      	ldr	r1, [sp, #0]
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	f7ff f8fb 	bl	800e7e8 <_malloc_r>
 800f5f2:	b948      	cbnz	r0, 800f608 <__smakebuf_r+0x44>
 800f5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5f8:	059a      	lsls	r2, r3, #22
 800f5fa:	d4ef      	bmi.n	800f5dc <__smakebuf_r+0x18>
 800f5fc:	f023 0303 	bic.w	r3, r3, #3
 800f600:	f043 0302 	orr.w	r3, r3, #2
 800f604:	81a3      	strh	r3, [r4, #12]
 800f606:	e7e3      	b.n	800f5d0 <__smakebuf_r+0xc>
 800f608:	89a3      	ldrh	r3, [r4, #12]
 800f60a:	6020      	str	r0, [r4, #0]
 800f60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f610:	81a3      	strh	r3, [r4, #12]
 800f612:	9b00      	ldr	r3, [sp, #0]
 800f614:	6163      	str	r3, [r4, #20]
 800f616:	9b01      	ldr	r3, [sp, #4]
 800f618:	6120      	str	r0, [r4, #16]
 800f61a:	b15b      	cbz	r3, 800f634 <__smakebuf_r+0x70>
 800f61c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f620:	4630      	mov	r0, r6
 800f622:	f000 f81d 	bl	800f660 <_isatty_r>
 800f626:	b128      	cbz	r0, 800f634 <__smakebuf_r+0x70>
 800f628:	89a3      	ldrh	r3, [r4, #12]
 800f62a:	f023 0303 	bic.w	r3, r3, #3
 800f62e:	f043 0301 	orr.w	r3, r3, #1
 800f632:	81a3      	strh	r3, [r4, #12]
 800f634:	89a3      	ldrh	r3, [r4, #12]
 800f636:	431d      	orrs	r5, r3
 800f638:	81a5      	strh	r5, [r4, #12]
 800f63a:	e7cf      	b.n	800f5dc <__smakebuf_r+0x18>

0800f63c <_fstat_r>:
 800f63c:	b538      	push	{r3, r4, r5, lr}
 800f63e:	4d07      	ldr	r5, [pc, #28]	; (800f65c <_fstat_r+0x20>)
 800f640:	2300      	movs	r3, #0
 800f642:	4604      	mov	r4, r0
 800f644:	4608      	mov	r0, r1
 800f646:	4611      	mov	r1, r2
 800f648:	602b      	str	r3, [r5, #0]
 800f64a:	f7f2 ff4a 	bl	80024e2 <_fstat>
 800f64e:	1c43      	adds	r3, r0, #1
 800f650:	d102      	bne.n	800f658 <_fstat_r+0x1c>
 800f652:	682b      	ldr	r3, [r5, #0]
 800f654:	b103      	cbz	r3, 800f658 <_fstat_r+0x1c>
 800f656:	6023      	str	r3, [r4, #0]
 800f658:	bd38      	pop	{r3, r4, r5, pc}
 800f65a:	bf00      	nop
 800f65c:	200036f8 	.word	0x200036f8

0800f660 <_isatty_r>:
 800f660:	b538      	push	{r3, r4, r5, lr}
 800f662:	4d06      	ldr	r5, [pc, #24]	; (800f67c <_isatty_r+0x1c>)
 800f664:	2300      	movs	r3, #0
 800f666:	4604      	mov	r4, r0
 800f668:	4608      	mov	r0, r1
 800f66a:	602b      	str	r3, [r5, #0]
 800f66c:	f7f2 ff49 	bl	8002502 <_isatty>
 800f670:	1c43      	adds	r3, r0, #1
 800f672:	d102      	bne.n	800f67a <_isatty_r+0x1a>
 800f674:	682b      	ldr	r3, [r5, #0]
 800f676:	b103      	cbz	r3, 800f67a <_isatty_r+0x1a>
 800f678:	6023      	str	r3, [r4, #0]
 800f67a:	bd38      	pop	{r3, r4, r5, pc}
 800f67c:	200036f8 	.word	0x200036f8

0800f680 <_init>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	bf00      	nop
 800f684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f686:	bc08      	pop	{r3}
 800f688:	469e      	mov	lr, r3
 800f68a:	4770      	bx	lr

0800f68c <_fini>:
 800f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f68e:	bf00      	nop
 800f690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f692:	bc08      	pop	{r3}
 800f694:	469e      	mov	lr, r3
 800f696:	4770      	bx	lr
