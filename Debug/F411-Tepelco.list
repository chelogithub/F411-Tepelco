
F411-Tepelco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001002c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  080101cc  080101cc  000201cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d3c  08010d3c  000301a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010d3c  08010d3c  00020d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d44  08010d44  000301a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d44  08010d44  00020d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d48  08010d48  00020d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08010d4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cf0  200001a0  08010eec  000301a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003e90  08010eec  00033e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001650b  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e6a  00000000  00000000  000466db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00049548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0004a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018861  00000000  00000000  0004b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173f9  00000000  00000000  00064041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093534  00000000  00000000  0007b43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e96e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ec  00000000  00000000  0010e9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a0 	.word	0x200001a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080101b4 	.word	0x080101b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	080101b4 	.word	0x080101b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db0a      	blt.n	80005de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <__NVIC_SetPriority+0x4c>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	0112      	lsls	r2, r2, #4
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	440b      	add	r3, r1
 80005d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005dc:	e00a      	b.n	80005f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4908      	ldr	r1, [pc, #32]	; (8000604 <__NVIC_SetPriority+0x50>)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	f003 030f 	and.w	r3, r3, #15
 80005ea:	3b04      	subs	r3, #4
 80005ec:	0112      	lsls	r2, r2, #4
 80005ee:	b2d2      	uxtb	r2, r2
 80005f0:	440b      	add	r3, r1
 80005f2:	761a      	strb	r2, [r3, #24]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000e100 	.word	0xe000e100
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3b01      	subs	r3, #1
 8000614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000618:	d301      	bcc.n	800061e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2301      	movs	r3, #1
 800061c:	e00f      	b.n	800063e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <SysTick_Config+0x40>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3b01      	subs	r3, #1
 8000624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000626:	210f      	movs	r1, #15
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f7ff ffc2 	bl	80005b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <SysTick_Config+0x40>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <SysTick_Config+0x40>)
 8000638:	2207      	movs	r2, #7
 800063a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	e000e010 	.word	0xe000e010

0800064c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d013      	beq.n	800068c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000664:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000668:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800066c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00b      	beq.n	800068c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000674:	e000      	b.n	8000678 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000676:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000682:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006a0:	b094      	sub	sp, #80	; 0x50
 80006a2:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 80006a4:	4bce      	ldr	r3, [pc, #824]	; (80009e0 <main+0x344>)
 80006a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006aa:	22c0      	movs	r2, #192	; 0xc0
 80006ac:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006ae:	4bcc      	ldr	r3, [pc, #816]	; (80009e0 <main+0x344>)
 80006b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b4:	22a8      	movs	r2, #168	; 0xa8
 80006b6:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b8:	4bc9      	ldr	r3, [pc, #804]	; (80009e0 <main+0x344>)
 80006ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006be:	2200      	movs	r2, #0
 80006c0:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006c2:	4bc7      	ldr	r3, [pc, #796]	; (80009e0 <main+0x344>)
 80006c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c8:	2201      	movs	r2, #1
 80006ca:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006cc:	4bc4      	ldr	r3, [pc, #784]	; (80009e0 <main+0x344>)
 80006ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d8:	4bc1      	ldr	r3, [pc, #772]	; (80009e0 <main+0x344>)
 80006da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006e4:	4bbe      	ldr	r3, [pc, #760]	; (80009e0 <main+0x344>)
 80006e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006f0:	4bbb      	ldr	r3, [pc, #748]	; (80009e0 <main+0x344>)
 80006f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fc:	4bb8      	ldr	r3, [pc, #736]	; (80009e0 <main+0x344>)
 80006fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000708:	4bb5      	ldr	r3, [pc, #724]	; (80009e0 <main+0x344>)
 800070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070e:	2208      	movs	r2, #8
 8000710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 8000714:	4bb2      	ldr	r3, [pc, #712]	; (80009e0 <main+0x344>)
 8000716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071a:	22dc      	movs	r2, #220	; 0xdc
 800071c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000720:	4baf      	ldr	r3, [pc, #700]	; (80009e0 <main+0x344>)
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 800072c:	4bac      	ldr	r3, [pc, #688]	; (80009e0 <main+0x344>)
 800072e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000738:	4ba9      	ldr	r3, [pc, #676]	; (80009e0 <main+0x344>)
 800073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073e:	2201      	movs	r2, #1
 8000740:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000744:	4ba6      	ldr	r3, [pc, #664]	; (80009e0 <main+0x344>)
 8000746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074a:	22c0      	movs	r2, #192	; 0xc0
 800074c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000750:	4ba3      	ldr	r3, [pc, #652]	; (80009e0 <main+0x344>)
 8000752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000756:	22a8      	movs	r2, #168	; 0xa8
 8000758:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 800075c:	4ba0      	ldr	r3, [pc, #640]	; (80009e0 <main+0x344>)
 800075e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000762:	2200      	movs	r2, #0
 8000764:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000768:	4b9d      	ldr	r3, [pc, #628]	; (80009e0 <main+0x344>)
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	2206      	movs	r2, #6
 8000770:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000774:	4b9a      	ldr	r3, [pc, #616]	; (80009e0 <main+0x344>)
 8000776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077a:	2255      	movs	r2, #85	; 0x55
 800077c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000780:	4b97      	ldr	r3, [pc, #604]	; (80009e0 <main+0x344>)
 8000782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000786:	2255      	movs	r2, #85	; 0x55
 8000788:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 800078c:	4b94      	ldr	r3, [pc, #592]	; (80009e0 <main+0x344>)
 800078e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000792:	2201      	movs	r2, #1
 8000794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000798:	4b91      	ldr	r3, [pc, #580]	; (80009e0 <main+0x344>)
 800079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079e:	22f6      	movs	r2, #246	; 0xf6
 80007a0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 80007a4:	4b8e      	ldr	r3, [pc, #568]	; (80009e0 <main+0x344>)
 80007a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007aa:	22c0      	movs	r2, #192	; 0xc0
 80007ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007b0:	4b8b      	ldr	r3, [pc, #556]	; (80009e0 <main+0x344>)
 80007b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b6:	22a8      	movs	r2, #168	; 0xa8
 80007b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007bc:	4b88      	ldr	r3, [pc, #544]	; (80009e0 <main+0x344>)
 80007be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c8:	4b85      	ldr	r3, [pc, #532]	; (80009e0 <main+0x344>)
 80007ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ce:	2203      	movs	r2, #3
 80007d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007d4:	4b82      	ldr	r3, [pc, #520]	; (80009e0 <main+0x344>)
 80007d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007e0:	4b7f      	ldr	r3, [pc, #508]	; (80009e0 <main+0x344>)
 80007e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e6:	22f6      	movs	r2, #246	; 0xf6
 80007e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007ec:	4b7c      	ldr	r3, [pc, #496]	; (80009e0 <main+0x344>)
 80007ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007fa:	4b79      	ldr	r3, [pc, #484]	; (80009e0 <main+0x344>)
 80007fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000800:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000804:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000808:	4b75      	ldr	r3, [pc, #468]	; (80009e0 <main+0x344>)
 800080a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080e:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 8000812:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 8000816:	4b72      	ldr	r3, [pc, #456]	; (80009e0 <main+0x344>)
 8000818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800081c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000820:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 8000824:	4b6e      	ldr	r3, [pc, #440]	; (80009e0 <main+0x344>)
 8000826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800082a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 8000832:	4b6b      	ldr	r3, [pc, #428]	; (80009e0 <main+0x344>)
 8000834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000838:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800083c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000840:	4b67      	ldr	r3, [pc, #412]	; (80009e0 <main+0x344>)
 8000842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000846:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800084a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 800084e:	4b64      	ldr	r3, [pc, #400]	; (80009e0 <main+0x344>)
 8000850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000854:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000858:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 800085c:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <main+0x344>)
 800085e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 800086a:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <main+0x344>)
 800086c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000870:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000874:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000878:	4b59      	ldr	r3, [pc, #356]	; (80009e0 <main+0x344>)
 800087a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087e:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 8000886:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <main+0x344>)
 8000888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800088c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 8000894:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <main+0x344>)
 8000896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800089a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800089e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <main+0x344>)
 80008a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008b0:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <main+0x344>)
 80008b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b6:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008be:	4b48      	ldr	r3, [pc, #288]	; (80009e0 <main+0x344>)
 80008c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008cc:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <main+0x344>)
 80008ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d8:	4842      	ldr	r0, [pc, #264]	; (80009e4 <main+0x348>)
 80008da:	f005 ff5f 	bl	800679c <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008de:	4942      	ldr	r1, [pc, #264]	; (80009e8 <main+0x34c>)
 80008e0:	4842      	ldr	r0, [pc, #264]	; (80009ec <main+0x350>)
 80008e2:	f00e f96b 	bl	800ebbc <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008e6:	4942      	ldr	r1, [pc, #264]	; (80009f0 <main+0x354>)
 80008e8:	4842      	ldr	r0, [pc, #264]	; (80009f4 <main+0x358>)
 80008ea:	f00e f967 	bl	800ebbc <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008ee:	4942      	ldr	r1, [pc, #264]	; (80009f8 <main+0x35c>)
 80008f0:	4842      	ldr	r0, [pc, #264]	; (80009fc <main+0x360>)
 80008f2:	f00e f963 	bl	800ebbc <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008f6:	4942      	ldr	r1, [pc, #264]	; (8000a00 <main+0x364>)
 80008f8:	4842      	ldr	r0, [pc, #264]	; (8000a04 <main+0x368>)
 80008fa:	f00e f95f 	bl	800ebbc <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008fe:	4942      	ldr	r1, [pc, #264]	; (8000a08 <main+0x36c>)
 8000900:	4842      	ldr	r0, [pc, #264]	; (8000a0c <main+0x370>)
 8000902:	f00e f95b 	bl	800ebbc <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000906:	4942      	ldr	r1, [pc, #264]	; (8000a10 <main+0x374>)
 8000908:	4842      	ldr	r0, [pc, #264]	; (8000a14 <main+0x378>)
 800090a:	f00e f957 	bl	800ebbc <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800090e:	4942      	ldr	r1, [pc, #264]	; (8000a18 <main+0x37c>)
 8000910:	4842      	ldr	r0, [pc, #264]	; (8000a1c <main+0x380>)
 8000912:	f00e f953 	bl	800ebbc <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000916:	4942      	ldr	r1, [pc, #264]	; (8000a20 <main+0x384>)
 8000918:	4842      	ldr	r0, [pc, #264]	; (8000a24 <main+0x388>)
 800091a:	f00e f94f 	bl	800ebbc <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <main+0x348>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <main+0x348>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <main+0x348>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <main+0x348>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <main+0x348>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <main+0x348>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <main+0x348>)
 8000950:	2206      	movs	r2, #6
 8000952:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <main+0x348>)
 8000958:	2201      	movs	r2, #1
 800095a:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <main+0x348>)
 8000960:	2203      	movs	r2, #3
 8000962:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <main+0x348>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <main+0x348>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <main+0x348>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <main+0x348>)
 8000980:	220a      	movs	r2, #10
 8000982:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <main+0x348>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <main+0x348>)
 8000990:	2233      	movs	r2, #51	; 0x33
 8000992:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <main+0x348>)
 8000998:	2234      	movs	r2, #52	; 0x34
 800099a:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <main+0x348>)
 80009a0:	2235      	movs	r2, #53	; 0x35
 80009a2:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <main+0x348>)
 80009a8:	220c      	movs	r2, #12
 80009aa:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <main+0x348>)
 80009b0:	2264      	movs	r2, #100	; 0x64
 80009b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <main+0x348>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <main+0x348>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <main+0x38c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <main+0x344>)
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <main+0x390>)
 80009d0:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009d2:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <main+0x344>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d8:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <main+0x344>)
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <main+0x394>)
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	e029      	b.n	8000a34 <main+0x398>
 80009e0:	2000276c 	.word	0x2000276c
 80009e4:	20000b80 	.word	0x20000b80
 80009e8:	20000024 	.word	0x20000024
 80009ec:	20000b86 	.word	0x20000b86
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000ba6 	.word	0x20000ba6
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000bb6 	.word	0x20000bb6
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000bc6 	.word	0x20000bc6
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	20000bcc 	.word	0x20000bcc
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000be2 	.word	0x20000be2
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	20000bf2 	.word	0x20000bf2
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000bdc 	.word	0x20000bdc
 8000a28:	2000381c 	.word	0x2000381c
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	200001bc 	.word	0x200001bc

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a34:	484e      	ldr	r0, [pc, #312]	; (8000b70 <main+0x4d4>)
 8000a36:	f00b fceb 	bl	800c410 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a3a:	4b4d      	ldr	r3, [pc, #308]	; (8000b70 <main+0x4d4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a40:	484c      	ldr	r0, [pc, #304]	; (8000b74 <main+0x4d8>)
 8000a42:	f00b fce5 	bl	800c410 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a46:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <main+0x4d8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a4c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a50:	2103      	movs	r1, #3
 8000a52:	4848      	ldr	r0, [pc, #288]	; (8000b74 <main+0x4d8>)
 8000a54:	f00b fd7f 	bl	800c556 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f002 f838 	bl	8002acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 fac4 	bl	8000fe8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a60:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <main+0x4dc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a45      	ldr	r2, [pc, #276]	; (8000b7c <main+0x4e0>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	099b      	lsrs	r3, r3, #6
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fdcb 	bl	8000608 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f000 fccb 	bl	800140c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a76:	f000 fb1f 	bl	80010b8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a7a:	f000 fc49 	bl	8001310 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a7e:	f000 fc71 	bl	8001364 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a82:	f000 fc99 	bl	80013b8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a86:	f000 fb4d 	bl	8001124 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a8a:	f000 fbc5 	bl	8001218 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2102      	movs	r1, #2
 8000a92:	483b      	ldr	r0, [pc, #236]	; (8000b80 <main+0x4e4>)
 8000a94:	f002 fcee 	bl	8003474 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a98:	210e      	movs	r1, #14
 8000a9a:	483a      	ldr	r0, [pc, #232]	; (8000b84 <main+0x4e8>)
 8000a9c:	f000 fd3e 	bl	800151c <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000aa0:	f001 fc2e 	bl	8002300 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aa4:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <main+0x4ec>)
 8000aa6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <main+0x41a>
 8000aae:	2113      	movs	r1, #19
 8000ab0:	4836      	ldr	r0, [pc, #216]	; (8000b8c <main+0x4f0>)
 8000ab2:	f000 fd33 	bl	800151c <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4935      	ldr	r1, [pc, #212]	; (8000b90 <main+0x4f4>)
 8000aba:	4836      	ldr	r0, [pc, #216]	; (8000b94 <main+0x4f8>)
 8000abc:	f004 fe03 	bl	80056c6 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4935      	ldr	r1, [pc, #212]	; (8000b98 <main+0x4fc>)
 8000ac4:	4835      	ldr	r0, [pc, #212]	; (8000b9c <main+0x500>)
 8000ac6:	f004 fdfe 	bl	80056c6 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000aca:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <main+0x504>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <main+0x43e>
 8000ad2:	2112      	movs	r1, #18
 8000ad4:	4833      	ldr	r0, [pc, #204]	; (8000ba4 <main+0x508>)
 8000ad6:	f000 fd21 	bl	800151c <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ada:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <main+0x50c>)
 8000adc:	22f0      	movs	r2, #240	; 0xf0
 8000ade:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <main+0x50c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000ae6:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <main+0x50c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000aec:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <main+0x50c>)
 8000aee:	22c0      	movs	r2, #192	; 0xc0
 8000af0:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000af2:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <main+0x50c>)
 8000af4:	f00d f95c 	bl	800ddb0 <eth_init>

   	 eth_socket_init(&ETH,0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	482b      	ldr	r0, [pc, #172]	; (8000ba8 <main+0x50c>)
 8000afc:	f00d f9d2 	bl	800dea4 <eth_socket_init>

   SPI_READ_EN=1;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <main+0x510>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <main+0x50c>)
 8000b08:	220f      	movs	r2, #15
 8000b0a:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <main+0x50c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <main+0x50c>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <main+0x50c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b1e:	481d      	ldr	r0, [pc, #116]	; (8000b94 <main+0x4f8>)
 8000b20:	f001 fc16 	bl	8002350 <ESP8266_HW_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d10c      	bne.n	8000b44 <main+0x4a8>
     {
   	  ESP_HW_Init=1;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <main+0x514>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <main+0x4ec>)
 8000b32:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d04a      	beq.n	8000bd0 <main+0x534>
 8000b3a:	2113      	movs	r1, #19
 8000b3c:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <main+0x518>)
 8000b3e:	f000 fced 	bl	800151c <ITM0_Write>
 8000b42:	e045      	b.n	8000bd0 <main+0x534>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b44:	f001 fbdc 	bl	8002300 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <main+0x4f8>)
 8000b4a:	f001 fc01 	bl	8002350 <ESP8266_HW_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d131      	bne.n	8000bb8 <main+0x51c>
   	  {
   		  ESP_HW_Init=1;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <main+0x514>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <main+0x4ec>)
 8000b5c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d035      	beq.n	8000bd0 <main+0x534>
 8000b64:	2113      	movs	r1, #19
 8000b66:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <main+0x518>)
 8000b68:	f000 fcd8 	bl	800151c <ITM0_Write>
 8000b6c:	e030      	b.n	8000bd0 <main+0x534>
 8000b6e:	bf00      	nop
 8000b70:	200018cc 	.word	0x200018cc
 8000b74:	20001e18 	.word	0x20001e18
 8000b78:	20000084 	.word	0x20000084
 8000b7c:	10624dd3 	.word	0x10624dd3
 8000b80:	40020000 	.word	0x40020000
 8000b84:	080101cc 	.word	0x080101cc
 8000b88:	20000b80 	.word	0x20000b80
 8000b8c:	080101dc 	.word	0x080101dc
 8000b90:	20003e34 	.word	0x20003e34
 8000b94:	200002a4 	.word	0x200002a4
 8000b98:	20003e38 	.word	0x20003e38
 8000b9c:	200002e8 	.word	0x200002e8
 8000ba0:	20002764 	.word	0x20002764
 8000ba4:	080101f0 	.word	0x080101f0
 8000ba8:	2000276c 	.word	0x2000276c
 8000bac:	2000382c 	.word	0x2000382c
 8000bb0:	2000381f 	.word	0x2000381f
 8000bb4:	08010204 	.word	0x08010204
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bb8:	4bab      	ldr	r3, [pc, #684]	; (8000e68 <main+0x7cc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bbe:	4bab      	ldr	r3, [pc, #684]	; (8000e6c <main+0x7d0>)
 8000bc0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <main+0x534>
 8000bc8:	2115      	movs	r1, #21
 8000bca:	48a9      	ldr	r0, [pc, #676]	; (8000e70 <main+0x7d4>)
 8000bcc:	f000 fca6 	bl	800151c <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd4:	f001 ffec 	bl	8002bb0 <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bd8:	4ba3      	ldr	r3, [pc, #652]	; (8000e68 <main+0x7cc>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	f040 809d 	bne.w	8000d1c <main+0x680>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000be2:	4ba4      	ldr	r3, [pc, #656]	; (8000e74 <main+0x7d8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	f040 8098 	bne.w	8000d1c <main+0x680>
 8000bec:	4b9f      	ldr	r3, [pc, #636]	; (8000e6c <main+0x7d0>)
 8000bee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8092 	bne.w	8000d1c <main+0x680>
 8000bf8:	4b9c      	ldr	r3, [pc, #624]	; (8000e6c <main+0x7d0>)
 8000bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bfe:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c02:	f340 808b 	ble.w	8000d1c <main+0x680>
 8000c06:	4b9c      	ldr	r3, [pc, #624]	; (8000e78 <main+0x7dc>)
 8000c08:	7c9b      	ldrb	r3, [r3, #18]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8086 	beq.w	8000d1c <main+0x680>
	  			{	ETH.S0_data_available=0;
 8000c10:	4b99      	ldr	r3, [pc, #612]	; (8000e78 <main+0x7dc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c16:	4b99      	ldr	r3, [pc, #612]	; (8000e7c <main+0x7e0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c1c:	4b95      	ldr	r3, [pc, #596]	; (8000e74 <main+0x7d8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c22:	2100      	movs	r1, #0
 8000c24:	4896      	ldr	r0, [pc, #600]	; (8000e80 <main+0x7e4>)
 8000c26:	f00b fcc4 	bl	800c5b2 <ModBUS_F03_Read>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4698      	mov	r8, r3
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4893      	ldr	r0, [pc, #588]	; (8000e80 <main+0x7e4>)
 8000c32:	f00b fcbe 	bl	800c5b2 <ModBUS_F03_Read>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461c      	mov	r4, r3
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	4890      	ldr	r0, [pc, #576]	; (8000e80 <main+0x7e4>)
 8000c3e:	f00b fcb8 	bl	800c5b2 <ModBUS_F03_Read>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461d      	mov	r5, r3
 8000c46:	2103      	movs	r1, #3
 8000c48:	488d      	ldr	r0, [pc, #564]	; (8000e80 <main+0x7e4>)
 8000c4a:	f00b fcb2 	bl	800c5b2 <ModBUS_F03_Read>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461e      	mov	r6, r3
 8000c52:	2104      	movs	r1, #4
 8000c54:	488a      	ldr	r0, [pc, #552]	; (8000e80 <main+0x7e4>)
 8000c56:	f00b fcac 	bl	800c5b2 <ModBUS_F03_Read>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	2105      	movs	r1, #5
 8000c60:	4887      	ldr	r0, [pc, #540]	; (8000e80 <main+0x7e4>)
 8000c62:	f00b fca6 	bl	800c5b2 <ModBUS_F03_Read>
 8000c66:	4603      	mov	r3, r0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	2106      	movs	r1, #6
 8000c6c:	4884      	ldr	r0, [pc, #528]	; (8000e80 <main+0x7e4>)
 8000c6e:	f00b fca0 	bl	800c5b2 <ModBUS_F03_Read>
 8000c72:	4603      	mov	r3, r0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	2107      	movs	r1, #7
 8000c78:	4881      	ldr	r0, [pc, #516]	; (8000e80 <main+0x7e4>)
 8000c7a:	f00b fc9a 	bl	800c5b2 <ModBUS_F03_Read>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	2108      	movs	r1, #8
 8000c84:	487e      	ldr	r0, [pc, #504]	; (8000e80 <main+0x7e4>)
 8000c86:	f00b fc94 	bl	800c5b2 <ModBUS_F03_Read>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	2109      	movs	r1, #9
 8000c90:	487b      	ldr	r0, [pc, #492]	; (8000e80 <main+0x7e4>)
 8000c92:	f00b fc8e 	bl	800c5b2 <ModBUS_F03_Read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9e:	930c      	str	r3, [sp, #48]	; 0x30
 8000ca0:	4b78      	ldr	r3, [pc, #480]	; (8000e84 <main+0x7e8>)
 8000ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ca4:	4b78      	ldr	r3, [pc, #480]	; (8000e88 <main+0x7ec>)
 8000ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8000ca8:	2301      	movs	r3, #1
 8000caa:	9309      	str	r3, [sp, #36]	; 0x24
 8000cac:	9208      	str	r2, [sp, #32]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	9207      	str	r2, [sp, #28]
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	9206      	str	r2, [sp, #24]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	9205      	str	r2, [sp, #20]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	9204      	str	r2, [sp, #16]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	9303      	str	r3, [sp, #12]
 8000cc2:	9602      	str	r6, [sp, #8]
 8000cc4:	9501      	str	r5, [sp, #4]
 8000cc6:	9400      	str	r4, [sp, #0]
 8000cc8:	4643      	mov	r3, r8
 8000cca:	4a70      	ldr	r2, [pc, #448]	; (8000e8c <main+0x7f0>)
 8000ccc:	4970      	ldr	r1, [pc, #448]	; (8000e90 <main+0x7f4>)
 8000cce:	4871      	ldr	r0, [pc, #452]	; (8000e94 <main+0x7f8>)
 8000cd0:	f00a fb9c 	bl	800b40c <httpPOST>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d020      	beq.n	8000d1c <main+0x680>
	  								ModBUS_F03_Read(&mb_eth,8),
									ModBUS_F03_Read(&mb_eth,9),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000cda:	486b      	ldr	r0, [pc, #428]	; (8000e88 <main+0x7ec>)
 8000cdc:	f7ff fa8a 	bl	80001f4 <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2341      	movs	r3, #65	; 0x41
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4967      	ldr	r1, [pc, #412]	; (8000e88 <main+0x7ec>)
 8000cec:	486a      	ldr	r0, [pc, #424]	; (8000e98 <main+0x7fc>)
 8000cee:	f00d fea9 	bl	800ea44 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000cf2:	4865      	ldr	r0, [pc, #404]	; (8000e88 <main+0x7ec>)
 8000cf4:	f7ff fa7e 	bl	80001f4 <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b5b      	ldr	r3, [pc, #364]	; (8000e6c <main+0x7d0>)
 8000cfe:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d02:	4b5a      	ldr	r3, [pc, #360]	; (8000e6c <main+0x7d0>)
 8000d04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d807      	bhi.n	8000d1c <main+0x680>
	  							{
	  								EnviarDatos(&wf);
 8000d0c:	4857      	ldr	r0, [pc, #348]	; (8000e6c <main+0x7d0>)
 8000d0e:	f005 fd2f 	bl	8006770 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d12:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <main+0x7d0>)
 8000d14:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d1c:	4b5f      	ldr	r3, [pc, #380]	; (8000e9c <main+0x800>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d003      	beq.n	8000d2c <main+0x690>
 8000d24:	4b5e      	ldr	r3, [pc, #376]	; (8000ea0 <main+0x804>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d175      	bne.n	8000e18 <main+0x77c>
	  		{
	  			if(FLAG_UART1==1)
 8000d2c:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <main+0x800>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d11c      	bne.n	8000d6e <main+0x6d2>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d34:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <main+0x808>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <main+0x80c>)
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	495b      	ldr	r1, [pc, #364]	; (8000eac <main+0x810>)
 8000d40:	485b      	ldr	r0, [pc, #364]	; (8000eb0 <main+0x814>)
 8000d42:	f00d fe7f 	bl	800ea44 <CopiaVector>
	  					FLAG_UART1=0;
 8000d46:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <main+0x800>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000d4c:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <main+0x818>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d102      	bne.n	8000d5a <main+0x6be>
	  						{
	  							error_rxdata=0;
 8000d54:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <main+0x818>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000d5a:	4b56      	ldr	r3, [pc, #344]	; (8000eb4 <main+0x818>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d105      	bne.n	8000d6e <main+0x6d2>
	  						{
	  							error_rxdata=5;
 8000d62:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <main+0x818>)
 8000d64:	2205      	movs	r2, #5
 8000d66:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000d68:	4b52      	ldr	r3, [pc, #328]	; (8000eb4 <main+0x818>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000d6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ea0 <main+0x804>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d102      	bne.n	8000d7c <main+0x6e0>
	  					{
	  						FLAG_TIMEOUT=0;
 8000d76:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <main+0x804>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000d7c:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <main+0x7cc>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d149      	bne.n	8000e18 <main+0x77c>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000d84:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <main+0x808>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a38      	ldr	r2, [pc, #224]	; (8000e6c <main+0x7d0>)
 8000d8a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d8e:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <main+0x808>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <main+0x80c>)
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	4944      	ldr	r1, [pc, #272]	; (8000eac <main+0x810>)
 8000d9a:	4845      	ldr	r0, [pc, #276]	; (8000eb0 <main+0x814>)
 8000d9c:	f00d fe52 	bl	800ea44 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000da0:	4832      	ldr	r0, [pc, #200]	; (8000e6c <main+0x7d0>)
 8000da2:	f005 fdc5 	bl	8006930 <AT_ESP8266_ND>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b43      	ldr	r3, [pc, #268]	; (8000eb8 <main+0x81c>)
 8000dac:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <main+0x7d0>)
 8000db0:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d12f      	bne.n	8000e18 <main+0x77c>
 8000db8:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <main+0x7d0>)
 8000dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dbe:	2b63      	cmp	r3, #99	; 0x63
 8000dc0:	d12a      	bne.n	8000e18 <main+0x77c>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <main+0x7d0>)
 8000dc4:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000dc8:	2341      	movs	r3, #65	; 0x41
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	493b      	ldr	r1, [pc, #236]	; (8000ebc <main+0x820>)
 8000dd0:	483b      	ldr	r0, [pc, #236]	; (8000ec0 <main+0x824>)
 8000dd2:	f00d fe37 	bl	800ea44 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <main+0x7d0>)
 8000dd8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000ddc:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <main+0x828>)
 8000dde:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

	  						ModBUS(&mb_wf);
 8000de2:	4838      	ldr	r0, [pc, #224]	; (8000ec4 <main+0x828>)
 8000de4:	f00b fc6a 	bl	800c6bc <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <main+0x828>)
 8000dea:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000dee:	2341      	movs	r3, #65	; 0x41
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	4934      	ldr	r1, [pc, #208]	; (8000ec8 <main+0x82c>)
 8000df6:	4828      	ldr	r0, [pc, #160]	; (8000e98 <main+0x7fc>)
 8000df8:	f00d fe24 	bl	800ea44 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <main+0x828>)
 8000dfe:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000e02:	4a1a      	ldr	r2, [pc, #104]	; (8000e6c <main+0x7d0>)
 8000e04:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <main+0x7d0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <main+0x7d0>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000e18:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <main+0x830>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d005      	beq.n	8000e2c <main+0x790>
 8000e20:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <main+0x834>)
 8000e22:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	f040 808e 	bne.w	8000f48 <main+0x8ac>
	  		{
	  			if(FLAG_UART2==1)
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <main+0x830>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d105      	bne.n	8000e40 <main+0x7a4>
	  				{
	  				FLAG_UART2=0;
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <main+0x830>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000e3a:	4825      	ldr	r0, [pc, #148]	; (8000ed0 <main+0x834>)
 8000e3c:	f00a fe60 	bl	800bb00 <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <main+0x834>)
 8000e42:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d17e      	bne.n	8000f48 <main+0x8ac>
	  				{
	  					lr.tmr_dly_ON=0;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <main+0x834>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000e52:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000e56:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <main+0x834>)
 8000e58:	f00a fe36 	bl	800bac8 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <main+0x834>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <main+0x834>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	e035      	b.n	8000ed4 <main+0x838>
 8000e68:	2000381f 	.word	0x2000381f
 8000e6c:	20000b80 	.word	0x20000b80
 8000e70:	08010218 	.word	0x08010218
 8000e74:	20002765 	.word	0x20002765
 8000e78:	2000276c 	.word	0x2000276c
 8000e7c:	20002768 	.word	0x20002768
 8000e80:	200018cc 	.word	0x200018cc
 8000e84:	20002564 	.word	0x20002564
 8000e88:	20002364 	.word	0x20002364
 8000e8c:	2000001c 	.word	0x2000001c
 8000e90:	2000000c 	.word	0x2000000c
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000e14 	.word	0x20000e14
 8000e9c:	20003824 	.word	0x20003824
 8000ea0:	20003823 	.word	0x20003823
 8000ea4:	20003e40 	.word	0x20003e40
 8000ea8:	20003e30 	.word	0x20003e30
 8000eac:	20003c30 	.word	0x20003c30
 8000eb0:	20001214 	.word	0x20001214
 8000eb4:	20003827 	.word	0x20003827
 8000eb8:	20003826 	.word	0x20003826
 8000ebc:	20000c14 	.word	0x20000c14
 8000ec0:	20001e25 	.word	0x20001e25
 8000ec4:	20001e18 	.word	0x20001e18
 8000ec8:	20001fac 	.word	0x20001fac
 8000ecc:	20003825 	.word	0x20003825
 8000ed0:	20000378 	.word	0x20000378
 8000ed4:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000ed8:	4834      	ldr	r0, [pc, #208]	; (8000fac <main+0x910>)
 8000eda:	f7ff f98b 	bl	80001f4 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b32      	ldr	r3, [pc, #200]	; (8000fac <main+0x910>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4932      	ldr	r1, [pc, #200]	; (8000fb0 <main+0x914>)
 8000ee8:	461a      	mov	r2, r3
 8000eea:	460b      	mov	r3, r1
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000ef0:	4830      	ldr	r0, [pc, #192]	; (8000fb4 <main+0x918>)
 8000ef2:	f7ff f97f 	bl	80001f4 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <main+0x918>)
 8000efc:	4413      	add	r3, r2
 8000efe:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <main+0x91c>)
 8000f00:	4614      	mov	r4, r2
 8000f02:	469c      	mov	ip, r3
 8000f04:	f104 0e20 	add.w	lr, r4, #32
 8000f08:	4665      	mov	r5, ip
 8000f0a:	4626      	mov	r6, r4
 8000f0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f0e:	6028      	str	r0, [r5, #0]
 8000f10:	6069      	str	r1, [r5, #4]
 8000f12:	60aa      	str	r2, [r5, #8]
 8000f14:	60eb      	str	r3, [r5, #12]
 8000f16:	3410      	adds	r4, #16
 8000f18:	f10c 0c10 	add.w	ip, ip, #16
 8000f1c:	4574      	cmp	r4, lr
 8000f1e:	d1f3      	bne.n	8000f08 <main+0x86c>
 8000f20:	4663      	mov	r3, ip
 8000f22:	4622      	mov	r2, r4
 8000f24:	6810      	ldr	r0, [r2, #0]
 8000f26:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <main+0x920>)
 8000f2a:	2223      	movs	r2, #35	; 0x23
 8000f2c:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <main+0x920>)
 8000f32:	2214      	movs	r2, #20
 8000f34:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8000f38:	4921      	ldr	r1, [pc, #132]	; (8000fc0 <main+0x924>)
 8000f3a:	4820      	ldr	r0, [pc, #128]	; (8000fbc <main+0x920>)
 8000f3c:	f00a fd16 	bl	800b96c <LoRa_Send>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <main+0x928>)
 8000f46:	701a      	strb	r2, [r3, #0]
	  				}

	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <main+0x92c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d108      	bne.n	8000f62 <main+0x8c6>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000f50:	2201      	movs	r2, #1
 8000f52:	491e      	ldr	r1, [pc, #120]	; (8000fcc <main+0x930>)
 8000f54:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <main+0x934>)
 8000f56:	f008 fdeb 	bl	8009b30 <WiFi_Conn_ND>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <main+0x938>)
 8000f60:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <main+0x93c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	f47f ae36 	bne.w	8000bd8 <main+0x53c>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f72:	481a      	ldr	r0, [pc, #104]	; (8000fdc <main+0x940>)
 8000f74:	f002 fa7e 	bl	8003474 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000f78:	2115      	movs	r1, #21
 8000f7a:	4819      	ldr	r0, [pc, #100]	; (8000fe0 <main+0x944>)
 8000f7c:	f000 face 	bl	800151c <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000f80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f84:	f001 fe14 	bl	8002bb0 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	4813      	ldr	r0, [pc, #76]	; (8000fdc <main+0x940>)
 8000f90:	f002 fa70 	bl	8003474 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000f94:	2118      	movs	r1, #24
 8000f96:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <main+0x948>)
 8000f98:	f000 fac0 	bl	800151c <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000f9c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fa0:	f001 fe06 	bl	8002bb0 <HAL_Delay>
	  				esp_restart=0;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <main+0x93c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000faa:	e615      	b.n	8000bd8 <main+0x53c>
 8000fac:	2000038e 	.word	0x2000038e
 8000fb0:	08010230 	.word	0x08010230
 8000fb4:	20000854 	.word	0x20000854
 8000fb8:	08010234 	.word	0x08010234
 8000fbc:	20000378 	.word	0x20000378
 8000fc0:	200002e8 	.word	0x200002e8
 8000fc4:	20000b7c 	.word	0x20000b7c
 8000fc8:	2000381f 	.word	0x2000381f
 8000fcc:	200002a4 	.word	0x200002a4
 8000fd0:	20000b80 	.word	0x20000b80
 8000fd4:	20003829 	.word	0x20003829
 8000fd8:	20003828 	.word	0x20003828
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	08010258 	.word	0x08010258
 8000fe4:	08010270 	.word	0x08010270

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	; 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00d fdb8 	bl	800eb6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <SystemClock_Config+0xc8>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <SystemClock_Config+0xc8>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <SystemClock_Config+0xc8>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <SystemClock_Config+0xcc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <SystemClock_Config+0xcc>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <SystemClock_Config+0xcc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001058:	230c      	movs	r3, #12
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800105c:	2360      	movs	r3, #96	; 0x60
 800105e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001064:	2304      	movs	r3, #4
 8001066:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fa35 	bl	80034dc <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001078:	f001 fa14 	bl	80024a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2103      	movs	r1, #3
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fc97 	bl	80039cc <HAL_RCC_ClockConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010a4:	f001 f9fe 	bl	80024a4 <Error_Handler>
  }
}
 80010a8:	bf00      	nop
 80010aa:	3750      	adds	r7, #80	; 0x50
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_SPI1_Init+0x64>)
 80010be:	4a18      	ldr	r2, [pc, #96]	; (8001120 <MX_SPI1_Init+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_SPI1_Init+0x64>)
 80010c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_SPI1_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_SPI1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_SPI1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_SPI1_Init+0x64>)
 80010e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_SPI1_Init+0x64>)
 80010ec:	2210      	movs	r2, #16
 80010ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <MX_SPI1_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_SPI1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_SPI1_Init+0x64>)
 8001104:	220a      	movs	r2, #10
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_SPI1_Init+0x64>)
 800110a:	f002 fe3f 	bl	8003d8c <HAL_SPI_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001114:	f001 f9c6 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001bc 	.word	0x200001bc
 8001120:	40013000 	.word	0x40013000

08001124 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	; 0x38
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]
 8001152:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001154:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <MX_TIM2_Init+0xf0>)
 8001156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_TIM2_Init+0xf0>)
 800115e:	2264      	movs	r2, #100	; 0x64
 8001160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <MX_TIM2_Init+0xf0>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_TIM2_Init+0xf0>)
 800116a:	2264      	movs	r2, #100	; 0x64
 800116c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_TIM2_Init+0xf0>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_TIM2_Init+0xf0>)
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800117a:	4826      	ldr	r0, [pc, #152]	; (8001214 <MX_TIM2_Init+0xf0>)
 800117c:	f003 f8fc 	bl	8004378 <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001186:	f001 f98d 	bl	80024a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001194:	4619      	mov	r1, r3
 8001196:	481f      	ldr	r0, [pc, #124]	; (8001214 <MX_TIM2_Init+0xf0>)
 8001198:	f003 fd04 	bl	8004ba4 <HAL_TIM_ConfigClockSource>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011a2:	f001 f97f 	bl	80024a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011a6:	481b      	ldr	r0, [pc, #108]	; (8001214 <MX_TIM2_Init+0xf0>)
 80011a8:	f003 f935 	bl	8004416 <HAL_TIM_OC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011b2:	f001 f977 	bl	80024a4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80011b6:	2108      	movs	r1, #8
 80011b8:	4816      	ldr	r0, [pc, #88]	; (8001214 <MX_TIM2_Init+0xf0>)
 80011ba:	f003 fb35 	bl	8004828 <HAL_TIM_OnePulse_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80011c4:	f001 f96e 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4619      	mov	r1, r3
 80011d6:	480f      	ldr	r0, [pc, #60]	; (8001214 <MX_TIM2_Init+0xf0>)
 80011d8:	f004 f8a0 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80011e2:	f001 f95f 	bl	80024a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80011e6:	2320      	movs	r3, #32
 80011e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_TIM2_Init+0xf0>)
 80011fe:	f003 fc75 	bl	8004aec <HAL_TIM_OC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001208:	f001 f94c 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3738      	adds	r7, #56	; 0x38
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000214 	.word	0x20000214

08001218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	f107 0320 	add.w	r3, r7, #32
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <MX_TIM3_Init+0xf0>)
 800124a:	4a30      	ldr	r2, [pc, #192]	; (800130c <MX_TIM3_Init+0xf4>)
 800124c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <MX_TIM3_Init+0xf0>)
 8001250:	2264      	movs	r2, #100	; 0x64
 8001252:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <MX_TIM3_Init+0xf0>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <MX_TIM3_Init+0xf0>)
 800125c:	2296      	movs	r2, #150	; 0x96
 800125e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <MX_TIM3_Init+0xf0>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <MX_TIM3_Init+0xf0>)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800126c:	4826      	ldr	r0, [pc, #152]	; (8001308 <MX_TIM3_Init+0xf0>)
 800126e:	f003 f883 	bl	8004378 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001278:	f001 f914 	bl	80024a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	4619      	mov	r1, r3
 8001288:	481f      	ldr	r0, [pc, #124]	; (8001308 <MX_TIM3_Init+0xf0>)
 800128a:	f003 fc8b 	bl	8004ba4 <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001294:	f001 f906 	bl	80024a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <MX_TIM3_Init+0xf0>)
 800129a:	f003 f8bc 	bl	8004416 <HAL_TIM_OC_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80012a4:	f001 f8fe 	bl	80024a4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80012a8:	2108      	movs	r1, #8
 80012aa:	4817      	ldr	r0, [pc, #92]	; (8001308 <MX_TIM3_Init+0xf0>)
 80012ac:	f003 fabc 	bl	8004828 <HAL_TIM_OnePulse_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80012b6:	f001 f8f5 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	4619      	mov	r1, r3
 80012c8:	480f      	ldr	r0, [pc, #60]	; (8001308 <MX_TIM3_Init+0xf0>)
 80012ca:	f004 f827 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80012d4:	f001 f8e6 	bl	80024a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012d8:	2320      	movs	r3, #32
 80012da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_TIM3_Init+0xf0>)
 80012f0:	f003 fbfc 	bl	8004aec <HAL_TIM_OC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80012fa:	f001 f8d3 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3738      	adds	r7, #56	; 0x38
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000025c 	.word	0x2000025c
 800130c:	40000400 	.word	0x40000400

08001310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_USART1_UART_Init+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_USART1_UART_Init+0x4c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USART1_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USART1_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001348:	f004 f86a 	bl	8005420 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001352:	f001 f8a7 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002a4 	.word	0x200002a4
 8001360:	40011000 	.word	0x40011000

08001364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_USART2_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800139c:	f004 f840 	bl	8005420 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f001 f87d 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200002e8 	.word	0x200002e8
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART6_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <MX_USART6_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_USART6_UART_Init+0x4c>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART6_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART6_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART6_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART6_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART6_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART6_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART6_UART_Init+0x4c>)
 80013f0:	f004 f816 	bl	8005420 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f001 f853 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000032c 	.word	0x2000032c
 8001408:	40011400 	.word	0x40011400

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <MX_GPIO_Init+0x104>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a39      	ldr	r2, [pc, #228]	; (8001510 <MX_GPIO_Init+0x104>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <MX_GPIO_Init+0x104>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <MX_GPIO_Init+0x104>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a32      	ldr	r2, [pc, #200]	; (8001510 <MX_GPIO_Init+0x104>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <MX_GPIO_Init+0x104>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_GPIO_Init+0x104>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <MX_GPIO_Init+0x104>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_GPIO_Init+0x104>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_GPIO_Init+0x104>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a24      	ldr	r2, [pc, #144]	; (8001510 <MX_GPIO_Init+0x104>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_GPIO_Init+0x104>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001498:	481e      	ldr	r0, [pc, #120]	; (8001514 <MX_GPIO_Init+0x108>)
 800149a:	f001 ffeb 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2102      	movs	r1, #2
 80014a2:	481d      	ldr	r0, [pc, #116]	; (8001518 <MX_GPIO_Init+0x10c>)
 80014a4:	f001 ffe6 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2110      	movs	r1, #16
 80014ac:	481a      	ldr	r0, [pc, #104]	; (8001518 <MX_GPIO_Init+0x10c>)
 80014ae:	f001 ffe1 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80014b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4812      	ldr	r0, [pc, #72]	; (8001514 <MX_GPIO_Init+0x108>)
 80014cc:	f001 fd6a 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 80014d0:	f240 1301 	movw	r3, #257	; 0x101
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <MX_GPIO_Init+0x10c>)
 80014e6:	f001 fd5d 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 80014ea:	2312      	movs	r3, #18
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_GPIO_Init+0x10c>)
 8001502:	f001 fd4f 	bl	8002fa4 <HAL_GPIO_Init>

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40020800 	.word	0x40020800
 8001518:	40020000 	.word	0x40020000

0800151c <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	e009      	b.n	8001540 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f889 	bl	800064c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf1      	blt.n	800152c <ITM0_Write+0x10>
  }
  return len;
 8001548:	683b      	ldr	r3, [r7, #0]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800155a:	4b68      	ldr	r3, [pc, #416]	; (80016fc <SysTick_Handler+0x1a8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	4a66      	ldr	r2, [pc, #408]	; (80016fc <SysTick_Handler+0x1a8>)
 8001562:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001564:	4b66      	ldr	r3, [pc, #408]	; (8001700 <SysTick_Handler+0x1ac>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a65      	ldr	r2, [pc, #404]	; (8001700 <SysTick_Handler+0x1ac>)
 800156c:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800156e:	4b65      	ldr	r3, [pc, #404]	; (8001704 <SysTick_Handler+0x1b0>)
 8001570:	791b      	ldrb	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <SysTick_Handler+0x2c>
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <SysTick_Handler+0x1b4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a62      	ldr	r2, [pc, #392]	; (8001708 <SysTick_Handler+0x1b4>)
 800157e:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001580:	4b60      	ldr	r3, [pc, #384]	; (8001704 <SysTick_Handler+0x1b0>)
 8001582:	791b      	ldrb	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00c      	beq.n	80015a2 <SysTick_Handler+0x4e>
 8001588:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <SysTick_Handler+0x1b0>)
 800158a:	885b      	ldrh	r3, [r3, #2]
 800158c:	461a      	mov	r2, r3
 800158e:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <SysTick_Handler+0x1b4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	da05      	bge.n	80015a2 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 8001596:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <SysTick_Handler+0x1b0>)
 8001598:	2200      	movs	r2, #0
 800159a:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <SysTick_Handler+0x1b4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80015a2:	4b5a      	ldr	r3, [pc, #360]	; (800170c <SysTick_Handler+0x1b8>)
 80015a4:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d116      	bne.n	80015da <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80015ac:	4b57      	ldr	r3, [pc, #348]	; (800170c <SysTick_Handler+0x1b8>)
 80015ae:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80015b2:	3301      	adds	r3, #1
 80015b4:	4a55      	ldr	r2, [pc, #340]	; (800170c <SysTick_Handler+0x1b8>)
 80015b6:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80015ba:	4b54      	ldr	r3, [pc, #336]	; (800170c <SysTick_Handler+0x1b8>)
 80015bc:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <SysTick_Handler+0x1b8>)
 80015c2:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dd07      	ble.n	80015da <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <SysTick_Handler+0x1b8>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 80015d2:	4b4e      	ldr	r3, [pc, #312]	; (800170c <SysTick_Handler+0x1b8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80015da:	4b4d      	ldr	r3, [pc, #308]	; (8001710 <SysTick_Handler+0x1bc>)
 80015dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015e0:	f240 2261 	movw	r2, #609	; 0x261
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d005      	beq.n	80015f4 <SysTick_Handler+0xa0>
 80015e8:	4b49      	ldr	r3, [pc, #292]	; (8001710 <SysTick_Handler+0x1bc>)
 80015ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015ee:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80015f2:	d109      	bne.n	8001608 <SysTick_Handler+0xb4>
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <SysTick_Handler+0x1bc>)
 80015f6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d104      	bne.n	8001608 <SysTick_Handler+0xb4>
 80015fe:	4b45      	ldr	r3, [pc, #276]	; (8001714 <SysTick_Handler+0x1c0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a43      	ldr	r2, [pc, #268]	; (8001714 <SysTick_Handler+0x1c0>)
 8001606:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 20000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 8001608:	4b42      	ldr	r3, [pc, #264]	; (8001714 <SysTick_Handler+0x1c0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001610:	4293      	cmp	r3, r2
 8001612:	dd0c      	ble.n	800162e <SysTick_Handler+0xda>
 8001614:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <SysTick_Handler+0x1bc>)
 8001616:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800161a:	2b01      	cmp	r3, #1
 800161c:	d007      	beq.n	800162e <SysTick_Handler+0xda>
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <SysTick_Handler+0x1bc>)
 8001620:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <SysTick_Handler+0xda>
 8001628:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <SysTick_Handler+0x1c4>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <SysTick_Handler+0x1c8>)
 8001630:	7b9b      	ldrb	r3, [r3, #14]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10e      	bne.n	8001654 <SysTick_Handler+0x100>
	{
		ETH.ETH_WDG++;
 8001636:	4b39      	ldr	r3, [pc, #228]	; (800171c <SysTick_Handler+0x1c8>)
 8001638:	899b      	ldrh	r3, [r3, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <SysTick_Handler+0x1c8>)
 8001640:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <SysTick_Handler+0x1c8>)
 8001644:	899b      	ldrh	r3, [r3, #12]
 8001646:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800164a:	d303      	bcc.n	8001654 <SysTick_Handler+0x100>
		{
			ETH.ETH_WDG=64000;
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <SysTick_Handler+0x1c8>)
 800164e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001652:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <SysTick_Handler+0x1a8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b64      	cmp	r3, #100	; 0x64
 800165a:	f040 841f 	bne.w	8001e9c <SysTick_Handler+0x948>
  {
	  dbgn++;
 800165e:	4b30      	ldr	r3, [pc, #192]	; (8001720 <SysTick_Handler+0x1cc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <SysTick_Handler+0x1cc>)
 8001666:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <SysTick_Handler+0x1a8>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <SysTick_Handler+0x1d0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	4a2b      	ldr	r2, [pc, #172]	; (8001724 <SysTick_Handler+0x1d0>)
 8001676:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001678:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <SysTick_Handler+0x1d4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001680:	d102      	bne.n	8001688 <SysTick_Handler+0x134>
 8001682:	4b29      	ldr	r3, [pc, #164]	; (8001728 <SysTick_Handler+0x1d4>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <SysTick_Handler+0x1d8>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <SysTick_Handler+0x146>
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SysTick_Handler+0x1d4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	4a24      	ldr	r2, [pc, #144]	; (8001728 <SysTick_Handler+0x1d4>)
 8001698:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <SysTick_Handler+0x1d4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d102      	bne.n	80016a8 <SysTick_Handler+0x154>
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <SysTick_Handler+0x1d8>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <SysTick_Handler+0x1d8>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d104      	bne.n	80016ba <SysTick_Handler+0x166>
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <SysTick_Handler+0x1d4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <SysTick_Handler+0x1d4>)
 80016b8:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <SysTick_Handler+0x1d4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <SysTick_Handler+0x174>
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <SysTick_Handler+0x1d8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016cc:	4818      	ldr	r0, [pc, #96]	; (8001730 <SysTick_Handler+0x1dc>)
 80016ce:	f001 feea 	bl	80034a6 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <SysTick_Handler+0x1e0>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 83d0 	beq.w	8001e7c <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <SysTick_Handler+0x1e4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 83cf 	beq.w	8001e84 <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 80016e6:	2100      	movs	r1, #0
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <SysTick_Handler+0x1c8>)
 80016ea:	f00c fc57 	bl	800df9c <eth_rd_SOCKET_STAT>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <SysTick_Handler+0x1c8>)
 80016f4:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <SysTick_Handler+0x1c8>)
 80016f8:	7b9b      	ldrb	r3, [r3, #14]
 80016fa:	e01f      	b.n	800173c <SysTick_Handler+0x1e8>
 80016fc:	20000370 	.word	0x20000370
 8001700:	20003e48 	.word	0x20003e48
 8001704:	200018cc 	.word	0x200018cc
 8001708:	20003e50 	.word	0x20003e50
 800170c:	20000378 	.word	0x20000378
 8001710:	20000b80 	.word	0x20000b80
 8001714:	20002768 	.word	0x20002768
 8001718:	20002765 	.word	0x20002765
 800171c:	2000276c 	.word	0x2000276c
 8001720:	20003e74 	.word	0x20003e74
 8001724:	20000374 	.word	0x20000374
 8001728:	20003e4c 	.word	0x20003e4c
 800172c:	2000382a 	.word	0x2000382a
 8001730:	40020800 	.word	0x40020800
 8001734:	2000381c 	.word	0x2000381c
 8001738:	2000382c 	.word	0x2000382c
 800173c:	2b5f      	cmp	r3, #95	; 0x5f
 800173e:	f200 83a6 	bhi.w	8001e8e <SysTick_Handler+0x93a>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <SysTick_Handler+0x1f4>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	080018c9 	.word	0x080018c9
 800174c:	08001e8f 	.word	0x08001e8f
 8001750:	08001e8f 	.word	0x08001e8f
 8001754:	08001e8f 	.word	0x08001e8f
 8001758:	08001e8f 	.word	0x08001e8f
 800175c:	08001e8f 	.word	0x08001e8f
 8001760:	08001e8f 	.word	0x08001e8f
 8001764:	08001e8f 	.word	0x08001e8f
 8001768:	08001e8f 	.word	0x08001e8f
 800176c:	08001e8f 	.word	0x08001e8f
 8001770:	08001e8f 	.word	0x08001e8f
 8001774:	08001e8f 	.word	0x08001e8f
 8001778:	08001e8f 	.word	0x08001e8f
 800177c:	08001e8f 	.word	0x08001e8f
 8001780:	08001e8f 	.word	0x08001e8f
 8001784:	08001e8f 	.word	0x08001e8f
 8001788:	08001e8f 	.word	0x08001e8f
 800178c:	08001e8f 	.word	0x08001e8f
 8001790:	08001e8f 	.word	0x08001e8f
 8001794:	08001901 	.word	0x08001901
 8001798:	08001953 	.word	0x08001953
 800179c:	0800196b 	.word	0x0800196b
 80017a0:	08001983 	.word	0x08001983
 80017a4:	0800199b 	.word	0x0800199b
 80017a8:	08001cf7 	.word	0x08001cf7
 80017ac:	08001e8f 	.word	0x08001e8f
 80017b0:	08001d0f 	.word	0x08001d0f
 80017b4:	08001d27 	.word	0x08001d27
 80017b8:	08001d65 	.word	0x08001d65
 80017bc:	08001da3 	.word	0x08001da3
 80017c0:	08001e8f 	.word	0x08001e8f
 80017c4:	08001e8f 	.word	0x08001e8f
 80017c8:	08001e8f 	.word	0x08001e8f
 80017cc:	08001e8f 	.word	0x08001e8f
 80017d0:	08001dbb 	.word	0x08001dbb
 80017d4:	08001e8f 	.word	0x08001e8f
 80017d8:	08001e8f 	.word	0x08001e8f
 80017dc:	08001e8f 	.word	0x08001e8f
 80017e0:	08001e8f 	.word	0x08001e8f
 80017e4:	08001e8f 	.word	0x08001e8f
 80017e8:	08001e8f 	.word	0x08001e8f
 80017ec:	08001e8f 	.word	0x08001e8f
 80017f0:	08001e8f 	.word	0x08001e8f
 80017f4:	08001e8f 	.word	0x08001e8f
 80017f8:	08001e8f 	.word	0x08001e8f
 80017fc:	08001e8f 	.word	0x08001e8f
 8001800:	08001e8f 	.word	0x08001e8f
 8001804:	08001e8f 	.word	0x08001e8f
 8001808:	08001e8f 	.word	0x08001e8f
 800180c:	08001e8f 	.word	0x08001e8f
 8001810:	08001e35 	.word	0x08001e35
 8001814:	08001e8f 	.word	0x08001e8f
 8001818:	08001e8f 	.word	0x08001e8f
 800181c:	08001e8f 	.word	0x08001e8f
 8001820:	08001e8f 	.word	0x08001e8f
 8001824:	08001e8f 	.word	0x08001e8f
 8001828:	08001e8f 	.word	0x08001e8f
 800182c:	08001e8f 	.word	0x08001e8f
 8001830:	08001e8f 	.word	0x08001e8f
 8001834:	08001e8f 	.word	0x08001e8f
 8001838:	08001e8f 	.word	0x08001e8f
 800183c:	08001e8f 	.word	0x08001e8f
 8001840:	08001e8f 	.word	0x08001e8f
 8001844:	08001e8f 	.word	0x08001e8f
 8001848:	08001e8f 	.word	0x08001e8f
 800184c:	08001e8f 	.word	0x08001e8f
 8001850:	08001e4d 	.word	0x08001e4d
 8001854:	08001e8f 	.word	0x08001e8f
 8001858:	08001e8f 	.word	0x08001e8f
 800185c:	08001e8f 	.word	0x08001e8f
 8001860:	08001e8f 	.word	0x08001e8f
 8001864:	08001e8f 	.word	0x08001e8f
 8001868:	08001e8f 	.word	0x08001e8f
 800186c:	08001e8f 	.word	0x08001e8f
 8001870:	08001e8f 	.word	0x08001e8f
 8001874:	08001e8f 	.word	0x08001e8f
 8001878:	08001e8f 	.word	0x08001e8f
 800187c:	08001e8f 	.word	0x08001e8f
 8001880:	08001e8f 	.word	0x08001e8f
 8001884:	08001e8f 	.word	0x08001e8f
 8001888:	08001e8f 	.word	0x08001e8f
 800188c:	08001e8f 	.word	0x08001e8f
 8001890:	08001e8f 	.word	0x08001e8f
 8001894:	08001e8f 	.word	0x08001e8f
 8001898:	08001e8f 	.word	0x08001e8f
 800189c:	08001e8f 	.word	0x08001e8f
 80018a0:	08001e8f 	.word	0x08001e8f
 80018a4:	08001e8f 	.word	0x08001e8f
 80018a8:	08001e8f 	.word	0x08001e8f
 80018ac:	08001e8f 	.word	0x08001e8f
 80018b0:	08001e8f 	.word	0x08001e8f
 80018b4:	08001e8f 	.word	0x08001e8f
 80018b8:	08001e8f 	.word	0x08001e8f
 80018bc:	08001e8f 	.word	0x08001e8f
 80018c0:	08001e8f 	.word	0x08001e8f
 80018c4:	08001e65 	.word	0x08001e65
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80018c8:	4b82      	ldr	r3, [pc, #520]	; (8001ad4 <SysTick_Handler+0x580>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <SysTick_Handler+0x384>
 80018d0:	2113      	movs	r1, #19
 80018d2:	4881      	ldr	r0, [pc, #516]	; (8001ad8 <SysTick_Handler+0x584>)
 80018d4:	f7ff fe22 	bl	800151c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 80018d8:	2201      	movs	r2, #1
 80018da:	2100      	movs	r1, #0
 80018dc:	487f      	ldr	r0, [pc, #508]	; (8001adc <SysTick_Handler+0x588>)
 80018de:	f00c fa2b 	bl	800dd38 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 80018e2:	4b7e      	ldr	r3, [pc, #504]	; (8001adc <SysTick_Handler+0x588>)
 80018e4:	899b      	ldrh	r3, [r3, #12]
 80018e6:	f241 3287 	movw	r2, #4999	; 0x1387
 80018ea:	4293      	cmp	r3, r2
 80018ec:	f240 82cc 	bls.w	8001e88 <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 80018f0:	487a      	ldr	r0, [pc, #488]	; (8001adc <SysTick_Handler+0x588>)
 80018f2:	f00c fa5d 	bl	800ddb0 <eth_init>

						 eth_socket_init(&ETH,0);
 80018f6:	2100      	movs	r1, #0
 80018f8:	4878      	ldr	r0, [pc, #480]	; (8001adc <SysTick_Handler+0x588>)
 80018fa:	f00c fad3 	bl	800dea4 <eth_socket_init>
					 }

				 }
			 break;
 80018fe:	e2c3      	b.n	8001e88 <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001900:	4b76      	ldr	r3, [pc, #472]	; (8001adc <SysTick_Handler+0x588>)
 8001902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800190a:	2b01      	cmp	r3, #1
 800190c:	d110      	bne.n	8001930 <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 800190e:	4b71      	ldr	r3, [pc, #452]	; (8001ad4 <SysTick_Handler+0x580>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <SysTick_Handler+0x3ca>
 8001916:	2111      	movs	r1, #17
 8001918:	4871      	ldr	r0, [pc, #452]	; (8001ae0 <SysTick_Handler+0x58c>)
 800191a:	f7ff fdff 	bl	800151c <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 800191e:	2202      	movs	r2, #2
 8001920:	2100      	movs	r1, #0
 8001922:	486e      	ldr	r0, [pc, #440]	; (8001adc <SysTick_Handler+0x588>)
 8001924:	f00c fa08 	bl	800dd38 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001928:	4b6c      	ldr	r3, [pc, #432]	; (8001adc <SysTick_Handler+0x588>)
 800192a:	2200      	movs	r2, #0
 800192c:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 800192e:	e2ae      	b.n	8001e8e <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001930:	2204      	movs	r2, #4
 8001932:	2100      	movs	r1, #0
 8001934:	4869      	ldr	r0, [pc, #420]	; (8001adc <SysTick_Handler+0x588>)
 8001936:	f00c f9ff 	bl	800dd38 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 800193a:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <SysTick_Handler+0x580>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <SysTick_Handler+0x3f6>
 8001942:	2115      	movs	r1, #21
 8001944:	4867      	ldr	r0, [pc, #412]	; (8001ae4 <SysTick_Handler+0x590>)
 8001946:	f7ff fde9 	bl	800151c <ITM0_Write>
						 	ETH.ETH_WDG=0;
 800194a:	4b64      	ldr	r3, [pc, #400]	; (8001adc <SysTick_Handler+0x588>)
 800194c:	2200      	movs	r2, #0
 800194e:	819a      	strh	r2, [r3, #12]
			 break;
 8001950:	e29d      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001952:	4b60      	ldr	r3, [pc, #384]	; (8001ad4 <SysTick_Handler+0x580>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <SysTick_Handler+0x40e>
 800195a:	2113      	movs	r1, #19
 800195c:	4862      	ldr	r0, [pc, #392]	; (8001ae8 <SysTick_Handler+0x594>)
 800195e:	f7ff fddd 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001962:	4b5e      	ldr	r3, [pc, #376]	; (8001adc <SysTick_Handler+0x588>)
 8001964:	2200      	movs	r2, #0
 8001966:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001968:	e291      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 800196a:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <SysTick_Handler+0x580>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <SysTick_Handler+0x426>
 8001972:	2114      	movs	r1, #20
 8001974:	485d      	ldr	r0, [pc, #372]	; (8001aec <SysTick_Handler+0x598>)
 8001976:	f7ff fdd1 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 800197a:	4b58      	ldr	r3, [pc, #352]	; (8001adc <SysTick_Handler+0x588>)
 800197c:	2200      	movs	r2, #0
 800197e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001980:	e285      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001982:	4b54      	ldr	r3, [pc, #336]	; (8001ad4 <SysTick_Handler+0x580>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <SysTick_Handler+0x43e>
 800198a:	2114      	movs	r1, #20
 800198c:	4858      	ldr	r0, [pc, #352]	; (8001af0 <SysTick_Handler+0x59c>)
 800198e:	f7ff fdc5 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001992:	4b52      	ldr	r3, [pc, #328]	; (8001adc <SysTick_Handler+0x588>)
 8001994:	2200      	movs	r2, #0
 8001996:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001998:	e279      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 800199a:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <SysTick_Handler+0x580>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <SysTick_Handler+0x456>
 80019a2:	2118      	movs	r1, #24
 80019a4:	4853      	ldr	r0, [pc, #332]	; (8001af4 <SysTick_Handler+0x5a0>)
 80019a6:	f7ff fdb9 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019aa:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <SysTick_Handler+0x588>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80019b0:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <SysTick_Handler+0x588>)
 80019b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 80b0 	bne.w	8001b20 <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80019c0:	2302      	movs	r3, #2
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <SysTick_Handler+0x5a4>)
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	230f      	movs	r3, #15
 80019ca:	2226      	movs	r2, #38	; 0x26
 80019cc:	2104      	movs	r1, #4
 80019ce:	4843      	ldr	r0, [pc, #268]	; (8001adc <SysTick_Handler+0x588>)
 80019d0:	f00c f887 	bl	800dae2 <SPI_ETH_REG>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b48      	ldr	r3, [pc, #288]	; (8001afc <SysTick_Handler+0x5a8>)
 80019da:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80019dc:	4b47      	ldr	r3, [pc, #284]	; (8001afc <SysTick_Handler+0x5a8>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8253 	beq.w	8001e8c <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80019e6:	4b45      	ldr	r3, [pc, #276]	; (8001afc <SysTick_Handler+0x5a8>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	4a45      	ldr	r2, [pc, #276]	; (8001b00 <SysTick_Handler+0x5ac>)
 80019ec:	2100      	movs	r1, #0
 80019ee:	483b      	ldr	r0, [pc, #236]	; (8001adc <SysTick_Handler+0x588>)
 80019f0:	f00c fb0e 	bl	800e010 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 80019f4:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <SysTick_Handler+0x5ac>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80019fe:	4837      	ldr	r0, [pc, #220]	; (8001adc <SysTick_Handler+0x588>)
 8001a00:	f00c f8e7 	bl	800dbd2 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001a04:	2240      	movs	r2, #64	; 0x40
 8001a06:	2100      	movs	r1, #0
 8001a08:	4834      	ldr	r0, [pc, #208]	; (8001adc <SysTick_Handler+0x588>)
 8001a0a:	f00c f995 	bl	800dd38 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001a0e:	bf00      	nop
 8001a10:	2100      	movs	r1, #0
 8001a12:	4832      	ldr	r0, [pc, #200]	; (8001adc <SysTick_Handler+0x588>)
 8001a14:	f00c fadf 	bl	800dfd6 <eth_rd_SOCKET_CMD>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f8      	bne.n	8001a10 <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <SysTick_Handler+0x5a8>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	4936      	ldr	r1, [pc, #216]	; (8001b04 <SysTick_Handler+0x5b0>)
 8001a2c:	4836      	ldr	r0, [pc, #216]	; (8001b08 <SysTick_Handler+0x5b4>)
 8001a2e:	f00d f809 	bl	800ea44 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <SysTick_Handler+0x5a8>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <SysTick_Handler+0x5b8>)
 8001a3a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <SysTick_Handler+0x5a8>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <SysTick_Handler+0x4f8>
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <SysTick_Handler+0x588>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <SysTick_Handler+0x5b8>)
 8001a4e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001a52:	4619      	mov	r1, r3
 8001a54:	482c      	ldr	r0, [pc, #176]	; (8001b08 <SysTick_Handler+0x5b4>)
 8001a56:	f00a fd2f 	bl	800c4b8 <ModBUS_Check>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00d      	beq.n	8001a7c <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a60:	482a      	ldr	r0, [pc, #168]	; (8001b0c <SysTick_Handler+0x5b8>)
 8001a62:	f00a fe2b 	bl	800c6bc <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <SysTick_Handler+0x5b8>)
 8001a68:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2300      	movs	r3, #0
 8001a72:	4927      	ldr	r1, [pc, #156]	; (8001b10 <SysTick_Handler+0x5bc>)
 8001a74:	4823      	ldr	r0, [pc, #140]	; (8001b04 <SysTick_Handler+0x5b0>)
 8001a76:	f00c ffe5 	bl	800ea44 <CopiaVector>
 8001a7a:	e007      	b.n	8001a8c <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <SysTick_Handler+0x580>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <SysTick_Handler+0x538>
 8001a84:	2111      	movs	r1, #17
 8001a86:	4823      	ldr	r0, [pc, #140]	; (8001b14 <SysTick_Handler+0x5c0>)
 8001a88:	f7ff fd48 	bl	800151c <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <SysTick_Handler+0x5b8>)
 8001a8e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <SysTick_Handler+0x5c4>)
 8001a96:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <SysTick_Handler+0x5c4>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <SysTick_Handler+0x5c8>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	480e      	ldr	r0, [pc, #56]	; (8001adc <SysTick_Handler+0x588>)
 8001aa2:	f00c fb85 	bl	800e1b0 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <SysTick_Handler+0x5c8>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f240 4124 	movw	r1, #1060	; 0x424
 8001ab0:	480a      	ldr	r0, [pc, #40]	; (8001adc <SysTick_Handler+0x588>)
 8001ab2:	f00c f88e 	bl	800dbd2 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4808      	ldr	r0, [pc, #32]	; (8001adc <SysTick_Handler+0x588>)
 8001abc:	f00c f93c 	bl	800dd38 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001ac0:	bf00      	nop
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <SysTick_Handler+0x588>)
 8001ac6:	f00c fa86 	bl	800dfd6 <eth_rd_SOCKET_CMD>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f8      	bne.n	8001ac2 <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001ad0:	e1dc      	b.n	8001e8c <SysTick_Handler+0x938>
 8001ad2:	bf00      	nop
 8001ad4:	20002764 	.word	0x20002764
 8001ad8:	0801028c 	.word	0x0801028c
 8001adc:	2000276c 	.word	0x2000276c
 8001ae0:	080102a0 	.word	0x080102a0
 8001ae4:	080102b4 	.word	0x080102b4
 8001ae8:	080102cc 	.word	0x080102cc
 8001aec:	080102e0 	.word	0x080102e0
 8001af0:	080102f8 	.word	0x080102f8
 8001af4:	08010310 	.word	0x08010310
 8001af8:	200037dc 	.word	0x200037dc
 8001afc:	200037d4 	.word	0x200037d4
 8001b00:	200037d8 	.word	0x200037d8
 8001b04:	20002788 	.word	0x20002788
 8001b08:	200018d9 	.word	0x200018d9
 8001b0c:	200018cc 	.word	0x200018cc
 8001b10:	20001a60 	.word	0x20001a60
 8001b14:	0801032c 	.word	0x0801032c
 8001b18:	200037da 	.word	0x200037da
 8001b1c:	200037d6 	.word	0x200037d6
						if (mb_eth._w_answer==0)
 8001b20:	4bac      	ldr	r3, [pc, #688]	; (8001dd4 <SysTick_Handler+0x880>)
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d167      	bne.n	8001bf8 <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001b28:	4bab      	ldr	r3, [pc, #684]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001b2e:	4baa      	ldr	r3, [pc, #680]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001b34:	4ba8      	ldr	r3, [pc, #672]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001b3a:	4ba7      	ldr	r3, [pc, #668]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001b40:	4ba5      	ldr	r3, [pc, #660]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001b48:	4ba3      	ldr	r3, [pc, #652]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b4a:	2206      	movs	r2, #6
 8001b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001b50:	4ba1      	ldr	r3, [pc, #644]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001b58:	4b9f      	ldr	r3, [pc, #636]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001b60:	4b9d      	ldr	r3, [pc, #628]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001b68:	4b9b      	ldr	r3, [pc, #620]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001b70:	4b99      	ldr	r3, [pc, #612]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001b78:	4b97      	ldr	r3, [pc, #604]	; (8001dd8 <SysTick_Handler+0x884>)
 8001b7a:	220a      	movs	r2, #10
 8001b7c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001b80:	4b96      	ldr	r3, [pc, #600]	; (8001ddc <SysTick_Handler+0x888>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001b86:	220f      	movs	r2, #15
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4892      	ldr	r0, [pc, #584]	; (8001dd4 <SysTick_Handler+0x880>)
 8001b8c:	f00a fd3f 	bl	800c60e <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001b90:	2300      	movs	r3, #0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2300      	movs	r3, #0
 8001b96:	220c      	movs	r2, #12
 8001b98:	4991      	ldr	r1, [pc, #580]	; (8001de0 <SysTick_Handler+0x88c>)
 8001b9a:	4892      	ldr	r0, [pc, #584]	; (8001de4 <SysTick_Handler+0x890>)
 8001b9c:	f00c ff52 	bl	800ea44 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001ba0:	4b8e      	ldr	r3, [pc, #568]	; (8001ddc <SysTick_Handler+0x888>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4a90      	ldr	r2, [pc, #576]	; (8001de8 <SysTick_Handler+0x894>)
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	488b      	ldr	r0, [pc, #556]	; (8001dd8 <SysTick_Handler+0x884>)
 8001baa:	f00c fb01 	bl	800e1b0 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001bae:	4b8e      	ldr	r3, [pc, #568]	; (8001de8 <SysTick_Handler+0x894>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f240 4124 	movw	r1, #1060	; 0x424
 8001bb8:	4887      	ldr	r0, [pc, #540]	; (8001dd8 <SysTick_Handler+0x884>)
 8001bba:	f00c f80a 	bl	800dbd2 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4885      	ldr	r0, [pc, #532]	; (8001dd8 <SysTick_Handler+0x884>)
 8001bc4:	f00c f8b8 	bl	800dd38 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001bc8:	bf00      	nop
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4882      	ldr	r0, [pc, #520]	; (8001dd8 <SysTick_Handler+0x884>)
 8001bce:	f00c fa02 	bl	800dfd6 <eth_rd_SOCKET_CMD>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f8      	bne.n	8001bca <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001bd8:	4b7e      	ldr	r3, [pc, #504]	; (8001dd4 <SysTick_Handler+0x880>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001bde:	4b83      	ldr	r3, [pc, #524]	; (8001dec <SysTick_Handler+0x898>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001be4:	4b82      	ldr	r3, [pc, #520]	; (8001df0 <SysTick_Handler+0x89c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 814f 	beq.w	8001e8c <SysTick_Handler+0x938>
 8001bee:	2117      	movs	r1, #23
 8001bf0:	4880      	ldr	r0, [pc, #512]	; (8001df4 <SysTick_Handler+0x8a0>)
 8001bf2:	f7ff fc93 	bl	800151c <ITM0_Write>
			 break;
 8001bf6:	e149      	b.n	8001e8c <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	4b7e      	ldr	r3, [pc, #504]	; (8001df8 <SysTick_Handler+0x8a4>)
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	230f      	movs	r3, #15
 8001c02:	2226      	movs	r2, #38	; 0x26
 8001c04:	2104      	movs	r1, #4
 8001c06:	4874      	ldr	r0, [pc, #464]	; (8001dd8 <SysTick_Handler+0x884>)
 8001c08:	f00b ff6b 	bl	800dae2 <SPI_ETH_REG>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b7a      	ldr	r3, [pc, #488]	; (8001dfc <SysTick_Handler+0x8a8>)
 8001c12:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001c14:	4b79      	ldr	r3, [pc, #484]	; (8001dfc <SysTick_Handler+0x8a8>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8137 	beq.w	8001e8c <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001c1e:	4b77      	ldr	r3, [pc, #476]	; (8001dfc <SysTick_Handler+0x8a8>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	4a77      	ldr	r2, [pc, #476]	; (8001e00 <SysTick_Handler+0x8ac>)
 8001c24:	2100      	movs	r1, #0
 8001c26:	486c      	ldr	r0, [pc, #432]	; (8001dd8 <SysTick_Handler+0x884>)
 8001c28:	f00c f9f2 	bl	800e010 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001c2c:	4b74      	ldr	r3, [pc, #464]	; (8001e00 <SysTick_Handler+0x8ac>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001c36:	4868      	ldr	r0, [pc, #416]	; (8001dd8 <SysTick_Handler+0x884>)
 8001c38:	f00b ffcb 	bl	800dbd2 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001c3c:	2240      	movs	r2, #64	; 0x40
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4865      	ldr	r0, [pc, #404]	; (8001dd8 <SysTick_Handler+0x884>)
 8001c42:	f00c f879 	bl	800dd38 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c46:	bf00      	nop
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4863      	ldr	r0, [pc, #396]	; (8001dd8 <SysTick_Handler+0x884>)
 8001c4c:	f00c f9c3 	bl	800dfd6 <eth_rd_SOCKET_CMD>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f8      	bne.n	8001c48 <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001c56:	4b69      	ldr	r3, [pc, #420]	; (8001dfc <SysTick_Handler+0x8a8>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2300      	movs	r3, #0
 8001c62:	4960      	ldr	r1, [pc, #384]	; (8001de4 <SysTick_Handler+0x890>)
 8001c64:	4867      	ldr	r0, [pc, #412]	; (8001e04 <SysTick_Handler+0x8b0>)
 8001c66:	f00c feed 	bl	800ea44 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001c6a:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <SysTick_Handler+0x8a8>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b58      	ldr	r3, [pc, #352]	; (8001dd4 <SysTick_Handler+0x880>)
 8001c72:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001c76:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <SysTick_Handler+0x8a8>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <SysTick_Handler+0x730>
 8001c7e:	4b56      	ldr	r3, [pc, #344]	; (8001dd8 <SysTick_Handler+0x884>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <SysTick_Handler+0x880>)
 8001c86:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	485d      	ldr	r0, [pc, #372]	; (8001e04 <SysTick_Handler+0x8b0>)
 8001c8e:	f00a fc13 	bl	800c4b8 <ModBUS_Check>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d024      	beq.n	8001ce2 <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <SysTick_Handler+0x880>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <SysTick_Handler+0x898>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001ca4:	484b      	ldr	r0, [pc, #300]	; (8001dd4 <SysTick_Handler+0x880>)
 8001ca6:	f00a fd09 	bl	800c6bc <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001caa:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <SysTick_Handler+0x880>)
 8001cac:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	4953      	ldr	r1, [pc, #332]	; (8001e04 <SysTick_Handler+0x8b0>)
 8001cb8:	4853      	ldr	r0, [pc, #332]	; (8001e08 <SysTick_Handler+0x8b4>)
 8001cba:	f00c fec3 	bl	800ea44 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	4951      	ldr	r1, [pc, #324]	; (8001e0c <SysTick_Handler+0x8b8>)
 8001cc8:	4851      	ldr	r0, [pc, #324]	; (8001e10 <SysTick_Handler+0x8bc>)
 8001cca:	f00c febb 	bl	800ea44 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001cce:	4b48      	ldr	r3, [pc, #288]	; (8001df0 <SysTick_Handler+0x89c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80da 	beq.w	8001e8c <SysTick_Handler+0x938>
 8001cd8:	2117      	movs	r1, #23
 8001cda:	484e      	ldr	r0, [pc, #312]	; (8001e14 <SysTick_Handler+0x8c0>)
 8001cdc:	f7ff fc1e 	bl	800151c <ITM0_Write>
			 break;
 8001ce0:	e0d4      	b.n	8001e8c <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001ce2:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <SysTick_Handler+0x89c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80d0 	beq.w	8001e8c <SysTick_Handler+0x938>
 8001cec:	2111      	movs	r1, #17
 8001cee:	484a      	ldr	r0, [pc, #296]	; (8001e18 <SysTick_Handler+0x8c4>)
 8001cf0:	f7ff fc14 	bl	800151c <ITM0_Write>
			 break;
 8001cf4:	e0ca      	b.n	8001e8c <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <SysTick_Handler+0x89c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <SysTick_Handler+0x7b2>
 8001cfe:	2115      	movs	r1, #21
 8001d00:	4846      	ldr	r0, [pc, #280]	; (8001e1c <SysTick_Handler+0x8c8>)
 8001d02:	f7ff fc0b 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <SysTick_Handler+0x884>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d0c:	e0bf      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001d0e:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <SysTick_Handler+0x89c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <SysTick_Handler+0x7ca>
 8001d16:	2114      	movs	r1, #20
 8001d18:	4841      	ldr	r0, [pc, #260]	; (8001e20 <SysTick_Handler+0x8cc>)
 8001d1a:	f7ff fbff 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <SysTick_Handler+0x884>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d24:	e0b3      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001d26:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <SysTick_Handler+0x89c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <SysTick_Handler+0x7e2>
 8001d2e:	2116      	movs	r1, #22
 8001d30:	483c      	ldr	r0, [pc, #240]	; (8001e24 <SysTick_Handler+0x8d0>)
 8001d32:	f7ff fbf3 	bl	800151c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001d36:	2208      	movs	r2, #8
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4827      	ldr	r0, [pc, #156]	; (8001dd8 <SysTick_Handler+0x884>)
 8001d3c:	f00b fffc 	bl	800dd38 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001d40:	bf00      	nop
 8001d42:	2301      	movs	r3, #1
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <SysTick_Handler+0x8a4>)
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2104      	movs	r1, #4
 8001d50:	4821      	ldr	r0, [pc, #132]	; (8001dd8 <SysTick_Handler+0x884>)
 8001d52:	f00b fec6 	bl	800dae2 <SPI_ETH_REG>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f2      	bne.n	8001d42 <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <SysTick_Handler+0x884>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d62:	e094      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <SysTick_Handler+0x89c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <SysTick_Handler+0x820>
 8001d6c:	2117      	movs	r1, #23
 8001d6e:	482e      	ldr	r0, [pc, #184]	; (8001e28 <SysTick_Handler+0x8d4>)
 8001d70:	f7ff fbd4 	bl	800151c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001d74:	2208      	movs	r2, #8
 8001d76:	2100      	movs	r1, #0
 8001d78:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <SysTick_Handler+0x884>)
 8001d7a:	f00b ffdd 	bl	800dd38 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001d7e:	bf00      	nop
 8001d80:	2301      	movs	r3, #1
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <SysTick_Handler+0x8a4>)
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	230f      	movs	r3, #15
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4812      	ldr	r0, [pc, #72]	; (8001dd8 <SysTick_Handler+0x884>)
 8001d90:	f00b fea7 	bl	800dae2 <SPI_ETH_REG>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f2      	bne.n	8001d80 <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <SysTick_Handler+0x884>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001da0:	e075      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <SysTick_Handler+0x89c>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <SysTick_Handler+0x85e>
 8001daa:	2115      	movs	r1, #21
 8001dac:	481f      	ldr	r0, [pc, #124]	; (8001e2c <SysTick_Handler+0x8d8>)
 8001dae:	f7ff fbb5 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <SysTick_Handler+0x884>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001db8:	e069      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <SysTick_Handler+0x89c>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <SysTick_Handler+0x876>
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	481a      	ldr	r0, [pc, #104]	; (8001e30 <SysTick_Handler+0x8dc>)
 8001dc6:	f7ff fba9 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001dca:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <SysTick_Handler+0x884>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001dd0:	e05d      	b.n	8001e8e <SysTick_Handler+0x93a>
 8001dd2:	bf00      	nop
 8001dd4:	200018cc 	.word	0x200018cc
 8001dd8:	2000276c 	.word	0x2000276c
 8001ddc:	200037da 	.word	0x200037da
 8001de0:	20001a60 	.word	0x20001a60
 8001de4:	20002788 	.word	0x20002788
 8001de8:	200037d6 	.word	0x200037d6
 8001dec:	20003e50 	.word	0x20003e50
 8001df0:	20002764 	.word	0x20002764
 8001df4:	0801033c 	.word	0x0801033c
 8001df8:	200037dc 	.word	0x200037dc
 8001dfc:	200037d4 	.word	0x200037d4
 8001e00:	200037d8 	.word	0x200037d8
 8001e04:	200018d9 	.word	0x200018d9
 8001e08:	20002f88 	.word	0x20002f88
 8001e0c:	20001bec 	.word	0x20001bec
 8001e10:	20002138 	.word	0x20002138
 8001e14:	08010350 	.word	0x08010350
 8001e18:	0801032c 	.word	0x0801032c
 8001e1c:	08010364 	.word	0x08010364
 8001e20:	0801037c 	.word	0x0801037c
 8001e24:	08010394 	.word	0x08010394
 8001e28:	080103ac 	.word	0x080103ac
 8001e2c:	080103c4 	.word	0x080103c4
 8001e30:	080103dc 	.word	0x080103dc
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001e34:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <SysTick_Handler+0xa6c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <SysTick_Handler+0x8f0>
 8001e3c:	2112      	movs	r1, #18
 8001e3e:	4861      	ldr	r0, [pc, #388]	; (8001fc4 <SysTick_Handler+0xa70>)
 8001e40:	f7ff fb6c 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e44:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <SysTick_Handler+0xa74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e4a:	e020      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001e4c:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <SysTick_Handler+0xa6c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <SysTick_Handler+0x908>
 8001e54:	2113      	movs	r1, #19
 8001e56:	485d      	ldr	r0, [pc, #372]	; (8001fcc <SysTick_Handler+0xa78>)
 8001e58:	f7ff fb60 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e5c:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <SysTick_Handler+0xa74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e62:	e014      	b.n	8001e8e <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001e64:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <SysTick_Handler+0xa6c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <SysTick_Handler+0x920>
 8001e6c:	2111      	movs	r1, #17
 8001e6e:	4858      	ldr	r0, [pc, #352]	; (8001fd0 <SysTick_Handler+0xa7c>)
 8001e70:	f7ff fb54 	bl	800151c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e74:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <SysTick_Handler+0xa74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e7a:	e008      	b.n	8001e8e <SysTick_Handler+0x93a>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001e7c:	4852      	ldr	r0, [pc, #328]	; (8001fc8 <SysTick_Handler+0xa74>)
 8001e7e:	f00b fe09 	bl	800da94 <SPI_ETH>
 8001e82:	e004      	b.n	8001e8e <SysTick_Handler+0x93a>
			 default:
 8001e84:	bf00      	nop
 8001e86:	e002      	b.n	8001e8e <SysTick_Handler+0x93a>
			 break;
 8001e88:	bf00      	nop
 8001e8a:	e000      	b.n	8001e8e <SysTick_Handler+0x93a>
			 break;
 8001e8c:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001e8e:	4b51      	ldr	r3, [pc, #324]	; (8001fd4 <SysTick_Handler+0xa80>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d102      	bne.n	8001e9c <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001e96:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <SysTick_Handler+0xa80>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001e9c:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <SysTick_Handler+0xa84>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d104      	bne.n	8001eae <SysTick_Handler+0x95a>
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <SysTick_Handler+0xa88>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <SysTick_Handler+0xa88>)
 8001eac:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <SysTick_Handler+0xa88>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	dd0f      	ble.n	8001ed6 <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001eb6:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <SysTick_Handler+0xa88>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001ebc:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <SysTick_Handler+0xa8c>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <SysTick_Handler+0xa84>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001ec8:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <SysTick_Handler+0xa90>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a46      	ldr	r2, [pc, #280]	; (8001fe8 <SysTick_Handler+0xa94>)
 8001ece:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001ed0:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <SysTick_Handler+0xa90>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed6:	f000 fe4b 	bl	8002b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001eda:	4b44      	ldr	r3, [pc, #272]	; (8001fec <SysTick_Handler+0xa98>)
 8001edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d105      	bne.n	8001ef0 <SysTick_Handler+0x99c>
	{
		ticks++;
 8001ee4:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <SysTick_Handler+0xa9c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a41      	ldr	r2, [pc, #260]	; (8001ff0 <SysTick_Handler+0xa9c>)
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e002      	b.n	8001ef6 <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <SysTick_Handler+0xa9c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001ef6:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <SysTick_Handler+0xa98>)
 8001ef8:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d158      	bne.n	8001fb2 <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8001f00:	4b3c      	ldr	r3, [pc, #240]	; (8001ff4 <SysTick_Handler+0xaa0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d017      	beq.n	8001f38 <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001f08:	4b38      	ldr	r3, [pc, #224]	; (8001fec <SysTick_Handler+0xa98>)
 8001f0a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d006      	beq.n	8001f20 <SysTick_Handler+0x9cc>
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <SysTick_Handler+0xa98>)
 8001f14:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001f18:	3301      	adds	r3, #1
 8001f1a:	4a34      	ldr	r2, [pc, #208]	; (8001fec <SysTick_Handler+0xa98>)
 8001f1c:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001f20:	4b32      	ldr	r3, [pc, #200]	; (8001fec <SysTick_Handler+0xa98>)
 8001f22:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d106      	bne.n	8001f38 <SysTick_Handler+0x9e4>
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <SysTick_Handler+0xa98>)
 8001f2c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <SysTick_Handler+0xa98>)
 8001f34:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001f38:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <SysTick_Handler+0xa98>)
 8001f3a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d018      	beq.n	8001f74 <SysTick_Handler+0xa20>
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <SysTick_Handler+0xa98>)
 8001f44:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001f48:	f241 527c 	movw	r2, #5500	; 0x157c
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	dd11      	ble.n	8001f74 <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <SysTick_Handler+0xaa0>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <SysTick_Handler+0xaa4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f242 020c 	movw	r2, #8204	; 0x200c
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d107      	bne.n	8001f74 <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001f64:	2201      	movs	r2, #1
 8001f66:	4925      	ldr	r1, [pc, #148]	; (8001ffc <SysTick_Handler+0xaa8>)
 8001f68:	4823      	ldr	r0, [pc, #140]	; (8001ff8 <SysTick_Handler+0xaa4>)
 8001f6a:	f003 fbac 	bl	80056c6 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <SysTick_Handler+0xaac>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
			}
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <SysTick_Handler+0xa98>)
 8001f76:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d11d      	bne.n	8001fba <SysTick_Handler+0xa66>
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <SysTick_Handler+0xa98>)
 8001f80:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001f84:	f245 0214 	movw	r2, #20500	; 0x5014
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	dd16      	ble.n	8001fba <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <SysTick_Handler+0xaa0>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <SysTick_Handler+0xaa4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f242 020c 	movw	r2, #8204	; 0x200c
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10c      	bne.n	8001fba <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4916      	ldr	r1, [pc, #88]	; (8001ffc <SysTick_Handler+0xaa8>)
 8001fa4:	4814      	ldr	r0, [pc, #80]	; (8001ff8 <SysTick_Handler+0xaa4>)
 8001fa6:	f003 fb8e 	bl	80056c6 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <SysTick_Handler+0xaac>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb0:	e003      	b.n	8001fba <SysTick_Handler+0xa66>
		wf._ticks=0;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <SysTick_Handler+0xa98>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20002764 	.word	0x20002764
 8001fc4:	080103f0 	.word	0x080103f0
 8001fc8:	2000276c 	.word	0x2000276c
 8001fcc:	08010404 	.word	0x08010404
 8001fd0:	08010418 	.word	0x08010418
 8001fd4:	20000374 	.word	0x20000374
 8001fd8:	20003822 	.word	0x20003822
 8001fdc:	20003e60 	.word	0x20003e60
 8001fe0:	20003e64 	.word	0x20003e64
 8001fe4:	20003e5c 	.word	0x20003e5c
 8001fe8:	20003e68 	.word	0x20003e68
 8001fec:	20000b80 	.word	0x20000b80
 8001ff0:	20003e54 	.word	0x20003e54
 8001ff4:	20003823 	.word	0x20003823
 8001ff8:	200002a4 	.word	0x200002a4
 8001ffc:	20003e34 	.word	0x20003e34
 8002000:	20003820 	.word	0x20003820

08002004 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_UART_ErrorCallback+0x98>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d11c      	bne.n	8002050 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]

			 wf._debug_count9++;
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_UART_ErrorCallback+0x9c>)
 8002020:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002024:	3301      	adds	r3, #1
 8002026:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <HAL_UART_ErrorCallback+0x9c>)
 8002028:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	613b      	str	r3, [r7, #16]

		 HAL_UART_DeInit(ERRUART);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f003 fa3c 	bl	80054ba <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002042:	f7ff f965 	bl	8001310 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002046:	2201      	movs	r2, #1
 8002048:	4916      	ldr	r1, [pc, #88]	; (80020a4 <HAL_UART_ErrorCallback+0xa0>)
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f003 fb3b 	bl	80056c6 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <HAL_UART_ErrorCallback+0xa4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d11c      	bne.n	8002094 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]

			 wf._debug_count9++;
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_UART_ErrorCallback+0x9c>)
 8002064:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002068:	3301      	adds	r3, #1
 800206a:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <HAL_UART_ErrorCallback+0x9c>)
 800206c:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	60bb      	str	r3, [r7, #8]

		 HAL_UART_DeInit(ERRUART);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f003 fa1a 	bl	80054ba <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8002086:	f7ff f96d 	bl	8001364 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800208a:	2201      	movs	r2, #1
 800208c:	4905      	ldr	r1, [pc, #20]	; (80020a4 <HAL_UART_ErrorCallback+0xa0>)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f003 fb19 	bl	80056c6 <HAL_UART_Receive_IT>
	}
}
 8002094:	bf00      	nop
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40011000 	.word	0x40011000
 80020a0:	20000b80 	.word	0x20000b80
 80020a4:	20003e34 	.word	0x20003e34
 80020a8:	40004400 	.word	0x40004400

080020ac <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a2c      	ldr	r2, [pc, #176]	; (800216c <HAL_UART_RxCpltCallback+0xc0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d123      	bne.n	8002106 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_UART_RxCpltCallback+0xc4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <HAL_UART_RxCpltCallback+0xc8>)
 80020c4:	7811      	ldrb	r1, [r2, #0]
 80020c6:	4a2c      	ldr	r2, [pc, #176]	; (8002178 <HAL_UART_RxCpltCallback+0xcc>)
 80020c8:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <HAL_UART_RxCpltCallback+0xc4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a27      	ldr	r2, [pc, #156]	; (8002170 <HAL_UART_RxCpltCallback+0xc4>)
 80020d2:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_UART_RxCpltCallback+0xc4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020dc:	db03      	blt.n	80020e6 <HAL_UART_RxCpltCallback+0x3a>
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_UART_RxCpltCallback+0xc4>)
 80020e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e4:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80020e6:	2100      	movs	r1, #0
 80020e8:	4824      	ldr	r0, [pc, #144]	; (800217c <HAL_UART_RxCpltCallback+0xd0>)
 80020ea:	f002 f9ed 	bl	80044c8 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 80020ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f2:	2201      	movs	r2, #1
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_UART_RxCpltCallback+0xd4>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 80020fc:	2201      	movs	r2, #1
 80020fe:	491d      	ldr	r1, [pc, #116]	; (8002174 <HAL_UART_RxCpltCallback+0xc8>)
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f003 fae0 	bl	80056c6 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_UART_RxCpltCallback+0xd8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d128      	bne.n	8002162 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_UART_RxCpltCallback+0xdc>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_UART_RxCpltCallback+0xe0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b2d1      	uxtb	r1, r2
 800211a:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <HAL_UART_RxCpltCallback+0xe4>)
 800211c:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_UART_RxCpltCallback+0xe0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_UART_RxCpltCallback+0xe0>)
 8002126:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_UART_RxCpltCallback+0xe0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002130:	db03      	blt.n	800213a <HAL_UART_RxCpltCallback+0x8e>
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_UART_RxCpltCallback+0xe0>)
 8002134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002138:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800213a:	2201      	movs	r2, #1
 800213c:	2102      	movs	r1, #2
 800213e:	4815      	ldr	r0, [pc, #84]	; (8002194 <HAL_UART_RxCpltCallback+0xe8>)
 8002140:	f001 f998 	bl	8003474 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002144:	2100      	movs	r1, #0
 8002146:	4814      	ldr	r0, [pc, #80]	; (8002198 <HAL_UART_RxCpltCallback+0xec>)
 8002148:	f002 f9be 	bl	80044c8 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_UART_RxCpltCallback+0xf0>)
 800214e:	2201      	movs	r2, #1
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_UART_RxCpltCallback+0xf4>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8002158:	2201      	movs	r2, #1
 800215a:	490b      	ldr	r1, [pc, #44]	; (8002188 <HAL_UART_RxCpltCallback+0xdc>)
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f003 fab2 	bl	80056c6 <HAL_UART_Receive_IT>
		 }
 }
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40011000 	.word	0x40011000
 8002170:	20003e6c 	.word	0x20003e6c
 8002174:	20003e34 	.word	0x20003e34
 8002178:	20003830 	.word	0x20003830
 800217c:	20000214 	.word	0x20000214
 8002180:	20003820 	.word	0x20003820
 8002184:	40004400 	.word	0x40004400
 8002188:	20003e38 	.word	0x20003e38
 800218c:	20003e70 	.word	0x20003e70
 8002190:	20003a30 	.word	0x20003a30
 8002194:	40020000 	.word	0x40020000
 8002198:	2000025c 	.word	0x2000025c
 800219c:	40000400 	.word	0x40000400
 80021a0:	20003821 	.word	0x20003821

080021a4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d12d      	bne.n	8002212 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80021b6:	2100      	movs	r1, #0
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f002 fa83 	bl	80046c4 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80021be:	4b39      	ldr	r3, [pc, #228]	; (80022a4 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 80021c4:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80021d0:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 80021d2:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80021d8:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 80021e0:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	4932      	ldr	r1, [pc, #200]	; (80022b4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 80021ec:	4833      	ldr	r0, [pc, #204]	; (80022bc <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 80021ee:	f00c fc29 	bl	800ea44 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80021f2:	2201      	movs	r2, #1
 80021f4:	4932      	ldr	r1, [pc, #200]	; (80022c0 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 80021f6:	4833      	ldr	r0, [pc, #204]	; (80022c4 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 80021f8:	f003 fa65 	bl	80056c6 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80021fe:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8002202:	2b01      	cmp	r3, #1
 8002204:	d105      	bne.n	8002212 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	482b      	ldr	r0, [pc, #172]	; (80022bc <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800220e:	f7ff f985 	bl	800151c <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2d      	ldr	r2, [pc, #180]	; (80022cc <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d13f      	bne.n	800229c <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800221c:	2100      	movs	r1, #0
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f002 fa50 	bl	80046c4 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2102      	movs	r1, #2
 8002228:	4829      	ldr	r0, [pc, #164]	; (80022d0 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 800222a:	f001 f923 	bl	8003474 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 800223a:	4b28      	ldr	r3, [pc, #160]	; (80022dc <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002240:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2301      	movs	r3, #1
 800225a:	4922      	ldr	r1, [pc, #136]	; (80022e4 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800225c:	4822      	ldr	r0, [pc, #136]	; (80022e8 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 800225e:	f00c fbf1 	bl	800ea44 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 8002262:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a21      	ldr	r2, [pc, #132]	; (80022ec <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8002268:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 800226c:	2201      	movs	r2, #1
 800226e:	4920      	ldr	r1, [pc, #128]	; (80022f0 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8002270:	4820      	ldr	r0, [pc, #128]	; (80022f4 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8002272:	f003 fa28 	bl	80056c6 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8002278:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10d      	bne.n	800229c <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8002280:	2117      	movs	r1, #23
 8002282:	481d      	ldr	r0, [pc, #116]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8002284:	f7ff f94a 	bl	800151c <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	4815      	ldr	r0, [pc, #84]	; (80022e4 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002290:	f7ff f944 	bl	800151c <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 8002294:	2102      	movs	r1, #2
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8002298:	f7ff f940 	bl	800151c <ITM0_Write>
				 }
		}
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20003824 	.word	0x20003824
 80022a8:	20003820 	.word	0x20003820
 80022ac:	20003e6c 	.word	0x20003e6c
 80022b0:	20003e40 	.word	0x20003e40
 80022b4:	20003830 	.word	0x20003830
 80022b8:	20003e30 	.word	0x20003e30
 80022bc:	20003c30 	.word	0x20003c30
 80022c0:	20003e34 	.word	0x20003e34
 80022c4:	200002a4 	.word	0x200002a4
 80022c8:	20000b80 	.word	0x20000b80
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40020000 	.word	0x40020000
 80022d4:	20003825 	.word	0x20003825
 80022d8:	20003821 	.word	0x20003821
 80022dc:	20003e70 	.word	0x20003e70
 80022e0:	20003e44 	.word	0x20003e44
 80022e4:	20003a30 	.word	0x20003a30
 80022e8:	200003ce 	.word	0x200003ce
 80022ec:	20000378 	.word	0x20000378
 80022f0:	20003e38 	.word	0x20003e38
 80022f4:	200002e8 	.word	0x200002e8
 80022f8:	0801042c 	.word	0x0801042c
 80022fc:	08010444 	.word	0x08010444

08002300 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <ESP8266_HW_Reset+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800230a:	2200      	movs	r2, #0
 800230c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <ESP8266_HW_Reset+0x44>)
 8002312:	f001 f8af 	bl	8003474 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8002316:	2115      	movs	r1, #21
 8002318:	480b      	ldr	r0, [pc, #44]	; (8002348 <ESP8266_HW_Reset+0x48>)
 800231a:	f7ff f8ff 	bl	800151c <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 800231e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002322:	f000 fc45 	bl	8002bb0 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8002326:	210f      	movs	r1, #15
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <ESP8266_HW_Reset+0x4c>)
 800232a:	f7ff f8f7 	bl	800151c <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002334:	4803      	ldr	r0, [pc, #12]	; (8002344 <ESP8266_HW_Reset+0x44>)
 8002336:	f001 f89d 	bl	8003474 <HAL_GPIO_WritePin>
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000381d 	.word	0x2000381d
 8002344:	40020000 	.word	0x40020000
 8002348:	08010258 	.word	0x08010258
 800234c:	08010448 	.word	0x08010448

08002350 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af06      	add	r7, sp, #24
 8002356:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002358:	2364      	movs	r3, #100	; 0x64
 800235a:	220c      	movs	r2, #12
 800235c:	4943      	ldr	r1, [pc, #268]	; (800246c <ESP8266_HW_Init+0x11c>)
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f003 f8da 	bl	8005518 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8002364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002368:	f000 fc22 	bl	8002bb0 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <ESP8266_HW_Init+0x120>)
 800236e:	2205      	movs	r2, #5
 8002370:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <ESP8266_HW_Init+0x124>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3d      	ldr	r2, [pc, #244]	; (8002470 <ESP8266_HW_Init+0x120>)
 800237a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800237e:	e00e      	b.n	800239e <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8002380:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <ESP8266_HW_Init+0x124>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3a      	ldr	r2, [pc, #232]	; (8002470 <ESP8266_HW_Init+0x120>)
 8002386:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <ESP8266_HW_Init+0x128>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002392:	4293      	cmp	r3, r2
 8002394:	dd03      	ble.n	800239e <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 8002396:	4b39      	ldr	r3, [pc, #228]	; (800247c <ESP8266_HW_Init+0x12c>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
			  		 break;
 800239c:	e012      	b.n	80023c4 <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800239e:	2300      	movs	r3, #0
 80023a0:	9304      	str	r3, [sp, #16]
 80023a2:	4b37      	ldr	r3, [pc, #220]	; (8002480 <ESP8266_HW_Init+0x130>)
 80023a4:	9303      	str	r3, [sp, #12]
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <ESP8266_HW_Init+0x134>)
 80023a8:	9302      	str	r3, [sp, #8]
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <ESP8266_HW_Init+0x138>)
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <ESP8266_HW_Init+0x13c>)
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <ESP8266_HW_Init+0x140>)
 80023b4:	4a37      	ldr	r2, [pc, #220]	; (8002494 <ESP8266_HW_Init+0x144>)
 80023b6:	4938      	ldr	r1, [pc, #224]	; (8002498 <ESP8266_HW_Init+0x148>)
 80023b8:	4838      	ldr	r0, [pc, #224]	; (800249c <ESP8266_HW_Init+0x14c>)
 80023ba:	f00b ffdd 	bl	800e378 <FT_String_ND>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d1dd      	bne.n	8002380 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <ESP8266_HW_Init+0x12c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d129      	bne.n	8002420 <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 80023cc:	4b28      	ldr	r3, [pc, #160]	; (8002470 <ESP8266_HW_Init+0x120>)
 80023ce:	2205      	movs	r2, #5
 80023d0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <ESP8266_HW_Init+0x124>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a25      	ldr	r2, [pc, #148]	; (8002470 <ESP8266_HW_Init+0x120>)
 80023da:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023de:	e00a      	b.n	80023f6 <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <ESP8266_HW_Init+0x124>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a22      	ldr	r2, [pc, #136]	; (8002470 <ESP8266_HW_Init+0x120>)
 80023e6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <ESP8266_HW_Init+0x128>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80023f2:	4293      	cmp	r3, r2
 80023f4:	dc13      	bgt.n	800241e <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023f6:	2300      	movs	r3, #0
 80023f8:	9304      	str	r3, [sp, #16]
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <ESP8266_HW_Init+0x130>)
 80023fc:	9303      	str	r3, [sp, #12]
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <ESP8266_HW_Init+0x134>)
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <ESP8266_HW_Init+0x138>)
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <ESP8266_HW_Init+0x13c>)
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <ESP8266_HW_Init+0x140>)
 800240c:	4a21      	ldr	r2, [pc, #132]	; (8002494 <ESP8266_HW_Init+0x144>)
 800240e:	4922      	ldr	r1, [pc, #136]	; (8002498 <ESP8266_HW_Init+0x148>)
 8002410:	4822      	ldr	r0, [pc, #136]	; (800249c <ESP8266_HW_Init+0x14c>)
 8002412:	f00b ffb1 	bl	800e378 <FT_String_ND>
 8002416:	4603      	mov	r3, r0
 8002418:	2b01      	cmp	r3, #1
 800241a:	d1e1      	bne.n	80023e0 <ESP8266_HW_Init+0x90>
 800241c:	e000      	b.n	8002420 <ESP8266_HW_Init+0xd0>
					 {
					 break;
 800241e:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <ESP8266_HW_Init+0x128>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f241 3287 	movw	r2, #4999	; 0x1387
 8002428:	4293      	cmp	r3, r2
 800242a:	dc06      	bgt.n	800243a <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <ESP8266_HW_Init+0x150>)
 800242e:	220a      	movs	r2, #10
 8002430:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <ESP8266_HW_Init+0x128>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e008      	b.n	800244c <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <ESP8266_HW_Init+0x150>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <ESP8266_HW_Init+0x150>)
 8002444:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <ESP8266_HW_Init+0x128>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <ESP8266_HW_Init+0x150>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d981      	bls.n	8002358 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <ESP8266_HW_Init+0x150>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b0a      	cmp	r3, #10
 800245a:	d101      	bne.n	8002460 <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 8002460:	2300      	movs	r3, #0
	  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	08010458 	.word	0x08010458
 8002470:	20000b80 	.word	0x20000b80
 8002474:	20003e40 	.word	0x20003e40
 8002478:	20003e48 	.word	0x20003e48
 800247c:	2000381e 	.word	0x2000381e
 8002480:	20001614 	.word	0x20001614
 8002484:	20003e58 	.word	0x20003e58
 8002488:	20001860 	.word	0x20001860
 800248c:	20001414 	.word	0x20001414
 8002490:	2000186c 	.word	0x2000186c
 8002494:	08010468 	.word	0x08010468
 8002498:	20001858 	.word	0x20001858
 800249c:	20003c30 	.word	0x20003c30
 80024a0:	2000381d 	.word	0x2000381d

080024a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a8:	b672      	cpsid	i
}
 80024aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024ac:	e7fe      	b.n	80024ac <Error_Handler+0x8>
	...

080024b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_MspInit+0x4c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <HAL_MspInit+0x4c>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_MspInit+0x4c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_MspInit+0x4c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_MspInit+0x4c>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_MspInit+0x4c>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a19      	ldr	r2, [pc, #100]	; (8002584 <HAL_SPI_MspInit+0x84>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d12b      	bne.n	800257a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_SPI_MspInit+0x88>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a17      	ldr	r2, [pc, #92]	; (8002588 <HAL_SPI_MspInit+0x88>)
 800252c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_SPI_MspInit+0x88>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_SPI_MspInit+0x88>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_SPI_MspInit+0x88>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <HAL_SPI_MspInit+0x88>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800255a:	23e0      	movs	r3, #224	; 0xe0
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800256a:	2305      	movs	r3, #5
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4805      	ldr	r0, [pc, #20]	; (800258c <HAL_SPI_MspInit+0x8c>)
 8002576:	f000 fd15 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800257a:	bf00      	nop
 800257c:	3728      	adds	r7, #40	; 0x28
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40013000 	.word	0x40013000
 8002588:	40023800 	.word	0x40023800
 800258c:	40020000 	.word	0x40020000

08002590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a0:	d116      	bne.n	80025d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <HAL_TIM_Base_MspInit+0x80>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a19      	ldr	r2, [pc, #100]	; (8002610 <HAL_TIM_Base_MspInit+0x80>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_TIM_Base_MspInit+0x80>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	201c      	movs	r0, #28
 80025c4:	f000 fc17 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025c8:	201c      	movs	r0, #28
 80025ca:	f000 fc30 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ce:	e01a      	b.n	8002606 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_TIM_Base_MspInit+0x84>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d115      	bne.n	8002606 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_TIM_Base_MspInit+0x80>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <HAL_TIM_Base_MspInit+0x80>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_TIM_Base_MspInit+0x80>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	201d      	movs	r0, #29
 80025fc:	f000 fbfb 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002600:	201d      	movs	r0, #29
 8002602:	f000 fc14 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40000400 	.word	0x40000400

08002618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a54      	ldr	r2, [pc, #336]	; (8002788 <HAL_UART_MspInit+0x170>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d135      	bne.n	80026a6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
 800263e:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_UART_MspInit+0x174>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_UART_MspInit+0x174>)
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_UART_MspInit+0x174>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	4b4c      	ldr	r3, [pc, #304]	; (800278c <HAL_UART_MspInit+0x174>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a4b      	ldr	r2, [pc, #300]	; (800278c <HAL_UART_MspInit+0x174>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b49      	ldr	r3, [pc, #292]	; (800278c <HAL_UART_MspInit+0x174>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002672:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002684:	2307      	movs	r3, #7
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268c:	4619      	mov	r1, r3
 800268e:	4840      	ldr	r0, [pc, #256]	; (8002790 <HAL_UART_MspInit+0x178>)
 8002690:	f000 fc88 	bl	8002fa4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	2025      	movs	r0, #37	; 0x25
 800269a:	f000 fbac 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800269e:	2025      	movs	r0, #37	; 0x25
 80026a0:	f000 fbc5 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80026a4:	e06b      	b.n	800277e <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a3a      	ldr	r2, [pc, #232]	; (8002794 <HAL_UART_MspInit+0x17c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d134      	bne.n	800271a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	4b35      	ldr	r3, [pc, #212]	; (800278c <HAL_UART_MspInit+0x174>)
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	4a34      	ldr	r2, [pc, #208]	; (800278c <HAL_UART_MspInit+0x174>)
 80026ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026be:	6413      	str	r3, [r2, #64]	; 0x40
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_UART_MspInit+0x174>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <HAL_UART_MspInit+0x174>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a2d      	ldr	r2, [pc, #180]	; (800278c <HAL_UART_MspInit+0x174>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_UART_MspInit+0x174>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026e8:	230c      	movs	r3, #12
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026f8:	2307      	movs	r3, #7
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002700:	4619      	mov	r1, r3
 8002702:	4823      	ldr	r0, [pc, #140]	; (8002790 <HAL_UART_MspInit+0x178>)
 8002704:	f000 fc4e 	bl	8002fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	2026      	movs	r0, #38	; 0x26
 800270e:	f000 fb72 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002712:	2026      	movs	r0, #38	; 0x26
 8002714:	f000 fb8b 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 8002718:	e031      	b.n	800277e <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <HAL_UART_MspInit+0x180>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d12c      	bne.n	800277e <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_UART_MspInit+0x174>)
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_UART_MspInit+0x174>)
 800272e:	f043 0320 	orr.w	r3, r3, #32
 8002732:	6453      	str	r3, [r2, #68]	; 0x44
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_UART_MspInit+0x174>)
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_UART_MspInit+0x174>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_UART_MspInit+0x174>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6313      	str	r3, [r2, #48]	; 0x30
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_UART_MspInit+0x174>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800275c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800276e:	2308      	movs	r3, #8
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002776:	4619      	mov	r1, r3
 8002778:	4805      	ldr	r0, [pc, #20]	; (8002790 <HAL_UART_MspInit+0x178>)
 800277a:	f000 fc13 	bl	8002fa4 <HAL_GPIO_Init>
}
 800277e:	bf00      	nop
 8002780:	3738      	adds	r7, #56	; 0x38
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40011000 	.word	0x40011000
 800278c:	40023800 	.word	0x40023800
 8002790:	40020000 	.word	0x40020000
 8002794:	40004400 	.word	0x40004400
 8002798:	40011400 	.word	0x40011400

0800279c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_UART_MspDeInit+0x80>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10e      	bne.n	80027cc <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_UART_MspDeInit+0x84>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_UART_MspDeInit+0x84>)
 80027b4:	f023 0310 	bic.w	r3, r3, #16
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80027ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80027be:	4819      	ldr	r0, [pc, #100]	; (8002824 <HAL_UART_MspDeInit+0x88>)
 80027c0:	f000 fd74 	bl	80032ac <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80027c4:	2025      	movs	r0, #37	; 0x25
 80027c6:	f000 fb40 	bl	8002e4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80027ca:	e022      	b.n	8002812 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a15      	ldr	r2, [pc, #84]	; (8002828 <HAL_UART_MspDeInit+0x8c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10d      	bne.n	80027f2 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_UART_MspDeInit+0x84>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a11      	ldr	r2, [pc, #68]	; (8002820 <HAL_UART_MspDeInit+0x84>)
 80027dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80027e2:	210c      	movs	r1, #12
 80027e4:	480f      	ldr	r0, [pc, #60]	; (8002824 <HAL_UART_MspDeInit+0x88>)
 80027e6:	f000 fd61 	bl	80032ac <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80027ea:	2026      	movs	r0, #38	; 0x26
 80027ec:	f000 fb2d 	bl	8002e4a <HAL_NVIC_DisableIRQ>
}
 80027f0:	e00f      	b.n	8002812 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_UART_MspDeInit+0x90>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10a      	bne.n	8002812 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_UART_MspDeInit+0x84>)
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_UART_MspDeInit+0x84>)
 8002802:	f023 0320 	bic.w	r3, r3, #32
 8002806:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002808:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <HAL_UART_MspDeInit+0x88>)
 800280e:	f000 fd4d 	bl	80032ac <HAL_GPIO_DeInit>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40011000 	.word	0x40011000
 8002820:	40023800 	.word	0x40023800
 8002824:	40020000 	.word	0x40020000
 8002828:	40004400 	.word	0x40004400
 800282c:	40011400 	.word	0x40011400

08002830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <NMI_Handler+0x4>

08002836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800283a:	e7fe      	b.n	800283a <HardFault_Handler+0x4>

0800283c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <MemManage_Handler+0x4>

08002842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002846:	e7fe      	b.n	8002846 <BusFault_Handler+0x4>

08002848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800284c:	e7fe      	b.n	800284c <UsageFault_Handler+0x4>

0800284e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <TIM2_IRQHandler+0x10>)
 800287e:	f002 f82d 	bl	80048dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000214 	.word	0x20000214

0800288c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <TIM3_IRQHandler+0x10>)
 8002892:	f002 f823 	bl	80048dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000025c 	.word	0x2000025c

080028a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <USART1_IRQHandler+0x10>)
 80028a6:	f002 ff3f 	bl	8005728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200002a4 	.word	0x200002a4

080028b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <USART2_IRQHandler+0x10>)
 80028ba:	f002 ff35 	bl	8005728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200002e8 	.word	0x200002e8

080028c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
	return 1;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_kill>:

int _kill(int pid, int sig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028e2:	f00c f8ff 	bl	800eae4 <__errno>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2216      	movs	r2, #22
 80028ea:	601a      	str	r2, [r3, #0]
	return -1;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_exit>:

void _exit (int status)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffe7 	bl	80028d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800290a:	e7fe      	b.n	800290a <_exit+0x12>

0800290c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e00a      	b.n	8002934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291e:	f3af 8000 	nop.w
 8002922:	4601      	mov	r1, r0
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	60ba      	str	r2, [r7, #8]
 800292a:	b2ca      	uxtb	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf0      	blt.n	800291e <_read+0x12>
	}

return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e009      	b.n	800296c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	60ba      	str	r2, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf1      	blt.n	8002958 <_write+0x12>
	}
	return len;
 8002974:	687b      	ldr	r3, [r7, #4]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_close>:

int _close(int file)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	return -1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a6:	605a      	str	r2, [r3, #4]
	return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_isatty>:

int _isatty(int file)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
	return 1;
 80029be:	2301      	movs	r3, #1
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
	return 0;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <_sbrk+0x5c>)
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <_sbrk+0x60>)
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <_sbrk+0x64>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <_sbrk+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d207      	bcs.n	8002a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a18:	f00c f864 	bl	800eae4 <__errno>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	220c      	movs	r2, #12
 8002a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e009      	b.n	8002a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <_sbrk+0x64>)
 8002a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20020000 	.word	0x20020000
 8002a48:	00000400 	.word	0x00000400
 8002a4c:	20003e78 	.word	0x20003e78
 8002a50:	20003e90 	.word	0x20003e90

08002a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <SystemInit+0x20>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <SystemInit+0x20>)
 8002a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a7e:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a80:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a94:	4c0b      	ldr	r4, [pc, #44]	; (8002ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aa2:	f7ff ffd7 	bl	8002a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aa6:	f00c f823 	bl	800eaf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aaa:	f7fd fdf7 	bl	800069c <main>
  bx  lr    
 8002aae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab8:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002abc:	08010d4c 	.word	0x08010d4c
  ldr r2, =_sbss
 8002ac0:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002ac4:	20003e90 	.word	0x20003e90

08002ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac8:	e7fe      	b.n	8002ac8 <ADC_IRQHandler>
	...

08002acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <HAL_Init+0x40>)
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_Init+0x40>)
 8002ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_Init+0x40>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <HAL_Init+0x40>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af4:	2003      	movs	r0, #3
 8002af6:	f000 f973 	bl	8002de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002afa:	200f      	movs	r0, #15
 8002afc:	f000 f808 	bl	8002b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b00:	f7ff fcd6 	bl	80024b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00

08002b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_InitTick+0x54>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_InitTick+0x58>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4619      	mov	r1, r3
 8002b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f999 	bl	8002e66 <HAL_SYSTICK_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00e      	b.n	8002b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d80a      	bhi.n	8002b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b44:	2200      	movs	r2, #0
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	f000 f953 	bl	8002df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b50:	4a06      	ldr	r2, [pc, #24]	; (8002b6c <HAL_InitTick+0x5c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000084 	.word	0x20000084
 8002b68:	2000008c 	.word	0x2000008c
 8002b6c:	20000088 	.word	0x20000088

08002b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x20>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_IncTick+0x24>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <HAL_IncTick+0x24>)
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000008c 	.word	0x2000008c
 8002b94:	20003e7c 	.word	0x20003e7c

08002b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_GetTick+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20003e7c 	.word	0x20003e7c

08002bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff ffee 	bl	8002b98 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d005      	beq.n	8002bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_Delay+0x44>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bd6:	bf00      	nop
 8002bd8:	f7ff ffde 	bl	8002b98 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d8f7      	bhi.n	8002bd8 <HAL_Delay+0x28>
  {
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000008c 	.word	0x2000008c

08002bf8 <__NVIC_SetPriorityGrouping>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60d3      	str	r3, [r2, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_GetPriorityGrouping>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <__NVIC_GetPriorityGrouping+0x18>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0307 	and.w	r3, r3, #7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_EnableIRQ>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0b      	blt.n	8002c86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4907      	ldr	r1, [pc, #28]	; (8002c94 <__NVIC_EnableIRQ+0x38>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e100 	.word	0xe000e100

08002c98 <__NVIC_DisableIRQ>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db12      	blt.n	8002cd0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	490a      	ldr	r1, [pc, #40]	; (8002cdc <__NVIC_DisableIRQ+0x44>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	3320      	adds	r3, #32
 8002cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cc4:	f3bf 8f4f 	dsb	sy
}
 8002cc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cca:	f3bf 8f6f 	isb	sy
}
 8002cce:	bf00      	nop
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100

08002ce0 <__NVIC_SetPriority>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db0a      	blt.n	8002d0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	490c      	ldr	r1, [pc, #48]	; (8002d2c <__NVIC_SetPriority+0x4c>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	440b      	add	r3, r1
 8002d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d08:	e00a      	b.n	8002d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4908      	ldr	r1, [pc, #32]	; (8002d30 <__NVIC_SetPriority+0x50>)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3b04      	subs	r3, #4
 8002d18:	0112      	lsls	r2, r2, #4
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	761a      	strb	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e100 	.word	0xe000e100
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <NVIC_EncodePriority>:
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f1c3 0307 	rsb	r3, r3, #7
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	bf28      	it	cs
 8002d52:	2304      	movcs	r3, #4
 8002d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d902      	bls.n	8002d64 <NVIC_EncodePriority+0x30>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3b03      	subs	r3, #3
 8002d62:	e000      	b.n	8002d66 <NVIC_EncodePriority+0x32>
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	401a      	ands	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	43d9      	mvns	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	4313      	orrs	r3, r2
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	; 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <SysTick_Config>:
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dac:	d301      	bcc.n	8002db2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00f      	b.n	8002dd2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <SysTick_Config+0x40>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dba:	210f      	movs	r1, #15
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f7ff ff8e 	bl	8002ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <SysTick_Config+0x40>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dca:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <SysTick_Config+0x40>)
 8002dcc:	2207      	movs	r2, #7
 8002dce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000e010 	.word	0xe000e010

08002de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff05 	bl	8002bf8 <__NVIC_SetPriorityGrouping>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e08:	f7ff ff1a 	bl	8002c40 <__NVIC_GetPriorityGrouping>
 8002e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff ff8e 	bl	8002d34 <NVIC_EncodePriority>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff5d 	bl	8002ce0 <__NVIC_SetPriority>
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff0d 	bl	8002c5c <__NVIC_EnableIRQ>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff1d 	bl	8002c98 <__NVIC_DisableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ff94 	bl	8002d9c <SysTick_Config>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7ff fe84 	bl	8002b98 <HAL_GetTick>
 8002e90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d008      	beq.n	8002eb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2280      	movs	r2, #128	; 0x80
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e052      	b.n	8002f56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0216 	bic.w	r2, r2, #22
 8002ebe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ece:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <HAL_DMA_Abort+0x62>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0208 	bic.w	r2, r2, #8
 8002eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f00:	e013      	b.n	8002f2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f02:	f7ff fe49 	bl	8002b98 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d90c      	bls.n	8002f2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e015      	b.n	8002f56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e4      	bne.n	8002f02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	223f      	movs	r2, #63	; 0x3f
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d004      	beq.n	8002f7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2280      	movs	r2, #128	; 0x80
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e00c      	b.n	8002f96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2205      	movs	r2, #5
 8002f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e159      	b.n	8003274 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8148 	bne.w	800326e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d005      	beq.n	8002ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d130      	bne.n	8003058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800302c:	2201      	movs	r2, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 0201 	and.w	r2, r3, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d017      	beq.n	8003094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d123      	bne.n	80030e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80a2 	beq.w	800326e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b57      	ldr	r3, [pc, #348]	; (800328c <HAL_GPIO_Init+0x2e8>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	4a56      	ldr	r2, [pc, #344]	; (800328c <HAL_GPIO_Init+0x2e8>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003138:	6453      	str	r3, [r2, #68]	; 0x44
 800313a:	4b54      	ldr	r3, [pc, #336]	; (800328c <HAL_GPIO_Init+0x2e8>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003146:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_GPIO_Init+0x2ec>)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	3302      	adds	r3, #2
 800314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a49      	ldr	r2, [pc, #292]	; (8003294 <HAL_GPIO_Init+0x2f0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d019      	beq.n	80031a6 <HAL_GPIO_Init+0x202>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a48      	ldr	r2, [pc, #288]	; (8003298 <HAL_GPIO_Init+0x2f4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_GPIO_Init+0x1fe>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a47      	ldr	r2, [pc, #284]	; (800329c <HAL_GPIO_Init+0x2f8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00d      	beq.n	800319e <HAL_GPIO_Init+0x1fa>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a46      	ldr	r2, [pc, #280]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <HAL_GPIO_Init+0x1f6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a45      	ldr	r2, [pc, #276]	; (80032a4 <HAL_GPIO_Init+0x300>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_GPIO_Init+0x1f2>
 8003192:	2304      	movs	r3, #4
 8003194:	e008      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 8003196:	2307      	movs	r3, #7
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 800319a:	2303      	movs	r3, #3
 800319c:	e004      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 800319e:	2302      	movs	r3, #2
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 80031a6:	2300      	movs	r3, #0
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f002 0203 	and.w	r2, r2, #3
 80031ae:	0092      	lsls	r2, r2, #2
 80031b0:	4093      	lsls	r3, r2
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b8:	4935      	ldr	r1, [pc, #212]	; (8003290 <HAL_GPIO_Init+0x2ec>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c6:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <HAL_GPIO_Init+0x304>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ea:	4a2f      	ldr	r2, [pc, #188]	; (80032a8 <HAL_GPIO_Init+0x304>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f0:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_GPIO_Init+0x304>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003214:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <HAL_GPIO_Init+0x304>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321a:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <HAL_GPIO_Init+0x304>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323e:	4a1a      	ldr	r2, [pc, #104]	; (80032a8 <HAL_GPIO_Init+0x304>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_GPIO_Init+0x304>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003268:	4a0f      	ldr	r2, [pc, #60]	; (80032a8 <HAL_GPIO_Init+0x304>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3301      	adds	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b0f      	cmp	r3, #15
 8003278:	f67f aea2 	bls.w	8002fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40013800 	.word	0x40013800
 8003294:	40020000 	.word	0x40020000
 8003298:	40020400 	.word	0x40020400
 800329c:	40020800 	.word	0x40020800
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40013c00 	.word	0x40013c00

080032ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e0bb      	b.n	8003440 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032c8:	2201      	movs	r2, #1
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	429a      	cmp	r2, r3
 80032e0:	f040 80ab 	bne.w	800343a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80032e4:	4a5c      	ldr	r2, [pc, #368]	; (8003458 <HAL_GPIO_DeInit+0x1ac>)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	220f      	movs	r2, #15
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a54      	ldr	r2, [pc, #336]	; (800345c <HAL_GPIO_DeInit+0x1b0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d019      	beq.n	8003342 <HAL_GPIO_DeInit+0x96>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a53      	ldr	r2, [pc, #332]	; (8003460 <HAL_GPIO_DeInit+0x1b4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_GPIO_DeInit+0x92>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a52      	ldr	r2, [pc, #328]	; (8003464 <HAL_GPIO_DeInit+0x1b8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00d      	beq.n	800333a <HAL_GPIO_DeInit+0x8e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a51      	ldr	r2, [pc, #324]	; (8003468 <HAL_GPIO_DeInit+0x1bc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <HAL_GPIO_DeInit+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a50      	ldr	r2, [pc, #320]	; (800346c <HAL_GPIO_DeInit+0x1c0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_GPIO_DeInit+0x86>
 800332e:	2304      	movs	r3, #4
 8003330:	e008      	b.n	8003344 <HAL_GPIO_DeInit+0x98>
 8003332:	2307      	movs	r3, #7
 8003334:	e006      	b.n	8003344 <HAL_GPIO_DeInit+0x98>
 8003336:	2303      	movs	r3, #3
 8003338:	e004      	b.n	8003344 <HAL_GPIO_DeInit+0x98>
 800333a:	2302      	movs	r3, #2
 800333c:	e002      	b.n	8003344 <HAL_GPIO_DeInit+0x98>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_GPIO_DeInit+0x98>
 8003342:	2300      	movs	r3, #0
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	f002 0203 	and.w	r2, r2, #3
 800334a:	0092      	lsls	r2, r2, #2
 800334c:	4093      	lsls	r3, r2
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	429a      	cmp	r2, r3
 8003352:	d132      	bne.n	80033ba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003354:	4b46      	ldr	r3, [pc, #280]	; (8003470 <HAL_GPIO_DeInit+0x1c4>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43db      	mvns	r3, r3
 800335c:	4944      	ldr	r1, [pc, #272]	; (8003470 <HAL_GPIO_DeInit+0x1c4>)
 800335e:	4013      	ands	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003362:	4b43      	ldr	r3, [pc, #268]	; (8003470 <HAL_GPIO_DeInit+0x1c4>)
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	4941      	ldr	r1, [pc, #260]	; (8003470 <HAL_GPIO_DeInit+0x1c4>)
 800336c:	4013      	ands	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003370:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <HAL_GPIO_DeInit+0x1c4>)
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43db      	mvns	r3, r3
 8003378:	493d      	ldr	r1, [pc, #244]	; (8003470 <HAL_GPIO_DeInit+0x1c4>)
 800337a:	4013      	ands	r3, r2
 800337c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_GPIO_DeInit+0x1c4>)
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	43db      	mvns	r3, r3
 8003386:	493a      	ldr	r1, [pc, #232]	; (8003470 <HAL_GPIO_DeInit+0x1c4>)
 8003388:	4013      	ands	r3, r2
 800338a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800339c:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <HAL_GPIO_DeInit+0x1ac>)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	3302      	adds	r3, #2
 80033a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	43da      	mvns	r2, r3
 80033ac:	482a      	ldr	r0, [pc, #168]	; (8003458 <HAL_GPIO_DeInit+0x1ac>)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	400a      	ands	r2, r1
 80033b4:	3302      	adds	r3, #2
 80033b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2103      	movs	r1, #3
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	401a      	ands	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	220f      	movs	r2, #15
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	08d2      	lsrs	r2, r2, #3
 80033f0:	4019      	ands	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3208      	adds	r2, #8
 80033f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2103      	movs	r1, #3
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	401a      	ands	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	2101      	movs	r1, #1
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	401a      	ands	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2103      	movs	r1, #3
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	401a      	ands	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	3301      	adds	r3, #1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	f67f af40 	bls.w	80032c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40013800 	.word	0x40013800
 800345c:	40020000 	.word	0x40020000
 8003460:	40020400 	.word	0x40020400
 8003464:	40020800 	.word	0x40020800
 8003468:	40020c00 	.word	0x40020c00
 800346c:	40021000 	.word	0x40021000
 8003470:	40013c00 	.word	0x40013c00

08003474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
 8003480:	4613      	mov	r3, r2
 8003482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003484:	787b      	ldrb	r3, [r7, #1]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003490:	e003      	b.n	800349a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	041a      	lsls	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	619a      	str	r2, [r3, #24]
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034b8:	887a      	ldrh	r2, [r7, #2]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4013      	ands	r3, r2
 80034be:	041a      	lsls	r2, r3, #16
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	43d9      	mvns	r1, r3
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	400b      	ands	r3, r1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	619a      	str	r2, [r3, #24]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e267      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d075      	beq.n	80035e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034fa:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b04      	cmp	r3, #4
 8003504:	d00c      	beq.n	8003520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003506:	4b85      	ldr	r3, [pc, #532]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350e:	2b08      	cmp	r3, #8
 8003510:	d112      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4b82      	ldr	r3, [pc, #520]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351e:	d10b      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	4b7e      	ldr	r3, [pc, #504]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d05b      	beq.n	80035e4 <HAL_RCC_OscConfig+0x108>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d157      	bne.n	80035e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e242      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d106      	bne.n	8003550 <HAL_RCC_OscConfig+0x74>
 8003542:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a75      	ldr	r2, [pc, #468]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e01d      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x98>
 800355a:	4b70      	ldr	r3, [pc, #448]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6f      	ldr	r2, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b6d      	ldr	r3, [pc, #436]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6c      	ldr	r2, [pc, #432]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003574:	4b69      	ldr	r3, [pc, #420]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a68      	ldr	r2, [pc, #416]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a65      	ldr	r2, [pc, #404]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7ff fb00 	bl	8002b98 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359c:	f7ff fafc 	bl	8002b98 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e207      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b5b      	ldr	r3, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0xc0>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7ff faec 	bl	8002b98 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7ff fae8 	bl	8002b98 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1f3      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0xe8>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035f2:	4b4a      	ldr	r3, [pc, #296]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fe:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003606:	2b08      	cmp	r3, #8
 8003608:	d11c      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d116      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1c7      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4937      	ldr	r1, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	e03a      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <HAL_RCC_OscConfig+0x244>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7ff faa1 	bl	8002b98 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365a:	f7ff fa9d 	bl	8002b98 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1a8      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4925      	ldr	r1, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x244>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7ff fa80 	bl	8002b98 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369c:	f7ff fa7c 	bl	8002b98 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e187      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d036      	beq.n	8003734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_RCC_OscConfig+0x248>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7ff fa60 	bl	8002b98 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036dc:	f7ff fa5c 	bl	8002b98 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e167      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80036f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x200>
 80036fa:	e01b      	b.n	8003734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_OscConfig+0x248>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003702:	f7ff fa49 	bl	8002b98 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	e00e      	b.n	8003728 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370a:	f7ff fa45 	bl	8002b98 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d907      	bls.n	8003728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e150      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800371c:	40023800 	.word	0x40023800
 8003720:	42470000 	.word	0x42470000
 8003724:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ea      	bne.n	800370a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8097 	beq.w	8003870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b81      	ldr	r3, [pc, #516]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	4b7d      	ldr	r3, [pc, #500]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a7c      	ldr	r2, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b7a      	ldr	r3, [pc, #488]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b77      	ldr	r3, [pc, #476]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b74      	ldr	r3, [pc, #464]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a73      	ldr	r2, [pc, #460]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7ff fa05 	bl	8002b98 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7ff fa01 	bl	8002b98 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e10c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2ea>
 80037b8:	4b64      	ldr	r3, [pc, #400]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a63      	ldr	r2, [pc, #396]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	; 0x70
 80037c4:	e01c      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x30c>
 80037ce:	4b5f      	ldr	r3, [pc, #380]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a5e      	ldr	r2, [pc, #376]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
 80037da:	4b5c      	ldr	r3, [pc, #368]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a5b      	ldr	r2, [pc, #364]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037e8:	4b58      	ldr	r3, [pc, #352]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a57      	ldr	r2, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	4b55      	ldr	r3, [pc, #340]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a54      	ldr	r2, [pc, #336]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7ff f9c6 	bl	8002b98 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380e:	e00a      	b.n	8003826 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7ff f9c2 	bl	8002b98 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	; 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0cb      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ee      	beq.n	8003810 <HAL_RCC_OscConfig+0x334>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003834:	f7ff f9b0 	bl	8002b98 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7ff f9ac 	bl	8002b98 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0b5      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	4b3e      	ldr	r3, [pc, #248]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ee      	bne.n	800383c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a1 	beq.w	80039bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387a:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b08      	cmp	r3, #8
 8003884:	d05c      	beq.n	8003940 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d141      	bne.n	8003912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7ff f980 	bl	8002b98 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7ff f97c 	bl	8002b98 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e087      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	3b01      	subs	r3, #1
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	491b      	ldr	r1, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7ff f955 	bl	8002b98 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f2:	f7ff f951 	bl	8002b98 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e05c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x416>
 8003910:	e054      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7ff f93e 	bl	8002b98 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7ff f93a 	bl	8002b98 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e045      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x444>
 800393e:	e03d      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e038      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x4ec>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d028      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d121      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d11a      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d111      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800

080039cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0cc      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d90c      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d044      	beq.n	8003aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d119      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e067      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4934      	ldr	r1, [pc, #208]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003abc:	f7ff f86c 	bl	8002b98 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7ff f868 	bl	8002b98 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e04f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d20c      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 f821 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490a      	ldr	r1, [pc, #40]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe ffcc 	bl	8002b10 <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08010ab4 	.word	0x08010ab4
 8003b90:	20000084 	.word	0x20000084
 8003b94:	20000088 	.word	0x20000088

08003b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b090      	sub	sp, #64	; 0x40
 8003b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba8:	2300      	movs	r3, #0
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d00d      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f200 80a1 	bhi.w	8003d04 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x34>
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bca:	e09b      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bd0:	e09b      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd2:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd6:	e098      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be2:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	627a      	str	r2, [r7, #36]	; 0x24
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c00:	2100      	movs	r1, #0
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c04:	fb03 f201 	mul.w	r2, r3, r1
 8003c08:	2300      	movs	r3, #0
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	4a43      	ldr	r2, [pc, #268]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c12:	fba0 1202 	umull	r1, r2, r0, r2
 8003c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c18:	460a      	mov	r2, r1
 8003c1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1e:	4413      	add	r3, r2
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	2200      	movs	r2, #0
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c32:	f7fc fb3d 	bl	80002b0 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3e:	e053      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c40:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	2200      	movs	r2, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	617a      	str	r2, [r7, #20]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c52:	f04f 0b00 	mov.w	fp, #0
 8003c56:	4652      	mov	r2, sl
 8003c58:	465b      	mov	r3, fp
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	0159      	lsls	r1, r3, #5
 8003c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c68:	0150      	lsls	r0, r2, #5
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c72:	eb63 090b 	sbc.w	r9, r3, fp
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c8a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c8e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	00eb      	lsls	r3, r5, #3
 8003c9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca0:	00e2      	lsls	r2, r4, #3
 8003ca2:	4614      	mov	r4, r2
 8003ca4:	461d      	mov	r5, r3
 8003ca6:	eb14 030a 	adds.w	r3, r4, sl
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	eb45 030b 	adc.w	r3, r5, fp
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	028b      	lsls	r3, r1, #10
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc8:	4621      	mov	r1, r4
 8003cca:	028a      	lsls	r2, r1, #10
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	60fa      	str	r2, [r7, #12]
 8003cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cdc:	f7fc fae8 	bl	80002b0 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3740      	adds	r7, #64	; 0x40
 8003d10:	46bd      	mov	sp, r7
 8003d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	017d7840 	.word	0x017d7840

08003d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000084 	.word	0x20000084

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d40:	f7ff fff0 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	08010ac4 	.word	0x08010ac4

08003d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d68:	f7ff ffdc 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0b5b      	lsrs	r3, r3, #13
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	08010ac4 	.word	0x08010ac4

08003d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07b      	b.n	8003e96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d108      	bne.n	8003db8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dae:	d009      	beq.n	8003dc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	61da      	str	r2, [r3, #28]
 8003db6:	e005      	b.n	8003dc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fe fb8e 	bl	8002500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	ea42 0103 	orr.w	r1, r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	f003 0104 	and.w	r1, r3, #4
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0210 	and.w	r2, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08c      	sub	sp, #48	; 0x30
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eac:	2301      	movs	r3, #1
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x26>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e18a      	b.n	80041da <HAL_SPI_TransmitReceive+0x33c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ecc:	f7fe fe64 	bl	8002b98 <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d00f      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x70>
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef4:	d107      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x68>
 8003efe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d003      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
 8003f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f0c:	e15b      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x82>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x82>
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f26:	e14e      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d003      	beq.n	8003f3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2205      	movs	r2, #5
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	887a      	ldrh	r2, [r7, #2]
 8003f52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	887a      	ldrh	r2, [r7, #2]
 8003f5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d007      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f98:	d178      	bne.n	800408c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_TransmitReceive+0x10a>
 8003fa2:	8b7b      	ldrh	r3, [r7, #26]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d166      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	881a      	ldrh	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	1c9a      	adds	r2, r3, #2
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fcc:	e053      	b.n	8004076 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d11b      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x176>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x176>
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d113      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d119      	bne.n	8004056 <HAL_SPI_TransmitReceive+0x1b8>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d014      	beq.n	8004056 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	b292      	uxth	r2, r2
 8004038:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	1c9a      	adds	r2, r3, #2
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004052:	2301      	movs	r3, #1
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004056:	f7fe fd9f 	bl	8002b98 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004062:	429a      	cmp	r2, r3
 8004064:	d807      	bhi.n	8004076 <HAL_SPI_TransmitReceive+0x1d8>
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d003      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004074:	e0a7      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1a6      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x130>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1a1      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x130>
 800408a:	e07c      	b.n	8004186 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_SPI_TransmitReceive+0x1fc>
 8004094:	8b7b      	ldrh	r3, [r7, #26]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d16b      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c0:	e057      	b.n	8004172 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d11c      	bne.n	800410a <HAL_SPI_TransmitReceive+0x26c>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d017      	beq.n	800410a <HAL_SPI_TransmitReceive+0x26c>
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d114      	bne.n	800410a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	7812      	ldrb	r2, [r2, #0]
 80040ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d119      	bne.n	800414c <HAL_SPI_TransmitReceive+0x2ae>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d014      	beq.n	800414c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004148:	2301      	movs	r3, #1
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800414c:	f7fe fd24 	bl	8002b98 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004158:	429a      	cmp	r2, r3
 800415a:	d803      	bhi.n	8004164 <HAL_SPI_TransmitReceive+0x2c6>
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d102      	bne.n	800416a <HAL_SPI_TransmitReceive+0x2cc>
 8004164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004170:	e029      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1a2      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x224>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d19d      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f8b2 	bl	80042f4 <SPI_EndRxTxTransaction>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041a2:	e010      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	e000      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80041c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3730      	adds	r7, #48	; 0x30
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041f4:	f7fe fcd0 	bl	8002b98 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	4413      	add	r3, r2
 8004202:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004204:	f7fe fcc8 	bl	8002b98 <HAL_GetTick>
 8004208:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	015b      	lsls	r3, r3, #5
 8004210:	0d1b      	lsrs	r3, r3, #20
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	fb02 f303 	mul.w	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800421a:	e054      	b.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d050      	beq.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004224:	f7fe fcb8 	bl	8002b98 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	429a      	cmp	r2, r3
 8004232:	d902      	bls.n	800423a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d13d      	bne.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004248:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004252:	d111      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425c:	d004      	beq.n	8004268 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004266:	d107      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004276:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004280:	d10f      	bne.n	80042a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e017      	b.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d19b      	bne.n	800421c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3720      	adds	r7, #32
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000084 	.word	0x20000084

080042f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <SPI_EndRxTxTransaction+0x7c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <SPI_EndRxTxTransaction+0x80>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0d5b      	lsrs	r3, r3, #21
 800430c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800431e:	d112      	bne.n	8004346 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff ff5a 	bl	80041e4 <SPI_WaitFlagStateUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e00f      	b.n	8004366 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3b01      	subs	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435c:	2b80      	cmp	r3, #128	; 0x80
 800435e:	d0f2      	beq.n	8004346 <SPI_EndRxTxTransaction+0x52>
 8004360:	e000      	b.n	8004364 <SPI_EndRxTxTransaction+0x70>
        break;
 8004362:	bf00      	nop
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000084 	.word	0x20000084
 8004374:	165e9f81 	.word	0x165e9f81

08004378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e041      	b.n	800440e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fe f8f6 	bl	8002590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f000 fce4 	bl	8004d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e041      	b.n	80044ac <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f839 	bl	80044b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f000 fc95 	bl	8004d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d109      	bne.n	80044f0 <HAL_TIM_OC_Start_IT+0x28>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e022      	b.n	8004536 <HAL_TIM_OC_Start_IT+0x6e>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d109      	bne.n	800450a <HAL_TIM_OC_Start_IT+0x42>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	bf14      	ite	ne
 8004502:	2301      	movne	r3, #1
 8004504:	2300      	moveq	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e015      	b.n	8004536 <HAL_TIM_OC_Start_IT+0x6e>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d109      	bne.n	8004524 <HAL_TIM_OC_Start_IT+0x5c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e008      	b.n	8004536 <HAL_TIM_OC_Start_IT+0x6e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0b3      	b.n	80046a6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <HAL_TIM_OC_Start_IT+0x86>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800454c:	e013      	b.n	8004576 <HAL_TIM_OC_Start_IT+0xae>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d104      	bne.n	800455e <HAL_TIM_OC_Start_IT+0x96>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455c:	e00b      	b.n	8004576 <HAL_TIM_OC_Start_IT+0xae>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d104      	bne.n	800456e <HAL_TIM_OC_Start_IT+0xa6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456c:	e003      	b.n	8004576 <HAL_TIM_OC_Start_IT+0xae>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d841      	bhi.n	8004600 <HAL_TIM_OC_Start_IT+0x138>
 800457c:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <HAL_TIM_OC_Start_IT+0xbc>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045b9 	.word	0x080045b9
 8004588:	08004601 	.word	0x08004601
 800458c:	08004601 	.word	0x08004601
 8004590:	08004601 	.word	0x08004601
 8004594:	080045cb 	.word	0x080045cb
 8004598:	08004601 	.word	0x08004601
 800459c:	08004601 	.word	0x08004601
 80045a0:	08004601 	.word	0x08004601
 80045a4:	080045dd 	.word	0x080045dd
 80045a8:	08004601 	.word	0x08004601
 80045ac:	08004601 	.word	0x08004601
 80045b0:	08004601 	.word	0x08004601
 80045b4:	080045ef 	.word	0x080045ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0202 	orr.w	r2, r2, #2
 80045c6:	60da      	str	r2, [r3, #12]
      break;
 80045c8:	e01d      	b.n	8004606 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0204 	orr.w	r2, r2, #4
 80045d8:	60da      	str	r2, [r3, #12]
      break;
 80045da:	e014      	b.n	8004606 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0208 	orr.w	r2, r2, #8
 80045ea:	60da      	str	r2, [r3, #12]
      break;
 80045ec:	e00b      	b.n	8004606 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0210 	orr.w	r2, r2, #16
 80045fc:	60da      	str	r2, [r3, #12]
      break;
 80045fe:	e002      	b.n	8004606 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	bf00      	nop
  }

  if (status == HAL_OK)
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d14b      	bne.n	80046a4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2201      	movs	r2, #1
 8004612:	6839      	ldr	r1, [r7, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fe5b 	bl	80052d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a24      	ldr	r2, [pc, #144]	; (80046b0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d107      	bne.n	8004634 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004632:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_TIM_OC_Start_IT+0x1e8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_TIM_OC_Start_IT+0x1a8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004646:	d013      	beq.n	8004670 <HAL_TIM_OC_Start_IT+0x1a8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a19      	ldr	r2, [pc, #100]	; (80046b4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_TIM_OC_Start_IT+0x1a8>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_TIM_OC_Start_IT+0x1a8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_TIM_OC_Start_IT+0x1f4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIM_OC_Start_IT+0x1a8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <HAL_TIM_OC_Start_IT+0x1f8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d111      	bne.n	8004694 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b06      	cmp	r3, #6
 8004680:	d010      	beq.n	80046a4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004692:	e007      	b.n	80046a4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40014000 	.word	0x40014000

080046c4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d841      	bhi.n	800475c <HAL_TIM_OC_Stop_IT+0x98>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_TIM_OC_Stop_IT+0x1c>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004715 	.word	0x08004715
 80046e4:	0800475d 	.word	0x0800475d
 80046e8:	0800475d 	.word	0x0800475d
 80046ec:	0800475d 	.word	0x0800475d
 80046f0:	08004727 	.word	0x08004727
 80046f4:	0800475d 	.word	0x0800475d
 80046f8:	0800475d 	.word	0x0800475d
 80046fc:	0800475d 	.word	0x0800475d
 8004700:	08004739 	.word	0x08004739
 8004704:	0800475d 	.word	0x0800475d
 8004708:	0800475d 	.word	0x0800475d
 800470c:	0800475d 	.word	0x0800475d
 8004710:	0800474b 	.word	0x0800474b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0202 	bic.w	r2, r2, #2
 8004722:	60da      	str	r2, [r3, #12]
      break;
 8004724:	e01d      	b.n	8004762 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0204 	bic.w	r2, r2, #4
 8004734:	60da      	str	r2, [r3, #12]
      break;
 8004736:	e014      	b.n	8004762 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0208 	bic.w	r2, r2, #8
 8004746:	60da      	str	r2, [r3, #12]
      break;
 8004748:	e00b      	b.n	8004762 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0210 	bic.w	r2, r2, #16
 8004758:	60da      	str	r2, [r3, #12]
      break;
 800475a:	e002      	b.n	8004762 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      break;
 8004760:	bf00      	nop
  }

  if (status == HAL_OK)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d157      	bne.n	8004818 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2200      	movs	r2, #0
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fdad 	bl	80052d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <HAL_TIM_OC_Stop_IT+0x160>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d117      	bne.n	80047b0 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6a1a      	ldr	r2, [r3, #32]
 8004786:	f241 1311 	movw	r3, #4369	; 0x1111
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10f      	bne.n	80047b0 <HAL_TIM_OC_Stop_IT+0xec>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	f240 4344 	movw	r3, #1092	; 0x444
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d107      	bne.n	80047b0 <HAL_TIM_OC_Stop_IT+0xec>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10f      	bne.n	80047e0 <HAL_TIM_OC_Stop_IT+0x11c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a1a      	ldr	r2, [r3, #32]
 80047c6:	f240 4344 	movw	r3, #1092	; 0x444
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d107      	bne.n	80047e0 <HAL_TIM_OC_Stop_IT+0x11c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <HAL_TIM_OC_Stop_IT+0x12c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ee:	e013      	b.n	8004818 <HAL_TIM_OC_Stop_IT+0x154>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d104      	bne.n	8004800 <HAL_TIM_OC_Stop_IT+0x13c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047fe:	e00b      	b.n	8004818 <HAL_TIM_OC_Stop_IT+0x154>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b08      	cmp	r3, #8
 8004804:	d104      	bne.n	8004810 <HAL_TIM_OC_Stop_IT+0x14c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480e:	e003      	b.n	8004818 <HAL_TIM_OC_Stop_IT+0x154>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000

08004828 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e041      	b.n	80048c0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f839 	bl	80048c8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f000 fa8b 	bl	8004d84 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0208 	bic.w	r2, r2, #8
 800487c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0202 	mvn.w	r2, #2
 8004908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa11 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fd fc3c 	bl	80021a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa14 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b04      	cmp	r3, #4
 8004944:	d122      	bne.n	800498c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d11b      	bne.n	800498c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0204 	mvn.w	r2, #4
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f9e7 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fd fc12 	bl	80021a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f9ea 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b08      	cmp	r3, #8
 8004998:	d122      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d11b      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0208 	mvn.w	r2, #8
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2204      	movs	r2, #4
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9bd 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fd fbe8 	bl	80021a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f9c0 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0210 	mvn.w	r2, #16
 8004a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f993 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd fbbe 	bl	80021a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f996 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d10e      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0201 	mvn.w	r2, #1
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f969 	bl	8004d32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	d10e      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d107      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fcc0 	bl	800540c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	d10e      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f95b 	bl	8004d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d10e      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d107      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0220 	mvn.w	r2, #32
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fc8a 	bl	80053f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e048      	b.n	8004b9c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d839      	bhi.n	8004b8c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b55 	.word	0x08004b55
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b8d 	.word	0x08004b8d
 8004b2c:	08004b8d 	.word	0x08004b8d
 8004b30:	08004b63 	.word	0x08004b63
 8004b34:	08004b8d 	.word	0x08004b8d
 8004b38:	08004b8d 	.word	0x08004b8d
 8004b3c:	08004b8d 	.word	0x08004b8d
 8004b40:	08004b71 	.word	0x08004b71
 8004b44:	08004b8d 	.word	0x08004b8d
 8004b48:	08004b8d 	.word	0x08004b8d
 8004b4c:	08004b8d 	.word	0x08004b8d
 8004b50:	08004b7f 	.word	0x08004b7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f992 	bl	8004e84 <TIM_OC1_SetConfig>
      break;
 8004b60:	e017      	b.n	8004b92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f9f1 	bl	8004f50 <TIM_OC2_SetConfig>
      break;
 8004b6e:	e010      	b.n	8004b92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa56 	bl	8005028 <TIM_OC3_SetConfig>
      break;
 8004b7c:	e009      	b.n	8004b92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fab9 	bl	80050fc <TIM_OC4_SetConfig>
      break;
 8004b8a:	e002      	b.n	8004b92 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e0b4      	b.n	8004d2a <HAL_TIM_ConfigClockSource+0x186>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf8:	d03e      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0xd4>
 8004bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfe:	f200 8087 	bhi.w	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	f000 8086 	beq.w	8004d16 <HAL_TIM_ConfigClockSource+0x172>
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	d87f      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b70      	cmp	r3, #112	; 0x70
 8004c12:	d01a      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0xa6>
 8004c14:	2b70      	cmp	r3, #112	; 0x70
 8004c16:	d87b      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b60      	cmp	r3, #96	; 0x60
 8004c1a:	d050      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x11a>
 8004c1c:	2b60      	cmp	r3, #96	; 0x60
 8004c1e:	d877      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b50      	cmp	r3, #80	; 0x50
 8004c22:	d03c      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xfa>
 8004c24:	2b50      	cmp	r3, #80	; 0x50
 8004c26:	d873      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d058      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x13a>
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d86f      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b30      	cmp	r3, #48	; 0x30
 8004c32:	d064      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c34:	2b30      	cmp	r3, #48	; 0x30
 8004c36:	d86b      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d060      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d867      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d05c      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d05a      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	e062      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f000 fb19 	bl	8005290 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	609a      	str	r2, [r3, #8]
      break;
 8004c76:	e04f      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	6899      	ldr	r1, [r3, #8]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f000 fb02 	bl	8005290 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c9a:	609a      	str	r2, [r3, #8]
      break;
 8004c9c:	e03c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 fa76 	bl	800519c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2150      	movs	r1, #80	; 0x50
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 facf 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e02c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6859      	ldr	r1, [r3, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f000 fa95 	bl	80051fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2160      	movs	r1, #96	; 0x60
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fabf 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004cdc:	e01c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6859      	ldr	r1, [r3, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f000 fa56 	bl	800519c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2140      	movs	r1, #64	; 0x40
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 faaf 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004cfc:	e00c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f000 faa6 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004d0e:	e003      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      break;
 8004d14:	e000      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <TIM_Base_SetConfig+0xe4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00f      	beq.n	8004dbc <TIM_Base_SetConfig+0x38>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d00b      	beq.n	8004dbc <TIM_Base_SetConfig+0x38>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a31      	ldr	r2, [pc, #196]	; (8004e6c <TIM_Base_SetConfig+0xe8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d007      	beq.n	8004dbc <TIM_Base_SetConfig+0x38>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a30      	ldr	r2, [pc, #192]	; (8004e70 <TIM_Base_SetConfig+0xec>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_Base_SetConfig+0x38>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2f      	ldr	r2, [pc, #188]	; (8004e74 <TIM_Base_SetConfig+0xf0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d108      	bne.n	8004dce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <TIM_Base_SetConfig+0xe4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01b      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ddc:	d017      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <TIM_Base_SetConfig+0xe8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <TIM_Base_SetConfig+0xec>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00f      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <TIM_Base_SetConfig+0xf0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1f      	ldr	r2, [pc, #124]	; (8004e78 <TIM_Base_SetConfig+0xf4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <TIM_Base_SetConfig+0xf8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <TIM_Base_SetConfig+0xfc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d108      	bne.n	8004e20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <TIM_Base_SetConfig+0xe4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	615a      	str	r2, [r3, #20]
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0201 	bic.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 0302 	bic.w	r3, r3, #2
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <TIM_OC1_SetConfig+0xc8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <TIM_OC1_SetConfig+0xc8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d111      	bne.n	8004f26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40010000 	.word	0x40010000

08004f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0210 	bic.w	r2, r3, #16
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0320 	bic.w	r3, r3, #32
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <TIM_OC2_SetConfig+0xd4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10d      	bne.n	8004fcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a15      	ldr	r2, [pc, #84]	; (8005024 <TIM_OC2_SetConfig+0xd4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d113      	bne.n	8004ffc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000

08005028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <TIM_OC3_SetConfig+0xd0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10d      	bne.n	80050a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800508c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <TIM_OC3_SetConfig+0xd0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d113      	bne.n	80050d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40010000 	.word	0x40010000

080050fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a10      	ldr	r2, [pc, #64]	; (8005198 <TIM_OC4_SetConfig+0x9c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d109      	bne.n	8005170 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	019b      	lsls	r3, r3, #6
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000

0800519c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 0201 	bic.w	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f023 030a 	bic.w	r3, r3, #10
 80051d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b087      	sub	sp, #28
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0210 	bic.w	r2, r3, #16
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	031b      	lsls	r3, r3, #12
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	f043 0307 	orr.w	r3, r3, #7
 800527c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	021a      	lsls	r2, r3, #8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2201      	movs	r2, #1
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a1a      	ldr	r2, [r3, #32]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	401a      	ands	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1a      	ldr	r2, [r3, #32]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	431a      	orrs	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005330:	2302      	movs	r3, #2
 8005332:	e050      	b.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d018      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d013      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a16      	ldr	r2, [pc, #88]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d10c      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40014000 	.word	0x40014000

080053f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e03f      	b.n	80054b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fd f8e6 	bl	8002618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2224      	movs	r2, #36	; 0x24
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fe49 	bl	80060fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e021      	b.n	8005510 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2224      	movs	r2, #36	; 0x24
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fd f959 	bl	800279c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	4613      	mov	r3, r2
 8005526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b20      	cmp	r3, #32
 8005536:	d17c      	bne.n	8005632 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_UART_Transmit+0x2c>
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e075      	b.n	8005634 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_UART_Transmit+0x3e>
 8005552:	2302      	movs	r3, #2
 8005554:	e06e      	b.n	8005634 <HAL_UART_Transmit+0x11c>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2221      	movs	r2, #33	; 0x21
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800556c:	f7fd fb14 	bl	8002b98 <HAL_GetTick>
 8005570:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	88fa      	ldrh	r2, [r7, #6]
 8005576:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	d108      	bne.n	800559a <HAL_UART_Transmit+0x82>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	e003      	b.n	80055a2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055aa:	e02a      	b.n	8005602 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2200      	movs	r2, #0
 80055b4:	2180      	movs	r1, #128	; 0x80
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fb5a 	bl	8005c70 <UART_WaitOnFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e036      	b.n	8005634 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	3302      	adds	r3, #2
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e007      	b.n	80055f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1cf      	bne.n	80055ac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2200      	movs	r2, #0
 8005614:	2140      	movs	r1, #64	; 0x40
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fb2a 	bl	8005c70 <UART_WaitOnFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e006      	b.n	8005634 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	e000      	b.n	8005634 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005632:	2302      	movs	r3, #2
  }
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b20      	cmp	r3, #32
 8005654:	d130      	bne.n	80056b8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_UART_Transmit_IT+0x26>
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e029      	b.n	80056ba <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_UART_Transmit_IT+0x38>
 8005670:	2302      	movs	r3, #2
 8005672:	e022      	b.n	80056ba <HAL_UART_Transmit_IT+0x7e>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	88fa      	ldrh	r2, [r7, #6]
 8005686:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	88fa      	ldrh	r2, [r7, #6]
 800568c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2221      	movs	r2, #33	; 0x21
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056b2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	4613      	mov	r3, r2
 80056d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d11d      	bne.n	800571c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_UART_Receive_IT+0x26>
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e016      	b.n	800571e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Receive_IT+0x38>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e00f      	b.n	800571e <HAL_UART_Receive_IT+0x58>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	461a      	mov	r2, r3
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fb1a 	bl	8005d4c <UART_Start_Receive_IT>
 8005718:	4603      	mov	r3, r0
 800571a:	e000      	b.n	800571e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b0ba      	sub	sp, #232	; 0xe8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800574e:	2300      	movs	r3, #0
 8005750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005754:	2300      	movs	r3, #0
 8005756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10f      	bne.n	800578e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <HAL_UART_IRQHandler+0x66>
 800577a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fbfd 	bl	8005f86 <UART_Receive_IT>
      return;
 800578c:	e256      	b.n	8005c3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800578e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80de 	beq.w	8005954 <HAL_UART_IRQHandler+0x22c>
 8005798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80d1 	beq.w	8005954 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <HAL_UART_IRQHandler+0xae>
 80057be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f043 0201 	orr.w	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_UART_IRQHandler+0xd2>
 80057e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f043 0202 	orr.w	r2, r3, #2
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <HAL_UART_IRQHandler+0xf6>
 8005806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f043 0204 	orr.w	r2, r3, #4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d011      	beq.n	800584e <HAL_UART_IRQHandler+0x126>
 800582a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d105      	bne.n	8005842 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f043 0208 	orr.w	r2, r3, #8
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 81ed 	beq.w	8005c32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_UART_IRQHandler+0x14e>
 8005864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fb88 	bl	8005f86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <HAL_UART_IRQHandler+0x17a>
 800589a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d04f      	beq.n	8005942 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa90 	bl	8005dc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	2b40      	cmp	r3, #64	; 0x40
 80058b4:	d141      	bne.n	800593a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3314      	adds	r3, #20
 80058de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1d9      	bne.n	80058b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	2b00      	cmp	r3, #0
 8005908:	d013      	beq.n	8005932 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	4a7d      	ldr	r2, [pc, #500]	; (8005b04 <HAL_UART_IRQHandler+0x3dc>)
 8005910:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	4618      	mov	r0, r3
 8005918:	f7fd fb21 	bl	8002f5e <HAL_DMA_Abort_IT>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d016      	beq.n	8005950 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800592c:	4610      	mov	r0, r2
 800592e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	e00e      	b.n	8005950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fc fb66 	bl	8002004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e00a      	b.n	8005950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc fb62 	bl	8002004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	e006      	b.n	8005950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fc fb5e 	bl	8002004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800594e:	e170      	b.n	8005c32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	bf00      	nop
    return;
 8005952:	e16e      	b.n	8005c32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	2b01      	cmp	r3, #1
 800595a:	f040 814a 	bne.w	8005bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8143 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800596c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 813c 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800597a:	2300      	movs	r3, #0
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	f040 80b4 	bne.w	8005b08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8140 	beq.w	8005c36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059be:	429a      	cmp	r2, r3
 80059c0:	f080 8139 	bcs.w	8005c36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	f000 8088 	beq.w	8005aea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1d9      	bne.n	80059da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e1      	bne.n	8005a26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3314      	adds	r3, #20
 8005a68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3314      	adds	r3, #20
 8005a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e3      	bne.n	8005a62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aba:	f023 0310 	bic.w	r3, r3, #16
 8005abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005acc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ace:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e3      	bne.n	8005aa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fd f9ca 	bl	8002e7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f8ac 	bl	8005c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b00:	e099      	b.n	8005c36 <HAL_UART_IRQHandler+0x50e>
 8005b02:	bf00      	nop
 8005b04:	08005e8f 	.word	0x08005e8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 808b 	beq.w	8005c3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8086 	beq.w	8005c3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b52:	647a      	str	r2, [r7, #68]	; 0x44
 8005b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e3      	bne.n	8005b2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	623b      	str	r3, [r7, #32]
   return(result);
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3314      	adds	r3, #20
 8005b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e3      	bne.n	8005b66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0310 	bic.w	r3, r3, #16
 8005bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	330c      	adds	r3, #12
 8005bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bd0:	61fa      	str	r2, [r7, #28]
 8005bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	69b9      	ldr	r1, [r7, #24]
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e3      	bne.n	8005bac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f834 	bl	8005c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bf0:	e023      	b.n	8005c3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <HAL_UART_IRQHandler+0x4ea>
 8005bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f953 	bl	8005eb6 <UART_Transmit_IT>
    return;
 8005c10:	e014      	b.n	8005c3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <HAL_UART_IRQHandler+0x514>
 8005c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f993 	bl	8005f56 <UART_EndTransmit_IT>
    return;
 8005c30:	e004      	b.n	8005c3c <HAL_UART_IRQHandler+0x514>
    return;
 8005c32:	bf00      	nop
 8005c34:	e002      	b.n	8005c3c <HAL_UART_IRQHandler+0x514>
      return;
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <HAL_UART_IRQHandler+0x514>
      return;
 8005c3a:	bf00      	nop
  }
}
 8005c3c:	37e8      	adds	r7, #232	; 0xe8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop

08005c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b090      	sub	sp, #64	; 0x40
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c80:	e050      	b.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d04c      	beq.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c90:	f7fc ff82 	bl	8002b98 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d241      	bcs.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cc0:	637a      	str	r2, [r7, #52]	; 0x34
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e5      	bne.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3314      	adds	r3, #20
 8005cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	e853 3f00 	ldrex	r3, [r3]
 8005ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf4:	623a      	str	r2, [r7, #32]
 8005cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	69f9      	ldr	r1, [r7, #28]
 8005cfa:	6a3a      	ldr	r2, [r7, #32]
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e5      	bne.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e00f      	b.n	8005d44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	bf0c      	ite	eq
 8005d34:	2301      	moveq	r3, #1
 8005d36:	2300      	movne	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d09f      	beq.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3740      	adds	r7, #64	; 0x40
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	88fa      	ldrh	r2, [r7, #6]
 8005d64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	88fa      	ldrh	r2, [r7, #6]
 8005d6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2222      	movs	r2, #34	; 0x22
 8005d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695a      	ldr	r2, [r3, #20]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0201 	orr.w	r2, r2, #1
 8005da8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0220 	orr.w	r2, r2, #32
 8005db8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b095      	sub	sp, #84	; 0x54
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005df0:	643a      	str	r2, [r7, #64]	; 0x40
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005df6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e5      	bne.n	8005dd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3314      	adds	r3, #20
 8005e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3314      	adds	r3, #20
 8005e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e5      	bne.n	8005e04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d119      	bne.n	8005e74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f023 0310 	bic.w	r3, r3, #16
 8005e56:	647b      	str	r3, [r7, #68]	; 0x44
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e60:	61ba      	str	r2, [r7, #24]
 8005e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6979      	ldr	r1, [r7, #20]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e82:	bf00      	nop
 8005e84:	3754      	adds	r7, #84	; 0x54
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7fc f8ab 	bl	8002004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b21      	cmp	r3, #33	; 0x21
 8005ec8:	d13e      	bne.n	8005f48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed2:	d114      	bne.n	8005efe <UART_Transmit_IT+0x48>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d110      	bne.n	8005efe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ef0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	621a      	str	r2, [r3, #32]
 8005efc:	e008      	b.n	8005f10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6211      	str	r1, [r2, #32]
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10f      	bne.n	8005f44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e000      	b.n	8005f4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f48:	2302      	movs	r3, #2
  }
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff fe64 	bl	8005c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b08c      	sub	sp, #48	; 0x30
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b22      	cmp	r3, #34	; 0x22
 8005f98:	f040 80ab 	bne.w	80060f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa4:	d117      	bne.n	8005fd6 <UART_Receive_IT+0x50>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d113      	bne.n	8005fd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	1c9a      	adds	r2, r3, #2
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8005fd4:	e026      	b.n	8006024 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	d007      	beq.n	8005ffa <UART_Receive_IT+0x74>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <UART_Receive_IT+0x82>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	b2da      	uxtb	r2, r3
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e008      	b.n	800601a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006014:	b2da      	uxtb	r2, r3
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29b      	uxth	r3, r3
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4619      	mov	r1, r3
 8006032:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006034:	2b00      	cmp	r3, #0
 8006036:	d15a      	bne.n	80060ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0220 	bic.w	r2, r2, #32
 8006046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006056:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	2b01      	cmp	r3, #1
 8006076:	d135      	bne.n	80060e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	330c      	adds	r3, #12
 8006084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	613b      	str	r3, [r7, #16]
   return(result);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f023 0310 	bic.w	r3, r3, #16
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609e:	623a      	str	r2, [r7, #32]
 80060a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	69f9      	ldr	r1, [r7, #28]
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e5      	bne.n	800607e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d10a      	bne.n	80060d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff fdbb 	bl	8005c58 <HAL_UARTEx_RxEventCallback>
 80060e2:	e002      	b.n	80060ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7fb ffe1 	bl	80020ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e002      	b.n	80060f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3730      	adds	r7, #48	; 0x30
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006100:	b0c0      	sub	sp, #256	; 0x100
 8006102:	af00      	add	r7, sp, #0
 8006104:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	68d9      	ldr	r1, [r3, #12]
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	ea40 0301 	orr.w	r3, r0, r1
 8006124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	431a      	orrs	r2, r3
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	431a      	orrs	r2, r3
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006154:	f021 010c 	bic.w	r1, r1, #12
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006162:	430b      	orrs	r3, r1
 8006164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	6999      	ldr	r1, [r3, #24]
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	ea40 0301 	orr.w	r3, r0, r1
 8006182:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b8f      	ldr	r3, [pc, #572]	; (80063c8 <UART_SetConfig+0x2cc>)
 800618c:	429a      	cmp	r2, r3
 800618e:	d005      	beq.n	800619c <UART_SetConfig+0xa0>
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b8d      	ldr	r3, [pc, #564]	; (80063cc <UART_SetConfig+0x2d0>)
 8006198:	429a      	cmp	r2, r3
 800619a:	d104      	bne.n	80061a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800619c:	f7fd fde2 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 80061a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061a4:	e003      	b.n	80061ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061a6:	f7fd fdc9 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80061aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b8:	f040 810c 	bne.w	80063d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061ce:	4622      	mov	r2, r4
 80061d0:	462b      	mov	r3, r5
 80061d2:	1891      	adds	r1, r2, r2
 80061d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80061d6:	415b      	adcs	r3, r3
 80061d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061de:	4621      	mov	r1, r4
 80061e0:	eb12 0801 	adds.w	r8, r2, r1
 80061e4:	4629      	mov	r1, r5
 80061e6:	eb43 0901 	adc.w	r9, r3, r1
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061fe:	4690      	mov	r8, r2
 8006200:	4699      	mov	r9, r3
 8006202:	4623      	mov	r3, r4
 8006204:	eb18 0303 	adds.w	r3, r8, r3
 8006208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800620c:	462b      	mov	r3, r5
 800620e:	eb49 0303 	adc.w	r3, r9, r3
 8006212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006222:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800622a:	460b      	mov	r3, r1
 800622c:	18db      	adds	r3, r3, r3
 800622e:	653b      	str	r3, [r7, #80]	; 0x50
 8006230:	4613      	mov	r3, r2
 8006232:	eb42 0303 	adc.w	r3, r2, r3
 8006236:	657b      	str	r3, [r7, #84]	; 0x54
 8006238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800623c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006240:	f7fa f836 	bl	80002b0 <__aeabi_uldivmod>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4b61      	ldr	r3, [pc, #388]	; (80063d0 <UART_SetConfig+0x2d4>)
 800624a:	fba3 2302 	umull	r2, r3, r3, r2
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	011c      	lsls	r4, r3, #4
 8006252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006256:	2200      	movs	r2, #0
 8006258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800625c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006260:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006264:	4642      	mov	r2, r8
 8006266:	464b      	mov	r3, r9
 8006268:	1891      	adds	r1, r2, r2
 800626a:	64b9      	str	r1, [r7, #72]	; 0x48
 800626c:	415b      	adcs	r3, r3
 800626e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006270:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006274:	4641      	mov	r1, r8
 8006276:	eb12 0a01 	adds.w	sl, r2, r1
 800627a:	4649      	mov	r1, r9
 800627c:	eb43 0b01 	adc.w	fp, r3, r1
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800628c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006294:	4692      	mov	sl, r2
 8006296:	469b      	mov	fp, r3
 8006298:	4643      	mov	r3, r8
 800629a:	eb1a 0303 	adds.w	r3, sl, r3
 800629e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062a2:	464b      	mov	r3, r9
 80062a4:	eb4b 0303 	adc.w	r3, fp, r3
 80062a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062c0:	460b      	mov	r3, r1
 80062c2:	18db      	adds	r3, r3, r3
 80062c4:	643b      	str	r3, [r7, #64]	; 0x40
 80062c6:	4613      	mov	r3, r2
 80062c8:	eb42 0303 	adc.w	r3, r2, r3
 80062cc:	647b      	str	r3, [r7, #68]	; 0x44
 80062ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062d6:	f7f9 ffeb 	bl	80002b0 <__aeabi_uldivmod>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <UART_SetConfig+0x2d4>)
 80062e2:	fba3 2301 	umull	r2, r3, r3, r1
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	2264      	movs	r2, #100	; 0x64
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	1acb      	subs	r3, r1, r3
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062f6:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <UART_SetConfig+0x2d4>)
 80062f8:	fba3 2302 	umull	r2, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006304:	441c      	add	r4, r3
 8006306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630a:	2200      	movs	r2, #0
 800630c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006310:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006314:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006318:	4642      	mov	r2, r8
 800631a:	464b      	mov	r3, r9
 800631c:	1891      	adds	r1, r2, r2
 800631e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006320:	415b      	adcs	r3, r3
 8006322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006328:	4641      	mov	r1, r8
 800632a:	1851      	adds	r1, r2, r1
 800632c:	6339      	str	r1, [r7, #48]	; 0x30
 800632e:	4649      	mov	r1, r9
 8006330:	414b      	adcs	r3, r1
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006340:	4659      	mov	r1, fp
 8006342:	00cb      	lsls	r3, r1, #3
 8006344:	4651      	mov	r1, sl
 8006346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800634a:	4651      	mov	r1, sl
 800634c:	00ca      	lsls	r2, r1, #3
 800634e:	4610      	mov	r0, r2
 8006350:	4619      	mov	r1, r3
 8006352:	4603      	mov	r3, r0
 8006354:	4642      	mov	r2, r8
 8006356:	189b      	adds	r3, r3, r2
 8006358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800635c:	464b      	mov	r3, r9
 800635e:	460a      	mov	r2, r1
 8006360:	eb42 0303 	adc.w	r3, r2, r3
 8006364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006374:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800637c:	460b      	mov	r3, r1
 800637e:	18db      	adds	r3, r3, r3
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
 8006382:	4613      	mov	r3, r2
 8006384:	eb42 0303 	adc.w	r3, r2, r3
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800638e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006392:	f7f9 ff8d 	bl	80002b0 <__aeabi_uldivmod>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <UART_SetConfig+0x2d4>)
 800639c:	fba3 1302 	umull	r1, r3, r3, r2
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	2164      	movs	r1, #100	; 0x64
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	3332      	adds	r3, #50	; 0x32
 80063ae:	4a08      	ldr	r2, [pc, #32]	; (80063d0 <UART_SetConfig+0x2d4>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	f003 0207 	and.w	r2, r3, #7
 80063ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4422      	add	r2, r4
 80063c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063c4:	e105      	b.n	80065d2 <UART_SetConfig+0x4d6>
 80063c6:	bf00      	nop
 80063c8:	40011000 	.word	0x40011000
 80063cc:	40011400 	.word	0x40011400
 80063d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063e6:	4642      	mov	r2, r8
 80063e8:	464b      	mov	r3, r9
 80063ea:	1891      	adds	r1, r2, r2
 80063ec:	6239      	str	r1, [r7, #32]
 80063ee:	415b      	adcs	r3, r3
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
 80063f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063f6:	4641      	mov	r1, r8
 80063f8:	1854      	adds	r4, r2, r1
 80063fa:	4649      	mov	r1, r9
 80063fc:	eb43 0501 	adc.w	r5, r3, r1
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	00eb      	lsls	r3, r5, #3
 800640a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640e:	00e2      	lsls	r2, r4, #3
 8006410:	4614      	mov	r4, r2
 8006412:	461d      	mov	r5, r3
 8006414:	4643      	mov	r3, r8
 8006416:	18e3      	adds	r3, r4, r3
 8006418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800641c:	464b      	mov	r3, r9
 800641e:	eb45 0303 	adc.w	r3, r5, r3
 8006422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006432:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006442:	4629      	mov	r1, r5
 8006444:	008b      	lsls	r3, r1, #2
 8006446:	4621      	mov	r1, r4
 8006448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800644c:	4621      	mov	r1, r4
 800644e:	008a      	lsls	r2, r1, #2
 8006450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006454:	f7f9 ff2c 	bl	80002b0 <__aeabi_uldivmod>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4b60      	ldr	r3, [pc, #384]	; (80065e0 <UART_SetConfig+0x4e4>)
 800645e:	fba3 2302 	umull	r2, r3, r3, r2
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	011c      	lsls	r4, r3, #4
 8006466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800646a:	2200      	movs	r2, #0
 800646c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006470:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	1891      	adds	r1, r2, r2
 800647e:	61b9      	str	r1, [r7, #24]
 8006480:	415b      	adcs	r3, r3
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006488:	4641      	mov	r1, r8
 800648a:	1851      	adds	r1, r2, r1
 800648c:	6139      	str	r1, [r7, #16]
 800648e:	4649      	mov	r1, r9
 8006490:	414b      	adcs	r3, r1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064a0:	4659      	mov	r1, fp
 80064a2:	00cb      	lsls	r3, r1, #3
 80064a4:	4651      	mov	r1, sl
 80064a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064aa:	4651      	mov	r1, sl
 80064ac:	00ca      	lsls	r2, r1, #3
 80064ae:	4610      	mov	r0, r2
 80064b0:	4619      	mov	r1, r3
 80064b2:	4603      	mov	r3, r0
 80064b4:	4642      	mov	r2, r8
 80064b6:	189b      	adds	r3, r3, r2
 80064b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064bc:	464b      	mov	r3, r9
 80064be:	460a      	mov	r2, r1
 80064c0:	eb42 0303 	adc.w	r3, r2, r3
 80064c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80064d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064e0:	4649      	mov	r1, r9
 80064e2:	008b      	lsls	r3, r1, #2
 80064e4:	4641      	mov	r1, r8
 80064e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ea:	4641      	mov	r1, r8
 80064ec:	008a      	lsls	r2, r1, #2
 80064ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064f2:	f7f9 fedd 	bl	80002b0 <__aeabi_uldivmod>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4b39      	ldr	r3, [pc, #228]	; (80065e0 <UART_SetConfig+0x4e4>)
 80064fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006500:	095b      	lsrs	r3, r3, #5
 8006502:	2164      	movs	r1, #100	; 0x64
 8006504:	fb01 f303 	mul.w	r3, r1, r3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	3332      	adds	r3, #50	; 0x32
 800650e:	4a34      	ldr	r2, [pc, #208]	; (80065e0 <UART_SetConfig+0x4e4>)
 8006510:	fba2 2303 	umull	r2, r3, r2, r3
 8006514:	095b      	lsrs	r3, r3, #5
 8006516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800651a:	441c      	add	r4, r3
 800651c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006520:	2200      	movs	r2, #0
 8006522:	673b      	str	r3, [r7, #112]	; 0x70
 8006524:	677a      	str	r2, [r7, #116]	; 0x74
 8006526:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800652a:	4642      	mov	r2, r8
 800652c:	464b      	mov	r3, r9
 800652e:	1891      	adds	r1, r2, r2
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	415b      	adcs	r3, r3
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800653a:	4641      	mov	r1, r8
 800653c:	1851      	adds	r1, r2, r1
 800653e:	6039      	str	r1, [r7, #0]
 8006540:	4649      	mov	r1, r9
 8006542:	414b      	adcs	r3, r1
 8006544:	607b      	str	r3, [r7, #4]
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006552:	4659      	mov	r1, fp
 8006554:	00cb      	lsls	r3, r1, #3
 8006556:	4651      	mov	r1, sl
 8006558:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800655c:	4651      	mov	r1, sl
 800655e:	00ca      	lsls	r2, r1, #3
 8006560:	4610      	mov	r0, r2
 8006562:	4619      	mov	r1, r3
 8006564:	4603      	mov	r3, r0
 8006566:	4642      	mov	r2, r8
 8006568:	189b      	adds	r3, r3, r2
 800656a:	66bb      	str	r3, [r7, #104]	; 0x68
 800656c:	464b      	mov	r3, r9
 800656e:	460a      	mov	r2, r1
 8006570:	eb42 0303 	adc.w	r3, r2, r3
 8006574:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	663b      	str	r3, [r7, #96]	; 0x60
 8006580:	667a      	str	r2, [r7, #100]	; 0x64
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800658e:	4649      	mov	r1, r9
 8006590:	008b      	lsls	r3, r1, #2
 8006592:	4641      	mov	r1, r8
 8006594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006598:	4641      	mov	r1, r8
 800659a:	008a      	lsls	r2, r1, #2
 800659c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065a0:	f7f9 fe86 	bl	80002b0 <__aeabi_uldivmod>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <UART_SetConfig+0x4e4>)
 80065aa:	fba3 1302 	umull	r1, r3, r3, r2
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	2164      	movs	r1, #100	; 0x64
 80065b2:	fb01 f303 	mul.w	r3, r1, r3
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	3332      	adds	r3, #50	; 0x32
 80065bc:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <UART_SetConfig+0x4e4>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	f003 020f 	and.w	r2, r3, #15
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4422      	add	r2, r4
 80065d0:	609a      	str	r2, [r3, #8]
}
 80065d2:	bf00      	nop
 80065d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065d8:	46bd      	mov	sp, r7
 80065da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065de:	bf00      	nop
 80065e0:	51eb851f 	.word	0x51eb851f

080065e4 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <MUX>:
void MUX(struct WIFI *a)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2204      	movs	r2, #4
 8006674:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2205      	movs	r2, #5
 80066a0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2206      	movs	r2, #6
 80066f8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2208      	movs	r2, #8
 8006724:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2209      	movs	r2, #9
 8006750:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2207      	movs	r2, #7
 800677c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <Inicializar>:
void Inicializar(struct WIFI *a)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006932:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006936:	af06      	add	r7, sp, #24
 8006938:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800693c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006940:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006942:	2300      	movs	r3, #0
 8006944:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800694e:	2300      	movs	r3, #0
 8006950:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006954:	2300      	movs	r3, #0
 8006956:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800695a:	2300      	movs	r3, #0
 800695c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006960:	2320      	movs	r3, #32
 8006962:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006966:	2322      	movs	r3, #34	; 0x22
 8006968:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 800696c:	4b71      	ldr	r3, [pc, #452]	; (8006b34 <AT_ESP8266_ND+0x204>)
 800696e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006972:	4a71      	ldr	r2, [pc, #452]	; (8006b38 <AT_ESP8266_ND+0x208>)
 8006974:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	4611      	mov	r1, r2
 800697c:	8019      	strh	r1, [r3, #0]
 800697e:	3302      	adds	r3, #2
 8006980:	0c12      	lsrs	r2, r2, #16
 8006982:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006984:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006988:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 800698c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006990:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006994:	2300      	movs	r3, #0
 8006996:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800699a:	2300      	movs	r3, #0
 800699c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80069a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80069b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80069be:	4618      	mov	r0, r3
 80069c0:	f7f9 fc18 	bl	80001f4 <strlen>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 80069d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 80069e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7f9 fbfd 	bl	80001f4 <strlen>
 80069fa:	4603      	mov	r3, r0
 80069fc:	461a      	mov	r2, r3
 80069fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2206      	movs	r2, #6
 8006a18:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006a1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006a46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a54:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a58:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a62:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a66:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a6a:	6809      	ldr	r1, [r1, #0]
 8006a6c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a70:	2600      	movs	r6, #0
 8006a72:	9604      	str	r6, [sp, #16]
 8006a74:	9103      	str	r1, [sp, #12]
 8006a76:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a7a:	9102      	str	r1, [sp, #8]
 8006a7c:	9201      	str	r2, [sp, #4]
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	462b      	mov	r3, r5
 8006a82:	4a2e      	ldr	r2, [pc, #184]	; (8006b3c <AT_ESP8266_ND+0x20c>)
 8006a84:	4621      	mov	r1, r4
 8006a86:	f007 fc77 	bl	800e378 <FT_String_ND>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	f040 812a 	bne.w	8006ce6 <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006a92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2206      	movs	r2, #6
 8006a9e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006aa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d145      	bne.n	8006b40 <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ac2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ac6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ad4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006ade:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006aec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006af0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006afa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006afe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b02:	6809      	ldr	r1, [r1, #0]
 8006b04:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b08:	2604      	movs	r6, #4
 8006b0a:	9604      	str	r6, [sp, #16]
 8006b0c:	9103      	str	r1, [sp, #12]
 8006b0e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b12:	9102      	str	r1, [sp, #8]
 8006b14:	9201      	str	r2, [sp, #4]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	462b      	mov	r3, r5
 8006b1a:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <AT_ESP8266_ND+0x20c>)
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	f007 fc2b 	bl	800e378 <FT_String_ND>
 8006b22:	4602      	mov	r2, r0
 8006b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006b32:	e044      	b.n	8006bbe <AT_ESP8266_ND+0x28e>
 8006b34:	00222c22 	.word	0x00222c22
 8006b38:	08010670 	.word	0x08010670
 8006b3c:	08010498 	.word	0x08010498
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006b40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006b6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b78:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b7c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b86:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b8a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b8e:	6809      	ldr	r1, [r1, #0]
 8006b90:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b94:	2605      	movs	r6, #5
 8006b96:	9604      	str	r6, [sp, #16]
 8006b98:	9103      	str	r1, [sp, #12]
 8006b9a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b9e:	9102      	str	r1, [sp, #8]
 8006ba0:	9201      	str	r2, [sp, #4]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	462b      	mov	r3, r5
 8006ba6:	4ac1      	ldr	r2, [pc, #772]	; (8006eac <AT_ESP8266_ND+0x57c>)
 8006ba8:	4621      	mov	r1, r4
 8006baa:	f007 fbe5 	bl	800e378 <FT_String_ND>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006bbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d15a      	bne.n	8006c86 <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2263      	movs	r2, #99	; 0x63
 8006bdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006bee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006c0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c26:	2341      	movs	r3, #65	; 0x41
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f007 ff0a 	bl	800ea44 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006c30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c4c:	2341      	movs	r3, #65	; 0x41
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	2300      	movs	r3, #0
 8006c52:	2205      	movs	r2, #5
 8006c54:	f007 fef6 	bl	800ea44 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006c58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006c94:	2b05      	cmp	r3, #5
 8006c96:	d126      	bne.n	8006ce6 <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006c98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2237      	movs	r2, #55	; 0x37
 8006ca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ccc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006cd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006ce6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006cf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006d20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d2e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d32:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d36:	6812      	ldr	r2, [r2, #0]
 8006d38:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d3c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d40:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d44:	6809      	ldr	r1, [r1, #0]
 8006d46:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	9604      	str	r6, [sp, #16]
 8006d4e:	9103      	str	r1, [sp, #12]
 8006d50:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d54:	9102      	str	r1, [sp, #8]
 8006d56:	9201      	str	r2, [sp, #4]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	4a54      	ldr	r2, [pc, #336]	; (8006eb0 <AT_ESP8266_ND+0x580>)
 8006d5e:	4621      	mov	r1, r4
 8006d60:	f007 fb0a 	bl	800e378 <FT_String_ND>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	f040 8334 	bne.w	80073d4 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006d72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2206      	movs	r2, #6
 8006d7e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006d82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006d90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006da2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006dac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006db0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006dba:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006dbe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006dc8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006dcc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006dd0:	6809      	ldr	r1, [r1, #0]
 8006dd2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006dd6:	2600      	movs	r6, #0
 8006dd8:	9604      	str	r6, [sp, #16]
 8006dda:	9103      	str	r1, [sp, #12]
 8006ddc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006de0:	9102      	str	r1, [sp, #8]
 8006de2:	9201      	str	r2, [sp, #4]
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	462b      	mov	r3, r5
 8006de8:	4a32      	ldr	r2, [pc, #200]	; (8006eb4 <AT_ESP8266_ND+0x584>)
 8006dea:	4621      	mov	r1, r4
 8006dec:	f007 fac4 	bl	800e378 <FT_String_ND>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d113      	bne.n	8006e1e <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006df6:	2313      	movs	r3, #19
 8006df8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006dfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006e1a:	f001 b981 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006e2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e66:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e6a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e74:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e78:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e7c:	6809      	ldr	r1, [r1, #0]
 8006e7e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e82:	2600      	movs	r6, #0
 8006e84:	9604      	str	r6, [sp, #16]
 8006e86:	9103      	str	r1, [sp, #12]
 8006e88:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e8c:	9102      	str	r1, [sp, #8]
 8006e8e:	9201      	str	r2, [sp, #4]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	462b      	mov	r3, r5
 8006e94:	4a08      	ldr	r2, [pc, #32]	; (8006eb8 <AT_ESP8266_ND+0x588>)
 8006e96:	4621      	mov	r1, r4
 8006e98:	f007 fa6e 	bl	800e378 <FT_String_ND>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d10c      	bne.n	8006ebc <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006ea2:	230d      	movs	r3, #13
 8006ea4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ea8:	f001 b93a 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
 8006eac:	08010498 	.word	0x08010498
 8006eb0:	080104a0 	.word	0x080104a0
 8006eb4:	080104a8 	.word	0x080104a8
 8006eb8:	080104b0 	.word	0x080104b0
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	220a      	movs	r2, #10
 8006ec8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006ee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006ef6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006efa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f04:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f08:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f0c:	6812      	ldr	r2, [r2, #0]
 8006f0e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f12:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f16:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f1a:	6809      	ldr	r1, [r1, #0]
 8006f1c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f20:	2600      	movs	r6, #0
 8006f22:	9604      	str	r6, [sp, #16]
 8006f24:	9103      	str	r1, [sp, #12]
 8006f26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f2a:	9102      	str	r1, [sp, #8]
 8006f2c:	9201      	str	r2, [sp, #4]
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	462b      	mov	r3, r5
 8006f32:	4ab7      	ldr	r2, [pc, #732]	; (8007210 <AT_ESP8266_ND+0x8e0>)
 8006f34:	4621      	mov	r1, r4
 8006f36:	f007 fa1f 	bl	800e378 <FT_String_ND>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d104      	bne.n	8006f4a <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8006f40:	231c      	movs	r3, #28
 8006f42:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f46:	f001 b8eb 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	220f      	movs	r2, #15
 8006f56:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006fa0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fa4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fa8:	6809      	ldr	r1, [r1, #0]
 8006faa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006fae:	2600      	movs	r6, #0
 8006fb0:	9604      	str	r6, [sp, #16]
 8006fb2:	9103      	str	r1, [sp, #12]
 8006fb4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fb8:	9102      	str	r1, [sp, #8]
 8006fba:	9201      	str	r2, [sp, #4]
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	462b      	mov	r3, r5
 8006fc0:	4a94      	ldr	r2, [pc, #592]	; (8007214 <AT_ESP8266_ND+0x8e4>)
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	f007 f9d8 	bl	800e378 <FT_String_ND>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d104      	bne.n	8006fd8 <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006fce:	2317      	movs	r3, #23
 8006fd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fd4:	f001 b8a4 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2203      	movs	r2, #3
 8006fe4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8006fe8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ffa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007020:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007024:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800702e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007032:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007036:	6809      	ldr	r1, [r1, #0]
 8007038:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800703c:	2600      	movs	r6, #0
 800703e:	9604      	str	r6, [sp, #16]
 8007040:	9103      	str	r1, [sp, #12]
 8007042:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007046:	9102      	str	r1, [sp, #8]
 8007048:	9201      	str	r2, [sp, #4]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	462b      	mov	r3, r5
 800704e:	4a72      	ldr	r2, [pc, #456]	; (8007218 <AT_ESP8266_ND+0x8e8>)
 8007050:	4621      	mov	r1, r4
 8007052:	f007 f991 	bl	800e378 <FT_String_ND>
 8007056:	4603      	mov	r3, r0
 8007058:	2b01      	cmp	r3, #1
 800705a:	d104      	bne.n	8007066 <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 800705c:	2314      	movs	r3, #20
 800705e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007062:	f001 b85d 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8007066:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800706a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	220c      	movs	r2, #12
 8007072:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800707a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007084:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007088:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007092:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007096:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80070a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070ae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070b2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070b6:	6812      	ldr	r2, [r2, #0]
 80070b8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070bc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070c0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070c4:	6809      	ldr	r1, [r1, #0]
 80070c6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070ca:	2600      	movs	r6, #0
 80070cc:	9604      	str	r6, [sp, #16]
 80070ce:	9103      	str	r1, [sp, #12]
 80070d0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070d4:	9102      	str	r1, [sp, #8]
 80070d6:	9201      	str	r2, [sp, #4]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	462b      	mov	r3, r5
 80070dc:	4a4f      	ldr	r2, [pc, #316]	; (800721c <AT_ESP8266_ND+0x8ec>)
 80070de:	4621      	mov	r1, r4
 80070e0:	f007 f94a 	bl	800e378 <FT_String_ND>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d104      	bne.n	80070f4 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 80070ea:	2315      	movs	r3, #21
 80070ec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070f0:	f001 b816 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 80070f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	220b      	movs	r2, #11
 8007100:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007112:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007116:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007124:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800712e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007132:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800713c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007140:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800714a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800714e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007152:	6809      	ldr	r1, [r1, #0]
 8007154:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007158:	2600      	movs	r6, #0
 800715a:	9604      	str	r6, [sp, #16]
 800715c:	9103      	str	r1, [sp, #12]
 800715e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007162:	9102      	str	r1, [sp, #8]
 8007164:	9201      	str	r2, [sp, #4]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	462b      	mov	r3, r5
 800716a:	4a2d      	ldr	r2, [pc, #180]	; (8007220 <AT_ESP8266_ND+0x8f0>)
 800716c:	4621      	mov	r1, r4
 800716e:	f007 f903 	bl	800e378 <FT_String_ND>
 8007172:	4603      	mov	r3, r0
 8007174:	2b01      	cmp	r3, #1
 8007176:	d104      	bne.n	8007182 <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 8007178:	2309      	movs	r3, #9
 800717a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800717e:	f000 bfcf 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007182:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007186:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	220b      	movs	r2, #11
 800718e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007192:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007196:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80071a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80071ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80071bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071ca:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071ce:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071d2:	6812      	ldr	r2, [r2, #0]
 80071d4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071d8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071dc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071e0:	6809      	ldr	r1, [r1, #0]
 80071e2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071e6:	2600      	movs	r6, #0
 80071e8:	9604      	str	r6, [sp, #16]
 80071ea:	9103      	str	r1, [sp, #12]
 80071ec:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071f0:	9102      	str	r1, [sp, #8]
 80071f2:	9201      	str	r2, [sp, #4]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	462b      	mov	r3, r5
 80071f8:	4a0a      	ldr	r2, [pc, #40]	; (8007224 <AT_ESP8266_ND+0x8f4>)
 80071fa:	4621      	mov	r1, r4
 80071fc:	f007 f8bc 	bl	800e378 <FT_String_ND>
 8007200:	4603      	mov	r3, r0
 8007202:	2b01      	cmp	r3, #1
 8007204:	d110      	bne.n	8007228 <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 8007206:	2307      	movs	r3, #7
 8007208:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800720c:	f000 bf88 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
 8007210:	080104bc 	.word	0x080104bc
 8007214:	080104c8 	.word	0x080104c8
 8007218:	080104d8 	.word	0x080104d8
 800721c:	080104dc 	.word	0x080104dc
 8007220:	080104ec 	.word	0x080104ec
 8007224:	080104f8 	.word	0x080104f8
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800722c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	220b      	movs	r2, #11
 8007234:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007238:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800723c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800724a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007254:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007258:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007262:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007266:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007270:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007274:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800727e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007282:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007286:	6809      	ldr	r1, [r1, #0]
 8007288:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800728c:	2600      	movs	r6, #0
 800728e:	9604      	str	r6, [sp, #16]
 8007290:	9103      	str	r1, [sp, #12]
 8007292:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007296:	9102      	str	r1, [sp, #8]
 8007298:	9201      	str	r2, [sp, #4]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	462b      	mov	r3, r5
 800729e:	4ab7      	ldr	r2, [pc, #732]	; (800757c <AT_ESP8266_ND+0xc4c>)
 80072a0:	4621      	mov	r1, r4
 80072a2:	f007 f869 	bl	800e378 <FT_String_ND>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d104      	bne.n	80072b6 <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 80072ac:	2308      	movs	r3, #8
 80072ae:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072b2:	f000 bf35 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 80072b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	220a      	movs	r2, #10
 80072c2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80072c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80072d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80072e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80072f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072fe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007302:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007306:	6812      	ldr	r2, [r2, #0]
 8007308:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800730c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007310:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007314:	6809      	ldr	r1, [r1, #0]
 8007316:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800731a:	2600      	movs	r6, #0
 800731c:	9604      	str	r6, [sp, #16]
 800731e:	9103      	str	r1, [sp, #12]
 8007320:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007324:	9102      	str	r1, [sp, #8]
 8007326:	9201      	str	r2, [sp, #4]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	462b      	mov	r3, r5
 800732c:	4a94      	ldr	r2, [pc, #592]	; (8007580 <AT_ESP8266_ND+0xc50>)
 800732e:	4621      	mov	r1, r4
 8007330:	f007 f822 	bl	800e378 <FT_String_ND>
 8007334:	4603      	mov	r3, r0
 8007336:	2b01      	cmp	r3, #1
 8007338:	d104      	bne.n	8007344 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 800733a:	231b      	movs	r3, #27
 800733c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007340:	f000 beee 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007344:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007348:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2207      	movs	r2, #7
 8007350:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007354:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007358:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007362:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007366:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007370:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007374:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800737e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007382:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800738c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007390:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800739a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800739e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073a2:	6809      	ldr	r1, [r1, #0]
 80073a4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073a8:	2600      	movs	r6, #0
 80073aa:	9604      	str	r6, [sp, #16]
 80073ac:	9103      	str	r1, [sp, #12]
 80073ae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073b2:	9102      	str	r1, [sp, #8]
 80073b4:	9201      	str	r2, [sp, #4]
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	462b      	mov	r3, r5
 80073ba:	4a72      	ldr	r2, [pc, #456]	; (8007584 <AT_ESP8266_ND+0xc54>)
 80073bc:	4621      	mov	r1, r4
 80073be:	f006 ffdb 	bl	800e378 <FT_String_ND>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	f040 86ab 	bne.w	8008120 <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 80073ca:	230f      	movs	r3, #15
 80073cc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073d0:	f000 bea6 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 80073d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2207      	movs	r2, #7
 80073e0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80073e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80073f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007400:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007404:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800740e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007412:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800741c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007420:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800742a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800742e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007432:	6809      	ldr	r1, [r1, #0]
 8007434:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007438:	2600      	movs	r6, #0
 800743a:	9604      	str	r6, [sp, #16]
 800743c:	9103      	str	r1, [sp, #12]
 800743e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007442:	9102      	str	r1, [sp, #8]
 8007444:	9201      	str	r2, [sp, #4]
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	462b      	mov	r3, r5
 800744a:	4a4f      	ldr	r2, [pc, #316]	; (8007588 <AT_ESP8266_ND+0xc58>)
 800744c:	4621      	mov	r1, r4
 800744e:	f006 ff93 	bl	800e378 <FT_String_ND>
 8007452:	4603      	mov	r3, r0
 8007454:	2b01      	cmp	r3, #1
 8007456:	f040 8326 	bne.w	8007aa6 <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 800745a:	2302      	movs	r3, #2
 800745c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8007460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2208      	movs	r2, #8
 800746c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 8007470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800747e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800748c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007490:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800749a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800749e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074a8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074ac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074b6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074ba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074be:	6809      	ldr	r1, [r1, #0]
 80074c0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074c4:	2600      	movs	r6, #0
 80074c6:	9604      	str	r6, [sp, #16]
 80074c8:	9103      	str	r1, [sp, #12]
 80074ca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074ce:	9102      	str	r1, [sp, #8]
 80074d0:	9201      	str	r2, [sp, #4]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	462b      	mov	r3, r5
 80074d6:	4a2d      	ldr	r2, [pc, #180]	; (800758c <AT_ESP8266_ND+0xc5c>)
 80074d8:	4621      	mov	r1, r4
 80074da:	f006 ff4d 	bl	800e378 <FT_String_ND>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d104      	bne.n	80074ee <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 80074e4:	2306      	movs	r3, #6
 80074e6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074ea:	f000 be19 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80074ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2215      	movs	r2, #21
 80074fa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80074fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007502:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800750c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007510:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800751a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800751e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007528:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800752c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007536:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800753a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007544:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007548:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800754c:	6809      	ldr	r1, [r1, #0]
 800754e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007552:	2600      	movs	r6, #0
 8007554:	9604      	str	r6, [sp, #16]
 8007556:	9103      	str	r1, [sp, #12]
 8007558:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800755c:	9102      	str	r1, [sp, #8]
 800755e:	9201      	str	r2, [sp, #4]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	462b      	mov	r3, r5
 8007564:	4a0a      	ldr	r2, [pc, #40]	; (8007590 <AT_ESP8266_ND+0xc60>)
 8007566:	4621      	mov	r1, r4
 8007568:	f006 ff06 	bl	800e378 <FT_String_ND>
 800756c:	4603      	mov	r3, r0
 800756e:	2b01      	cmp	r3, #1
 8007570:	d110      	bne.n	8007594 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8007572:	230e      	movs	r3, #14
 8007574:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007578:	f000 bdd2 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
 800757c:	08010504 	.word	0x08010504
 8007580:	08010510 	.word	0x08010510
 8007584:	0801051c 	.word	0x0801051c
 8007588:	08010524 	.word	0x08010524
 800758c:	0801052c 	.word	0x0801052c
 8007590:	08010538 	.word	0x08010538
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007598:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	220c      	movs	r2, #12
 80075a0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80075a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80075b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80075c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80075ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075dc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075e0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075ea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075ee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075f2:	6809      	ldr	r1, [r1, #0]
 80075f4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075f8:	2600      	movs	r6, #0
 80075fa:	9604      	str	r6, [sp, #16]
 80075fc:	9103      	str	r1, [sp, #12]
 80075fe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007602:	9102      	str	r1, [sp, #8]
 8007604:	9201      	str	r2, [sp, #4]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	462b      	mov	r3, r5
 800760a:	4ab7      	ldr	r2, [pc, #732]	; (80078e8 <AT_ESP8266_ND+0xfb8>)
 800760c:	4621      	mov	r1, r4
 800760e:	f006 feb3 	bl	800e378 <FT_String_ND>
 8007612:	4603      	mov	r3, r0
 8007614:	2b01      	cmp	r3, #1
 8007616:	d104      	bne.n	8007622 <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 8007618:	2316      	movs	r3, #22
 800761a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800761e:	f000 bd7f 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007622:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007626:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	220b      	movs	r2, #11
 800762e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007632:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007636:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007640:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007644:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800764e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007652:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800765c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007660:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800766a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800766e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007678:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800767c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007680:	6809      	ldr	r1, [r1, #0]
 8007682:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007686:	2600      	movs	r6, #0
 8007688:	9604      	str	r6, [sp, #16]
 800768a:	9103      	str	r1, [sp, #12]
 800768c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007690:	9102      	str	r1, [sp, #8]
 8007692:	9201      	str	r2, [sp, #4]
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	462b      	mov	r3, r5
 8007698:	4a94      	ldr	r2, [pc, #592]	; (80078ec <AT_ESP8266_ND+0xfbc>)
 800769a:	4621      	mov	r1, r4
 800769c:	f006 fe6c 	bl	800e378 <FT_String_ND>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d104      	bne.n	80076b0 <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 80076a6:	231a      	movs	r3, #26
 80076a8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076ac:	f000 bd38 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80076b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2211      	movs	r2, #17
 80076bc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80076c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80076ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80076dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80076ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076f8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076fc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007706:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800770a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800770e:	6809      	ldr	r1, [r1, #0]
 8007710:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007714:	2600      	movs	r6, #0
 8007716:	9604      	str	r6, [sp, #16]
 8007718:	9103      	str	r1, [sp, #12]
 800771a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800771e:	9102      	str	r1, [sp, #8]
 8007720:	9201      	str	r2, [sp, #4]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	462b      	mov	r3, r5
 8007726:	4a72      	ldr	r2, [pc, #456]	; (80078f0 <AT_ESP8266_ND+0xfc0>)
 8007728:	4621      	mov	r1, r4
 800772a:	f006 fe25 	bl	800e378 <FT_String_ND>
 800772e:	4603      	mov	r3, r0
 8007730:	2b01      	cmp	r3, #1
 8007732:	d104      	bne.n	800773e <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 8007734:	2311      	movs	r3, #17
 8007736:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800773a:	f000 bcf1 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 800773e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007742:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	220a      	movs	r2, #10
 800774a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800774e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800775c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800776a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800776e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007778:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800777c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007786:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800778a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007794:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007798:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800779c:	6809      	ldr	r1, [r1, #0]
 800779e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077a2:	2600      	movs	r6, #0
 80077a4:	9604      	str	r6, [sp, #16]
 80077a6:	9103      	str	r1, [sp, #12]
 80077a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077ac:	9102      	str	r1, [sp, #8]
 80077ae:	9201      	str	r2, [sp, #4]
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	462b      	mov	r3, r5
 80077b4:	4a4f      	ldr	r2, [pc, #316]	; (80078f4 <AT_ESP8266_ND+0xfc4>)
 80077b6:	4621      	mov	r1, r4
 80077b8:	f006 fdde 	bl	800e378 <FT_String_ND>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d104      	bne.n	80077cc <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 80077c2:	231d      	movs	r3, #29
 80077c4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077c8:	f000 bcaa 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 80077cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	220b      	movs	r2, #11
 80077d8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80077dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80077ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80077f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800780a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007814:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007818:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007822:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007826:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800782a:	6809      	ldr	r1, [r1, #0]
 800782c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007830:	2600      	movs	r6, #0
 8007832:	9604      	str	r6, [sp, #16]
 8007834:	9103      	str	r1, [sp, #12]
 8007836:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800783a:	9102      	str	r1, [sp, #8]
 800783c:	9201      	str	r2, [sp, #4]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	462b      	mov	r3, r5
 8007842:	4a2d      	ldr	r2, [pc, #180]	; (80078f8 <AT_ESP8266_ND+0xfc8>)
 8007844:	4621      	mov	r1, r4
 8007846:	f006 fd97 	bl	800e378 <FT_String_ND>
 800784a:	4603      	mov	r3, r0
 800784c:	2b01      	cmp	r3, #1
 800784e:	d104      	bne.n	800785a <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 8007850:	231e      	movs	r3, #30
 8007852:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007856:	f000 bc63 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 800785a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	220b      	movs	r2, #11
 8007866:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800786a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800786e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007878:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800787c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007886:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800788a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007898:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078a2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078a6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078b0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078b4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078b8:	6809      	ldr	r1, [r1, #0]
 80078ba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078be:	2600      	movs	r6, #0
 80078c0:	9604      	str	r6, [sp, #16]
 80078c2:	9103      	str	r1, [sp, #12]
 80078c4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078c8:	9102      	str	r1, [sp, #8]
 80078ca:	9201      	str	r2, [sp, #4]
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	462b      	mov	r3, r5
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <AT_ESP8266_ND+0xfcc>)
 80078d2:	4621      	mov	r1, r4
 80078d4:	f006 fd50 	bl	800e378 <FT_String_ND>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d110      	bne.n	8007900 <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 80078de:	231f      	movs	r3, #31
 80078e0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078e4:	f000 bc1c 	b.w	8008120 <AT_ESP8266_ND+0x17f0>
 80078e8:	080104dc 	.word	0x080104dc
 80078ec:	080104ec 	.word	0x080104ec
 80078f0:	08010550 	.word	0x08010550
 80078f4:	080104bc 	.word	0x080104bc
 80078f8:	080104f8 	.word	0x080104f8
 80078fc:	08010504 	.word	0x08010504
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007900:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007904:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2208      	movs	r2, #8
 800790c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800791e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007922:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800792c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800793a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800793e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007948:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800794c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007950:	6812      	ldr	r2, [r2, #0]
 8007952:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007956:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800795a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800795e:	6809      	ldr	r1, [r1, #0]
 8007960:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007964:	2600      	movs	r6, #0
 8007966:	9604      	str	r6, [sp, #16]
 8007968:	9103      	str	r1, [sp, #12]
 800796a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800796e:	9102      	str	r1, [sp, #8]
 8007970:	9201      	str	r2, [sp, #4]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	462b      	mov	r3, r5
 8007976:	4ac4      	ldr	r2, [pc, #784]	; (8007c88 <AT_ESP8266_ND+0x1358>)
 8007978:	4621      	mov	r1, r4
 800797a:	f006 fcfd 	bl	800e378 <FT_String_ND>
 800797e:	4603      	mov	r3, r0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d103      	bne.n	800798c <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 8007984:	2320      	movs	r3, #32
 8007986:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800798a:	e3c9      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 800798c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	220a      	movs	r2, #10
 8007998:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800799c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80079aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80079b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80079c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079d4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079d8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079e2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079e6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079ea:	6809      	ldr	r1, [r1, #0]
 80079ec:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079f0:	2600      	movs	r6, #0
 80079f2:	9604      	str	r6, [sp, #16]
 80079f4:	9103      	str	r1, [sp, #12]
 80079f6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079fa:	9102      	str	r1, [sp, #8]
 80079fc:	9201      	str	r2, [sp, #4]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	462b      	mov	r3, r5
 8007a02:	4aa2      	ldr	r2, [pc, #648]	; (8007c8c <AT_ESP8266_ND+0x135c>)
 8007a04:	4621      	mov	r1, r4
 8007a06:	f006 fcb7 	bl	800e378 <FT_String_ND>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d103      	bne.n	8007a18 <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007a10:	2321      	movs	r3, #33	; 0x21
 8007a12:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a16:	e383      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2205      	movs	r2, #5
 8007a24:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a60:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a64:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a6e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a72:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a76:	6809      	ldr	r1, [r1, #0]
 8007a78:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a7c:	2600      	movs	r6, #0
 8007a7e:	9604      	str	r6, [sp, #16]
 8007a80:	9103      	str	r1, [sp, #12]
 8007a82:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a86:	9102      	str	r1, [sp, #8]
 8007a88:	9201      	str	r2, [sp, #4]
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	4a80      	ldr	r2, [pc, #512]	; (8007c90 <AT_ESP8266_ND+0x1360>)
 8007a90:	4621      	mov	r1, r4
 8007a92:	f006 fc71 	bl	800e378 <FT_String_ND>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	f040 8341 	bne.w	8008120 <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007a9e:	2322      	movs	r3, #34	; 0x22
 8007aa0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007aa4:	e33c      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007aa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	220f      	movs	r2, #15
 8007ab2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007aee:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007af2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007af6:	6812      	ldr	r2, [r2, #0]
 8007af8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007afc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b00:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b04:	6809      	ldr	r1, [r1, #0]
 8007b06:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b0a:	2600      	movs	r6, #0
 8007b0c:	9604      	str	r6, [sp, #16]
 8007b0e:	9103      	str	r1, [sp, #12]
 8007b10:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b14:	9102      	str	r1, [sp, #8]
 8007b16:	9201      	str	r2, [sp, #4]
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	462b      	mov	r3, r5
 8007b1c:	4a5d      	ldr	r2, [pc, #372]	; (8007c94 <AT_ESP8266_ND+0x1364>)
 8007b1e:	4621      	mov	r1, r4
 8007b20:	f006 fc2a 	bl	800e378 <FT_String_ND>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d112      	bne.n	8007b50 <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 8007b2a:	230a      	movs	r3, #10
 8007b2c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007b30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007b4e:	e2e7      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007b50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2209      	movs	r2, #9
 8007b5c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007b60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b98:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b9c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ba6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007baa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bae:	6809      	ldr	r1, [r1, #0]
 8007bb0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	9604      	str	r6, [sp, #16]
 8007bb8:	9103      	str	r1, [sp, #12]
 8007bba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bbe:	9102      	str	r1, [sp, #8]
 8007bc0:	9201      	str	r2, [sp, #4]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	462b      	mov	r3, r5
 8007bc6:	4a34      	ldr	r2, [pc, #208]	; (8007c98 <AT_ESP8266_ND+0x1368>)
 8007bc8:	4621      	mov	r1, r4
 8007bca:	f006 fbd5 	bl	800e378 <FT_String_ND>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d112      	bne.n	8007bfa <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007bd4:	2319      	movs	r3, #25
 8007bd6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007bf8:	e292      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007bfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2208      	movs	r2, #8
 8007c06:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007c0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007c18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007c34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c42:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c46:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c50:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c54:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c58:	6809      	ldr	r1, [r1, #0]
 8007c5a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c5e:	2600      	movs	r6, #0
 8007c60:	9604      	str	r6, [sp, #16]
 8007c62:	9103      	str	r1, [sp, #12]
 8007c64:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c68:	9102      	str	r1, [sp, #8]
 8007c6a:	9201      	str	r2, [sp, #4]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	462b      	mov	r3, r5
 8007c70:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <AT_ESP8266_ND+0x136c>)
 8007c72:	4621      	mov	r1, r4
 8007c74:	f006 fb80 	bl	800e378 <FT_String_ND>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d110      	bne.n	8007ca0 <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 8007c7e:	2310      	movs	r3, #16
 8007c80:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c84:	e24c      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
 8007c86:	bf00      	nop
 8007c88:	08010564 	.word	0x08010564
 8007c8c:	08010510 	.word	0x08010510
 8007c90:	08010570 	.word	0x08010570
 8007c94:	08010578 	.word	0x08010578
 8007c98:	08010588 	.word	0x08010588
 8007c9c:	0801052c 	.word	0x0801052c
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f203 4594 	addw	r5, r3, #1172	; 0x494
 8007cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 8007cd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007cec:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007cf6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cfa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cfe:	6809      	ldr	r1, [r1, #0]
 8007d00:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d04:	2300      	movs	r3, #0
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	9103      	str	r1, [sp, #12]
 8007d0a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d0e:	9102      	str	r1, [sp, #8]
 8007d10:	9201      	str	r2, [sp, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	4633      	mov	r3, r6
 8007d18:	462a      	mov	r2, r5
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	f006 fb2c 	bl	800e378 <FT_String_ND>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d112      	bne.n	8007d4c <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 81f3 	beq.w	8008120 <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007d4a:	e1e9      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	220d      	movs	r2, #13
 8007d58:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007d6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007d78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007d86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d94:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d98:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007da2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007da6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007daa:	6809      	ldr	r1, [r1, #0]
 8007dac:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007db0:	2600      	movs	r6, #0
 8007db2:	9604      	str	r6, [sp, #16]
 8007db4:	9103      	str	r1, [sp, #12]
 8007db6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007dba:	9102      	str	r1, [sp, #8]
 8007dbc:	9201      	str	r2, [sp, #4]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	4aaf      	ldr	r2, [pc, #700]	; (8008080 <AT_ESP8266_ND+0x1750>)
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	f006 fad7 	bl	800e378 <FT_String_ND>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d112      	bne.n	8007df6 <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007dd0:	2312      	movs	r3, #18
 8007dd2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007dd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007df4:	e194      	b.n	8008120 <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007df6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	220d      	movs	r2, #13
 8007e02:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007e14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007e22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e3e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e42:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e4c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e50:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e54:	6809      	ldr	r1, [r1, #0]
 8007e56:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e5a:	2600      	movs	r6, #0
 8007e5c:	9604      	str	r6, [sp, #16]
 8007e5e:	9103      	str	r1, [sp, #12]
 8007e60:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e64:	9102      	str	r1, [sp, #8]
 8007e66:	9201      	str	r2, [sp, #4]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	4a85      	ldr	r2, [pc, #532]	; (8008084 <AT_ESP8266_ND+0x1754>)
 8007e6e:	4621      	mov	r1, r4
 8007e70:	f006 fa82 	bl	800e378 <FT_String_ND>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d112      	bne.n	8007ea0 <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 8007e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007e98:	230c      	movs	r3, #12
 8007e9a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007e9e:	e13f      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007ea0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ea4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	220e      	movs	r2, #14
 8007eac:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007eb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007ebe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ec2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ee8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007eec:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ef6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007efa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007efe:	6809      	ldr	r1, [r1, #0]
 8007f00:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f04:	2600      	movs	r6, #0
 8007f06:	9604      	str	r6, [sp, #16]
 8007f08:	9103      	str	r1, [sp, #12]
 8007f0a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f0e:	9102      	str	r1, [sp, #8]
 8007f10:	9201      	str	r2, [sp, #4]
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	462b      	mov	r3, r5
 8007f16:	4a5c      	ldr	r2, [pc, #368]	; (8008088 <AT_ESP8266_ND+0x1758>)
 8007f18:	4621      	mov	r1, r4
 8007f1a:	f006 fa2d 	bl	800e378 <FT_String_ND>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d112      	bne.n	8007f4a <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8007f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007f42:	230b      	movs	r3, #11
 8007f44:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f48:	e0ea      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	220a      	movs	r2, #10
 8007f56:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007f68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007f76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007f84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007fa0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007fa4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fa8:	6809      	ldr	r1, [r1, #0]
 8007faa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007fae:	2600      	movs	r6, #0
 8007fb0:	9604      	str	r6, [sp, #16]
 8007fb2:	9103      	str	r1, [sp, #12]
 8007fb4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007fb8:	9102      	str	r1, [sp, #8]
 8007fba:	9201      	str	r2, [sp, #4]
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	462b      	mov	r3, r5
 8007fc0:	4a32      	ldr	r2, [pc, #200]	; (800808c <AT_ESP8266_ND+0x175c>)
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	f006 f9d8 	bl	800e378 <FT_String_ND>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d112      	bne.n	8007ff4 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007fce:	2318      	movs	r3, #24
 8007fd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007fd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007ff2:	e095      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007ff4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ff8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2208      	movs	r2, #8
 8008000:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8008004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8008020:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008024:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800802e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008032:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800803c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008040:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800804a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800804e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008052:	6809      	ldr	r1, [r1, #0]
 8008054:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008058:	2600      	movs	r6, #0
 800805a:	9604      	str	r6, [sp, #16]
 800805c:	9103      	str	r1, [sp, #12]
 800805e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008062:	9102      	str	r1, [sp, #8]
 8008064:	9201      	str	r2, [sp, #4]
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	462b      	mov	r3, r5
 800806a:	4a09      	ldr	r2, [pc, #36]	; (8008090 <AT_ESP8266_ND+0x1760>)
 800806c:	4621      	mov	r1, r4
 800806e:	f006 f983 	bl	800e378 <FT_String_ND>
 8008072:	4603      	mov	r3, r0
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10d      	bne.n	8008094 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 8008078:	2303      	movs	r3, #3
 800807a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800807e:	e04f      	b.n	8008120 <AT_ESP8266_ND+0x17f0>
 8008080:	08010594 	.word	0x08010594
 8008084:	080105a4 	.word	0x080105a4
 8008088:	080105b4 	.word	0x080105b4
 800808c:	080105c4 	.word	0x080105c4
 8008090:	080105d0 	.word	0x080105d0
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8008094:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008098:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2209      	movs	r2, #9
 80080a0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 80080a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80080b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80080c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80080ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80080dc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80080e0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80080ea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80080ee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80080f2:	6809      	ldr	r1, [r1, #0]
 80080f4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80080f8:	2600      	movs	r6, #0
 80080fa:	9604      	str	r6, [sp, #16]
 80080fc:	9103      	str	r1, [sp, #12]
 80080fe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008102:	9102      	str	r1, [sp, #8]
 8008104:	9201      	str	r2, [sp, #4]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	462b      	mov	r3, r5
 800810a:	4a77      	ldr	r2, [pc, #476]	; (80082e8 <AT_ESP8266_ND+0x19b8>)
 800810c:	4621      	mov	r1, r4
 800810e:	f006 f933 	bl	800e378 <FT_String_ND>
 8008112:	4603      	mov	r3, r0
 8008114:	2b01      	cmp	r3, #1
 8008116:	d103      	bne.n	8008120 <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 8008118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800811c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8008120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008124:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800812e:	3b01      	subs	r3, #1
 8008130:	2b08      	cmp	r3, #8
 8008132:	f201 84c6 	bhi.w	8009ac2 <AT_ESP8266_ND+0x3192>
 8008136:	a201      	add	r2, pc, #4	; (adr r2, 800813c <AT_ESP8266_ND+0x180c>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	08008161 	.word	0x08008161
 8008140:	080082f1 	.word	0x080082f1
 8008144:	08008573 	.word	0x08008573
 8008148:	080086f1 	.word	0x080086f1
 800814c:	080088c9 	.word	0x080088c9
 8008150:	08008b9d 	.word	0x08008b9d
 8008154:	08008e55 	.word	0x08008e55
 8008158:	0800936d 	.word	0x0800936d
 800815c:	08009543 	.word	0x08009543
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008160:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008164:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008170:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008174:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800817e:	2b01      	cmp	r3, #1
 8008180:	d14f      	bne.n	8008222 <AT_ESP8266_ND+0x18f2>
 8008182:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008186:	2b01      	cmp	r3, #1
 8008188:	d04b      	beq.n	8008222 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 800818a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800818e:	2b02      	cmp	r3, #2
 8008190:	d047      	beq.n	8008222 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 8008192:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008196:	2b04      	cmp	r3, #4
 8008198:	d043      	beq.n	8008222 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 800819a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800819e:	2b13      	cmp	r3, #19
 80081a0:	d03f      	beq.n	8008222 <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 80081a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80081b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2201      	movs	r2, #1
 80081be:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 80081c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80081d0:	4620      	mov	r0, r4
 80081d2:	f7f8 f80f 	bl	80001f4 <strlen>
 80081d6:	4603      	mov	r3, r0
 80081d8:	4423      	add	r3, r4
 80081da:	4a44      	ldr	r2, [pc, #272]	; (80082ec <AT_ESP8266_ND+0x19bc>)
 80081dc:	461c      	mov	r4, r3
 80081de:	4613      	mov	r3, r2
 80081e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80081e2:	6020      	str	r0, [r4, #0]
 80081e4:	6061      	str	r1, [r4, #4]
 80081e6:	60a2      	str	r2, [r4, #8]
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80081ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7f7 fffa 	bl	80001f4 <strlen>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008208:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8008212:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008216:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2264      	movs	r2, #100	; 0x64
 800821e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8008222:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008226:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008236:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800824e:	2b00      	cmp	r3, #0
 8008250:	d11b      	bne.n	800828a <AT_ESP8266_ND+0x195a>
 8008252:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008256:	2b01      	cmp	r3, #1
 8008258:	d023      	beq.n	80082a2 <AT_ESP8266_ND+0x1972>
 800825a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800825e:	2b1c      	cmp	r3, #28
 8008260:	d01f      	beq.n	80082a2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 8008262:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008266:	2b02      	cmp	r3, #2
 8008268:	d01b      	beq.n	80082a2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 800826a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800826e:	2b04      	cmp	r3, #4
 8008270:	d017      	beq.n	80082a2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 8008272:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008276:	2b0b      	cmp	r3, #11
 8008278:	d013      	beq.n	80082a2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 800827a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800827e:	2b0c      	cmp	r3, #12
 8008280:	d00f      	beq.n	80082a2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 8008282:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008286:	2b13      	cmp	r3, #19
 8008288:	d00b      	beq.n	80082a2 <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 800828a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800828e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008298:	f241 3288 	movw	r2, #5000	; 0x1388
 800829c:	4293      	cmp	r3, r2
 800829e:	f341 841a 	ble.w	8009ad6 <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80082a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80082b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80082b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80082c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80082d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 80082e4:	f001 bbf7 	b.w	8009ad6 <AT_ESP8266_ND+0x31a6>
 80082e8:	080105dc 	.word	0x080105dc
 80082ec:	080105e8 	.word	0x080105e8
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80082f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800830e:	2b01      	cmp	r3, #1
 8008310:	f040 80c8 	bne.w	80084a4 <AT_ESP8266_ND+0x1b74>
 8008314:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008318:	2b01      	cmp	r3, #1
 800831a:	f000 80c3 	beq.w	80084a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 800831e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008322:	2b02      	cmp	r3, #2
 8008324:	f000 80be 	beq.w	80084a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 8008328:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800832c:	2b03      	cmp	r3, #3
 800832e:	f000 80b9 	beq.w	80084a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 8008332:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008336:	2b04      	cmp	r3, #4
 8008338:	f000 80b4 	beq.w	80084a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 800833c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008340:	2b0a      	cmp	r3, #10
 8008342:	f000 80af 	beq.w	80084a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 8008346:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800834a:	2b0b      	cmp	r3, #11
 800834c:	f000 80aa 	beq.w	80084a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 8008350:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008354:	2b0c      	cmp	r3, #12
 8008356:	f000 80a5 	beq.w	80084a4 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 800835a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800835e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2200      	movs	r2, #0
 8008366:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800836a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800836e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2201      	movs	r2, #1
 8008376:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 800837a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800837e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008388:	4620      	mov	r0, r4
 800838a:	f7f7 ff33 	bl	80001f4 <strlen>
 800838e:	4603      	mov	r3, r0
 8008390:	4423      	add	r3, r4
 8008392:	49d5      	ldr	r1, [pc, #852]	; (80086e8 <AT_ESP8266_ND+0x1db8>)
 8008394:	461a      	mov	r2, r3
 8008396:	460b      	mov	r3, r1
 8008398:	cb03      	ldmia	r3!, {r0, r1}
 800839a:	6010      	str	r0, [r2, #0]
 800839c:	6051      	str	r1, [r2, #4]
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80083a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80083b0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80083b4:	2201      	movs	r2, #1
 80083b6:	4618      	mov	r0, r3
 80083b8:	f006 fc08 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80083bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80083ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	1d9d      	adds	r5, r3, #6
 80083d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3306      	adds	r3, #6
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7f7 ff06 	bl	80001f4 <strlen>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	4629      	mov	r1, r5
 80083ee:	4620      	mov	r0, r4
 80083f0:	f006 fbec 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80083f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008402:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008406:	4618      	mov	r0, r3
 8008408:	f7f7 fef4 	bl	80001f4 <strlen>
 800840c:	4602      	mov	r2, r0
 800840e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008412:	4619      	mov	r1, r3
 8008414:	4620      	mov	r0, r4
 8008416:	f006 fbd9 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800841a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800842c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008436:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800843a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3326      	adds	r3, #38	; 0x26
 8008442:	4618      	mov	r0, r3
 8008444:	f7f7 fed6 	bl	80001f4 <strlen>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	4629      	mov	r1, r5
 800844e:	4620      	mov	r0, r4
 8008450:	f006 fbbc 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008454:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008458:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008462:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008466:	2203      	movs	r2, #3
 8008468:	4618      	mov	r0, r3
 800846a:	f006 fbaf 	bl	800ebcc <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800846e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008472:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800847c:	4618      	mov	r0, r3
 800847e:	f7f7 feb9 	bl	80001f4 <strlen>
 8008482:	4603      	mov	r3, r0
 8008484:	461a      	mov	r2, r3
 8008486:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800848a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008494:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008498:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	22c8      	movs	r2, #200	; 0xc8
 80084a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80084a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80084c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d11b      	bne.n	800850c <AT_ESP8266_ND+0x1bdc>
 80084d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d023      	beq.n	8008524 <AT_ESP8266_ND+0x1bf4>
 80084dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d01f      	beq.n	8008524 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 80084e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d01b      	beq.n	8008524 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 80084ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d017      	beq.n	8008524 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 80084f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084f8:	2b0a      	cmp	r3, #10
 80084fa:	d013      	beq.n	8008524 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 80084fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008500:	2b0b      	cmp	r3, #11
 8008502:	d00f      	beq.n	8008524 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 8008504:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008508:	2b0c      	cmp	r3, #12
 800850a:	d00b      	beq.n	8008524 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 800850c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008510:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800851a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800851e:	4293      	cmp	r3, r2
 8008520:	f341 82db 	ble.w	8009ada <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008536:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800853a:	2b0a      	cmp	r3, #10
 800853c:	d00f      	beq.n	800855e <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 800853e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008542:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2200      	movs	r2, #0
 800854a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 800854e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008552:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 800855e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008562:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2200      	movs	r2, #0
 800856a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 800856e:	f001 bab4 	b.w	8009ada <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008572:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008576:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008586:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008590:	2b01      	cmp	r3, #1
 8008592:	d14d      	bne.n	8008630 <AT_ESP8266_ND+0x1d00>
 8008594:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008598:	2b04      	cmp	r3, #4
 800859a:	d049      	beq.n	8008630 <AT_ESP8266_ND+0x1d00>
 800859c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085a0:	2b0a      	cmp	r3, #10
 80085a2:	d045      	beq.n	8008630 <AT_ESP8266_ND+0x1d00>
 80085a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085a8:	2b0d      	cmp	r3, #13
 80085aa:	d041      	beq.n	8008630 <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 80085ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80085bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 80085cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80085da:	4620      	mov	r0, r4
 80085dc:	f7f7 fe0a 	bl	80001f4 <strlen>
 80085e0:	4603      	mov	r3, r0
 80085e2:	4423      	add	r3, r4
 80085e4:	4941      	ldr	r1, [pc, #260]	; (80086ec <AT_ESP8266_ND+0x1dbc>)
 80085e6:	461a      	mov	r2, r3
 80085e8:	460b      	mov	r3, r1
 80085ea:	cb03      	ldmia	r3!, {r0, r1}
 80085ec:	6010      	str	r0, [r2, #0]
 80085ee:	6051      	str	r1, [r2, #4]
 80085f0:	8819      	ldrh	r1, [r3, #0]
 80085f2:	789b      	ldrb	r3, [r3, #2]
 80085f4:	8111      	strh	r1, [r2, #8]
 80085f6:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80085f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008606:	4618      	mov	r0, r3
 8008608:	f7f7 fdf4 	bl	80001f4 <strlen>
 800860c:	4603      	mov	r3, r0
 800860e:	461a      	mov	r2, r3
 8008610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 800861e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800862c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008634:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008644:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800864e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008652:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800865c:	2b00      	cmp	r3, #0
 800865e:	d113      	bne.n	8008688 <AT_ESP8266_ND+0x1d58>
 8008660:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008664:	2b0a      	cmp	r3, #10
 8008666:	d01b      	beq.n	80086a0 <AT_ESP8266_ND+0x1d70>
 8008668:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800866c:	2b0b      	cmp	r3, #11
 800866e:	d017      	beq.n	80086a0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 8008670:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008674:	2b0c      	cmp	r3, #12
 8008676:	d013      	beq.n	80086a0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 8008678:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800867c:	2b04      	cmp	r3, #4
 800867e:	d00f      	beq.n	80086a0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 8008680:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008684:	2b0d      	cmp	r3, #13
 8008686:	d00b      	beq.n	80086a0 <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800868c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008696:	f241 3288 	movw	r2, #5000	; 0x1388
 800869a:	4293      	cmp	r3, r2
 800869c:	f341 821f 	ble.w	8009ade <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80086a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80086ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80086b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2200      	movs	r2, #0
 80086be:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80086c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80086d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2200      	movs	r2, #0
 80086de:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80086e2:	f001 b9fc 	b.w	8009ade <AT_ESP8266_ND+0x31ae>
 80086e6:	bf00      	nop
 80086e8:	080105f8 	.word	0x080105f8
 80086ec:	08010604 	.word	0x08010604
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80086f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008700:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008704:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800870e:	2b01      	cmp	r3, #1
 8008710:	d16b      	bne.n	80087ea <AT_ESP8266_ND+0x1eba>
 8008712:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008716:	2b04      	cmp	r3, #4
 8008718:	d067      	beq.n	80087ea <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 800871a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800871e:	2b01      	cmp	r3, #1
 8008720:	d063      	beq.n	80087ea <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 8008722:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008726:	2b02      	cmp	r3, #2
 8008728:	d05f      	beq.n	80087ea <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 800872a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800872e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2200      	movs	r2, #0
 8008736:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800873a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800873e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2201      	movs	r2, #1
 8008746:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 800874a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800874e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008758:	2b01      	cmp	r3, #1
 800875a:	d115      	bne.n	8008788 <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 800875c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800876a:	4620      	mov	r0, r4
 800876c:	f7f7 fd42 	bl	80001f4 <strlen>
 8008770:	4603      	mov	r3, r0
 8008772:	4423      	add	r3, r4
 8008774:	4a52      	ldr	r2, [pc, #328]	; (80088c0 <AT_ESP8266_ND+0x1f90>)
 8008776:	461c      	mov	r4, r3
 8008778:	4613      	mov	r3, r2
 800877a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800877c:	6020      	str	r0, [r4, #0]
 800877e:	6061      	str	r1, [r4, #4]
 8008780:	60a2      	str	r2, [r4, #8]
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	81a3      	strh	r3, [r4, #12]
 8008786:	e014      	b.n	80087b2 <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008796:	4620      	mov	r0, r4
 8008798:	f7f7 fd2c 	bl	80001f4 <strlen>
 800879c:	4603      	mov	r3, r0
 800879e:	4423      	add	r3, r4
 80087a0:	4a48      	ldr	r2, [pc, #288]	; (80088c4 <AT_ESP8266_ND+0x1f94>)
 80087a2:	461c      	mov	r4, r3
 80087a4:	4613      	mov	r3, r2
 80087a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087a8:	6020      	str	r0, [r4, #0]
 80087aa:	6061      	str	r1, [r4, #4]
 80087ac:	60a2      	str	r2, [r4, #8]
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 80087b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7f7 fd17 	bl	80001f4 <strlen>
 80087c6:	4603      	mov	r3, r0
 80087c8:	461a      	mov	r2, r3
 80087ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 80087d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80087e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80087ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800880c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008816:	2b00      	cmp	r3, #0
 8008818:	d123      	bne.n	8008862 <AT_ESP8266_ND+0x1f32>
 800881a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800881e:	2b01      	cmp	r3, #1
 8008820:	d02b      	beq.n	800887a <AT_ESP8266_ND+0x1f4a>
 8008822:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008826:	2b0b      	cmp	r3, #11
 8008828:	d027      	beq.n	800887a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 800882a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800882e:	2b0c      	cmp	r3, #12
 8008830:	d023      	beq.n	800887a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 8008832:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008836:	2b04      	cmp	r3, #4
 8008838:	d01f      	beq.n	800887a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 800883a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800883e:	2b02      	cmp	r3, #2
 8008840:	d01b      	beq.n	800887a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 8008842:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008846:	2b07      	cmp	r3, #7
 8008848:	d017      	beq.n	800887a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 800884a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800884e:	2b08      	cmp	r3, #8
 8008850:	d013      	beq.n	800887a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 8008852:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008856:	2b1e      	cmp	r3, #30
 8008858:	d00f      	beq.n	800887a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 800885a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800885e:	2b1f      	cmp	r3, #31
 8008860:	d00b      	beq.n	800887a <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008870:	f241 3288 	movw	r2, #5000	; 0x1388
 8008874:	4293      	cmp	r3, r2
 8008876:	f341 8134 	ble.w	8009ae2 <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800887a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800887e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800888c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008890:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800889c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80088ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80088bc:	f001 b911 	b.w	8009ae2 <AT_ESP8266_ND+0x31b2>
 80088c0:	08010610 	.word	0x08010610
 80088c4:	08010620 	.word	0x08010620
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80088c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 80088d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	f040 80f3 	bne.w	8008ad2 <AT_ESP8266_ND+0x21a2>
 80088ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	f000 80ee 	beq.w	8008ad2 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 80088f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	f000 80e9 	beq.w	8008ad2 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 8008900:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008904:	2b02      	cmp	r3, #2
 8008906:	f000 80e4 	beq.w	8008ad2 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 800890a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800890e:	2b21      	cmp	r3, #33	; 0x21
 8008910:	f000 80df 	beq.w	8008ad2 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 8008914:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008918:	2b1b      	cmp	r3, #27
 800891a:	f000 80da 	beq.w	8008ad2 <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 800891e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008922:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2200      	movs	r2, #0
 800892a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800892e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008932:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2201      	movs	r2, #1
 800893a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 800893e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800894c:	4620      	mov	r0, r4
 800894e:	f7f7 fc51 	bl	80001f4 <strlen>
 8008952:	4603      	mov	r3, r0
 8008954:	4423      	add	r3, r4
 8008956:	4990      	ldr	r1, [pc, #576]	; (8008b98 <AT_ESP8266_ND+0x2268>)
 8008958:	461a      	mov	r2, r3
 800895a:	460b      	mov	r3, r1
 800895c:	cb03      	ldmia	r3!, {r0, r1}
 800895e:	6010      	str	r0, [r2, #0]
 8008960:	6051      	str	r1, [r2, #4]
 8008962:	8819      	ldrh	r1, [r3, #0]
 8008964:	789b      	ldrb	r3, [r3, #2]
 8008966:	8111      	strh	r1, [r2, #8]
 8008968:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 800896a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800896e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008978:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800897c:	2201      	movs	r2, #1
 800897e:	4618      	mov	r0, r3
 8008980:	f006 f924 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008984:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008988:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008992:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008996:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 80089a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	334c      	adds	r3, #76	; 0x4c
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7f7 fc21 	bl	80001f4 <strlen>
 80089b2:	4603      	mov	r3, r0
 80089b4:	461a      	mov	r2, r3
 80089b6:	4629      	mov	r1, r5
 80089b8:	4620      	mov	r0, r4
 80089ba:	f006 f907 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,separador,3);
 80089be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80089cc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80089d0:	2203      	movs	r2, #3
 80089d2:	4618      	mov	r0, r3
 80089d4:	f006 f8fa 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 80089d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80089e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f103 0562 	add.w	r5, r3, #98	; 0x62
 80089f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3362      	adds	r3, #98	; 0x62
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7f7 fbf7 	bl	80001f4 <strlen>
 8008a06:	4603      	mov	r3, r0
 8008a08:	461a      	mov	r2, r3
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f006 f8dd 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,separador,3);
 8008a12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a20:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008a24:	2203      	movs	r2, #3
 8008a26:	4618      	mov	r0, r3
 8008a28:	f006 f8d0 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008a2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008a48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3372      	adds	r3, #114	; 0x72
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7f7 fbcd 	bl	80001f4 <strlen>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4629      	mov	r1, r5
 8008a60:	4620      	mov	r0, r4
 8008a62:	f006 f8b3 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a74:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008a78:	2201      	movs	r2, #1
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f006 f8a6 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a8e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008a92:	2202      	movs	r2, #2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f006 f899 	bl	800ebcc <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f7 fba3 	bl	80001f4 <strlen>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008ac0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008ae0:	1c5a      	adds	r2, r3, #1
 8008ae2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d11b      	bne.n	8008b3a <AT_ESP8266_ND+0x220a>
 8008b02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d023      	beq.n	8008b52 <AT_ESP8266_ND+0x2222>
 8008b0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b0e:	2b0b      	cmp	r3, #11
 8008b10:	d01f      	beq.n	8008b52 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 8008b12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b16:	2b0c      	cmp	r3, #12
 8008b18:	d01b      	beq.n	8008b52 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 8008b1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d017      	beq.n	8008b52 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 8008b22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d013      	beq.n	8008b52 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 8008b2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b2e:	2b21      	cmp	r3, #33	; 0x21
 8008b30:	d00f      	beq.n	8008b52 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 8008b32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b36:	2b1b      	cmp	r3, #27
 8008b38:	d00b      	beq.n	8008b52 <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008b3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	f340 87ca 	ble.w	8009ae6 <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008b94:	f000 bfa7 	b.w	8009ae6 <AT_ESP8266_ND+0x31b6>
 8008b98:	08010510 	.word	0x08010510
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008bac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	f040 80e2 	bne.w	8008d84 <AT_ESP8266_ND+0x2454>
 8008bc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bc4:	2b0b      	cmp	r3, #11
 8008bc6:	f000 80dd 	beq.w	8008d84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 8008bca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bce:	2b0c      	cmp	r3, #12
 8008bd0:	f000 80d8 	beq.w	8008d84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008bd4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bd8:	2b0e      	cmp	r3, #14
 8008bda:	f000 80d3 	beq.w	8008d84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 8008bde:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008be2:	2b0f      	cmp	r3, #15
 8008be4:	f000 80ce 	beq.w	8008d84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 8008be8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bec:	2b10      	cmp	r3, #16
 8008bee:	f000 80c9 	beq.w	8008d84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 8008bf2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	f000 80c4 	beq.w	8008d84 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 8008bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7f7 fae2 	bl	80001f4 <strlen>
 8008c30:	4603      	mov	r3, r0
 8008c32:	4423      	add	r3, r4
 8008c34:	4aa1      	ldr	r2, [pc, #644]	; (8008ebc <AT_ESP8266_ND+0x258c>)
 8008c36:	461c      	mov	r4, r3
 8008c38:	4613      	mov	r3, r2
 8008c3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c3c:	6020      	str	r0, [r4, #0]
 8008c3e:	6061      	str	r1, [r4, #4]
 8008c40:	60a2      	str	r2, [r4, #8]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c54:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008c58:	2201      	movs	r2, #1
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f005 ffb6 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008c60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7f7 fac0 	bl	80001f4 <strlen>
 8008c74:	4603      	mov	r3, r0
 8008c76:	4423      	add	r3, r4
 8008c78:	4a91      	ldr	r2, [pc, #580]	; (8008ec0 <AT_ESP8266_ND+0x2590>)
 8008c7a:	6810      	ldr	r0, [r2, #0]
 8008c7c:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008c7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c8c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008c90:	2203      	movs	r2, #3
 8008c92:	4618      	mov	r0, r3
 8008c94:	f005 ff9a 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008c98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ca6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008caa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008cb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3336      	adds	r3, #54	; 0x36
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7f7 fa97 	bl	80001f4 <strlen>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4629      	mov	r1, r5
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f005 ff7d 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008cd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ce0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f005 ff70 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008cec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008cfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3346      	adds	r3, #70	; 0x46
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7f7 fa6d 	bl	80001f4 <strlen>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	4629      	mov	r1, r5
 8008d20:	4620      	mov	r0, r4
 8008d22:	f005 ff53 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d34:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7f7 fa5b 	bl	80001f4 <strlen>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d44:	4619      	mov	r1, r3
 8008d46:	4620      	mov	r0, r4
 8008d48:	f005 ff40 	bl	800ebcc <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f7 fa4a 	bl	80001f4 <strlen>
 8008d60:	4603      	mov	r3, r0
 8008d62:	461a      	mov	r2, r3
 8008d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008d72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008da2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d120      	bne.n	8008df6 <AT_ESP8266_ND+0x24c6>
 8008db4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008db8:	2b0a      	cmp	r3, #10
 8008dba:	d028      	beq.n	8008e0e <AT_ESP8266_ND+0x24de>
 8008dbc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dc0:	2b0b      	cmp	r3, #11
 8008dc2:	d024      	beq.n	8008e0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 8008dc4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dc8:	2b0c      	cmp	r3, #12
 8008dca:	d020      	beq.n	8008e0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008dcc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dd0:	2b0e      	cmp	r3, #14
 8008dd2:	d01c      	beq.n	8008e0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8008dd4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dd8:	2b0f      	cmp	r3, #15
 8008dda:	d018      	beq.n	8008e0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 8008ddc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008de0:	2b10      	cmp	r3, #16
 8008de2:	d014      	beq.n	8008e0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8008de4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d010      	beq.n	8008e0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 8008dec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008df4:	d00b      	beq.n	8008e0e <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008df6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	f340 866e 	ble.w	8009aea <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008e0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008e20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008e40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008e50:	f000 be4b 	b.w	8009aea <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008e54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e58:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	2200      	movs	r2, #0
 8008e62:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008e64:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e68:	2b10      	cmp	r3, #16
 8008e6a:	d003      	beq.n	8008e74 <AT_ESP8266_ND+0x2544>
 8008e6c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e70:	2b0a      	cmp	r3, #10
 8008e72:	d127      	bne.n	8008ec4 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 8008e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008e86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008ea6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008eb6:	f000 be1a 	b.w	8009aee <AT_ESP8266_ND+0x31be>
 8008eba:	bf00      	nop
 8008ebc:	08010630 	.word	0x08010630
 8008ec0:	08010640 	.word	0x08010640
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008ec4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	f040 80d1 	bne.w	800907a <AT_ESP8266_ND+0x274a>
 8008ed8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f040 80c7 	bne.w	800907a <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 8008eec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008efc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2218      	movs	r2, #24
 8008f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008f0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f7f7 f943 	bl	80001f4 <strlen>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4423      	add	r3, r4
 8008f72:	4abe      	ldr	r2, [pc, #760]	; (800926c <AT_ESP8266_ND+0x293c>)
 8008f74:	461c      	mov	r4, r3
 8008f76:	4613      	mov	r3, r2
 8008f78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f7a:	6020      	str	r0, [r4, #0]
 8008f7c:	6061      	str	r1, [r4, #4]
 8008f7e:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008f8e:	f107 0214 	add.w	r2, r7, #20
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f005 fd21 	bl	800e9dc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008f9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008fa8:	f107 0314 	add.w	r3, r7, #20
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7f7 f921 	bl	80001f4 <strlen>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	f107 0314 	add.w	r3, r7, #20
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f005 fe06 	bl	800ebcc <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008fc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008fdc:	4619      	mov	r1, r3
 8008fde:	4610      	mov	r0, r2
 8008fe0:	f005 fdec 	bl	800ebbc <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ff2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f005 fde7 	bl	800ebcc <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008ffe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009002:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800900c:	4618      	mov	r0, r3
 800900e:	f7f7 f8f1 	bl	80001f4 <strlen>
 8009012:	4603      	mov	r3, r0
 8009014:	461a      	mov	r2, r3
 8009016:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800901a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009028:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009032:	4620      	mov	r0, r4
 8009034:	f7f7 f8de 	bl	80001f4 <strlen>
 8009038:	4603      	mov	r3, r0
 800903a:	4423      	add	r3, r4
 800903c:	4a8c      	ldr	r2, [pc, #560]	; (8009270 <AT_ESP8266_ND+0x2940>)
 800903e:	461c      	mov	r4, r3
 8009040:	4613      	mov	r3, r2
 8009042:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009044:	6020      	str	r0, [r4, #0]
 8009046:	6061      	str	r1, [r4, #4]
 8009048:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 800904a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8009068:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 800907a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800908e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8009098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800909c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f040 80a6 	bne.w	80091f8 <AT_ESP8266_ND+0x28c8>
 80090ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090b0:	2b13      	cmp	r3, #19
 80090b2:	f000 80a1 	beq.w	80091f8 <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 80090b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80090c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7f7 f883 	bl	80001e0 <strcmp>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01b      	beq.n	8009118 <AT_ESP8266_ND+0x27e8>
 80090e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d017      	beq.n	8009118 <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 80090e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090ec:	2b14      	cmp	r3, #20
 80090ee:	d013      	beq.n	8009118 <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80090f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80090fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009102:	4293      	cmp	r3, r2
 8009104:	dd78      	ble.n	80091f8 <AT_ESP8266_ND+0x28c8>
 8009106:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800910a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009114:	2b01      	cmp	r3, #1
 8009116:	d16f      	bne.n	80091f8 <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009118:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800911c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009126:	f241 3288 	movw	r2, #5000	; 0x1388
 800912a:	4293      	cmp	r3, r2
 800912c:	dd0e      	ble.n	800914c <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800912e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009132:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009142:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 800914c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009150:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800916a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800916e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2201      	movs	r2, #1
 8009194:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80091a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80091b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80091c2:	2361      	movs	r3, #97	; 0x61
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	2301      	movs	r3, #1
 80091c8:	f005 fc3c 	bl	800ea44 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80091cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80091da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80091e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 80091f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009206:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800920a:	f040 8470 	bne.w	8009aee <AT_ESP8266_ND+0x31be>
 800920e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009212:	2b13      	cmp	r3, #19
 8009214:	d02e      	beq.n	8009274 <AT_ESP8266_ND+0x2944>
 8009216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800921a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009224:	f241 3288 	movw	r2, #5000	; 0x1388
 8009228:	4293      	cmp	r3, r2
 800922a:	dc23      	bgt.n	8009274 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 800922c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009230:	2b0a      	cmp	r3, #10
 8009232:	d01f      	beq.n	8009274 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 8009234:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009238:	2b0b      	cmp	r3, #11
 800923a:	d01b      	beq.n	8009274 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 800923c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009240:	2b0c      	cmp	r3, #12
 8009242:	d017      	beq.n	8009274 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 8009244:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009248:	2b10      	cmp	r3, #16
 800924a:	d013      	beq.n	8009274 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 800924c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009250:	2b11      	cmp	r3, #17
 8009252:	d00f      	beq.n	8009274 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 8009254:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009258:	2b12      	cmp	r3, #18
 800925a:	d00b      	beq.n	8009274 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 800925c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009264:	f040 8443 	bne.w	8009aee <AT_ESP8266_ND+0x31be>
 8009268:	e004      	b.n	8009274 <AT_ESP8266_ND+0x2944>
 800926a:	bf00      	nop
 800926c:	08010644 	.word	0x08010644
 8009270:	08010650 	.word	0x08010650
									a->_debug_count5++;
 8009274:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009278:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80092a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a4:	4293      	cmp	r3, r2
 80092a6:	dd25      	ble.n	80092f4 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 80092a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80092c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80092e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80092f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009302:	2b02      	cmp	r3, #2
 8009304:	dd10      	ble.n	8009328 <AT_ESP8266_ND+0x29f8>
 8009306:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800930a:	2b10      	cmp	r3, #16
 800930c:	d00c      	beq.n	8009328 <AT_ESP8266_ND+0x29f8>
 800930e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009312:	2b0a      	cmp	r3, #10
 8009314:	d008      	beq.n	8009328 <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8009316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800931a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	220f      	movs	r2, #15
 8009322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009326:	e008      	b.n	800933a <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800932c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 800933a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800933e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2200      	movs	r2, #0
 8009346:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 800934a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800934e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2200      	movs	r2, #0
 8009356:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 800935a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800935e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2200      	movs	r2, #0
 8009366:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 800936a:	e3c0      	b.n	8009aee <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800936c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 800937c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009380:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800938a:	2b01      	cmp	r3, #1
 800938c:	d16f      	bne.n	800946e <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 800938e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009392:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2200      	movs	r2, #0
 800939a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800939e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80093ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80093bc:	4620      	mov	r0, r4
 80093be:	f7f6 ff19 	bl	80001f4 <strlen>
 80093c2:	4603      	mov	r3, r0
 80093c4:	4423      	add	r3, r4
 80093c6:	4a78      	ldr	r2, [pc, #480]	; (80095a8 <AT_ESP8266_ND+0x2c78>)
 80093c8:	461c      	mov	r4, r3
 80093ca:	4615      	mov	r5, r2
 80093cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093ce:	6020      	str	r0, [r4, #0]
 80093d0:	6061      	str	r1, [r4, #4]
 80093d2:	60a2      	str	r2, [r4, #8]
 80093d4:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80093d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80093e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80093f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	335c      	adds	r3, #92	; 0x5c
 80093fe:	4618      	mov	r0, r3
 8009400:	f7f6 fef8 	bl	80001f4 <strlen>
 8009404:	4603      	mov	r3, r0
 8009406:	461a      	mov	r2, r3
 8009408:	4629      	mov	r1, r5
 800940a:	4620      	mov	r0, r4
 800940c:	f005 fbde 	bl	800ebcc <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009414:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800941e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009422:	4618      	mov	r0, r3
 8009424:	f7f6 fee6 	bl	80001f4 <strlen>
 8009428:	4602      	mov	r2, r0
 800942a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800942e:	4619      	mov	r1, r3
 8009430:	4620      	mov	r0, r4
 8009432:	f005 fbcb 	bl	800ebcc <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009436:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800943a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009444:	4618      	mov	r0, r3
 8009446:	f7f6 fed5 	bl	80001f4 <strlen>
 800944a:	4603      	mov	r3, r0
 800944c:	461a      	mov	r2, r3
 800944e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009452:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 800945c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f44f 7248 	mov.w	r2, #800	; 0x320
 800946a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800946e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009472:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800948c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009490:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800949a:	2b00      	cmp	r3, #0
 800949c:	d123      	bne.n	80094e6 <AT_ESP8266_ND+0x2bb6>
 800949e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094a2:	2b0a      	cmp	r3, #10
 80094a4:	d02b      	beq.n	80094fe <AT_ESP8266_ND+0x2bce>
 80094a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094aa:	2b0b      	cmp	r3, #11
 80094ac:	d027      	beq.n	80094fe <AT_ESP8266_ND+0x2bce>
 80094ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094b2:	2b0c      	cmp	r3, #12
 80094b4:	d023      	beq.n	80094fe <AT_ESP8266_ND+0x2bce>
 80094b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094ba:	2b0e      	cmp	r3, #14
 80094bc:	d01f      	beq.n	80094fe <AT_ESP8266_ND+0x2bce>
 80094be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094c2:	2b0f      	cmp	r3, #15
 80094c4:	d01b      	beq.n	80094fe <AT_ESP8266_ND+0x2bce>
 80094c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094ca:	2b10      	cmp	r3, #16
 80094cc:	d017      	beq.n	80094fe <AT_ESP8266_ND+0x2bce>
 80094ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094d2:	2b15      	cmp	r3, #21
 80094d4:	d013      	beq.n	80094fe <AT_ESP8266_ND+0x2bce>
 80094d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094da:	2b16      	cmp	r3, #22
 80094dc:	d00f      	beq.n	80094fe <AT_ESP8266_ND+0x2bce>
 80094de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094e2:	2b17      	cmp	r3, #23
 80094e4:	d00b      	beq.n	80094fe <AT_ESP8266_ND+0x2bce>
 80094e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80094f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f8:	4293      	cmp	r3, r2
 80094fa:	f340 82fa 	ble.w	8009af2 <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80094fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009502:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800950c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009520:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009524:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009534:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8009540:	e2d7      	b.n	8009af2 <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009542:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009546:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	2200      	movs	r2, #0
 8009550:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8009552:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009556:	2b10      	cmp	r3, #16
 8009558:	d003      	beq.n	8009562 <AT_ESP8266_ND+0x2c32>
 800955a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800955e:	2b0a      	cmp	r3, #10
 8009560:	d124      	bne.n	80095ac <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 8009562:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009566:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009574:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009578:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009584:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009588:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2200      	movs	r2, #0
 8009590:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009598:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80095a4:	e2a7      	b.n	8009af6 <AT_ESP8266_ND+0x31c6>
 80095a6:	bf00      	nop
 80095a8:	0801065c 	.word	0x0801065c
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80095ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	f040 8102 	bne.w	80097c4 <AT_ESP8266_ND+0x2e94>
 80095c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f040 80f8 	bne.w	80097c4 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 80095d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2201      	movs	r2, #1
 80095e0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 80095e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2218      	movs	r2, #24
 80095f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80095f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009604:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009608:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009618:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8009622:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009626:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2200      	movs	r2, #0
 800962e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009632:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009636:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009646:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009650:	4620      	mov	r0, r4
 8009652:	f7f6 fdcf 	bl	80001f4 <strlen>
 8009656:	4603      	mov	r3, r0
 8009658:	4423      	add	r3, r4
 800965a:	4a83      	ldr	r2, [pc, #524]	; (8009868 <AT_ESP8266_ND+0x2f38>)
 800965c:	461c      	mov	r4, r3
 800965e:	4613      	mov	r3, r2
 8009660:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009662:	6020      	str	r0, [r4, #0]
 8009664:	6061      	str	r1, [r4, #4]
 8009666:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009668:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800966c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8009676:	f107 020c 	add.w	r2, r7, #12
 800967a:	4611      	mov	r1, r2
 800967c:	4618      	mov	r0, r3
 800967e:	f005 f9ad 	bl	800e9dc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009682:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009686:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	4618      	mov	r0, r3
 8009696:	f7f6 fdad 	bl	80001f4 <strlen>
 800969a:	4602      	mov	r2, r0
 800969c:	f107 030c 	add.w	r3, r7, #12
 80096a0:	4619      	mov	r1, r3
 80096a2:	4620      	mov	r0, r4
 80096a4:	f005 fa92 	bl	800ebcc <strncat>
										strncat(a->_uart2snd,",",1);
 80096a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096b6:	4620      	mov	r0, r4
 80096b8:	f7f6 fd9c 	bl	80001f4 <strlen>
 80096bc:	4603      	mov	r3, r0
 80096be:	4423      	add	r3, r4
 80096c0:	496a      	ldr	r1, [pc, #424]	; (800986c <AT_ESP8266_ND+0x2f3c>)
 80096c2:	461a      	mov	r2, r3
 80096c4:	460b      	mov	r3, r1
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80096ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 80096d8:	f107 020c 	add.w	r2, r7, #12
 80096dc:	4611      	mov	r1, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f005 f97c 	bl	800e9dc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80096e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096f2:	f107 030c 	add.w	r3, r7, #12
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7f6 fd7c 	bl	80001f4 <strlen>
 80096fc:	4602      	mov	r2, r0
 80096fe:	f107 030c 	add.w	r3, r7, #12
 8009702:	4619      	mov	r1, r3
 8009704:	4620      	mov	r0, r4
 8009706:	f005 fa61 	bl	800ebcc <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800970a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800971c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009726:	4619      	mov	r1, r3
 8009728:	4610      	mov	r0, r2
 800972a:	f005 fa47 	bl	800ebbc <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800972e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009732:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800973c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009740:	2202      	movs	r2, #2
 8009742:	4618      	mov	r0, r3
 8009744:	f005 fa42 	bl	800ebcc <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009748:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800974c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009756:	4618      	mov	r0, r3
 8009758:	f7f6 fd4c 	bl	80001f4 <strlen>
 800975c:	4603      	mov	r3, r0
 800975e:	461a      	mov	r2, r3
 8009760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009764:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 800976e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009772:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 800977c:	4620      	mov	r0, r4
 800977e:	f7f6 fd39 	bl	80001f4 <strlen>
 8009782:	4603      	mov	r3, r0
 8009784:	4423      	add	r3, r4
 8009786:	4a3a      	ldr	r2, [pc, #232]	; (8009870 <AT_ESP8266_ND+0x2f40>)
 8009788:	461c      	mov	r4, r3
 800978a:	4613      	mov	r3, r2
 800978c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800978e:	6020      	str	r0, [r4, #0]
 8009790:	6061      	str	r1, [r4, #4]
 8009792:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009794:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009798:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 80097b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f44f 7261 	mov.w	r2, #900	; 0x384
 80097c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80097c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80097e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f040 80b8 	bne.w	8009966 <AT_ESP8266_ND+0x3036>
 80097f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097fa:	2b13      	cmp	r3, #19
 80097fc:	f000 80b3 	beq.w	8009966 <AT_ESP8266_ND+0x3036>
 8009800:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009804:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f203 6294 	addw	r2, r3, #1684	; 0x694
 800980e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7f6 fcde 	bl	80001e0 <strcmp>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d024      	beq.n	8009874 <AT_ESP8266_ND+0x2f44>
 800982a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800982e:	2b01      	cmp	r3, #1
 8009830:	d020      	beq.n	8009874 <AT_ESP8266_ND+0x2f44>
 8009832:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009836:	2b14      	cmp	r3, #20
 8009838:	d01c      	beq.n	8009874 <AT_ESP8266_ND+0x2f44>
 800983a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800983e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009848:	f241 3288 	movw	r2, #5000	; 0x1388
 800984c:	4293      	cmp	r3, r2
 800984e:	f340 808a 	ble.w	8009966 <AT_ESP8266_ND+0x3036>
 8009852:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009856:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009860:	2b01      	cmp	r3, #1
 8009862:	f040 8080 	bne.w	8009966 <AT_ESP8266_ND+0x3036>
 8009866:	e005      	b.n	8009874 <AT_ESP8266_ND+0x2f44>
 8009868:	08010644 	.word	0x08010644
 800986c:	0801066c 	.word	0x0801066c
 8009870:	08010650 	.word	0x08010650
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009874:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009878:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009882:	f241 3288 	movw	r2, #5000	; 0x1388
 8009886:	4293      	cmp	r3, r2
 8009888:	dd17      	ble.n	80098ba <AT_ESP8266_ND+0x2f8a>
 800988a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800988e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009898:	2b01      	cmp	r3, #1
 800989a:	d10e      	bne.n	80098ba <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800989c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80098aa:	1c5a      	adds	r2, r3, #1
 80098ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80098ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 80098d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80098f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2201      	movs	r2, #1
 8009902:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009906:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800990a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009914:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009918:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009930:	2361      	movs	r3, #97	; 0x61
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	2301      	movs	r3, #1
 8009936:	f005 f885 	bl	800ea44 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800993a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800993e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800994c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009956:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800995a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2200      	movs	r2, #0
 8009962:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009966:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800996a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009974:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009978:	f040 80bd 	bne.w	8009af6 <AT_ESP8266_ND+0x31c6>
 800997c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009980:	2b13      	cmp	r3, #19
 8009982:	d02b      	beq.n	80099dc <AT_ESP8266_ND+0x30ac>
 8009984:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009988:	2b0b      	cmp	r3, #11
 800998a:	d027      	beq.n	80099dc <AT_ESP8266_ND+0x30ac>
 800998c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009990:	2b0c      	cmp	r3, #12
 8009992:	d023      	beq.n	80099dc <AT_ESP8266_ND+0x30ac>
 8009994:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80099a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a6:	4293      	cmp	r3, r2
 80099a8:	dc18      	bgt.n	80099dc <AT_ESP8266_ND+0x30ac>
 80099aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099ae:	2b0a      	cmp	r3, #10
 80099b0:	d014      	beq.n	80099dc <AT_ESP8266_ND+0x30ac>
 80099b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099b6:	2b10      	cmp	r3, #16
 80099b8:	d010      	beq.n	80099dc <AT_ESP8266_ND+0x30ac>
 80099ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099be:	2b11      	cmp	r3, #17
 80099c0:	d00c      	beq.n	80099dc <AT_ESP8266_ND+0x30ac>
 80099c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099c6:	2b12      	cmp	r3, #18
 80099c8:	d008      	beq.n	80099dc <AT_ESP8266_ND+0x30ac>
 80099ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099ce:	2b16      	cmp	r3, #22
 80099d0:	d004      	beq.n	80099dc <AT_ESP8266_ND+0x30ac>
 80099d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099d6:	2b19      	cmp	r3, #25
 80099d8:	f040 808d 	bne.w	8009af6 <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 80099dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80099fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	dd25      	ble.n	8009a5c <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 8009a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009a2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009a4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	dd07      	ble.n	8009a7e <AT_ESP8266_ND+0x314e>
 8009a6e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a72:	2b10      	cmp	r3, #16
 8009a74:	d003      	beq.n	8009a7e <AT_ESP8266_ND+0x314e>
 8009a76:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a7a:	2b0a      	cmp	r3, #10
 8009a7c:	d108      	bne.n	8009a90 <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009a7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009aa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009ab0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ab4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009ac0:	e019      	b.n	8009af6 <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009ac2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ac6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009ad4:	e010      	b.n	8009af8 <AT_ESP8266_ND+0x31c8>
			break;
 8009ad6:	bf00      	nop
 8009ad8:	e00e      	b.n	8009af8 <AT_ESP8266_ND+0x31c8>
			break;
 8009ada:	bf00      	nop
 8009adc:	e00c      	b.n	8009af8 <AT_ESP8266_ND+0x31c8>
			break;
 8009ade:	bf00      	nop
 8009ae0:	e00a      	b.n	8009af8 <AT_ESP8266_ND+0x31c8>
			break;
 8009ae2:	bf00      	nop
 8009ae4:	e008      	b.n	8009af8 <AT_ESP8266_ND+0x31c8>
			break;
 8009ae6:	bf00      	nop
 8009ae8:	e006      	b.n	8009af8 <AT_ESP8266_ND+0x31c8>
			break;
 8009aea:	bf00      	nop
 8009aec:	e004      	b.n	8009af8 <AT_ESP8266_ND+0x31c8>
			break;
 8009aee:	bf00      	nop
 8009af0:	e002      	b.n	8009af8 <AT_ESP8266_ND+0x31c8>
			break;
 8009af2:	bf00      	nop
 8009af4:	e000      	b.n	8009af8 <AT_ESP8266_ND+0x31c8>
			break;
 8009af6:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009af8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009afc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009b08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009b26:	4618      	mov	r0, r3
 8009b28:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b30 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b42:	f240 328d 	movw	r2, #909	; 0x38d
 8009b46:	4293      	cmp	r3, r2
 8009b48:	f001 83c3 	beq.w	800b2d2 <WiFi_Conn_ND+0x17a2>
 8009b4c:	f240 328d 	movw	r2, #909	; 0x38d
 8009b50:	4293      	cmp	r3, r2
 8009b52:	f301 8453 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009b56:	f240 3289 	movw	r2, #905	; 0x389
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	f001 8335 	beq.w	800b1ca <WiFi_Conn_ND+0x169a>
 8009b60:	f240 3289 	movw	r2, #905	; 0x389
 8009b64:	4293      	cmp	r3, r2
 8009b66:	f301 8449 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009b6a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009b6e:	f001 8224 	beq.w	800afba <WiFi_Conn_ND+0x148a>
 8009b72:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009b76:	f301 8441 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009b7a:	f240 3229 	movw	r2, #809	; 0x329
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	f301 843c 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009b84:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009b88:	f280 80a5 	bge.w	8009cd6 <WiFi_Conn_ND+0x1a6>
 8009b8c:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009b90:	4293      	cmp	r3, r2
 8009b92:	f000 8776 	beq.w	800aa82 <WiFi_Conn_ND+0xf52>
 8009b96:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	f301 842e 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009ba0:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	f000 86fc 	beq.w	800a9a2 <WiFi_Conn_ND+0xe72>
 8009baa:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	f301 8424 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009bb4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009bb8:	f000 862b 	beq.w	800a812 <WiFi_Conn_ND+0xce2>
 8009bbc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009bc0:	f301 841c 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009bc4:	f240 2261 	movw	r2, #609	; 0x261
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	f000 85b1 	beq.w	800a730 <WiFi_Conn_ND+0xc00>
 8009bce:	f240 2261 	movw	r2, #609	; 0x261
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	f301 8412 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009bd8:	f240 225d 	movw	r2, #605	; 0x25d
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	f000 8551 	beq.w	800a684 <WiFi_Conn_ND+0xb54>
 8009be2:	f240 225d 	movw	r2, #605	; 0x25d
 8009be6:	4293      	cmp	r3, r2
 8009be8:	f301 8408 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009bec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009bf0:	f000 84cf 	beq.w	800a592 <WiFi_Conn_ND+0xa62>
 8009bf4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009bf8:	f301 8400 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009bfc:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009c00:	4293      	cmp	r3, r2
 8009c02:	f000 846a 	beq.w	800a4da <WiFi_Conn_ND+0x9aa>
 8009c06:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009c0a:	f281 83f7 	bge.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009c0e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009c12:	4293      	cmp	r3, r2
 8009c14:	f000 8425 	beq.w	800a462 <WiFi_Conn_ND+0x932>
 8009c18:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009c1c:	f281 83ee 	bge.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009c20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009c24:	f000 83b0 	beq.w	800a388 <WiFi_Conn_ND+0x858>
 8009c28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009c2c:	f301 83e6 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009c30:	f240 1299 	movw	r2, #409	; 0x199
 8009c34:	4293      	cmp	r3, r2
 8009c36:	f000 8369 	beq.w	800a30c <WiFi_Conn_ND+0x7dc>
 8009c3a:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009c3e:	f281 83dd 	bge.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009c42:	f240 1295 	movw	r2, #405	; 0x195
 8009c46:	4293      	cmp	r3, r2
 8009c48:	f000 8329 	beq.w	800a29e <WiFi_Conn_ND+0x76e>
 8009c4c:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009c50:	f281 83d4 	bge.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009c54:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009c58:	f000 82a0 	beq.w	800a19c <WiFi_Conn_ND+0x66c>
 8009c5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009c60:	f301 83cc 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009c64:	f240 1235 	movw	r2, #309	; 0x135
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	f000 8271 	beq.w	800a150 <WiFi_Conn_ND+0x620>
 8009c6e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009c72:	f281 83c3 	bge.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009c76:	f240 1231 	movw	r2, #305	; 0x131
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	f000 8263 	beq.w	800a146 <WiFi_Conn_ND+0x616>
 8009c80:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009c84:	f281 83ba 	bge.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009c88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009c8c:	f000 8207 	beq.w	800a09e <WiFi_Conn_ND+0x56e>
 8009c90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009c94:	f301 83b2 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009c98:	2bd1      	cmp	r3, #209	; 0xd1
 8009c9a:	f000 81a0 	beq.w	8009fde <WiFi_Conn_ND+0x4ae>
 8009c9e:	2bd1      	cmp	r3, #209	; 0xd1
 8009ca0:	f301 83ac 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009ca4:	2bcd      	cmp	r3, #205	; 0xcd
 8009ca6:	f000 8170 	beq.w	8009f8a <WiFi_Conn_ND+0x45a>
 8009caa:	2bcd      	cmp	r3, #205	; 0xcd
 8009cac:	f301 83a6 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009cb0:	2bc8      	cmp	r3, #200	; 0xc8
 8009cb2:	f000 80f1 	beq.w	8009e98 <WiFi_Conn_ND+0x368>
 8009cb6:	2bc8      	cmp	r3, #200	; 0xc8
 8009cb8:	f301 83a0 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009cbc:	2b6d      	cmp	r3, #109	; 0x6d
 8009cbe:	f000 80b3 	beq.w	8009e28 <WiFi_Conn_ND+0x2f8>
 8009cc2:	2b6d      	cmp	r3, #109	; 0x6d
 8009cc4:	f301 839a 	bgt.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009cc8:	2b64      	cmp	r3, #100	; 0x64
 8009cca:	d021      	beq.n	8009d10 <WiFi_Conn_ND+0x1e0>
 8009ccc:	2b69      	cmp	r3, #105	; 0x69
 8009cce:	f000 8096 	beq.w	8009dfe <WiFi_Conn_ND+0x2ce>
 8009cd2:	f001 bb93 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009cd6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009cda:	2b09      	cmp	r3, #9
 8009cdc:	f201 838e 	bhi.w	800b3fc <WiFi_Conn_ND+0x18cc>
 8009ce0:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <WiFi_Conn_ND+0x1b8>)
 8009ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce6:	bf00      	nop
 8009ce8:	0800ab8f 	.word	0x0800ab8f
 8009cec:	0800b3fd 	.word	0x0800b3fd
 8009cf0:	0800b3fd 	.word	0x0800b3fd
 8009cf4:	0800b3fd 	.word	0x0800b3fd
 8009cf8:	0800b3fd 	.word	0x0800b3fd
 8009cfc:	0800ac5d 	.word	0x0800ac5d
 8009d00:	0800acfd 	.word	0x0800acfd
 8009d04:	0800ad9d 	.word	0x0800ad9d
 8009d08:	0800ae3d 	.word	0x0800ae3d
 8009d0c:	0800aedd 	.word	0x0800aedd
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d16:	2b64      	cmp	r3, #100	; 0x64
 8009d18:	d046      	beq.n	8009da8 <WiFi_Conn_ND+0x278>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d041      	beq.n	8009da8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d2a:	2b1c      	cmp	r3, #28
 8009d2c:	d03c      	beq.n	8009da8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d037      	beq.n	8009da8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d032      	beq.n	8009da8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d48:	2b13      	cmp	r3, #19
 8009d4a:	d02d      	beq.n	8009da8 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7fc fc5f 	bl	8006610 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d14e      	bne.n	8009dfa <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7fc fde7 	bl	8006930 <AT_ESP8266_ND>
 8009d62:	4602      	mov	r2, r0
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d109      	bne.n	8009d90 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f7f7 fbc6 	bl	800151c <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	2364      	movs	r3, #100	; 0x64
 8009da0:	68b8      	ldr	r0, [r7, #8]
 8009da2:	f7fb fbb9 	bl	8005518 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009da6:	e028      	b.n	8009dfa <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d004      	beq.n	8009dbc <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009db8:	2b1c      	cmp	r3, #28
 8009dba:	d103      	bne.n	8009dc4 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	226d      	movs	r2, #109	; 0x6d
 8009dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d00f      	beq.n	8009dee <WiFi_Conn_ND+0x2be>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d00a      	beq.n	8009dee <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dde:	2b0b      	cmp	r3, #11
 8009de0:	d005      	beq.n	8009dee <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de8:	2b0c      	cmp	r3, #12
 8009dea:	f041 82d8 	bne.w	800b39e <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2269      	movs	r2, #105	; 0x69
 8009df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009df6:	f001 bad2 	b.w	800b39e <WiFi_Conn_ND+0x186e>
 8009dfa:	f001 bad0 	b.w	800b39e <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7fc fc06 	bl	8006610 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2264      	movs	r2, #100	; 0x64
 8009e08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009e24:	f001 baea 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00c      	beq.n	8009e4c <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f7fc fc18 	bl	8006668 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009e4a:	e00e      	b.n	8009e6a <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7fc fbf5 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	22c8      	movs	r2, #200	; 0xc8
 8009e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	f041 8296 	bne.w	800b3a2 <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7fc fbca 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2264      	movs	r2, #100	; 0x64
 8009e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009e94:	f001 ba85 	b.w	800b3a2 <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e9e:	2bc8      	cmp	r3, #200	; 0xc8
 8009ea0:	d04f      	beq.n	8009f42 <WiFi_Conn_ND+0x412>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d04a      	beq.n	8009f42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d045      	beq.n	8009f42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d040      	beq.n	8009f42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec6:	2b04      	cmp	r3, #4
 8009ec8:	d03b      	beq.n	8009f42 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed0:	2b0a      	cmp	r3, #10
 8009ed2:	d036      	beq.n	8009f42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eda:	2b0b      	cmp	r3, #11
 8009edc:	d031      	beq.n	8009f42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee4:	2b0c      	cmp	r3, #12
 8009ee6:	d02c      	beq.n	8009f42 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f7fc fba7 	bl	800663c <ConectarWIFI>
						if(b->_enviaruart==1)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d124      	bne.n	8009f42 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f7fc fd19 	bl	8006930 <AT_ESP8266_ND>
 8009efe:	4602      	mov	r2, r0
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d109      	bne.n	8009f2c <WiFi_Conn_ND+0x3fc>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009f24:	4619      	mov	r1, r3
 8009f26:	4610      	mov	r0, r2
 8009f28:	f7f7 faf8 	bl	800151c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	2364      	movs	r3, #100	; 0x64
 8009f3c:	68b8      	ldr	r0, [r7, #8]
 8009f3e:	f7fb faeb 	bl	8005518 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d004      	beq.n	8009f56 <WiFi_Conn_ND+0x426>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f52:	2b0c      	cmp	r3, #12
 8009f54:	d103      	bne.n	8009f5e <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	22d1      	movs	r2, #209	; 0xd1
 8009f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d00a      	beq.n	8009f7e <WiFi_Conn_ND+0x44e>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d005      	beq.n	8009f7e <WiFi_Conn_ND+0x44e>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f78:	2b20      	cmp	r3, #32
 8009f7a:	f041 8214 	bne.w	800b3a6 <WiFi_Conn_ND+0x1876>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	22cd      	movs	r2, #205	; 0xcd
 8009f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009f86:	f001 ba0e 	b.w	800b3a6 <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009f8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8009f8e:	f7f8 fe0f 	bl	8002bb0 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7fc fb52 	bl	800663c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	22c8      	movs	r2, #200	; 0xc8
 8009f9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	f041 81f7 	bne.w	800b3aa <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f7fc fb27 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2264      	movs	r2, #100	; 0x64
 8009fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009fda:	f001 b9e6 	b.w	800b3aa <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d108      	bne.n	800a002 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f240 3229 	movw	r2, #809	; 0x329
 8009ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a008:	2b0a      	cmp	r3, #10
 800a00a:	d004      	beq.n	800a016 <WiFi_Conn_ND+0x4e6>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a012:	2b0d      	cmp	r3, #13
 800a014:	d10a      	bne.n	800a02c <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7fc fb10 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	22c8      	movs	r2, #200	; 0xc8
 800a020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a032:	2b04      	cmp	r3, #4
 800a034:	d10e      	bne.n	800a054 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7fc faea 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2264      	movs	r2, #100	; 0x64
 800a040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d011      	beq.n	800a082 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7fc fb5a 	bl	8006718 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a06a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a07e:	f001 b9bd 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7fc faf0 	bl	8006668 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a08e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a09a:	f001 b9af 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a0a8:	d03b      	beq.n	800a122 <WiFi_Conn_ND+0x5f2>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b0:	2b04      	cmp	r3, #4
 800a0b2:	d036      	beq.n	800a122 <WiFi_Conn_ND+0x5f2>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ba:	2b0a      	cmp	r3, #10
 800a0bc:	d031      	beq.n	800a122 <WiFi_Conn_ND+0x5f2>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c4:	2b0d      	cmp	r3, #13
 800a0c6:	d02c      	beq.n	800a122 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f7fc faf9 	bl	80066c0 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d124      	bne.n	800a122 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7fc fc29 	bl	8006930 <AT_ESP8266_ND>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d109      	bne.n	800a10c <WiFi_Conn_ND+0x5dc>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a104:	4619      	mov	r1, r3
 800a106:	4610      	mov	r0, r2
 800a108:	f7f7 fa08 	bl	800151c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a118:	b29a      	uxth	r2, r3
 800a11a:	2364      	movs	r3, #100	; 0x64
 800a11c:	68b8      	ldr	r0, [r7, #8]
 800a11e:	f7fb f9fb 	bl	8005518 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a128:	2b0a      	cmp	r3, #10
 800a12a:	d005      	beq.n	800a138 <WiFi_Conn_ND+0x608>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a132:	2b0d      	cmp	r3, #13
 800a134:	f041 813b 	bne.w	800b3ae <WiFi_Conn_ND+0x187e>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f240 1235 	movw	r2, #309	; 0x135
 800a13e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a142:	f001 b934 	b.w	800b3ae <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7fc fa4c 	bl	80065e4 <NOP>
			}
			break;
 800a14c:	f001 b956 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7fc fa6f 	bl	800663c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	22c8      	movs	r2, #200	; 0xc8
 800a162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a174:	2b04      	cmp	r3, #4
 800a176:	f041 811c 	bne.w	800b3b2 <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f7fc fa48 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2264      	movs	r2, #100	; 0x64
 800a184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a198:	f001 b90b 	b.w	800b3b2 <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a1a6:	d04f      	beq.n	800a248 <WiFi_Conn_ND+0x718>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d04a      	beq.n	800a248 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d045      	beq.n	800a248 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d040      	beq.n	800a248 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1cc:	2b07      	cmp	r3, #7
 800a1ce:	d03b      	beq.n	800a248 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d6:	2b08      	cmp	r3, #8
 800a1d8:	d036      	beq.n	800a248 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e0:	2b1e      	cmp	r3, #30
 800a1e2:	d031      	beq.n	800a248 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ea:	2b1f      	cmp	r3, #31
 800a1ec:	d02c      	beq.n	800a248 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7fc fa3a 	bl	8006668 <MUX>
						if(b->_enviaruart==1)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d124      	bne.n	800a248 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7fc fb96 	bl	8006930 <AT_ESP8266_ND>
 800a204:	4602      	mov	r2, r0
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d109      	bne.n	800a232 <WiFi_Conn_ND+0x702>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a22a:	4619      	mov	r1, r3
 800a22c:	4610      	mov	r0, r2
 800a22e:	f7f7 f975 	bl	800151c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a23e:	b29a      	uxth	r2, r3
 800a240:	2364      	movs	r3, #100	; 0x64
 800a242:	68b8      	ldr	r0, [r7, #8]
 800a244:	f7fb f968 	bl	8005518 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d009      	beq.n	800a266 <WiFi_Conn_ND+0x736>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a258:	2b07      	cmp	r3, #7
 800a25a:	d004      	beq.n	800a266 <WiFi_Conn_ND+0x736>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a262:	2b08      	cmp	r3, #8
 800a264:	d104      	bne.n	800a270 <WiFi_Conn_ND+0x740>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f240 1299 	movw	r2, #409	; 0x199
 800a26c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a276:	2b02      	cmp	r3, #2
 800a278:	d00a      	beq.n	800a290 <WiFi_Conn_ND+0x760>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a280:	2b1e      	cmp	r3, #30
 800a282:	d005      	beq.n	800a290 <WiFi_Conn_ND+0x760>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28a:	2b1f      	cmp	r3, #31
 800a28c:	f041 8093 	bne.w	800b3b6 <WiFi_Conn_ND+0x1886>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f240 1295 	movw	r2, #405	; 0x195
 800a296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a29a:	f001 b88c 	b.w	800b3b6 <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f7fc f9a0 	bl	80065e4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d112      	bne.n	800a2d4 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f7fc f9ae 	bl	8006610 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2264      	movs	r2, #100	; 0x64
 800a2b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2da:	2b0a      	cmp	r3, #10
 800a2dc:	d005      	beq.n	800a2ea <WiFi_Conn_ND+0x7ba>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e4:	2b0d      	cmp	r3, #13
 800a2e6:	f041 8068 	bne.w	800b3ba <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7fc f9a6 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	22c8      	movs	r2, #200	; 0xc8
 800a2f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a308:	f001 b857 	b.w	800b3ba <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7fc f969 	bl	80065e4 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a320:	2b04      	cmp	r3, #4
 800a322:	d10e      	bne.n	800a342 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7fc f973 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2264      	movs	r2, #100	; 0x64
 800a32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a348:	2b0a      	cmp	r3, #10
 800a34a:	d004      	beq.n	800a356 <WiFi_Conn_ND+0x826>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a352:	2b0d      	cmp	r3, #13
 800a354:	d10a      	bne.n	800a36c <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f7fc f970 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	22c8      	movs	r2, #200	; 0xc8
 800a360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f7fc f991 	bl	8006694 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a384:	f001 b83a 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a392:	d045      	beq.n	800a420 <WiFi_Conn_ND+0x8f0>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39a:	2b04      	cmp	r3, #4
 800a39c:	d040      	beq.n	800a420 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d03b      	beq.n	800a420 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d036      	beq.n	800a420 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b8:	2b1b      	cmp	r3, #27
 800a3ba:	d031      	beq.n	800a420 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c2:	2b21      	cmp	r3, #33	; 0x21
 800a3c4:	d02c      	beq.n	800a420 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7fc f964 	bl	8006694 <IPDef>
						if(b->_enviaruart==1)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d124      	bne.n	800a420 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7fc faaa 	bl	8006930 <AT_ESP8266_ND>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d109      	bne.n	800a40a <WiFi_Conn_ND+0x8da>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7f7 f889 	bl	800151c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a416:	b29a      	uxth	r2, r3
 800a418:	2364      	movs	r3, #100	; 0x64
 800a41a:	68b8      	ldr	r0, [r7, #8]
 800a41c:	f7fb f87c 	bl	8005518 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a426:	2b01      	cmp	r3, #1
 800a428:	d004      	beq.n	800a434 <WiFi_Conn_ND+0x904>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a430:	2b1b      	cmp	r3, #27
 800a432:	d104      	bne.n	800a43e <WiFi_Conn_ND+0x90e>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a43a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a444:	2b02      	cmp	r3, #2
 800a446:	d005      	beq.n	800a454 <WiFi_Conn_ND+0x924>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44e:	2b21      	cmp	r3, #33	; 0x21
 800a450:	f040 87b5 	bne.w	800b3be <WiFi_Conn_ND+0x188e>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a45a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a45e:	f000 bfae 	b.w	800b3be <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7fc f8be 	bl	80065e4 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d004      	beq.n	800a47c <WiFi_Conn_ND+0x94c>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d112      	bne.n	800a4a2 <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f7fc f8c7 	bl	8006610 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2264      	movs	r2, #100	; 0x64
 800a486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a8:	2b0a      	cmp	r3, #10
 800a4aa:	d005      	beq.n	800a4b8 <WiFi_Conn_ND+0x988>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b2:	2b0d      	cmp	r3, #13
 800a4b4:	f040 8785 	bne.w	800b3c2 <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7fc f8bf 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	22c8      	movs	r2, #200	; 0xc8
 800a4c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a4d6:	f000 bf74 	b.w	800b3c2 <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7fc f882 	bl	80065e4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e6:	2b04      	cmp	r3, #4
 800a4e8:	d112      	bne.n	800a510 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7fc f890 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2264      	movs	r2, #100	; 0x64
 800a4f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a516:	2b0a      	cmp	r3, #10
 800a518:	d004      	beq.n	800a524 <WiFi_Conn_ND+0x9f4>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a520:	2b0d      	cmp	r3, #13
 800a522:	d10e      	bne.n	800a542 <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7fc f889 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	22c8      	movs	r2, #200	; 0xc8
 800a52e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d111      	bne.n	800a570 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f7fc f8cd 	bl	80066ec <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a56c:	f000 bf46 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f7fc f863 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	22c8      	movs	r2, #200	; 0xc8
 800a57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a58e:	f000 bf35 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a598:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a59c:	d04a      	beq.n	800a634 <WiFi_Conn_ND+0xb04>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d045      	beq.n	800a634 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d040      	beq.n	800a634 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b8:	2b0a      	cmp	r3, #10
 800a5ba:	d03b      	beq.n	800a634 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c2:	2b0e      	cmp	r3, #14
 800a5c4:	d036      	beq.n	800a634 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5cc:	2b0f      	cmp	r3, #15
 800a5ce:	d031      	beq.n	800a634 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d6:	2b10      	cmp	r3, #16
 800a5d8:	d02c      	beq.n	800a634 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7fc f886 	bl	80066ec <ConectarTCP>
						if(b->_enviaruart==1)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d124      	bne.n	800a634 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7fc f9a0 	bl	8006930 <AT_ESP8266_ND>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a606:	2b01      	cmp	r3, #1
 800a608:	d109      	bne.n	800a61e <WiFi_Conn_ND+0xaee>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f7f6 ff7f 	bl	800151c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	2364      	movs	r3, #100	; 0x64
 800a62e:	68b8      	ldr	r0, [r7, #8]
 800a630:	f7fa ff72 	bl	8005518 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d009      	beq.n	800a652 <WiFi_Conn_ND+0xb22>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a644:	2b0e      	cmp	r3, #14
 800a646:	d004      	beq.n	800a652 <WiFi_Conn_ND+0xb22>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64e:	2b0f      	cmp	r3, #15
 800a650:	d106      	bne.n	800a660 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f240 2261 	movw	r2, #609	; 0x261
 800a658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a65c:	f000 beb3 	b.w	800b3c6 <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a666:	2b02      	cmp	r3, #2
 800a668:	d005      	beq.n	800a676 <WiFi_Conn_ND+0xb46>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a670:	2b10      	cmp	r3, #16
 800a672:	f040 86a8 	bne.w	800b3c6 <WiFi_Conn_ND+0x1896>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f240 225d 	movw	r2, #605	; 0x25d
 800a67c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a680:	f000 bea1 	b.w	800b3c6 <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7fb ffad 	bl	80065e4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a690:	2b04      	cmp	r3, #4
 800a692:	d112      	bne.n	800a6ba <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f7fb ffbb 	bl	8006610 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2264      	movs	r2, #100	; 0x64
 800a69e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c0:	2b0a      	cmp	r3, #10
 800a6c2:	d004      	beq.n	800a6ce <WiFi_Conn_ND+0xb9e>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ca:	2b0d      	cmp	r3, #13
 800a6cc:	d10e      	bne.n	800a6ec <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7fb ffb4 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	22c8      	movs	r2, #200	; 0xc8
 800a6d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d00a      	beq.n	800a70c <WiFi_Conn_ND+0xbdc>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	2b10      	cmp	r3, #16
 800a6fe:	d005      	beq.n	800a70c <WiFi_Conn_ND+0xbdc>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a706:	2b0e      	cmp	r3, #14
 800a708:	f040 865f 	bne.w	800b3ca <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f7fb ffed 	bl	80066ec <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a72c:	f000 be4d 	b.w	800b3ca <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f7fb ff57 	bl	80065e4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	d112      	bne.n	800a766 <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7fb ff65 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2264      	movs	r2, #100	; 0x64
 800a74a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76c:	2b0a      	cmp	r3, #10
 800a76e:	d004      	beq.n	800a77a <WiFi_Conn_ND+0xc4a>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a776:	2b0d      	cmp	r3, #13
 800a778:	d10e      	bne.n	800a798 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7fb ff5e 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	22c8      	movs	r2, #200	; 0xc8
 800a784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d004      	beq.n	800a7ac <WiFi_Conn_ND+0xc7c>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a8:	2b10      	cmp	r3, #16
 800a7aa:	d10f      	bne.n	800a7cc <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7fb ff9d 	bl	80066ec <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a7b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d2:	2b0e      	cmp	r3, #14
 800a7d4:	d005      	beq.n	800a7e2 <WiFi_Conn_ND+0xcb2>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7dc:	2b0f      	cmp	r3, #15
 800a7de:	f040 85f6 	bne.w	800b3ce <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	f240 85f0 	bls.w	800b3ce <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7fb ffbe 	bl	8006770 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a7fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a80e:	f000 bdde 	b.w	800b3ce <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a818:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a81c:	d054      	beq.n	800a8c8 <WiFi_Conn_ND+0xd98>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a824:	2b02      	cmp	r3, #2
 800a826:	d04f      	beq.n	800a8c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82e:	2b0a      	cmp	r3, #10
 800a830:	d04a      	beq.n	800a8c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a838:	2b10      	cmp	r3, #16
 800a83a:	d045      	beq.n	800a8c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a842:	2b11      	cmp	r3, #17
 800a844:	d040      	beq.n	800a8c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a84c:	2b14      	cmp	r3, #20
 800a84e:	d03b      	beq.n	800a8c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a856:	2b12      	cmp	r3, #18
 800a858:	d036      	beq.n	800a8c8 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a860:	2b02      	cmp	r3, #2
 800a862:	d907      	bls.n	800a874 <WiFi_Conn_ND+0xd44>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f7fb ff7e 	bl	8006770 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d124      	bne.n	800a8c8 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f7fc f856 	bl	8006930 <AT_ESP8266_ND>
 800a884:	4602      	mov	r2, r0
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d109      	bne.n	800a8b2 <WiFi_Conn_ND+0xd82>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	f7f6 fe35 	bl	800151c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	2364      	movs	r3, #100	; 0x64
 800a8c2:	68b8      	ldr	r0, [r7, #8]
 800a8c4:	f7fa fe28 	bl	8005518 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ce:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a8d2:	d13b      	bne.n	800a94c <WiFi_Conn_ND+0xe1c>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d136      	bne.n	800a94c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d031      	beq.n	800a94c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ee:	2b0a      	cmp	r3, #10
 800a8f0:	d02c      	beq.n	800a94c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f8:	2b10      	cmp	r3, #16
 800a8fa:	d027      	beq.n	800a94c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a902:	2b11      	cmp	r3, #17
 800a904:	d022      	beq.n	800a94c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90c:	2b12      	cmp	r3, #18
 800a90e:	d01d      	beq.n	800a94c <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d109      	bne.n	800a936 <WiFi_Conn_ND+0xe06>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f7f6 fdf3 	bl	800151c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a942:	b29a      	uxth	r2, r3
 800a944:	2364      	movs	r3, #100	; 0x64
 800a946:	68b8      	ldr	r0, [r7, #8]
 800a948:	f7fa fde6 	bl	8005518 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a952:	2b13      	cmp	r3, #19
 800a954:	d104      	bne.n	800a960 <WiFi_Conn_ND+0xe30>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a95c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a966:	2b02      	cmp	r3, #2
 800a968:	d014      	beq.n	800a994 <WiFi_Conn_ND+0xe64>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a970:	2b0a      	cmp	r3, #10
 800a972:	d00f      	beq.n	800a994 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97a:	2b10      	cmp	r3, #16
 800a97c:	d00a      	beq.n	800a994 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a984:	2b11      	cmp	r3, #17
 800a986:	d005      	beq.n	800a994 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98e:	2b12      	cmp	r3, #18
 800a990:	f040 851f 	bne.w	800b3d2 <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a99e:	f000 bd18 	b.w	800b3d2 <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7fb fe1e 	bl	80065e4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	d112      	bne.n	800a9d8 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7fb fe2c 	bl	8006610 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2264      	movs	r2, #100	; 0x64
 800a9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9de:	2b0a      	cmp	r3, #10
 800a9e0:	d004      	beq.n	800a9ec <WiFi_Conn_ND+0xebc>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e8:	2b0d      	cmp	r3, #13
 800a9ea:	d10e      	bne.n	800aa0a <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f7fb fe25 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	22c8      	movs	r2, #200	; 0xc8
 800a9f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa10:	2b0c      	cmp	r3, #12
 800aa12:	d10f      	bne.n	800aa34 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f7fb fe69 	bl	80066ec <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d00f      	beq.n	800aa5e <WiFi_Conn_ND+0xf2e>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa44:	2b10      	cmp	r3, #16
 800aa46:	d00a      	beq.n	800aa5e <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa4e:	2b11      	cmp	r3, #17
 800aa50:	d005      	beq.n	800aa5e <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa58:	2b12      	cmp	r3, #18
 800aa5a:	f040 84bc 	bne.w	800b3d6 <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7fb fe44 	bl	80066ec <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800aa7e:	f000 bcaa 	b.w	800b3d6 <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7fb fdae 	bl	80065e4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d112      	bne.n	800aab8 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7fb fdbc 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2264      	movs	r2, #100	; 0x64
 800aa9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabe:	2b0a      	cmp	r3, #10
 800aac0:	d004      	beq.n	800aacc <WiFi_Conn_ND+0xf9c>
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac8:	2b0d      	cmp	r3, #13
 800aaca:	d10e      	bne.n	800aaea <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f7fb fdb5 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	22c8      	movs	r2, #200	; 0xc8
 800aad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d00e      	beq.n	800ab12 <WiFi_Conn_ND+0xfe2>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafa:	2b0b      	cmp	r3, #11
 800aafc:	d009      	beq.n	800ab12 <WiFi_Conn_ND+0xfe2>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab04:	2b0c      	cmp	r3, #12
 800ab06:	d004      	beq.n	800ab12 <WiFi_Conn_ND+0xfe2>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0e:	2b10      	cmp	r3, #16
 800ab10:	d10f      	bne.n	800ab32 <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f7fb fdea 	bl	80066ec <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800ab32:	20c8      	movs	r0, #200	; 0xc8
 800ab34:	f7f8 f83c 	bl	8002bb0 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d916      	bls.n	800ab70 <WiFi_Conn_ND+0x1040>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d011      	beq.n	800ab70 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7fb fe0f 	bl	8006770 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ab58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800ab6c:	f000 bc46 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f240 2261 	movw	r2, #609	; 0x261
 800ab76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800ab8a:	f000 bc37 	b.w	800b3fc <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab94:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800ab98:	d045      	beq.n	800ac26 <WiFi_Conn_ND+0x10f6>
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d040      	beq.n	800ac26 <WiFi_Conn_ND+0x10f6>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abaa:	2b0a      	cmp	r3, #10
 800abac:	d03b      	beq.n	800ac26 <WiFi_Conn_ND+0x10f6>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb4:	2b15      	cmp	r3, #21
 800abb6:	d036      	beq.n	800ac26 <WiFi_Conn_ND+0x10f6>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abbe:	2b16      	cmp	r3, #22
 800abc0:	d031      	beq.n	800ac26 <WiFi_Conn_ND+0x10f6>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc8:	2b17      	cmp	r3, #23
 800abca:	d02c      	beq.n	800ac26 <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f7fb fda3 	bl	8006718 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d124      	bne.n	800ac26 <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7fb fea7 	bl	8006930 <AT_ESP8266_ND>
 800abe2:	4602      	mov	r2, r0
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d109      	bne.n	800ac10 <WiFi_Conn_ND+0x10e0>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	f7f6 fc86 	bl	800151c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	2364      	movs	r3, #100	; 0x64
 800ac20:	68b8      	ldr	r0, [r7, #8]
 800ac22:	f7fa fc79 	bl	8005518 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac2c:	2b15      	cmp	r3, #21
 800ac2e:	d004      	beq.n	800ac3a <WiFi_Conn_ND+0x110a>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac36:	2b17      	cmp	r3, #23
 800ac38:	d104      	bne.n	800ac44 <WiFi_Conn_ND+0x1114>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f240 3229 	movw	r2, #809	; 0x329
 800ac40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4a:	2b16      	cmp	r3, #22
 800ac4c:	f040 83c5 	bne.w	800b3da <WiFi_Conn_ND+0x18aa>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f240 3225 	movw	r2, #805	; 0x325
 800ac56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800ac5a:	e3be      	b.n	800b3da <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f7fb fcc1 	bl	80065e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d112      	bne.n	800ac92 <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7fb fccf 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2264      	movs	r2, #100	; 0x64
 800ac76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac98:	2b0a      	cmp	r3, #10
 800ac9a:	d004      	beq.n	800aca6 <WiFi_Conn_ND+0x1176>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca2:	2b0d      	cmp	r3, #13
 800aca4:	d10e      	bne.n	800acc4 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7fb fcc8 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	22c8      	movs	r2, #200	; 0xc8
 800acb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acca:	2b02      	cmp	r3, #2
 800accc:	d005      	beq.n	800acda <WiFi_Conn_ND+0x11aa>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd4:	2b10      	cmp	r3, #16
 800acd6:	f040 8382 	bne.w	800b3de <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f7fb fd06 	bl	80066ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ace6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800acfa:	e370      	b.n	800b3de <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7fb fc71 	bl	80065e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	d112      	bne.n	800ad32 <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7fb fc7f 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2264      	movs	r2, #100	; 0x64
 800ad16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad38:	2b0a      	cmp	r3, #10
 800ad3a:	d004      	beq.n	800ad46 <WiFi_Conn_ND+0x1216>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad42:	2b0d      	cmp	r3, #13
 800ad44:	d10e      	bne.n	800ad64 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7fb fc78 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	22c8      	movs	r2, #200	; 0xc8
 800ad50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d005      	beq.n	800ad7a <WiFi_Conn_ND+0x124a>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad74:	2b10      	cmp	r3, #16
 800ad76:	f040 8334 	bne.w	800b3e2 <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7fb fcb6 	bl	80066ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ad9a:	e322      	b.n	800b3e2 <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f7fb fc21 	bl	80065e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	d112      	bne.n	800add2 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f7fb fc2f 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2264      	movs	r2, #100	; 0x64
 800adb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add8:	2b0a      	cmp	r3, #10
 800adda:	d004      	beq.n	800ade6 <WiFi_Conn_ND+0x12b6>
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade2:	2b0d      	cmp	r3, #13
 800ade4:	d10e      	bne.n	800ae04 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f7fb fc28 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	22c8      	movs	r2, #200	; 0xc8
 800adf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d005      	beq.n	800ae1a <WiFi_Conn_ND+0x12ea>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae14:	2b10      	cmp	r3, #16
 800ae16:	f040 82e6 	bne.w	800b3e6 <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7fb fc66 	bl	80066ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ae3a:	e2d4      	b.n	800b3e6 <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7fb fbd1 	bl	80065e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d112      	bne.n	800ae72 <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7fb fbdf 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2264      	movs	r2, #100	; 0x64
 800ae56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae78:	2b0a      	cmp	r3, #10
 800ae7a:	d004      	beq.n	800ae86 <WiFi_Conn_ND+0x1356>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae82:	2b0d      	cmp	r3, #13
 800ae84:	d10e      	bne.n	800aea4 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7fb fbd8 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	22c8      	movs	r2, #200	; 0xc8
 800ae90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d005      	beq.n	800aeba <WiFi_Conn_ND+0x138a>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb4:	2b10      	cmp	r3, #16
 800aeb6:	f040 8298 	bne.w	800b3ea <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f7fb fc16 	bl	80066ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800aeda:	e286      	b.n	800b3ea <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7fb fb81 	bl	80065e4 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef0:	2b04      	cmp	r3, #4
 800aef2:	d112      	bne.n	800af1a <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f7fb fb8b 	bl	8006610 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2264      	movs	r2, #100	; 0x64
 800aefe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af20:	2b0a      	cmp	r3, #10
 800af22:	d004      	beq.n	800af2e <WiFi_Conn_ND+0x13fe>
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af2a:	2b0d      	cmp	r3, #13
 800af2c:	d10e      	bne.n	800af4c <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7fb fb84 	bl	800663c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	22c8      	movs	r2, #200	; 0xc8
 800af38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af52:	2b02      	cmp	r3, #2
 800af54:	d004      	beq.n	800af60 <WiFi_Conn_ND+0x1430>
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af5c:	2b10      	cmp	r3, #16
 800af5e:	d10f      	bne.n	800af80 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7fb fbc3 	bl	80066ec <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800af86:	2b01      	cmp	r3, #1
 800af88:	f040 8231 	bne.w	800b3ee <WiFi_Conn_ND+0x18be>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 822b 	beq.w	800b3ee <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7fb fbd3 	bl	8006744 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800afa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800afb8:	e219      	b.n	800b3ee <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800afc4:	d063      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d05e      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800afd6:	2b0a      	cmp	r3, #10
 800afd8:	d059      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800afe0:	2b0b      	cmp	r3, #11
 800afe2:	d054      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800afea:	2b0c      	cmp	r3, #12
 800afec:	d04f      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800aff4:	2b10      	cmp	r3, #16
 800aff6:	d04a      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800affe:	2b11      	cmp	r3, #17
 800b000:	d045      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b008:	2b12      	cmp	r3, #18
 800b00a:	d040      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b012:	2b13      	cmp	r3, #19
 800b014:	d03b      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b01c:	2b16      	cmp	r3, #22
 800b01e:	d036      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b026:	2b19      	cmp	r3, #25
 800b028:	d031      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d02c      	beq.n	800b08e <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f7fb fb85 	bl	8006744 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b040:	2b01      	cmp	r3, #1
 800b042:	d124      	bne.n	800b08e <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f7fb fc73 	bl	8006930 <AT_ESP8266_ND>
 800b04a:	4602      	mov	r2, r0
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b060:	2b01      	cmp	r3, #1
 800b062:	d109      	bne.n	800b078 <WiFi_Conn_ND+0x1548>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b070:	4619      	mov	r1, r3
 800b072:	4610      	mov	r0, r2
 800b074:	f7f6 fa52 	bl	800151c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b084:	b29a      	uxth	r2, r3
 800b086:	2364      	movs	r3, #100	; 0x64
 800b088:	68b8      	ldr	r0, [r7, #8]
 800b08a:	f7fa fa45 	bl	8005518 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b094:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b098:	d154      	bne.n	800b144 <WiFi_Conn_ND+0x1614>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d14f      	bne.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d04a      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b0b4:	2b0a      	cmp	r3, #10
 800b0b6:	d045      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b0be:	2b0b      	cmp	r3, #11
 800b0c0:	d040      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b0c8:	2b0c      	cmp	r3, #12
 800b0ca:	d03b      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b0d2:	2b10      	cmp	r3, #16
 800b0d4:	d036      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b0dc:	2b11      	cmp	r3, #17
 800b0de:	d031      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b0e6:	2b12      	cmp	r3, #18
 800b0e8:	d02c      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b0f0:	2b13      	cmp	r3, #19
 800b0f2:	d027      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b0fa:	2b16      	cmp	r3, #22
 800b0fc:	d022      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b104:	2b19      	cmp	r3, #25
 800b106:	d01d      	beq.n	800b144 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b116:	2b01      	cmp	r3, #1
 800b118:	d109      	bne.n	800b12e <WiFi_Conn_ND+0x15fe>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b126:	4619      	mov	r1, r3
 800b128:	4610      	mov	r0, r2
 800b12a:	f7f6 f9f7 	bl	800151c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	2364      	movs	r3, #100	; 0x64
 800b13e:	68b8      	ldr	r0, [r7, #8]
 800b140:	f7fa f9ea 	bl	8005518 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b14a:	2b13      	cmp	r3, #19
 800b14c:	d104      	bne.n	800b158 <WiFi_Conn_ND+0x1628>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f240 328d 	movw	r2, #909	; 0x38d
 800b154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d02d      	beq.n	800b1be <WiFi_Conn_ND+0x168e>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b168:	2b04      	cmp	r3, #4
 800b16a:	d028      	beq.n	800b1be <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b172:	2b0a      	cmp	r3, #10
 800b174:	d023      	beq.n	800b1be <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17c:	2b0b      	cmp	r3, #11
 800b17e:	d01e      	beq.n	800b1be <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b186:	2b0c      	cmp	r3, #12
 800b188:	d019      	beq.n	800b1be <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b190:	2b10      	cmp	r3, #16
 800b192:	d014      	beq.n	800b1be <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b19a:	2b11      	cmp	r3, #17
 800b19c:	d00f      	beq.n	800b1be <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a4:	2b12      	cmp	r3, #18
 800b1a6:	d00a      	beq.n	800b1be <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b1ae:	2b16      	cmp	r3, #22
 800b1b0:	d005      	beq.n	800b1be <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b8:	2b19      	cmp	r3, #25
 800b1ba:	f040 811a 	bne.w	800b3f2 <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f240 3289 	movw	r2, #905	; 0x389
 800b1c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b1c8:	e113      	b.n	800b3f2 <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7fb fa0a 	bl	80065e4 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d6:	2b04      	cmp	r3, #4
 800b1d8:	d009      	beq.n	800b1ee <WiFi_Conn_ND+0x16be>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e0:	2b0b      	cmp	r3, #11
 800b1e2:	d004      	beq.n	800b1ee <WiFi_Conn_ND+0x16be>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ea:	2b0c      	cmp	r3, #12
 800b1ec:	d112      	bne.n	800b214 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7fb fa0e 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2264      	movs	r2, #100	; 0x64
 800b1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b21a:	2b0a      	cmp	r3, #10
 800b21c:	d004      	beq.n	800b228 <WiFi_Conn_ND+0x16f8>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b224:	2b0d      	cmp	r3, #13
 800b226:	d10e      	bne.n	800b246 <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f7fb fa07 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	22c8      	movs	r2, #200	; 0xc8
 800b232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24c:	2b16      	cmp	r3, #22
 800b24e:	d10c      	bne.n	800b26a <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f240 3225 	movw	r2, #805	; 0x325
 800b256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b270:	2b18      	cmp	r3, #24
 800b272:	d10c      	bne.n	800b28e <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f240 3229 	movw	r2, #809	; 0x329
 800b27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b294:	2b19      	cmp	r3, #25
 800b296:	d008      	beq.n	800b2aa <WiFi_Conn_ND+0x177a>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b29e:	2b11      	cmp	r3, #17
 800b2a0:	d003      	beq.n	800b2aa <WiFi_Conn_ND+0x177a>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2212      	movs	r2, #18
 800b2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	f040 80a0 	bne.w	800b3f6 <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b2d0:	e091      	b.n	800b3f6 <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7fb f986 	bl	80065e4 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2de:	2b04      	cmp	r3, #4
 800b2e0:	d009      	beq.n	800b2f6 <WiFi_Conn_ND+0x17c6>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e8:	2b0b      	cmp	r3, #11
 800b2ea:	d004      	beq.n	800b2f6 <WiFi_Conn_ND+0x17c6>
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2f2:	2b0c      	cmp	r3, #12
 800b2f4:	d112      	bne.n	800b31c <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f7fb f98a 	bl	8006610 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2264      	movs	r2, #100	; 0x64
 800b300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b322:	2b0a      	cmp	r3, #10
 800b324:	d004      	beq.n	800b330 <WiFi_Conn_ND+0x1800>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b32c:	2b0d      	cmp	r3, #13
 800b32e:	d10e      	bne.n	800b34e <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f7fb f983 	bl	800663c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	22c8      	movs	r2, #200	; 0xc8
 800b33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b354:	2b01      	cmp	r3, #1
 800b356:	d004      	beq.n	800b362 <WiFi_Conn_ND+0x1832>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d14b      	bne.n	800b3fa <WiFi_Conn_ND+0x18ca>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d046      	beq.n	800b3fa <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f7fb f9e9 	bl	8006744 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b39c:	e02d      	b.n	800b3fa <WiFi_Conn_ND+0x18ca>
			break;
 800b39e:	bf00      	nop
 800b3a0:	e02c      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3a2:	bf00      	nop
 800b3a4:	e02a      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3a6:	bf00      	nop
 800b3a8:	e028      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3aa:	bf00      	nop
 800b3ac:	e026      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3ae:	bf00      	nop
 800b3b0:	e024      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3b2:	bf00      	nop
 800b3b4:	e022      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3b6:	bf00      	nop
 800b3b8:	e020      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3ba:	bf00      	nop
 800b3bc:	e01e      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3be:	bf00      	nop
 800b3c0:	e01c      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3c2:	bf00      	nop
 800b3c4:	e01a      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3c6:	bf00      	nop
 800b3c8:	e018      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3ca:	bf00      	nop
 800b3cc:	e016      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3ce:	bf00      	nop
 800b3d0:	e014      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3d2:	bf00      	nop
 800b3d4:	e012      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
			break;
 800b3d6:	bf00      	nop
 800b3d8:	e010      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
						break;
 800b3da:	bf00      	nop
 800b3dc:	e00e      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
						break;
 800b3de:	bf00      	nop
 800b3e0:	e00c      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
						break;
 800b3e2:	bf00      	nop
 800b3e4:	e00a      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
						break;
 800b3e6:	bf00      	nop
 800b3e8:	e008      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
						break;
 800b3ea:	bf00      	nop
 800b3ec:	e006      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
						break;
 800b3ee:	bf00      	nop
 800b3f0:	e004      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
						break;
 800b3f2:	bf00      	nop
 800b3f4:	e002      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
						break;
 800b3f6:	bf00      	nop
 800b3f8:	e000      	b.n	800b3fc <WiFi_Conn_ND+0x18cc>
						break;
 800b3fa:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop

0800b40c <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t dp_cartucho, uint16_t dp_filtro, uint16_t ciclo_ev1, uint16_t ciclo_ev2,uint16_t ciclo_ev3,uint16_t ciclo_ev4,uint16_t ciclo_ev5,uint16_t ciclo_ev6,uint16_t ciclo_ev7,uint16_t ciclo_ev8, uint16_t devId, char  * post, char * body, int max_char)
{
 800b40c:	b5b0      	push	{r4, r5, r7, lr}
 800b40e:	b09c      	sub	sp, #112	; 0x70
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b41a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b426:	2200      	movs	r2, #0
 800b428:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b42a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b42e:	f7f4 fee1 	bl	80001f4 <strlen>
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b43a:	4413      	add	r3, r2
 800b43c:	4aeb      	ldr	r2, [pc, #940]	; (800b7ec <httpPOST+0x3e0>)
 800b43e:	6810      	ldr	r0, [r2, #0]
 800b440:	6018      	str	r0, [r3, #0]
 800b442:	8892      	ldrh	r2, [r2, #4]
 800b444:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7f4 fed4 	bl	80001f4 <strlen>
 800b44c:	4603      	mov	r3, r0
 800b44e:	461a      	mov	r2, r3
 800b450:	68f9      	ldr	r1, [r7, #12]
 800b452:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b456:	f003 fbb9 	bl	800ebcc <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b45a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b45e:	f7f4 fec9 	bl	80001f4 <strlen>
 800b462:	4603      	mov	r3, r0
 800b464:	461a      	mov	r2, r3
 800b466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b46a:	4413      	add	r3, r2
 800b46c:	49e0      	ldr	r1, [pc, #896]	; (800b7f0 <httpPOST+0x3e4>)
 800b46e:	461a      	mov	r2, r3
 800b470:	460b      	mov	r3, r1
 800b472:	cb03      	ldmia	r3!, {r0, r1}
 800b474:	6010      	str	r0, [r2, #0]
 800b476:	6051      	str	r1, [r2, #4]
 800b478:	8819      	ldrh	r1, [r3, #0]
 800b47a:	789b      	ldrb	r3, [r3, #2]
 800b47c:	8111      	strh	r1, [r2, #8]
 800b47e:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b480:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b484:	f7f4 feb6 	bl	80001f4 <strlen>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b490:	4413      	add	r3, r2
 800b492:	4ad8      	ldr	r2, [pc, #864]	; (800b7f4 <httpPOST+0x3e8>)
 800b494:	8811      	ldrh	r1, [r2, #0]
 800b496:	7892      	ldrb	r2, [r2, #2]
 800b498:	8019      	strh	r1, [r3, #0]
 800b49a:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b49c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4a0:	f7f4 fea8 	bl	80001f4 <strlen>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4ac:	4413      	add	r3, r2
 800b4ae:	4ad2      	ldr	r2, [pc, #840]	; (800b7f8 <httpPOST+0x3ec>)
 800b4b0:	6810      	ldr	r0, [r2, #0]
 800b4b2:	6018      	str	r0, [r3, #0]
 800b4b4:	8891      	ldrh	r1, [r2, #4]
 800b4b6:	7992      	ldrb	r2, [r2, #6]
 800b4b8:	8099      	strh	r1, [r3, #4]
 800b4ba:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b4bc:	68b8      	ldr	r0, [r7, #8]
 800b4be:	f7f4 fe99 	bl	80001f4 <strlen>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4cc:	f003 fb7e 	bl	800ebcc <strncat>
	strncat(post,":",1);
 800b4d0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4d4:	f7f4 fe8e 	bl	80001f4 <strlen>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4e0:	4413      	add	r3, r2
 800b4e2:	49c6      	ldr	r1, [pc, #792]	; (800b7fc <httpPOST+0x3f0>)
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7f4 fe81 	bl	80001f4 <strlen>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4fc:	f003 fb66 	bl	800ebcc <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b500:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b504:	f7f4 fe76 	bl	80001f4 <strlen>
 800b508:	4603      	mov	r3, r0
 800b50a:	461a      	mov	r2, r3
 800b50c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b510:	4413      	add	r3, r2
 800b512:	4ab8      	ldr	r2, [pc, #736]	; (800b7f4 <httpPOST+0x3e8>)
 800b514:	8811      	ldrh	r1, [r2, #0]
 800b516:	7892      	ldrb	r2, [r2, #2]
 800b518:	8019      	strh	r1, [r3, #0]
 800b51a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b51c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b520:	f7f4 fe68 	bl	80001f4 <strlen>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b52c:	4413      	add	r3, r2
 800b52e:	4ab4      	ldr	r2, [pc, #720]	; (800b800 <httpPOST+0x3f4>)
 800b530:	461d      	mov	r5, r3
 800b532:	4614      	mov	r4, r2
 800b534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b536:	6028      	str	r0, [r5, #0]
 800b538:	6069      	str	r1, [r5, #4]
 800b53a:	60aa      	str	r2, [r5, #8]
 800b53c:	60eb      	str	r3, [r5, #12]
 800b53e:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b540:	6128      	str	r0, [r5, #16]
 800b542:	6169      	str	r1, [r5, #20]
 800b544:	61aa      	str	r2, [r5, #24]
 800b546:	8823      	ldrh	r3, [r4, #0]
 800b548:	78a2      	ldrb	r2, [r4, #2]
 800b54a:	83ab      	strh	r3, [r5, #28]
 800b54c:	4613      	mov	r3, r2
 800b54e:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b550:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b554:	f7f4 fe4e 	bl	80001f4 <strlen>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b560:	4413      	add	r3, r2
 800b562:	4aa4      	ldr	r2, [pc, #656]	; (800b7f4 <httpPOST+0x3e8>)
 800b564:	8811      	ldrh	r1, [r2, #0]
 800b566:	7892      	ldrb	r2, [r2, #2]
 800b568:	8019      	strh	r1, [r3, #0]
 800b56a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b56c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b570:	f7f4 fe40 	bl	80001f4 <strlen>
 800b574:	4603      	mov	r3, r0
 800b576:	461a      	mov	r2, r3
 800b578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b57c:	4413      	add	r3, r2
 800b57e:	4aa1      	ldr	r2, [pc, #644]	; (800b804 <httpPOST+0x3f8>)
 800b580:	461c      	mov	r4, r3
 800b582:	4615      	mov	r5, r2
 800b584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b586:	6020      	str	r0, [r4, #0]
 800b588:	6061      	str	r1, [r4, #4]
 800b58a:	60a2      	str	r2, [r4, #8]
 800b58c:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _cartucho[8];
	_cartucho[0]='\0';
 800b58e:	2300      	movs	r3, #0
 800b590:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( dp_cartucho,_cartucho);
 800b594:	887b      	ldrh	r3, [r7, #2]
 800b596:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b59a:	4611      	mov	r1, r2
 800b59c:	4618      	mov	r0, r3
 800b59e:	f003 fa1d 	bl	800e9dc <INTOA>
	char _filtro[8];
	_filtro[0]='\0';
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( dp_filtro, _filtro);
 800b5a8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800b5ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f003 fa12 	bl	800e9dc <INTOA>
	char _ev1[8];
	_ev1[0]='\0';
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( ciclo_ev1, _ev1);
 800b5be:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b5c2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f003 fa07 	bl	800e9dc <INTOA>
	char _ev2[8];
	_ev2[0]='\0';
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( ciclo_ev2, _ev2);
 800b5d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b5d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f003 f9fc 	bl	800e9dc <INTOA>
	char _ev3[8];
	_ev3[0]='\0';
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( ciclo_ev3, _ev3);
 800b5ea:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b5ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f003 f9f1 	bl	800e9dc <INTOA>
	char _ev4[8];
	_ev4[0]='\0';
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( ciclo_ev4, _ev4);
 800b600:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800b604:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b608:	4611      	mov	r1, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f003 f9e6 	bl	800e9dc <INTOA>
	char _ev5[8];
	_ev5[0]='\0';
 800b610:	2300      	movs	r3, #0
 800b612:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( ciclo_ev5, _ev5);
 800b616:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b61a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b61e:	4611      	mov	r1, r2
 800b620:	4618      	mov	r0, r3
 800b622:	f003 f9db 	bl	800e9dc <INTOA>
	char _ev6[8];
	_ev6[0]='\0';
 800b626:	2300      	movs	r3, #0
 800b628:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( ciclo_ev6, _ev6);
 800b62c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800b630:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f003 f9d0 	bl	800e9dc <INTOA>
	char _ev7[8];
	_ev7[0]='\0';
 800b63c:	2300      	movs	r3, #0
 800b63e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( ciclo_ev7, _ev7);
 800b642:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b646:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b64a:	4611      	mov	r1, r2
 800b64c:	4618      	mov	r0, r3
 800b64e:	f003 f9c5 	bl	800e9dc <INTOA>
	char _ev8[8];
	_ev8[0]='\0';
 800b652:	2300      	movs	r3, #0
 800b654:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( ciclo_ev8, _ev8);
 800b658:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b65c:	f107 0220 	add.w	r2, r7, #32
 800b660:	4611      	mov	r1, r2
 800b662:	4618      	mov	r0, r3
 800b664:	f003 f9ba 	bl	800e9dc <INTOA>
	char _devId[8];
	_devId[0]='\0';
 800b668:	2300      	movs	r3, #0
 800b66a:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b66c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800b670:	f107 0218 	add.w	r2, r7, #24
 800b674:	4611      	mov	r1, r2
 800b676:	4618      	mov	r0, r3
 800b678:	f003 f9b0 	bl	800e9dc <INTOA>

	strncat(body,cartucho,strlen(cartucho));
 800b67c:	4862      	ldr	r0, [pc, #392]	; (800b808 <httpPOST+0x3fc>)
 800b67e:	f7f4 fdb9 	bl	80001f4 <strlen>
 800b682:	4603      	mov	r3, r0
 800b684:	461a      	mov	r2, r3
 800b686:	4960      	ldr	r1, [pc, #384]	; (800b808 <httpPOST+0x3fc>)
 800b688:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b68c:	f003 fa9e 	bl	800ebcc <strncat>
	strncat(body,_cartucho,strlen(_cartucho));
 800b690:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b694:	4618      	mov	r0, r3
 800b696:	f7f4 fdad 	bl	80001f4 <strlen>
 800b69a:	4602      	mov	r2, r0
 800b69c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6a6:	f003 fa91 	bl	800ebcc <strncat>
	strncat(body,filtro,strlen(filtro));
 800b6aa:	4858      	ldr	r0, [pc, #352]	; (800b80c <httpPOST+0x400>)
 800b6ac:	f7f4 fda2 	bl	80001f4 <strlen>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	4955      	ldr	r1, [pc, #340]	; (800b80c <httpPOST+0x400>)
 800b6b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6ba:	f003 fa87 	bl	800ebcc <strncat>
	strncat(body,_filtro,strlen(_filtro));
 800b6be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7f4 fd96 	bl	80001f4 <strlen>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6d4:	f003 fa7a 	bl	800ebcc <strncat>
	strncat(body,ev1,strlen(ev1));
 800b6d8:	484d      	ldr	r0, [pc, #308]	; (800b810 <httpPOST+0x404>)
 800b6da:	f7f4 fd8b 	bl	80001f4 <strlen>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	494b      	ldr	r1, [pc, #300]	; (800b810 <httpPOST+0x404>)
 800b6e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6e8:	f003 fa70 	bl	800ebcc <strncat>
	strncat(body,_ev1,strlen(_ev1));
 800b6ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7f4 fd7f 	bl	80001f4 <strlen>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b702:	f003 fa63 	bl	800ebcc <strncat>
	strncat(body,ev2,strlen(ev2));
 800b706:	4843      	ldr	r0, [pc, #268]	; (800b814 <httpPOST+0x408>)
 800b708:	f7f4 fd74 	bl	80001f4 <strlen>
 800b70c:	4603      	mov	r3, r0
 800b70e:	461a      	mov	r2, r3
 800b710:	4940      	ldr	r1, [pc, #256]	; (800b814 <httpPOST+0x408>)
 800b712:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b716:	f003 fa59 	bl	800ebcc <strncat>
	strncat(body,_ev2,strlen(_ev2));
 800b71a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f4 fd68 	bl	80001f4 <strlen>
 800b724:	4602      	mov	r2, r0
 800b726:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b72a:	4619      	mov	r1, r3
 800b72c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b730:	f003 fa4c 	bl	800ebcc <strncat>
	strncat(body,ev3,strlen(ev3));
 800b734:	4838      	ldr	r0, [pc, #224]	; (800b818 <httpPOST+0x40c>)
 800b736:	f7f4 fd5d 	bl	80001f4 <strlen>
 800b73a:	4603      	mov	r3, r0
 800b73c:	461a      	mov	r2, r3
 800b73e:	4936      	ldr	r1, [pc, #216]	; (800b818 <httpPOST+0x40c>)
 800b740:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b744:	f003 fa42 	bl	800ebcc <strncat>
	strncat(body,_ev3,strlen(_ev3));
 800b748:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7f4 fd51 	bl	80001f4 <strlen>
 800b752:	4602      	mov	r2, r0
 800b754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b758:	4619      	mov	r1, r3
 800b75a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b75e:	f003 fa35 	bl	800ebcc <strncat>
	strncat(body,ev4,strlen(ev4));
 800b762:	482e      	ldr	r0, [pc, #184]	; (800b81c <httpPOST+0x410>)
 800b764:	f7f4 fd46 	bl	80001f4 <strlen>
 800b768:	4603      	mov	r3, r0
 800b76a:	461a      	mov	r2, r3
 800b76c:	492b      	ldr	r1, [pc, #172]	; (800b81c <httpPOST+0x410>)
 800b76e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b772:	f003 fa2b 	bl	800ebcc <strncat>
	strncat(body,_ev4,strlen(_ev4));
 800b776:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7f4 fd3a 	bl	80001f4 <strlen>
 800b780:	4602      	mov	r2, r0
 800b782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b786:	4619      	mov	r1, r3
 800b788:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b78c:	f003 fa1e 	bl	800ebcc <strncat>
	strncat(body,ev5,strlen(ev5));
 800b790:	4823      	ldr	r0, [pc, #140]	; (800b820 <httpPOST+0x414>)
 800b792:	f7f4 fd2f 	bl	80001f4 <strlen>
 800b796:	4603      	mov	r3, r0
 800b798:	461a      	mov	r2, r3
 800b79a:	4921      	ldr	r1, [pc, #132]	; (800b820 <httpPOST+0x414>)
 800b79c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7a0:	f003 fa14 	bl	800ebcc <strncat>
	strncat(body,_ev5,strlen(_ev5));
 800b7a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7f4 fd23 	bl	80001f4 <strlen>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7ba:	f003 fa07 	bl	800ebcc <strncat>
	strncat(body,ev6,strlen(ev6));
 800b7be:	4819      	ldr	r0, [pc, #100]	; (800b824 <httpPOST+0x418>)
 800b7c0:	f7f4 fd18 	bl	80001f4 <strlen>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	4916      	ldr	r1, [pc, #88]	; (800b824 <httpPOST+0x418>)
 800b7ca:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7ce:	f003 f9fd 	bl	800ebcc <strncat>
	strncat(body,_ev6,strlen(_ev6));
 800b7d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7f4 fd0c 	bl	80001f4 <strlen>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7e8:	e01e      	b.n	800b828 <httpPOST+0x41c>
 800b7ea:	bf00      	nop
 800b7ec:	08010684 	.word	0x08010684
 800b7f0:	0801068c 	.word	0x0801068c
 800b7f4:	08010698 	.word	0x08010698
 800b7f8:	0801069c 	.word	0x0801069c
 800b7fc:	080106a4 	.word	0x080106a4
 800b800:	080106a8 	.word	0x080106a8
 800b804:	080106c8 	.word	0x080106c8
 800b808:	20000090 	.word	0x20000090
 800b80c:	200000a0 	.word	0x200000a0
 800b810:	200000b0 	.word	0x200000b0
 800b814:	200000c0 	.word	0x200000c0
 800b818:	200000d0 	.word	0x200000d0
 800b81c:	200000e0 	.word	0x200000e0
 800b820:	200000f0 	.word	0x200000f0
 800b824:	20000100 	.word	0x20000100
 800b828:	f003 f9d0 	bl	800ebcc <strncat>
	strncat(body,ev7,strlen(ev7));
 800b82c:	484a      	ldr	r0, [pc, #296]	; (800b958 <httpPOST+0x54c>)
 800b82e:	f7f4 fce1 	bl	80001f4 <strlen>
 800b832:	4603      	mov	r3, r0
 800b834:	461a      	mov	r2, r3
 800b836:	4948      	ldr	r1, [pc, #288]	; (800b958 <httpPOST+0x54c>)
 800b838:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b83c:	f003 f9c6 	bl	800ebcc <strncat>
	strncat(body,_ev7,strlen(_ev7));
 800b840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b844:	4618      	mov	r0, r3
 800b846:	f7f4 fcd5 	bl	80001f4 <strlen>
 800b84a:	4602      	mov	r2, r0
 800b84c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b850:	4619      	mov	r1, r3
 800b852:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b856:	f003 f9b9 	bl	800ebcc <strncat>
	strncat(body,ev8,strlen(ev8));
 800b85a:	4840      	ldr	r0, [pc, #256]	; (800b95c <httpPOST+0x550>)
 800b85c:	f7f4 fcca 	bl	80001f4 <strlen>
 800b860:	4603      	mov	r3, r0
 800b862:	461a      	mov	r2, r3
 800b864:	493d      	ldr	r1, [pc, #244]	; (800b95c <httpPOST+0x550>)
 800b866:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b86a:	f003 f9af 	bl	800ebcc <strncat>
	strncat(body,_ev8,strlen(_ev8));
 800b86e:	f107 0320 	add.w	r3, r7, #32
 800b872:	4618      	mov	r0, r3
 800b874:	f7f4 fcbe 	bl	80001f4 <strlen>
 800b878:	4602      	mov	r2, r0
 800b87a:	f107 0320 	add.w	r3, r7, #32
 800b87e:	4619      	mov	r1, r3
 800b880:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b884:	f003 f9a2 	bl	800ebcc <strncat>
	strncat(body,deviceId,strlen(deviceId));
 800b888:	4835      	ldr	r0, [pc, #212]	; (800b960 <httpPOST+0x554>)
 800b88a:	f7f4 fcb3 	bl	80001f4 <strlen>
 800b88e:	4603      	mov	r3, r0
 800b890:	461a      	mov	r2, r3
 800b892:	4933      	ldr	r1, [pc, #204]	; (800b960 <httpPOST+0x554>)
 800b894:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b898:	f003 f998 	bl	800ebcc <strncat>
	strncat(body,_devId,strlen(_devId));
 800b89c:	f107 0318 	add.w	r3, r7, #24
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7f4 fca7 	bl	80001f4 <strlen>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	f107 0318 	add.w	r3, r7, #24
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8b2:	f003 f98b 	bl	800ebcc <strncat>

	strncat(body,"}",strlen("}"));
 800b8b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8ba:	f7f4 fc9b 	bl	80001f4 <strlen>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8c6:	4413      	add	r3, r2
 800b8c8:	4926      	ldr	r1, [pc, #152]	; (800b964 <httpPOST+0x558>)
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	881b      	ldrh	r3, [r3, #0]
 800b8d0:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b8d2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8d6:	f7f4 fc8d 	bl	80001f4 <strlen>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	f107 0310 	add.w	r3, r7, #16
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f003 f87a 	bl	800e9dc <INTOA>
	strncat(post,length,strlen(length));
 800b8e8:	f107 0310 	add.w	r3, r7, #16
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7f4 fc81 	bl	80001f4 <strlen>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	f107 0310 	add.w	r3, r7, #16
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b8fe:	f003 f965 	bl	800ebcc <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b902:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b906:	f7f4 fc75 	bl	80001f4 <strlen>
 800b90a:	4603      	mov	r3, r0
 800b90c:	461a      	mov	r2, r3
 800b90e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b912:	4413      	add	r3, r2
 800b914:	4a14      	ldr	r2, [pc, #80]	; (800b968 <httpPOST+0x55c>)
 800b916:	6810      	ldr	r0, [r2, #0]
 800b918:	6018      	str	r0, [r3, #0]
 800b91a:	7912      	ldrb	r2, [r2, #4]
 800b91c:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b91e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b922:	f7f4 fc67 	bl	80001f4 <strlen>
 800b926:	4602      	mov	r2, r0
 800b928:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d20d      	bcs.n	800b94c <httpPOST+0x540>
	{
		strncat(post,body,strlen(body));
 800b930:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b934:	f7f4 fc5e 	bl	80001f4 <strlen>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b940:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b944:	f003 f942 	bl	800ebcc <strncat>
		return 1 ;
 800b948:	2301      	movs	r3, #1
 800b94a:	e000      	b.n	800b94e <httpPOST+0x542>
	}
		else
		{
			return 0;
 800b94c:	2300      	movs	r3, #0
		}
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3770      	adds	r7, #112	; 0x70
 800b952:	46bd      	mov	sp, r7
 800b954:	bdb0      	pop	{r4, r5, r7, pc}
 800b956:	bf00      	nop
 800b958:	20000110 	.word	0x20000110
 800b95c:	20000120 	.word	0x20000120
 800b960:	20000130 	.word	0x20000130
 800b964:	080106d8 	.word	0x080106d8
 800b968:	080106dc 	.word	0x080106dc

0800b96c <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800b96c:	b5b0      	push	{r4, r5, r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b97c:	2bf1      	cmp	r3, #241	; 0xf1
 800b97e:	dd01      	ble.n	800b984 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800b980:	2301      	movs	r3, #1
 800b982:	e099      	b.n	800bab8 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800b984:	2300      	movs	r3, #0
 800b986:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b98e:	f107 0108 	add.w	r1, r7, #8
 800b992:	220a      	movs	r2, #10
 800b994:	4618      	mov	r0, r3
 800b996:	f003 f8e7 	bl	800eb68 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f7f4 fc23 	bl	80001f4 <strlen>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	4423      	add	r3, r4
 800b9b2:	4943      	ldr	r1, [pc, #268]	; (800bac0 <LoRa_Send+0x154>)
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	cb03      	ldmia	r3!, {r0, r1}
 800b9ba:	6010      	str	r0, [r2, #0]
 800b9bc:	6051      	str	r1, [r2, #4]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f103 0516 	add.w	r5, r3, #22
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	3316      	adds	r3, #22
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7f4 fc0e 	bl	80001f4 <strlen>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	461a      	mov	r2, r3
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f003 f8f4 	bl	800ebcc <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f7f4 fc02 	bl	80001f4 <strlen>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	4423      	add	r3, r4
 800b9f4:	4933      	ldr	r1, [pc, #204]	; (800bac4 <LoRa_Send+0x158>)
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800ba04:	f107 0308 	add.w	r3, r7, #8
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f4 fbf3 	bl	80001f4 <strlen>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	f107 0308 	add.w	r3, r7, #8
 800ba14:	4619      	mov	r1, r3
 800ba16:	4620      	mov	r0, r4
 800ba18:	f003 f8d8 	bl	800ebcc <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800ba22:	4620      	mov	r0, r4
 800ba24:	f7f4 fbe6 	bl	80001f4 <strlen>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	4423      	add	r3, r4
 800ba2c:	4925      	ldr	r1, [pc, #148]	; (800bac4 <LoRa_Send+0x158>)
 800ba2e:	461a      	mov	r2, r3
 800ba30:	460b      	mov	r3, r1
 800ba32:	881b      	ldrh	r3, [r3, #0]
 800ba34:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7f4 fbd9 	bl	80001f4 <strlen>
 800ba42:	4603      	mov	r3, r0
 800ba44:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	4413      	add	r3, r2
 800ba50:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800ba56:	e012      	b.n	800ba7e <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800ba62:	7819      	ldrb	r1, [r3, #0]
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	4413      	add	r3, r2
 800ba6a:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800ba6e:	460a      	mov	r2, r1
 800ba70:	701a      	strb	r2, [r3, #0]
			la++;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	3301      	adds	r3, #1
 800ba76:	617b      	str	r3, [r7, #20]
			lc++;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	dbe8      	blt.n	800ba58 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	617a      	str	r2, [r7, #20]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	4413      	add	r3, r2
 800ba90:	220d      	movs	r2, #13
 800ba92:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	617a      	str	r2, [r7, #20]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	4413      	add	r3, r2
 800baa0:	220a      	movs	r2, #10
 800baa2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	b292      	uxth	r2, r2
 800bab0:	4619      	mov	r1, r3
 800bab2:	6838      	ldr	r0, [r7, #0]
 800bab4:	f7f9 fdc2 	bl	800563c <HAL_UART_Transmit_IT>
	}

}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bdb0      	pop	{r4, r5, r7, pc}
 800bac0:	080106e4 	.word	0x080106e4
 800bac4:	080106f0 	.word	0x080106f0

0800bac8 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
	...

0800bb00 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fa25 	bl	800bf58 <Lora_idSTR>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b10      	cmp	r3, #16
 800bb12:	f200 820c 	bhi.w	800bf2e <LoRa_decode+0x42e>
 800bb16:	a201      	add	r2, pc, #4	; (adr r2, 800bb1c <LoRa_decode+0x1c>)
 800bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1c:	0800bb61 	.word	0x0800bb61
 800bb20:	0800bc39 	.word	0x0800bc39
 800bb24:	0800be6d 	.word	0x0800be6d
 800bb28:	0800be77 	.word	0x0800be77
 800bb2c:	0800be81 	.word	0x0800be81
 800bb30:	0800be8b 	.word	0x0800be8b
 800bb34:	0800be95 	.word	0x0800be95
 800bb38:	0800be9f 	.word	0x0800be9f
 800bb3c:	0800bea9 	.word	0x0800bea9
 800bb40:	0800beb3 	.word	0x0800beb3
 800bb44:	0800bebd 	.word	0x0800bebd
 800bb48:	0800befd 	.word	0x0800befd
 800bb4c:	0800bf07 	.word	0x0800bf07
 800bb50:	0800bf1b 	.word	0x0800bf1b
 800bb54:	0800bf11 	.word	0x0800bf11
 800bb58:	0800be63 	.word	0x0800be63
 800bb5c:	0800bf25 	.word	0x0800bf25
	{
		case _OK:
		{
			switch(b->estado)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800bb66:	3b01      	subs	r3, #1
 800bb68:	2b13      	cmp	r3, #19
 800bb6a:	d860      	bhi.n	800bc2e <LoRa_decode+0x12e>
 800bb6c:	a201      	add	r2, pc, #4	; (adr r2, 800bb74 <LoRa_decode+0x74>)
 800bb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb72:	bf00      	nop
 800bb74:	0800bbc5 	.word	0x0800bbc5
 800bb78:	0800bc2f 	.word	0x0800bc2f
 800bb7c:	0800bc2f 	.word	0x0800bc2f
 800bb80:	0800bc2f 	.word	0x0800bc2f
 800bb84:	0800bc2f 	.word	0x0800bc2f
 800bb88:	0800bc2f 	.word	0x0800bc2f
 800bb8c:	0800bbcf 	.word	0x0800bbcf
 800bb90:	0800bbd9 	.word	0x0800bbd9
 800bb94:	0800bc2f 	.word	0x0800bc2f
 800bb98:	0800bbe3 	.word	0x0800bbe3
 800bb9c:	0800bc2f 	.word	0x0800bc2f
 800bba0:	0800bbed 	.word	0x0800bbed
 800bba4:	0800bc2f 	.word	0x0800bc2f
 800bba8:	0800bbf7 	.word	0x0800bbf7
 800bbac:	0800bc2f 	.word	0x0800bc2f
 800bbb0:	0800bc01 	.word	0x0800bc01
 800bbb4:	0800bc2f 	.word	0x0800bc2f
 800bbb8:	0800bc0b 	.word	0x0800bc0b
 800bbbc:	0800bc2f 	.word	0x0800bc2f
 800bbc0:	0800bc15 	.word	0x0800bc15
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bbcc:	e02f      	b.n	800bc2e <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2206      	movs	r2, #6
 800bbd2:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bbd6:	e02a      	b.n	800bc2e <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2209      	movs	r2, #9
 800bbdc:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bbe0:	e025      	b.n	800bc2e <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	220b      	movs	r2, #11
 800bbe6:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bbea:	e020      	b.n	800bc2e <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	220d      	movs	r2, #13
 800bbf0:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bbf4:	e01b      	b.n	800bc2e <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	220f      	movs	r2, #15
 800bbfa:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bbfe:	e016      	b.n	800bc2e <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2211      	movs	r2, #17
 800bc04:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc08:	e011      	b.n	800bc2e <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2213      	movs	r2, #19
 800bc0e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc12:	e00c      	b.n	800bc2e <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2215      	movs	r2, #21
 800bc18:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800bc24:	2111      	movs	r1, #17
 800bc26:	48a8      	ldr	r0, [pc, #672]	; (800bec8 <LoRa_decode+0x3c8>)
 800bc28:	f7f5 fc78 	bl	800151c <ITM0_Write>
					}
					break;
 800bc2c:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800bc2e:	210c      	movs	r1, #12
 800bc30:	48a6      	ldr	r0, [pc, #664]	; (800becc <LoRa_decode+0x3cc>)
 800bc32:	f7f5 fc73 	bl	800151c <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800bc36:	e17f      	b.n	800bf38 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800bc38:	210d      	movs	r1, #13
 800bc3a:	48a5      	ldr	r0, [pc, #660]	; (800bed0 <LoRa_decode+0x3d0>)
 800bc3c:	f7f5 fc6e 	bl	800151c <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	221a      	movs	r2, #26
 800bc44:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	617b      	str	r3, [r7, #20]
					int j=0;
 800bc54:	2300      	movs	r3, #0
 800bc56:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800bc5c:	e002      	b.n	800bc64 <LoRa_decode+0x164>
					{ i++;}
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	3301      	adds	r3, #1
 800bc62:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	4413      	add	r3, r2
 800bc6a:	3356      	adds	r3, #86	; 0x56
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b3d      	cmp	r3, #61	; 0x3d
 800bc70:	d1f5      	bne.n	800bc5e <LoRa_decode+0x15e>
					i++;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	3301      	adds	r3, #1
 800bc76:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bc78:	e017      	b.n	800bcaa <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	4413      	add	r3, r2
 800bc80:	3356      	adds	r3, #86	; 0x56
 800bc82:	7819      	ldrb	r1, [r3, #0]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	4413      	add	r3, r2
 800bc8a:	3306      	adds	r3, #6
 800bc8c:	460a      	mov	r2, r1
 800bc8e:	701a      	strb	r2, [r3, #0]
						i++;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	3301      	adds	r3, #1
 800bc94:	617b      	str	r3, [r7, #20]
						j++;
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	2b06      	cmp	r3, #6
 800bca0:	dd03      	ble.n	800bcaa <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fb9a 	bl	800c3dc <Lora_rx_del>
							break;
 800bca8:	e006      	b.n	800bcb8 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	4413      	add	r3, r2
 800bcb0:	3356      	adds	r3, #86	; 0x56
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b2c      	cmp	r3, #44	; 0x2c
 800bcb6:	d1e0      	bne.n	800bc7a <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	3306      	adds	r3, #6
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	701a      	strb	r2, [r3, #0]
					j=0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	613b      	str	r3, [r7, #16]
					i++;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	3301      	adds	r3, #1
 800bccc:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bcce:	e017      	b.n	800bd00 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	3356      	adds	r3, #86	; 0x56
 800bcd8:	7819      	ldrb	r1, [r3, #0]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	4413      	add	r3, r2
 800bce0:	330c      	adds	r3, #12
 800bce2:	460a      	mov	r2, r1
 800bce4:	701a      	strb	r2, [r3, #0]
						i++;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	3301      	adds	r3, #1
 800bcea:	617b      	str	r3, [r7, #20]
						j++;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2b04      	cmp	r3, #4
 800bcf6:	dd03      	ble.n	800bd00 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fb6f 	bl	800c3dc <Lora_rx_del>
							break;
 800bcfe:	e006      	b.n	800bd0e <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	4413      	add	r3, r2
 800bd06:	3356      	adds	r3, #86	; 0x56
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2b2c      	cmp	r3, #44	; 0x2c
 800bd0c:	d1e0      	bne.n	800bcd0 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	4413      	add	r3, r2
 800bd14:	330c      	adds	r3, #12
 800bd16:	2200      	movs	r2, #0
 800bd18:	701a      	strb	r2, [r3, #0]
					j=0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	613b      	str	r3, [r7, #16]
					i++;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	3301      	adds	r3, #1
 800bd22:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	330c      	adds	r3, #12
 800bd28:	210a      	movs	r1, #10
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f002 fed5 	bl	800eada <atoi>
 800bd30:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800bd32:	e019      	b.n	800bd68 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	4413      	add	r3, r2
 800bd3a:	3356      	adds	r3, #86	; 0x56
 800bd3c:	7819      	ldrb	r1, [r3, #0]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800bd48:	460a      	mov	r2, r1
 800bd4a:	701a      	strb	r2, [r3, #0]
						j++;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	613b      	str	r3, [r7, #16]
						i++;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	3301      	adds	r3, #1
 800bd56:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	dd03      	ble.n	800bd68 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fb3b 	bl	800c3dc <Lora_rx_del>
							break;
 800bd66:	e006      	b.n	800bd76 <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	3356      	adds	r3, #86	; 0x56
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b2c      	cmp	r3, #44	; 0x2c
 800bd74:	d1de      	bne.n	800bd34 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	693a      	ldr	r2, [r7, #16]
 800bd7a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	613b      	str	r3, [r7, #16]
					i++;
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	3301      	adds	r3, #1
 800bd86:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bd88:	e017      	b.n	800bdba <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	4413      	add	r3, r2
 800bd90:	3356      	adds	r3, #86	; 0x56
 800bd92:	7819      	ldrb	r1, [r3, #0]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	4413      	add	r3, r2
 800bd9a:	3310      	adds	r3, #16
 800bd9c:	460a      	mov	r2, r1
 800bd9e:	701a      	strb	r2, [r3, #0]
						i++;
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	3301      	adds	r3, #1
 800bda4:	617b      	str	r3, [r7, #20]
						j++;
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	dd03      	ble.n	800bdba <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fb12 	bl	800c3dc <Lora_rx_del>
							break;
 800bdb8:	e006      	b.n	800bdc8 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	3356      	adds	r3, #86	; 0x56
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b2c      	cmp	r3, #44	; 0x2c
 800bdc6:	d1e0      	bne.n	800bd8a <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	3310      	adds	r3, #16
 800bdcc:	210a      	movs	r1, #10
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f002 fe83 	bl	800eada <atoi>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	4413      	add	r3, r2
 800bde2:	3310      	adds	r3, #16
 800bde4:	2200      	movs	r2, #0
 800bde6:	701a      	strb	r2, [r3, #0]
					j=0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]
					i++;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800bdf2:	e017      	b.n	800be24 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	3356      	adds	r3, #86	; 0x56
 800bdfc:	7819      	ldrb	r1, [r3, #0]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	4413      	add	r3, r2
 800be04:	3310      	adds	r3, #16
 800be06:	460a      	mov	r2, r1
 800be08:	701a      	strb	r2, [r3, #0]
						i++;
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	3301      	adds	r3, #1
 800be0e:	617b      	str	r3, [r7, #20]
						j++;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	3301      	adds	r3, #1
 800be14:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b05      	cmp	r3, #5
 800be1a:	dd03      	ble.n	800be24 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fadd 	bl	800c3dc <Lora_rx_del>
							break;
 800be22:	e006      	b.n	800be32 <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	4413      	add	r3, r2
 800be2a:	3356      	adds	r3, #86	; 0x56
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	2b0d      	cmp	r3, #13
 800be30:	d1e0      	bne.n	800bdf4 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	4413      	add	r3, r2
 800be38:	3310      	adds	r3, #16
 800be3a:	2200      	movs	r2, #0
 800be3c:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	3310      	adds	r3, #16
 800be42:	210a      	movs	r1, #10
 800be44:	4618      	mov	r0, r3
 800be46:	f002 fe48 	bl	800eada <atoi>
 800be4a:	4602      	mov	r2, r0
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800be60:	e06a      	b.n	800bf38 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800be62:	210d      	movs	r1, #13
 800be64:	481b      	ldr	r0, [pc, #108]	; (800bed4 <LoRa_decode+0x3d4>)
 800be66:	f7f5 fb59 	bl	800151c <ITM0_Write>
			break;
 800be6a:	e065      	b.n	800bf38 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800be6c:	210f      	movs	r1, #15
 800be6e:	481a      	ldr	r0, [pc, #104]	; (800bed8 <LoRa_decode+0x3d8>)
 800be70:	f7f5 fb54 	bl	800151c <ITM0_Write>
			break;
 800be74:	e060      	b.n	800bf38 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800be76:	210f      	movs	r1, #15
 800be78:	4818      	ldr	r0, [pc, #96]	; (800bedc <LoRa_decode+0x3dc>)
 800be7a:	f7f5 fb4f 	bl	800151c <ITM0_Write>
			break;
 800be7e:	e05b      	b.n	800bf38 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800be80:	210e      	movs	r1, #14
 800be82:	4817      	ldr	r0, [pc, #92]	; (800bee0 <LoRa_decode+0x3e0>)
 800be84:	f7f5 fb4a 	bl	800151c <ITM0_Write>
			break;
 800be88:	e056      	b.n	800bf38 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800be8a:	210d      	movs	r1, #13
 800be8c:	4815      	ldr	r0, [pc, #84]	; (800bee4 <LoRa_decode+0x3e4>)
 800be8e:	f7f5 fb45 	bl	800151c <ITM0_Write>
			break;
 800be92:	e051      	b.n	800bf38 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800be94:	2113      	movs	r1, #19
 800be96:	4814      	ldr	r0, [pc, #80]	; (800bee8 <LoRa_decode+0x3e8>)
 800be98:	f7f5 fb40 	bl	800151c <ITM0_Write>
			break;
 800be9c:	e04c      	b.n	800bf38 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800be9e:	210e      	movs	r1, #14
 800bea0:	4812      	ldr	r0, [pc, #72]	; (800beec <LoRa_decode+0x3ec>)
 800bea2:	f7f5 fb3b 	bl	800151c <ITM0_Write>
			break;
 800bea6:	e047      	b.n	800bf38 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800bea8:	2111      	movs	r1, #17
 800beaa:	4811      	ldr	r0, [pc, #68]	; (800bef0 <LoRa_decode+0x3f0>)
 800beac:	f7f5 fb36 	bl	800151c <ITM0_Write>
			break;
 800beb0:	e042      	b.n	800bf38 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800beb2:	2111      	movs	r1, #17
 800beb4:	480f      	ldr	r0, [pc, #60]	; (800bef4 <LoRa_decode+0x3f4>)
 800beb6:	f7f5 fb31 	bl	800151c <ITM0_Write>
			break;
 800beba:	e03d      	b.n	800bf38 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800bebc:	210e      	movs	r1, #14
 800bebe:	480e      	ldr	r0, [pc, #56]	; (800bef8 <LoRa_decode+0x3f8>)
 800bec0:	f7f5 fb2c 	bl	800151c <ITM0_Write>
			break;
 800bec4:	e038      	b.n	800bf38 <LoRa_decode+0x438>
 800bec6:	bf00      	nop
 800bec8:	08010720 	.word	0x08010720
 800becc:	08010734 	.word	0x08010734
 800bed0:	08010744 	.word	0x08010744
 800bed4:	08010754 	.word	0x08010754
 800bed8:	08010764 	.word	0x08010764
 800bedc:	08010774 	.word	0x08010774
 800bee0:	08010784 	.word	0x08010784
 800bee4:	08010794 	.word	0x08010794
 800bee8:	080107a4 	.word	0x080107a4
 800beec:	080107b8 	.word	0x080107b8
 800bef0:	080107c8 	.word	0x080107c8
 800bef4:	080107dc 	.word	0x080107dc
 800bef8:	080107f0 	.word	0x080107f0
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800befc:	210f      	movs	r1, #15
 800befe:	4810      	ldr	r0, [pc, #64]	; (800bf40 <LoRa_decode+0x440>)
 800bf00:	f7f5 fb0c 	bl	800151c <ITM0_Write>
			break;
 800bf04:	e018      	b.n	800bf38 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800bf06:	210e      	movs	r1, #14
 800bf08:	480e      	ldr	r0, [pc, #56]	; (800bf44 <LoRa_decode+0x444>)
 800bf0a:	f7f5 fb07 	bl	800151c <ITM0_Write>
			break;
 800bf0e:	e013      	b.n	800bf38 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800bf10:	210d      	movs	r1, #13
 800bf12:	480d      	ldr	r0, [pc, #52]	; (800bf48 <LoRa_decode+0x448>)
 800bf14:	f7f5 fb02 	bl	800151c <ITM0_Write>
			break;
 800bf18:	e00e      	b.n	800bf38 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800bf1a:	210d      	movs	r1, #13
 800bf1c:	480b      	ldr	r0, [pc, #44]	; (800bf4c <LoRa_decode+0x44c>)
 800bf1e:	f7f5 fafd 	bl	800151c <ITM0_Write>
			break;
 800bf22:	e009      	b.n	800bf38 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800bf24:	2114      	movs	r1, #20
 800bf26:	480a      	ldr	r0, [pc, #40]	; (800bf50 <LoRa_decode+0x450>)
 800bf28:	f7f5 faf8 	bl	800151c <ITM0_Write>
			break;
 800bf2c:	e004      	b.n	800bf38 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800bf2e:	2110      	movs	r1, #16
 800bf30:	4808      	ldr	r0, [pc, #32]	; (800bf54 <LoRa_decode+0x454>)
 800bf32:	f7f5 faf3 	bl	800151c <ITM0_Write>
			break;
 800bf36:	bf00      	nop
	}
 }
 800bf38:	bf00      	nop
 800bf3a:	3718      	adds	r7, #24
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	08010800 	.word	0x08010800
 800bf44:	08010810 	.word	0x08010810
 800bf48:	08010820 	.word	0x08010820
 800bf4c:	08010830 	.word	0x08010830
 800bf50:	08010840 	.word	0x08010840
 800bf54:	08010858 	.word	0x08010858

0800bf58 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b090      	sub	sp, #64	; 0x40
 800bf5c:	af06      	add	r7, sp, #24
 800bf5e:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800bf66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800bf6a:	dd01      	ble.n	800bf70 <Lora_idSTR+0x18>
 800bf6c:	2310      	movs	r3, #16
 800bf6e:	e229      	b.n	800c3c4 <Lora_idSTR+0x46c>
		char data[10];
		int ndata=0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800bf74:	2304      	movs	r3, #4
 800bf76:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h, 0)==1) return _OK ;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bf84:	f107 021c 	add.w	r2, r7, #28
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	f107 0320 	add.w	r3, r7, #32
 800bf90:	9303      	str	r3, [sp, #12]
 800bf92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf96:	9302      	str	r3, [sp, #8]
 800bf98:	f107 030c 	add.w	r3, r7, #12
 800bf9c:	9301      	str	r3, [sp, #4]
 800bf9e:	f107 0310 	add.w	r3, r7, #16
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	4ab9      	ldr	r2, [pc, #740]	; (800c28c <Lora_idSTR+0x334>)
 800bfa8:	f002 f9e6 	bl	800e378 <FT_String_ND>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d101      	bne.n	800bfb6 <Lora_idSTR+0x5e>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e206      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+RCV=");
 800bfb6:	2305      	movs	r3, #5
 800bfb8:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h, 0)==1) return _RCV ;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bfc6:	f107 021c 	add.w	r2, r7, #28
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9304      	str	r3, [sp, #16]
 800bfce:	f107 0320 	add.w	r3, r7, #32
 800bfd2:	9303      	str	r3, [sp, #12]
 800bfd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfd8:	9302      	str	r3, [sp, #8]
 800bfda:	f107 030c 	add.w	r3, r7, #12
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	f107 0310 	add.w	r3, r7, #16
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	4aa9      	ldr	r2, [pc, #676]	; (800c290 <Lora_idSTR+0x338>)
 800bfea:	f002 f9c5 	bl	800e378 <FT_String_ND>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d101      	bne.n	800bff8 <Lora_idSTR+0xa0>
 800bff4:	2301      	movs	r3, #1
 800bff6:	e1e5      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+ERR=");
 800bff8:	2305      	movs	r3, #5
 800bffa:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h, 0)==1) return _ERR ;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c008:	f107 021c 	add.w	r2, r7, #28
 800c00c:	2300      	movs	r3, #0
 800c00e:	9304      	str	r3, [sp, #16]
 800c010:	f107 0320 	add.w	r3, r7, #32
 800c014:	9303      	str	r3, [sp, #12]
 800c016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c01a:	9302      	str	r3, [sp, #8]
 800c01c:	f107 030c 	add.w	r3, r7, #12
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	f107 0310 	add.w	r3, r7, #16
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	4613      	mov	r3, r2
 800c02a:	4a9a      	ldr	r2, [pc, #616]	; (800c294 <Lora_idSTR+0x33c>)
 800c02c:	f002 f9a4 	bl	800e378 <FT_String_ND>
 800c030:	4603      	mov	r3, r0
 800c032:	2b01      	cmp	r3, #1
 800c034:	d101      	bne.n	800c03a <Lora_idSTR+0xe2>
 800c036:	230f      	movs	r3, #15
 800c038:	e1c4      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+RESET");
 800c03a:	2306      	movs	r3, #6
 800c03c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h, 0)==1)return _RESET;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c04a:	f107 021c 	add.w	r2, r7, #28
 800c04e:	2300      	movs	r3, #0
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	f107 0320 	add.w	r3, r7, #32
 800c056:	9303      	str	r3, [sp, #12]
 800c058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c05c:	9302      	str	r3, [sp, #8]
 800c05e:	f107 030c 	add.w	r3, r7, #12
 800c062:	9301      	str	r3, [sp, #4]
 800c064:	f107 0310 	add.w	r3, r7, #16
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	4613      	mov	r3, r2
 800c06c:	4a8a      	ldr	r2, [pc, #552]	; (800c298 <Lora_idSTR+0x340>)
 800c06e:	f002 f983 	bl	800e378 <FT_String_ND>
 800c072:	4603      	mov	r3, r0
 800c074:	2b01      	cmp	r3, #1
 800c076:	d101      	bne.n	800c07c <Lora_idSTR+0x124>
 800c078:	2302      	movs	r3, #2
 800c07a:	e1a3      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+READY");
 800c07c:	2306      	movs	r3, #6
 800c07e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h, 0)==1) return _READY ;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c08c:	f107 021c 	add.w	r2, r7, #28
 800c090:	2300      	movs	r3, #0
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	f107 0320 	add.w	r3, r7, #32
 800c098:	9303      	str	r3, [sp, #12]
 800c09a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c09e:	9302      	str	r3, [sp, #8]
 800c0a0:	f107 030c 	add.w	r3, r7, #12
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	f107 0310 	add.w	r3, r7, #16
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	4a7b      	ldr	r2, [pc, #492]	; (800c29c <Lora_idSTR+0x344>)
 800c0b0:	f002 f962 	bl	800e378 <FT_String_ND>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d101      	bne.n	800c0be <Lora_idSTR+0x166>
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	e182      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+MODE=");
 800c0be:	2306      	movs	r3, #6
 800c0c0:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h, 0)==1) return _MODE ;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c0ce:	f107 021c 	add.w	r2, r7, #28
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	9304      	str	r3, [sp, #16]
 800c0d6:	f107 0320 	add.w	r3, r7, #32
 800c0da:	9303      	str	r3, [sp, #12]
 800c0dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0e0:	9302      	str	r3, [sp, #8]
 800c0e2:	f107 030c 	add.w	r3, r7, #12
 800c0e6:	9301      	str	r3, [sp, #4]
 800c0e8:	f107 0310 	add.w	r3, r7, #16
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	4a6b      	ldr	r2, [pc, #428]	; (800c2a0 <Lora_idSTR+0x348>)
 800c0f2:	f002 f941 	bl	800e378 <FT_String_ND>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d101      	bne.n	800c100 <Lora_idSTR+0x1a8>
 800c0fc:	2304      	movs	r3, #4
 800c0fe:	e161      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+IPR=");
 800c100:	2305      	movs	r3, #5
 800c102:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h, 0)==1) return _IPR ;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c110:	f107 021c 	add.w	r2, r7, #28
 800c114:	2300      	movs	r3, #0
 800c116:	9304      	str	r3, [sp, #16]
 800c118:	f107 0320 	add.w	r3, r7, #32
 800c11c:	9303      	str	r3, [sp, #12]
 800c11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c122:	9302      	str	r3, [sp, #8]
 800c124:	f107 030c 	add.w	r3, r7, #12
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	f107 0310 	add.w	r3, r7, #16
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	4613      	mov	r3, r2
 800c132:	4a5c      	ldr	r2, [pc, #368]	; (800c2a4 <Lora_idSTR+0x34c>)
 800c134:	f002 f920 	bl	800e378 <FT_String_ND>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d101      	bne.n	800c142 <Lora_idSTR+0x1ea>
 800c13e:	2305      	movs	r3, #5
 800c140:	e140      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+PARAMETER=");
 800c142:	230b      	movs	r3, #11
 800c144:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h, 0)==1) return _PARAMETER ;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c152:	f107 021c 	add.w	r2, r7, #28
 800c156:	2300      	movs	r3, #0
 800c158:	9304      	str	r3, [sp, #16]
 800c15a:	f107 0320 	add.w	r3, r7, #32
 800c15e:	9303      	str	r3, [sp, #12]
 800c160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c164:	9302      	str	r3, [sp, #8]
 800c166:	f107 030c 	add.w	r3, r7, #12
 800c16a:	9301      	str	r3, [sp, #4]
 800c16c:	f107 0310 	add.w	r3, r7, #16
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	4613      	mov	r3, r2
 800c174:	4a4c      	ldr	r2, [pc, #304]	; (800c2a8 <Lora_idSTR+0x350>)
 800c176:	f002 f8ff 	bl	800e378 <FT_String_ND>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d101      	bne.n	800c184 <Lora_idSTR+0x22c>
 800c180:	2306      	movs	r3, #6
 800c182:	e11f      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+BAND=");
 800c184:	2306      	movs	r3, #6
 800c186:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h, 0)==1) return _BAND ;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c194:	f107 021c 	add.w	r2, r7, #28
 800c198:	2300      	movs	r3, #0
 800c19a:	9304      	str	r3, [sp, #16]
 800c19c:	f107 0320 	add.w	r3, r7, #32
 800c1a0:	9303      	str	r3, [sp, #12]
 800c1a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1a6:	9302      	str	r3, [sp, #8]
 800c1a8:	f107 030c 	add.w	r3, r7, #12
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	f107 0310 	add.w	r3, r7, #16
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	4a3d      	ldr	r2, [pc, #244]	; (800c2ac <Lora_idSTR+0x354>)
 800c1b8:	f002 f8de 	bl	800e378 <FT_String_ND>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d101      	bne.n	800c1c6 <Lora_idSTR+0x26e>
 800c1c2:	2307      	movs	r3, #7
 800c1c4:	e0fe      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+ADDRESS=");
 800c1c6:	2309      	movs	r3, #9
 800c1c8:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h, 0)==1) return _ADDRESS ;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c1d6:	f107 021c 	add.w	r2, r7, #28
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9304      	str	r3, [sp, #16]
 800c1de:	f107 0320 	add.w	r3, r7, #32
 800c1e2:	9303      	str	r3, [sp, #12]
 800c1e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1e8:	9302      	str	r3, [sp, #8]
 800c1ea:	f107 030c 	add.w	r3, r7, #12
 800c1ee:	9301      	str	r3, [sp, #4]
 800c1f0:	f107 0310 	add.w	r3, r7, #16
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	4a2d      	ldr	r2, [pc, #180]	; (800c2b0 <Lora_idSTR+0x358>)
 800c1fa:	f002 f8bd 	bl	800e378 <FT_String_ND>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b01      	cmp	r3, #1
 800c202:	d101      	bne.n	800c208 <Lora_idSTR+0x2b0>
 800c204:	2308      	movs	r3, #8
 800c206:	e0dd      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+NETWORK=");
 800c208:	2309      	movs	r3, #9
 800c20a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h, 0)==1) return _NETWORK ;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c218:	f107 021c 	add.w	r2, r7, #28
 800c21c:	2300      	movs	r3, #0
 800c21e:	9304      	str	r3, [sp, #16]
 800c220:	f107 0320 	add.w	r3, r7, #32
 800c224:	9303      	str	r3, [sp, #12]
 800c226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c22a:	9302      	str	r3, [sp, #8]
 800c22c:	f107 030c 	add.w	r3, r7, #12
 800c230:	9301      	str	r3, [sp, #4]
 800c232:	f107 0310 	add.w	r3, r7, #16
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	4613      	mov	r3, r2
 800c23a:	4a1e      	ldr	r2, [pc, #120]	; (800c2b4 <Lora_idSTR+0x35c>)
 800c23c:	f002 f89c 	bl	800e378 <FT_String_ND>
 800c240:	4603      	mov	r3, r0
 800c242:	2b01      	cmp	r3, #1
 800c244:	d101      	bne.n	800c24a <Lora_idSTR+0x2f2>
 800c246:	2309      	movs	r3, #9
 800c248:	e0bc      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+CPIN=");
 800c24a:	2306      	movs	r3, #6
 800c24c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h, 0)==1) return _CPIN ;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c25a:	f107 021c 	add.w	r2, r7, #28
 800c25e:	2300      	movs	r3, #0
 800c260:	9304      	str	r3, [sp, #16]
 800c262:	f107 0320 	add.w	r3, r7, #32
 800c266:	9303      	str	r3, [sp, #12]
 800c268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c26c:	9302      	str	r3, [sp, #8]
 800c26e:	f107 030c 	add.w	r3, r7, #12
 800c272:	9301      	str	r3, [sp, #4]
 800c274:	f107 0310 	add.w	r3, r7, #16
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	4613      	mov	r3, r2
 800c27c:	4a0e      	ldr	r2, [pc, #56]	; (800c2b8 <Lora_idSTR+0x360>)
 800c27e:	f002 f87b 	bl	800e378 <FT_String_ND>
 800c282:	4603      	mov	r3, r0
 800c284:	2b01      	cmp	r3, #1
 800c286:	d119      	bne.n	800c2bc <Lora_idSTR+0x364>
 800c288:	230a      	movs	r3, #10
 800c28a:	e09b      	b.n	800c3c4 <Lora_idSTR+0x46c>
 800c28c:	0801086c 	.word	0x0801086c
 800c290:	08010874 	.word	0x08010874
 800c294:	0801087c 	.word	0x0801087c
 800c298:	08010884 	.word	0x08010884
 800c29c:	0801088c 	.word	0x0801088c
 800c2a0:	08010894 	.word	0x08010894
 800c2a4:	0801089c 	.word	0x0801089c
 800c2a8:	080108a4 	.word	0x080108a4
 800c2ac:	080108b0 	.word	0x080108b0
 800c2b0:	080108b8 	.word	0x080108b8
 800c2b4:	080108c4 	.word	0x080108c4
 800c2b8:	080108d0 	.word	0x080108d0
		i=strlen("+CRFOP=");
 800c2bc:	2307      	movs	r3, #7
 800c2be:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h, 0)==1) return _CRFOP ;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c2cc:	f107 021c 	add.w	r2, r7, #28
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	9304      	str	r3, [sp, #16]
 800c2d4:	f107 0320 	add.w	r3, r7, #32
 800c2d8:	9303      	str	r3, [sp, #12]
 800c2da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2de:	9302      	str	r3, [sp, #8]
 800c2e0:	f107 030c 	add.w	r3, r7, #12
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	f107 0310 	add.w	r3, r7, #16
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	4a37      	ldr	r2, [pc, #220]	; (800c3cc <Lora_idSTR+0x474>)
 800c2f0:	f002 f842 	bl	800e378 <FT_String_ND>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d101      	bne.n	800c2fe <Lora_idSTR+0x3a6>
 800c2fa:	230b      	movs	r3, #11
 800c2fc:	e062      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+SEND=");
 800c2fe:	2306      	movs	r3, #6
 800c300:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h, 0)==1) return _SEND ;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c30e:	f107 021c 	add.w	r2, r7, #28
 800c312:	2300      	movs	r3, #0
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	f107 0320 	add.w	r3, r7, #32
 800c31a:	9303      	str	r3, [sp, #12]
 800c31c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c320:	9302      	str	r3, [sp, #8]
 800c322:	f107 030c 	add.w	r3, r7, #12
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	f107 0310 	add.w	r3, r7, #16
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	4613      	mov	r3, r2
 800c330:	4a27      	ldr	r2, [pc, #156]	; (800c3d0 <Lora_idSTR+0x478>)
 800c332:	f002 f821 	bl	800e378 <FT_String_ND>
 800c336:	4603      	mov	r3, r0
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d101      	bne.n	800c340 <Lora_idSTR+0x3e8>
 800c33c:	230c      	movs	r3, #12
 800c33e:	e041      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+UID=");
 800c340:	2305      	movs	r3, #5
 800c342:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h, 0)==1) return _UID ;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c350:	f107 021c 	add.w	r2, r7, #28
 800c354:	2300      	movs	r3, #0
 800c356:	9304      	str	r3, [sp, #16]
 800c358:	f107 0320 	add.w	r3, r7, #32
 800c35c:	9303      	str	r3, [sp, #12]
 800c35e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c362:	9302      	str	r3, [sp, #8]
 800c364:	f107 030c 	add.w	r3, r7, #12
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	f107 0310 	add.w	r3, r7, #16
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	4613      	mov	r3, r2
 800c372:	4a18      	ldr	r2, [pc, #96]	; (800c3d4 <Lora_idSTR+0x47c>)
 800c374:	f002 f800 	bl	800e378 <FT_String_ND>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d101      	bne.n	800c382 <Lora_idSTR+0x42a>
 800c37e:	230e      	movs	r3, #14
 800c380:	e020      	b.n	800c3c4 <Lora_idSTR+0x46c>
		i=strlen("+VER=");
 800c382:	2305      	movs	r3, #5
 800c384:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h, 0)==1) return _VER ;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c392:	f107 021c 	add.w	r2, r7, #28
 800c396:	2300      	movs	r3, #0
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	f107 0320 	add.w	r3, r7, #32
 800c39e:	9303      	str	r3, [sp, #12]
 800c3a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3a4:	9302      	str	r3, [sp, #8]
 800c3a6:	f107 030c 	add.w	r3, r7, #12
 800c3aa:	9301      	str	r3, [sp, #4]
 800c3ac:	f107 0310 	add.w	r3, r7, #16
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	4a08      	ldr	r2, [pc, #32]	; (800c3d8 <Lora_idSTR+0x480>)
 800c3b6:	f001 ffdf 	bl	800e378 <FT_String_ND>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d101      	bne.n	800c3c4 <Lora_idSTR+0x46c>
 800c3c0:	230d      	movs	r3, #13
 800c3c2:	e7ff      	b.n	800c3c4 <Lora_idSTR+0x46c>
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3728      	adds	r7, #40	; 0x28
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	080108d8 	.word	0x080108d8
 800c3d0:	080108e0 	.word	0x080108e0
 800c3d4:	080108e8 	.word	0x080108e8
 800c3d8:	080108f0 	.word	0x080108f0

0800c3dc <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800c402:	bf00      	nop
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
	...

0800c410 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f241 3288 	movw	r2, #5000	; 0x1388
 800c42a:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2220      	movs	r2, #32
 800c436:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4a1c      	ldr	r2, [pc, #112]	; (800c4b0 <ModBUS_Config+0xa0>)
 800c43e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2220      	movs	r2, #32
 800c44c:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a18      	ldr	r2, [pc, #96]	; (800c4b4 <ModBUS_Config+0xa4>)
 800c454:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2210      	movs	r2, #16
 800c462:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2210      	movs	r2, #16
 800c470:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2220      	movs	r2, #32
 800c47e:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2201      	movs	r2, #1
 800c486:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2220      	movs	r2, #32
 800c492:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2201      	movs	r2, #1
 800c49a:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2220      	movs	r2, #32
 800c4a0:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	f0f0af5a 	.word	0xf0f0af5a
 800c4b4:	a5fa0f0f 	.word	0xa5fa0f0f

0800c4b8 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	3305      	adds	r3, #5
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	3306      	adds	r3, #6
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d10b      	bne.n	800c4e8 <ModBUS_Check+0x30>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	3302      	adds	r3, #2
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	3303      	adds	r3, #3
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	4413      	add	r3, r2
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <ModBUS_Check+0x30>
	{
		return(1);
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e000      	b.n	800c4ea <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800c4e8:	2300      	movs	r3, #0
	}
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b083      	sub	sp, #12
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	7b5b      	ldrb	r3, [r3, #13]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d11d      	bne.n	800c548 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c516:	429a      	cmp	r2, r3
 800c518:	d116      	bne.n	800c548 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c524:	429a      	cmp	r2, r3
 800c526:	d10f      	bne.n	800c548 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c532:	429a      	cmp	r2, r3
 800c534:	d108      	bne.n	800c548 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c540:	429a      	cmp	r2, r3
 800c542:	d101      	bne.n	800c548 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c544:	2301      	movs	r3, #1
 800c546:	e000      	b.n	800c54a <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c548:	2300      	movs	r3, #0
	}
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	370c      	adds	r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800c556:	b480      	push	{r7}
 800c558:	b085      	sub	sp, #20
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	460b      	mov	r3, r1
 800c560:	70fb      	strb	r3, [r7, #3]
 800c562:	4613      	mov	r3, r2
 800c564:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800c566:	2300      	movs	r3, #0
 800c568:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c570:	78fa      	ldrb	r2, [r7, #3]
 800c572:	429a      	cmp	r2, r3
 800c574:	d901      	bls.n	800c57a <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c576:	2301      	movs	r3, #1
 800c578:	e015      	b.n	800c5a6 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800c57a:	78fb      	ldrb	r3, [r7, #3]
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	3301      	adds	r3, #1
 800c580:	883a      	ldrh	r2, [r7, #0]
 800c582:	b2d1      	uxtb	r1, r2
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	4413      	add	r3, r2
 800c588:	460a      	mov	r2, r1
 800c58a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800c58e:	883b      	ldrh	r3, [r7, #0]
 800c590:	0a1b      	lsrs	r3, r3, #8
 800c592:	b29b      	uxth	r3, r3
 800c594:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800c596:	78fb      	ldrb	r3, [r7, #3]
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	4413      	add	r3, r2
 800c59e:	7bfa      	ldrb	r2, [r7, #15]
 800c5a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800c5a4:	2300      	movs	r3, #0
	}
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr

0800c5b2 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b085      	sub	sp, #20
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c5cc:	78fa      	ldrb	r2, [r7, #3]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d901      	bls.n	800c5d6 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e015      	b.n	800c602 <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800c5d6:	78fb      	ldrb	r3, [r7, #3]
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	4413      	add	r3, r2
 800c5de:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c5e2:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800c5e4:	89fb      	ldrh	r3, [r7, #14]
 800c5e6:	021b      	lsls	r3, r3, #8
 800c5e8:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800c5ea:	78fb      	ldrb	r3, [r7, #3]
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	89fb      	ldrh	r3, [r7, #14]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800c600:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	460b      	mov	r3, r1
 800c618:	807b      	strh	r3, [r7, #2]
 800c61a:	4613      	mov	r3, r2
 800c61c:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800c61e:	887b      	ldrh	r3, [r7, #2]
 800c620:	2b00      	cmp	r3, #0
 800c622:	bf14      	ite	ne
 800c624:	2301      	movne	r3, #1
 800c626:	2300      	moveq	r3, #0
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	461a      	mov	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800c632:	887b      	ldrh	r3, [r7, #2]
 800c634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c638:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800c63a:	887b      	ldrh	r3, [r7, #2]
 800c63c:	0a1b      	lsrs	r3, r3, #8
 800c63e:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800c640:	887b      	ldrh	r3, [r7, #2]
 800c642:	f003 030f 	and.w	r3, r3, #15
 800c646:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2206      	movs	r2, #6
 800c674:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	781a      	ldrb	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2203      	movs	r2, #3
 800c686:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800c68a:	887b      	ldrh	r3, [r7, #2]
 800c68c:	b2da      	uxtb	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	787a      	ldrb	r2, [r7, #1]
 800c6a0:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	220c      	movs	r2, #12
 800c6a8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800c6ac:	bf00      	nop
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
	...

0800c6bc <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b09c      	sub	sp, #112	; 0x70
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	785b      	ldrb	r3, [r3, #1]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	f041 813f 	bne.w	800d94c <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f103 020d 	add.w	r2, r3, #13
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4610      	mov	r0, r2
 800c6de:	f7ff feeb 	bl	800c4b8 <ModBUS_Check>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f001 812f 	beq.w	800d948 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	7d1b      	ldrb	r3, [r3, #20]
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	2b0f      	cmp	r3, #15
 800c6f2:	f201 80f3 	bhi.w	800d8dc <ModBUS+0x1220>
 800c6f6:	a201      	add	r2, pc, #4	; (adr r2, 800c6fc <ModBUS+0x40>)
 800c6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fc:	0800c73d 	.word	0x0800c73d
 800c700:	0800c97d 	.word	0x0800c97d
 800c704:	0800cbbd 	.word	0x0800cbbd
 800c708:	0800cdf5 	.word	0x0800cdf5
 800c70c:	0800d02d 	.word	0x0800d02d
 800c710:	0800d243 	.word	0x0800d243
 800c714:	0800d8dd 	.word	0x0800d8dd
 800c718:	0800d8dd 	.word	0x0800d8dd
 800c71c:	0800d8dd 	.word	0x0800d8dd
 800c720:	0800d8dd 	.word	0x0800d8dd
 800c724:	0800d8dd 	.word	0x0800d8dd
 800c728:	0800d8dd 	.word	0x0800d8dd
 800c72c:	0800d8dd 	.word	0x0800d8dd
 800c730:	0800d8dd 	.word	0x0800d8dd
 800c734:	0800d3ff 	.word	0x0800d3ff
 800c738:	0800d68f 	.word	0x0800d68f

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	7c5a      	ldrb	r2, [r3, #17]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	7c1a      	ldrb	r2, [r3, #16]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	7bda      	ldrb	r2, [r3, #15]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	7b9a      	ldrb	r2, [r3, #14]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	7b5a      	ldrb	r2, [r3, #13]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c76e:	2300      	movs	r3, #0
 800c770:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	795b      	ldrb	r3, [r3, #5]
 800c776:	2b01      	cmp	r3, #1
 800c778:	f040 80e6 	bne.w	800c948 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7d5b      	ldrb	r3, [r3, #21]
 800c780:	b29a      	uxth	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c78e:	021b      	lsls	r3, r3, #8
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c79e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	7d9b      	ldrb	r3, [r3, #22]
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	7ddb      	ldrb	r3, [r3, #23]
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c7d2:	021b      	lsls	r3, r3, #8
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c7e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	7e1b      	ldrb	r3, [r3, #24]
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800c810:	b29b      	uxth	r3, r3
 800c812:	429a      	cmp	r2, r3
 800c814:	d87e      	bhi.n	800c914 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c81c:	461a      	mov	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c824:	4413      	add	r3, r2
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800c82c:	4293      	cmp	r3, r2
 800c82e:	dc57      	bgt.n	800c8e0 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c830:	2300      	movs	r3, #0
 800c832:	613b      	str	r3, [r7, #16]
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	2300      	movs	r3, #0
 800c83a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c83c:	2300      	movs	r3, #0
 800c83e:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800c840:	2300      	movs	r3, #0
 800c842:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800c850:	40d3      	lsrs	r3, r2
 800c852:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c85a:	08db      	lsrs	r3, r3, #3
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d102      	bne.n	800c878 <ModBUS+0x1bc>
									{
										bytes=div;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c876:	e002      	b.n	800c87e <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	3301      	adds	r3, #1
 800c87c:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800c87e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c880:	b2da      	uxtb	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800c888:	e00e      	b.n	800c8a8 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c88a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c88c:	3308      	adds	r3, #8
 800c88e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c890:	b2d1      	uxtb	r1, r2
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	4413      	add	r3, r2
 800c896:	460a      	mov	r2, r1
 800c898:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800c89c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c89e:	0a1b      	lsrs	r3, r3, #8
 800c8a0:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800c8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800c8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	dced      	bgt.n	800c88a <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c8c4:	3303      	adds	r3, #3
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c8d4:	1d9a      	adds	r2, r3, #6
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c8dc:	f001 b8d5 	b.w	800da8a <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2202      	movs	r2, #2
 800c8e4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2281      	movs	r2, #129	; 0x81
 800c8ec:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2203      	movs	r2, #3
 800c8fc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c906:	1d9a      	adds	r2, r3, #6
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c90e:	2302      	movs	r3, #2
 800c910:	f001 b8bb 	b.w	800da8a <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2203      	movs	r2, #3
 800c918:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2281      	movs	r2, #129	; 0x81
 800c920:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2203      	movs	r2, #3
 800c930:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c93a:	1d9a      	adds	r2, r3, #6
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c942:	2303      	movs	r3, #3
 800c944:	f001 b8a1 	b.w	800da8a <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2281      	movs	r2, #129	; 0x81
 800c954:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2203      	movs	r2, #3
 800c964:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c96e:	1d9a      	adds	r2, r3, #6
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c976:	2301      	movs	r3, #1
 800c978:	f001 b887 	b.w	800da8a <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	7c5a      	ldrb	r2, [r3, #17]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	7c1a      	ldrb	r2, [r3, #16]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	7bda      	ldrb	r2, [r3, #15]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	7b9a      	ldrb	r2, [r3, #14]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	7b5a      	ldrb	r2, [r3, #13]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	799b      	ldrb	r3, [r3, #6]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	f040 80e6 	bne.w	800cb88 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7d5b      	ldrb	r3, [r3, #21]
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	b29a      	uxth	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800c9de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7d9b      	ldrb	r3, [r3, #22]
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	7ddb      	ldrb	r3, [r3, #23]
 800ca04:	b29a      	uxth	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ca12:	021b      	lsls	r3, r3, #8
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ca22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca26:	b29a      	uxth	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	7e1b      	ldrb	r3, [r3, #24]
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d87e      	bhi.n	800cb54 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ca64:	4413      	add	r3, r2
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	dc57      	bgt.n	800cb20 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	623b      	str	r3, [r7, #32]
 800ca74:	2300      	movs	r3, #0
 800ca76:	61fb      	str	r3, [r7, #28]
 800ca78:	2300      	movs	r3, #0
 800ca7a:	667b      	str	r3, [r7, #100]	; 0x64
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800ca90:	40d3      	lsrs	r3, r2
 800ca92:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ca9a:	08db      	lsrs	r3, r3, #3
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800caa6:	f003 0307 	and.w	r3, r3, #7
 800caaa:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d102      	bne.n	800cab8 <ModBUS+0x3fc>
									{
										bytes=div;
 800cab2:	6a3b      	ldr	r3, [r7, #32]
 800cab4:	667b      	str	r3, [r7, #100]	; 0x64
 800cab6:	e002      	b.n	800cabe <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	3301      	adds	r3, #1
 800cabc:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800cabe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cac0:	b2da      	uxtb	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800cac8:	e00e      	b.n	800cae8 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800caca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cacc:	3308      	adds	r3, #8
 800cace:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cad0:	b2d1      	uxtb	r1, r2
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	4413      	add	r3, r2
 800cad6:	460a      	mov	r2, r1
 800cad8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cadc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cade:	0a1b      	lsrs	r3, r3, #8
 800cae0:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800cae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cae4:	3b01      	subs	r3, #1
 800cae6:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800cae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caea:	2b00      	cmp	r3, #0
 800caec:	dced      	bgt.n	800caca <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2202      	movs	r2, #2
 800caf2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cb04:	3303      	adds	r3, #3
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb14:	1d9a      	adds	r2, r3, #6
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cb1c:	f000 bfb5 	b.w	800da8a <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2202      	movs	r2, #2
 800cb24:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2282      	movs	r2, #130	; 0x82
 800cb2c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2203      	movs	r2, #3
 800cb3c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb46:	1d9a      	adds	r2, r3, #6
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cb4e:	2302      	movs	r3, #2
 800cb50:	f000 bf9b 	b.w	800da8a <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2203      	movs	r2, #3
 800cb58:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2282      	movs	r2, #130	; 0x82
 800cb60:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2203      	movs	r2, #3
 800cb70:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb7a:	1d9a      	adds	r2, r3, #6
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cb82:	2303      	movs	r3, #3
 800cb84:	f000 bf81 	b.w	800da8a <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2282      	movs	r2, #130	; 0x82
 800cb94:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2203      	movs	r2, #3
 800cba4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cbae:	1d9a      	adds	r2, r3, #6
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	f000 bf67 	b.w	800da8a <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	7c5a      	ldrb	r2, [r3, #17]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	7c1a      	ldrb	r2, [r3, #16]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7bda      	ldrb	r2, [r3, #15]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	7b9a      	ldrb	r2, [r3, #14]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	7b5a      	ldrb	r2, [r3, #13]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	79db      	ldrb	r3, [r3, #7]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	f040 80e2 	bne.w	800cdc0 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	7d5b      	ldrb	r3, [r3, #21]
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cc0e:	021b      	lsls	r3, r3, #8
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cc1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	7d9b      	ldrb	r3, [r3, #22]
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	4313      	orrs	r3, r2
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7ddb      	ldrb	r3, [r3, #23]
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cc52:	021b      	lsls	r3, r3, #8
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cc62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	7e1b      	ldrb	r3, [r3, #24]
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d87a      	bhi.n	800cd8c <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cca4:	4413      	add	r3, r2
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800ccac:	4293      	cmp	r3, r2
 800ccae:	dc53      	bgt.n	800cd58 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800ccb0:	e029      	b.n	800cd06 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800ccb8:	461a      	mov	r2, r3
 800ccba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccbc:	4413      	add	r3, r2
 800ccbe:	005a      	lsls	r2, r3, #1
 800ccc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	3309      	adds	r3, #9
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	440a      	add	r2, r1
 800ccca:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	460a      	mov	r2, r1
 800ccd4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800ccde:	461a      	mov	r2, r3
 800cce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cce2:	4413      	add	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccea:	3305      	adds	r3, #5
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	440a      	add	r2, r1
 800ccf2:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	460a      	mov	r2, r1
 800ccfc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800cd00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd02:	3301      	adds	r3, #1
 800cd04:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd10:	4293      	cmp	r3, r2
 800cd12:	dbce      	blt.n	800ccb2 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	005b      	lsls	r3, r3, #1
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2203      	movs	r2, #3
 800cd2a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cd3c:	3303      	adds	r3, #3
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd4c:	1d9a      	adds	r2, r3, #6
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cd54:	f000 be99 	b.w	800da8a <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2283      	movs	r2, #131	; 0x83
 800cd64:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2203      	movs	r2, #3
 800cd74:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd7e:	1d9a      	adds	r2, r3, #6
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cd86:	2302      	movs	r3, #2
 800cd88:	f000 be7f 	b.w	800da8a <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2203      	movs	r2, #3
 800cd90:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2283      	movs	r2, #131	; 0x83
 800cd98:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2203      	movs	r2, #3
 800cda8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdb2:	1d9a      	adds	r2, r3, #6
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cdba:	2303      	movs	r3, #3
 800cdbc:	f000 be65 	b.w	800da8a <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2283      	movs	r2, #131	; 0x83
 800cdcc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2203      	movs	r2, #3
 800cddc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cde6:	1d9a      	adds	r2, r3, #6
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cdee:	2301      	movs	r3, #1
 800cdf0:	f000 be4b 	b.w	800da8a <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	7c5a      	ldrb	r2, [r3, #17]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	7c1a      	ldrb	r2, [r3, #16]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	7bda      	ldrb	r2, [r3, #15]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7b9a      	ldrb	r2, [r3, #14]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	7b5a      	ldrb	r2, [r3, #13]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7a1b      	ldrb	r3, [r3, #8]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	f040 80e2 	bne.w	800cff8 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	7d5b      	ldrb	r3, [r3, #21]
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800ce46:	021b      	lsls	r3, r3, #8
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800ce56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	7d9b      	ldrb	r3, [r3, #22]
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	7ddb      	ldrb	r3, [r3, #23]
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800ce8a:	021b      	lsls	r3, r3, #8
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800ce9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	7e1b      	ldrb	r3, [r3, #24]
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d87a      	bhi.n	800cfc4 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800ced4:	461a      	mov	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cedc:	4413      	add	r3, r2
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800cee4:	4293      	cmp	r3, r2
 800cee6:	dc53      	bgt.n	800cf90 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800cee8:	e029      	b.n	800cf3e <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800cef0:	461a      	mov	r2, r3
 800cef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cef4:	4413      	add	r3, r2
 800cef6:	005a      	lsls	r2, r3, #1
 800cef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cefa:	005b      	lsls	r3, r3, #1
 800cefc:	3309      	adds	r3, #9
 800cefe:	6879      	ldr	r1, [r7, #4]
 800cf00:	440a      	add	r2, r1
 800cf02:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	4413      	add	r3, r2
 800cf0a:	460a      	mov	r2, r1
 800cf0c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800cf16:	461a      	mov	r2, r3
 800cf18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf1a:	4413      	add	r3, r2
 800cf1c:	005b      	lsls	r3, r3, #1
 800cf1e:	1c5a      	adds	r2, r3, #1
 800cf20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf22:	3305      	adds	r3, #5
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	6879      	ldr	r1, [r7, #4]
 800cf28:	440a      	add	r2, r1
 800cf2a:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	4413      	add	r3, r2
 800cf32:	460a      	mov	r2, r1
 800cf34:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800cf38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cf44:	461a      	mov	r2, r3
 800cf46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	dbce      	blt.n	800ceea <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2204      	movs	r2, #4
 800cf62:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cf74:	3303      	adds	r3, #3
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cf84:	1d9a      	adds	r2, r3, #6
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cf8c:	f000 bd7d 	b.w	800da8a <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2202      	movs	r2, #2
 800cf94:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2284      	movs	r2, #132	; 0x84
 800cf9c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2203      	movs	r2, #3
 800cfac:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfb6:	1d9a      	adds	r2, r3, #6
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cfbe:	2302      	movs	r3, #2
 800cfc0:	f000 bd63 	b.w	800da8a <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2203      	movs	r2, #3
 800cfc8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2284      	movs	r2, #132	; 0x84
 800cfd0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2203      	movs	r2, #3
 800cfe0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfea:	1d9a      	adds	r2, r3, #6
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cff2:	2303      	movs	r3, #3
 800cff4:	f000 bd49 	b.w	800da8a <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2284      	movs	r2, #132	; 0x84
 800d004:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2203      	movs	r2, #3
 800d014:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d01e:	1d9a      	adds	r2, r3, #6
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d026:	2301      	movs	r3, #1
 800d028:	f000 bd2f 	b.w	800da8a <ModBUS+0x13ce>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	7c5a      	ldrb	r2, [r3, #17]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	7c1a      	ldrb	r2, [r3, #16]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	7bda      	ldrb	r2, [r3, #15]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	7b9a      	ldrb	r2, [r3, #14]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7b5a      	ldrb	r2, [r3, #13]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800d05e:	2300      	movs	r3, #0
 800d060:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	7a5b      	ldrb	r3, [r3, #9]
 800d066:	2b01      	cmp	r3, #1
 800d068:	f040 80d1 	bne.w	800d20e <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	7d5b      	ldrb	r3, [r3, #21]
 800d070:	b29a      	uxth	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d07e:	021b      	lsls	r3, r3, #8
 800d080:	b29a      	uxth	r2, r3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d08e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d092:	b29a      	uxth	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	7d9b      	ldrb	r3, [r3, #22]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	7ddb      	ldrb	r3, [r3, #23]
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d0c2:	021b      	lsls	r3, r3, #8
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d0d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	7e1b      	ldrb	r3, [r3, #24]
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d102:	429a      	cmp	r2, r3
 800d104:	dd69      	ble.n	800d1da <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d005      	beq.n	800d11c <ModBUS+0xa60>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d116:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d11a:	d144      	bne.n	800d1a6 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d122:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d126:	d10d      	bne.n	800d144 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800d134:	4611      	mov	r1, r2
 800d136:	2201      	movs	r2, #1
 800d138:	408a      	lsls	r2, r1
 800d13a:	431a      	orrs	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800d142:	e003      	b.n	800d14c <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7e1a      	ldrb	r2, [r3, #24]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	7dda      	ldrb	r2, [r3, #23]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	7d9a      	ldrb	r2, [r3, #22]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	7d5a      	ldrb	r2, [r3, #21]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2205      	movs	r2, #5
 800d178:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d18a:	3306      	adds	r3, #6
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d19a:	1d9a      	adds	r2, r3, #6
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d1a2:	f000 bc72 	b.w	800da8a <ModBUS+0x13ce>
												m3->_MBUS_2SND[8]=0x02;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2285      	movs	r2, #133	; 0x85
 800d1b2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2203      	movs	r2, #3
 800d1c2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d1cc:	1d9a      	adds	r2, r3, #6
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800d1d4:	2302      	movs	r3, #2
 800d1d6:	f000 bc58 	b.w	800da8a <ModBUS+0x13ce>
											m3->_MBUS_2SND[8]=0x03;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2203      	movs	r2, #3
 800d1de:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2285      	movs	r2, #133	; 0x85
 800d1e6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2203      	movs	r2, #3
 800d1f6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d200:	1d9a      	adds	r2, r3, #6
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800d208:	2303      	movs	r3, #3
 800d20a:	f000 bc3e 	b.w	800da8a <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x01;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2285      	movs	r2, #133	; 0x85
 800d21a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2203      	movs	r2, #3
 800d22a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d234:	1d9a      	adds	r2, r3, #6
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800d23c:	2301      	movs	r3, #1
 800d23e:	f000 bc24 	b.w	800da8a <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	7c5a      	ldrb	r2, [r3, #17]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	7c1a      	ldrb	r2, [r3, #16]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	7bda      	ldrb	r2, [r3, #15]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	7b9a      	ldrb	r2, [r3, #14]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7b5a      	ldrb	r2, [r3, #13]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d274:	2300      	movs	r3, #0
 800d276:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d278:	2300      	movs	r3, #0
 800d27a:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	7a9b      	ldrb	r3, [r3, #10]
 800d280:	2b01      	cmp	r3, #1
 800d282:	f040 80a3 	bne.w	800d3cc <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	7d5b      	ldrb	r3, [r3, #21]
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d298:	021b      	lsls	r3, r3, #8
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d2a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	7d9b      	ldrb	r3, [r3, #22]
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d2d0:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	7ddb      	ldrb	r3, [r3, #23]
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d2e4:	021b      	lsls	r3, r3, #8
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d2f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	7e1b      	ldrb	r3, [r3, #24]
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	4313      	orrs	r3, r2
 800d30e:	b29a      	uxth	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800d322:	b29b      	uxth	r3, r3
 800d324:	429a      	cmp	r2, r3
 800d326:	d838      	bhi.n	800d39a <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d328:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	7dd1      	ldrb	r1, [r2, #23]
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	4413      	add	r3, r2
 800d332:	460a      	mov	r2, r1
 800d334:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d338:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d33a:	3301      	adds	r3, #1
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	7e11      	ldrb	r1, [r2, #24]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	4413      	add	r3, r2
 800d344:	460a      	mov	r2, r1
 800d346:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	7e1a      	ldrb	r2, [r3, #24]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	7dda      	ldrb	r2, [r3, #23]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	7d9a      	ldrb	r2, [r3, #22]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	7d5a      	ldrb	r2, [r3, #21]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2206      	movs	r2, #6
 800d376:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2201      	movs	r2, #1
 800d37e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2206      	movs	r2, #6
 800d386:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d390:	1d9a      	adds	r2, r3, #6
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d398:	e377      	b.n	800da8a <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2202      	movs	r2, #2
 800d39e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2286      	movs	r2, #134	; 0x86
 800d3a6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2203      	movs	r2, #3
 800d3b6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3c0:	1d9a      	adds	r2, r3, #6
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	e35e      	b.n	800da8a <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2286      	movs	r2, #134	; 0x86
 800d3d8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2203      	movs	r2, #3
 800d3e8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3f2:	1d9a      	adds	r2, r3, #6
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e345      	b.n	800da8a <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	7c5a      	ldrb	r2, [r3, #17]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	7c1a      	ldrb	r2, [r3, #16]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	7bda      	ldrb	r2, [r3, #15]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	7b9a      	ldrb	r2, [r3, #14]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7b5a      	ldrb	r2, [r3, #13]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d430:	2300      	movs	r3, #0
 800d432:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7adb      	ldrb	r3, [r3, #11]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	f040 810f 	bne.w	800d65c <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7d5b      	ldrb	r3, [r3, #21]
 800d442:	b29a      	uxth	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d450:	021b      	lsls	r3, r3, #8
 800d452:	b29a      	uxth	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d460:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d464:	b29a      	uxth	r2, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	7d9b      	ldrb	r3, [r3, #22]
 800d476:	b29b      	uxth	r3, r3
 800d478:	4313      	orrs	r3, r2
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	7ddb      	ldrb	r3, [r3, #23]
 800d486:	b29a      	uxth	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d494:	021b      	lsls	r3, r3, #8
 800d496:	b29a      	uxth	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d4a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7e1b      	ldrb	r3, [r3, #24]
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	f200 80a8 	bhi.w	800d62a <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d4e8:	4413      	add	r3, r2
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	f300 8081 	bgt.w	800d5f8 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	657b      	str	r3, [r7, #84]	; 0x54
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	653b      	str	r3, [r7, #80]	; 0x50
 800d4fe:	2300      	movs	r3, #0
 800d500:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d502:	2300      	movs	r3, #0
 800d504:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	7e5b      	ldrb	r3, [r3, #25]
 800d50a:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800d50c:	e00e      	b.n	800d52c <ModBUS+0xe70>
									{
										data=data<<8;
 800d50e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d510:	021b      	lsls	r3, r3, #8
 800d512:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800d514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d516:	330c      	adds	r3, #12
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	4413      	add	r3, r2
 800d51c:	7b5b      	ldrb	r3, [r3, #13]
 800d51e:	461a      	mov	r2, r3
 800d520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d522:	4313      	orrs	r3, r2
 800d524:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d528:	3b01      	subs	r3, #1
 800d52a:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d1ed      	bne.n	800d50e <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d538:	461a      	mov	r2, r3
 800d53a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d53c:	4093      	lsls	r3, r2
 800d53e:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d540:	e00f      	b.n	800d562 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d548:	461a      	mov	r2, r3
 800d54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d54c:	4413      	add	r3, r2
 800d54e:	2201      	movs	r2, #1
 800d550:	fa02 f303 	lsl.w	r3, r2, r3
 800d554:	461a      	mov	r2, r3
 800d556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d558:	4313      	orrs	r3, r2
 800d55a:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d55e:	3301      	adds	r3, #1
 800d560:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d568:	461a      	mov	r2, r3
 800d56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d3e8      	bcc.n	800d542 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d572:	43db      	mvns	r3, r3
 800d574:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d57c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d57e:	401a      	ands	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800d586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d588:	43db      	mvns	r3, r3
 800d58a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d58c:	4013      	ands	r3, r2
 800d58e:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d598:	431a      	orrs	r2, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	7e1a      	ldrb	r2, [r3, #24]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	7dda      	ldrb	r2, [r3, #23]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	7d9a      	ldrb	r2, [r3, #22]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	7d5a      	ldrb	r2, [r3, #21]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	220f      	movs	r2, #15
 800d5cc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d5de:	3306      	adds	r3, #6
 800d5e0:	b2da      	uxtb	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d5ee:	1d9a      	adds	r2, r3, #6
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d5f6:	e248      	b.n	800da8a <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	228f      	movs	r2, #143	; 0x8f
 800d604:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2203      	movs	r2, #3
 800d614:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d61e:	1d9a      	adds	r2, r3, #6
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d626:	2302      	movs	r3, #2
 800d628:	e22f      	b.n	800da8a <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2203      	movs	r2, #3
 800d62e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	228f      	movs	r2, #143	; 0x8f
 800d636:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2203      	movs	r2, #3
 800d646:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d650:	1d9a      	adds	r2, r3, #6
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d658:	2303      	movs	r3, #3
 800d65a:	e216      	b.n	800da8a <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	228f      	movs	r2, #143	; 0x8f
 800d668:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2201      	movs	r2, #1
 800d670:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2203      	movs	r2, #3
 800d678:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d682:	1d9a      	adds	r2, r3, #6
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d68a:	2301      	movs	r3, #1
 800d68c:	e1fd      	b.n	800da8a <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	7c5a      	ldrb	r2, [r3, #17]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7c1a      	ldrb	r2, [r3, #16]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	7bda      	ldrb	r2, [r3, #15]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7b9a      	ldrb	r2, [r3, #14]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	7b5a      	ldrb	r2, [r3, #13]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	7b1b      	ldrb	r3, [r3, #12]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	f040 80eb 	bne.w	800d8aa <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	7d5b      	ldrb	r3, [r3, #21]
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d6e6:	021b      	lsls	r3, r3, #8
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d6f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	7d9b      	ldrb	r3, [r3, #22]
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	4313      	orrs	r3, r2
 800d710:	b29a      	uxth	r2, r3
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	7ddb      	ldrb	r3, [r3, #23]
 800d726:	b29a      	uxth	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d734:	021b      	lsls	r3, r3, #8
 800d736:	b29a      	uxth	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d744:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d748:	b29a      	uxth	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	7e1b      	ldrb	r3, [r3, #24]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	4313      	orrs	r3, r2
 800d75e:	b29a      	uxth	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800d772:	b29b      	uxth	r3, r3
 800d774:	429a      	cmp	r2, r3
 800d776:	d87f      	bhi.n	800d878 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d77e:	461a      	mov	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d786:	4413      	add	r3, r2
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800d78e:	4293      	cmp	r3, r2
 800d790:	dc59      	bgt.n	800d846 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800d792:	e029      	b.n	800d7e8 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d794:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d798:	f103 020d 	add.w	r2, r3, #13
 800d79c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d79e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7a2:	440b      	add	r3, r1
 800d7a4:	6879      	ldr	r1, [r7, #4]
 800d7a6:	440a      	add	r2, r1
 800d7a8:	7b51      	ldrb	r1, [r2, #13]
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	460a      	mov	r2, r1
 800d7b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800d7b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d7be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7c2:	f103 020d 	add.w	r2, r3, #13
 800d7c6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d7c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7cc:	440b      	add	r3, r1
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	440a      	add	r2, r1
 800d7d2:	7b51      	ldrb	r1, [r2, #13]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	460a      	mov	r2, r1
 800d7da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800d7de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	7e5b      	ldrb	r3, [r3, #25]
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d3ce      	bcc.n	800d794 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	7e1a      	ldrb	r2, [r3, #24]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	7dda      	ldrb	r2, [r3, #23]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	7d9a      	ldrb	r2, [r3, #22]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	7d5a      	ldrb	r2, [r3, #21]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2210      	movs	r2, #16
 800d822:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2206      	movs	r2, #6
 800d832:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d83c:	1d9a      	adds	r2, r3, #6
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d844:	e121      	b.n	800da8a <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2202      	movs	r2, #2
 800d84a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2290      	movs	r2, #144	; 0x90
 800d852:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2201      	movs	r2, #1
 800d85a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2203      	movs	r2, #3
 800d862:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d86c:	1d9a      	adds	r2, r3, #6
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d874:	2302      	movs	r3, #2
 800d876:	e108      	b.n	800da8a <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2203      	movs	r2, #3
 800d87c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2290      	movs	r2, #144	; 0x90
 800d884:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2203      	movs	r2, #3
 800d894:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d89e:	1d9a      	adds	r2, r3, #6
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	e0ef      	b.n	800da8a <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2290      	movs	r2, #144	; 0x90
 800d8b6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2203      	movs	r2, #3
 800d8c6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8d0:	1d9a      	adds	r2, r3, #6
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e0d6      	b.n	800da8a <ModBUS+0x13ce>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	7d1b      	ldrb	r3, [r3, #20]
 800d8e8:	3b80      	subs	r3, #128	; 0x80
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	7cda      	ldrb	r2, [r3, #19]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2203      	movs	r2, #3
 800d900:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	7c5a      	ldrb	r2, [r3, #17]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	7c1a      	ldrb	r2, [r3, #16]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	7bda      	ldrb	r2, [r3, #15]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	7b9a      	ldrb	r2, [r3, #14]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7b5a      	ldrb	r2, [r3, #13]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d93c:	1d9a      	adds	r2, r3, #6
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800d944:	2301      	movs	r3, #1
 800d946:	e0a0      	b.n	800da8a <ModBUS+0x13ce>


		}
		else
		{
			return(1);
 800d948:	2301      	movs	r3, #1
 800d94a:	e09e      	b.n	800da8a <ModBUS+0x13ce>
		}
	}
	else if (m3->_mode == CLIENTE)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	785b      	ldrb	r3, [r3, #1]
 800d950:	2b00      	cmp	r3, #0
 800d952:	f040 8099 	bne.w	800da88 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f103 020d 	add.w	r2, r3, #13
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800d962:	4619      	mov	r1, r3
 800d964:	4610      	mov	r0, r2
 800d966:	f7fe fda7 	bl	800c4b8 <ModBUS_Check>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 808b 	beq.w	800da88 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7fe fdbf 	bl	800c4f6 <ModBUS_Check_tid>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d04f      	beq.n	800da1e <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	7d1b      	ldrb	r3, [r3, #20]
 800d982:	2b03      	cmp	r3, #3
 800d984:	d143      	bne.n	800da0e <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800d98a:	2300      	movs	r3, #0
 800d98c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d996:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d998:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d99a:	021b      	lsls	r3, r3, #8
 800d99c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d9b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	643b      	str	r3, [r7, #64]	; 0x40
 800d9ba:	e022      	b.n	800da02 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	f103 0209 	add.w	r2, r3, #9
 800d9c4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c8:	440b      	add	r3, r1
 800d9ca:	005b      	lsls	r3, r3, #1
 800d9cc:	6879      	ldr	r1, [r7, #4]
 800d9ce:	440a      	add	r2, r1
 800d9d0:	7b51      	ldrb	r1, [r2, #13]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	460a      	mov	r2, r1
 800d9d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800d9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9de:	3305      	adds	r3, #5
 800d9e0:	005a      	lsls	r2, r3, #1
 800d9e2:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e6:	440b      	add	r3, r1
 800d9e8:	005b      	lsls	r3, r3, #1
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	6879      	ldr	r1, [r7, #4]
 800d9ee:	440a      	add	r2, r1
 800d9f0:	7b51      	ldrb	r1, [r2, #13]
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	460a      	mov	r2, r1
 800d9f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800d9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9fe:	3301      	adds	r3, #1
 800da00:	643b      	str	r3, [r7, #64]	; 0x40
 800da02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800da06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da08:	429a      	cmp	r2, r3
 800da0a:	dbd7      	blt.n	800d9bc <ModBUS+0x1300>

						}


					}
					break;
 800da0c:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	7c9b      	ldrb	r3, [r3, #18]
 800da12:	461a      	mov	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7d5b      	ldrb	r3, [r3, #21]
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800da1c:	e035      	b.n	800da8a <ModBUS+0x13ce>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	7d1b      	ldrb	r3, [r3, #20]
 800da22:	3b81      	subs	r3, #129	; 0x81
 800da24:	2b15      	cmp	r3, #21
 800da26:	d830      	bhi.n	800da8a <ModBUS+0x13ce>
 800da28:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <ModBUS+0x1374>)
 800da2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2e:	bf00      	nop
 800da30:	0800da8b 	.word	0x0800da8b
 800da34:	0800da8b 	.word	0x0800da8b
 800da38:	0800da8b 	.word	0x0800da8b
 800da3c:	0800da8b 	.word	0x0800da8b
 800da40:	0800da8b 	.word	0x0800da8b
 800da44:	0800da8b 	.word	0x0800da8b
 800da48:	0800da8b 	.word	0x0800da8b
 800da4c:	0800da8b 	.word	0x0800da8b
 800da50:	0800da8b 	.word	0x0800da8b
 800da54:	0800da8b 	.word	0x0800da8b
 800da58:	0800da8b 	.word	0x0800da8b
 800da5c:	0800da8b 	.word	0x0800da8b
 800da60:	0800da8b 	.word	0x0800da8b
 800da64:	0800da8b 	.word	0x0800da8b
 800da68:	0800da8b 	.word	0x0800da8b
 800da6c:	0800da8b 	.word	0x0800da8b
 800da70:	0800da8b 	.word	0x0800da8b
 800da74:	0800da8b 	.word	0x0800da8b
 800da78:	0800da8b 	.word	0x0800da8b
 800da7c:	0800da8b 	.word	0x0800da8b
 800da80:	0800da8b 	.word	0x0800da8b
 800da84:	0800da8b 	.word	0x0800da8b
					break;
				}


				//ERROR
			}
 800da88:	bf00      	nop
		}
	}


}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3770      	adds	r7, #112	; 0x70
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop

0800da94 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af02      	add	r7, sp, #8
 800da9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6858      	ldr	r0, [r3, #4]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	891b      	ldrh	r3, [r3, #8]
 800daa4:	2200      	movs	r2, #0
 800daa6:	4619      	mov	r1, r3
 800daa8:	f7f5 fce4 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6818      	ldr	r0, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f103 0114 	add.w	r1, r3, #20
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f103 0218 	add.w	r2, r3, #24
 800dabc:	2364      	movs	r3, #100	; 0x64
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	2304      	movs	r3, #4
 800dac2:	f7f6 f9ec 	bl	8003e9e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6858      	ldr	r0, [r3, #4]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	891b      	ldrh	r3, [r3, #8]
 800dace:	2201      	movs	r2, #1
 800dad0:	4619      	mov	r1, r3
 800dad2:	f7f5 fccf 	bl	8003474 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	7edb      	ldrb	r3, [r3, #27]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b086      	sub	sp, #24
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	4608      	mov	r0, r1
 800daec:	4611      	mov	r1, r2
 800daee:	461a      	mov	r2, r3
 800daf0:	4603      	mov	r3, r0
 800daf2:	70fb      	strb	r3, [r7, #3]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70bb      	strb	r3, [r7, #2]
 800daf8:	4613      	mov	r3, r2
 800dafa:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800dafc:	2300      	movs	r3, #0
 800dafe:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	787a      	ldrb	r2, [r7, #1]
 800db04:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	78fa      	ldrb	r2, [r7, #3]
 800db0a:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	78ba      	ldrb	r2, [r7, #2]
 800db10:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800db18:	787b      	ldrb	r3, [r7, #1]
 800db1a:	2bf0      	cmp	r3, #240	; 0xf0
 800db1c:	d11d      	bne.n	800db5a <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800db1e:	2300      	movs	r3, #0
 800db20:	613b      	str	r3, [r7, #16]
 800db22:	e013      	b.n	800db4c <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	6a3a      	ldr	r2, [r7, #32]
 800db28:	4413      	add	r3, r2
 800db2a:	781a      	ldrb	r2, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f7ff ffaf 	bl	800da94 <SPI_ETH>
 800db36:	4603      	mov	r3, r0
 800db38:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	7d9b      	ldrb	r3, [r3, #22]
 800db3e:	3301      	adds	r3, #1
 800db40:	b2da      	uxtb	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	3301      	adds	r3, #1
 800db4a:	613b      	str	r3, [r7, #16]
 800db4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db50:	693a      	ldr	r2, [r7, #16]
 800db52:	429a      	cmp	r2, r3
 800db54:	dbe6      	blt.n	800db24 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800db56:	8afb      	ldrh	r3, [r7, #22]
 800db58:	e037      	b.n	800dbca <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800db5a:	787b      	ldrb	r3, [r7, #1]
 800db5c:	2b0f      	cmp	r3, #15
 800db5e:	d134      	bne.n	800dbca <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800db66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db6a:	2b02      	cmp	r3, #2
 800db6c:	d120      	bne.n	800dbb0 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800db6e:	2300      	movs	r3, #0
 800db70:	60fb      	str	r3, [r7, #12]
 800db72:	e016      	b.n	800dba2 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f7ff ff8d 	bl	800da94 <SPI_ETH>
 800db7a:	4603      	mov	r3, r0
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	8afb      	ldrh	r3, [r7, #22]
 800db80:	4313      	orrs	r3, r2
 800db82:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	7d9b      	ldrb	r3, [r3, #22]
 800db88:	3301      	adds	r3, #1
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d102      	bne.n	800db9c <SPI_ETH_REG+0xba>
 800db96:	8afb      	ldrh	r3, [r7, #22]
 800db98:	021b      	lsls	r3, r3, #8
 800db9a:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	3301      	adds	r3, #1
 800dba0:	60fb      	str	r3, [r7, #12]
 800dba2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	dbe3      	blt.n	800db74 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800dbac:	8afb      	ldrh	r3, [r7, #22]
 800dbae:	e00c      	b.n	800dbca <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7ff ff6f 	bl	800da94 <SPI_ETH>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	7d9b      	ldrb	r3, [r3, #22]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	b2da      	uxtb	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	759a      	strb	r2, [r3, #22]
			return(res);
 800dbc6:	8afb      	ldrh	r3, [r7, #22]
 800dbc8:	e7ff      	b.n	800dbca <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3718      	adds	r7, #24
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b086      	sub	sp, #24
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	460b      	mov	r3, r1
 800dbdc:	807b      	strh	r3, [r7, #2]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	22f0      	movs	r2, #240	; 0xf0
 800dbea:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800dbec:	883b      	ldrh	r3, [r7, #0]
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800dbf2:	883b      	ldrh	r3, [r7, #0]
 800dbf4:	0a1b      	lsrs	r3, r3, #8
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	613b      	str	r3, [r7, #16]
 800dc00:	e01b      	b.n	800dc3a <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800dc02:	887b      	ldrh	r3, [r7, #2]
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800dc0a:	887b      	ldrh	r3, [r7, #2]
 800dc0c:	0a1b      	lsrs	r3, r3, #8
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	755a      	strb	r2, [r3, #21]
		addr++;
 800dc16:	887b      	ldrh	r3, [r7, #2]
 800dc18:	3301      	adds	r3, #1
 800dc1a:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800dc1c:	f107 020c 	add.w	r2, r7, #12
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	4413      	add	r3, r2
 800dc24:	781a      	ldrb	r2, [r3, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff ff32 	bl	800da94 <SPI_ETH>
 800dc30:	4603      	mov	r3, r0
 800dc32:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	3301      	adds	r3, #1
 800dc38:	613b      	str	r3, [r7, #16]
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	dde0      	ble.n	800dc02 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800dc40:	8afb      	ldrh	r3, [r7, #22]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3718      	adds	r7, #24
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800dc4a:	b590      	push	{r4, r7, lr}
 800dc4c:	b087      	sub	sp, #28
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	60f8      	str	r0, [r7, #12]
 800dc52:	607a      	str	r2, [r7, #4]
 800dc54:	461a      	mov	r2, r3
 800dc56:	460b      	mov	r3, r1
 800dc58:	817b      	strh	r3, [r7, #10]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	220f      	movs	r2, #15
 800dc62:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dc64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc6a:	d226      	bcs.n	800dcba <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800dc72:	2300      	movs	r3, #0
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	e01a      	b.n	800dcae <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800dc78:	897b      	ldrh	r3, [r7, #10]
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dc80:	897b      	ldrh	r3, [r7, #10]
 800dc82:	0a1b      	lsrs	r3, r3, #8
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800dc8c:	893a      	ldrh	r2, [r7, #8]
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	4413      	add	r3, r2
 800dc92:	461a      	mov	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	189c      	adds	r4, r3, r2
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f7ff fefb 	bl	800da94 <SPI_ETH>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	7023      	strb	r3, [r4, #0]
				addr++;
 800dca2:	897b      	ldrh	r3, [r7, #10]
 800dca4:	3301      	adds	r3, #1
 800dca6:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	617b      	str	r3, [r7, #20]
 800dcae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	dbe0      	blt.n	800dc78 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	e000      	b.n	800dcbc <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800dcba:	2301      	movs	r3, #1
	}
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	371c      	adds	r7, #28
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd90      	pop	{r4, r7, pc}

0800dcc4 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b086      	sub	sp, #24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	607a      	str	r2, [r7, #4]
 800dcce:	461a      	mov	r2, r3
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	817b      	strh	r3, [r7, #10]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	22f0      	movs	r2, #240	; 0xf0
 800dcdc:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dcde:	8c3b      	ldrh	r3, [r7, #32]
 800dce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dce4:	d223      	bcs.n	800dd2e <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800dce6:	2300      	movs	r3, #0
 800dce8:	617b      	str	r3, [r7, #20]
 800dcea:	e01a      	b.n	800dd22 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800dcec:	897b      	ldrh	r3, [r7, #10]
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dcf4:	897b      	ldrh	r3, [r7, #10]
 800dcf6:	0a1b      	lsrs	r3, r3, #8
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800dd00:	893a      	ldrh	r2, [r7, #8]
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	4413      	add	r3, r2
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	4413      	add	r3, r2
 800dd0a:	7f1a      	ldrb	r2, [r3, #28]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f7ff febf 	bl	800da94 <SPI_ETH>
				addr++;
 800dd16:	897b      	ldrh	r3, [r7, #10]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	617b      	str	r3, [r7, #20]
 800dd22:	8c3b      	ldrh	r3, [r7, #32]
 800dd24:	697a      	ldr	r2, [r7, #20]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	dbe0      	blt.n	800dcec <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e000      	b.n	800dd30 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800dd2e:	2301      	movs	r3, #1
	}
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3718      	adds	r7, #24
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	460b      	mov	r3, r1
 800dd42:	70fb      	strb	r3, [r7, #3]
 800dd44:	4613      	mov	r3, r2
 800dd46:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	22f0      	movs	r2, #240	; 0xf0
 800dd4c:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800dd4e:	78fb      	ldrb	r3, [r7, #3]
 800dd50:	3304      	adds	r3, #4
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	78ba      	ldrb	r2, [r7, #2]
 800dd62:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff fe95 	bl	800da94 <SPI_ETH>
}
 800dd6a:	bf00      	nop
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	70fb      	strb	r3, [r7, #3]
 800dd80:	4613      	mov	r3, r2
 800dd82:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	22f0      	movs	r2, #240	; 0xf0
 800dd88:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800dd8a:	78fb      	ldrb	r3, [r7, #3]
 800dd8c:	3304      	adds	r3, #4
 800dd8e:	b2da      	uxtb	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	78ba      	ldrb	r2, [r7, #2]
 800dd9e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff fe77 	bl	800da94 <SPI_ETH>
}
 800dda6:	bf00      	nop
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af02      	add	r7, sp, #8
 800ddb6:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddbe:	331c      	adds	r3, #28
 800ddc0:	2204      	movs	r2, #4
 800ddc2:	9201      	str	r2, [sp, #4]
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	23f0      	movs	r3, #240	; 0xf0
 800ddc8:	2201      	movs	r2, #1
 800ddca:	2100      	movs	r1, #0
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7ff fe88 	bl	800dae2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800ddd2:	2119      	movs	r1, #25
 800ddd4:	482d      	ldr	r0, [pc, #180]	; (800de8c <eth_init+0xdc>)
 800ddd6:	f7f3 fba1 	bl	800151c <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dde0:	2204      	movs	r2, #4
 800dde2:	9201      	str	r2, [sp, #4]
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	23f0      	movs	r3, #240	; 0xf0
 800dde8:	2205      	movs	r2, #5
 800ddea:	2100      	movs	r1, #0
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7ff fe78 	bl	800dae2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800ddf2:	2116      	movs	r1, #22
 800ddf4:	4826      	ldr	r0, [pc, #152]	; (800de90 <eth_init+0xe0>)
 800ddf6:	f7f3 fb91 	bl	800151c <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de00:	3304      	adds	r3, #4
 800de02:	2206      	movs	r2, #6
 800de04:	9201      	str	r2, [sp, #4]
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	23f0      	movs	r3, #240	; 0xf0
 800de0a:	2209      	movs	r2, #9
 800de0c:	2100      	movs	r1, #0
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7ff fe67 	bl	800dae2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800de14:	2113      	movs	r1, #19
 800de16:	481f      	ldr	r0, [pc, #124]	; (800de94 <eth_init+0xe4>)
 800de18:	f7f3 fb80 	bl	800151c <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de22:	330a      	adds	r3, #10
 800de24:	2204      	movs	r2, #4
 800de26:	9201      	str	r2, [sp, #4]
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	23f0      	movs	r3, #240	; 0xf0
 800de2c:	220f      	movs	r2, #15
 800de2e:	2100      	movs	r1, #0
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7ff fe56 	bl	800dae2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800de36:	2112      	movs	r1, #18
 800de38:	4817      	ldr	r0, [pc, #92]	; (800de98 <eth_init+0xe8>)
 800de3a:	f7f3 fb6f 	bl	800151c <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de44:	330e      	adds	r3, #14
 800de46:	2201      	movs	r2, #1
 800de48:	9201      	str	r2, [sp, #4]
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	23f0      	movs	r3, #240	; 0xf0
 800de4e:	221a      	movs	r2, #26
 800de50:	2100      	movs	r1, #0
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f7ff fe45 	bl	800dae2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800de58:	2128      	movs	r1, #40	; 0x28
 800de5a:	4810      	ldr	r0, [pc, #64]	; (800de9c <eth_init+0xec>)
 800de5c:	f7f3 fb5e 	bl	800151c <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de66:	330f      	adds	r3, #15
 800de68:	2201      	movs	r2, #1
 800de6a:	9201      	str	r2, [sp, #4]
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	23f0      	movs	r3, #240	; 0xf0
 800de70:	221b      	movs	r2, #27
 800de72:	2100      	movs	r1, #0
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7ff fe34 	bl	800dae2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800de7a:	2128      	movs	r1, #40	; 0x28
 800de7c:	4808      	ldr	r0, [pc, #32]	; (800dea0 <eth_init+0xf0>)
 800de7e:	f7f3 fb4d 	bl	800151c <ITM0_Write>

}
 800de82:	bf00      	nop
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	080108f8 	.word	0x080108f8
 800de90:	08010914 	.word	0x08010914
 800de94:	08010930 	.word	0x08010930
 800de98:	08010948 	.word	0x08010948
 800de9c:	08010960 	.word	0x08010960
 800dea0:	0801098c 	.word	0x0801098c

0800dea4 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af02      	add	r7, sp, #8
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800deb0:	78fb      	ldrb	r3, [r7, #3]
 800deb2:	2201      	movs	r2, #1
 800deb4:	4619      	mov	r1, r3
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f7ff ff5c 	bl	800dd74 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800debc:	2119      	movs	r1, #25
 800debe:	4830      	ldr	r0, [pc, #192]	; (800df80 <eth_socket_init+0xdc>)
 800dec0:	f7f3 fb2c 	bl	800151c <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800deca:	331a      	adds	r3, #26
 800decc:	2202      	movs	r2, #2
 800dece:	9201      	str	r2, [sp, #4]
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	23f0      	movs	r3, #240	; 0xf0
 800ded4:	2204      	movs	r2, #4
 800ded6:	2104      	movs	r1, #4
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7ff fe02 	bl	800dae2 <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800dede:	212c      	movs	r1, #44	; 0x2c
 800dee0:	4828      	ldr	r0, [pc, #160]	; (800df84 <eth_socket_init+0xe0>)
 800dee2:	f7f3 fb1b 	bl	800151c <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800deec:	331c      	adds	r3, #28
 800deee:	2204      	movs	r2, #4
 800def0:	9201      	str	r2, [sp, #4]
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	23f0      	movs	r3, #240	; 0xf0
 800def6:	220c      	movs	r2, #12
 800def8:	2104      	movs	r1, #4
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff fdf1 	bl	800dae2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800df00:	212e      	movs	r1, #46	; 0x2e
 800df02:	4821      	ldr	r0, [pc, #132]	; (800df88 <eth_socket_init+0xe4>)
 800df04:	f7f3 fb0a 	bl	800151c <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df0e:	2202      	movs	r2, #2
 800df10:	9201      	str	r2, [sp, #4]
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	23f0      	movs	r3, #240	; 0xf0
 800df16:	2210      	movs	r2, #16
 800df18:	2104      	movs	r1, #4
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7ff fde1 	bl	800dae2 <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800df20:	2120      	movs	r1, #32
 800df22:	481a      	ldr	r0, [pc, #104]	; (800df8c <eth_socket_init+0xe8>)
 800df24:	f7f3 fafa 	bl	800151c <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800df28:	78fb      	ldrb	r3, [r7, #3]
 800df2a:	2201      	movs	r2, #1
 800df2c:	4619      	mov	r1, r3
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff ff02 	bl	800dd38 <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800df34:	2119      	movs	r1, #25
 800df36:	4816      	ldr	r0, [pc, #88]	; (800df90 <eth_socket_init+0xec>)
 800df38:	f7f3 faf0 	bl	800151c <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df46:	2b01      	cmp	r3, #1
 800df48:	d10a      	bne.n	800df60 <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800df4a:	78fb      	ldrb	r3, [r7, #3]
 800df4c:	2202      	movs	r2, #2
 800df4e:	4619      	mov	r1, r3
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f7ff fef1 	bl	800dd38 <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800df56:	211b      	movs	r1, #27
 800df58:	480e      	ldr	r0, [pc, #56]	; (800df94 <eth_socket_init+0xf0>)
 800df5a:	f7f3 fadf 	bl	800151c <ITM0_Write>
 800df5e:	e009      	b.n	800df74 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800df60:	78fb      	ldrb	r3, [r7, #3]
 800df62:	2204      	movs	r2, #4
 800df64:	4619      	mov	r1, r3
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7ff fee6 	bl	800dd38 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800df6c:	2115      	movs	r1, #21
 800df6e:	480a      	ldr	r0, [pc, #40]	; (800df98 <eth_socket_init+0xf4>)
 800df70:	f7f3 fad4 	bl	800151c <ITM0_Write>
	 }
}
 800df74:	bf00      	nop
 800df76:	4618      	mov	r0, r3
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	080109b8 	.word	0x080109b8
 800df84:	080109d4 	.word	0x080109d4
 800df88:	08010a04 	.word	0x08010a04
 800df8c:	08010a34 	.word	0x08010a34
 800df90:	08010a58 	.word	0x08010a58
 800df94:	08010a74 	.word	0x08010a74
 800df98:	08010a90 	.word	0x08010a90

0800df9c <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	220f      	movs	r2, #15
 800dfac:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800dfae:	78fb      	ldrb	r3, [r7, #3]
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2203      	movs	r2, #3
 800dfbc:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7ff fd65 	bl	800da94 <SPI_ETH>
	return(y->RX[3]);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	7edb      	ldrb	r3, [r3, #27]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b082      	sub	sp, #8
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	220f      	movs	r2, #15
 800dfe6:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800dfe8:	78fb      	ldrb	r3, [r7, #3]
 800dfea:	3304      	adds	r3, #4
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2201      	movs	r2, #1
 800dff6:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7ff fd48 	bl	800da94 <SPI_ETH>
	return(y->RX[3]);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	7edb      	ldrb	r3, [r3, #27]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b08c      	sub	sp, #48	; 0x30
 800e014:	af02      	add	r7, sp, #8
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	607a      	str	r2, [r7, #4]
 800e01a:	461a      	mov	r2, r3
 800e01c:	460b      	mov	r3, r1
 800e01e:	72fb      	strb	r3, [r7, #11]
 800e020:	4613      	mov	r3, r2
 800e022:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e024:	2300      	movs	r3, #0
 800e026:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e028:	2300      	movs	r3, #0
 800e02a:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e02c:	2300      	movs	r3, #0
 800e02e:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e030:	2300      	movs	r3, #0
 800e032:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e034:	2300      	movs	r3, #0
 800e036:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e038:	2300      	movs	r3, #0
 800e03a:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e03c:	2300      	movs	r3, #0
 800e03e:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e040:	2300      	movs	r3, #0
 800e042:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e044:	2300      	movs	r3, #0
 800e046:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e048:	2300      	movs	r3, #0
 800e04a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e04c:	7afb      	ldrb	r3, [r7, #11]
 800e04e:	2b03      	cmp	r3, #3
 800e050:	d83e      	bhi.n	800e0d0 <eth_rd_SOCKET_DATA+0xc0>
 800e052:	a201      	add	r2, pc, #4	; (adr r2, 800e058 <eth_rd_SOCKET_DATA+0x48>)
 800e054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e058:	0800e069 	.word	0x0800e069
 800e05c:	0800e083 	.word	0x0800e083
 800e060:	0800e09d 	.word	0x0800e09d
 800e064:	0800e0b7 	.word	0x0800e0b7
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e06e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e072:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e07a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e07e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e080:	e033      	b.n	800e0ea <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e088:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e08c:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e094:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e098:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e09a:	e026      	b.n	800e0ea <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0a6:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ae:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e0b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0b4:	e019      	b.n	800e0ea <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e0c0:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e0cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0ce:	e00c      	b.n	800e0ea <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e0da:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0e8:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e0ea:	7afb      	ldrb	r3, [r7, #11]
 800e0ec:	3304      	adds	r3, #4
 800e0ee:	b2d9      	uxtb	r1, r3
 800e0f0:	2302      	movs	r3, #2
 800e0f2:	9301      	str	r3, [sp, #4]
 800e0f4:	f107 0310 	add.w	r3, r7, #16
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	230f      	movs	r3, #15
 800e0fc:	2228      	movs	r2, #40	; 0x28
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f7ff fcef 	bl	800dae2 <SPI_ETH_REG>
 800e104:	4603      	mov	r3, r0
 800e106:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e108:	8b7a      	ldrh	r2, [r7, #26]
 800e10a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e10c:	4013      	ands	r3, r2
 800e10e:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e110:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e112:	8b3b      	ldrh	r3, [r7, #24]
 800e114:	4413      	add	r3, r2
 800e116:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e118:	8b3a      	ldrh	r2, [r7, #24]
 800e11a:	893b      	ldrh	r3, [r7, #8]
 800e11c:	441a      	add	r2, r3
 800e11e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e120:	3301      	adds	r3, #1
 800e122:	429a      	cmp	r2, r3
 800e124:	dd2c      	ble.n	800e180 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e126:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e128:	8b3b      	ldrh	r3, [r7, #24]
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	3301      	adds	r3, #1
 800e130:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f103 021c 	add.w	r2, r3, #28
 800e138:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e13a:	8af9      	ldrh	r1, [r7, #22]
 800e13c:	8bfb      	ldrh	r3, [r7, #30]
 800e13e:	9300      	str	r3, [sp, #0]
 800e140:	4603      	mov	r3, r0
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f7ff fd81 	bl	800dc4a <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e148:	8bba      	ldrh	r2, [r7, #28]
 800e14a:	8bfb      	ldrh	r3, [r7, #30]
 800e14c:	4413      	add	r3, r2
 800e14e:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e150:	893a      	ldrh	r2, [r7, #8]
 800e152:	8bfb      	ldrh	r3, [r7, #30]
 800e154:	1ad3      	subs	r3, r2, r3
 800e156:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e158:	8bfb      	ldrh	r3, [r7, #30]
 800e15a:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f103 021c 	add.w	r2, r3, #28
 800e162:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e164:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e166:	8c3b      	ldrh	r3, [r7, #32]
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	4603      	mov	r3, r0
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f7ff fd6c 	bl	800dc4a <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e172:	8b7a      	ldrh	r2, [r7, #26]
 800e174:	893b      	ldrh	r3, [r7, #8]
 800e176:	4413      	add	r3, r2
 800e178:	b29a      	uxth	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	801a      	strh	r2, [r3, #0]
 800e17e:	e010      	b.n	800e1a2 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f103 021c 	add.w	r2, r3, #28
 800e186:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e188:	8af9      	ldrh	r1, [r7, #22]
 800e18a:	893b      	ldrh	r3, [r7, #8]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	4603      	mov	r3, r0
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f7ff fd5a 	bl	800dc4a <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e196:	8b7a      	ldrh	r2, [r7, #26]
 800e198:	893b      	ldrh	r3, [r7, #8]
 800e19a:	4413      	add	r3, r2
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	b29b      	uxth	r3, r3
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3728      	adds	r7, #40	; 0x28
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop

0800e1b0 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b08c      	sub	sp, #48	; 0x30
 800e1b4:	af02      	add	r7, sp, #8
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	607a      	str	r2, [r7, #4]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	460b      	mov	r3, r1
 800e1be:	72fb      	strb	r3, [r7, #11]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e1d8:	2300      	movs	r3, #0
 800e1da:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e1dc:	2300      	movs	r3, #0
 800e1de:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e1f0:	7afb      	ldrb	r3, [r7, #11]
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d83e      	bhi.n	800e274 <eth_wr_SOCKET_DATA+0xc4>
 800e1f6:	a201      	add	r2, pc, #4	; (adr r2, 800e1fc <eth_wr_SOCKET_DATA+0x4c>)
 800e1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fc:	0800e20d 	.word	0x0800e20d
 800e200:	0800e227 	.word	0x0800e227
 800e204:	0800e241 	.word	0x0800e241
 800e208:	0800e25b 	.word	0x0800e25b
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e212:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e216:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e21e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e222:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e224:	e033      	b.n	800e28e <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e22c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e230:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e238:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e23c:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e23e:	e026      	b.n	800e28e <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e24a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e252:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e256:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e258:	e019      	b.n	800e28e <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e260:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e264:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e26c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e270:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e272:	e00c      	b.n	800e28e <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e27a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e27e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e28a:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e28c:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e28e:	e00e      	b.n	800e2ae <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e290:	7afb      	ldrb	r3, [r7, #11]
 800e292:	3304      	adds	r3, #4
 800e294:	b2d9      	uxtb	r1, r3
 800e296:	2302      	movs	r3, #2
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	f107 0310 	add.w	r3, r7, #16
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	230f      	movs	r3, #15
 800e2a2:	2220      	movs	r2, #32
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f7ff fc1c 	bl	800dae2 <SPI_ETH_REG>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e2ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e2b0:	893b      	ldrh	r3, [r7, #8]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d3ec      	bcc.n	800e290 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e2b6:	7afb      	ldrb	r3, [r7, #11]
 800e2b8:	3304      	adds	r3, #4
 800e2ba:	b2d9      	uxtb	r1, r3
 800e2bc:	2302      	movs	r3, #2
 800e2be:	9301      	str	r3, [sp, #4]
 800e2c0:	f107 0310 	add.w	r3, r7, #16
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	230f      	movs	r3, #15
 800e2c8:	2224      	movs	r2, #36	; 0x24
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f7ff fc09 	bl	800dae2 <SPI_ETH_REG>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e2d4:	8b3a      	ldrh	r2, [r7, #24]
 800e2d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2d8:	4013      	ands	r3, r2
 800e2da:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e2dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e2de:	8afb      	ldrh	r3, [r7, #22]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e2e4:	8afa      	ldrh	r2, [r7, #22]
 800e2e6:	893b      	ldrh	r3, [r7, #8]
 800e2e8:	441a      	add	r2, r3
 800e2ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	dd2c      	ble.n	800e34c <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e2f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e2f4:	8afb      	ldrh	r3, [r7, #22]
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f103 021c 	add.w	r2, r3, #28
 800e304:	8c38      	ldrh	r0, [r7, #32]
 800e306:	8ab9      	ldrh	r1, [r7, #20]
 800e308:	8bbb      	ldrh	r3, [r7, #28]
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	4603      	mov	r3, r0
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f7ff fcd8 	bl	800dcc4 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e314:	8b7a      	ldrh	r2, [r7, #26]
 800e316:	8bbb      	ldrh	r3, [r7, #28]
 800e318:	4413      	add	r3, r2
 800e31a:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e31c:	893a      	ldrh	r2, [r7, #8]
 800e31e:	8bbb      	ldrh	r3, [r7, #28]
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e324:	8bbb      	ldrh	r3, [r7, #28]
 800e326:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f103 021c 	add.w	r2, r3, #28
 800e32e:	8c38      	ldrh	r0, [r7, #32]
 800e330:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e332:	8bfb      	ldrh	r3, [r7, #30]
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	4603      	mov	r3, r0
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f7ff fcc3 	bl	800dcc4 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e33e:	8b3a      	ldrh	r2, [r7, #24]
 800e340:	893b      	ldrh	r3, [r7, #8]
 800e342:	4413      	add	r3, r2
 800e344:	b29a      	uxth	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	801a      	strh	r2, [r3, #0]
 800e34a:	e010      	b.n	800e36e <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f103 021c 	add.w	r2, r3, #28
 800e352:	8c38      	ldrh	r0, [r7, #32]
 800e354:	8ab9      	ldrh	r1, [r7, #20]
 800e356:	893b      	ldrh	r3, [r7, #8]
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	4603      	mov	r3, r0
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	f7ff fcb1 	bl	800dcc4 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e362:	8b3a      	ldrh	r2, [r7, #24]
 800e364:	893b      	ldrh	r3, [r7, #8]
 800e366:	4413      	add	r3, r2
 800e368:	b29a      	uxth	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	801a      	strh	r2, [r3, #0]
					}

}
 800e36e:	bf00      	nop
 800e370:	4618      	mov	r0, r3
 800e372:	3728      	adds	r7, #40	; 0x28
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b090      	sub	sp, #64	; 0x40
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e386:	2300      	movs	r3, #0
 800e388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e38a:	2300      	movs	r3, #0
 800e38c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e38e:	2300      	movs	r3, #0
 800e390:	637b      	str	r3, [r7, #52]	; 0x34
 800e392:	2300      	movs	r3, #0
 800e394:	633b      	str	r3, [r7, #48]	; 0x30
 800e396:	2300      	movs	r3, #0
 800e398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e39a:	2300      	movs	r3, #0
 800e39c:	623b      	str	r3, [r7, #32]
 800e39e:	2300      	movs	r3, #0
 800e3a0:	61fb      	str	r3, [r7, #28]
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	61bb      	str	r3, [r7, #24]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	617b      	str	r3, [r7, #20]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e3c2:	6a3a      	ldr	r2, [r7, #32]
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	f2c0 82fe 	blt.w	800e9c8 <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e3d0:	e00c      	b.n	800e3ec <FT_String_ND+0x74>
							{
								n++;
 800e3d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e3d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	441a      	add	r2, r3
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	dd02      	ble.n	800e3ec <FT_String_ND+0x74>
								{
									estado=0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e3ea:	e009      	b.n	800e400 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ee:	68fa      	ldr	r2, [r7, #12]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	781a      	ldrb	r2, [r3, #0]
 800e3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	440b      	add	r3, r1
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d1e8      	bne.n	800e3d2 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e402:	3301      	adds	r3, #1
 800e404:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	3301      	adds	r3, #1
 800e40a:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	429a      	cmp	r2, r3
 800e412:	d108      	bne.n	800e426 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	1c5a      	adds	r2, r3, #1
 800e41c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e41e:	601a      	str	r2, [r3, #0]
									estado=1;
 800e420:	2301      	movs	r3, #1
 800e422:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e424:	e010      	b.n	800e448 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	dd02      	ble.n	800e434 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e42e:	2300      	movs	r3, #0
 800e430:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e432:	e009      	b.n	800e448 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e436:	68fa      	ldr	r2, [r7, #12]
 800e438:	4413      	add	r3, r2
 800e43a:	781a      	ldrb	r2, [r3, #0]
 800e43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43e:	6879      	ldr	r1, [r7, #4]
 800e440:	440b      	add	r3, r1
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	429a      	cmp	r2, r3
 800e446:	d0db      	beq.n	800e400 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	1e5a      	subs	r2, r3, #1
 800e44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e44e:	4413      	add	r3, r2
 800e450:	6a3a      	ldr	r2, [r7, #32]
 800e452:	429a      	cmp	r2, r3
 800e454:	dd02      	ble.n	800e45c <FT_String_ND+0xe4>
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d1b7      	bne.n	800e3cc <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e45c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d101      	bne.n	800e466 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e464:	e2b1      	b.n	800e9ca <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d12c      	bne.n	800e4c6 <FT_String_ND+0x14e>
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d129      	bne.n	800e4c6 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e472:	e014      	b.n	800e49e <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	441a      	add	r2, r3
 800e47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e47e:	4413      	add	r3, r2
 800e480:	3b01      	subs	r3, #1
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	441a      	add	r2, r3
 800e486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e488:	6819      	ldr	r1, [r3, #0]
 800e48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e48c:	440b      	add	r3, r1
 800e48e:	3b01      	subs	r3, #1
 800e490:	68f9      	ldr	r1, [r7, #12]
 800e492:	440b      	add	r3, r1
 800e494:	7812      	ldrb	r2, [r2, #0]
 800e496:	701a      	strb	r2, [r3, #0]
										n3++;
 800e498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e49a:	3301      	adds	r3, #1
 800e49c:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	441a      	add	r2, r3
 800e4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a8:	4413      	add	r3, r2
 800e4aa:	6a3a      	ldr	r2, [r7, #32]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	dae1      	bge.n	800e474 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b6:	4413      	add	r3, r2
 800e4b8:	1e5a      	subs	r2, r3, #1
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	601a      	str	r2, [r3, #0]
							estado=3;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c4:	e281      	b.n	800e9ca <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e4c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	f040 80b6 	bne.w	800e63a <FT_String_ND+0x2c2>
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	f040 80b2 	bne.w	800e63a <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e4d6:	e012      	b.n	800e4fe <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e4d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	1ad2      	subs	r2, r2, r3
 800e4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e0:	4413      	add	r3, r2
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	441a      	add	r2, r3
 800e4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e4ec:	440b      	add	r3, r1
 800e4ee:	7812      	ldrb	r2, [r2, #0]
 800e4f0:	701a      	strb	r2, [r3, #0]
								n4++;
 800e4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4fc:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e4fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	1ad2      	subs	r2, r2, r3
 800e504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e506:	4413      	add	r3, r2
 800e508:	6a3a      	ldr	r2, [r7, #32]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	dae4      	bge.n	800e4d8 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e50e:	499e      	ldr	r1, [pc, #632]	; (800e788 <FT_String_ND+0x410>)
 800e510:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e512:	f000 fb6f 	bl	800ebf4 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e516:	499d      	ldr	r1, [pc, #628]	; (800e78c <FT_String_ND+0x414>)
 800e518:	2000      	movs	r0, #0
 800e51a:	f000 fb6b 	bl	800ebf4 <strtok>
 800e51e:	4603      	mov	r3, r0
 800e520:	4618      	mov	r0, r3
 800e522:	f000 fada 	bl	800eada <atoi>
 800e526:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e52a:	3306      	adds	r3, #6
 800e52c:	222c      	movs	r2, #44	; 0x2c
 800e52e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	2b09      	cmp	r3, #9
 800e534:	dc0d      	bgt.n	800e552 <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e538:	3308      	adds	r3, #8
 800e53a:	223a      	movs	r2, #58	; 0x3a
 800e53c:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	3309      	adds	r3, #9
 800e542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e544:	4413      	add	r3, r2
 800e546:	2200      	movs	r2, #0
 800e548:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	3309      	adds	r3, #9
 800e54e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e550:	e021      	b.n	800e596 <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	2b63      	cmp	r3, #99	; 0x63
 800e556:	dc0d      	bgt.n	800e574 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e55a:	3309      	adds	r3, #9
 800e55c:	223a      	movs	r2, #58	; 0x3a
 800e55e:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	330a      	adds	r3, #10
 800e564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e566:	4413      	add	r3, r2
 800e568:	2200      	movs	r2, #0
 800e56a:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	330a      	adds	r3, #10
 800e570:	62bb      	str	r3, [r7, #40]	; 0x28
 800e572:	e010      	b.n	800e596 <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e57a:	da0c      	bge.n	800e596 <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e57c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e57e:	330a      	adds	r3, #10
 800e580:	223a      	movs	r2, #58	; 0x3a
 800e582:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	330b      	adds	r3, #11
 800e588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e58a:	4413      	add	r3, r2
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	330b      	adds	r3, #11
 800e594:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e59a:	601a      	str	r2, [r3, #0]
							n4=0;
 800e59c:	2300      	movs	r3, #0
 800e59e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e5a0:	e016      	b.n	800e5d0 <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e5a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	1ad2      	subs	r2, r2, r3
 800e5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5aa:	441a      	add	r2, r3
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ae:	4413      	add	r3, r2
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	441a      	add	r2, r3
 800e5b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	1ac9      	subs	r1, r1, r3
 800e5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5be:	440b      	add	r3, r1
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	440b      	add	r3, r1
 800e5c6:	7812      	ldrb	r2, [r2, #0]
 800e5c8:	701a      	strb	r2, [r3, #0]
								n4++;
 800e5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e5d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	1ad2      	subs	r2, r2, r3
 800e5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d8:	441a      	add	r2, r3
 800e5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5dc:	4413      	add	r3, r2
 800e5de:	6a3a      	ldr	r2, [r7, #32]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	dade      	bge.n	800e5a2 <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e5e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e8:	441a      	add	r2, r3
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	1e5a      	subs	r2, r3, #1
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e5f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	1ad2      	subs	r2, r2, r3
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	441a      	add	r2, r3
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e600:	4413      	add	r3, r2
 800e602:	461a      	mov	r2, r3
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	4413      	add	r3, r2
 800e608:	2200      	movs	r2, #0
 800e60a:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e60c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	1ad2      	subs	r2, r2, r3
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	4413      	add	r3, r2
 800e616:	461a      	mov	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	4413      	add	r3, r2
 800e61c:	2200      	movs	r2, #0
 800e61e:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	1ad2      	subs	r2, r2, r3
 800e626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	440b      	add	r3, r1
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d102      	bne.n	800e636 <FT_String_ND+0x2be>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e636:	2303      	movs	r3, #3
 800e638:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e63a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e63c:	2b03      	cmp	r3, #3
 800e63e:	d146      	bne.n	800e6ce <FT_String_ND+0x356>
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	2b01      	cmp	r3, #1
 800e644:	d143      	bne.n	800e6ce <FT_String_ND+0x356>
						{
						n3=0;
 800e646:	2300      	movs	r3, #0
 800e648:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e64a:	e00e      	b.n	800e66a <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e64c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e652:	4413      	add	r3, r2
 800e654:	3b01      	subs	r3, #1
 800e656:	68fa      	ldr	r2, [r7, #12]
 800e658:	441a      	add	r2, r3
 800e65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e65c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e65e:	440b      	add	r3, r1
 800e660:	7812      	ldrb	r2, [r2, #0]
 800e662:	701a      	strb	r2, [r3, #0]
										n3++;
 800e664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e666:	3301      	adds	r3, #1
 800e668:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e66a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	429a      	cmp	r2, r3
 800e670:	dbec      	blt.n	800e64c <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e672:	2300      	movs	r3, #0
 800e674:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e676:	e014      	b.n	800e6a2 <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	441a      	add	r2, r3
 800e680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e682:	4413      	add	r3, r2
 800e684:	3b01      	subs	r3, #1
 800e686:	68fa      	ldr	r2, [r7, #12]
 800e688:	441a      	add	r2, r3
 800e68a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e68c:	6819      	ldr	r1, [r3, #0]
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	440b      	add	r3, r1
 800e692:	3b01      	subs	r3, #1
 800e694:	68f9      	ldr	r1, [r7, #12]
 800e696:	440b      	add	r3, r1
 800e698:	7812      	ldrb	r2, [r2, #0]
 800e69a:	701a      	strb	r2, [r3, #0]
										n5++;
 800e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69e:	3301      	adds	r3, #1
 800e6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	441a      	add	r2, r3
 800e6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ac:	441a      	add	r2, r3
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	dde0      	ble.n	800e678 <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	4413      	add	r3, r2
 800e6be:	1e5a      	subs	r2, r3, #1
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6c8:	601a      	str	r2, [r3, #0]
							estado=3;
 800e6ca:	2303      	movs	r3, #3
 800e6cc:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e6ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6d0:	2b04      	cmp	r3, #4
 800e6d2:	f040 80b6 	bne.w	800e842 <FT_String_ND+0x4ca>
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	f040 80b2 	bne.w	800e842 <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e6de:	e012      	b.n	800e706 <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e6e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	1ad2      	subs	r2, r2, r3
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	4413      	add	r3, r2
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	441a      	add	r2, r3
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e6f4:	440b      	add	r3, r1
 800e6f6:	7812      	ldrb	r2, [r2, #0]
 800e6f8:	701a      	strb	r2, [r3, #0]
								n4++;
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e704:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	1ad2      	subs	r2, r2, r3
 800e70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70e:	4413      	add	r3, r2
 800e710:	6a3a      	ldr	r2, [r7, #32]
 800e712:	429a      	cmp	r2, r3
 800e714:	dae4      	bge.n	800e6e0 <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e716:	491c      	ldr	r1, [pc, #112]	; (800e788 <FT_String_ND+0x410>)
 800e718:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e71a:	f000 fa6b 	bl	800ebf4 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e71e:	491b      	ldr	r1, [pc, #108]	; (800e78c <FT_String_ND+0x414>)
 800e720:	2000      	movs	r0, #0
 800e722:	f000 fa67 	bl	800ebf4 <strtok>
 800e726:	4603      	mov	r3, r0
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 f9d6 	bl	800eada <atoi>
 800e72e:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e732:	3306      	adds	r3, #6
 800e734:	222c      	movs	r2, #44	; 0x2c
 800e736:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	2b09      	cmp	r3, #9
 800e73c:	dc07      	bgt.n	800e74e <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800e73e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e740:	3308      	adds	r3, #8
 800e742:	223a      	movs	r2, #58	; 0x3a
 800e744:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	3309      	adds	r3, #9
 800e74a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e74c:	e015      	b.n	800e77a <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	2b63      	cmp	r3, #99	; 0x63
 800e752:	dc07      	bgt.n	800e764 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800e754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e756:	3309      	adds	r3, #9
 800e758:	223a      	movs	r2, #58	; 0x3a
 800e75a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	330a      	adds	r3, #10
 800e760:	62bb      	str	r3, [r7, #40]	; 0x28
 800e762:	e00a      	b.n	800e77a <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e76a:	da06      	bge.n	800e77a <FT_String_ND+0x402>
														{
															c[10]=':';
 800e76c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e76e:	330a      	adds	r3, #10
 800e770:	223a      	movs	r2, #58	; 0x3a
 800e772:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	330b      	adds	r3, #11
 800e778:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e77c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e77e:	601a      	str	r2, [r3, #0]
							n4=0;
 800e780:	2300      	movs	r3, #0
 800e782:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e784:	e01b      	b.n	800e7be <FT_String_ND+0x446>
 800e786:	bf00      	nop
 800e788:	08010aa8 	.word	0x08010aa8
 800e78c:	08010aac 	.word	0x08010aac
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	1ad2      	subs	r2, r2, r3
 800e796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e798:	441a      	add	r2, r3
 800e79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79c:	4413      	add	r3, r2
 800e79e:	461a      	mov	r2, r3
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	441a      	add	r2, r3
 800e7a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	1ac9      	subs	r1, r1, r3
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ac:	440b      	add	r3, r1
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	440b      	add	r3, r1
 800e7b4:	7812      	ldrb	r2, [r2, #0]
 800e7b6:	701a      	strb	r2, [r3, #0]
								n4++;
 800e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e7be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	1ad2      	subs	r2, r2, r3
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	441a      	add	r2, r3
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	4413      	add	r3, r2
 800e7cc:	6a3a      	ldr	r2, [r7, #32]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	dade      	bge.n	800e790 <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e7d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d6:	441a      	add	r2, r3
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	1e5a      	subs	r2, r3, #1
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	601a      	str	r2, [r3, #0]
							n5=0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e7e6:	e00f      	b.n	800e808 <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	1ad2      	subs	r2, r2, r3
 800e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f0:	4413      	add	r3, r2
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7f6:	441a      	add	r2, r3
 800e7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e7fc:	440b      	add	r3, r1
 800e7fe:	7812      	ldrb	r2, [r2, #0]
 800e800:	701a      	strb	r2, [r3, #0]
								n5++;
 800e802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e804:	3301      	adds	r3, #1
 800e806:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	1ad2      	subs	r2, r2, r3
 800e80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e810:	441a      	add	r2, r3
 800e812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	429a      	cmp	r2, r3
 800e818:	dbe6      	blt.n	800e7e8 <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e81e:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e826:	441a      	add	r2, r3
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	1ad2      	subs	r2, r2, r3
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4413      	add	r3, r2
 800e832:	6a3a      	ldr	r2, [r7, #32]
 800e834:	429a      	cmp	r2, r3
 800e836:	d102      	bne.n	800e83e <FT_String_ND+0x4c6>
							{
								estado=4;
 800e838:	2304      	movs	r3, #4
 800e83a:	627b      	str	r3, [r7, #36]	; 0x24
 800e83c:	e001      	b.n	800e842 <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800e83e:	2305      	movs	r3, #5
 800e840:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800e842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e844:	2b05      	cmp	r3, #5
 800e846:	f040 80bd 	bne.w	800e9c4 <FT_String_ND+0x64c>
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	f040 80b9 	bne.w	800e9c4 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e852:	e012      	b.n	800e87a <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	1ad2      	subs	r2, r2, r3
 800e85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85c:	4413      	add	r3, r2
 800e85e:	461a      	mov	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	441a      	add	r2, r3
 800e864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e866:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e868:	440b      	add	r3, r1
 800e86a:	7812      	ldrb	r2, [r2, #0]
 800e86c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e870:	3301      	adds	r3, #1
 800e872:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e878:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e87a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	1ad2      	subs	r2, r2, r3
 800e880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e882:	4413      	add	r3, r2
 800e884:	6a3a      	ldr	r2, [r7, #32]
 800e886:	429a      	cmp	r2, r3
 800e888:	dae4      	bge.n	800e854 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e88a:	4952      	ldr	r1, [pc, #328]	; (800e9d4 <FT_String_ND+0x65c>)
 800e88c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e88e:	f000 f9b1 	bl	800ebf4 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800e892:	4951      	ldr	r1, [pc, #324]	; (800e9d8 <FT_String_ND+0x660>)
 800e894:	2000      	movs	r0, #0
 800e896:	f000 f9ad 	bl	800ebf4 <strtok>
 800e89a:	4603      	mov	r3, r0
 800e89c:	4618      	mov	r0, r3
 800e89e:	f000 f91c 	bl	800eada <atoi>
 800e8a2:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e8a4:	494c      	ldr	r1, [pc, #304]	; (800e9d8 <FT_String_ND+0x660>)
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	f000 f9a4 	bl	800ebf4 <strtok>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f000 f913 	bl	800eada <atoi>
 800e8b4:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8b8:	3306      	adds	r3, #6
 800e8ba:	222c      	movs	r2, #44	; 0x2c
 800e8bc:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	2b09      	cmp	r3, #9
 800e8c2:	dc07      	bgt.n	800e8d4 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800e8c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8c6:	330a      	adds	r3, #10
 800e8c8:	223a      	movs	r2, #58	; 0x3a
 800e8ca:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	330b      	adds	r3, #11
 800e8d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8d2:	e015      	b.n	800e900 <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	2b63      	cmp	r3, #99	; 0x63
 800e8d8:	dc07      	bgt.n	800e8ea <FT_String_ND+0x572>
														{
															c[11]=':';
 800e8da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8dc:	330b      	adds	r3, #11
 800e8de:	223a      	movs	r2, #58	; 0x3a
 800e8e0:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	330c      	adds	r3, #12
 800e8e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8e8:	e00a      	b.n	800e900 <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e8f0:	da06      	bge.n	800e900 <FT_String_ND+0x588>
														{
															c[12]=':';
 800e8f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8f4:	330c      	adds	r3, #12
 800e8f6:	223a      	movs	r2, #58	; 0x3a
 800e8f8:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	330d      	adds	r3, #13
 800e8fe:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e904:	601a      	str	r2, [r3, #0]
							n4=0;
 800e906:	2300      	movs	r3, #0
 800e908:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e90a:	e016      	b.n	800e93a <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e90c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	1ad2      	subs	r2, r2, r3
 800e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e914:	441a      	add	r2, r3
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	4413      	add	r3, r2
 800e91a:	461a      	mov	r2, r3
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	441a      	add	r2, r3
 800e920:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	1ac9      	subs	r1, r1, r3
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	440b      	add	r3, r1
 800e92a:	4619      	mov	r1, r3
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	440b      	add	r3, r1
 800e930:	7812      	ldrb	r2, [r2, #0]
 800e932:	701a      	strb	r2, [r3, #0]
								n4++;
 800e934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e936:	3301      	adds	r3, #1
 800e938:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e93a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	1ad2      	subs	r2, r2, r3
 800e940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e942:	441a      	add	r2, r3
 800e944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e946:	4413      	add	r3, r2
 800e948:	6a3a      	ldr	r2, [r7, #32]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	dade      	bge.n	800e90c <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e94e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e952:	441a      	add	r2, r3
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	1ad3      	subs	r3, r2, r3
 800e958:	1e5a      	subs	r2, r3, #1
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	601a      	str	r2, [r3, #0]
							n5=0;
 800e95e:	2300      	movs	r3, #0
 800e960:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e962:	e00f      	b.n	800e984 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	1ad2      	subs	r2, r2, r3
 800e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96c:	4413      	add	r3, r2
 800e96e:	461a      	mov	r2, r3
 800e970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e972:	441a      	add	r2, r3
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e978:	440b      	add	r3, r1
 800e97a:	7812      	ldrb	r2, [r2, #0]
 800e97c:	701a      	strb	r2, [r3, #0]
								n5++;
 800e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e980:	3301      	adds	r3, #1
 800e982:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	1ad2      	subs	r2, r2, r3
 800e98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98c:	441a      	add	r2, r3
 800e98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	429a      	cmp	r2, r3
 800e994:	dbe6      	blt.n	800e964 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e99a:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	441a      	add	r2, r3
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	1ad2      	subs	r2, r2, r3
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	6a3a      	ldr	r2, [r7, #32]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d105      	bne.n	800e9c0 <FT_String_ND+0x648>
							{
								estado=4;
 800e9b4:	2304      	movs	r3, #4
 800e9b6:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800e9b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9ba:	693a      	ldr	r2, [r7, #16]
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	e001      	b.n	800e9c4 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800e9c0:	2305      	movs	r3, #5
 800e9c2:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c6:	e000      	b.n	800e9ca <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800e9c8:	2302      	movs	r3, #2
			}
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3740      	adds	r7, #64	; 0x40
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	08010aa8 	.word	0x08010aa8
 800e9d8:	08010aac 	.word	0x08010aac

0800e9dc <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b088      	sub	sp, #32
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800e9e6:	2330      	movs	r3, #48	; 0x30
 800e9e8:	60bb      	str	r3, [r7, #8]
 800e9ea:	f107 030c 	add.w	r3, r7, #12
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	601a      	str	r2, [r3, #0]
 800e9f2:	605a      	str	r2, [r3, #4]
 800e9f4:	609a      	str	r2, [r3, #8]
 800e9f6:	60da      	str	r2, [r3, #12]
int i=0;	
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800e9fc:	f107 0308 	add.w	r3, r7, #8
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	490f      	ldr	r1, [pc, #60]	; (800ea40 <INTOA+0x64>)
 800ea04:	4618      	mov	r0, r3
 800ea06:	f000 f8b9 	bl	800eb7c <siprintf>
		while(i<=strlen(origbuff))
 800ea0a:	e00b      	b.n	800ea24 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	1c5a      	adds	r2, r3, #1
 800ea10:	603a      	str	r2, [r7, #0]
 800ea12:	f107 0108 	add.w	r1, r7, #8
 800ea16:	69fa      	ldr	r2, [r7, #28]
 800ea18:	440a      	add	r2, r1
 800ea1a:	7812      	ldrb	r2, [r2, #0]
 800ea1c:	701a      	strb	r2, [r3, #0]
		i++;
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	3301      	adds	r3, #1
 800ea22:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ea24:	f107 0308 	add.w	r3, r7, #8
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7f1 fbe3 	bl	80001f4 <strlen>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d2ea      	bcs.n	800ea0c <INTOA+0x30>
		}
		return(i);
 800ea36:	69fb      	ldr	r3, [r7, #28]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3720      	adds	r7, #32
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	08010ab0 	.word	0x08010ab0

0800ea44 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b088      	sub	sp, #32
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
 800ea50:	603b      	str	r3, [r7, #0]
int x =0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800ea56:	2300      	movs	r3, #0
 800ea58:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800ea5a:	f107 0310 	add.w	r3, r7, #16
 800ea5e:	617b      	str	r3, [r7, #20]
if (c==0)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d105      	bne.n	800ea72 <CopiaVector+0x2e>
{
	x=strlen(b);
 800ea66:	68b8      	ldr	r0, [r7, #8]
 800ea68:	f7f1 fbc4 	bl	80001f4 <strlen>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	61bb      	str	r3, [r7, #24]
 800ea70:	e02e      	b.n	800ead0 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea7c:	dd01      	ble.n	800ea82 <CopiaVector+0x3e>
			{
				return(1);
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e027      	b.n	800ead2 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800ea82:	2300      	movs	r3, #0
 800ea84:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ea86:	e00a      	b.n	800ea9e <CopiaVector+0x5a>
				{
					*a++=*b++;
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	1c53      	adds	r3, r2, #1
 800ea8c:	60bb      	str	r3, [r7, #8]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	1c59      	adds	r1, r3, #1
 800ea92:	60f9      	str	r1, [r7, #12]
 800ea94:	7812      	ldrb	r2, [r2, #0]
 800ea96:	701a      	strb	r2, [r3, #0]
					p++;
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ea9e:	69fa      	ldr	r2, [r7, #28]
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	dbf0      	blt.n	800ea88 <CopiaVector+0x44>
				}


			if (d==1)
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d111      	bne.n	800ead0 <CopiaVector+0x8c>
			{
			  p=c;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eab0:	e008      	b.n	800eac4 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	1c5a      	adds	r2, r3, #1
 800eab6:	60fa      	str	r2, [r7, #12]
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	7812      	ldrb	r2, [r2, #0]
 800eabc:	701a      	strb	r2, [r3, #0]
				  p++;
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	3301      	adds	r3, #1
 800eac2:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eaca:	dbf2      	blt.n	800eab2 <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800eacc:	2300      	movs	r3, #0
 800eace:	e000      	b.n	800ead2 <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800ead0:	2301      	movs	r3, #1
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3720      	adds	r7, #32
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <atoi>:
 800eada:	220a      	movs	r2, #10
 800eadc:	2100      	movs	r1, #0
 800eade:	f000 b967 	b.w	800edb0 <strtol>
	...

0800eae4 <__errno>:
 800eae4:	4b01      	ldr	r3, [pc, #4]	; (800eaec <__errno+0x8>)
 800eae6:	6818      	ldr	r0, [r3, #0]
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	2000013c 	.word	0x2000013c

0800eaf0 <__libc_init_array>:
 800eaf0:	b570      	push	{r4, r5, r6, lr}
 800eaf2:	4d0d      	ldr	r5, [pc, #52]	; (800eb28 <__libc_init_array+0x38>)
 800eaf4:	4c0d      	ldr	r4, [pc, #52]	; (800eb2c <__libc_init_array+0x3c>)
 800eaf6:	1b64      	subs	r4, r4, r5
 800eaf8:	10a4      	asrs	r4, r4, #2
 800eafa:	2600      	movs	r6, #0
 800eafc:	42a6      	cmp	r6, r4
 800eafe:	d109      	bne.n	800eb14 <__libc_init_array+0x24>
 800eb00:	4d0b      	ldr	r5, [pc, #44]	; (800eb30 <__libc_init_array+0x40>)
 800eb02:	4c0c      	ldr	r4, [pc, #48]	; (800eb34 <__libc_init_array+0x44>)
 800eb04:	f001 fb56 	bl	80101b4 <_init>
 800eb08:	1b64      	subs	r4, r4, r5
 800eb0a:	10a4      	asrs	r4, r4, #2
 800eb0c:	2600      	movs	r6, #0
 800eb0e:	42a6      	cmp	r6, r4
 800eb10:	d105      	bne.n	800eb1e <__libc_init_array+0x2e>
 800eb12:	bd70      	pop	{r4, r5, r6, pc}
 800eb14:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb18:	4798      	blx	r3
 800eb1a:	3601      	adds	r6, #1
 800eb1c:	e7ee      	b.n	800eafc <__libc_init_array+0xc>
 800eb1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb22:	4798      	blx	r3
 800eb24:	3601      	adds	r6, #1
 800eb26:	e7f2      	b.n	800eb0e <__libc_init_array+0x1e>
 800eb28:	08010d44 	.word	0x08010d44
 800eb2c:	08010d44 	.word	0x08010d44
 800eb30:	08010d44 	.word	0x08010d44
 800eb34:	08010d48 	.word	0x08010d48

0800eb38 <__itoa>:
 800eb38:	1e93      	subs	r3, r2, #2
 800eb3a:	2b22      	cmp	r3, #34	; 0x22
 800eb3c:	b510      	push	{r4, lr}
 800eb3e:	460c      	mov	r4, r1
 800eb40:	d904      	bls.n	800eb4c <__itoa+0x14>
 800eb42:	2300      	movs	r3, #0
 800eb44:	700b      	strb	r3, [r1, #0]
 800eb46:	461c      	mov	r4, r3
 800eb48:	4620      	mov	r0, r4
 800eb4a:	bd10      	pop	{r4, pc}
 800eb4c:	2a0a      	cmp	r2, #10
 800eb4e:	d109      	bne.n	800eb64 <__itoa+0x2c>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	da07      	bge.n	800eb64 <__itoa+0x2c>
 800eb54:	232d      	movs	r3, #45	; 0x2d
 800eb56:	700b      	strb	r3, [r1, #0]
 800eb58:	4240      	negs	r0, r0
 800eb5a:	2101      	movs	r1, #1
 800eb5c:	4421      	add	r1, r4
 800eb5e:	f000 f931 	bl	800edc4 <__utoa>
 800eb62:	e7f1      	b.n	800eb48 <__itoa+0x10>
 800eb64:	2100      	movs	r1, #0
 800eb66:	e7f9      	b.n	800eb5c <__itoa+0x24>

0800eb68 <itoa>:
 800eb68:	f7ff bfe6 	b.w	800eb38 <__itoa>

0800eb6c <memset>:
 800eb6c:	4402      	add	r2, r0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d100      	bne.n	800eb76 <memset+0xa>
 800eb74:	4770      	bx	lr
 800eb76:	f803 1b01 	strb.w	r1, [r3], #1
 800eb7a:	e7f9      	b.n	800eb70 <memset+0x4>

0800eb7c <siprintf>:
 800eb7c:	b40e      	push	{r1, r2, r3}
 800eb7e:	b500      	push	{lr}
 800eb80:	b09c      	sub	sp, #112	; 0x70
 800eb82:	ab1d      	add	r3, sp, #116	; 0x74
 800eb84:	9002      	str	r0, [sp, #8]
 800eb86:	9006      	str	r0, [sp, #24]
 800eb88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb8c:	4809      	ldr	r0, [pc, #36]	; (800ebb4 <siprintf+0x38>)
 800eb8e:	9107      	str	r1, [sp, #28]
 800eb90:	9104      	str	r1, [sp, #16]
 800eb92:	4909      	ldr	r1, [pc, #36]	; (800ebb8 <siprintf+0x3c>)
 800eb94:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb98:	9105      	str	r1, [sp, #20]
 800eb9a:	6800      	ldr	r0, [r0, #0]
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	a902      	add	r1, sp, #8
 800eba0:	f000 fac6 	bl	800f130 <_svfiprintf_r>
 800eba4:	9b02      	ldr	r3, [sp, #8]
 800eba6:	2200      	movs	r2, #0
 800eba8:	701a      	strb	r2, [r3, #0]
 800ebaa:	b01c      	add	sp, #112	; 0x70
 800ebac:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebb0:	b003      	add	sp, #12
 800ebb2:	4770      	bx	lr
 800ebb4:	2000013c 	.word	0x2000013c
 800ebb8:	ffff0208 	.word	0xffff0208

0800ebbc <strcpy>:
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebc2:	f803 2b01 	strb.w	r2, [r3], #1
 800ebc6:	2a00      	cmp	r2, #0
 800ebc8:	d1f9      	bne.n	800ebbe <strcpy+0x2>
 800ebca:	4770      	bx	lr

0800ebcc <strncat>:
 800ebcc:	b530      	push	{r4, r5, lr}
 800ebce:	4604      	mov	r4, r0
 800ebd0:	7825      	ldrb	r5, [r4, #0]
 800ebd2:	4623      	mov	r3, r4
 800ebd4:	3401      	adds	r4, #1
 800ebd6:	2d00      	cmp	r5, #0
 800ebd8:	d1fa      	bne.n	800ebd0 <strncat+0x4>
 800ebda:	3a01      	subs	r2, #1
 800ebdc:	d304      	bcc.n	800ebe8 <strncat+0x1c>
 800ebde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebe2:	f803 4b01 	strb.w	r4, [r3], #1
 800ebe6:	b904      	cbnz	r4, 800ebea <strncat+0x1e>
 800ebe8:	bd30      	pop	{r4, r5, pc}
 800ebea:	2a00      	cmp	r2, #0
 800ebec:	d1f5      	bne.n	800ebda <strncat+0xe>
 800ebee:	701a      	strb	r2, [r3, #0]
 800ebf0:	e7f3      	b.n	800ebda <strncat+0xe>
	...

0800ebf4 <strtok>:
 800ebf4:	4b16      	ldr	r3, [pc, #88]	; (800ec50 <strtok+0x5c>)
 800ebf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebf8:	681e      	ldr	r6, [r3, #0]
 800ebfa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ebfc:	4605      	mov	r5, r0
 800ebfe:	b9fc      	cbnz	r4, 800ec40 <strtok+0x4c>
 800ec00:	2050      	movs	r0, #80	; 0x50
 800ec02:	9101      	str	r1, [sp, #4]
 800ec04:	f000 f950 	bl	800eea8 <malloc>
 800ec08:	9901      	ldr	r1, [sp, #4]
 800ec0a:	65b0      	str	r0, [r6, #88]	; 0x58
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	b920      	cbnz	r0, 800ec1a <strtok+0x26>
 800ec10:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <strtok+0x60>)
 800ec12:	4811      	ldr	r0, [pc, #68]	; (800ec58 <strtok+0x64>)
 800ec14:	2157      	movs	r1, #87	; 0x57
 800ec16:	f000 f917 	bl	800ee48 <__assert_func>
 800ec1a:	e9c0 4400 	strd	r4, r4, [r0]
 800ec1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ec22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ec26:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ec2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ec2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ec32:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ec36:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ec3a:	6184      	str	r4, [r0, #24]
 800ec3c:	7704      	strb	r4, [r0, #28]
 800ec3e:	6244      	str	r4, [r0, #36]	; 0x24
 800ec40:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ec42:	2301      	movs	r3, #1
 800ec44:	4628      	mov	r0, r5
 800ec46:	b002      	add	sp, #8
 800ec48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec4c:	f000 b806 	b.w	800ec5c <__strtok_r>
 800ec50:	2000013c 	.word	0x2000013c
 800ec54:	08010ad0 	.word	0x08010ad0
 800ec58:	08010ae7 	.word	0x08010ae7

0800ec5c <__strtok_r>:
 800ec5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec5e:	b908      	cbnz	r0, 800ec64 <__strtok_r+0x8>
 800ec60:	6810      	ldr	r0, [r2, #0]
 800ec62:	b188      	cbz	r0, 800ec88 <__strtok_r+0x2c>
 800ec64:	4604      	mov	r4, r0
 800ec66:	4620      	mov	r0, r4
 800ec68:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ec72:	b91e      	cbnz	r6, 800ec7c <__strtok_r+0x20>
 800ec74:	b965      	cbnz	r5, 800ec90 <__strtok_r+0x34>
 800ec76:	6015      	str	r5, [r2, #0]
 800ec78:	4628      	mov	r0, r5
 800ec7a:	e005      	b.n	800ec88 <__strtok_r+0x2c>
 800ec7c:	42b5      	cmp	r5, r6
 800ec7e:	d1f6      	bne.n	800ec6e <__strtok_r+0x12>
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d1f0      	bne.n	800ec66 <__strtok_r+0xa>
 800ec84:	6014      	str	r4, [r2, #0]
 800ec86:	7003      	strb	r3, [r0, #0]
 800ec88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec8a:	461c      	mov	r4, r3
 800ec8c:	e00c      	b.n	800eca8 <__strtok_r+0x4c>
 800ec8e:	b915      	cbnz	r5, 800ec96 <__strtok_r+0x3a>
 800ec90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ec94:	460e      	mov	r6, r1
 800ec96:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ec9a:	42ab      	cmp	r3, r5
 800ec9c:	d1f7      	bne.n	800ec8e <__strtok_r+0x32>
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d0f3      	beq.n	800ec8a <__strtok_r+0x2e>
 800eca2:	2300      	movs	r3, #0
 800eca4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800eca8:	6014      	str	r4, [r2, #0]
 800ecaa:	e7ed      	b.n	800ec88 <__strtok_r+0x2c>

0800ecac <_strtol_l.constprop.0>:
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb2:	d001      	beq.n	800ecb8 <_strtol_l.constprop.0+0xc>
 800ecb4:	2b24      	cmp	r3, #36	; 0x24
 800ecb6:	d906      	bls.n	800ecc6 <_strtol_l.constprop.0+0x1a>
 800ecb8:	f7ff ff14 	bl	800eae4 <__errno>
 800ecbc:	2316      	movs	r3, #22
 800ecbe:	6003      	str	r3, [r0, #0]
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecc6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800edac <_strtol_l.constprop.0+0x100>
 800ecca:	460d      	mov	r5, r1
 800eccc:	462e      	mov	r6, r5
 800ecce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecd2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ecd6:	f017 0708 	ands.w	r7, r7, #8
 800ecda:	d1f7      	bne.n	800eccc <_strtol_l.constprop.0+0x20>
 800ecdc:	2c2d      	cmp	r4, #45	; 0x2d
 800ecde:	d132      	bne.n	800ed46 <_strtol_l.constprop.0+0x9a>
 800ece0:	782c      	ldrb	r4, [r5, #0]
 800ece2:	2701      	movs	r7, #1
 800ece4:	1cb5      	adds	r5, r6, #2
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d05b      	beq.n	800eda2 <_strtol_l.constprop.0+0xf6>
 800ecea:	2b10      	cmp	r3, #16
 800ecec:	d109      	bne.n	800ed02 <_strtol_l.constprop.0+0x56>
 800ecee:	2c30      	cmp	r4, #48	; 0x30
 800ecf0:	d107      	bne.n	800ed02 <_strtol_l.constprop.0+0x56>
 800ecf2:	782c      	ldrb	r4, [r5, #0]
 800ecf4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ecf8:	2c58      	cmp	r4, #88	; 0x58
 800ecfa:	d14d      	bne.n	800ed98 <_strtol_l.constprop.0+0xec>
 800ecfc:	786c      	ldrb	r4, [r5, #1]
 800ecfe:	2310      	movs	r3, #16
 800ed00:	3502      	adds	r5, #2
 800ed02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ed06:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed0a:	f04f 0c00 	mov.w	ip, #0
 800ed0e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ed12:	4666      	mov	r6, ip
 800ed14:	fb03 8a19 	mls	sl, r3, r9, r8
 800ed18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ed1c:	f1be 0f09 	cmp.w	lr, #9
 800ed20:	d816      	bhi.n	800ed50 <_strtol_l.constprop.0+0xa4>
 800ed22:	4674      	mov	r4, lr
 800ed24:	42a3      	cmp	r3, r4
 800ed26:	dd24      	ble.n	800ed72 <_strtol_l.constprop.0+0xc6>
 800ed28:	f1bc 0f00 	cmp.w	ip, #0
 800ed2c:	db1e      	blt.n	800ed6c <_strtol_l.constprop.0+0xc0>
 800ed2e:	45b1      	cmp	r9, r6
 800ed30:	d31c      	bcc.n	800ed6c <_strtol_l.constprop.0+0xc0>
 800ed32:	d101      	bne.n	800ed38 <_strtol_l.constprop.0+0x8c>
 800ed34:	45a2      	cmp	sl, r4
 800ed36:	db19      	blt.n	800ed6c <_strtol_l.constprop.0+0xc0>
 800ed38:	fb06 4603 	mla	r6, r6, r3, r4
 800ed3c:	f04f 0c01 	mov.w	ip, #1
 800ed40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed44:	e7e8      	b.n	800ed18 <_strtol_l.constprop.0+0x6c>
 800ed46:	2c2b      	cmp	r4, #43	; 0x2b
 800ed48:	bf04      	itt	eq
 800ed4a:	782c      	ldrbeq	r4, [r5, #0]
 800ed4c:	1cb5      	addeq	r5, r6, #2
 800ed4e:	e7ca      	b.n	800ece6 <_strtol_l.constprop.0+0x3a>
 800ed50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ed54:	f1be 0f19 	cmp.w	lr, #25
 800ed58:	d801      	bhi.n	800ed5e <_strtol_l.constprop.0+0xb2>
 800ed5a:	3c37      	subs	r4, #55	; 0x37
 800ed5c:	e7e2      	b.n	800ed24 <_strtol_l.constprop.0+0x78>
 800ed5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ed62:	f1be 0f19 	cmp.w	lr, #25
 800ed66:	d804      	bhi.n	800ed72 <_strtol_l.constprop.0+0xc6>
 800ed68:	3c57      	subs	r4, #87	; 0x57
 800ed6a:	e7db      	b.n	800ed24 <_strtol_l.constprop.0+0x78>
 800ed6c:	f04f 3cff 	mov.w	ip, #4294967295
 800ed70:	e7e6      	b.n	800ed40 <_strtol_l.constprop.0+0x94>
 800ed72:	f1bc 0f00 	cmp.w	ip, #0
 800ed76:	da05      	bge.n	800ed84 <_strtol_l.constprop.0+0xd8>
 800ed78:	2322      	movs	r3, #34	; 0x22
 800ed7a:	6003      	str	r3, [r0, #0]
 800ed7c:	4646      	mov	r6, r8
 800ed7e:	b942      	cbnz	r2, 800ed92 <_strtol_l.constprop.0+0xe6>
 800ed80:	4630      	mov	r0, r6
 800ed82:	e79e      	b.n	800ecc2 <_strtol_l.constprop.0+0x16>
 800ed84:	b107      	cbz	r7, 800ed88 <_strtol_l.constprop.0+0xdc>
 800ed86:	4276      	negs	r6, r6
 800ed88:	2a00      	cmp	r2, #0
 800ed8a:	d0f9      	beq.n	800ed80 <_strtol_l.constprop.0+0xd4>
 800ed8c:	f1bc 0f00 	cmp.w	ip, #0
 800ed90:	d000      	beq.n	800ed94 <_strtol_l.constprop.0+0xe8>
 800ed92:	1e69      	subs	r1, r5, #1
 800ed94:	6011      	str	r1, [r2, #0]
 800ed96:	e7f3      	b.n	800ed80 <_strtol_l.constprop.0+0xd4>
 800ed98:	2430      	movs	r4, #48	; 0x30
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d1b1      	bne.n	800ed02 <_strtol_l.constprop.0+0x56>
 800ed9e:	2308      	movs	r3, #8
 800eda0:	e7af      	b.n	800ed02 <_strtol_l.constprop.0+0x56>
 800eda2:	2c30      	cmp	r4, #48	; 0x30
 800eda4:	d0a5      	beq.n	800ecf2 <_strtol_l.constprop.0+0x46>
 800eda6:	230a      	movs	r3, #10
 800eda8:	e7ab      	b.n	800ed02 <_strtol_l.constprop.0+0x56>
 800edaa:	bf00      	nop
 800edac:	08010ba6 	.word	0x08010ba6

0800edb0 <strtol>:
 800edb0:	4613      	mov	r3, r2
 800edb2:	460a      	mov	r2, r1
 800edb4:	4601      	mov	r1, r0
 800edb6:	4802      	ldr	r0, [pc, #8]	; (800edc0 <strtol+0x10>)
 800edb8:	6800      	ldr	r0, [r0, #0]
 800edba:	f7ff bf77 	b.w	800ecac <_strtol_l.constprop.0>
 800edbe:	bf00      	nop
 800edc0:	2000013c 	.word	0x2000013c

0800edc4 <__utoa>:
 800edc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edc6:	4c1f      	ldr	r4, [pc, #124]	; (800ee44 <__utoa+0x80>)
 800edc8:	b08b      	sub	sp, #44	; 0x2c
 800edca:	4605      	mov	r5, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	466e      	mov	r6, sp
 800edd0:	f104 0c20 	add.w	ip, r4, #32
 800edd4:	6820      	ldr	r0, [r4, #0]
 800edd6:	6861      	ldr	r1, [r4, #4]
 800edd8:	4637      	mov	r7, r6
 800edda:	c703      	stmia	r7!, {r0, r1}
 800eddc:	3408      	adds	r4, #8
 800edde:	4564      	cmp	r4, ip
 800ede0:	463e      	mov	r6, r7
 800ede2:	d1f7      	bne.n	800edd4 <__utoa+0x10>
 800ede4:	7921      	ldrb	r1, [r4, #4]
 800ede6:	7139      	strb	r1, [r7, #4]
 800ede8:	1e91      	subs	r1, r2, #2
 800edea:	6820      	ldr	r0, [r4, #0]
 800edec:	6038      	str	r0, [r7, #0]
 800edee:	2922      	cmp	r1, #34	; 0x22
 800edf0:	f04f 0100 	mov.w	r1, #0
 800edf4:	d904      	bls.n	800ee00 <__utoa+0x3c>
 800edf6:	7019      	strb	r1, [r3, #0]
 800edf8:	460b      	mov	r3, r1
 800edfa:	4618      	mov	r0, r3
 800edfc:	b00b      	add	sp, #44	; 0x2c
 800edfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee00:	1e58      	subs	r0, r3, #1
 800ee02:	4684      	mov	ip, r0
 800ee04:	fbb5 f7f2 	udiv	r7, r5, r2
 800ee08:	fb02 5617 	mls	r6, r2, r7, r5
 800ee0c:	3628      	adds	r6, #40	; 0x28
 800ee0e:	446e      	add	r6, sp
 800ee10:	460c      	mov	r4, r1
 800ee12:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ee16:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ee1a:	462e      	mov	r6, r5
 800ee1c:	42b2      	cmp	r2, r6
 800ee1e:	f101 0101 	add.w	r1, r1, #1
 800ee22:	463d      	mov	r5, r7
 800ee24:	d9ee      	bls.n	800ee04 <__utoa+0x40>
 800ee26:	2200      	movs	r2, #0
 800ee28:	545a      	strb	r2, [r3, r1]
 800ee2a:	1919      	adds	r1, r3, r4
 800ee2c:	1aa5      	subs	r5, r4, r2
 800ee2e:	42aa      	cmp	r2, r5
 800ee30:	dae3      	bge.n	800edfa <__utoa+0x36>
 800ee32:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ee36:	780e      	ldrb	r6, [r1, #0]
 800ee38:	7006      	strb	r6, [r0, #0]
 800ee3a:	3201      	adds	r2, #1
 800ee3c:	f801 5901 	strb.w	r5, [r1], #-1
 800ee40:	e7f4      	b.n	800ee2c <__utoa+0x68>
 800ee42:	bf00      	nop
 800ee44:	08010b44 	.word	0x08010b44

0800ee48 <__assert_func>:
 800ee48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee4a:	4614      	mov	r4, r2
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	4b09      	ldr	r3, [pc, #36]	; (800ee74 <__assert_func+0x2c>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4605      	mov	r5, r0
 800ee54:	68d8      	ldr	r0, [r3, #12]
 800ee56:	b14c      	cbz	r4, 800ee6c <__assert_func+0x24>
 800ee58:	4b07      	ldr	r3, [pc, #28]	; (800ee78 <__assert_func+0x30>)
 800ee5a:	9100      	str	r1, [sp, #0]
 800ee5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee60:	4906      	ldr	r1, [pc, #24]	; (800ee7c <__assert_func+0x34>)
 800ee62:	462b      	mov	r3, r5
 800ee64:	f000 f80e 	bl	800ee84 <fiprintf>
 800ee68:	f000 fe20 	bl	800faac <abort>
 800ee6c:	4b04      	ldr	r3, [pc, #16]	; (800ee80 <__assert_func+0x38>)
 800ee6e:	461c      	mov	r4, r3
 800ee70:	e7f3      	b.n	800ee5a <__assert_func+0x12>
 800ee72:	bf00      	nop
 800ee74:	2000013c 	.word	0x2000013c
 800ee78:	08010b69 	.word	0x08010b69
 800ee7c:	08010b76 	.word	0x08010b76
 800ee80:	08010ba4 	.word	0x08010ba4

0800ee84 <fiprintf>:
 800ee84:	b40e      	push	{r1, r2, r3}
 800ee86:	b503      	push	{r0, r1, lr}
 800ee88:	4601      	mov	r1, r0
 800ee8a:	ab03      	add	r3, sp, #12
 800ee8c:	4805      	ldr	r0, [pc, #20]	; (800eea4 <fiprintf+0x20>)
 800ee8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee92:	6800      	ldr	r0, [r0, #0]
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	f000 fa75 	bl	800f384 <_vfiprintf_r>
 800ee9a:	b002      	add	sp, #8
 800ee9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eea0:	b003      	add	sp, #12
 800eea2:	4770      	bx	lr
 800eea4:	2000013c 	.word	0x2000013c

0800eea8 <malloc>:
 800eea8:	4b02      	ldr	r3, [pc, #8]	; (800eeb4 <malloc+0xc>)
 800eeaa:	4601      	mov	r1, r0
 800eeac:	6818      	ldr	r0, [r3, #0]
 800eeae:	f000 b86f 	b.w	800ef90 <_malloc_r>
 800eeb2:	bf00      	nop
 800eeb4:	2000013c 	.word	0x2000013c

0800eeb8 <_free_r>:
 800eeb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eeba:	2900      	cmp	r1, #0
 800eebc:	d044      	beq.n	800ef48 <_free_r+0x90>
 800eebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eec2:	9001      	str	r0, [sp, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f1a1 0404 	sub.w	r4, r1, #4
 800eeca:	bfb8      	it	lt
 800eecc:	18e4      	addlt	r4, r4, r3
 800eece:	f001 f83d 	bl	800ff4c <__malloc_lock>
 800eed2:	4a1e      	ldr	r2, [pc, #120]	; (800ef4c <_free_r+0x94>)
 800eed4:	9801      	ldr	r0, [sp, #4]
 800eed6:	6813      	ldr	r3, [r2, #0]
 800eed8:	b933      	cbnz	r3, 800eee8 <_free_r+0x30>
 800eeda:	6063      	str	r3, [r4, #4]
 800eedc:	6014      	str	r4, [r2, #0]
 800eede:	b003      	add	sp, #12
 800eee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eee4:	f001 b838 	b.w	800ff58 <__malloc_unlock>
 800eee8:	42a3      	cmp	r3, r4
 800eeea:	d908      	bls.n	800eefe <_free_r+0x46>
 800eeec:	6825      	ldr	r5, [r4, #0]
 800eeee:	1961      	adds	r1, r4, r5
 800eef0:	428b      	cmp	r3, r1
 800eef2:	bf01      	itttt	eq
 800eef4:	6819      	ldreq	r1, [r3, #0]
 800eef6:	685b      	ldreq	r3, [r3, #4]
 800eef8:	1949      	addeq	r1, r1, r5
 800eefa:	6021      	streq	r1, [r4, #0]
 800eefc:	e7ed      	b.n	800eeda <_free_r+0x22>
 800eefe:	461a      	mov	r2, r3
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	b10b      	cbz	r3, 800ef08 <_free_r+0x50>
 800ef04:	42a3      	cmp	r3, r4
 800ef06:	d9fa      	bls.n	800eefe <_free_r+0x46>
 800ef08:	6811      	ldr	r1, [r2, #0]
 800ef0a:	1855      	adds	r5, r2, r1
 800ef0c:	42a5      	cmp	r5, r4
 800ef0e:	d10b      	bne.n	800ef28 <_free_r+0x70>
 800ef10:	6824      	ldr	r4, [r4, #0]
 800ef12:	4421      	add	r1, r4
 800ef14:	1854      	adds	r4, r2, r1
 800ef16:	42a3      	cmp	r3, r4
 800ef18:	6011      	str	r1, [r2, #0]
 800ef1a:	d1e0      	bne.n	800eede <_free_r+0x26>
 800ef1c:	681c      	ldr	r4, [r3, #0]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	6053      	str	r3, [r2, #4]
 800ef22:	4421      	add	r1, r4
 800ef24:	6011      	str	r1, [r2, #0]
 800ef26:	e7da      	b.n	800eede <_free_r+0x26>
 800ef28:	d902      	bls.n	800ef30 <_free_r+0x78>
 800ef2a:	230c      	movs	r3, #12
 800ef2c:	6003      	str	r3, [r0, #0]
 800ef2e:	e7d6      	b.n	800eede <_free_r+0x26>
 800ef30:	6825      	ldr	r5, [r4, #0]
 800ef32:	1961      	adds	r1, r4, r5
 800ef34:	428b      	cmp	r3, r1
 800ef36:	bf04      	itt	eq
 800ef38:	6819      	ldreq	r1, [r3, #0]
 800ef3a:	685b      	ldreq	r3, [r3, #4]
 800ef3c:	6063      	str	r3, [r4, #4]
 800ef3e:	bf04      	itt	eq
 800ef40:	1949      	addeq	r1, r1, r5
 800ef42:	6021      	streq	r1, [r4, #0]
 800ef44:	6054      	str	r4, [r2, #4]
 800ef46:	e7ca      	b.n	800eede <_free_r+0x26>
 800ef48:	b003      	add	sp, #12
 800ef4a:	bd30      	pop	{r4, r5, pc}
 800ef4c:	20003e80 	.word	0x20003e80

0800ef50 <sbrk_aligned>:
 800ef50:	b570      	push	{r4, r5, r6, lr}
 800ef52:	4e0e      	ldr	r6, [pc, #56]	; (800ef8c <sbrk_aligned+0x3c>)
 800ef54:	460c      	mov	r4, r1
 800ef56:	6831      	ldr	r1, [r6, #0]
 800ef58:	4605      	mov	r5, r0
 800ef5a:	b911      	cbnz	r1, 800ef62 <sbrk_aligned+0x12>
 800ef5c:	f000 fcd6 	bl	800f90c <_sbrk_r>
 800ef60:	6030      	str	r0, [r6, #0]
 800ef62:	4621      	mov	r1, r4
 800ef64:	4628      	mov	r0, r5
 800ef66:	f000 fcd1 	bl	800f90c <_sbrk_r>
 800ef6a:	1c43      	adds	r3, r0, #1
 800ef6c:	d00a      	beq.n	800ef84 <sbrk_aligned+0x34>
 800ef6e:	1cc4      	adds	r4, r0, #3
 800ef70:	f024 0403 	bic.w	r4, r4, #3
 800ef74:	42a0      	cmp	r0, r4
 800ef76:	d007      	beq.n	800ef88 <sbrk_aligned+0x38>
 800ef78:	1a21      	subs	r1, r4, r0
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	f000 fcc6 	bl	800f90c <_sbrk_r>
 800ef80:	3001      	adds	r0, #1
 800ef82:	d101      	bne.n	800ef88 <sbrk_aligned+0x38>
 800ef84:	f04f 34ff 	mov.w	r4, #4294967295
 800ef88:	4620      	mov	r0, r4
 800ef8a:	bd70      	pop	{r4, r5, r6, pc}
 800ef8c:	20003e84 	.word	0x20003e84

0800ef90 <_malloc_r>:
 800ef90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef94:	1ccd      	adds	r5, r1, #3
 800ef96:	f025 0503 	bic.w	r5, r5, #3
 800ef9a:	3508      	adds	r5, #8
 800ef9c:	2d0c      	cmp	r5, #12
 800ef9e:	bf38      	it	cc
 800efa0:	250c      	movcc	r5, #12
 800efa2:	2d00      	cmp	r5, #0
 800efa4:	4607      	mov	r7, r0
 800efa6:	db01      	blt.n	800efac <_malloc_r+0x1c>
 800efa8:	42a9      	cmp	r1, r5
 800efaa:	d905      	bls.n	800efb8 <_malloc_r+0x28>
 800efac:	230c      	movs	r3, #12
 800efae:	603b      	str	r3, [r7, #0]
 800efb0:	2600      	movs	r6, #0
 800efb2:	4630      	mov	r0, r6
 800efb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb8:	4e2e      	ldr	r6, [pc, #184]	; (800f074 <_malloc_r+0xe4>)
 800efba:	f000 ffc7 	bl	800ff4c <__malloc_lock>
 800efbe:	6833      	ldr	r3, [r6, #0]
 800efc0:	461c      	mov	r4, r3
 800efc2:	bb34      	cbnz	r4, 800f012 <_malloc_r+0x82>
 800efc4:	4629      	mov	r1, r5
 800efc6:	4638      	mov	r0, r7
 800efc8:	f7ff ffc2 	bl	800ef50 <sbrk_aligned>
 800efcc:	1c43      	adds	r3, r0, #1
 800efce:	4604      	mov	r4, r0
 800efd0:	d14d      	bne.n	800f06e <_malloc_r+0xde>
 800efd2:	6834      	ldr	r4, [r6, #0]
 800efd4:	4626      	mov	r6, r4
 800efd6:	2e00      	cmp	r6, #0
 800efd8:	d140      	bne.n	800f05c <_malloc_r+0xcc>
 800efda:	6823      	ldr	r3, [r4, #0]
 800efdc:	4631      	mov	r1, r6
 800efde:	4638      	mov	r0, r7
 800efe0:	eb04 0803 	add.w	r8, r4, r3
 800efe4:	f000 fc92 	bl	800f90c <_sbrk_r>
 800efe8:	4580      	cmp	r8, r0
 800efea:	d13a      	bne.n	800f062 <_malloc_r+0xd2>
 800efec:	6821      	ldr	r1, [r4, #0]
 800efee:	3503      	adds	r5, #3
 800eff0:	1a6d      	subs	r5, r5, r1
 800eff2:	f025 0503 	bic.w	r5, r5, #3
 800eff6:	3508      	adds	r5, #8
 800eff8:	2d0c      	cmp	r5, #12
 800effa:	bf38      	it	cc
 800effc:	250c      	movcc	r5, #12
 800effe:	4629      	mov	r1, r5
 800f000:	4638      	mov	r0, r7
 800f002:	f7ff ffa5 	bl	800ef50 <sbrk_aligned>
 800f006:	3001      	adds	r0, #1
 800f008:	d02b      	beq.n	800f062 <_malloc_r+0xd2>
 800f00a:	6823      	ldr	r3, [r4, #0]
 800f00c:	442b      	add	r3, r5
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	e00e      	b.n	800f030 <_malloc_r+0xa0>
 800f012:	6822      	ldr	r2, [r4, #0]
 800f014:	1b52      	subs	r2, r2, r5
 800f016:	d41e      	bmi.n	800f056 <_malloc_r+0xc6>
 800f018:	2a0b      	cmp	r2, #11
 800f01a:	d916      	bls.n	800f04a <_malloc_r+0xba>
 800f01c:	1961      	adds	r1, r4, r5
 800f01e:	42a3      	cmp	r3, r4
 800f020:	6025      	str	r5, [r4, #0]
 800f022:	bf18      	it	ne
 800f024:	6059      	strne	r1, [r3, #4]
 800f026:	6863      	ldr	r3, [r4, #4]
 800f028:	bf08      	it	eq
 800f02a:	6031      	streq	r1, [r6, #0]
 800f02c:	5162      	str	r2, [r4, r5]
 800f02e:	604b      	str	r3, [r1, #4]
 800f030:	4638      	mov	r0, r7
 800f032:	f104 060b 	add.w	r6, r4, #11
 800f036:	f000 ff8f 	bl	800ff58 <__malloc_unlock>
 800f03a:	f026 0607 	bic.w	r6, r6, #7
 800f03e:	1d23      	adds	r3, r4, #4
 800f040:	1af2      	subs	r2, r6, r3
 800f042:	d0b6      	beq.n	800efb2 <_malloc_r+0x22>
 800f044:	1b9b      	subs	r3, r3, r6
 800f046:	50a3      	str	r3, [r4, r2]
 800f048:	e7b3      	b.n	800efb2 <_malloc_r+0x22>
 800f04a:	6862      	ldr	r2, [r4, #4]
 800f04c:	42a3      	cmp	r3, r4
 800f04e:	bf0c      	ite	eq
 800f050:	6032      	streq	r2, [r6, #0]
 800f052:	605a      	strne	r2, [r3, #4]
 800f054:	e7ec      	b.n	800f030 <_malloc_r+0xa0>
 800f056:	4623      	mov	r3, r4
 800f058:	6864      	ldr	r4, [r4, #4]
 800f05a:	e7b2      	b.n	800efc2 <_malloc_r+0x32>
 800f05c:	4634      	mov	r4, r6
 800f05e:	6876      	ldr	r6, [r6, #4]
 800f060:	e7b9      	b.n	800efd6 <_malloc_r+0x46>
 800f062:	230c      	movs	r3, #12
 800f064:	603b      	str	r3, [r7, #0]
 800f066:	4638      	mov	r0, r7
 800f068:	f000 ff76 	bl	800ff58 <__malloc_unlock>
 800f06c:	e7a1      	b.n	800efb2 <_malloc_r+0x22>
 800f06e:	6025      	str	r5, [r4, #0]
 800f070:	e7de      	b.n	800f030 <_malloc_r+0xa0>
 800f072:	bf00      	nop
 800f074:	20003e80 	.word	0x20003e80

0800f078 <__ssputs_r>:
 800f078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f07c:	688e      	ldr	r6, [r1, #8]
 800f07e:	429e      	cmp	r6, r3
 800f080:	4682      	mov	sl, r0
 800f082:	460c      	mov	r4, r1
 800f084:	4690      	mov	r8, r2
 800f086:	461f      	mov	r7, r3
 800f088:	d838      	bhi.n	800f0fc <__ssputs_r+0x84>
 800f08a:	898a      	ldrh	r2, [r1, #12]
 800f08c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f090:	d032      	beq.n	800f0f8 <__ssputs_r+0x80>
 800f092:	6825      	ldr	r5, [r4, #0]
 800f094:	6909      	ldr	r1, [r1, #16]
 800f096:	eba5 0901 	sub.w	r9, r5, r1
 800f09a:	6965      	ldr	r5, [r4, #20]
 800f09c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	444b      	add	r3, r9
 800f0a8:	106d      	asrs	r5, r5, #1
 800f0aa:	429d      	cmp	r5, r3
 800f0ac:	bf38      	it	cc
 800f0ae:	461d      	movcc	r5, r3
 800f0b0:	0553      	lsls	r3, r2, #21
 800f0b2:	d531      	bpl.n	800f118 <__ssputs_r+0xa0>
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	f7ff ff6b 	bl	800ef90 <_malloc_r>
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	b950      	cbnz	r0, 800f0d4 <__ssputs_r+0x5c>
 800f0be:	230c      	movs	r3, #12
 800f0c0:	f8ca 3000 	str.w	r3, [sl]
 800f0c4:	89a3      	ldrh	r3, [r4, #12]
 800f0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ca:	81a3      	strh	r3, [r4, #12]
 800f0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d4:	6921      	ldr	r1, [r4, #16]
 800f0d6:	464a      	mov	r2, r9
 800f0d8:	f000 ff10 	bl	800fefc <memcpy>
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0e6:	81a3      	strh	r3, [r4, #12]
 800f0e8:	6126      	str	r6, [r4, #16]
 800f0ea:	6165      	str	r5, [r4, #20]
 800f0ec:	444e      	add	r6, r9
 800f0ee:	eba5 0509 	sub.w	r5, r5, r9
 800f0f2:	6026      	str	r6, [r4, #0]
 800f0f4:	60a5      	str	r5, [r4, #8]
 800f0f6:	463e      	mov	r6, r7
 800f0f8:	42be      	cmp	r6, r7
 800f0fa:	d900      	bls.n	800f0fe <__ssputs_r+0x86>
 800f0fc:	463e      	mov	r6, r7
 800f0fe:	6820      	ldr	r0, [r4, #0]
 800f100:	4632      	mov	r2, r6
 800f102:	4641      	mov	r1, r8
 800f104:	f000 ff08 	bl	800ff18 <memmove>
 800f108:	68a3      	ldr	r3, [r4, #8]
 800f10a:	1b9b      	subs	r3, r3, r6
 800f10c:	60a3      	str	r3, [r4, #8]
 800f10e:	6823      	ldr	r3, [r4, #0]
 800f110:	4433      	add	r3, r6
 800f112:	6023      	str	r3, [r4, #0]
 800f114:	2000      	movs	r0, #0
 800f116:	e7db      	b.n	800f0d0 <__ssputs_r+0x58>
 800f118:	462a      	mov	r2, r5
 800f11a:	f000 ff23 	bl	800ff64 <_realloc_r>
 800f11e:	4606      	mov	r6, r0
 800f120:	2800      	cmp	r0, #0
 800f122:	d1e1      	bne.n	800f0e8 <__ssputs_r+0x70>
 800f124:	6921      	ldr	r1, [r4, #16]
 800f126:	4650      	mov	r0, sl
 800f128:	f7ff fec6 	bl	800eeb8 <_free_r>
 800f12c:	e7c7      	b.n	800f0be <__ssputs_r+0x46>
	...

0800f130 <_svfiprintf_r>:
 800f130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f134:	4698      	mov	r8, r3
 800f136:	898b      	ldrh	r3, [r1, #12]
 800f138:	061b      	lsls	r3, r3, #24
 800f13a:	b09d      	sub	sp, #116	; 0x74
 800f13c:	4607      	mov	r7, r0
 800f13e:	460d      	mov	r5, r1
 800f140:	4614      	mov	r4, r2
 800f142:	d50e      	bpl.n	800f162 <_svfiprintf_r+0x32>
 800f144:	690b      	ldr	r3, [r1, #16]
 800f146:	b963      	cbnz	r3, 800f162 <_svfiprintf_r+0x32>
 800f148:	2140      	movs	r1, #64	; 0x40
 800f14a:	f7ff ff21 	bl	800ef90 <_malloc_r>
 800f14e:	6028      	str	r0, [r5, #0]
 800f150:	6128      	str	r0, [r5, #16]
 800f152:	b920      	cbnz	r0, 800f15e <_svfiprintf_r+0x2e>
 800f154:	230c      	movs	r3, #12
 800f156:	603b      	str	r3, [r7, #0]
 800f158:	f04f 30ff 	mov.w	r0, #4294967295
 800f15c:	e0d1      	b.n	800f302 <_svfiprintf_r+0x1d2>
 800f15e:	2340      	movs	r3, #64	; 0x40
 800f160:	616b      	str	r3, [r5, #20]
 800f162:	2300      	movs	r3, #0
 800f164:	9309      	str	r3, [sp, #36]	; 0x24
 800f166:	2320      	movs	r3, #32
 800f168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f16c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f170:	2330      	movs	r3, #48	; 0x30
 800f172:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f31c <_svfiprintf_r+0x1ec>
 800f176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f17a:	f04f 0901 	mov.w	r9, #1
 800f17e:	4623      	mov	r3, r4
 800f180:	469a      	mov	sl, r3
 800f182:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f186:	b10a      	cbz	r2, 800f18c <_svfiprintf_r+0x5c>
 800f188:	2a25      	cmp	r2, #37	; 0x25
 800f18a:	d1f9      	bne.n	800f180 <_svfiprintf_r+0x50>
 800f18c:	ebba 0b04 	subs.w	fp, sl, r4
 800f190:	d00b      	beq.n	800f1aa <_svfiprintf_r+0x7a>
 800f192:	465b      	mov	r3, fp
 800f194:	4622      	mov	r2, r4
 800f196:	4629      	mov	r1, r5
 800f198:	4638      	mov	r0, r7
 800f19a:	f7ff ff6d 	bl	800f078 <__ssputs_r>
 800f19e:	3001      	adds	r0, #1
 800f1a0:	f000 80aa 	beq.w	800f2f8 <_svfiprintf_r+0x1c8>
 800f1a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1a6:	445a      	add	r2, fp
 800f1a8:	9209      	str	r2, [sp, #36]	; 0x24
 800f1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 80a2 	beq.w	800f2f8 <_svfiprintf_r+0x1c8>
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1be:	f10a 0a01 	add.w	sl, sl, #1
 800f1c2:	9304      	str	r3, [sp, #16]
 800f1c4:	9307      	str	r3, [sp, #28]
 800f1c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1ca:	931a      	str	r3, [sp, #104]	; 0x68
 800f1cc:	4654      	mov	r4, sl
 800f1ce:	2205      	movs	r2, #5
 800f1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d4:	4851      	ldr	r0, [pc, #324]	; (800f31c <_svfiprintf_r+0x1ec>)
 800f1d6:	f7f1 f81b 	bl	8000210 <memchr>
 800f1da:	9a04      	ldr	r2, [sp, #16]
 800f1dc:	b9d8      	cbnz	r0, 800f216 <_svfiprintf_r+0xe6>
 800f1de:	06d0      	lsls	r0, r2, #27
 800f1e0:	bf44      	itt	mi
 800f1e2:	2320      	movmi	r3, #32
 800f1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1e8:	0711      	lsls	r1, r2, #28
 800f1ea:	bf44      	itt	mi
 800f1ec:	232b      	movmi	r3, #43	; 0x2b
 800f1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f1f8:	d015      	beq.n	800f226 <_svfiprintf_r+0xf6>
 800f1fa:	9a07      	ldr	r2, [sp, #28]
 800f1fc:	4654      	mov	r4, sl
 800f1fe:	2000      	movs	r0, #0
 800f200:	f04f 0c0a 	mov.w	ip, #10
 800f204:	4621      	mov	r1, r4
 800f206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f20a:	3b30      	subs	r3, #48	; 0x30
 800f20c:	2b09      	cmp	r3, #9
 800f20e:	d94e      	bls.n	800f2ae <_svfiprintf_r+0x17e>
 800f210:	b1b0      	cbz	r0, 800f240 <_svfiprintf_r+0x110>
 800f212:	9207      	str	r2, [sp, #28]
 800f214:	e014      	b.n	800f240 <_svfiprintf_r+0x110>
 800f216:	eba0 0308 	sub.w	r3, r0, r8
 800f21a:	fa09 f303 	lsl.w	r3, r9, r3
 800f21e:	4313      	orrs	r3, r2
 800f220:	9304      	str	r3, [sp, #16]
 800f222:	46a2      	mov	sl, r4
 800f224:	e7d2      	b.n	800f1cc <_svfiprintf_r+0x9c>
 800f226:	9b03      	ldr	r3, [sp, #12]
 800f228:	1d19      	adds	r1, r3, #4
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	9103      	str	r1, [sp, #12]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	bfbb      	ittet	lt
 800f232:	425b      	neglt	r3, r3
 800f234:	f042 0202 	orrlt.w	r2, r2, #2
 800f238:	9307      	strge	r3, [sp, #28]
 800f23a:	9307      	strlt	r3, [sp, #28]
 800f23c:	bfb8      	it	lt
 800f23e:	9204      	strlt	r2, [sp, #16]
 800f240:	7823      	ldrb	r3, [r4, #0]
 800f242:	2b2e      	cmp	r3, #46	; 0x2e
 800f244:	d10c      	bne.n	800f260 <_svfiprintf_r+0x130>
 800f246:	7863      	ldrb	r3, [r4, #1]
 800f248:	2b2a      	cmp	r3, #42	; 0x2a
 800f24a:	d135      	bne.n	800f2b8 <_svfiprintf_r+0x188>
 800f24c:	9b03      	ldr	r3, [sp, #12]
 800f24e:	1d1a      	adds	r2, r3, #4
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	9203      	str	r2, [sp, #12]
 800f254:	2b00      	cmp	r3, #0
 800f256:	bfb8      	it	lt
 800f258:	f04f 33ff 	movlt.w	r3, #4294967295
 800f25c:	3402      	adds	r4, #2
 800f25e:	9305      	str	r3, [sp, #20]
 800f260:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f32c <_svfiprintf_r+0x1fc>
 800f264:	7821      	ldrb	r1, [r4, #0]
 800f266:	2203      	movs	r2, #3
 800f268:	4650      	mov	r0, sl
 800f26a:	f7f0 ffd1 	bl	8000210 <memchr>
 800f26e:	b140      	cbz	r0, 800f282 <_svfiprintf_r+0x152>
 800f270:	2340      	movs	r3, #64	; 0x40
 800f272:	eba0 000a 	sub.w	r0, r0, sl
 800f276:	fa03 f000 	lsl.w	r0, r3, r0
 800f27a:	9b04      	ldr	r3, [sp, #16]
 800f27c:	4303      	orrs	r3, r0
 800f27e:	3401      	adds	r4, #1
 800f280:	9304      	str	r3, [sp, #16]
 800f282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f286:	4826      	ldr	r0, [pc, #152]	; (800f320 <_svfiprintf_r+0x1f0>)
 800f288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f28c:	2206      	movs	r2, #6
 800f28e:	f7f0 ffbf 	bl	8000210 <memchr>
 800f292:	2800      	cmp	r0, #0
 800f294:	d038      	beq.n	800f308 <_svfiprintf_r+0x1d8>
 800f296:	4b23      	ldr	r3, [pc, #140]	; (800f324 <_svfiprintf_r+0x1f4>)
 800f298:	bb1b      	cbnz	r3, 800f2e2 <_svfiprintf_r+0x1b2>
 800f29a:	9b03      	ldr	r3, [sp, #12]
 800f29c:	3307      	adds	r3, #7
 800f29e:	f023 0307 	bic.w	r3, r3, #7
 800f2a2:	3308      	adds	r3, #8
 800f2a4:	9303      	str	r3, [sp, #12]
 800f2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a8:	4433      	add	r3, r6
 800f2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ac:	e767      	b.n	800f17e <_svfiprintf_r+0x4e>
 800f2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	2001      	movs	r0, #1
 800f2b6:	e7a5      	b.n	800f204 <_svfiprintf_r+0xd4>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	3401      	adds	r4, #1
 800f2bc:	9305      	str	r3, [sp, #20]
 800f2be:	4619      	mov	r1, r3
 800f2c0:	f04f 0c0a 	mov.w	ip, #10
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2ca:	3a30      	subs	r2, #48	; 0x30
 800f2cc:	2a09      	cmp	r2, #9
 800f2ce:	d903      	bls.n	800f2d8 <_svfiprintf_r+0x1a8>
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d0c5      	beq.n	800f260 <_svfiprintf_r+0x130>
 800f2d4:	9105      	str	r1, [sp, #20]
 800f2d6:	e7c3      	b.n	800f260 <_svfiprintf_r+0x130>
 800f2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2dc:	4604      	mov	r4, r0
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e7f0      	b.n	800f2c4 <_svfiprintf_r+0x194>
 800f2e2:	ab03      	add	r3, sp, #12
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	462a      	mov	r2, r5
 800f2e8:	4b0f      	ldr	r3, [pc, #60]	; (800f328 <_svfiprintf_r+0x1f8>)
 800f2ea:	a904      	add	r1, sp, #16
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	f3af 8000 	nop.w
 800f2f2:	1c42      	adds	r2, r0, #1
 800f2f4:	4606      	mov	r6, r0
 800f2f6:	d1d6      	bne.n	800f2a6 <_svfiprintf_r+0x176>
 800f2f8:	89ab      	ldrh	r3, [r5, #12]
 800f2fa:	065b      	lsls	r3, r3, #25
 800f2fc:	f53f af2c 	bmi.w	800f158 <_svfiprintf_r+0x28>
 800f300:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f302:	b01d      	add	sp, #116	; 0x74
 800f304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f308:	ab03      	add	r3, sp, #12
 800f30a:	9300      	str	r3, [sp, #0]
 800f30c:	462a      	mov	r2, r5
 800f30e:	4b06      	ldr	r3, [pc, #24]	; (800f328 <_svfiprintf_r+0x1f8>)
 800f310:	a904      	add	r1, sp, #16
 800f312:	4638      	mov	r0, r7
 800f314:	f000 f9d4 	bl	800f6c0 <_printf_i>
 800f318:	e7eb      	b.n	800f2f2 <_svfiprintf_r+0x1c2>
 800f31a:	bf00      	nop
 800f31c:	08010ca6 	.word	0x08010ca6
 800f320:	08010cb0 	.word	0x08010cb0
 800f324:	00000000 	.word	0x00000000
 800f328:	0800f079 	.word	0x0800f079
 800f32c:	08010cac 	.word	0x08010cac

0800f330 <__sfputc_r>:
 800f330:	6893      	ldr	r3, [r2, #8]
 800f332:	3b01      	subs	r3, #1
 800f334:	2b00      	cmp	r3, #0
 800f336:	b410      	push	{r4}
 800f338:	6093      	str	r3, [r2, #8]
 800f33a:	da08      	bge.n	800f34e <__sfputc_r+0x1e>
 800f33c:	6994      	ldr	r4, [r2, #24]
 800f33e:	42a3      	cmp	r3, r4
 800f340:	db01      	blt.n	800f346 <__sfputc_r+0x16>
 800f342:	290a      	cmp	r1, #10
 800f344:	d103      	bne.n	800f34e <__sfputc_r+0x1e>
 800f346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f34a:	f000 baef 	b.w	800f92c <__swbuf_r>
 800f34e:	6813      	ldr	r3, [r2, #0]
 800f350:	1c58      	adds	r0, r3, #1
 800f352:	6010      	str	r0, [r2, #0]
 800f354:	7019      	strb	r1, [r3, #0]
 800f356:	4608      	mov	r0, r1
 800f358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f35c:	4770      	bx	lr

0800f35e <__sfputs_r>:
 800f35e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f360:	4606      	mov	r6, r0
 800f362:	460f      	mov	r7, r1
 800f364:	4614      	mov	r4, r2
 800f366:	18d5      	adds	r5, r2, r3
 800f368:	42ac      	cmp	r4, r5
 800f36a:	d101      	bne.n	800f370 <__sfputs_r+0x12>
 800f36c:	2000      	movs	r0, #0
 800f36e:	e007      	b.n	800f380 <__sfputs_r+0x22>
 800f370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f374:	463a      	mov	r2, r7
 800f376:	4630      	mov	r0, r6
 800f378:	f7ff ffda 	bl	800f330 <__sfputc_r>
 800f37c:	1c43      	adds	r3, r0, #1
 800f37e:	d1f3      	bne.n	800f368 <__sfputs_r+0xa>
 800f380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f384 <_vfiprintf_r>:
 800f384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f388:	460d      	mov	r5, r1
 800f38a:	b09d      	sub	sp, #116	; 0x74
 800f38c:	4614      	mov	r4, r2
 800f38e:	4698      	mov	r8, r3
 800f390:	4606      	mov	r6, r0
 800f392:	b118      	cbz	r0, 800f39c <_vfiprintf_r+0x18>
 800f394:	6983      	ldr	r3, [r0, #24]
 800f396:	b90b      	cbnz	r3, 800f39c <_vfiprintf_r+0x18>
 800f398:	f000 fcaa 	bl	800fcf0 <__sinit>
 800f39c:	4b89      	ldr	r3, [pc, #548]	; (800f5c4 <_vfiprintf_r+0x240>)
 800f39e:	429d      	cmp	r5, r3
 800f3a0:	d11b      	bne.n	800f3da <_vfiprintf_r+0x56>
 800f3a2:	6875      	ldr	r5, [r6, #4]
 800f3a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3a6:	07d9      	lsls	r1, r3, #31
 800f3a8:	d405      	bmi.n	800f3b6 <_vfiprintf_r+0x32>
 800f3aa:	89ab      	ldrh	r3, [r5, #12]
 800f3ac:	059a      	lsls	r2, r3, #22
 800f3ae:	d402      	bmi.n	800f3b6 <_vfiprintf_r+0x32>
 800f3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3b2:	f000 fd3b 	bl	800fe2c <__retarget_lock_acquire_recursive>
 800f3b6:	89ab      	ldrh	r3, [r5, #12]
 800f3b8:	071b      	lsls	r3, r3, #28
 800f3ba:	d501      	bpl.n	800f3c0 <_vfiprintf_r+0x3c>
 800f3bc:	692b      	ldr	r3, [r5, #16]
 800f3be:	b9eb      	cbnz	r3, 800f3fc <_vfiprintf_r+0x78>
 800f3c0:	4629      	mov	r1, r5
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f000 fb04 	bl	800f9d0 <__swsetup_r>
 800f3c8:	b1c0      	cbz	r0, 800f3fc <_vfiprintf_r+0x78>
 800f3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3cc:	07dc      	lsls	r4, r3, #31
 800f3ce:	d50e      	bpl.n	800f3ee <_vfiprintf_r+0x6a>
 800f3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d4:	b01d      	add	sp, #116	; 0x74
 800f3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3da:	4b7b      	ldr	r3, [pc, #492]	; (800f5c8 <_vfiprintf_r+0x244>)
 800f3dc:	429d      	cmp	r5, r3
 800f3de:	d101      	bne.n	800f3e4 <_vfiprintf_r+0x60>
 800f3e0:	68b5      	ldr	r5, [r6, #8]
 800f3e2:	e7df      	b.n	800f3a4 <_vfiprintf_r+0x20>
 800f3e4:	4b79      	ldr	r3, [pc, #484]	; (800f5cc <_vfiprintf_r+0x248>)
 800f3e6:	429d      	cmp	r5, r3
 800f3e8:	bf08      	it	eq
 800f3ea:	68f5      	ldreq	r5, [r6, #12]
 800f3ec:	e7da      	b.n	800f3a4 <_vfiprintf_r+0x20>
 800f3ee:	89ab      	ldrh	r3, [r5, #12]
 800f3f0:	0598      	lsls	r0, r3, #22
 800f3f2:	d4ed      	bmi.n	800f3d0 <_vfiprintf_r+0x4c>
 800f3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3f6:	f000 fd1a 	bl	800fe2e <__retarget_lock_release_recursive>
 800f3fa:	e7e9      	b.n	800f3d0 <_vfiprintf_r+0x4c>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f400:	2320      	movs	r3, #32
 800f402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f406:	f8cd 800c 	str.w	r8, [sp, #12]
 800f40a:	2330      	movs	r3, #48	; 0x30
 800f40c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f5d0 <_vfiprintf_r+0x24c>
 800f410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f414:	f04f 0901 	mov.w	r9, #1
 800f418:	4623      	mov	r3, r4
 800f41a:	469a      	mov	sl, r3
 800f41c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f420:	b10a      	cbz	r2, 800f426 <_vfiprintf_r+0xa2>
 800f422:	2a25      	cmp	r2, #37	; 0x25
 800f424:	d1f9      	bne.n	800f41a <_vfiprintf_r+0x96>
 800f426:	ebba 0b04 	subs.w	fp, sl, r4
 800f42a:	d00b      	beq.n	800f444 <_vfiprintf_r+0xc0>
 800f42c:	465b      	mov	r3, fp
 800f42e:	4622      	mov	r2, r4
 800f430:	4629      	mov	r1, r5
 800f432:	4630      	mov	r0, r6
 800f434:	f7ff ff93 	bl	800f35e <__sfputs_r>
 800f438:	3001      	adds	r0, #1
 800f43a:	f000 80aa 	beq.w	800f592 <_vfiprintf_r+0x20e>
 800f43e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f440:	445a      	add	r2, fp
 800f442:	9209      	str	r2, [sp, #36]	; 0x24
 800f444:	f89a 3000 	ldrb.w	r3, [sl]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f000 80a2 	beq.w	800f592 <_vfiprintf_r+0x20e>
 800f44e:	2300      	movs	r3, #0
 800f450:	f04f 32ff 	mov.w	r2, #4294967295
 800f454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f458:	f10a 0a01 	add.w	sl, sl, #1
 800f45c:	9304      	str	r3, [sp, #16]
 800f45e:	9307      	str	r3, [sp, #28]
 800f460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f464:	931a      	str	r3, [sp, #104]	; 0x68
 800f466:	4654      	mov	r4, sl
 800f468:	2205      	movs	r2, #5
 800f46a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f46e:	4858      	ldr	r0, [pc, #352]	; (800f5d0 <_vfiprintf_r+0x24c>)
 800f470:	f7f0 fece 	bl	8000210 <memchr>
 800f474:	9a04      	ldr	r2, [sp, #16]
 800f476:	b9d8      	cbnz	r0, 800f4b0 <_vfiprintf_r+0x12c>
 800f478:	06d1      	lsls	r1, r2, #27
 800f47a:	bf44      	itt	mi
 800f47c:	2320      	movmi	r3, #32
 800f47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f482:	0713      	lsls	r3, r2, #28
 800f484:	bf44      	itt	mi
 800f486:	232b      	movmi	r3, #43	; 0x2b
 800f488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f48c:	f89a 3000 	ldrb.w	r3, [sl]
 800f490:	2b2a      	cmp	r3, #42	; 0x2a
 800f492:	d015      	beq.n	800f4c0 <_vfiprintf_r+0x13c>
 800f494:	9a07      	ldr	r2, [sp, #28]
 800f496:	4654      	mov	r4, sl
 800f498:	2000      	movs	r0, #0
 800f49a:	f04f 0c0a 	mov.w	ip, #10
 800f49e:	4621      	mov	r1, r4
 800f4a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4a4:	3b30      	subs	r3, #48	; 0x30
 800f4a6:	2b09      	cmp	r3, #9
 800f4a8:	d94e      	bls.n	800f548 <_vfiprintf_r+0x1c4>
 800f4aa:	b1b0      	cbz	r0, 800f4da <_vfiprintf_r+0x156>
 800f4ac:	9207      	str	r2, [sp, #28]
 800f4ae:	e014      	b.n	800f4da <_vfiprintf_r+0x156>
 800f4b0:	eba0 0308 	sub.w	r3, r0, r8
 800f4b4:	fa09 f303 	lsl.w	r3, r9, r3
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	9304      	str	r3, [sp, #16]
 800f4bc:	46a2      	mov	sl, r4
 800f4be:	e7d2      	b.n	800f466 <_vfiprintf_r+0xe2>
 800f4c0:	9b03      	ldr	r3, [sp, #12]
 800f4c2:	1d19      	adds	r1, r3, #4
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	9103      	str	r1, [sp, #12]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	bfbb      	ittet	lt
 800f4cc:	425b      	neglt	r3, r3
 800f4ce:	f042 0202 	orrlt.w	r2, r2, #2
 800f4d2:	9307      	strge	r3, [sp, #28]
 800f4d4:	9307      	strlt	r3, [sp, #28]
 800f4d6:	bfb8      	it	lt
 800f4d8:	9204      	strlt	r2, [sp, #16]
 800f4da:	7823      	ldrb	r3, [r4, #0]
 800f4dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f4de:	d10c      	bne.n	800f4fa <_vfiprintf_r+0x176>
 800f4e0:	7863      	ldrb	r3, [r4, #1]
 800f4e2:	2b2a      	cmp	r3, #42	; 0x2a
 800f4e4:	d135      	bne.n	800f552 <_vfiprintf_r+0x1ce>
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	1d1a      	adds	r2, r3, #4
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	9203      	str	r2, [sp, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	bfb8      	it	lt
 800f4f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4f6:	3402      	adds	r4, #2
 800f4f8:	9305      	str	r3, [sp, #20]
 800f4fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f5e0 <_vfiprintf_r+0x25c>
 800f4fe:	7821      	ldrb	r1, [r4, #0]
 800f500:	2203      	movs	r2, #3
 800f502:	4650      	mov	r0, sl
 800f504:	f7f0 fe84 	bl	8000210 <memchr>
 800f508:	b140      	cbz	r0, 800f51c <_vfiprintf_r+0x198>
 800f50a:	2340      	movs	r3, #64	; 0x40
 800f50c:	eba0 000a 	sub.w	r0, r0, sl
 800f510:	fa03 f000 	lsl.w	r0, r3, r0
 800f514:	9b04      	ldr	r3, [sp, #16]
 800f516:	4303      	orrs	r3, r0
 800f518:	3401      	adds	r4, #1
 800f51a:	9304      	str	r3, [sp, #16]
 800f51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f520:	482c      	ldr	r0, [pc, #176]	; (800f5d4 <_vfiprintf_r+0x250>)
 800f522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f526:	2206      	movs	r2, #6
 800f528:	f7f0 fe72 	bl	8000210 <memchr>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d03f      	beq.n	800f5b0 <_vfiprintf_r+0x22c>
 800f530:	4b29      	ldr	r3, [pc, #164]	; (800f5d8 <_vfiprintf_r+0x254>)
 800f532:	bb1b      	cbnz	r3, 800f57c <_vfiprintf_r+0x1f8>
 800f534:	9b03      	ldr	r3, [sp, #12]
 800f536:	3307      	adds	r3, #7
 800f538:	f023 0307 	bic.w	r3, r3, #7
 800f53c:	3308      	adds	r3, #8
 800f53e:	9303      	str	r3, [sp, #12]
 800f540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f542:	443b      	add	r3, r7
 800f544:	9309      	str	r3, [sp, #36]	; 0x24
 800f546:	e767      	b.n	800f418 <_vfiprintf_r+0x94>
 800f548:	fb0c 3202 	mla	r2, ip, r2, r3
 800f54c:	460c      	mov	r4, r1
 800f54e:	2001      	movs	r0, #1
 800f550:	e7a5      	b.n	800f49e <_vfiprintf_r+0x11a>
 800f552:	2300      	movs	r3, #0
 800f554:	3401      	adds	r4, #1
 800f556:	9305      	str	r3, [sp, #20]
 800f558:	4619      	mov	r1, r3
 800f55a:	f04f 0c0a 	mov.w	ip, #10
 800f55e:	4620      	mov	r0, r4
 800f560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f564:	3a30      	subs	r2, #48	; 0x30
 800f566:	2a09      	cmp	r2, #9
 800f568:	d903      	bls.n	800f572 <_vfiprintf_r+0x1ee>
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d0c5      	beq.n	800f4fa <_vfiprintf_r+0x176>
 800f56e:	9105      	str	r1, [sp, #20]
 800f570:	e7c3      	b.n	800f4fa <_vfiprintf_r+0x176>
 800f572:	fb0c 2101 	mla	r1, ip, r1, r2
 800f576:	4604      	mov	r4, r0
 800f578:	2301      	movs	r3, #1
 800f57a:	e7f0      	b.n	800f55e <_vfiprintf_r+0x1da>
 800f57c:	ab03      	add	r3, sp, #12
 800f57e:	9300      	str	r3, [sp, #0]
 800f580:	462a      	mov	r2, r5
 800f582:	4b16      	ldr	r3, [pc, #88]	; (800f5dc <_vfiprintf_r+0x258>)
 800f584:	a904      	add	r1, sp, #16
 800f586:	4630      	mov	r0, r6
 800f588:	f3af 8000 	nop.w
 800f58c:	4607      	mov	r7, r0
 800f58e:	1c78      	adds	r0, r7, #1
 800f590:	d1d6      	bne.n	800f540 <_vfiprintf_r+0x1bc>
 800f592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f594:	07d9      	lsls	r1, r3, #31
 800f596:	d405      	bmi.n	800f5a4 <_vfiprintf_r+0x220>
 800f598:	89ab      	ldrh	r3, [r5, #12]
 800f59a:	059a      	lsls	r2, r3, #22
 800f59c:	d402      	bmi.n	800f5a4 <_vfiprintf_r+0x220>
 800f59e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5a0:	f000 fc45 	bl	800fe2e <__retarget_lock_release_recursive>
 800f5a4:	89ab      	ldrh	r3, [r5, #12]
 800f5a6:	065b      	lsls	r3, r3, #25
 800f5a8:	f53f af12 	bmi.w	800f3d0 <_vfiprintf_r+0x4c>
 800f5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5ae:	e711      	b.n	800f3d4 <_vfiprintf_r+0x50>
 800f5b0:	ab03      	add	r3, sp, #12
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	462a      	mov	r2, r5
 800f5b6:	4b09      	ldr	r3, [pc, #36]	; (800f5dc <_vfiprintf_r+0x258>)
 800f5b8:	a904      	add	r1, sp, #16
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	f000 f880 	bl	800f6c0 <_printf_i>
 800f5c0:	e7e4      	b.n	800f58c <_vfiprintf_r+0x208>
 800f5c2:	bf00      	nop
 800f5c4:	08010cfc 	.word	0x08010cfc
 800f5c8:	08010d1c 	.word	0x08010d1c
 800f5cc:	08010cdc 	.word	0x08010cdc
 800f5d0:	08010ca6 	.word	0x08010ca6
 800f5d4:	08010cb0 	.word	0x08010cb0
 800f5d8:	00000000 	.word	0x00000000
 800f5dc:	0800f35f 	.word	0x0800f35f
 800f5e0:	08010cac 	.word	0x08010cac

0800f5e4 <_printf_common>:
 800f5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e8:	4616      	mov	r6, r2
 800f5ea:	4699      	mov	r9, r3
 800f5ec:	688a      	ldr	r2, [r1, #8]
 800f5ee:	690b      	ldr	r3, [r1, #16]
 800f5f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	bfb8      	it	lt
 800f5f8:	4613      	movlt	r3, r2
 800f5fa:	6033      	str	r3, [r6, #0]
 800f5fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f600:	4607      	mov	r7, r0
 800f602:	460c      	mov	r4, r1
 800f604:	b10a      	cbz	r2, 800f60a <_printf_common+0x26>
 800f606:	3301      	adds	r3, #1
 800f608:	6033      	str	r3, [r6, #0]
 800f60a:	6823      	ldr	r3, [r4, #0]
 800f60c:	0699      	lsls	r1, r3, #26
 800f60e:	bf42      	ittt	mi
 800f610:	6833      	ldrmi	r3, [r6, #0]
 800f612:	3302      	addmi	r3, #2
 800f614:	6033      	strmi	r3, [r6, #0]
 800f616:	6825      	ldr	r5, [r4, #0]
 800f618:	f015 0506 	ands.w	r5, r5, #6
 800f61c:	d106      	bne.n	800f62c <_printf_common+0x48>
 800f61e:	f104 0a19 	add.w	sl, r4, #25
 800f622:	68e3      	ldr	r3, [r4, #12]
 800f624:	6832      	ldr	r2, [r6, #0]
 800f626:	1a9b      	subs	r3, r3, r2
 800f628:	42ab      	cmp	r3, r5
 800f62a:	dc26      	bgt.n	800f67a <_printf_common+0x96>
 800f62c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f630:	1e13      	subs	r3, r2, #0
 800f632:	6822      	ldr	r2, [r4, #0]
 800f634:	bf18      	it	ne
 800f636:	2301      	movne	r3, #1
 800f638:	0692      	lsls	r2, r2, #26
 800f63a:	d42b      	bmi.n	800f694 <_printf_common+0xb0>
 800f63c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f640:	4649      	mov	r1, r9
 800f642:	4638      	mov	r0, r7
 800f644:	47c0      	blx	r8
 800f646:	3001      	adds	r0, #1
 800f648:	d01e      	beq.n	800f688 <_printf_common+0xa4>
 800f64a:	6823      	ldr	r3, [r4, #0]
 800f64c:	68e5      	ldr	r5, [r4, #12]
 800f64e:	6832      	ldr	r2, [r6, #0]
 800f650:	f003 0306 	and.w	r3, r3, #6
 800f654:	2b04      	cmp	r3, #4
 800f656:	bf08      	it	eq
 800f658:	1aad      	subeq	r5, r5, r2
 800f65a:	68a3      	ldr	r3, [r4, #8]
 800f65c:	6922      	ldr	r2, [r4, #16]
 800f65e:	bf0c      	ite	eq
 800f660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f664:	2500      	movne	r5, #0
 800f666:	4293      	cmp	r3, r2
 800f668:	bfc4      	itt	gt
 800f66a:	1a9b      	subgt	r3, r3, r2
 800f66c:	18ed      	addgt	r5, r5, r3
 800f66e:	2600      	movs	r6, #0
 800f670:	341a      	adds	r4, #26
 800f672:	42b5      	cmp	r5, r6
 800f674:	d11a      	bne.n	800f6ac <_printf_common+0xc8>
 800f676:	2000      	movs	r0, #0
 800f678:	e008      	b.n	800f68c <_printf_common+0xa8>
 800f67a:	2301      	movs	r3, #1
 800f67c:	4652      	mov	r2, sl
 800f67e:	4649      	mov	r1, r9
 800f680:	4638      	mov	r0, r7
 800f682:	47c0      	blx	r8
 800f684:	3001      	adds	r0, #1
 800f686:	d103      	bne.n	800f690 <_printf_common+0xac>
 800f688:	f04f 30ff 	mov.w	r0, #4294967295
 800f68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f690:	3501      	adds	r5, #1
 800f692:	e7c6      	b.n	800f622 <_printf_common+0x3e>
 800f694:	18e1      	adds	r1, r4, r3
 800f696:	1c5a      	adds	r2, r3, #1
 800f698:	2030      	movs	r0, #48	; 0x30
 800f69a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f69e:	4422      	add	r2, r4
 800f6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6a8:	3302      	adds	r3, #2
 800f6aa:	e7c7      	b.n	800f63c <_printf_common+0x58>
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	4622      	mov	r2, r4
 800f6b0:	4649      	mov	r1, r9
 800f6b2:	4638      	mov	r0, r7
 800f6b4:	47c0      	blx	r8
 800f6b6:	3001      	adds	r0, #1
 800f6b8:	d0e6      	beq.n	800f688 <_printf_common+0xa4>
 800f6ba:	3601      	adds	r6, #1
 800f6bc:	e7d9      	b.n	800f672 <_printf_common+0x8e>
	...

0800f6c0 <_printf_i>:
 800f6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c4:	7e0f      	ldrb	r7, [r1, #24]
 800f6c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6c8:	2f78      	cmp	r7, #120	; 0x78
 800f6ca:	4691      	mov	r9, r2
 800f6cc:	4680      	mov	r8, r0
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	469a      	mov	sl, r3
 800f6d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6d6:	d807      	bhi.n	800f6e8 <_printf_i+0x28>
 800f6d8:	2f62      	cmp	r7, #98	; 0x62
 800f6da:	d80a      	bhi.n	800f6f2 <_printf_i+0x32>
 800f6dc:	2f00      	cmp	r7, #0
 800f6de:	f000 80d8 	beq.w	800f892 <_printf_i+0x1d2>
 800f6e2:	2f58      	cmp	r7, #88	; 0x58
 800f6e4:	f000 80a3 	beq.w	800f82e <_printf_i+0x16e>
 800f6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6f0:	e03a      	b.n	800f768 <_printf_i+0xa8>
 800f6f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6f6:	2b15      	cmp	r3, #21
 800f6f8:	d8f6      	bhi.n	800f6e8 <_printf_i+0x28>
 800f6fa:	a101      	add	r1, pc, #4	; (adr r1, 800f700 <_printf_i+0x40>)
 800f6fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f700:	0800f759 	.word	0x0800f759
 800f704:	0800f76d 	.word	0x0800f76d
 800f708:	0800f6e9 	.word	0x0800f6e9
 800f70c:	0800f6e9 	.word	0x0800f6e9
 800f710:	0800f6e9 	.word	0x0800f6e9
 800f714:	0800f6e9 	.word	0x0800f6e9
 800f718:	0800f76d 	.word	0x0800f76d
 800f71c:	0800f6e9 	.word	0x0800f6e9
 800f720:	0800f6e9 	.word	0x0800f6e9
 800f724:	0800f6e9 	.word	0x0800f6e9
 800f728:	0800f6e9 	.word	0x0800f6e9
 800f72c:	0800f879 	.word	0x0800f879
 800f730:	0800f79d 	.word	0x0800f79d
 800f734:	0800f85b 	.word	0x0800f85b
 800f738:	0800f6e9 	.word	0x0800f6e9
 800f73c:	0800f6e9 	.word	0x0800f6e9
 800f740:	0800f89b 	.word	0x0800f89b
 800f744:	0800f6e9 	.word	0x0800f6e9
 800f748:	0800f79d 	.word	0x0800f79d
 800f74c:	0800f6e9 	.word	0x0800f6e9
 800f750:	0800f6e9 	.word	0x0800f6e9
 800f754:	0800f863 	.word	0x0800f863
 800f758:	682b      	ldr	r3, [r5, #0]
 800f75a:	1d1a      	adds	r2, r3, #4
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	602a      	str	r2, [r5, #0]
 800f760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f768:	2301      	movs	r3, #1
 800f76a:	e0a3      	b.n	800f8b4 <_printf_i+0x1f4>
 800f76c:	6820      	ldr	r0, [r4, #0]
 800f76e:	6829      	ldr	r1, [r5, #0]
 800f770:	0606      	lsls	r6, r0, #24
 800f772:	f101 0304 	add.w	r3, r1, #4
 800f776:	d50a      	bpl.n	800f78e <_printf_i+0xce>
 800f778:	680e      	ldr	r6, [r1, #0]
 800f77a:	602b      	str	r3, [r5, #0]
 800f77c:	2e00      	cmp	r6, #0
 800f77e:	da03      	bge.n	800f788 <_printf_i+0xc8>
 800f780:	232d      	movs	r3, #45	; 0x2d
 800f782:	4276      	negs	r6, r6
 800f784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f788:	485e      	ldr	r0, [pc, #376]	; (800f904 <_printf_i+0x244>)
 800f78a:	230a      	movs	r3, #10
 800f78c:	e019      	b.n	800f7c2 <_printf_i+0x102>
 800f78e:	680e      	ldr	r6, [r1, #0]
 800f790:	602b      	str	r3, [r5, #0]
 800f792:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f796:	bf18      	it	ne
 800f798:	b236      	sxthne	r6, r6
 800f79a:	e7ef      	b.n	800f77c <_printf_i+0xbc>
 800f79c:	682b      	ldr	r3, [r5, #0]
 800f79e:	6820      	ldr	r0, [r4, #0]
 800f7a0:	1d19      	adds	r1, r3, #4
 800f7a2:	6029      	str	r1, [r5, #0]
 800f7a4:	0601      	lsls	r1, r0, #24
 800f7a6:	d501      	bpl.n	800f7ac <_printf_i+0xec>
 800f7a8:	681e      	ldr	r6, [r3, #0]
 800f7aa:	e002      	b.n	800f7b2 <_printf_i+0xf2>
 800f7ac:	0646      	lsls	r6, r0, #25
 800f7ae:	d5fb      	bpl.n	800f7a8 <_printf_i+0xe8>
 800f7b0:	881e      	ldrh	r6, [r3, #0]
 800f7b2:	4854      	ldr	r0, [pc, #336]	; (800f904 <_printf_i+0x244>)
 800f7b4:	2f6f      	cmp	r7, #111	; 0x6f
 800f7b6:	bf0c      	ite	eq
 800f7b8:	2308      	moveq	r3, #8
 800f7ba:	230a      	movne	r3, #10
 800f7bc:	2100      	movs	r1, #0
 800f7be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7c2:	6865      	ldr	r5, [r4, #4]
 800f7c4:	60a5      	str	r5, [r4, #8]
 800f7c6:	2d00      	cmp	r5, #0
 800f7c8:	bfa2      	ittt	ge
 800f7ca:	6821      	ldrge	r1, [r4, #0]
 800f7cc:	f021 0104 	bicge.w	r1, r1, #4
 800f7d0:	6021      	strge	r1, [r4, #0]
 800f7d2:	b90e      	cbnz	r6, 800f7d8 <_printf_i+0x118>
 800f7d4:	2d00      	cmp	r5, #0
 800f7d6:	d04d      	beq.n	800f874 <_printf_i+0x1b4>
 800f7d8:	4615      	mov	r5, r2
 800f7da:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7de:	fb03 6711 	mls	r7, r3, r1, r6
 800f7e2:	5dc7      	ldrb	r7, [r0, r7]
 800f7e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7e8:	4637      	mov	r7, r6
 800f7ea:	42bb      	cmp	r3, r7
 800f7ec:	460e      	mov	r6, r1
 800f7ee:	d9f4      	bls.n	800f7da <_printf_i+0x11a>
 800f7f0:	2b08      	cmp	r3, #8
 800f7f2:	d10b      	bne.n	800f80c <_printf_i+0x14c>
 800f7f4:	6823      	ldr	r3, [r4, #0]
 800f7f6:	07de      	lsls	r6, r3, #31
 800f7f8:	d508      	bpl.n	800f80c <_printf_i+0x14c>
 800f7fa:	6923      	ldr	r3, [r4, #16]
 800f7fc:	6861      	ldr	r1, [r4, #4]
 800f7fe:	4299      	cmp	r1, r3
 800f800:	bfde      	ittt	le
 800f802:	2330      	movle	r3, #48	; 0x30
 800f804:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f80c:	1b52      	subs	r2, r2, r5
 800f80e:	6122      	str	r2, [r4, #16]
 800f810:	f8cd a000 	str.w	sl, [sp]
 800f814:	464b      	mov	r3, r9
 800f816:	aa03      	add	r2, sp, #12
 800f818:	4621      	mov	r1, r4
 800f81a:	4640      	mov	r0, r8
 800f81c:	f7ff fee2 	bl	800f5e4 <_printf_common>
 800f820:	3001      	adds	r0, #1
 800f822:	d14c      	bne.n	800f8be <_printf_i+0x1fe>
 800f824:	f04f 30ff 	mov.w	r0, #4294967295
 800f828:	b004      	add	sp, #16
 800f82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f82e:	4835      	ldr	r0, [pc, #212]	; (800f904 <_printf_i+0x244>)
 800f830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f834:	6829      	ldr	r1, [r5, #0]
 800f836:	6823      	ldr	r3, [r4, #0]
 800f838:	f851 6b04 	ldr.w	r6, [r1], #4
 800f83c:	6029      	str	r1, [r5, #0]
 800f83e:	061d      	lsls	r5, r3, #24
 800f840:	d514      	bpl.n	800f86c <_printf_i+0x1ac>
 800f842:	07df      	lsls	r7, r3, #31
 800f844:	bf44      	itt	mi
 800f846:	f043 0320 	orrmi.w	r3, r3, #32
 800f84a:	6023      	strmi	r3, [r4, #0]
 800f84c:	b91e      	cbnz	r6, 800f856 <_printf_i+0x196>
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	f023 0320 	bic.w	r3, r3, #32
 800f854:	6023      	str	r3, [r4, #0]
 800f856:	2310      	movs	r3, #16
 800f858:	e7b0      	b.n	800f7bc <_printf_i+0xfc>
 800f85a:	6823      	ldr	r3, [r4, #0]
 800f85c:	f043 0320 	orr.w	r3, r3, #32
 800f860:	6023      	str	r3, [r4, #0]
 800f862:	2378      	movs	r3, #120	; 0x78
 800f864:	4828      	ldr	r0, [pc, #160]	; (800f908 <_printf_i+0x248>)
 800f866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f86a:	e7e3      	b.n	800f834 <_printf_i+0x174>
 800f86c:	0659      	lsls	r1, r3, #25
 800f86e:	bf48      	it	mi
 800f870:	b2b6      	uxthmi	r6, r6
 800f872:	e7e6      	b.n	800f842 <_printf_i+0x182>
 800f874:	4615      	mov	r5, r2
 800f876:	e7bb      	b.n	800f7f0 <_printf_i+0x130>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	6826      	ldr	r6, [r4, #0]
 800f87c:	6961      	ldr	r1, [r4, #20]
 800f87e:	1d18      	adds	r0, r3, #4
 800f880:	6028      	str	r0, [r5, #0]
 800f882:	0635      	lsls	r5, r6, #24
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	d501      	bpl.n	800f88c <_printf_i+0x1cc>
 800f888:	6019      	str	r1, [r3, #0]
 800f88a:	e002      	b.n	800f892 <_printf_i+0x1d2>
 800f88c:	0670      	lsls	r0, r6, #25
 800f88e:	d5fb      	bpl.n	800f888 <_printf_i+0x1c8>
 800f890:	8019      	strh	r1, [r3, #0]
 800f892:	2300      	movs	r3, #0
 800f894:	6123      	str	r3, [r4, #16]
 800f896:	4615      	mov	r5, r2
 800f898:	e7ba      	b.n	800f810 <_printf_i+0x150>
 800f89a:	682b      	ldr	r3, [r5, #0]
 800f89c:	1d1a      	adds	r2, r3, #4
 800f89e:	602a      	str	r2, [r5, #0]
 800f8a0:	681d      	ldr	r5, [r3, #0]
 800f8a2:	6862      	ldr	r2, [r4, #4]
 800f8a4:	2100      	movs	r1, #0
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f7f0 fcb2 	bl	8000210 <memchr>
 800f8ac:	b108      	cbz	r0, 800f8b2 <_printf_i+0x1f2>
 800f8ae:	1b40      	subs	r0, r0, r5
 800f8b0:	6060      	str	r0, [r4, #4]
 800f8b2:	6863      	ldr	r3, [r4, #4]
 800f8b4:	6123      	str	r3, [r4, #16]
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8bc:	e7a8      	b.n	800f810 <_printf_i+0x150>
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	462a      	mov	r2, r5
 800f8c2:	4649      	mov	r1, r9
 800f8c4:	4640      	mov	r0, r8
 800f8c6:	47d0      	blx	sl
 800f8c8:	3001      	adds	r0, #1
 800f8ca:	d0ab      	beq.n	800f824 <_printf_i+0x164>
 800f8cc:	6823      	ldr	r3, [r4, #0]
 800f8ce:	079b      	lsls	r3, r3, #30
 800f8d0:	d413      	bmi.n	800f8fa <_printf_i+0x23a>
 800f8d2:	68e0      	ldr	r0, [r4, #12]
 800f8d4:	9b03      	ldr	r3, [sp, #12]
 800f8d6:	4298      	cmp	r0, r3
 800f8d8:	bfb8      	it	lt
 800f8da:	4618      	movlt	r0, r3
 800f8dc:	e7a4      	b.n	800f828 <_printf_i+0x168>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	4632      	mov	r2, r6
 800f8e2:	4649      	mov	r1, r9
 800f8e4:	4640      	mov	r0, r8
 800f8e6:	47d0      	blx	sl
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	d09b      	beq.n	800f824 <_printf_i+0x164>
 800f8ec:	3501      	adds	r5, #1
 800f8ee:	68e3      	ldr	r3, [r4, #12]
 800f8f0:	9903      	ldr	r1, [sp, #12]
 800f8f2:	1a5b      	subs	r3, r3, r1
 800f8f4:	42ab      	cmp	r3, r5
 800f8f6:	dcf2      	bgt.n	800f8de <_printf_i+0x21e>
 800f8f8:	e7eb      	b.n	800f8d2 <_printf_i+0x212>
 800f8fa:	2500      	movs	r5, #0
 800f8fc:	f104 0619 	add.w	r6, r4, #25
 800f900:	e7f5      	b.n	800f8ee <_printf_i+0x22e>
 800f902:	bf00      	nop
 800f904:	08010cb7 	.word	0x08010cb7
 800f908:	08010cc8 	.word	0x08010cc8

0800f90c <_sbrk_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d06      	ldr	r5, [pc, #24]	; (800f928 <_sbrk_r+0x1c>)
 800f910:	2300      	movs	r3, #0
 800f912:	4604      	mov	r4, r0
 800f914:	4608      	mov	r0, r1
 800f916:	602b      	str	r3, [r5, #0]
 800f918:	f7f3 f866 	bl	80029e8 <_sbrk>
 800f91c:	1c43      	adds	r3, r0, #1
 800f91e:	d102      	bne.n	800f926 <_sbrk_r+0x1a>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	b103      	cbz	r3, 800f926 <_sbrk_r+0x1a>
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	20003e8c 	.word	0x20003e8c

0800f92c <__swbuf_r>:
 800f92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f92e:	460e      	mov	r6, r1
 800f930:	4614      	mov	r4, r2
 800f932:	4605      	mov	r5, r0
 800f934:	b118      	cbz	r0, 800f93e <__swbuf_r+0x12>
 800f936:	6983      	ldr	r3, [r0, #24]
 800f938:	b90b      	cbnz	r3, 800f93e <__swbuf_r+0x12>
 800f93a:	f000 f9d9 	bl	800fcf0 <__sinit>
 800f93e:	4b21      	ldr	r3, [pc, #132]	; (800f9c4 <__swbuf_r+0x98>)
 800f940:	429c      	cmp	r4, r3
 800f942:	d12b      	bne.n	800f99c <__swbuf_r+0x70>
 800f944:	686c      	ldr	r4, [r5, #4]
 800f946:	69a3      	ldr	r3, [r4, #24]
 800f948:	60a3      	str	r3, [r4, #8]
 800f94a:	89a3      	ldrh	r3, [r4, #12]
 800f94c:	071a      	lsls	r2, r3, #28
 800f94e:	d52f      	bpl.n	800f9b0 <__swbuf_r+0x84>
 800f950:	6923      	ldr	r3, [r4, #16]
 800f952:	b36b      	cbz	r3, 800f9b0 <__swbuf_r+0x84>
 800f954:	6923      	ldr	r3, [r4, #16]
 800f956:	6820      	ldr	r0, [r4, #0]
 800f958:	1ac0      	subs	r0, r0, r3
 800f95a:	6963      	ldr	r3, [r4, #20]
 800f95c:	b2f6      	uxtb	r6, r6
 800f95e:	4283      	cmp	r3, r0
 800f960:	4637      	mov	r7, r6
 800f962:	dc04      	bgt.n	800f96e <__swbuf_r+0x42>
 800f964:	4621      	mov	r1, r4
 800f966:	4628      	mov	r0, r5
 800f968:	f000 f92e 	bl	800fbc8 <_fflush_r>
 800f96c:	bb30      	cbnz	r0, 800f9bc <__swbuf_r+0x90>
 800f96e:	68a3      	ldr	r3, [r4, #8]
 800f970:	3b01      	subs	r3, #1
 800f972:	60a3      	str	r3, [r4, #8]
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	1c5a      	adds	r2, r3, #1
 800f978:	6022      	str	r2, [r4, #0]
 800f97a:	701e      	strb	r6, [r3, #0]
 800f97c:	6963      	ldr	r3, [r4, #20]
 800f97e:	3001      	adds	r0, #1
 800f980:	4283      	cmp	r3, r0
 800f982:	d004      	beq.n	800f98e <__swbuf_r+0x62>
 800f984:	89a3      	ldrh	r3, [r4, #12]
 800f986:	07db      	lsls	r3, r3, #31
 800f988:	d506      	bpl.n	800f998 <__swbuf_r+0x6c>
 800f98a:	2e0a      	cmp	r6, #10
 800f98c:	d104      	bne.n	800f998 <__swbuf_r+0x6c>
 800f98e:	4621      	mov	r1, r4
 800f990:	4628      	mov	r0, r5
 800f992:	f000 f919 	bl	800fbc8 <_fflush_r>
 800f996:	b988      	cbnz	r0, 800f9bc <__swbuf_r+0x90>
 800f998:	4638      	mov	r0, r7
 800f99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f99c:	4b0a      	ldr	r3, [pc, #40]	; (800f9c8 <__swbuf_r+0x9c>)
 800f99e:	429c      	cmp	r4, r3
 800f9a0:	d101      	bne.n	800f9a6 <__swbuf_r+0x7a>
 800f9a2:	68ac      	ldr	r4, [r5, #8]
 800f9a4:	e7cf      	b.n	800f946 <__swbuf_r+0x1a>
 800f9a6:	4b09      	ldr	r3, [pc, #36]	; (800f9cc <__swbuf_r+0xa0>)
 800f9a8:	429c      	cmp	r4, r3
 800f9aa:	bf08      	it	eq
 800f9ac:	68ec      	ldreq	r4, [r5, #12]
 800f9ae:	e7ca      	b.n	800f946 <__swbuf_r+0x1a>
 800f9b0:	4621      	mov	r1, r4
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f000 f80c 	bl	800f9d0 <__swsetup_r>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d0cb      	beq.n	800f954 <__swbuf_r+0x28>
 800f9bc:	f04f 37ff 	mov.w	r7, #4294967295
 800f9c0:	e7ea      	b.n	800f998 <__swbuf_r+0x6c>
 800f9c2:	bf00      	nop
 800f9c4:	08010cfc 	.word	0x08010cfc
 800f9c8:	08010d1c 	.word	0x08010d1c
 800f9cc:	08010cdc 	.word	0x08010cdc

0800f9d0 <__swsetup_r>:
 800f9d0:	4b32      	ldr	r3, [pc, #200]	; (800fa9c <__swsetup_r+0xcc>)
 800f9d2:	b570      	push	{r4, r5, r6, lr}
 800f9d4:	681d      	ldr	r5, [r3, #0]
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	460c      	mov	r4, r1
 800f9da:	b125      	cbz	r5, 800f9e6 <__swsetup_r+0x16>
 800f9dc:	69ab      	ldr	r3, [r5, #24]
 800f9de:	b913      	cbnz	r3, 800f9e6 <__swsetup_r+0x16>
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	f000 f985 	bl	800fcf0 <__sinit>
 800f9e6:	4b2e      	ldr	r3, [pc, #184]	; (800faa0 <__swsetup_r+0xd0>)
 800f9e8:	429c      	cmp	r4, r3
 800f9ea:	d10f      	bne.n	800fa0c <__swsetup_r+0x3c>
 800f9ec:	686c      	ldr	r4, [r5, #4]
 800f9ee:	89a3      	ldrh	r3, [r4, #12]
 800f9f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9f4:	0719      	lsls	r1, r3, #28
 800f9f6:	d42c      	bmi.n	800fa52 <__swsetup_r+0x82>
 800f9f8:	06dd      	lsls	r5, r3, #27
 800f9fa:	d411      	bmi.n	800fa20 <__swsetup_r+0x50>
 800f9fc:	2309      	movs	r3, #9
 800f9fe:	6033      	str	r3, [r6, #0]
 800fa00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa04:	81a3      	strh	r3, [r4, #12]
 800fa06:	f04f 30ff 	mov.w	r0, #4294967295
 800fa0a:	e03e      	b.n	800fa8a <__swsetup_r+0xba>
 800fa0c:	4b25      	ldr	r3, [pc, #148]	; (800faa4 <__swsetup_r+0xd4>)
 800fa0e:	429c      	cmp	r4, r3
 800fa10:	d101      	bne.n	800fa16 <__swsetup_r+0x46>
 800fa12:	68ac      	ldr	r4, [r5, #8]
 800fa14:	e7eb      	b.n	800f9ee <__swsetup_r+0x1e>
 800fa16:	4b24      	ldr	r3, [pc, #144]	; (800faa8 <__swsetup_r+0xd8>)
 800fa18:	429c      	cmp	r4, r3
 800fa1a:	bf08      	it	eq
 800fa1c:	68ec      	ldreq	r4, [r5, #12]
 800fa1e:	e7e6      	b.n	800f9ee <__swsetup_r+0x1e>
 800fa20:	0758      	lsls	r0, r3, #29
 800fa22:	d512      	bpl.n	800fa4a <__swsetup_r+0x7a>
 800fa24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa26:	b141      	cbz	r1, 800fa3a <__swsetup_r+0x6a>
 800fa28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa2c:	4299      	cmp	r1, r3
 800fa2e:	d002      	beq.n	800fa36 <__swsetup_r+0x66>
 800fa30:	4630      	mov	r0, r6
 800fa32:	f7ff fa41 	bl	800eeb8 <_free_r>
 800fa36:	2300      	movs	r3, #0
 800fa38:	6363      	str	r3, [r4, #52]	; 0x34
 800fa3a:	89a3      	ldrh	r3, [r4, #12]
 800fa3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa40:	81a3      	strh	r3, [r4, #12]
 800fa42:	2300      	movs	r3, #0
 800fa44:	6063      	str	r3, [r4, #4]
 800fa46:	6923      	ldr	r3, [r4, #16]
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	89a3      	ldrh	r3, [r4, #12]
 800fa4c:	f043 0308 	orr.w	r3, r3, #8
 800fa50:	81a3      	strh	r3, [r4, #12]
 800fa52:	6923      	ldr	r3, [r4, #16]
 800fa54:	b94b      	cbnz	r3, 800fa6a <__swsetup_r+0x9a>
 800fa56:	89a3      	ldrh	r3, [r4, #12]
 800fa58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa60:	d003      	beq.n	800fa6a <__swsetup_r+0x9a>
 800fa62:	4621      	mov	r1, r4
 800fa64:	4630      	mov	r0, r6
 800fa66:	f000 fa09 	bl	800fe7c <__smakebuf_r>
 800fa6a:	89a0      	ldrh	r0, [r4, #12]
 800fa6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa70:	f010 0301 	ands.w	r3, r0, #1
 800fa74:	d00a      	beq.n	800fa8c <__swsetup_r+0xbc>
 800fa76:	2300      	movs	r3, #0
 800fa78:	60a3      	str	r3, [r4, #8]
 800fa7a:	6963      	ldr	r3, [r4, #20]
 800fa7c:	425b      	negs	r3, r3
 800fa7e:	61a3      	str	r3, [r4, #24]
 800fa80:	6923      	ldr	r3, [r4, #16]
 800fa82:	b943      	cbnz	r3, 800fa96 <__swsetup_r+0xc6>
 800fa84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa88:	d1ba      	bne.n	800fa00 <__swsetup_r+0x30>
 800fa8a:	bd70      	pop	{r4, r5, r6, pc}
 800fa8c:	0781      	lsls	r1, r0, #30
 800fa8e:	bf58      	it	pl
 800fa90:	6963      	ldrpl	r3, [r4, #20]
 800fa92:	60a3      	str	r3, [r4, #8]
 800fa94:	e7f4      	b.n	800fa80 <__swsetup_r+0xb0>
 800fa96:	2000      	movs	r0, #0
 800fa98:	e7f7      	b.n	800fa8a <__swsetup_r+0xba>
 800fa9a:	bf00      	nop
 800fa9c:	2000013c 	.word	0x2000013c
 800faa0:	08010cfc 	.word	0x08010cfc
 800faa4:	08010d1c 	.word	0x08010d1c
 800faa8:	08010cdc 	.word	0x08010cdc

0800faac <abort>:
 800faac:	b508      	push	{r3, lr}
 800faae:	2006      	movs	r0, #6
 800fab0:	f000 fab0 	bl	8010014 <raise>
 800fab4:	2001      	movs	r0, #1
 800fab6:	f7f2 ff1f 	bl	80028f8 <_exit>
	...

0800fabc <__sflush_r>:
 800fabc:	898a      	ldrh	r2, [r1, #12]
 800fabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac2:	4605      	mov	r5, r0
 800fac4:	0710      	lsls	r0, r2, #28
 800fac6:	460c      	mov	r4, r1
 800fac8:	d458      	bmi.n	800fb7c <__sflush_r+0xc0>
 800faca:	684b      	ldr	r3, [r1, #4]
 800facc:	2b00      	cmp	r3, #0
 800face:	dc05      	bgt.n	800fadc <__sflush_r+0x20>
 800fad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	dc02      	bgt.n	800fadc <__sflush_r+0x20>
 800fad6:	2000      	movs	r0, #0
 800fad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fadc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fade:	2e00      	cmp	r6, #0
 800fae0:	d0f9      	beq.n	800fad6 <__sflush_r+0x1a>
 800fae2:	2300      	movs	r3, #0
 800fae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fae8:	682f      	ldr	r7, [r5, #0]
 800faea:	602b      	str	r3, [r5, #0]
 800faec:	d032      	beq.n	800fb54 <__sflush_r+0x98>
 800faee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	075a      	lsls	r2, r3, #29
 800faf4:	d505      	bpl.n	800fb02 <__sflush_r+0x46>
 800faf6:	6863      	ldr	r3, [r4, #4]
 800faf8:	1ac0      	subs	r0, r0, r3
 800fafa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fafc:	b10b      	cbz	r3, 800fb02 <__sflush_r+0x46>
 800fafe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb00:	1ac0      	subs	r0, r0, r3
 800fb02:	2300      	movs	r3, #0
 800fb04:	4602      	mov	r2, r0
 800fb06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb08:	6a21      	ldr	r1, [r4, #32]
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	47b0      	blx	r6
 800fb0e:	1c43      	adds	r3, r0, #1
 800fb10:	89a3      	ldrh	r3, [r4, #12]
 800fb12:	d106      	bne.n	800fb22 <__sflush_r+0x66>
 800fb14:	6829      	ldr	r1, [r5, #0]
 800fb16:	291d      	cmp	r1, #29
 800fb18:	d82c      	bhi.n	800fb74 <__sflush_r+0xb8>
 800fb1a:	4a2a      	ldr	r2, [pc, #168]	; (800fbc4 <__sflush_r+0x108>)
 800fb1c:	40ca      	lsrs	r2, r1
 800fb1e:	07d6      	lsls	r6, r2, #31
 800fb20:	d528      	bpl.n	800fb74 <__sflush_r+0xb8>
 800fb22:	2200      	movs	r2, #0
 800fb24:	6062      	str	r2, [r4, #4]
 800fb26:	04d9      	lsls	r1, r3, #19
 800fb28:	6922      	ldr	r2, [r4, #16]
 800fb2a:	6022      	str	r2, [r4, #0]
 800fb2c:	d504      	bpl.n	800fb38 <__sflush_r+0x7c>
 800fb2e:	1c42      	adds	r2, r0, #1
 800fb30:	d101      	bne.n	800fb36 <__sflush_r+0x7a>
 800fb32:	682b      	ldr	r3, [r5, #0]
 800fb34:	b903      	cbnz	r3, 800fb38 <__sflush_r+0x7c>
 800fb36:	6560      	str	r0, [r4, #84]	; 0x54
 800fb38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb3a:	602f      	str	r7, [r5, #0]
 800fb3c:	2900      	cmp	r1, #0
 800fb3e:	d0ca      	beq.n	800fad6 <__sflush_r+0x1a>
 800fb40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb44:	4299      	cmp	r1, r3
 800fb46:	d002      	beq.n	800fb4e <__sflush_r+0x92>
 800fb48:	4628      	mov	r0, r5
 800fb4a:	f7ff f9b5 	bl	800eeb8 <_free_r>
 800fb4e:	2000      	movs	r0, #0
 800fb50:	6360      	str	r0, [r4, #52]	; 0x34
 800fb52:	e7c1      	b.n	800fad8 <__sflush_r+0x1c>
 800fb54:	6a21      	ldr	r1, [r4, #32]
 800fb56:	2301      	movs	r3, #1
 800fb58:	4628      	mov	r0, r5
 800fb5a:	47b0      	blx	r6
 800fb5c:	1c41      	adds	r1, r0, #1
 800fb5e:	d1c7      	bne.n	800faf0 <__sflush_r+0x34>
 800fb60:	682b      	ldr	r3, [r5, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d0c4      	beq.n	800faf0 <__sflush_r+0x34>
 800fb66:	2b1d      	cmp	r3, #29
 800fb68:	d001      	beq.n	800fb6e <__sflush_r+0xb2>
 800fb6a:	2b16      	cmp	r3, #22
 800fb6c:	d101      	bne.n	800fb72 <__sflush_r+0xb6>
 800fb6e:	602f      	str	r7, [r5, #0]
 800fb70:	e7b1      	b.n	800fad6 <__sflush_r+0x1a>
 800fb72:	89a3      	ldrh	r3, [r4, #12]
 800fb74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb78:	81a3      	strh	r3, [r4, #12]
 800fb7a:	e7ad      	b.n	800fad8 <__sflush_r+0x1c>
 800fb7c:	690f      	ldr	r7, [r1, #16]
 800fb7e:	2f00      	cmp	r7, #0
 800fb80:	d0a9      	beq.n	800fad6 <__sflush_r+0x1a>
 800fb82:	0793      	lsls	r3, r2, #30
 800fb84:	680e      	ldr	r6, [r1, #0]
 800fb86:	bf08      	it	eq
 800fb88:	694b      	ldreq	r3, [r1, #20]
 800fb8a:	600f      	str	r7, [r1, #0]
 800fb8c:	bf18      	it	ne
 800fb8e:	2300      	movne	r3, #0
 800fb90:	eba6 0807 	sub.w	r8, r6, r7
 800fb94:	608b      	str	r3, [r1, #8]
 800fb96:	f1b8 0f00 	cmp.w	r8, #0
 800fb9a:	dd9c      	ble.n	800fad6 <__sflush_r+0x1a>
 800fb9c:	6a21      	ldr	r1, [r4, #32]
 800fb9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fba0:	4643      	mov	r3, r8
 800fba2:	463a      	mov	r2, r7
 800fba4:	4628      	mov	r0, r5
 800fba6:	47b0      	blx	r6
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	dc06      	bgt.n	800fbba <__sflush_r+0xfe>
 800fbac:	89a3      	ldrh	r3, [r4, #12]
 800fbae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbb2:	81a3      	strh	r3, [r4, #12]
 800fbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb8:	e78e      	b.n	800fad8 <__sflush_r+0x1c>
 800fbba:	4407      	add	r7, r0
 800fbbc:	eba8 0800 	sub.w	r8, r8, r0
 800fbc0:	e7e9      	b.n	800fb96 <__sflush_r+0xda>
 800fbc2:	bf00      	nop
 800fbc4:	20400001 	.word	0x20400001

0800fbc8 <_fflush_r>:
 800fbc8:	b538      	push	{r3, r4, r5, lr}
 800fbca:	690b      	ldr	r3, [r1, #16]
 800fbcc:	4605      	mov	r5, r0
 800fbce:	460c      	mov	r4, r1
 800fbd0:	b913      	cbnz	r3, 800fbd8 <_fflush_r+0x10>
 800fbd2:	2500      	movs	r5, #0
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	bd38      	pop	{r3, r4, r5, pc}
 800fbd8:	b118      	cbz	r0, 800fbe2 <_fflush_r+0x1a>
 800fbda:	6983      	ldr	r3, [r0, #24]
 800fbdc:	b90b      	cbnz	r3, 800fbe2 <_fflush_r+0x1a>
 800fbde:	f000 f887 	bl	800fcf0 <__sinit>
 800fbe2:	4b14      	ldr	r3, [pc, #80]	; (800fc34 <_fflush_r+0x6c>)
 800fbe4:	429c      	cmp	r4, r3
 800fbe6:	d11b      	bne.n	800fc20 <_fflush_r+0x58>
 800fbe8:	686c      	ldr	r4, [r5, #4]
 800fbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d0ef      	beq.n	800fbd2 <_fflush_r+0xa>
 800fbf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fbf4:	07d0      	lsls	r0, r2, #31
 800fbf6:	d404      	bmi.n	800fc02 <_fflush_r+0x3a>
 800fbf8:	0599      	lsls	r1, r3, #22
 800fbfa:	d402      	bmi.n	800fc02 <_fflush_r+0x3a>
 800fbfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbfe:	f000 f915 	bl	800fe2c <__retarget_lock_acquire_recursive>
 800fc02:	4628      	mov	r0, r5
 800fc04:	4621      	mov	r1, r4
 800fc06:	f7ff ff59 	bl	800fabc <__sflush_r>
 800fc0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc0c:	07da      	lsls	r2, r3, #31
 800fc0e:	4605      	mov	r5, r0
 800fc10:	d4e0      	bmi.n	800fbd4 <_fflush_r+0xc>
 800fc12:	89a3      	ldrh	r3, [r4, #12]
 800fc14:	059b      	lsls	r3, r3, #22
 800fc16:	d4dd      	bmi.n	800fbd4 <_fflush_r+0xc>
 800fc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc1a:	f000 f908 	bl	800fe2e <__retarget_lock_release_recursive>
 800fc1e:	e7d9      	b.n	800fbd4 <_fflush_r+0xc>
 800fc20:	4b05      	ldr	r3, [pc, #20]	; (800fc38 <_fflush_r+0x70>)
 800fc22:	429c      	cmp	r4, r3
 800fc24:	d101      	bne.n	800fc2a <_fflush_r+0x62>
 800fc26:	68ac      	ldr	r4, [r5, #8]
 800fc28:	e7df      	b.n	800fbea <_fflush_r+0x22>
 800fc2a:	4b04      	ldr	r3, [pc, #16]	; (800fc3c <_fflush_r+0x74>)
 800fc2c:	429c      	cmp	r4, r3
 800fc2e:	bf08      	it	eq
 800fc30:	68ec      	ldreq	r4, [r5, #12]
 800fc32:	e7da      	b.n	800fbea <_fflush_r+0x22>
 800fc34:	08010cfc 	.word	0x08010cfc
 800fc38:	08010d1c 	.word	0x08010d1c
 800fc3c:	08010cdc 	.word	0x08010cdc

0800fc40 <std>:
 800fc40:	2300      	movs	r3, #0
 800fc42:	b510      	push	{r4, lr}
 800fc44:	4604      	mov	r4, r0
 800fc46:	e9c0 3300 	strd	r3, r3, [r0]
 800fc4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc4e:	6083      	str	r3, [r0, #8]
 800fc50:	8181      	strh	r1, [r0, #12]
 800fc52:	6643      	str	r3, [r0, #100]	; 0x64
 800fc54:	81c2      	strh	r2, [r0, #14]
 800fc56:	6183      	str	r3, [r0, #24]
 800fc58:	4619      	mov	r1, r3
 800fc5a:	2208      	movs	r2, #8
 800fc5c:	305c      	adds	r0, #92	; 0x5c
 800fc5e:	f7fe ff85 	bl	800eb6c <memset>
 800fc62:	4b05      	ldr	r3, [pc, #20]	; (800fc78 <std+0x38>)
 800fc64:	6263      	str	r3, [r4, #36]	; 0x24
 800fc66:	4b05      	ldr	r3, [pc, #20]	; (800fc7c <std+0x3c>)
 800fc68:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc6a:	4b05      	ldr	r3, [pc, #20]	; (800fc80 <std+0x40>)
 800fc6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc6e:	4b05      	ldr	r3, [pc, #20]	; (800fc84 <std+0x44>)
 800fc70:	6224      	str	r4, [r4, #32]
 800fc72:	6323      	str	r3, [r4, #48]	; 0x30
 800fc74:	bd10      	pop	{r4, pc}
 800fc76:	bf00      	nop
 800fc78:	0801004d 	.word	0x0801004d
 800fc7c:	0801006f 	.word	0x0801006f
 800fc80:	080100a7 	.word	0x080100a7
 800fc84:	080100cb 	.word	0x080100cb

0800fc88 <_cleanup_r>:
 800fc88:	4901      	ldr	r1, [pc, #4]	; (800fc90 <_cleanup_r+0x8>)
 800fc8a:	f000 b8af 	b.w	800fdec <_fwalk_reent>
 800fc8e:	bf00      	nop
 800fc90:	0800fbc9 	.word	0x0800fbc9

0800fc94 <__sfmoreglue>:
 800fc94:	b570      	push	{r4, r5, r6, lr}
 800fc96:	2268      	movs	r2, #104	; 0x68
 800fc98:	1e4d      	subs	r5, r1, #1
 800fc9a:	4355      	muls	r5, r2
 800fc9c:	460e      	mov	r6, r1
 800fc9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fca2:	f7ff f975 	bl	800ef90 <_malloc_r>
 800fca6:	4604      	mov	r4, r0
 800fca8:	b140      	cbz	r0, 800fcbc <__sfmoreglue+0x28>
 800fcaa:	2100      	movs	r1, #0
 800fcac:	e9c0 1600 	strd	r1, r6, [r0]
 800fcb0:	300c      	adds	r0, #12
 800fcb2:	60a0      	str	r0, [r4, #8]
 800fcb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fcb8:	f7fe ff58 	bl	800eb6c <memset>
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	bd70      	pop	{r4, r5, r6, pc}

0800fcc0 <__sfp_lock_acquire>:
 800fcc0:	4801      	ldr	r0, [pc, #4]	; (800fcc8 <__sfp_lock_acquire+0x8>)
 800fcc2:	f000 b8b3 	b.w	800fe2c <__retarget_lock_acquire_recursive>
 800fcc6:	bf00      	nop
 800fcc8:	20003e89 	.word	0x20003e89

0800fccc <__sfp_lock_release>:
 800fccc:	4801      	ldr	r0, [pc, #4]	; (800fcd4 <__sfp_lock_release+0x8>)
 800fcce:	f000 b8ae 	b.w	800fe2e <__retarget_lock_release_recursive>
 800fcd2:	bf00      	nop
 800fcd4:	20003e89 	.word	0x20003e89

0800fcd8 <__sinit_lock_acquire>:
 800fcd8:	4801      	ldr	r0, [pc, #4]	; (800fce0 <__sinit_lock_acquire+0x8>)
 800fcda:	f000 b8a7 	b.w	800fe2c <__retarget_lock_acquire_recursive>
 800fcde:	bf00      	nop
 800fce0:	20003e8a 	.word	0x20003e8a

0800fce4 <__sinit_lock_release>:
 800fce4:	4801      	ldr	r0, [pc, #4]	; (800fcec <__sinit_lock_release+0x8>)
 800fce6:	f000 b8a2 	b.w	800fe2e <__retarget_lock_release_recursive>
 800fcea:	bf00      	nop
 800fcec:	20003e8a 	.word	0x20003e8a

0800fcf0 <__sinit>:
 800fcf0:	b510      	push	{r4, lr}
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	f7ff fff0 	bl	800fcd8 <__sinit_lock_acquire>
 800fcf8:	69a3      	ldr	r3, [r4, #24]
 800fcfa:	b11b      	cbz	r3, 800fd04 <__sinit+0x14>
 800fcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd00:	f7ff bff0 	b.w	800fce4 <__sinit_lock_release>
 800fd04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd08:	6523      	str	r3, [r4, #80]	; 0x50
 800fd0a:	4b13      	ldr	r3, [pc, #76]	; (800fd58 <__sinit+0x68>)
 800fd0c:	4a13      	ldr	r2, [pc, #76]	; (800fd5c <__sinit+0x6c>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd12:	42a3      	cmp	r3, r4
 800fd14:	bf04      	itt	eq
 800fd16:	2301      	moveq	r3, #1
 800fd18:	61a3      	streq	r3, [r4, #24]
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f000 f820 	bl	800fd60 <__sfp>
 800fd20:	6060      	str	r0, [r4, #4]
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 f81c 	bl	800fd60 <__sfp>
 800fd28:	60a0      	str	r0, [r4, #8]
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f000 f818 	bl	800fd60 <__sfp>
 800fd30:	2200      	movs	r2, #0
 800fd32:	60e0      	str	r0, [r4, #12]
 800fd34:	2104      	movs	r1, #4
 800fd36:	6860      	ldr	r0, [r4, #4]
 800fd38:	f7ff ff82 	bl	800fc40 <std>
 800fd3c:	68a0      	ldr	r0, [r4, #8]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	2109      	movs	r1, #9
 800fd42:	f7ff ff7d 	bl	800fc40 <std>
 800fd46:	68e0      	ldr	r0, [r4, #12]
 800fd48:	2202      	movs	r2, #2
 800fd4a:	2112      	movs	r1, #18
 800fd4c:	f7ff ff78 	bl	800fc40 <std>
 800fd50:	2301      	movs	r3, #1
 800fd52:	61a3      	str	r3, [r4, #24]
 800fd54:	e7d2      	b.n	800fcfc <__sinit+0xc>
 800fd56:	bf00      	nop
 800fd58:	08010acc 	.word	0x08010acc
 800fd5c:	0800fc89 	.word	0x0800fc89

0800fd60 <__sfp>:
 800fd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd62:	4607      	mov	r7, r0
 800fd64:	f7ff ffac 	bl	800fcc0 <__sfp_lock_acquire>
 800fd68:	4b1e      	ldr	r3, [pc, #120]	; (800fde4 <__sfp+0x84>)
 800fd6a:	681e      	ldr	r6, [r3, #0]
 800fd6c:	69b3      	ldr	r3, [r6, #24]
 800fd6e:	b913      	cbnz	r3, 800fd76 <__sfp+0x16>
 800fd70:	4630      	mov	r0, r6
 800fd72:	f7ff ffbd 	bl	800fcf0 <__sinit>
 800fd76:	3648      	adds	r6, #72	; 0x48
 800fd78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	d503      	bpl.n	800fd88 <__sfp+0x28>
 800fd80:	6833      	ldr	r3, [r6, #0]
 800fd82:	b30b      	cbz	r3, 800fdc8 <__sfp+0x68>
 800fd84:	6836      	ldr	r6, [r6, #0]
 800fd86:	e7f7      	b.n	800fd78 <__sfp+0x18>
 800fd88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd8c:	b9d5      	cbnz	r5, 800fdc4 <__sfp+0x64>
 800fd8e:	4b16      	ldr	r3, [pc, #88]	; (800fde8 <__sfp+0x88>)
 800fd90:	60e3      	str	r3, [r4, #12]
 800fd92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd96:	6665      	str	r5, [r4, #100]	; 0x64
 800fd98:	f000 f847 	bl	800fe2a <__retarget_lock_init_recursive>
 800fd9c:	f7ff ff96 	bl	800fccc <__sfp_lock_release>
 800fda0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fda4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fda8:	6025      	str	r5, [r4, #0]
 800fdaa:	61a5      	str	r5, [r4, #24]
 800fdac:	2208      	movs	r2, #8
 800fdae:	4629      	mov	r1, r5
 800fdb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fdb4:	f7fe feda 	bl	800eb6c <memset>
 800fdb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fdbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdc4:	3468      	adds	r4, #104	; 0x68
 800fdc6:	e7d9      	b.n	800fd7c <__sfp+0x1c>
 800fdc8:	2104      	movs	r1, #4
 800fdca:	4638      	mov	r0, r7
 800fdcc:	f7ff ff62 	bl	800fc94 <__sfmoreglue>
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	6030      	str	r0, [r6, #0]
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	d1d5      	bne.n	800fd84 <__sfp+0x24>
 800fdd8:	f7ff ff78 	bl	800fccc <__sfp_lock_release>
 800fddc:	230c      	movs	r3, #12
 800fdde:	603b      	str	r3, [r7, #0]
 800fde0:	e7ee      	b.n	800fdc0 <__sfp+0x60>
 800fde2:	bf00      	nop
 800fde4:	08010acc 	.word	0x08010acc
 800fde8:	ffff0001 	.word	0xffff0001

0800fdec <_fwalk_reent>:
 800fdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf0:	4606      	mov	r6, r0
 800fdf2:	4688      	mov	r8, r1
 800fdf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fdf8:	2700      	movs	r7, #0
 800fdfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fdfe:	f1b9 0901 	subs.w	r9, r9, #1
 800fe02:	d505      	bpl.n	800fe10 <_fwalk_reent+0x24>
 800fe04:	6824      	ldr	r4, [r4, #0]
 800fe06:	2c00      	cmp	r4, #0
 800fe08:	d1f7      	bne.n	800fdfa <_fwalk_reent+0xe>
 800fe0a:	4638      	mov	r0, r7
 800fe0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe10:	89ab      	ldrh	r3, [r5, #12]
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d907      	bls.n	800fe26 <_fwalk_reent+0x3a>
 800fe16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	d003      	beq.n	800fe26 <_fwalk_reent+0x3a>
 800fe1e:	4629      	mov	r1, r5
 800fe20:	4630      	mov	r0, r6
 800fe22:	47c0      	blx	r8
 800fe24:	4307      	orrs	r7, r0
 800fe26:	3568      	adds	r5, #104	; 0x68
 800fe28:	e7e9      	b.n	800fdfe <_fwalk_reent+0x12>

0800fe2a <__retarget_lock_init_recursive>:
 800fe2a:	4770      	bx	lr

0800fe2c <__retarget_lock_acquire_recursive>:
 800fe2c:	4770      	bx	lr

0800fe2e <__retarget_lock_release_recursive>:
 800fe2e:	4770      	bx	lr

0800fe30 <__swhatbuf_r>:
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	460e      	mov	r6, r1
 800fe34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe38:	2900      	cmp	r1, #0
 800fe3a:	b096      	sub	sp, #88	; 0x58
 800fe3c:	4614      	mov	r4, r2
 800fe3e:	461d      	mov	r5, r3
 800fe40:	da08      	bge.n	800fe54 <__swhatbuf_r+0x24>
 800fe42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fe46:	2200      	movs	r2, #0
 800fe48:	602a      	str	r2, [r5, #0]
 800fe4a:	061a      	lsls	r2, r3, #24
 800fe4c:	d410      	bmi.n	800fe70 <__swhatbuf_r+0x40>
 800fe4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe52:	e00e      	b.n	800fe72 <__swhatbuf_r+0x42>
 800fe54:	466a      	mov	r2, sp
 800fe56:	f000 f95f 	bl	8010118 <_fstat_r>
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	dbf1      	blt.n	800fe42 <__swhatbuf_r+0x12>
 800fe5e:	9a01      	ldr	r2, [sp, #4]
 800fe60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe68:	425a      	negs	r2, r3
 800fe6a:	415a      	adcs	r2, r3
 800fe6c:	602a      	str	r2, [r5, #0]
 800fe6e:	e7ee      	b.n	800fe4e <__swhatbuf_r+0x1e>
 800fe70:	2340      	movs	r3, #64	; 0x40
 800fe72:	2000      	movs	r0, #0
 800fe74:	6023      	str	r3, [r4, #0]
 800fe76:	b016      	add	sp, #88	; 0x58
 800fe78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe7c <__smakebuf_r>:
 800fe7c:	898b      	ldrh	r3, [r1, #12]
 800fe7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe80:	079d      	lsls	r5, r3, #30
 800fe82:	4606      	mov	r6, r0
 800fe84:	460c      	mov	r4, r1
 800fe86:	d507      	bpl.n	800fe98 <__smakebuf_r+0x1c>
 800fe88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fe8c:	6023      	str	r3, [r4, #0]
 800fe8e:	6123      	str	r3, [r4, #16]
 800fe90:	2301      	movs	r3, #1
 800fe92:	6163      	str	r3, [r4, #20]
 800fe94:	b002      	add	sp, #8
 800fe96:	bd70      	pop	{r4, r5, r6, pc}
 800fe98:	ab01      	add	r3, sp, #4
 800fe9a:	466a      	mov	r2, sp
 800fe9c:	f7ff ffc8 	bl	800fe30 <__swhatbuf_r>
 800fea0:	9900      	ldr	r1, [sp, #0]
 800fea2:	4605      	mov	r5, r0
 800fea4:	4630      	mov	r0, r6
 800fea6:	f7ff f873 	bl	800ef90 <_malloc_r>
 800feaa:	b948      	cbnz	r0, 800fec0 <__smakebuf_r+0x44>
 800feac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feb0:	059a      	lsls	r2, r3, #22
 800feb2:	d4ef      	bmi.n	800fe94 <__smakebuf_r+0x18>
 800feb4:	f023 0303 	bic.w	r3, r3, #3
 800feb8:	f043 0302 	orr.w	r3, r3, #2
 800febc:	81a3      	strh	r3, [r4, #12]
 800febe:	e7e3      	b.n	800fe88 <__smakebuf_r+0xc>
 800fec0:	4b0d      	ldr	r3, [pc, #52]	; (800fef8 <__smakebuf_r+0x7c>)
 800fec2:	62b3      	str	r3, [r6, #40]	; 0x28
 800fec4:	89a3      	ldrh	r3, [r4, #12]
 800fec6:	6020      	str	r0, [r4, #0]
 800fec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fecc:	81a3      	strh	r3, [r4, #12]
 800fece:	9b00      	ldr	r3, [sp, #0]
 800fed0:	6163      	str	r3, [r4, #20]
 800fed2:	9b01      	ldr	r3, [sp, #4]
 800fed4:	6120      	str	r0, [r4, #16]
 800fed6:	b15b      	cbz	r3, 800fef0 <__smakebuf_r+0x74>
 800fed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fedc:	4630      	mov	r0, r6
 800fede:	f000 f92d 	bl	801013c <_isatty_r>
 800fee2:	b128      	cbz	r0, 800fef0 <__smakebuf_r+0x74>
 800fee4:	89a3      	ldrh	r3, [r4, #12]
 800fee6:	f023 0303 	bic.w	r3, r3, #3
 800feea:	f043 0301 	orr.w	r3, r3, #1
 800feee:	81a3      	strh	r3, [r4, #12]
 800fef0:	89a0      	ldrh	r0, [r4, #12]
 800fef2:	4305      	orrs	r5, r0
 800fef4:	81a5      	strh	r5, [r4, #12]
 800fef6:	e7cd      	b.n	800fe94 <__smakebuf_r+0x18>
 800fef8:	0800fc89 	.word	0x0800fc89

0800fefc <memcpy>:
 800fefc:	440a      	add	r2, r1
 800fefe:	4291      	cmp	r1, r2
 800ff00:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff04:	d100      	bne.n	800ff08 <memcpy+0xc>
 800ff06:	4770      	bx	lr
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff12:	4291      	cmp	r1, r2
 800ff14:	d1f9      	bne.n	800ff0a <memcpy+0xe>
 800ff16:	bd10      	pop	{r4, pc}

0800ff18 <memmove>:
 800ff18:	4288      	cmp	r0, r1
 800ff1a:	b510      	push	{r4, lr}
 800ff1c:	eb01 0402 	add.w	r4, r1, r2
 800ff20:	d902      	bls.n	800ff28 <memmove+0x10>
 800ff22:	4284      	cmp	r4, r0
 800ff24:	4623      	mov	r3, r4
 800ff26:	d807      	bhi.n	800ff38 <memmove+0x20>
 800ff28:	1e43      	subs	r3, r0, #1
 800ff2a:	42a1      	cmp	r1, r4
 800ff2c:	d008      	beq.n	800ff40 <memmove+0x28>
 800ff2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff36:	e7f8      	b.n	800ff2a <memmove+0x12>
 800ff38:	4402      	add	r2, r0
 800ff3a:	4601      	mov	r1, r0
 800ff3c:	428a      	cmp	r2, r1
 800ff3e:	d100      	bne.n	800ff42 <memmove+0x2a>
 800ff40:	bd10      	pop	{r4, pc}
 800ff42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff4a:	e7f7      	b.n	800ff3c <memmove+0x24>

0800ff4c <__malloc_lock>:
 800ff4c:	4801      	ldr	r0, [pc, #4]	; (800ff54 <__malloc_lock+0x8>)
 800ff4e:	f7ff bf6d 	b.w	800fe2c <__retarget_lock_acquire_recursive>
 800ff52:	bf00      	nop
 800ff54:	20003e88 	.word	0x20003e88

0800ff58 <__malloc_unlock>:
 800ff58:	4801      	ldr	r0, [pc, #4]	; (800ff60 <__malloc_unlock+0x8>)
 800ff5a:	f7ff bf68 	b.w	800fe2e <__retarget_lock_release_recursive>
 800ff5e:	bf00      	nop
 800ff60:	20003e88 	.word	0x20003e88

0800ff64 <_realloc_r>:
 800ff64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff68:	4680      	mov	r8, r0
 800ff6a:	4614      	mov	r4, r2
 800ff6c:	460e      	mov	r6, r1
 800ff6e:	b921      	cbnz	r1, 800ff7a <_realloc_r+0x16>
 800ff70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff74:	4611      	mov	r1, r2
 800ff76:	f7ff b80b 	b.w	800ef90 <_malloc_r>
 800ff7a:	b92a      	cbnz	r2, 800ff88 <_realloc_r+0x24>
 800ff7c:	f7fe ff9c 	bl	800eeb8 <_free_r>
 800ff80:	4625      	mov	r5, r4
 800ff82:	4628      	mov	r0, r5
 800ff84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff88:	f000 f8fa 	bl	8010180 <_malloc_usable_size_r>
 800ff8c:	4284      	cmp	r4, r0
 800ff8e:	4607      	mov	r7, r0
 800ff90:	d802      	bhi.n	800ff98 <_realloc_r+0x34>
 800ff92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff96:	d812      	bhi.n	800ffbe <_realloc_r+0x5a>
 800ff98:	4621      	mov	r1, r4
 800ff9a:	4640      	mov	r0, r8
 800ff9c:	f7fe fff8 	bl	800ef90 <_malloc_r>
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	d0ed      	beq.n	800ff82 <_realloc_r+0x1e>
 800ffa6:	42bc      	cmp	r4, r7
 800ffa8:	4622      	mov	r2, r4
 800ffaa:	4631      	mov	r1, r6
 800ffac:	bf28      	it	cs
 800ffae:	463a      	movcs	r2, r7
 800ffb0:	f7ff ffa4 	bl	800fefc <memcpy>
 800ffb4:	4631      	mov	r1, r6
 800ffb6:	4640      	mov	r0, r8
 800ffb8:	f7fe ff7e 	bl	800eeb8 <_free_r>
 800ffbc:	e7e1      	b.n	800ff82 <_realloc_r+0x1e>
 800ffbe:	4635      	mov	r5, r6
 800ffc0:	e7df      	b.n	800ff82 <_realloc_r+0x1e>

0800ffc2 <_raise_r>:
 800ffc2:	291f      	cmp	r1, #31
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	460d      	mov	r5, r1
 800ffca:	d904      	bls.n	800ffd6 <_raise_r+0x14>
 800ffcc:	2316      	movs	r3, #22
 800ffce:	6003      	str	r3, [r0, #0]
 800ffd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd4:	bd38      	pop	{r3, r4, r5, pc}
 800ffd6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ffd8:	b112      	cbz	r2, 800ffe0 <_raise_r+0x1e>
 800ffda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ffde:	b94b      	cbnz	r3, 800fff4 <_raise_r+0x32>
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f000 f831 	bl	8010048 <_getpid_r>
 800ffe6:	462a      	mov	r2, r5
 800ffe8:	4601      	mov	r1, r0
 800ffea:	4620      	mov	r0, r4
 800ffec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fff0:	f000 b818 	b.w	8010024 <_kill_r>
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d00a      	beq.n	801000e <_raise_r+0x4c>
 800fff8:	1c59      	adds	r1, r3, #1
 800fffa:	d103      	bne.n	8010004 <_raise_r+0x42>
 800fffc:	2316      	movs	r3, #22
 800fffe:	6003      	str	r3, [r0, #0]
 8010000:	2001      	movs	r0, #1
 8010002:	e7e7      	b.n	800ffd4 <_raise_r+0x12>
 8010004:	2400      	movs	r4, #0
 8010006:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801000a:	4628      	mov	r0, r5
 801000c:	4798      	blx	r3
 801000e:	2000      	movs	r0, #0
 8010010:	e7e0      	b.n	800ffd4 <_raise_r+0x12>
	...

08010014 <raise>:
 8010014:	4b02      	ldr	r3, [pc, #8]	; (8010020 <raise+0xc>)
 8010016:	4601      	mov	r1, r0
 8010018:	6818      	ldr	r0, [r3, #0]
 801001a:	f7ff bfd2 	b.w	800ffc2 <_raise_r>
 801001e:	bf00      	nop
 8010020:	2000013c 	.word	0x2000013c

08010024 <_kill_r>:
 8010024:	b538      	push	{r3, r4, r5, lr}
 8010026:	4d07      	ldr	r5, [pc, #28]	; (8010044 <_kill_r+0x20>)
 8010028:	2300      	movs	r3, #0
 801002a:	4604      	mov	r4, r0
 801002c:	4608      	mov	r0, r1
 801002e:	4611      	mov	r1, r2
 8010030:	602b      	str	r3, [r5, #0]
 8010032:	f7f2 fc51 	bl	80028d8 <_kill>
 8010036:	1c43      	adds	r3, r0, #1
 8010038:	d102      	bne.n	8010040 <_kill_r+0x1c>
 801003a:	682b      	ldr	r3, [r5, #0]
 801003c:	b103      	cbz	r3, 8010040 <_kill_r+0x1c>
 801003e:	6023      	str	r3, [r4, #0]
 8010040:	bd38      	pop	{r3, r4, r5, pc}
 8010042:	bf00      	nop
 8010044:	20003e8c 	.word	0x20003e8c

08010048 <_getpid_r>:
 8010048:	f7f2 bc3e 	b.w	80028c8 <_getpid>

0801004c <__sread>:
 801004c:	b510      	push	{r4, lr}
 801004e:	460c      	mov	r4, r1
 8010050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010054:	f000 f89c 	bl	8010190 <_read_r>
 8010058:	2800      	cmp	r0, #0
 801005a:	bfab      	itete	ge
 801005c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801005e:	89a3      	ldrhlt	r3, [r4, #12]
 8010060:	181b      	addge	r3, r3, r0
 8010062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010066:	bfac      	ite	ge
 8010068:	6563      	strge	r3, [r4, #84]	; 0x54
 801006a:	81a3      	strhlt	r3, [r4, #12]
 801006c:	bd10      	pop	{r4, pc}

0801006e <__swrite>:
 801006e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010072:	461f      	mov	r7, r3
 8010074:	898b      	ldrh	r3, [r1, #12]
 8010076:	05db      	lsls	r3, r3, #23
 8010078:	4605      	mov	r5, r0
 801007a:	460c      	mov	r4, r1
 801007c:	4616      	mov	r6, r2
 801007e:	d505      	bpl.n	801008c <__swrite+0x1e>
 8010080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010084:	2302      	movs	r3, #2
 8010086:	2200      	movs	r2, #0
 8010088:	f000 f868 	bl	801015c <_lseek_r>
 801008c:	89a3      	ldrh	r3, [r4, #12]
 801008e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010096:	81a3      	strh	r3, [r4, #12]
 8010098:	4632      	mov	r2, r6
 801009a:	463b      	mov	r3, r7
 801009c:	4628      	mov	r0, r5
 801009e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100a2:	f000 b817 	b.w	80100d4 <_write_r>

080100a6 <__sseek>:
 80100a6:	b510      	push	{r4, lr}
 80100a8:	460c      	mov	r4, r1
 80100aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ae:	f000 f855 	bl	801015c <_lseek_r>
 80100b2:	1c43      	adds	r3, r0, #1
 80100b4:	89a3      	ldrh	r3, [r4, #12]
 80100b6:	bf15      	itete	ne
 80100b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80100ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100c2:	81a3      	strheq	r3, [r4, #12]
 80100c4:	bf18      	it	ne
 80100c6:	81a3      	strhne	r3, [r4, #12]
 80100c8:	bd10      	pop	{r4, pc}

080100ca <__sclose>:
 80100ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ce:	f000 b813 	b.w	80100f8 <_close_r>
	...

080100d4 <_write_r>:
 80100d4:	b538      	push	{r3, r4, r5, lr}
 80100d6:	4d07      	ldr	r5, [pc, #28]	; (80100f4 <_write_r+0x20>)
 80100d8:	4604      	mov	r4, r0
 80100da:	4608      	mov	r0, r1
 80100dc:	4611      	mov	r1, r2
 80100de:	2200      	movs	r2, #0
 80100e0:	602a      	str	r2, [r5, #0]
 80100e2:	461a      	mov	r2, r3
 80100e4:	f7f2 fc2f 	bl	8002946 <_write>
 80100e8:	1c43      	adds	r3, r0, #1
 80100ea:	d102      	bne.n	80100f2 <_write_r+0x1e>
 80100ec:	682b      	ldr	r3, [r5, #0]
 80100ee:	b103      	cbz	r3, 80100f2 <_write_r+0x1e>
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	bd38      	pop	{r3, r4, r5, pc}
 80100f4:	20003e8c 	.word	0x20003e8c

080100f8 <_close_r>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	4d06      	ldr	r5, [pc, #24]	; (8010114 <_close_r+0x1c>)
 80100fc:	2300      	movs	r3, #0
 80100fe:	4604      	mov	r4, r0
 8010100:	4608      	mov	r0, r1
 8010102:	602b      	str	r3, [r5, #0]
 8010104:	f7f2 fc3b 	bl	800297e <_close>
 8010108:	1c43      	adds	r3, r0, #1
 801010a:	d102      	bne.n	8010112 <_close_r+0x1a>
 801010c:	682b      	ldr	r3, [r5, #0]
 801010e:	b103      	cbz	r3, 8010112 <_close_r+0x1a>
 8010110:	6023      	str	r3, [r4, #0]
 8010112:	bd38      	pop	{r3, r4, r5, pc}
 8010114:	20003e8c 	.word	0x20003e8c

08010118 <_fstat_r>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	4d07      	ldr	r5, [pc, #28]	; (8010138 <_fstat_r+0x20>)
 801011c:	2300      	movs	r3, #0
 801011e:	4604      	mov	r4, r0
 8010120:	4608      	mov	r0, r1
 8010122:	4611      	mov	r1, r2
 8010124:	602b      	str	r3, [r5, #0]
 8010126:	f7f2 fc36 	bl	8002996 <_fstat>
 801012a:	1c43      	adds	r3, r0, #1
 801012c:	d102      	bne.n	8010134 <_fstat_r+0x1c>
 801012e:	682b      	ldr	r3, [r5, #0]
 8010130:	b103      	cbz	r3, 8010134 <_fstat_r+0x1c>
 8010132:	6023      	str	r3, [r4, #0]
 8010134:	bd38      	pop	{r3, r4, r5, pc}
 8010136:	bf00      	nop
 8010138:	20003e8c 	.word	0x20003e8c

0801013c <_isatty_r>:
 801013c:	b538      	push	{r3, r4, r5, lr}
 801013e:	4d06      	ldr	r5, [pc, #24]	; (8010158 <_isatty_r+0x1c>)
 8010140:	2300      	movs	r3, #0
 8010142:	4604      	mov	r4, r0
 8010144:	4608      	mov	r0, r1
 8010146:	602b      	str	r3, [r5, #0]
 8010148:	f7f2 fc35 	bl	80029b6 <_isatty>
 801014c:	1c43      	adds	r3, r0, #1
 801014e:	d102      	bne.n	8010156 <_isatty_r+0x1a>
 8010150:	682b      	ldr	r3, [r5, #0]
 8010152:	b103      	cbz	r3, 8010156 <_isatty_r+0x1a>
 8010154:	6023      	str	r3, [r4, #0]
 8010156:	bd38      	pop	{r3, r4, r5, pc}
 8010158:	20003e8c 	.word	0x20003e8c

0801015c <_lseek_r>:
 801015c:	b538      	push	{r3, r4, r5, lr}
 801015e:	4d07      	ldr	r5, [pc, #28]	; (801017c <_lseek_r+0x20>)
 8010160:	4604      	mov	r4, r0
 8010162:	4608      	mov	r0, r1
 8010164:	4611      	mov	r1, r2
 8010166:	2200      	movs	r2, #0
 8010168:	602a      	str	r2, [r5, #0]
 801016a:	461a      	mov	r2, r3
 801016c:	f7f2 fc2e 	bl	80029cc <_lseek>
 8010170:	1c43      	adds	r3, r0, #1
 8010172:	d102      	bne.n	801017a <_lseek_r+0x1e>
 8010174:	682b      	ldr	r3, [r5, #0]
 8010176:	b103      	cbz	r3, 801017a <_lseek_r+0x1e>
 8010178:	6023      	str	r3, [r4, #0]
 801017a:	bd38      	pop	{r3, r4, r5, pc}
 801017c:	20003e8c 	.word	0x20003e8c

08010180 <_malloc_usable_size_r>:
 8010180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010184:	1f18      	subs	r0, r3, #4
 8010186:	2b00      	cmp	r3, #0
 8010188:	bfbc      	itt	lt
 801018a:	580b      	ldrlt	r3, [r1, r0]
 801018c:	18c0      	addlt	r0, r0, r3
 801018e:	4770      	bx	lr

08010190 <_read_r>:
 8010190:	b538      	push	{r3, r4, r5, lr}
 8010192:	4d07      	ldr	r5, [pc, #28]	; (80101b0 <_read_r+0x20>)
 8010194:	4604      	mov	r4, r0
 8010196:	4608      	mov	r0, r1
 8010198:	4611      	mov	r1, r2
 801019a:	2200      	movs	r2, #0
 801019c:	602a      	str	r2, [r5, #0]
 801019e:	461a      	mov	r2, r3
 80101a0:	f7f2 fbb4 	bl	800290c <_read>
 80101a4:	1c43      	adds	r3, r0, #1
 80101a6:	d102      	bne.n	80101ae <_read_r+0x1e>
 80101a8:	682b      	ldr	r3, [r5, #0]
 80101aa:	b103      	cbz	r3, 80101ae <_read_r+0x1e>
 80101ac:	6023      	str	r3, [r4, #0]
 80101ae:	bd38      	pop	{r3, r4, r5, pc}
 80101b0:	20003e8c 	.word	0x20003e8c

080101b4 <_init>:
 80101b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101b6:	bf00      	nop
 80101b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ba:	bc08      	pop	{r3}
 80101bc:	469e      	mov	lr, r3
 80101be:	4770      	bx	lr

080101c0 <_fini>:
 80101c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c2:	bf00      	nop
 80101c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101c6:	bc08      	pop	{r3}
 80101c8:	469e      	mov	lr, r3
 80101ca:	4770      	bx	lr
