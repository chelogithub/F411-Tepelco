
F411-Tepelco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f438  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800f5d8  0800f5d8  0001f5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fccc  0800fccc  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fccc  0800fccc  0001fccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcd4  0800fcd4  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcd4  0800fcd4  0001fcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcd8  0800fcd8  0001fcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800fcdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003594  2000018c  0800fe68  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003720  0800fe68  00023720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014876  00000000  00000000  000201ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d57  00000000  00000000  00034a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  000377d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dea  00000000  00000000  000388f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018581  00000000  00000000  000396e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172b0  00000000  00000000  00051c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000936b0  00000000  00000000  00068f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005460  00000000  00000000  000fc5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00101a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000018c 	.word	0x2000018c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f5c0 	.word	0x0800f5c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000190 	.word	0x20000190
 80001dc:	0800f5c0 	.word	0x0800f5c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b09a      	sub	sp, #104	; 0x68
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=34;//ETH.SIPR[3]=6,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2222      	movs	r2, #34	; 0x22
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory
		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;//=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	//----------------------- ETHERNET W5100 Environment-------------------------//

	//----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f005 fcf1 	bl	80062b8 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008d6:	4943      	ldr	r1, [pc, #268]	; (80009e4 <main+0x350>)
 80008d8:	4843      	ldr	r0, [pc, #268]	; (80009e8 <main+0x354>)
 80008da:	f00d fe8b 	bl	800e5f4 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008de:	4943      	ldr	r1, [pc, #268]	; (80009ec <main+0x358>)
 80008e0:	4843      	ldr	r0, [pc, #268]	; (80009f0 <main+0x35c>)
 80008e2:	f00d fe87 	bl	800e5f4 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008e6:	4943      	ldr	r1, [pc, #268]	; (80009f4 <main+0x360>)
 80008e8:	4843      	ldr	r0, [pc, #268]	; (80009f8 <main+0x364>)
 80008ea:	f00d fe83 	bl	800e5f4 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008ee:	4943      	ldr	r1, [pc, #268]	; (80009fc <main+0x368>)
 80008f0:	4843      	ldr	r0, [pc, #268]	; (8000a00 <main+0x36c>)
 80008f2:	f00d fe7f 	bl	800e5f4 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008f6:	4943      	ldr	r1, [pc, #268]	; (8000a04 <main+0x370>)
 80008f8:	4843      	ldr	r0, [pc, #268]	; (8000a08 <main+0x374>)
 80008fa:	f00d fe7b 	bl	800e5f4 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80008fe:	4943      	ldr	r1, [pc, #268]	; (8000a0c <main+0x378>)
 8000900:	4843      	ldr	r0, [pc, #268]	; (8000a10 <main+0x37c>)
 8000902:	f00d fe77 	bl	800e5f4 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000906:	4943      	ldr	r1, [pc, #268]	; (8000a14 <main+0x380>)
 8000908:	4843      	ldr	r0, [pc, #268]	; (8000a18 <main+0x384>)
 800090a:	f00d fe73 	bl	800e5f4 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800090e:	4943      	ldr	r1, [pc, #268]	; (8000a1c <main+0x388>)
 8000910:	4843      	ldr	r0, [pc, #268]	; (8000a20 <main+0x38c>)
 8000912:	f00d fe6f 	bl	800e5f4 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <main+0x34c>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <main+0x34c>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000948:	2206      	movs	r2, #6
 800094a:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 8000950:	2201      	movs	r2, #1
 8000952:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000958:	2203      	movs	r2, #3
 800095a:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000978:	220a      	movs	r2, #10
 800097a:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000988:	2233      	movs	r2, #51	; 0x33
 800098a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000998:	2235      	movs	r2, #53	; 0x35
 800099a:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
		wf._DBG_EN=1;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50

	// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //

		spi_no_debug=1;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <main+0x390>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <main+0x348>)
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <main+0x394>)
 80009d0:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009d2:	4b02      	ldr	r3, [pc, #8]	; (80009dc <main+0x348>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d8:	4b00      	ldr	r3, [pc, #0]	; (80009dc <main+0x348>)
 80009da:	e027      	b.n	8000a2c <main+0x398>
 80009dc:	20001cc4 	.word	0x20001cc4
 80009e0:	200002d0 	.word	0x200002d0
 80009e4:	20000024 	.word	0x20000024
 80009e8:	200002d6 	.word	0x200002d6
 80009ec:	2000003c 	.word	0x2000003c
 80009f0:	200002f6 	.word	0x200002f6
 80009f4:	20000048 	.word	0x20000048
 80009f8:	20000306 	.word	0x20000306
 80009fc:	20000058 	.word	0x20000058
 8000a00:	20000316 	.word	0x20000316
 8000a04:	20000060 	.word	0x20000060
 8000a08:	2000031c 	.word	0x2000031c
 8000a0c:	20000070 	.word	0x20000070
 8000a10:	20000332 	.word	0x20000332
 8000a14:	20000080 	.word	0x20000080
 8000a18:	20000342 	.word	0x20000342
 8000a1c:	20000090 	.word	0x20000090
 8000a20:	2000032c 	.word	0x2000032c
 8000a24:	2000317c 	.word	0x2000317c
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	4a58      	ldr	r2, [pc, #352]	; (8000b90 <main+0x4fc>)
 8000a2e:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a30:	4858      	ldr	r0, [pc, #352]	; (8000b94 <main+0x500>)
 8000a32:	f00b f823 	bl	800ba7c <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a36:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <main+0x500>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a3c:	4856      	ldr	r0, [pc, #344]	; (8000b98 <main+0x504>)
 8000a3e:	f00b f81d 	bl	800ba7c <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a42:	4b55      	ldr	r3, [pc, #340]	; (8000b98 <main+0x504>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a48:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4852      	ldr	r0, [pc, #328]	; (8000b98 <main+0x504>)
 8000a50:	f00b f8b7 	bl	800bbc2 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f001 fdc8 	bl	80025e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 fa6a 	bl	8000f30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a5c:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <main+0x508>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <main+0x50c>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	099b      	lsrs	r3, r3, #6
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fdc9 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 fbcb 	bl	8001208 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a72:	f000 fac5 	bl	8001000 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a76:	f000 fb73 	bl	8001160 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a7a:	f000 fb9b 	bl	80011b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a7e:	f000 faf5 	bl	800106c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	4847      	ldr	r0, [pc, #284]	; (8000ba4 <main+0x510>)
 8000a88:	f002 fa82 	bl	8002f90 <HAL_GPIO_WritePin>
	ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a8c:	210e      	movs	r1, #14
 8000a8e:	4846      	ldr	r0, [pc, #280]	; (8000ba8 <main+0x514>)
 8000a90:	f000 fc3c 	bl	800130c <ITM0_Write>
	HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);		//Escucho el puerto serie
 8000a94:	2201      	movs	r2, #1
 8000a96:	4945      	ldr	r1, [pc, #276]	; (8000bac <main+0x518>)
 8000a98:	4845      	ldr	r0, [pc, #276]	; (8000bb0 <main+0x51c>)
 8000a9a:	f004 fba2 	bl	80051e2 <HAL_UART_Receive_IT>
	ESP8266_HW_Reset();		 						          	//Reseteo el modulo desde el pin de RESET
 8000a9e:	f001 fa59 	bl	8001f54 <ESP8266_HW_Reset>
	if (wf._DBG_EN==1)
 8000aa2:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <main+0x520>)
 8000aa4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d103      	bne.n	8000ab4 <main+0x420>
		{
		ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aac:	2113      	movs	r1, #19
 8000aae:	4842      	ldr	r0, [pc, #264]	; (8000bb8 <main+0x524>)
 8000ab0:	f000 fc2c 	bl	800130c <ITM0_Write>
		}
	if (WF_SER_DBG==1)
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <main+0x528>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d104      	bne.n	8000ac6 <main+0x432>
		{
		HAL_UART_Transmit_IT(&huart2, "\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000abc:	2213      	movs	r2, #19
 8000abe:	493e      	ldr	r1, [pc, #248]	; (8000bb8 <main+0x524>)
 8000ac0:	483f      	ldr	r0, [pc, #252]	; (8000bc0 <main+0x52c>)
 8000ac2:	f004 fb49 	bl	8005158 <HAL_UART_Transmit_IT>
		}
	if (ETH_DBG_EN == 1) ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ac6:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <main+0x530>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d103      	bne.n	8000ad6 <main+0x442>
 8000ace:	2112      	movs	r1, #18
 8000ad0:	483d      	ldr	r0, [pc, #244]	; (8000bc8 <main+0x534>)
 8000ad2:	f000 fc1b 	bl	800130c <ITM0_Write>

	ETH.operacion=SPI_WRITE;
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <main+0x538>)
 8000ad8:	22f0      	movs	r2, #240	; 0xf0
 8000ada:	729a      	strb	r2, [r3, #10]
	ETH.TX[1]= 0;
 8000adc:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <main+0x538>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	755a      	strb	r2, [r3, #21]
	ETH.TX[2]= 1;
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <main+0x538>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	759a      	strb	r2, [r3, #22]
	ETH.TX[3]= 192;
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <main+0x538>)
 8000aea:	22c0      	movs	r2, #192	; 0xc0
 8000aec:	75da      	strb	r2, [r3, #23]

	eth_init(&ETH);
 8000aee:	4837      	ldr	r0, [pc, #220]	; (8000bcc <main+0x538>)
 8000af0:	f00c fc90 	bl	800d414 <eth_init>

	eth_socket_init(&ETH,0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	4835      	ldr	r0, [pc, #212]	; (8000bcc <main+0x538>)
 8000af8:	f00c fce2 	bl	800d4c0 <eth_socket_init>

	SPI_ETH_READ_EN=1;
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <main+0x53c>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
	ETH.operacion=SPI_READ;
 8000b02:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <main+0x538>)
 8000b04:	220f      	movs	r2, #15
 8000b06:	729a      	strb	r2, [r3, #10]
	ETH.TX[1]= 0;
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <main+0x538>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	755a      	strb	r2, [r3, #21]
	ETH.TX[2]= 1;
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <main+0x538>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	759a      	strb	r2, [r3, #22]
	ETH.TX[3]= 0;
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <main+0x538>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <main+0x51c>)
 8000b1c:	f001 fa42 	bl	8001fa4 <ESP8266_HW_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d115      	bne.n	8000b52 <main+0x4be>
     {
   	  ESP_HW_Init=1;
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <main+0x540>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN==1) ITM0_Write("\r\n ESP HW Init OK\r\n",19);
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <main+0x520>)
 8000b2e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d103      	bne.n	8000b3e <main+0x4aa>
 8000b36:	2113      	movs	r1, #19
 8000b38:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <main+0x544>)
 8000b3a:	f000 fbe7 	bl	800130c <ITM0_Write>
   	  if (WF_SER_DBG==1) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <main+0x528>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d15f      	bne.n	8000c06 <main+0x572>
 8000b46:	2213      	movs	r2, #19
 8000b48:	4923      	ldr	r1, [pc, #140]	; (8000bd8 <main+0x544>)
 8000b4a:	481d      	ldr	r0, [pc, #116]	; (8000bc0 <main+0x52c>)
 8000b4c:	f004 fb04 	bl	8005158 <HAL_UART_Transmit_IT>
 8000b50:	e059      	b.n	8000c06 <main+0x572>
     }
     else
     {
   	  ESP8266_HW_Reset(); 				//Si no logra resetear con el comando de AT+RESTORE, pruebo el resete desde hardware
 8000b52:	f001 f9ff 	bl	8001f54 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <main+0x51c>)
 8000b58:	f001 fa24 	bl	8001fa4 <ESP8266_HW_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d13c      	bne.n	8000bdc <main+0x548>
   	  {
   		  ESP_HW_Init=1;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <main+0x540>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN==1) ITM0_Write("\r\n ESP HW Init OK\r\n",19);
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <main+0x520>)
 8000b6a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d103      	bne.n	8000b7a <main+0x4e6>
 8000b72:	2113      	movs	r1, #19
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <main+0x544>)
 8000b76:	f000 fbc9 	bl	800130c <ITM0_Write>
   		  if (WF_SER_DBG==1) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <main+0x528>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d141      	bne.n	8000c06 <main+0x572>
 8000b82:	2213      	movs	r2, #19
 8000b84:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <main+0x544>)
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <main+0x52c>)
 8000b88:	f004 fae6 	bl	8005158 <HAL_UART_Transmit_IT>
 8000b8c:	e03b      	b.n	8000c06 <main+0x572>
 8000b8e:	bf00      	nop
 8000b90:	200001a8 	.word	0x200001a8
 8000b94:	20001024 	.word	0x20001024
 8000b98:	20001674 	.word	0x20001674
 8000b9c:	20000098 	.word	0x20000098
 8000ba0:	10624dd3 	.word	0x10624dd3
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	0800f5d8 	.word	0x0800f5d8
 8000bac:	2000358c 	.word	0x2000358c
 8000bb0:	20000248 	.word	0x20000248
 8000bb4:	200002d0 	.word	0x200002d0
 8000bb8:	0800f5e8 	.word	0x0800f5e8
 8000bbc:	200035c0 	.word	0x200035c0
 8000bc0:	2000028c 	.word	0x2000028c
 8000bc4:	20000094 	.word	0x20000094
 8000bc8:	0800f5fc 	.word	0x0800f5fc
 8000bcc:	20001cc4 	.word	0x20001cc4
 8000bd0:	20003187 	.word	0x20003187
 8000bd4:	2000317f 	.word	0x2000317f
 8000bd8:	0800f610 	.word	0x0800f610
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bdc:	4bad      	ldr	r3, [pc, #692]	; (8000e94 <main+0x800>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN==1)  ITM0_Write("\r\n ESP HW Init Fail\r\n",24);
 8000be2:	4bad      	ldr	r3, [pc, #692]	; (8000e98 <main+0x804>)
 8000be4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d103      	bne.n	8000bf4 <main+0x560>
 8000bec:	2118      	movs	r1, #24
 8000bee:	48ab      	ldr	r0, [pc, #684]	; (8000e9c <main+0x808>)
 8000bf0:	f000 fb8c 	bl	800130c <ITM0_Write>
   		  if (WF_SER_DBG==1) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bf4:	4baa      	ldr	r3, [pc, #680]	; (8000ea0 <main+0x80c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d104      	bne.n	8000c06 <main+0x572>
 8000bfc:	2215      	movs	r2, #21
 8000bfe:	49a7      	ldr	r1, [pc, #668]	; (8000e9c <main+0x808>)
 8000c00:	48a8      	ldr	r0, [pc, #672]	; (8000ea4 <main+0x810>)
 8000c02:	f004 faa9 	bl	8005158 <HAL_UART_Transmit_IT>
   	  }
     }

     HAL_Delay(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f001 fd5f 	bl	80026cc <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /**************[ INICIO PIDO ENVIAR DATOS ]**************/
	  	  if (ESP_HW_Init==1)
 8000c0e:	4ba1      	ldr	r3, [pc, #644]	; (8000e94 <main+0x800>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	f040 80a9 	bne.w	8000d6a <main+0x6d6>
	  		{
	  			//if((WF_SND_FLAG==1)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available)) HAL_UART_Transmit_IT(&huart2,"\r\nCOND OK\r\n",strlen("\r\nCOND OK\r\n"));
	  			//if((WF_SND_FLAG==1)&&(wf._estado_conexion<609)) HAL_UART_Transmit_IT(&huart2,"\r\nNO CONN STATE\r\n",strlen("\r\nNO CONN STATE\r\n"));
	  			//if((WF_SND_FLAG==1)&&(!ETH.S0_data_available)) HAL_UART_Transmit_IT(&huart2,"\r\nNO DATA RDY\r\n",strlen("\r\nNO DATA RDY\r\n"));
	  		}
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000c18:	4ba3      	ldr	r3, [pc, #652]	; (8000ea8 <main+0x814>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	f040 80a4 	bne.w	8000d6a <main+0x6d6>
 8000c22:	4b9d      	ldr	r3, [pc, #628]	; (8000e98 <main+0x804>)
 8000c24:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f040 809e 	bne.w	8000d6a <main+0x6d6>
 8000c2e:	4b9a      	ldr	r3, [pc, #616]	; (8000e98 <main+0x804>)
 8000c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c34:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c38:	f340 8097 	ble.w	8000d6a <main+0x6d6>
 8000c3c:	4b9b      	ldr	r3, [pc, #620]	; (8000eac <main+0x818>)
 8000c3e:	7c9b      	ldrb	r3, [r3, #18]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 8092 	beq.w	8000d6a <main+0x6d6>
	  			{	ETH.S0_data_available=0;
 8000c46:	4b99      	ldr	r3, [pc, #612]	; (8000eac <main+0x818>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c4c:	4b98      	ldr	r3, [pc, #608]	; (8000eb0 <main+0x81c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c52:	4b95      	ldr	r3, [pc, #596]	; (8000ea8 <main+0x814>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4896      	ldr	r0, [pc, #600]	; (8000eb4 <main+0x820>)
 8000c5c:	f00a ffdd 	bl	800bc1a <ModBUS_F03_Read>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4698      	mov	r8, r3
 8000c64:	2101      	movs	r1, #1
 8000c66:	4893      	ldr	r0, [pc, #588]	; (8000eb4 <main+0x820>)
 8000c68:	f00a ffd7 	bl	800bc1a <ModBUS_F03_Read>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461c      	mov	r4, r3
 8000c70:	2102      	movs	r1, #2
 8000c72:	4890      	ldr	r0, [pc, #576]	; (8000eb4 <main+0x820>)
 8000c74:	f00a ffd1 	bl	800bc1a <ModBUS_F03_Read>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	488d      	ldr	r0, [pc, #564]	; (8000eb4 <main+0x820>)
 8000c80:	f00a ffcb 	bl	800bc1a <ModBUS_F03_Read>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461e      	mov	r6, r3
 8000c88:	2104      	movs	r1, #4
 8000c8a:	488a      	ldr	r0, [pc, #552]	; (8000eb4 <main+0x820>)
 8000c8c:	f00a ffc5 	bl	800bc1a <ModBUS_F03_Read>
 8000c90:	4603      	mov	r3, r0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	2105      	movs	r1, #5
 8000c96:	4887      	ldr	r0, [pc, #540]	; (8000eb4 <main+0x820>)
 8000c98:	f00a ffbf 	bl	800bc1a <ModBUS_F03_Read>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	2106      	movs	r1, #6
 8000ca2:	4884      	ldr	r0, [pc, #528]	; (8000eb4 <main+0x820>)
 8000ca4:	f00a ffb9 	bl	800bc1a <ModBUS_F03_Read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	2107      	movs	r1, #7
 8000cae:	4881      	ldr	r0, [pc, #516]	; (8000eb4 <main+0x820>)
 8000cb0:	f00a ffb3 	bl	800bc1a <ModBUS_F03_Read>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	2108      	movs	r1, #8
 8000cba:	487e      	ldr	r0, [pc, #504]	; (8000eb4 <main+0x820>)
 8000cbc:	f00a ffad 	bl	800bc1a <ModBUS_F03_Read>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	2109      	movs	r1, #9
 8000cc6:	487b      	ldr	r0, [pc, #492]	; (8000eb4 <main+0x820>)
 8000cc8:	f00a ffa7 	bl	800bc1a <ModBUS_F03_Read>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd4:	9312      	str	r3, [sp, #72]	; 0x48
 8000cd6:	4b78      	ldr	r3, [pc, #480]	; (8000eb8 <main+0x824>)
 8000cd8:	9311      	str	r3, [sp, #68]	; 0x44
 8000cda:	4b78      	ldr	r3, [pc, #480]	; (8000ebc <main+0x828>)
 8000cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8000cde:	2300      	movs	r3, #0
 8000ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	930d      	str	r3, [sp, #52]	; 0x34
 8000cea:	2300      	movs	r3, #0
 8000cec:	930c      	str	r3, [sp, #48]	; 0x30
 8000cee:	2300      	movs	r3, #0
 8000cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8000cfa:	9208      	str	r2, [sp, #32]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	9207      	str	r2, [sp, #28]
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	9206      	str	r2, [sp, #24]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	9205      	str	r2, [sp, #20]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	9204      	str	r2, [sp, #16]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	9303      	str	r3, [sp, #12]
 8000d10:	9602      	str	r6, [sp, #8]
 8000d12:	9501      	str	r5, [sp, #4]
 8000d14:	9400      	str	r4, [sp, #0]
 8000d16:	4643      	mov	r3, r8
 8000d18:	4a69      	ldr	r2, [pc, #420]	; (8000ec0 <main+0x82c>)
 8000d1a:	496a      	ldr	r1, [pc, #424]	; (8000ec4 <main+0x830>)
 8000d1c:	486a      	ldr	r0, [pc, #424]	; (8000ec8 <main+0x834>)
 8000d1e:	f00a fb23 	bl	800b368 <httpPOST>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <main+0x6d6>
	  								ModBUS_F03_Read(&mb_eth,7),
	  								ModBUS_F03_Read(&mb_eth,8),
									ModBUS_F03_Read(&mb_eth,9),
									0,0,0,0,0,0,TEPELCO,post, body, 512) )
	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d28:	4864      	ldr	r0, [pc, #400]	; (8000ebc <main+0x828>)
 8000d2a:	f7ff fa63 	bl	80001f4 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	2341      	movs	r3, #65	; 0x41
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	4960      	ldr	r1, [pc, #384]	; (8000ebc <main+0x828>)
 8000d3a:	4864      	ldr	r0, [pc, #400]	; (8000ecc <main+0x838>)
 8000d3c:	f00d f982 	bl	800e044 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d40:	485e      	ldr	r0, [pc, #376]	; (8000ebc <main+0x828>)
 8000d42:	f7ff fa57 	bl	80001f4 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <main+0x804>)
 8000d4c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d50:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <main+0x804>)
 8000d52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d807      	bhi.n	8000d6a <main+0x6d6>
	  							{
	  								EnviarDatos(&wf);
 8000d5a:	484f      	ldr	r0, [pc, #316]	; (8000e98 <main+0x804>)
 8000d5c:	f005 fa96 	bl	800628c <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d60:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <main+0x804>)
 8000d62:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1_WF==1)||(FLAG_TIMEOUT_WF==1))  //Si recibí datos o me fui por TimeOUT
 8000d6a:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <main+0x83c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d003      	beq.n	8000d7a <main+0x6e6>
 8000d72:	4b58      	ldr	r3, [pc, #352]	; (8000ed4 <main+0x840>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d163      	bne.n	8000e42 <main+0x7ae>
	  		{
	  			if(FLAG_UART1_WF==1)
 8000d7a:	4b55      	ldr	r3, [pc, #340]	; (8000ed0 <main+0x83c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10b      	bne.n	8000d9a <main+0x706>
	  				{
	  					CopiaVector(wf._uartRCVD,UART1_WF_RX_vect_hld,UART1_WF_RX_items,1,CMP_VECT);
 8000d82:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <main+0x844>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b55      	ldr	r3, [pc, #340]	; (8000edc <main+0x848>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4954      	ldr	r1, [pc, #336]	; (8000ee0 <main+0x84c>)
 8000d8e:	4855      	ldr	r0, [pc, #340]	; (8000ee4 <main+0x850>)
 8000d90:	f00d f958 	bl	800e044 <CopiaVector>
	  					FLAG_UART1_WF=0;
 8000d94:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <main+0x83c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
	  				}
	  			if(FLAG_TIMEOUT_WF==1)
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <main+0x840>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d102      	bne.n	8000da8 <main+0x714>
	  					{
	  						FLAG_TIMEOUT_WF=0;
 8000da2:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <main+0x840>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000da8:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <main+0x800>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d148      	bne.n	8000e42 <main+0x7ae>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART1_WF_RX_items;
 8000db0:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <main+0x844>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a38      	ldr	r2, [pc, #224]	; (8000e98 <main+0x804>)
 8000db6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART1_WF_RX_vect_hld,UART1_WF_RX_items,1,CMP_VECT);
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <main+0x844>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b47      	ldr	r3, [pc, #284]	; (8000edc <main+0x848>)
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4946      	ldr	r1, [pc, #280]	; (8000ee0 <main+0x84c>)
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <main+0x850>)
 8000dc8:	f00d f93c 	bl	800e044 <CopiaVector>
	  					dummy_int=AT_ESP8266_ND(&wf);
 8000dcc:	4832      	ldr	r0, [pc, #200]	; (8000e98 <main+0x804>)
 8000dce:	f005 fb43 	bl	8006458 <AT_ESP8266_ND>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a44      	ldr	r2, [pc, #272]	; (8000ee8 <main+0x854>)
 8000dd6:	6013      	str	r3, [r2, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <main+0x804>)
 8000dda:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d12f      	bne.n	8000e42 <main+0x7ae>
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <main+0x804>)
 8000de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000de8:	2b63      	cmp	r3, #99	; 0x63
 8000dea:	d12a      	bne.n	8000e42 <main+0x7ae>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <main+0x804>)
 8000dee:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000df2:	2341      	movs	r3, #65	; 0x41
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	493c      	ldr	r1, [pc, #240]	; (8000eec <main+0x858>)
 8000dfa:	483d      	ldr	r0, [pc, #244]	; (8000ef0 <main+0x85c>)
 8000dfc:	f00d f922 	bl	800e044 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e00:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <main+0x804>)
 8000e02:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e06:	4a3b      	ldr	r2, [pc, #236]	; (8000ef4 <main+0x860>)
 8000e08:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000e0c:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <main+0x860>)
 8000e0e:	f00a ff89 	bl	800bd24 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <main+0x860>)
 8000e14:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e18:	2341      	movs	r3, #65	; 0x41
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4936      	ldr	r1, [pc, #216]	; (8000ef8 <main+0x864>)
 8000e20:	482a      	ldr	r0, [pc, #168]	; (8000ecc <main+0x838>)
 8000e22:	f00d f90f 	bl	800e044 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <main+0x860>)
 8000e28:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <main+0x804>)
 8000e2e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <main+0x804>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <main+0x804>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <main+0x800>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <main+0x7c8>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	492b      	ldr	r1, [pc, #172]	; (8000efc <main+0x868>)
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <main+0x804>)
 8000e50:	f008 fdaa 	bl	80099a8 <WiFi_Conn_ND>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <main+0x86c>)
 8000e5a:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <main+0x870>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	f47f aed4 	bne.w	8000c0e <main+0x57a>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6c:	4826      	ldr	r0, [pc, #152]	; (8000f08 <main+0x874>)
 8000e6e:	f002 f88f 	bl	8002f90 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000e72:	2115      	movs	r1, #21
 8000e74:	4825      	ldr	r0, [pc, #148]	; (8000f0c <main+0x878>)
 8000e76:	f000 fa49 	bl	800130c <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000e7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7e:	f001 fc25 	bl	80026cc <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e88:	481f      	ldr	r0, [pc, #124]	; (8000f08 <main+0x874>)
 8000e8a:	f002 f881 	bl	8002f90 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000e8e:	2118      	movs	r1, #24
 8000e90:	e03e      	b.n	8000f10 <main+0x87c>
 8000e92:	bf00      	nop
 8000e94:	2000317f 	.word	0x2000317f
 8000e98:	200002d0 	.word	0x200002d0
 8000e9c:	0800f624 	.word	0x0800f624
 8000ea0:	200035c0 	.word	0x200035c0
 8000ea4:	2000028c 	.word	0x2000028c
 8000ea8:	20003186 	.word	0x20003186
 8000eac:	20001cc4 	.word	0x20001cc4
 8000eb0:	200035c4 	.word	0x200035c4
 8000eb4:	20001024 	.word	0x20001024
 8000eb8:	20002f2c 	.word	0x20002f2c
 8000ebc:	20002d2c 	.word	0x20002d2c
 8000ec0:	2000001c 	.word	0x2000001c
 8000ec4:	2000000c 	.word	0x2000000c
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000564 	.word	0x20000564
 8000ed0:	20003183 	.word	0x20003183
 8000ed4:	20003182 	.word	0x20003182
 8000ed8:	20003590 	.word	0x20003590
 8000edc:	20003588 	.word	0x20003588
 8000ee0:	20003388 	.word	0x20003388
 8000ee4:	20000964 	.word	0x20000964
 8000ee8:	200035a8 	.word	0x200035a8
 8000eec:	20000364 	.word	0x20000364
 8000ef0:	20001686 	.word	0x20001686
 8000ef4:	20001674 	.word	0x20001674
 8000ef8:	2000188c 	.word	0x2000188c
 8000efc:	20000248 	.word	0x20000248
 8000f00:	20003185 	.word	0x20003185
 8000f04:	20003184 	.word	0x20003184
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	0800f63c 	.word	0x0800f63c
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <main+0x894>)
 8000f12:	f000 f9fb 	bl	800130c <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000f16:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f1a:	f001 fbd7 	bl	80026cc <HAL_Delay>
	  				esp_restart=0;
 8000f1e:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <main+0x898>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000f24:	e673      	b.n	8000c0e <main+0x57a>
 8000f26:	bf00      	nop
 8000f28:	0800f654 	.word	0x0800f654
 8000f2c:	20003184 	.word	0x20003184

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00d fa6f 	bl	800e422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 f81f 	bl	8002ff8 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc0:	f001 f870 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2103      	movs	r1, #3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fa81 	bl	80034e8 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fec:	f001 f85a 	bl	80020a4 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	; 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_SPI1_Init+0x64>)
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <MX_SPI1_Init+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SPI1_Init+0x64>)
 800100c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_SPI1_Init+0x64>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_SPI1_Init+0x64>)
 8001034:	2210      	movs	r2, #16
 8001036:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_SPI1_Init+0x64>)
 800104c:	220a      	movs	r2, #10
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_SPI1_Init+0x64>)
 8001052:	f002 fc29 	bl	80038a8 <HAL_SPI_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800105c:	f001 f822 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200001a8 	.word	0x200001a8
 8001068:	40013000 	.word	0x40013000

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <MX_TIM2_Init+0xf0>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_TIM2_Init+0xf0>)
 80010a6:	2264      	movs	r2, #100	; 0x64
 80010a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <MX_TIM2_Init+0xf0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_TIM2_Init+0xf0>)
 80010b2:	2264      	movs	r2, #100	; 0x64
 80010b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <MX_TIM2_Init+0xf0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_TIM2_Init+0xf0>)
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c2:	4826      	ldr	r0, [pc, #152]	; (800115c <MX_TIM2_Init+0xf0>)
 80010c4:	f002 fee6 	bl	8003e94 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80010ce:	f000 ffe9 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	481f      	ldr	r0, [pc, #124]	; (800115c <MX_TIM2_Init+0xf0>)
 80010e0:	f003 faee 	bl	80046c0 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 ffdb 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80010ee:	481b      	ldr	r0, [pc, #108]	; (800115c <MX_TIM2_Init+0xf0>)
 80010f0:	f002 ff1f 	bl	8003f32 <HAL_TIM_OC_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 ffd3 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80010fe:	2108      	movs	r1, #8
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <MX_TIM2_Init+0xf0>)
 8001102:	f003 f91f 	bl	8004344 <HAL_TIM_OnePulse_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800110c:	f000 ffca 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4619      	mov	r1, r3
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <MX_TIM2_Init+0xf0>)
 8001120:	f003 fe8a 	bl	8004e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800112a:	f000 ffbb 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM2_Init+0xf0>)
 8001146:	f003 fa5f 	bl	8004608 <HAL_TIM_OC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001150:	f000 ffa8 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3738      	adds	r7, #56	; 0x38
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000200 	.word	0x20000200

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART1_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001198:	f003 fed0 	bl	8004f3c <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 ff7f 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000248 	.word	0x20000248
 80011b0:	40011000 	.word	0x40011000

080011b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART2_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ec:	f003 fea6 	bl	8004f3c <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 ff55 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000028c 	.word	0x2000028c
 8001204:	40004400 	.word	0x40004400

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a36      	ldr	r2, [pc, #216]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <MX_GPIO_Init+0xf8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_GPIO_Init+0xf8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <MX_GPIO_Init+0xf8>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	481b      	ldr	r0, [pc, #108]	; (8001304 <MX_GPIO_Init+0xfc>)
 8001296:	f001 fe7b 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	2110      	movs	r1, #16
 800129e:	481a      	ldr	r0, [pc, #104]	; (8001308 <MX_GPIO_Init+0x100>)
 80012a0:	f001 fe76 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80012a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_GPIO_Init+0xfc>)
 80012be:	f001 fbff 	bl	8002ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 80012c2:	f240 1301 	movw	r3, #257	; 0x101
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_GPIO_Init+0x100>)
 80012d8:	f001 fbf2 	bl	8002ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80012dc:	2310      	movs	r3, #16
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_GPIO_Init+0x100>)
 80012f4:	f001 fbe4 	bl	8002ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020800 	.word	0x40020800
 8001308:	40020000 	.word	0x40020000

0800130c <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e009      	b.n	8001330 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f98d 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf1      	blt.n	800131c <ITM0_Write+0x10>
  }
  return len;
 8001338:	683b      	ldr	r3, [r7, #0]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800134a:	4bbd      	ldr	r3, [pc, #756]	; (8001640 <SysTick_Handler+0x2fc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4abb      	ldr	r2, [pc, #748]	; (8001640 <SysTick_Handler+0x2fc>)
 8001352:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001354:	4bbb      	ldr	r3, [pc, #748]	; (8001644 <SysTick_Handler+0x300>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4aba      	ldr	r2, [pc, #744]	; (8001644 <SysTick_Handler+0x300>)
 800135c:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800135e:	4bba      	ldr	r3, [pc, #744]	; (8001648 <SysTick_Handler+0x304>)
 8001360:	7a1b      	ldrb	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <SysTick_Handler+0x2c>
 8001366:	4bb9      	ldr	r3, [pc, #740]	; (800164c <SysTick_Handler+0x308>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4ab7      	ldr	r2, [pc, #732]	; (800164c <SysTick_Handler+0x308>)
 800136e:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001370:	4bb5      	ldr	r3, [pc, #724]	; (8001648 <SysTick_Handler+0x304>)
 8001372:	7a1b      	ldrb	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00c      	beq.n	8001392 <SysTick_Handler+0x4e>
 8001378:	4bb3      	ldr	r3, [pc, #716]	; (8001648 <SysTick_Handler+0x304>)
 800137a:	88db      	ldrh	r3, [r3, #6]
 800137c:	461a      	mov	r2, r3
 800137e:	4bb3      	ldr	r3, [pc, #716]	; (800164c <SysTick_Handler+0x308>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	da05      	bge.n	8001392 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 8001386:	4bb0      	ldr	r3, [pc, #704]	; (8001648 <SysTick_Handler+0x304>)
 8001388:	2200      	movs	r2, #0
 800138a:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 800138c:	4baf      	ldr	r3, [pc, #700]	; (800164c <SysTick_Handler+0x308>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
		}


// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 8001392:	4baf      	ldr	r3, [pc, #700]	; (8001650 <SysTick_Handler+0x30c>)
 8001394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001398:	f240 2261 	movw	r2, #609	; 0x261
 800139c:	4293      	cmp	r3, r2
 800139e:	d005      	beq.n	80013ac <SysTick_Handler+0x68>
 80013a0:	4bab      	ldr	r3, [pc, #684]	; (8001650 <SysTick_Handler+0x30c>)
 80013a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80013aa:	d109      	bne.n	80013c0 <SysTick_Handler+0x7c>
 80013ac:	4ba8      	ldr	r3, [pc, #672]	; (8001650 <SysTick_Handler+0x30c>)
 80013ae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d104      	bne.n	80013c0 <SysTick_Handler+0x7c>
 80013b6:	4ba7      	ldr	r3, [pc, #668]	; (8001654 <SysTick_Handler+0x310>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4aa5      	ldr	r2, [pc, #660]	; (8001654 <SysTick_Handler+0x310>)
 80013be:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>=20000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;		//Envío de datos cada 20 segs
 80013c0:	4ba4      	ldr	r3, [pc, #656]	; (8001654 <SysTick_Handler+0x310>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013c8:	4293      	cmp	r3, r2
 80013ca:	dd0c      	ble.n	80013e6 <SysTick_Handler+0xa2>
 80013cc:	4ba0      	ldr	r3, [pc, #640]	; (8001650 <SysTick_Handler+0x30c>)
 80013ce:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d007      	beq.n	80013e6 <SysTick_Handler+0xa2>
 80013d6:	4b9e      	ldr	r3, [pc, #632]	; (8001650 <SysTick_Handler+0x30c>)
 80013d8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <SysTick_Handler+0xa2>
 80013e0:	4b9d      	ldr	r3, [pc, #628]	; (8001658 <SysTick_Handler+0x314>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 80013e6:	4b9d      	ldr	r3, [pc, #628]	; (800165c <SysTick_Handler+0x318>)
 80013e8:	7b9b      	ldrb	r3, [r3, #14]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10e      	bne.n	800140c <SysTick_Handler+0xc8>
	{
		ETH.ETH_WDG++;
 80013ee:	4b9b      	ldr	r3, [pc, #620]	; (800165c <SysTick_Handler+0x318>)
 80013f0:	899b      	ldrh	r3, [r3, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b99      	ldr	r3, [pc, #612]	; (800165c <SysTick_Handler+0x318>)
 80013f8:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000) ETH.ETH_WDG=64000;		//Si alcanza valor límite lo dejo en 64000
 80013fa:	4b98      	ldr	r3, [pc, #608]	; (800165c <SysTick_Handler+0x318>)
 80013fc:	899b      	ldrh	r3, [r3, #12]
 80013fe:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001402:	d303      	bcc.n	800140c <SysTick_Handler+0xc8>
 8001404:	4b95      	ldr	r3, [pc, #596]	; (800165c <SysTick_Handler+0x318>)
 8001406:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800140a:	819a      	strh	r2, [r3, #12]
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)
 800140c:	4b8c      	ldr	r3, [pc, #560]	; (8001640 <SysTick_Handler+0x2fc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	f040 8403 	bne.w	8001c1c <SysTick_Handler+0x8d8>
  {
	dbgn++;
 8001416:	4b92      	ldr	r3, [pc, #584]	; (8001660 <SysTick_Handler+0x31c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a90      	ldr	r2, [pc, #576]	; (8001660 <SysTick_Handler+0x31c>)
 800141e:	6013      	str	r3, [r2, #0]
	ms_ticks=0;
 8001420:	4b87      	ldr	r3, [pc, #540]	; (8001640 <SysTick_Handler+0x2fc>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
	min_ticks++;
 8001426:	4b8f      	ldr	r3, [pc, #572]	; (8001664 <SysTick_Handler+0x320>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a8d      	ldr	r2, [pc, #564]	; (8001664 <SysTick_Handler+0x320>)
 800142e:	6013      	str	r3, [r2, #0]

  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001430:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <SysTick_Handler+0x324>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001438:	d102      	bne.n	8001440 <SysTick_Handler+0xfc>
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <SysTick_Handler+0x324>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
  /*	if (asc==0)  MBUS_ticks++;
  	if (MBUS_ticks==100) asc=1;
  	if (asc==1) MBUS_ticks--;
  	if (MBUS_ticks==0) asc=0;*/

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	4889      	ldr	r0, [pc, #548]	; (800166c <SysTick_Handler+0x328>)
 8001446:	f001 fdbc 	bl	8002fc2 <HAL_GPIO_TogglePin>

	if(spi_no_debug)
 800144a:	4b89      	ldr	r3, [pc, #548]	; (8001670 <SysTick_Handler+0x32c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 83a5 	beq.w	8001b9e <SysTick_Handler+0x85a>
	  {
	  if(SPI_ETH_READ_EN)
 8001454:	4b87      	ldr	r3, [pc, #540]	; (8001674 <SysTick_Handler+0x330>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 83a4 	beq.w	8001ba6 <SysTick_Handler+0x862>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 800145e:	2100      	movs	r1, #0
 8001460:	487e      	ldr	r0, [pc, #504]	; (800165c <SysTick_Handler+0x318>)
 8001462:	f00c f885 	bl	800d570 <eth_rd_SOCKET_STAT>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b7c      	ldr	r3, [pc, #496]	; (800165c <SysTick_Handler+0x318>)
 800146c:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 800146e:	4b7b      	ldr	r3, [pc, #492]	; (800165c <SysTick_Handler+0x318>)
 8001470:	7b9b      	ldrb	r3, [r3, #14]
 8001472:	2b5f      	cmp	r3, #95	; 0x5f
 8001474:	f200 83cb 	bhi.w	8001c0e <SysTick_Handler+0x8ca>
 8001478:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <SysTick_Handler+0x13c>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	08001601 	.word	0x08001601
 8001484:	08001c0f 	.word	0x08001c0f
 8001488:	08001c0f 	.word	0x08001c0f
 800148c:	08001c0f 	.word	0x08001c0f
 8001490:	08001c0f 	.word	0x08001c0f
 8001494:	08001c0f 	.word	0x08001c0f
 8001498:	08001c0f 	.word	0x08001c0f
 800149c:	08001c0f 	.word	0x08001c0f
 80014a0:	08001c0f 	.word	0x08001c0f
 80014a4:	08001c0f 	.word	0x08001c0f
 80014a8:	08001c0f 	.word	0x08001c0f
 80014ac:	08001c0f 	.word	0x08001c0f
 80014b0:	08001c0f 	.word	0x08001c0f
 80014b4:	08001c0f 	.word	0x08001c0f
 80014b8:	08001c0f 	.word	0x08001c0f
 80014bc:	08001c0f 	.word	0x08001c0f
 80014c0:	08001c0f 	.word	0x08001c0f
 80014c4:	08001c0f 	.word	0x08001c0f
 80014c8:	08001c0f 	.word	0x08001c0f
 80014cc:	08001681 	.word	0x08001681
 80014d0:	080016d3 	.word	0x080016d3
 80014d4:	080016eb 	.word	0x080016eb
 80014d8:	08001703 	.word	0x08001703
 80014dc:	0800171b 	.word	0x0800171b
 80014e0:	08001a7b 	.word	0x08001a7b
 80014e4:	08001c0f 	.word	0x08001c0f
 80014e8:	08001a93 	.word	0x08001a93
 80014ec:	08001aab 	.word	0x08001aab
 80014f0:	08001ae9 	.word	0x08001ae9
 80014f4:	08001b27 	.word	0x08001b27
 80014f8:	08001c0f 	.word	0x08001c0f
 80014fc:	08001c0f 	.word	0x08001c0f
 8001500:	08001c0f 	.word	0x08001c0f
 8001504:	08001c0f 	.word	0x08001c0f
 8001508:	08001b3f 	.word	0x08001b3f
 800150c:	08001c0f 	.word	0x08001c0f
 8001510:	08001c0f 	.word	0x08001c0f
 8001514:	08001c0f 	.word	0x08001c0f
 8001518:	08001c0f 	.word	0x08001c0f
 800151c:	08001c0f 	.word	0x08001c0f
 8001520:	08001c0f 	.word	0x08001c0f
 8001524:	08001c0f 	.word	0x08001c0f
 8001528:	08001c0f 	.word	0x08001c0f
 800152c:	08001c0f 	.word	0x08001c0f
 8001530:	08001c0f 	.word	0x08001c0f
 8001534:	08001c0f 	.word	0x08001c0f
 8001538:	08001c0f 	.word	0x08001c0f
 800153c:	08001c0f 	.word	0x08001c0f
 8001540:	08001c0f 	.word	0x08001c0f
 8001544:	08001c0f 	.word	0x08001c0f
 8001548:	08001b57 	.word	0x08001b57
 800154c:	08001c0f 	.word	0x08001c0f
 8001550:	08001c0f 	.word	0x08001c0f
 8001554:	08001c0f 	.word	0x08001c0f
 8001558:	08001c0f 	.word	0x08001c0f
 800155c:	08001c0f 	.word	0x08001c0f
 8001560:	08001c0f 	.word	0x08001c0f
 8001564:	08001c0f 	.word	0x08001c0f
 8001568:	08001c0f 	.word	0x08001c0f
 800156c:	08001c0f 	.word	0x08001c0f
 8001570:	08001c0f 	.word	0x08001c0f
 8001574:	08001c0f 	.word	0x08001c0f
 8001578:	08001c0f 	.word	0x08001c0f
 800157c:	08001c0f 	.word	0x08001c0f
 8001580:	08001c0f 	.word	0x08001c0f
 8001584:	08001c0f 	.word	0x08001c0f
 8001588:	08001b6f 	.word	0x08001b6f
 800158c:	08001c0f 	.word	0x08001c0f
 8001590:	08001c0f 	.word	0x08001c0f
 8001594:	08001c0f 	.word	0x08001c0f
 8001598:	08001c0f 	.word	0x08001c0f
 800159c:	08001c0f 	.word	0x08001c0f
 80015a0:	08001c0f 	.word	0x08001c0f
 80015a4:	08001c0f 	.word	0x08001c0f
 80015a8:	08001c0f 	.word	0x08001c0f
 80015ac:	08001c0f 	.word	0x08001c0f
 80015b0:	08001c0f 	.word	0x08001c0f
 80015b4:	08001c0f 	.word	0x08001c0f
 80015b8:	08001c0f 	.word	0x08001c0f
 80015bc:	08001c0f 	.word	0x08001c0f
 80015c0:	08001c0f 	.word	0x08001c0f
 80015c4:	08001c0f 	.word	0x08001c0f
 80015c8:	08001c0f 	.word	0x08001c0f
 80015cc:	08001c0f 	.word	0x08001c0f
 80015d0:	08001c0f 	.word	0x08001c0f
 80015d4:	08001c0f 	.word	0x08001c0f
 80015d8:	08001c0f 	.word	0x08001c0f
 80015dc:	08001c0f 	.word	0x08001c0f
 80015e0:	08001c0f 	.word	0x08001c0f
 80015e4:	08001c0f 	.word	0x08001c0f
 80015e8:	08001c0f 	.word	0x08001c0f
 80015ec:	08001c0f 	.word	0x08001c0f
 80015f0:	08001c0f 	.word	0x08001c0f
 80015f4:	08001c0f 	.word	0x08001c0f
 80015f8:	08001c0f 	.word	0x08001c0f
 80015fc:	08001b87 	.word	0x08001b87
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));}
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <SysTick_Handler+0x334>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d103      	bne.n	8001610 <SysTick_Handler+0x2cc>
 8001608:	2113      	movs	r1, #19
 800160a:	481c      	ldr	r0, [pc, #112]	; (800167c <SysTick_Handler+0x338>)
 800160c:	f7ff fe7e 	bl	800130c <ITM0_Write>
					 eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001610:	2201      	movs	r2, #1
 8001612:	2100      	movs	r1, #0
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <SysTick_Handler+0x318>)
 8001616:	f00b fec1 	bl	800d39c <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <SysTick_Handler+0x318>)
 800161c:	899b      	ldrh	r3, [r3, #12]
 800161e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001622:	4293      	cmp	r3, r2
 8001624:	f240 82c1 	bls.w	8001baa <SysTick_Handler+0x866>
					 {
						 ETH.ETH_WDG=0;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <SysTick_Handler+0x318>)
 800162a:	2200      	movs	r2, #0
 800162c:	819a      	strh	r2, [r3, #12]
						 eth_init(&ETH);
 800162e:	480b      	ldr	r0, [pc, #44]	; (800165c <SysTick_Handler+0x318>)
 8001630:	f00b fef0 	bl	800d414 <eth_init>
						 eth_socket_init(&ETH,0);
 8001634:	2100      	movs	r1, #0
 8001636:	4809      	ldr	r0, [pc, #36]	; (800165c <SysTick_Handler+0x318>)
 8001638:	f00b ff42 	bl	800d4c0 <eth_socket_init>
					 }

				 }
			 break;
 800163c:	e2b5      	b.n	8001baa <SysTick_Handler+0x866>
 800163e:	bf00      	nop
 8001640:	2000312c 	.word	0x2000312c
 8001644:	20003594 	.word	0x20003594
 8001648:	20001024 	.word	0x20001024
 800164c:	2000359c 	.word	0x2000359c
 8001650:	200002d0 	.word	0x200002d0
 8001654:	200035c4 	.word	0x200035c4
 8001658:	20003186 	.word	0x20003186
 800165c:	20001cc4 	.word	0x20001cc4
 8001660:	200035c8 	.word	0x200035c8
 8001664:	20003130 	.word	0x20003130
 8001668:	20003598 	.word	0x20003598
 800166c:	40020800 	.word	0x40020800
 8001670:	2000317c 	.word	0x2000317c
 8001674:	20003187 	.word	0x20003187
 8001678:	20000094 	.word	0x20000094
 800167c:	0800f670 	.word	0x0800f670
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001680:	4baa      	ldr	r3, [pc, #680]	; (800192c <SysTick_Handler+0x5e8>)
 8001682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800168a:	2b01      	cmp	r3, #1
 800168c:	d110      	bne.n	80016b0 <SysTick_Handler+0x36c>
					 {
						 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));}
 800168e:	4ba8      	ldr	r3, [pc, #672]	; (8001930 <SysTick_Handler+0x5ec>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d103      	bne.n	800169e <SysTick_Handler+0x35a>
 8001696:	2111      	movs	r1, #17
 8001698:	48a6      	ldr	r0, [pc, #664]	; (8001934 <SysTick_Handler+0x5f0>)
 800169a:	f7ff fe37 	bl	800130c <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 800169e:	2202      	movs	r2, #2
 80016a0:	2100      	movs	r1, #0
 80016a2:	48a2      	ldr	r0, [pc, #648]	; (800192c <SysTick_Handler+0x5e8>)
 80016a4:	f00b fe7a 	bl	800d39c <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 80016a8:	4ba0      	ldr	r3, [pc, #640]	; (800192c <SysTick_Handler+0x5e8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	819a      	strh	r2, [r3, #12]
						 	}
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 80016ae:	e2ae      	b.n	8001c0e <SysTick_Handler+0x8ca>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 80016b0:	2204      	movs	r2, #4
 80016b2:	2100      	movs	r1, #0
 80016b4:	489d      	ldr	r0, [pc, #628]	; (800192c <SysTick_Handler+0x5e8>)
 80016b6:	f00b fe71 	bl	800d39c <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN == 1)
 80016ba:	4b9d      	ldr	r3, [pc, #628]	; (8001930 <SysTick_Handler+0x5ec>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d103      	bne.n	80016ca <SysTick_Handler+0x386>
						 		ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 80016c2:	2115      	movs	r1, #21
 80016c4:	489c      	ldr	r0, [pc, #624]	; (8001938 <SysTick_Handler+0x5f4>)
 80016c6:	f7ff fe21 	bl	800130c <ITM0_Write>
						 	ETH.ETH_WDG=0;
 80016ca:	4b98      	ldr	r3, [pc, #608]	; (800192c <SysTick_Handler+0x5e8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	819a      	strh	r2, [r3, #12]
			 break;
 80016d0:	e29d      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));}
 80016d2:	4b97      	ldr	r3, [pc, #604]	; (8001930 <SysTick_Handler+0x5ec>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d103      	bne.n	80016e2 <SysTick_Handler+0x39e>
 80016da:	2113      	movs	r1, #19
 80016dc:	4897      	ldr	r0, [pc, #604]	; (800193c <SysTick_Handler+0x5f8>)
 80016de:	f7ff fe15 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 80016e2:	4b92      	ldr	r3, [pc, #584]	; (800192c <SysTick_Handler+0x5e8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80016e8:	e291      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));}
 80016ea:	4b91      	ldr	r3, [pc, #580]	; (8001930 <SysTick_Handler+0x5ec>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d103      	bne.n	80016fa <SysTick_Handler+0x3b6>
 80016f2:	2114      	movs	r1, #20
 80016f4:	4892      	ldr	r0, [pc, #584]	; (8001940 <SysTick_Handler+0x5fc>)
 80016f6:	f7ff fe09 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 80016fa:	4b8c      	ldr	r3, [pc, #560]	; (800192c <SysTick_Handler+0x5e8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001700:	e285      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));}
 8001702:	4b8b      	ldr	r3, [pc, #556]	; (8001930 <SysTick_Handler+0x5ec>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d103      	bne.n	8001712 <SysTick_Handler+0x3ce>
 800170a:	2114      	movs	r1, #20
 800170c:	488d      	ldr	r0, [pc, #564]	; (8001944 <SysTick_Handler+0x600>)
 800170e:	f7ff fdfd 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001712:	4b86      	ldr	r3, [pc, #536]	; (800192c <SysTick_Handler+0x5e8>)
 8001714:	2200      	movs	r2, #0
 8001716:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001718:	e279      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));}
 800171a:	4b85      	ldr	r3, [pc, #532]	; (8001930 <SysTick_Handler+0x5ec>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d103      	bne.n	800172a <SysTick_Handler+0x3e6>
 8001722:	2118      	movs	r1, #24
 8001724:	4888      	ldr	r0, [pc, #544]	; (8001948 <SysTick_Handler+0x604>)
 8001726:	f7ff fdf1 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 800172a:	4b80      	ldr	r3, [pc, #512]	; (800192c <SysTick_Handler+0x5e8>)
 800172c:	2200      	movs	r2, #0
 800172e:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001730:	4b7e      	ldr	r3, [pc, #504]	; (800192c <SysTick_Handler+0x5e8>)
 8001732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800173a:	2b01      	cmp	r3, #1
 800173c:	f040 8089 	bne.w	8001852 <SysTick_Handler+0x50e>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001740:	2302      	movs	r3, #2
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <SysTick_Handler+0x608>)
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	230f      	movs	r3, #15
 800174a:	2226      	movs	r2, #38	; 0x26
 800174c:	2104      	movs	r1, #4
 800174e:	4877      	ldr	r0, [pc, #476]	; (800192c <SysTick_Handler+0x5e8>)
 8001750:	f00b fcf9 	bl	800d146 <SPI_ETH_REG>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b7d      	ldr	r3, [pc, #500]	; (8001950 <SysTick_Handler+0x60c>)
 800175a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 800175c:	4b7c      	ldr	r3, [pc, #496]	; (8001950 <SysTick_Handler+0x60c>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8253 	beq.w	8001c0c <SysTick_Handler+0x8c8>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001766:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <SysTick_Handler+0x60c>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	4a7a      	ldr	r2, [pc, #488]	; (8001954 <SysTick_Handler+0x610>)
 800176c:	2100      	movs	r1, #0
 800176e:	486f      	ldr	r0, [pc, #444]	; (800192c <SysTick_Handler+0x5e8>)
 8001770:	f00b ff38 	bl	800d5e4 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001774:	4b77      	ldr	r3, [pc, #476]	; (8001954 <SysTick_Handler+0x610>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 800177e:	486b      	ldr	r0, [pc, #428]	; (800192c <SysTick_Handler+0x5e8>)
 8001780:	f00b fd59 	bl	800d236 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001784:	2240      	movs	r2, #64	; 0x40
 8001786:	2100      	movs	r1, #0
 8001788:	4868      	ldr	r0, [pc, #416]	; (800192c <SysTick_Handler+0x5e8>)
 800178a:	f00b fe07 	bl	800d39c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 800178e:	bf00      	nop
 8001790:	2100      	movs	r1, #0
 8001792:	4866      	ldr	r0, [pc, #408]	; (800192c <SysTick_Handler+0x5e8>)
 8001794:	f00b ff09 	bl	800d5aa <eth_rd_SOCKET_CMD>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f8      	bne.n	8001790 <SysTick_Handler+0x44c>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 800179e:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <SysTick_Handler+0x60c>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	2300      	movs	r3, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2300      	movs	r3, #0
 80017aa:	496b      	ldr	r1, [pc, #428]	; (8001958 <SysTick_Handler+0x614>)
 80017ac:	486b      	ldr	r0, [pc, #428]	; (800195c <SysTick_Handler+0x618>)
 80017ae:	f00c fc49 	bl	800e044 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <SysTick_Handler+0x60c>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b69      	ldr	r3, [pc, #420]	; (8001960 <SysTick_Handler+0x61c>)
 80017ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 80017be:	4b64      	ldr	r3, [pc, #400]	; (8001950 <SysTick_Handler+0x60c>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <SysTick_Handler+0x488>
 80017c6:	4b59      	ldr	r3, [pc, #356]	; (800192c <SysTick_Handler+0x5e8>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 80017cc:	4b64      	ldr	r3, [pc, #400]	; (8001960 <SysTick_Handler+0x61c>)
 80017ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80017d2:	4619      	mov	r1, r3
 80017d4:	4861      	ldr	r0, [pc, #388]	; (800195c <SysTick_Handler+0x618>)
 80017d6:	f00a f9a5 	bl	800bb24 <ModBUS_Check>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00d      	beq.n	80017fc <SysTick_Handler+0x4b8>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 80017e0:	485f      	ldr	r0, [pc, #380]	; (8001960 <SysTick_Handler+0x61c>)
 80017e2:	f00a fa9f 	bl	800bd24 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 80017e6:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <SysTick_Handler+0x61c>)
 80017e8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80017ec:	2300      	movs	r3, #0
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2300      	movs	r3, #0
 80017f2:	495c      	ldr	r1, [pc, #368]	; (8001964 <SysTick_Handler+0x620>)
 80017f4:	4858      	ldr	r0, [pc, #352]	; (8001958 <SysTick_Handler+0x614>)
 80017f6:	f00c fc25 	bl	800e044 <CopiaVector>
 80017fa:	e007      	b.n	800180c <SysTick_Handler+0x4c8>
								}
								else
								{
									if (ETH_DBG_EN == 1) {ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));}
 80017fc:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <SysTick_Handler+0x5ec>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d103      	bne.n	800180c <SysTick_Handler+0x4c8>
 8001804:	2111      	movs	r1, #17
 8001806:	4858      	ldr	r0, [pc, #352]	; (8001968 <SysTick_Handler+0x624>)
 8001808:	f7ff fd80 	bl	800130c <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 800180c:	4b54      	ldr	r3, [pc, #336]	; (8001960 <SysTick_Handler+0x61c>)
 800180e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b55      	ldr	r3, [pc, #340]	; (800196c <SysTick_Handler+0x628>)
 8001816:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001818:	4b54      	ldr	r3, [pc, #336]	; (800196c <SysTick_Handler+0x628>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	4a54      	ldr	r2, [pc, #336]	; (8001970 <SysTick_Handler+0x62c>)
 800181e:	2100      	movs	r1, #0
 8001820:	4842      	ldr	r0, [pc, #264]	; (800192c <SysTick_Handler+0x5e8>)
 8001822:	f00b ffaf 	bl	800d784 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001826:	4b52      	ldr	r3, [pc, #328]	; (8001970 <SysTick_Handler+0x62c>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	f240 4124 	movw	r1, #1060	; 0x424
 8001830:	483e      	ldr	r0, [pc, #248]	; (800192c <SysTick_Handler+0x5e8>)
 8001832:	f00b fd00 	bl	800d236 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001836:	2220      	movs	r2, #32
 8001838:	2100      	movs	r1, #0
 800183a:	483c      	ldr	r0, [pc, #240]	; (800192c <SysTick_Handler+0x5e8>)
 800183c:	f00b fdae 	bl	800d39c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001840:	bf00      	nop
 8001842:	2100      	movs	r1, #0
 8001844:	4839      	ldr	r0, [pc, #228]	; (800192c <SysTick_Handler+0x5e8>)
 8001846:	f00b feb0 	bl	800d5aa <eth_rd_SOCKET_CMD>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f8      	bne.n	8001842 <SysTick_Handler+0x4fe>

							}
						}
					}
				 }
			 break;
 8001850:	e1dc      	b.n	8001c0c <SysTick_Handler+0x8c8>
						if (mb_eth._w_answer==0)
 8001852:	4b43      	ldr	r3, [pc, #268]	; (8001960 <SysTick_Handler+0x61c>)
 8001854:	7a1b      	ldrb	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 8090 	bne.w	800197c <SysTick_Handler+0x638>
							ETH.data[0]=0x00;
 800185c:	4b33      	ldr	r3, [pc, #204]	; (800192c <SysTick_Handler+0x5e8>)
 800185e:	2200      	movs	r2, #0
 8001860:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001862:	4b32      	ldr	r3, [pc, #200]	; (800192c <SysTick_Handler+0x5e8>)
 8001864:	2200      	movs	r2, #0
 8001866:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001868:	4b30      	ldr	r3, [pc, #192]	; (800192c <SysTick_Handler+0x5e8>)
 800186a:	2200      	movs	r2, #0
 800186c:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <SysTick_Handler+0x5e8>)
 8001870:	2200      	movs	r2, #0
 8001872:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <SysTick_Handler+0x5e8>)
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <SysTick_Handler+0x5e8>)
 800187e:	2206      	movs	r2, #6
 8001880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <SysTick_Handler+0x5e8>)
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <SysTick_Handler+0x5e8>)
 800188e:	2203      	movs	r2, #3
 8001890:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <SysTick_Handler+0x5e8>)
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <SysTick_Handler+0x5e8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <SysTick_Handler+0x5e8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <SysTick_Handler+0x5e8>)
 80018ae:	220a      	movs	r2, #10
 80018b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <SysTick_Handler+0x628>)
 80018b6:	220c      	movs	r2, #12
 80018b8:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 80018ba:	220f      	movs	r2, #15
 80018bc:	2100      	movs	r1, #0
 80018be:	4828      	ldr	r0, [pc, #160]	; (8001960 <SysTick_Handler+0x61c>)
 80018c0:	f00a f9d9 	bl	800bc76 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 80018c4:	2300      	movs	r3, #0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2300      	movs	r3, #0
 80018ca:	220c      	movs	r2, #12
 80018cc:	4925      	ldr	r1, [pc, #148]	; (8001964 <SysTick_Handler+0x620>)
 80018ce:	4822      	ldr	r0, [pc, #136]	; (8001958 <SysTick_Handler+0x614>)
 80018d0:	f00c fbb8 	bl	800e044 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <SysTick_Handler+0x628>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	4a25      	ldr	r2, [pc, #148]	; (8001970 <SysTick_Handler+0x62c>)
 80018da:	2100      	movs	r1, #0
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <SysTick_Handler+0x5e8>)
 80018de:	f00b ff51 	bl	800d784 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <SysTick_Handler+0x62c>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f240 4124 	movw	r1, #1060	; 0x424
 80018ec:	480f      	ldr	r0, [pc, #60]	; (800192c <SysTick_Handler+0x5e8>)
 80018ee:	f00b fca2 	bl	800d236 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 80018f2:	2220      	movs	r2, #32
 80018f4:	2100      	movs	r1, #0
 80018f6:	480d      	ldr	r0, [pc, #52]	; (800192c <SysTick_Handler+0x5e8>)
 80018f8:	f00b fd50 	bl	800d39c <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80018fc:	bf00      	nop
 80018fe:	2100      	movs	r1, #0
 8001900:	480a      	ldr	r0, [pc, #40]	; (800192c <SysTick_Handler+0x5e8>)
 8001902:	f00b fe52 	bl	800d5aa <eth_rd_SOCKET_CMD>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f8      	bne.n	80018fe <SysTick_Handler+0x5ba>
							mb_eth._w_answer=1;	// Waiting answer flag
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <SysTick_Handler+0x61c>)
 800190e:	2201      	movs	r2, #1
 8001910:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <SysTick_Handler+0x630>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN == 1) {ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));}
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Handler+0x5ec>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	f040 8175 	bne.w	8001c0c <SysTick_Handler+0x8c8>
 8001922:	2117      	movs	r1, #23
 8001924:	4814      	ldr	r0, [pc, #80]	; (8001978 <SysTick_Handler+0x634>)
 8001926:	f7ff fcf1 	bl	800130c <ITM0_Write>
			 break;
 800192a:	e16f      	b.n	8001c0c <SysTick_Handler+0x8c8>
 800192c:	20001cc4 	.word	0x20001cc4
 8001930:	20000094 	.word	0x20000094
 8001934:	0800f684 	.word	0x0800f684
 8001938:	0800f698 	.word	0x0800f698
 800193c:	0800f6b0 	.word	0x0800f6b0
 8001940:	0800f6c4 	.word	0x0800f6c4
 8001944:	0800f6dc 	.word	0x0800f6dc
 8001948:	0800f6f4 	.word	0x0800f6f4
 800194c:	2000313c 	.word	0x2000313c
 8001950:	20003134 	.word	0x20003134
 8001954:	20003138 	.word	0x20003138
 8001958:	20001ce0 	.word	0x20001ce0
 800195c:	20001036 	.word	0x20001036
 8001960:	20001024 	.word	0x20001024
 8001964:	2000123c 	.word	0x2000123c
 8001968:	0800f710 	.word	0x0800f710
 800196c:	2000313a 	.word	0x2000313a
 8001970:	20003136 	.word	0x20003136
 8001974:	2000359c 	.word	0x2000359c
 8001978:	0800f720 	.word	0x0800f720
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800197c:	2302      	movs	r3, #2
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <SysTick_Handler+0x86c>)
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	230f      	movs	r3, #15
 8001986:	2226      	movs	r2, #38	; 0x26
 8001988:	2104      	movs	r1, #4
 800198a:	488a      	ldr	r0, [pc, #552]	; (8001bb4 <SysTick_Handler+0x870>)
 800198c:	f00b fbdb 	bl	800d146 <SPI_ETH_REG>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b88      	ldr	r3, [pc, #544]	; (8001bb8 <SysTick_Handler+0x874>)
 8001996:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <SysTick_Handler+0x874>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 8135 	beq.w	8001c0c <SysTick_Handler+0x8c8>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80019a2:	4b85      	ldr	r3, [pc, #532]	; (8001bb8 <SysTick_Handler+0x874>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	4a85      	ldr	r2, [pc, #532]	; (8001bbc <SysTick_Handler+0x878>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	4882      	ldr	r0, [pc, #520]	; (8001bb4 <SysTick_Handler+0x870>)
 80019ac:	f00b fe1a 	bl	800d5e4 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 80019b0:	4b82      	ldr	r3, [pc, #520]	; (8001bbc <SysTick_Handler+0x878>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80019ba:	487e      	ldr	r0, [pc, #504]	; (8001bb4 <SysTick_Handler+0x870>)
 80019bc:	f00b fc3b 	bl	800d236 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 80019c0:	2240      	movs	r2, #64	; 0x40
 80019c2:	2100      	movs	r1, #0
 80019c4:	487b      	ldr	r0, [pc, #492]	; (8001bb4 <SysTick_Handler+0x870>)
 80019c6:	f00b fce9 	bl	800d39c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80019ca:	bf00      	nop
 80019cc:	2100      	movs	r1, #0
 80019ce:	4879      	ldr	r0, [pc, #484]	; (8001bb4 <SysTick_Handler+0x870>)
 80019d0:	f00b fdeb 	bl	800d5aa <eth_rd_SOCKET_CMD>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f8      	bne.n	80019cc <SysTick_Handler+0x688>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80019da:	4b77      	ldr	r3, [pc, #476]	; (8001bb8 <SysTick_Handler+0x874>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	4976      	ldr	r1, [pc, #472]	; (8001bc0 <SysTick_Handler+0x87c>)
 80019e8:	4876      	ldr	r0, [pc, #472]	; (8001bc4 <SysTick_Handler+0x880>)
 80019ea:	f00c fb2b 	bl	800e044 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80019ee:	4b72      	ldr	r3, [pc, #456]	; (8001bb8 <SysTick_Handler+0x874>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b74      	ldr	r3, [pc, #464]	; (8001bc8 <SysTick_Handler+0x884>)
 80019f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 80019fa:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <SysTick_Handler+0x874>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <SysTick_Handler+0x6c4>
 8001a02:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <SysTick_Handler+0x870>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a08:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <SysTick_Handler+0x884>)
 8001a0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001a0e:	4619      	mov	r1, r3
 8001a10:	486c      	ldr	r0, [pc, #432]	; (8001bc4 <SysTick_Handler+0x880>)
 8001a12:	f00a f887 	bl	800bb24 <ModBUS_Check>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d024      	beq.n	8001a66 <SysTick_Handler+0x722>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <SysTick_Handler+0x884>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001a22:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <SysTick_Handler+0x888>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a28:	4867      	ldr	r0, [pc, #412]	; (8001bc8 <SysTick_Handler+0x884>)
 8001a2a:	f00a f97b 	bl	800bd24 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001a2e:	4b66      	ldr	r3, [pc, #408]	; (8001bc8 <SysTick_Handler+0x884>)
 8001a30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a34:	2300      	movs	r3, #0
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	4962      	ldr	r1, [pc, #392]	; (8001bc4 <SysTick_Handler+0x880>)
 8001a3c:	4864      	ldr	r0, [pc, #400]	; (8001bd0 <SysTick_Handler+0x88c>)
 8001a3e:	f00c fb01 	bl	800e044 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001a42:	2300      	movs	r3, #0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2300      	movs	r3, #0
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	4962      	ldr	r1, [pc, #392]	; (8001bd4 <SysTick_Handler+0x890>)
 8001a4c:	4862      	ldr	r0, [pc, #392]	; (8001bd8 <SysTick_Handler+0x894>)
 8001a4e:	f00c faf9 	bl	800e044 <CopiaVector>
										if (ETH_DBG_EN == 1) {ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));}
 8001a52:	4b62      	ldr	r3, [pc, #392]	; (8001bdc <SysTick_Handler+0x898>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	f040 80d8 	bne.w	8001c0c <SysTick_Handler+0x8c8>
 8001a5c:	2117      	movs	r1, #23
 8001a5e:	4860      	ldr	r0, [pc, #384]	; (8001be0 <SysTick_Handler+0x89c>)
 8001a60:	f7ff fc54 	bl	800130c <ITM0_Write>
			 break;
 8001a64:	e0d2      	b.n	8001c0c <SysTick_Handler+0x8c8>
										if (ETH_DBG_EN == 1) {ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));}
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <SysTick_Handler+0x898>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	f040 80ce 	bne.w	8001c0c <SysTick_Handler+0x8c8>
 8001a70:	2111      	movs	r1, #17
 8001a72:	485c      	ldr	r0, [pc, #368]	; (8001be4 <SysTick_Handler+0x8a0>)
 8001a74:	f7ff fc4a 	bl	800130c <ITM0_Write>
			 break;
 8001a78:	e0c8      	b.n	8001c0c <SysTick_Handler+0x8c8>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));}
 8001a7a:	4b58      	ldr	r3, [pc, #352]	; (8001bdc <SysTick_Handler+0x898>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d103      	bne.n	8001a8a <SysTick_Handler+0x746>
 8001a82:	2115      	movs	r1, #21
 8001a84:	4858      	ldr	r0, [pc, #352]	; (8001be8 <SysTick_Handler+0x8a4>)
 8001a86:	f7ff fc41 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a8a:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <SysTick_Handler+0x870>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a90:	e0bd      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));}
 8001a92:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <SysTick_Handler+0x898>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d103      	bne.n	8001aa2 <SysTick_Handler+0x75e>
 8001a9a:	2114      	movs	r1, #20
 8001a9c:	4853      	ldr	r0, [pc, #332]	; (8001bec <SysTick_Handler+0x8a8>)
 8001a9e:	f7ff fc35 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001aa2:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <SysTick_Handler+0x870>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001aa8:	e0b1      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));}
 8001aaa:	4b4c      	ldr	r3, [pc, #304]	; (8001bdc <SysTick_Handler+0x898>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d103      	bne.n	8001aba <SysTick_Handler+0x776>
 8001ab2:	2116      	movs	r1, #22
 8001ab4:	484e      	ldr	r0, [pc, #312]	; (8001bf0 <SysTick_Handler+0x8ac>)
 8001ab6:	f7ff fc29 	bl	800130c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001aba:	2208      	movs	r2, #8
 8001abc:	2100      	movs	r1, #0
 8001abe:	483d      	ldr	r0, [pc, #244]	; (8001bb4 <SysTick_Handler+0x870>)
 8001ac0:	f00b fc6c 	bl	800d39c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ac4:	bf00      	nop
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <SysTick_Handler+0x86c>)
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	230f      	movs	r3, #15
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4837      	ldr	r0, [pc, #220]	; (8001bb4 <SysTick_Handler+0x870>)
 8001ad6:	f00b fb36 	bl	800d146 <SPI_ETH_REG>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f2      	bne.n	8001ac6 <SysTick_Handler+0x782>
					{}
					ETH.ETH_WDG=0;
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <SysTick_Handler+0x870>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ae6:	e092      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));}
 8001ae8:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <SysTick_Handler+0x898>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d103      	bne.n	8001af8 <SysTick_Handler+0x7b4>
 8001af0:	2117      	movs	r1, #23
 8001af2:	4840      	ldr	r0, [pc, #256]	; (8001bf4 <SysTick_Handler+0x8b0>)
 8001af4:	f7ff fc0a 	bl	800130c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001af8:	2208      	movs	r2, #8
 8001afa:	2100      	movs	r1, #0
 8001afc:	482d      	ldr	r0, [pc, #180]	; (8001bb4 <SysTick_Handler+0x870>)
 8001afe:	f00b fc4d 	bl	800d39c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001b02:	bf00      	nop
 8001b04:	2301      	movs	r3, #1
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <SysTick_Handler+0x86c>)
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2104      	movs	r1, #4
 8001b12:	4828      	ldr	r0, [pc, #160]	; (8001bb4 <SysTick_Handler+0x870>)
 8001b14:	f00b fb17 	bl	800d146 <SPI_ETH_REG>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f2      	bne.n	8001b04 <SysTick_Handler+0x7c0>
					{}
					ETH.ETH_WDG=0;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <SysTick_Handler+0x870>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b24:	e073      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN == 1)
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <SysTick_Handler+0x898>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d103      	bne.n	8001b36 <SysTick_Handler+0x7f2>
					 {
						 ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001b2e:	2115      	movs	r1, #21
 8001b30:	4831      	ldr	r0, [pc, #196]	; (8001bf8 <SysTick_Handler+0x8b4>)
 8001b32:	f7ff fbeb 	bl	800130c <ITM0_Write>
					 }
					 ETH.ETH_WDG=0;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <SysTick_Handler+0x870>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b3c:	e067      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN == 1){ ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));}
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <SysTick_Handler+0x898>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d103      	bne.n	8001b4e <SysTick_Handler+0x80a>
 8001b46:	2110      	movs	r1, #16
 8001b48:	482c      	ldr	r0, [pc, #176]	; (8001bfc <SysTick_Handler+0x8b8>)
 8001b4a:	f7ff fbdf 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <SysTick_Handler+0x870>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b54:	e05b      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));}
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <SysTick_Handler+0x898>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d103      	bne.n	8001b66 <SysTick_Handler+0x822>
 8001b5e:	2112      	movs	r1, #18
 8001b60:	4827      	ldr	r0, [pc, #156]	; (8001c00 <SysTick_Handler+0x8bc>)
 8001b62:	f7ff fbd3 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <SysTick_Handler+0x870>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b6c:	e04f      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));}
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <SysTick_Handler+0x898>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d103      	bne.n	8001b7e <SysTick_Handler+0x83a>
 8001b76:	2113      	movs	r1, #19
 8001b78:	4822      	ldr	r0, [pc, #136]	; (8001c04 <SysTick_Handler+0x8c0>)
 8001b7a:	f7ff fbc7 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <SysTick_Handler+0x870>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b84:	e043      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));}
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <SysTick_Handler+0x898>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d103      	bne.n	8001b96 <SysTick_Handler+0x852>
 8001b8e:	2111      	movs	r1, #17
 8001b90:	481d      	ldr	r0, [pc, #116]	; (8001c08 <SysTick_Handler+0x8c4>)
 8001b92:	f7ff fbbb 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <SysTick_Handler+0x870>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b9c:	e037      	b.n	8001c0e <SysTick_Handler+0x8ca>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <SysTick_Handler+0x870>)
 8001ba0:	f00b faaa 	bl	800d0f8 <SPI_ETH>
 8001ba4:	e033      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 default:
 8001ba6:	bf00      	nop
 8001ba8:	e031      	b.n	8001c0e <SysTick_Handler+0x8ca>
			 break;
 8001baa:	bf00      	nop
 8001bac:	e02f      	b.n	8001c0e <SysTick_Handler+0x8ca>
 8001bae:	bf00      	nop
 8001bb0:	2000313c 	.word	0x2000313c
 8001bb4:	20001cc4 	.word	0x20001cc4
 8001bb8:	20003134 	.word	0x20003134
 8001bbc:	20003138 	.word	0x20003138
 8001bc0:	20001ce0 	.word	0x20001ce0
 8001bc4:	20001036 	.word	0x20001036
 8001bc8:	20001024 	.word	0x20001024
 8001bcc:	2000359c 	.word	0x2000359c
 8001bd0:	200024e0 	.word	0x200024e0
 8001bd4:	20001448 	.word	0x20001448
 8001bd8:	20001a98 	.word	0x20001a98
 8001bdc:	20000094 	.word	0x20000094
 8001be0:	0800f734 	.word	0x0800f734
 8001be4:	0800f710 	.word	0x0800f710
 8001be8:	0800f748 	.word	0x0800f748
 8001bec:	0800f760 	.word	0x0800f760
 8001bf0:	0800f778 	.word	0x0800f778
 8001bf4:	0800f790 	.word	0x0800f790
 8001bf8:	0800f7a8 	.word	0x0800f7a8
 8001bfc:	0800f7c0 	.word	0x0800f7c0
 8001c00:	0800f7d4 	.word	0x0800f7d4
 8001c04:	0800f7e8 	.word	0x0800f7e8
 8001c08:	0800f7fc 	.word	0x0800f7fc
			 break;
 8001c0c:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d102      	bne.n	8001c1c <SysTick_Handler+0x8d8>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001c1c:	4b49      	ldr	r3, [pc, #292]	; (8001d44 <SysTick_Handler+0xa00>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d104      	bne.n	8001c2e <SysTick_Handler+0x8ea>
 8001c24:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <SysTick_Handler+0xa04>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <SysTick_Handler+0xa04>)
 8001c2c:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001c2e:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <SysTick_Handler+0xa04>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	dd0f      	ble.n	8001c56 <SysTick_Handler+0x912>
	{
		USART1_ticks=0;
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <SysTick_Handler+0xa04>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <SysTick_Handler+0xa08>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <SysTick_Handler+0xa00>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001c48:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <SysTick_Handler+0xa0c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a41      	ldr	r2, [pc, #260]	; (8001d54 <SysTick_Handler+0xa10>)
 8001c4e:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <SysTick_Handler+0xa0c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c56:	f000 fd19 	bl	800268c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//Solo cuento cuando no estahaciendo otra cosa
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <SysTick_Handler+0xa14>)
 8001c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d105      	bne.n	8001c70 <SysTick_Handler+0x92c>
	{
		ticks++;
 8001c64:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <SysTick_Handler+0xa18>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a3c      	ldr	r2, [pc, #240]	; (8001d5c <SysTick_Handler+0xa18>)
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e002      	b.n	8001c76 <SysTick_Handler+0x932>
	}
	else
	{
		ticks=0;
 8001c70:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <SysTick_Handler+0xa18>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001c76:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <SysTick_Handler+0xa14>)
 8001c78:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d158      	bne.n	8001d32 <SysTick_Handler+0x9ee>
	{
		if (FLAG_TIMEOUT_WF!=1)
 8001c80:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <SysTick_Handler+0xa1c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d017      	beq.n	8001cb8 <SysTick_Handler+0x974>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001c88:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <SysTick_Handler+0xa14>)
 8001c8a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d006      	beq.n	8001ca0 <SysTick_Handler+0x95c>
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <SysTick_Handler+0xa14>)
 8001c94:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001c98:	3301      	adds	r3, #1
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <SysTick_Handler+0xa14>)
 8001c9c:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <SysTick_Handler+0xa14>)
 8001ca2:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d106      	bne.n	8001cb8 <SysTick_Handler+0x974>
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <SysTick_Handler+0xa14>)
 8001cac:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <SysTick_Handler+0xa14>)
 8001cb4:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <SysTick_Handler+0xa14>)
 8001cba:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d018      	beq.n	8001cf4 <SysTick_Handler+0x9b0>
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <SysTick_Handler+0xa14>)
 8001cc4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001cc8:	f241 527c 	movw	r2, #5500	; 0x157c
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	dd11      	ble.n	8001cf4 <SysTick_Handler+0x9b0>
		{
			FLAG_TIMEOUT_WF=1;
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <SysTick_Handler+0xa1c>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <SysTick_Handler+0xa20>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f242 020c 	movw	r2, #8204	; 0x200c
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d107      	bne.n	8001cf4 <SysTick_Handler+0x9b0>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4920      	ldr	r1, [pc, #128]	; (8001d68 <SysTick_Handler+0xa24>)
 8001ce8:	481e      	ldr	r0, [pc, #120]	; (8001d64 <SysTick_Handler+0xa20>)
 8001cea:	f003 fa7a 	bl	80051e2 <HAL_UART_Receive_IT>
				EN_UART1_WF_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <SysTick_Handler+0xa28>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
			}
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <SysTick_Handler+0xa14>)
 8001cf6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d11d      	bne.n	8001d3a <SysTick_Handler+0x9f6>
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <SysTick_Handler+0xa14>)
 8001d00:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001d04:	f245 0214 	movw	r2, #20500	; 0x5014
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	dd16      	ble.n	8001d3a <SysTick_Handler+0x9f6>
		{
			FLAG_TIMEOUT_WF=1;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <SysTick_Handler+0xa1c>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <SysTick_Handler+0xa20>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f242 020c 	movw	r2, #8204	; 0x200c
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10c      	bne.n	8001d3a <SysTick_Handler+0x9f6>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);
 8001d20:	2201      	movs	r2, #1
 8001d22:	4911      	ldr	r1, [pc, #68]	; (8001d68 <SysTick_Handler+0xa24>)
 8001d24:	480f      	ldr	r0, [pc, #60]	; (8001d64 <SysTick_Handler+0xa20>)
 8001d26:	f003 fa5c 	bl	80051e2 <HAL_UART_Receive_IT>
				EN_UART1_WF_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <SysTick_Handler+0xa28>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d30:	e003      	b.n	8001d3a <SysTick_Handler+0x9f6>
		wf._ticks=0;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <SysTick_Handler+0xa14>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20003130 	.word	0x20003130
 8001d44:	20003181 	.word	0x20003181
 8001d48:	200035b0 	.word	0x200035b0
 8001d4c:	200035b4 	.word	0x200035b4
 8001d50:	200035ac 	.word	0x200035ac
 8001d54:	200035b8 	.word	0x200035b8
 8001d58:	200002d0 	.word	0x200002d0
 8001d5c:	200035a0 	.word	0x200035a0
 8001d60:	20003182 	.word	0x20003182
 8001d64:	20000248 	.word	0x20000248
 8001d68:	2000358c 	.word	0x2000358c
 8001d6c:	20003180 	.word	0x20003180

08001d70 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_UART_ErrorCallback+0x98>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d11c      	bne.n	8001dbc <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]

			 wf._debug_count9++;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_UART_ErrorCallback+0x9c>)
 8001d8c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_UART_ErrorCallback+0x9c>)
 8001d94:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	613b      	str	r3, [r7, #16]

		 HAL_UART_DeInit(ERRUART);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f003 f914 	bl	8004fd6 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8001dae:	f7ff f9d7 	bl	8001160 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART1_WF_RX_byte,1);
 8001db2:	2201      	movs	r2, #1
 8001db4:	4916      	ldr	r1, [pc, #88]	; (8001e10 <HAL_UART_ErrorCallback+0xa0>)
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f003 fa13 	bl	80051e2 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_UART_ErrorCallback+0xa4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d11c      	bne.n	8001e00 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]

			 wf._debug_count9++;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_UART_ErrorCallback+0x9c>)
 8001dd0:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_UART_ErrorCallback+0x9c>)
 8001dd8:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60bb      	str	r3, [r7, #8]

		 HAL_UART_DeInit(ERRUART);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f003 f8f2 	bl	8004fd6 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8001df2:	f7ff f9df 	bl	80011b4 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART1_WF_RX_byte,1);
 8001df6:	2201      	movs	r2, #1
 8001df8:	4905      	ldr	r1, [pc, #20]	; (8001e10 <HAL_UART_ErrorCallback+0xa0>)
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f003 f9f1 	bl	80051e2 <HAL_UART_Receive_IT>
	}
}
 8001e00:	bf00      	nop
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40011000 	.word	0x40011000
 8001e0c:	200002d0 	.word	0x200002d0
 8001e10:	2000358c 	.word	0x2000358c
 8001e14:	40004400 	.word	0x40004400

08001e18 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <HAL_UART_RxCpltCallback+0x64>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d123      	bne.n	8001e72 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART1_WF_RX_vect[UART1_WF_RX_pos]=UART1_WF_RX_byte[0];
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_UART_RxCpltCallback+0x68>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_UART_RxCpltCallback+0x6c>)
 8001e30:	7811      	ldrb	r1, [r2, #0]
 8001e32:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <HAL_UART_RxCpltCallback+0x70>)
 8001e34:	54d1      	strb	r1, [r2, r3]
			UART1_WF_RX_pos++;
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_UART_RxCpltCallback+0x68>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_UART_RxCpltCallback+0x68>)
 8001e3e:	6013      	str	r3, [r2, #0]
			if(UART1_WF_RX_pos>=512) UART1_WF_RX_pos=512;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_UART_RxCpltCallback+0x68>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e48:	db03      	blt.n	8001e52 <HAL_UART_RxCpltCallback+0x3a>
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_UART_RxCpltCallback+0x68>)
 8001e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e50:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001e52:	2100      	movs	r1, #0
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <HAL_UART_RxCpltCallback+0x74>)
 8001e56:	f002 f8c5 	bl	8003fe4 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8001e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e5e:	2201      	movs	r2, #1
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_WF_TMR=1;	//Habilito Timeout de software
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_UART_RxCpltCallback+0x78>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART1_WF_RX_byte,1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4906      	ldr	r1, [pc, #24]	; (8001e84 <HAL_UART_RxCpltCallback+0x6c>)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f003 f9b8 	bl	80051e2 <HAL_UART_Receive_IT>
		 }
 }
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	200035bc 	.word	0x200035bc
 8001e84:	2000358c 	.word	0x2000358c
 8001e88:	20003188 	.word	0x20003188
 8001e8c:	20000200 	.word	0x20000200
 8001e90:	20003180 	.word	0x20003180

08001e94 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	6078      	str	r0, [r7, #4]
		if(TIMER->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d139      	bne.n	8001f1a <HAL_TIM_OC_DelayElapsedCallback+0x86>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f002 f999 	bl	80041e0 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1_WF=1;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
				 EN_UART1_WF_TMR=0;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
				 UART1_WF_RX_items=UART1_WF_RX_pos;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ec0:	6013      	str	r3, [r2, #0]
				 UART1_WF_RX_pos=0;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
				 UART1_WF_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART1_WF_RX_vect_hld,UART1_WF_RX_vect,UART1_WF_RX_items,1,CMP_VECT);
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	4916      	ldr	r1, [pc, #88]	; (8001f34 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001edc:	4817      	ldr	r0, [pc, #92]	; (8001f3c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001ede:	f00c f8b1 	bl	800e044 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001ee6:	4817      	ldr	r0, [pc, #92]	; (8001f44 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8001ee8:	f003 f97b 	bl	80051e2 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)ITM0_Write((uint8_t *)UART1_WF_RX_vect_hld,UART1_WF_RX_items);
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001eee:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	480f      	ldr	r0, [pc, #60]	; (8001f3c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001efe:	f7ff fa05 	bl	800130c <ITM0_Write>

				 if (WF_SER_DBG==1)HAL_UART_Transmit_IT(&huart2,(uint8_t *)UART1_WF_RX_vect_hld,UART1_WF_RX_items);
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_TIM_OC_DelayElapsedCallback+0x86>
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	490a      	ldr	r1, [pc, #40]	; (8001f3c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001f14:	480e      	ldr	r0, [pc, #56]	; (8001f50 <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8001f16:	f003 f91f 	bl	8005158 <HAL_UART_Transmit_IT>

		}
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20003183 	.word	0x20003183
 8001f28:	20003180 	.word	0x20003180
 8001f2c:	200035bc 	.word	0x200035bc
 8001f30:	20003590 	.word	0x20003590
 8001f34:	20003188 	.word	0x20003188
 8001f38:	20003588 	.word	0x20003588
 8001f3c:	20003388 	.word	0x20003388
 8001f40:	2000358c 	.word	0x2000358c
 8001f44:	20000248 	.word	0x20000248
 8001f48:	200002d0 	.word	0x200002d0
 8001f4c:	200035c0 	.word	0x200035c0
 8001f50:	2000028c 	.word	0x2000028c

08001f54 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <ESP8266_HW_Reset+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <ESP8266_HW_Reset+0x44>)
 8001f66:	f001 f813 	bl	8002f90 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8001f6a:	2115      	movs	r1, #21
 8001f6c:	480b      	ldr	r0, [pc, #44]	; (8001f9c <ESP8266_HW_Reset+0x48>)
 8001f6e:	f7ff f9cd 	bl	800130c <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 8001f72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f76:	f000 fba9 	bl	80026cc <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <ESP8266_HW_Reset+0x4c>)
 8001f7e:	f7ff f9c5 	bl	800130c <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <ESP8266_HW_Reset+0x44>)
 8001f8a:	f001 f801 	bl	8002f90 <HAL_GPIO_WritePin>
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000317d 	.word	0x2000317d
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	0800f63c 	.word	0x0800f63c
 8001fa0:	0800f810 	.word	0x0800f810

08001fa4 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af06      	add	r7, sp, #24
 8001faa:	6078      	str	r0, [r7, #4]
	do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",12,100);
 8001fac:	2364      	movs	r3, #100	; 0x64
 8001fae:	220c      	movs	r2, #12
 8001fb0:	492d      	ldr	r1, [pc, #180]	; (8002068 <ESP8266_HW_Init+0xc4>)
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f003 f83e 	bl	8005034 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8001fb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fbc:	f000 fb86 	bl	80026cc <HAL_Delay>
		  wf._n_fcomp=5;			//Cdad de elementos del vector a analizar
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <ESP8266_HW_Init+0xc8>)
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART1_WF_RX_items;
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <ESP8266_HW_Init+0xcc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <ESP8266_HW_Init+0xc8>)
 8001fce:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  while(FT_String_ND(UART1_WF_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001fd2:	e00e      	b.n	8001ff2 <ESP8266_HW_Init+0x4e>
		  {
			  wf._n_orig=UART1_WF_RX_items;
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <ESP8266_HW_Init+0xcc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a24      	ldr	r2, [pc, #144]	; (800206c <ESP8266_HW_Init+0xc8>)
 8001fda:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <ESP8266_HW_Init+0xd0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	dd03      	ble.n	8001ff2 <ESP8266_HW_Init+0x4e>
					 {
						 ESP_InitF=1;
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <ESP8266_HW_Init+0xd4>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
						 break;
 8001ff0:	e014      	b.n	800201c <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART1_WF_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <ESP8266_HW_Init+0xd8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	9205      	str	r2, [sp, #20]
 8001ff8:	9304      	str	r3, [sp, #16]
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <ESP8266_HW_Init+0xdc>)
 8001ffc:	9303      	str	r3, [sp, #12]
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <ESP8266_HW_Init+0xe0>)
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <ESP8266_HW_Init+0xe4>)
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <ESP8266_HW_Init+0xe8>)
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <ESP8266_HW_Init+0xec>)
 800200c:	4a21      	ldr	r2, [pc, #132]	; (8002094 <ESP8266_HW_Init+0xf0>)
 800200e:	4922      	ldr	r1, [pc, #136]	; (8002098 <ESP8266_HW_Init+0xf4>)
 8002010:	4822      	ldr	r0, [pc, #136]	; (800209c <ESP8266_HW_Init+0xf8>)
 8002012:	f00b fc9b 	bl	800d94c <FT_String_ND>
 8002016:	4603      	mov	r3, r0
 8002018:	2b01      	cmp	r3, #1
 800201a:	d1db      	bne.n	8001fd4 <ESP8266_HW_Init+0x30>
					 }
		  }

		  if (ESP_ticks<5000)
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <ESP8266_HW_Init+0xd0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f241 3287 	movw	r2, #4999	; 0x1387
 8002024:	4293      	cmp	r3, r2
 8002026:	dc06      	bgt.n	8002036 <ESP8266_HW_Init+0x92>
		  {
			  ESP_REinit=10;	//Condición de salida
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <ESP8266_HW_Init+0xfc>)
 800202a:	220a      	movs	r2, #10
 800202c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <ESP8266_HW_Init+0xd0>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e008      	b.n	8002048 <ESP8266_HW_Init+0xa4>
		  }
		  else
		  {
			  ESP_REinit++;		//Conteo de la cantidad de veces que se reinicia el ciclo
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <ESP8266_HW_Init+0xfc>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <ESP8266_HW_Init+0xfc>)
 8002040:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <ESP8266_HW_Init+0xd0>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
		  }

	 } while (ESP_REinit<=5);
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <ESP8266_HW_Init+0xfc>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d9ad      	bls.n	8001fac <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <ESP8266_HW_Init+0xfc>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b0a      	cmp	r3, #10
 8002056:	d101      	bne.n	800205c <ESP8266_HW_Init+0xb8>
	  {
		  return(1);
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <ESP8266_HW_Init+0xba>
	  }
	  else
	  {
		  return(0);
 800205c:	2300      	movs	r3, #0
	  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	0800f820 	.word	0x0800f820
 800206c:	200002d0 	.word	0x200002d0
 8002070:	20003590 	.word	0x20003590
 8002074:	20003594 	.word	0x20003594
 8002078:	2000317e 	.word	0x2000317e
 800207c:	20001018 	.word	0x20001018
 8002080:	20000d64 	.word	0x20000d64
 8002084:	200035a4 	.word	0x200035a4
 8002088:	20000fb0 	.word	0x20000fb0
 800208c:	20000b64 	.word	0x20000b64
 8002090:	20000fbc 	.word	0x20000fbc
 8002094:	0800f830 	.word	0x0800f830
 8002098:	20000fa8 	.word	0x20000fa8
 800209c:	20003388 	.word	0x20003388
 80020a0:	2000317d 	.word	0x2000317d

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>
	...

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_MspInit+0x4c>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <HAL_MspInit+0x4c>)
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_MspInit+0x4c>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a08      	ldr	r2, [pc, #32]	; (80020fc <HAL_MspInit+0x4c>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800

08002100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_SPI_MspInit+0x84>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12b      	bne.n	800217a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_SPI_MspInit+0x88>)
 800212c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800215a:	23e0      	movs	r3, #224	; 0xe0
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002166:	2303      	movs	r3, #3
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800216a:	2305      	movs	r3, #5
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_SPI_MspInit+0x8c>)
 8002176:	f000 fca3 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40013000 	.word	0x40013000
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000

08002190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a0:	d115      	bne.n	80021ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_TIM_Base_MspInit+0x48>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_TIM_Base_MspInit+0x48>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_TIM_Base_MspInit+0x48>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	201c      	movs	r0, #28
 80021c4:	f000 fba5 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021c8:	201c      	movs	r0, #28
 80021ca:	f000 fbbe 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <HAL_UART_MspInit+0x108>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d135      	bne.n	800226a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a38      	ldr	r2, [pc, #224]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 8002208:	f043 0310 	orr.w	r3, r3, #16
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_WF_TX_Pin|USART1_WF_RX_Pin;
 8002236:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002248:	2307      	movs	r3, #7
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4826      	ldr	r0, [pc, #152]	; (80022ec <HAL_UART_MspInit+0x110>)
 8002254:	f000 fc34 	bl	8002ac0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2025      	movs	r0, #37	; 0x25
 800225e:	f000 fb58 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002262:	2025      	movs	r0, #37	; 0x25
 8002264:	f000 fb71 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002268:	e038      	b.n	80022dc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_UART_MspInit+0x114>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d133      	bne.n	80022dc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 800227e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002282:	6413      	str	r3, [r2, #64]	; 0x40
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6313      	str	r3, [r2, #48]	; 0x30
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_UART_MspInit+0x10c>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_DBG_TX_Pin|USART2_DBG_RX_Pin;
 80022ac:	230c      	movs	r3, #12
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022bc:	2307      	movs	r3, #7
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	4619      	mov	r1, r3
 80022c6:	4809      	ldr	r0, [pc, #36]	; (80022ec <HAL_UART_MspInit+0x110>)
 80022c8:	f000 fbfa 	bl	8002ac0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2026      	movs	r0, #38	; 0x26
 80022d2:	f000 fb1e 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022d6:	2026      	movs	r0, #38	; 0x26
 80022d8:	f000 fb37 	bl	800294a <HAL_NVIC_EnableIRQ>
}
 80022dc:	bf00      	nop
 80022de:	3730      	adds	r7, #48	; 0x30
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40004400 	.word	0x40004400

080022f4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <HAL_UART_MspDeInit+0x5c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d10e      	bne.n	8002324 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_UART_MspDeInit+0x60>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_UART_MspDeInit+0x60>)
 800230c:	f023 0310 	bic.w	r3, r3, #16
 8002310:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_WF_TX_Pin|USART1_WF_RX_Pin);
 8002312:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002316:	4810      	ldr	r0, [pc, #64]	; (8002358 <HAL_UART_MspDeInit+0x64>)
 8002318:	f000 fd56 	bl	8002dc8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800231c:	2025      	movs	r0, #37	; 0x25
 800231e:	f000 fb22 	bl	8002966 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002322:	e011      	b.n	8002348 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_UART_MspDeInit+0x68>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10c      	bne.n	8002348 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_UART_MspDeInit+0x60>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_UART_MspDeInit+0x60>)
 8002334:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_DBG_TX_Pin|USART2_DBG_RX_Pin);
 800233a:	210c      	movs	r1, #12
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <HAL_UART_MspDeInit+0x64>)
 800233e:	f000 fd43 	bl	8002dc8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002342:	2026      	movs	r0, #38	; 0x26
 8002344:	f000 fb0f 	bl	8002966 <HAL_NVIC_DisableIRQ>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40011000 	.word	0x40011000
 8002354:	40023800 	.word	0x40023800
 8002358:	40020000 	.word	0x40020000
 800235c:	40004400 	.word	0x40004400

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <NMI_Handler+0x4>

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <TIM2_IRQHandler+0x10>)
 80023ae:	f002 f823 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000200 	.word	0x20000200

080023bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <USART1_IRQHandler+0x10>)
 80023c2:	f002 ff3f 	bl	8005244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000248 	.word	0x20000248

080023d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <USART2_IRQHandler+0x10>)
 80023d6:	f002 ff35 	bl	8005244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000028c 	.word	0x2000028c

080023e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	return 1;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_kill>:

int _kill(int pid, int sig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023fe:	f00c f8cd 	bl	800e59c <__errno>
 8002402:	4603      	mov	r3, r0
 8002404:	2216      	movs	r2, #22
 8002406:	601a      	str	r2, [r3, #0]
	return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_exit>:

void _exit (int status)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffe7 	bl	80023f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002426:	e7fe      	b.n	8002426 <_exit+0x12>

08002428 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e00a      	b.n	8002450 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800243a:	f3af 8000 	nop.w
 800243e:	4601      	mov	r1, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	60ba      	str	r2, [r7, #8]
 8002446:	b2ca      	uxtb	r2, r1
 8002448:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbf0      	blt.n	800243a <_read+0x12>
	}

return len;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e009      	b.n	8002488 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	60ba      	str	r2, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3301      	adds	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	dbf1      	blt.n	8002474 <_write+0x12>
	}
	return len;
 8002490:	687b      	ldr	r3, [r7, #4]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <_close>:

int _close(int file)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
	return -1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c2:	605a      	str	r2, [r3, #4]
	return 0;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_isatty>:

int _isatty(int file)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
	return 1;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
	return 0;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <_sbrk+0x5c>)
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <_sbrk+0x60>)
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <_sbrk+0x64>)
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <_sbrk+0x68>)
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d207      	bcs.n	8002544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002534:	f00c f832 	bl	800e59c <__errno>
 8002538:	4603      	mov	r3, r0
 800253a:	220c      	movs	r2, #12
 800253c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e009      	b.n	8002558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <_sbrk+0x64>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	4a05      	ldr	r2, [pc, #20]	; (8002568 <_sbrk+0x64>)
 8002554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20020000 	.word	0x20020000
 8002564:	00000400 	.word	0x00000400
 8002568:	200035cc 	.word	0x200035cc
 800256c:	20003720 	.word	0x20003720

08002570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <SystemInit+0x20>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <SystemInit+0x20>)
 800257c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800259a:	490e      	ldr	r1, [pc, #56]	; (80025d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800259c:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a0:	e002      	b.n	80025a8 <LoopCopyDataInit>

080025a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a6:	3304      	adds	r3, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ac:	d3f9      	bcc.n	80025a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ae:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025b0:	4c0b      	ldr	r4, [pc, #44]	; (80025e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b4:	e001      	b.n	80025ba <LoopFillZerobss>

080025b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b8:	3204      	adds	r2, #4

080025ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025bc:	d3fb      	bcc.n	80025b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025be:	f7ff ffd7 	bl	8002570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025c2:	f00b fff1 	bl	800e5a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c6:	f7fe f865 	bl	8000694 <main>
  bx  lr    
 80025ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d4:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80025d8:	0800fcdc 	.word	0x0800fcdc
  ldr r2, =_sbss
 80025dc:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80025e0:	20003720 	.word	0x20003720

080025e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC_IRQHandler>
	...

080025e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_Init+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <HAL_Init+0x40>)
 80025f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <HAL_Init+0x40>)
 80025fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002602:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_Init+0x40>)
 800260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002610:	2003      	movs	r0, #3
 8002612:	f000 f973 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002616:	200f      	movs	r0, #15
 8002618:	f000 f808 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800261c:	f7ff fd48 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023c00 	.word	0x40023c00

0800262c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x54>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x58>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002642:	fbb3 f3f1 	udiv	r3, r3, r1
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f999 	bl	8002982 <HAL_SYSTICK_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00e      	b.n	8002678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0f      	cmp	r3, #15
 800265e:	d80a      	bhi.n	8002676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002660:	2200      	movs	r2, #0
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f000 f953 	bl	8002912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_InitTick+0x5c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000098 	.word	0x20000098
 8002684:	200000a0 	.word	0x200000a0
 8002688:	2000009c 	.word	0x2000009c

0800268c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_IncTick+0x20>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_IncTick+0x24>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_IncTick+0x24>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	200000a0 	.word	0x200000a0
 80026b0:	200035d0 	.word	0x200035d0

080026b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_GetTick+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	200035d0 	.word	0x200035d0

080026cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff ffee 	bl	80026b4 <HAL_GetTick>
 80026d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d005      	beq.n	80026f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_Delay+0x44>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026f2:	bf00      	nop
 80026f4:	f7ff ffde 	bl	80026b4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	d8f7      	bhi.n	80026f4 <HAL_Delay+0x28>
  {
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200000a0 	.word	0x200000a0

08002714 <__NVIC_SetPriorityGrouping>:
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800273c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	; (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_GetPriorityGrouping>:
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_DisableIRQ>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	db12      	blt.n	80027ec <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	490a      	ldr	r1, [pc, #40]	; (80027f8 <__NVIC_DisableIRQ+0x44>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	3320      	adds	r3, #32
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027e0:	f3bf 8f4f 	dsb	sy
}
 80027e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027e6:	f3bf 8f6f 	isb	sy
}
 80027ea:	bf00      	nop
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff05 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff1a 	bl	800275c <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff0d 	bl	8002778 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff1d 	bl	80027b4 <__NVIC_DisableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff94 	bl	80028b8 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff fe84 	bl	80026b4 <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d008      	beq.n	80029cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e052      	b.n	8002a72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0216 	bic.w	r2, r2, #22
 80029da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <HAL_DMA_Abort+0x62>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0208 	bic.w	r2, r2, #8
 8002a0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1c:	e013      	b.n	8002a46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a1e:	f7ff fe49 	bl	80026b4 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d90c      	bls.n	8002a46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e015      	b.n	8002a72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1e4      	bne.n	8002a1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	223f      	movs	r2, #63	; 0x3f
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d004      	beq.n	8002a98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e00c      	b.n	8002ab2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2205      	movs	r2, #5
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e159      	b.n	8002d90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8148 	bne.w	8002d8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d005      	beq.n	8002b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d130      	bne.n	8002b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0201 	and.w	r2, r3, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d017      	beq.n	8002bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d123      	bne.n	8002c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	08da      	lsrs	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3208      	adds	r2, #8
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0203 	and.w	r2, r3, #3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a2 	beq.w	8002d8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b57      	ldr	r3, [pc, #348]	; (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a56      	ldr	r2, [pc, #344]	; (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b54      	ldr	r3, [pc, #336]	; (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c62:	4a52      	ldr	r2, [pc, #328]	; (8002dac <HAL_GPIO_Init+0x2ec>)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a49      	ldr	r2, [pc, #292]	; (8002db0 <HAL_GPIO_Init+0x2f0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d019      	beq.n	8002cc2 <HAL_GPIO_Init+0x202>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a48      	ldr	r2, [pc, #288]	; (8002db4 <HAL_GPIO_Init+0x2f4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x1fe>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a47      	ldr	r2, [pc, #284]	; (8002db8 <HAL_GPIO_Init+0x2f8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x1fa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a46      	ldr	r2, [pc, #280]	; (8002dbc <HAL_GPIO_Init+0x2fc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x1f6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a45      	ldr	r2, [pc, #276]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x1f2>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4935      	ldr	r1, [pc, #212]	; (8002dac <HAL_GPIO_Init+0x2ec>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d06:	4a2f      	ldr	r2, [pc, #188]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d84:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f aea2 	bls.w	8002adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e0bb      	b.n	8002f5c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de4:	2201      	movs	r2, #1
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	f040 80ab 	bne.w	8002f56 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e00:	4a5c      	ldr	r2, [pc, #368]	; (8002f74 <HAL_GPIO_DeInit+0x1ac>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a54      	ldr	r2, [pc, #336]	; (8002f78 <HAL_GPIO_DeInit+0x1b0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_GPIO_DeInit+0x96>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a53      	ldr	r2, [pc, #332]	; (8002f7c <HAL_GPIO_DeInit+0x1b4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_GPIO_DeInit+0x92>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_GPIO_DeInit+0x1b8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_GPIO_DeInit+0x8e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a51      	ldr	r2, [pc, #324]	; (8002f84 <HAL_GPIO_DeInit+0x1bc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_DeInit+0x8a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a50      	ldr	r2, [pc, #320]	; (8002f88 <HAL_GPIO_DeInit+0x1c0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_DeInit+0x86>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e008      	b.n	8002e60 <HAL_GPIO_DeInit+0x98>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e006      	b.n	8002e60 <HAL_GPIO_DeInit+0x98>
 8002e52:	2303      	movs	r3, #3
 8002e54:	e004      	b.n	8002e60 <HAL_GPIO_DeInit+0x98>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e002      	b.n	8002e60 <HAL_GPIO_DeInit+0x98>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_GPIO_DeInit+0x98>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	f002 0203 	and.w	r2, r2, #3
 8002e66:	0092      	lsls	r2, r2, #2
 8002e68:	4093      	lsls	r3, r2
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d132      	bne.n	8002ed6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e70:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <HAL_GPIO_DeInit+0x1c4>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	4944      	ldr	r1, [pc, #272]	; (8002f8c <HAL_GPIO_DeInit+0x1c4>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e7e:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_GPIO_DeInit+0x1c4>)
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	4941      	ldr	r1, [pc, #260]	; (8002f8c <HAL_GPIO_DeInit+0x1c4>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e8c:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <HAL_GPIO_DeInit+0x1c4>)
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	493d      	ldr	r1, [pc, #244]	; (8002f8c <HAL_GPIO_DeInit+0x1c4>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <HAL_GPIO_DeInit+0x1c4>)
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	493a      	ldr	r1, [pc, #232]	; (8002f8c <HAL_GPIO_DeInit+0x1c4>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002eb8:	4a2e      	ldr	r2, [pc, #184]	; (8002f74 <HAL_GPIO_DeInit+0x1ac>)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	482a      	ldr	r0, [pc, #168]	; (8002f74 <HAL_GPIO_DeInit+0x1ac>)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	400a      	ands	r2, r1
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2103      	movs	r1, #3
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	08da      	lsrs	r2, r3, #3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3208      	adds	r2, #8
 8002ef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	08d2      	lsrs	r2, r2, #3
 8002f0c:	4019      	ands	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3208      	adds	r2, #8
 8002f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2103      	movs	r1, #3
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	2101      	movs	r1, #1
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2103      	movs	r1, #3
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	401a      	ands	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	f67f af40 	bls.w	8002de4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40013800 	.word	0x40013800
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	40020800 	.word	0x40020800
 8002f84:	40020c00 	.word	0x40020c00
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40013c00 	.word	0x40013c00

08002f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa0:	787b      	ldrb	r3, [r7, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fac:	e003      	b.n	8002fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	041a      	lsls	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	619a      	str	r2, [r3, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	041a      	lsls	r2, r3, #16
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	43d9      	mvns	r1, r3
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	619a      	str	r2, [r3, #24]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e267      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d075      	beq.n	8003102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b04      	cmp	r3, #4
 8003020:	d00c      	beq.n	800303c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003022:	4b85      	ldr	r3, [pc, #532]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	2b08      	cmp	r3, #8
 800302c:	d112      	bne.n	8003054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302e:	4b82      	ldr	r3, [pc, #520]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800303a:	d10b      	bne.n	8003054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	4b7e      	ldr	r3, [pc, #504]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05b      	beq.n	8003100 <HAL_RCC_OscConfig+0x108>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d157      	bne.n	8003100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e242      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305c:	d106      	bne.n	800306c <HAL_RCC_OscConfig+0x74>
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a75      	ldr	r2, [pc, #468]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e01d      	b.n	80030a8 <HAL_RCC_OscConfig+0xb0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x98>
 8003076:	4b70      	ldr	r3, [pc, #448]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6f      	ldr	r2, [pc, #444]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 800307c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6c      	ldr	r2, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_OscConfig+0xb0>
 8003090:	4b69      	ldr	r3, [pc, #420]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a68      	ldr	r2, [pc, #416]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b66      	ldr	r3, [pc, #408]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a65      	ldr	r2, [pc, #404]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 80030a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7ff fb00 	bl	80026b4 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b8:	f7ff fafc 	bl	80026b4 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e207      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b5b      	ldr	r3, [pc, #364]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0xc0>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7ff faec 	bl	80026b4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e0:	f7ff fae8 	bl	80026b4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e1f3      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	4b51      	ldr	r3, [pc, #324]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0xe8>
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d063      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310e:	4b4a      	ldr	r3, [pc, #296]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	2b08      	cmp	r3, #8
 8003124:	d11c      	bne.n	8003160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003126:	4b44      	ldr	r3, [pc, #272]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_RCC_OscConfig+0x152>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e1c7      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4937      	ldr	r1, [pc, #220]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	e03a      	b.n	80031d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003168:	4b34      	ldr	r3, [pc, #208]	; (800323c <HAL_RCC_OscConfig+0x244>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7ff faa1 	bl	80026b4 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003176:	f7ff fa9d 	bl	80026b4 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e1a8      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4925      	ldr	r1, [pc, #148]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
 80031a8:	e015      	b.n	80031d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_OscConfig+0x244>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7ff fa80 	bl	80026b4 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b8:	f7ff fa7c 	bl	80026b4 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e187      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d036      	beq.n	8003250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_RCC_OscConfig+0x248>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7ff fa60 	bl	80026b4 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f8:	f7ff fa5c 	bl	80026b4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e167      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x240>)
 800320c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x200>
 8003216:	e01b      	b.n	8003250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_OscConfig+0x248>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7ff fa49 	bl	80026b4 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	e00e      	b.n	8003244 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003226:	f7ff fa45 	bl	80026b4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d907      	bls.n	8003244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e150      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
 8003238:	40023800 	.word	0x40023800
 800323c:	42470000 	.word	0x42470000
 8003240:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1ea      	bne.n	8003226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8097 	beq.w	800338c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003262:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	4b7d      	ldr	r3, [pc, #500]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a7c      	ldr	r2, [pc, #496]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b7a      	ldr	r3, [pc, #488]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b77      	ldr	r3, [pc, #476]	; (800346c <HAL_RCC_OscConfig+0x474>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329a:	4b74      	ldr	r3, [pc, #464]	; (800346c <HAL_RCC_OscConfig+0x474>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a73      	ldr	r2, [pc, #460]	; (800346c <HAL_RCC_OscConfig+0x474>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a6:	f7ff fa05 	bl	80026b4 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7ff fa01 	bl	80026b4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e10c      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	4b6a      	ldr	r3, [pc, #424]	; (800346c <HAL_RCC_OscConfig+0x474>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x2ea>
 80032d4:	4b64      	ldr	r3, [pc, #400]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a63      	ldr	r2, [pc, #396]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	e01c      	b.n	800331c <HAL_RCC_OscConfig+0x324>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x30c>
 80032ea:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	4a5e      	ldr	r2, [pc, #376]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70
 80032f6:	4b5c      	ldr	r3, [pc, #368]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a5b      	ldr	r2, [pc, #364]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
 8003302:	e00b      	b.n	800331c <HAL_RCC_OscConfig+0x324>
 8003304:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a57      	ldr	r2, [pc, #348]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	4b55      	ldr	r3, [pc, #340]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a54      	ldr	r2, [pc, #336]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003316:	f023 0304 	bic.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d015      	beq.n	8003350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7ff f9c6 	bl	80026b4 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332a:	e00a      	b.n	8003342 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7ff f9c2 	bl	80026b4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e0cb      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003342:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0ee      	beq.n	800332c <HAL_RCC_OscConfig+0x334>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003350:	f7ff f9b0 	bl	80026b4 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7ff f9ac 	bl	80026b4 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e0b5      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336e:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ee      	bne.n	8003358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003380:	4b39      	ldr	r3, [pc, #228]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	4a38      	ldr	r2, [pc, #224]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80a1 	beq.w	80034d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003396:	4b34      	ldr	r3, [pc, #208]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d05c      	beq.n	800345c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d141      	bne.n	800342e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_RCC_OscConfig+0x478>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7ff f980 	bl	80026b4 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b8:	f7ff f97c 	bl	80026b4 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e087      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	491b      	ldr	r1, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x478>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7ff f955 	bl	80026b4 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340e:	f7ff f951 	bl	80026b4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e05c      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x416>
 800342c:	e054      	b.n	80034d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_RCC_OscConfig+0x478>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7ff f93e 	bl	80026b4 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343c:	f7ff f93a 	bl	80026b4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e045      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_RCC_OscConfig+0x470>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x444>
 800345a:	e03d      	b.n	80034d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d107      	bne.n	8003474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e038      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
 8003468:	40023800 	.word	0x40023800
 800346c:	40007000 	.word	0x40007000
 8003470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003474:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_RCC_OscConfig+0x4ec>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d028      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d121      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d11a      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034a4:	4013      	ands	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d111      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	3b01      	subs	r3, #1
 80034be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800

080034e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0cc      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b68      	ldr	r3, [pc, #416]	; (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d90c      	bls.n	8003524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b65      	ldr	r3, [pc, #404]	; (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0b8      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800353c:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a58      	ldr	r2, [pc, #352]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003554:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4a52      	ldr	r2, [pc, #328]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800355e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b50      	ldr	r3, [pc, #320]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	494d      	ldr	r1, [pc, #308]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d044      	beq.n	8003608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d119      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d003      	beq.n	80035a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b3f      	ldr	r3, [pc, #252]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e06f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e067      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c6:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 0203 	bic.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4934      	ldr	r1, [pc, #208]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d8:	f7ff f86c 	bl	80026b4 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7ff f868 	bl	80026b4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e04f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 020c 	and.w	r2, r3, #12
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	429a      	cmp	r2, r3
 8003606:	d1eb      	bne.n	80035e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d20c      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e032      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363c:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4916      	ldr	r1, [pc, #88]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	490e      	ldr	r1, [pc, #56]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800366e:	f000 f821 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8003672:	4602      	mov	r2, r0
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	490a      	ldr	r1, [pc, #40]	; (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003680:	5ccb      	ldrb	r3, [r1, r3]
 8003682:	fa22 f303 	lsr.w	r3, r2, r3
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe ffcc 	bl	800262c <HAL_InitTick>

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023c00 	.word	0x40023c00
 80036a4:	40023800 	.word	0x40023800
 80036a8:	0800fad0 	.word	0x0800fad0
 80036ac:	20000098 	.word	0x20000098
 80036b0:	2000009c 	.word	0x2000009c

080036b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b8:	b090      	sub	sp, #64	; 0x40
 80036ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
 80036c0:	2300      	movs	r3, #0
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c4:	2300      	movs	r3, #0
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036cc:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d00d      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x40>
 80036d8:	2b08      	cmp	r3, #8
 80036da:	f200 80a1 	bhi.w	8003820 <HAL_RCC_GetSysClockFreq+0x16c>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x34>
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d003      	beq.n	80036ee <HAL_RCC_GetSysClockFreq+0x3a>
 80036e6:	e09b      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036ec:	e09b      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ee:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_GetSysClockFreq+0x188>)
 80036f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036f2:	e098      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f4:	4b4f      	ldr	r3, [pc, #316]	; (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fe:	4b4d      	ldr	r3, [pc, #308]	; (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d028      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370a:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	2200      	movs	r2, #0
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	627a      	str	r2, [r7, #36]	; 0x24
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800371c:	2100      	movs	r1, #0
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_GetSysClockFreq+0x188>)
 8003720:	fb03 f201 	mul.w	r2, r3, r1
 8003724:	2300      	movs	r3, #0
 8003726:	fb00 f303 	mul.w	r3, r0, r3
 800372a:	4413      	add	r3, r2
 800372c:	4a43      	ldr	r2, [pc, #268]	; (800383c <HAL_RCC_GetSysClockFreq+0x188>)
 800372e:	fba0 1202 	umull	r1, r2, r0, r2
 8003732:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003734:	460a      	mov	r2, r1
 8003736:	62ba      	str	r2, [r7, #40]	; 0x28
 8003738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373a:	4413      	add	r3, r2
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003740:	2200      	movs	r2, #0
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	61fa      	str	r2, [r7, #28]
 8003746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800374a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800374e:	f7fc fdaf 	bl	80002b0 <__aeabi_uldivmod>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4613      	mov	r3, r2
 8003758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800375a:	e053      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375c:	4b35      	ldr	r3, [pc, #212]	; (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	2200      	movs	r2, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	617a      	str	r2, [r7, #20]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800376e:	f04f 0b00 	mov.w	fp, #0
 8003772:	4652      	mov	r2, sl
 8003774:	465b      	mov	r3, fp
 8003776:	f04f 0000 	mov.w	r0, #0
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	0159      	lsls	r1, r3, #5
 8003780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003784:	0150      	lsls	r0, r2, #5
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	ebb2 080a 	subs.w	r8, r2, sl
 800378e:	eb63 090b 	sbc.w	r9, r3, fp
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800379e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037a6:	ebb2 0408 	subs.w	r4, r2, r8
 80037aa:	eb63 0509 	sbc.w	r5, r3, r9
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	00eb      	lsls	r3, r5, #3
 80037b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037bc:	00e2      	lsls	r2, r4, #3
 80037be:	4614      	mov	r4, r2
 80037c0:	461d      	mov	r5, r3
 80037c2:	eb14 030a 	adds.w	r3, r4, sl
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	eb45 030b 	adc.w	r3, r5, fp
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037da:	4629      	mov	r1, r5
 80037dc:	028b      	lsls	r3, r1, #10
 80037de:	4621      	mov	r1, r4
 80037e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e4:	4621      	mov	r1, r4
 80037e6:	028a      	lsls	r2, r1, #10
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ee:	2200      	movs	r2, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	60fa      	str	r2, [r7, #12]
 80037f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f8:	f7fc fd5a 	bl	80002b0 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	3301      	adds	r3, #1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800381e:	e002      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetSysClockFreq+0x184>)
 8003822:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003828:	4618      	mov	r0, r3
 800382a:	3740      	adds	r7, #64	; 0x40
 800382c:	46bd      	mov	sp, r7
 800382e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	00f42400 	.word	0x00f42400
 800383c:	017d7840 	.word	0x017d7840

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000098 	.word	0x20000098

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800385c:	f7ff fff0 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4903      	ldr	r1, [pc, #12]	; (800387c <HAL_RCC_GetPCLK1Freq+0x24>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	0800fae0 	.word	0x0800fae0

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003884:	f7ff ffdc 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	0800fae0 	.word	0x0800fae0

080038a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e07b      	b.n	80039b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ca:	d009      	beq.n	80038e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	61da      	str	r2, [r3, #28]
 80038d2:	e005      	b.n	80038e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fe fc00 	bl	8002100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003916:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	ea42 0103 	orr.w	r1, r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	f003 0104 	and.w	r1, r3, #4
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	f003 0210 	and.w	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b08c      	sub	sp, #48	; 0x30
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039c8:	2301      	movs	r3, #1
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x26>
 80039dc:	2302      	movs	r3, #2
 80039de:	e18a      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x33c>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039e8:	f7fe fe64 	bl	80026b4 <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039fe:	887b      	ldrh	r3, [r7, #2]
 8003a00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d00f      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x70>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a10:	d107      	bne.n	8003a22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_SPI_TransmitReceive+0x68>
 8003a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d003      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
 8003a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a28:	e15b      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x82>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x82>
 8003a36:	887b      	ldrh	r3, [r7, #2]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a42:	e14e      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d003      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2205      	movs	r2, #5
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	887a      	ldrh	r2, [r7, #2]
 8003a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	887a      	ldrh	r2, [r7, #2]
 8003a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	887a      	ldrh	r2, [r7, #2]
 8003a7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d007      	beq.n	8003aac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab4:	d178      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x10a>
 8003abe:	8b7b      	ldrh	r3, [r7, #26]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d166      	bne.n	8003b92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	881a      	ldrh	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	1c9a      	adds	r2, r3, #2
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ae8:	e053      	b.n	8003b92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d11b      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x176>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d016      	beq.n	8003b30 <HAL_SPI_TransmitReceive+0x176>
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d113      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d119      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x1b8>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d014      	beq.n	8003b72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	b292      	uxth	r2, r2
 8003b54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	1c9a      	adds	r2, r3, #2
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b72:	f7fe fd9f 	bl	80026b4 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d807      	bhi.n	8003b92 <HAL_SPI_TransmitReceive+0x1d8>
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d003      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b90:	e0a7      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1a6      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x130>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1a1      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x130>
 8003ba6:	e07c      	b.n	8003ca2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_SPI_TransmitReceive+0x1fc>
 8003bb0:	8b7b      	ldrh	r3, [r7, #26]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d16b      	bne.n	8003c8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bdc:	e057      	b.n	8003c8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d11c      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x26c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d017      	beq.n	8003c26 <HAL_SPI_TransmitReceive+0x26c>
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d114      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	7812      	ldrb	r2, [r2, #0]
 8003c08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d119      	bne.n	8003c68 <HAL_SPI_TransmitReceive+0x2ae>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d014      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c64:	2301      	movs	r3, #1
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c68:	f7fe fd24 	bl	80026b4 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d803      	bhi.n	8003c80 <HAL_SPI_TransmitReceive+0x2c6>
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d102      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x2cc>
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d103      	bne.n	8003c8e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c8c:	e029      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1a2      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x224>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d19d      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f8b2 	bl	8003e10 <SPI_EndRxTxTransaction>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cbe:	e010      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	e000      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ce0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3730      	adds	r7, #48	; 0x30
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d10:	f7fe fcd0 	bl	80026b4 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d20:	f7fe fcc8 	bl	80026b4 <HAL_GetTick>
 8003d24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d26:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	015b      	lsls	r3, r3, #5
 8003d2c:	0d1b      	lsrs	r3, r3, #20
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d36:	e054      	b.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d050      	beq.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d40:	f7fe fcb8 	bl	80026b4 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d902      	bls.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d13d      	bne.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6e:	d111      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d78:	d004      	beq.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d82:	d107      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9c:	d10f      	bne.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e017      	b.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4013      	ands	r3, r2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d19b      	bne.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000098 	.word	0x20000098

08003e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <SPI_EndRxTxTransaction+0x7c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <SPI_EndRxTxTransaction+0x80>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0d5b      	lsrs	r3, r3, #21
 8003e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3a:	d112      	bne.n	8003e62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2180      	movs	r1, #128	; 0x80
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff ff5a 	bl	8003d00 <SPI_WaitFlagStateUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e00f      	b.n	8003e82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d0f2      	beq.n	8003e62 <SPI_EndRxTxTransaction+0x52>
 8003e7c:	e000      	b.n	8003e80 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e7e:	bf00      	nop
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000098 	.word	0x20000098
 8003e90:	165e9f81 	.word	0x165e9f81

08003e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e041      	b.n	8003f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fe f968 	bl	8002190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 fce4 	bl	80048a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e041      	b.n	8003fc8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f839 	bl	8003fd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f000 fc95 	bl	80048a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_TIM_OC_Start_IT+0x28>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e022      	b.n	8004052 <HAL_TIM_OC_Start_IT+0x6e>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d109      	bne.n	8004026 <HAL_TIM_OC_Start_IT+0x42>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	bf14      	ite	ne
 800401e:	2301      	movne	r3, #1
 8004020:	2300      	moveq	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	e015      	b.n	8004052 <HAL_TIM_OC_Start_IT+0x6e>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d109      	bne.n	8004040 <HAL_TIM_OC_Start_IT+0x5c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e008      	b.n	8004052 <HAL_TIM_OC_Start_IT+0x6e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0b3      	b.n	80041c2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <HAL_TIM_OC_Start_IT+0x86>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004068:	e013      	b.n	8004092 <HAL_TIM_OC_Start_IT+0xae>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b04      	cmp	r3, #4
 800406e:	d104      	bne.n	800407a <HAL_TIM_OC_Start_IT+0x96>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004078:	e00b      	b.n	8004092 <HAL_TIM_OC_Start_IT+0xae>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d104      	bne.n	800408a <HAL_TIM_OC_Start_IT+0xa6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004088:	e003      	b.n	8004092 <HAL_TIM_OC_Start_IT+0xae>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b0c      	cmp	r3, #12
 8004096:	d841      	bhi.n	800411c <HAL_TIM_OC_Start_IT+0x138>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_TIM_OC_Start_IT+0xbc>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	0800411d 	.word	0x0800411d
 80040a8:	0800411d 	.word	0x0800411d
 80040ac:	0800411d 	.word	0x0800411d
 80040b0:	080040e7 	.word	0x080040e7
 80040b4:	0800411d 	.word	0x0800411d
 80040b8:	0800411d 	.word	0x0800411d
 80040bc:	0800411d 	.word	0x0800411d
 80040c0:	080040f9 	.word	0x080040f9
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	0800411d 	.word	0x0800411d
 80040d0:	0800410b 	.word	0x0800410b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0202 	orr.w	r2, r2, #2
 80040e2:	60da      	str	r2, [r3, #12]
      break;
 80040e4:	e01d      	b.n	8004122 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0204 	orr.w	r2, r2, #4
 80040f4:	60da      	str	r2, [r3, #12]
      break;
 80040f6:	e014      	b.n	8004122 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0208 	orr.w	r2, r2, #8
 8004106:	60da      	str	r2, [r3, #12]
      break;
 8004108:	e00b      	b.n	8004122 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0210 	orr.w	r2, r2, #16
 8004118:	60da      	str	r2, [r3, #12]
      break;
 800411a:	e002      	b.n	8004122 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	bf00      	nop
  }

  if (status == HAL_OK)
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d14b      	bne.n	80041c0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	6839      	ldr	r1, [r7, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fe5b 	bl	8004dec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a24      	ldr	r2, [pc, #144]	; (80041cc <HAL_TIM_OC_Start_IT+0x1e8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d107      	bne.n	8004150 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800414e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <HAL_TIM_OC_Start_IT+0x1e8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d018      	beq.n	800418c <HAL_TIM_OC_Start_IT+0x1a8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d013      	beq.n	800418c <HAL_TIM_OC_Start_IT+0x1a8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <HAL_TIM_OC_Start_IT+0x1ec>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_TIM_OC_Start_IT+0x1a8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_TIM_OC_Start_IT+0x1a8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <HAL_TIM_OC_Start_IT+0x1f4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIM_OC_Start_IT+0x1a8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a15      	ldr	r2, [pc, #84]	; (80041dc <HAL_TIM_OC_Start_IT+0x1f8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d111      	bne.n	80041b0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b06      	cmp	r3, #6
 800419c:	d010      	beq.n	80041c0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	e007      	b.n	80041c0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40014000 	.word	0x40014000

080041e0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d841      	bhi.n	8004278 <HAL_TIM_OC_Stop_IT+0x98>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_TIM_OC_Stop_IT+0x1c>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004231 	.word	0x08004231
 8004200:	08004279 	.word	0x08004279
 8004204:	08004279 	.word	0x08004279
 8004208:	08004279 	.word	0x08004279
 800420c:	08004243 	.word	0x08004243
 8004210:	08004279 	.word	0x08004279
 8004214:	08004279 	.word	0x08004279
 8004218:	08004279 	.word	0x08004279
 800421c:	08004255 	.word	0x08004255
 8004220:	08004279 	.word	0x08004279
 8004224:	08004279 	.word	0x08004279
 8004228:	08004279 	.word	0x08004279
 800422c:	08004267 	.word	0x08004267
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0202 	bic.w	r2, r2, #2
 800423e:	60da      	str	r2, [r3, #12]
      break;
 8004240:	e01d      	b.n	800427e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0204 	bic.w	r2, r2, #4
 8004250:	60da      	str	r2, [r3, #12]
      break;
 8004252:	e014      	b.n	800427e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0208 	bic.w	r2, r2, #8
 8004262:	60da      	str	r2, [r3, #12]
      break;
 8004264:	e00b      	b.n	800427e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0210 	bic.w	r2, r2, #16
 8004274:	60da      	str	r2, [r3, #12]
      break;
 8004276:	e002      	b.n	800427e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
      break;
 800427c:	bf00      	nop
  }

  if (status == HAL_OK)
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d157      	bne.n	8004334 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2200      	movs	r2, #0
 800428a:	6839      	ldr	r1, [r7, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fdad 	bl	8004dec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <HAL_TIM_OC_Stop_IT+0x160>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d117      	bne.n	80042cc <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10f      	bne.n	80042cc <HAL_TIM_OC_Stop_IT+0xec>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	f240 4344 	movw	r3, #1092	; 0x444
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_OC_Stop_IT+0xec>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a1a      	ldr	r2, [r3, #32]
 80042d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10f      	bne.n	80042fc <HAL_TIM_OC_Stop_IT+0x11c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	f240 4344 	movw	r3, #1092	; 0x444
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_TIM_OC_Stop_IT+0x11c>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <HAL_TIM_OC_Stop_IT+0x12c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430a:	e013      	b.n	8004334 <HAL_TIM_OC_Stop_IT+0x154>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b04      	cmp	r3, #4
 8004310:	d104      	bne.n	800431c <HAL_TIM_OC_Stop_IT+0x13c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800431a:	e00b      	b.n	8004334 <HAL_TIM_OC_Stop_IT+0x154>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b08      	cmp	r3, #8
 8004320:	d104      	bne.n	800432c <HAL_TIM_OC_Stop_IT+0x14c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800432a:	e003      	b.n	8004334 <HAL_TIM_OC_Stop_IT+0x154>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000

08004344 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e041      	b.n	80043dc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f839 	bl	80043e4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 fa8b 	bl	80048a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0208 	bic.w	r2, r2, #8
 8004398:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b02      	cmp	r3, #2
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0202 	mvn.w	r2, #2
 8004424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa11 	bl	8004862 <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd fd26 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fa14 	bl	8004876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b04      	cmp	r3, #4
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0204 	mvn.w	r2, #4
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f9e7 	bl	8004862 <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fd fcfc 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f9ea 	bl	8004876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0208 	mvn.w	r2, #8
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2204      	movs	r2, #4
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9bd 	bl	8004862 <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fd fcd2 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f9c0 	bl	8004876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b10      	cmp	r3, #16
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0210 	mvn.w	r2, #16
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2208      	movs	r2, #8
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f993 	bl	8004862 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fd fca8 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f996 	bl	8004876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d10e      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0201 	mvn.w	r2, #1
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f969 	bl	800484e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fcc0 	bl	8004f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d10e      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d107      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f95b 	bl	800488a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d10e      	bne.n	8004600 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0220 	mvn.w	r2, #32
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fc8a 	bl	8004f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004622:	2302      	movs	r3, #2
 8004624:	e048      	b.n	80046b8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b0c      	cmp	r3, #12
 8004632:	d839      	bhi.n	80046a8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	08004671 	.word	0x08004671
 8004640:	080046a9 	.word	0x080046a9
 8004644:	080046a9 	.word	0x080046a9
 8004648:	080046a9 	.word	0x080046a9
 800464c:	0800467f 	.word	0x0800467f
 8004650:	080046a9 	.word	0x080046a9
 8004654:	080046a9 	.word	0x080046a9
 8004658:	080046a9 	.word	0x080046a9
 800465c:	0800468d 	.word	0x0800468d
 8004660:	080046a9 	.word	0x080046a9
 8004664:	080046a9 	.word	0x080046a9
 8004668:	080046a9 	.word	0x080046a9
 800466c:	0800469b 	.word	0x0800469b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f992 	bl	80049a0 <TIM_OC1_SetConfig>
      break;
 800467c:	e017      	b.n	80046ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f9f1 	bl	8004a6c <TIM_OC2_SetConfig>
      break;
 800468a:	e010      	b.n	80046ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa56 	bl	8004b44 <TIM_OC3_SetConfig>
      break;
 8004698:	e009      	b.n	80046ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fab9 	bl	8004c18 <TIM_OC4_SetConfig>
      break;
 80046a6:	e002      	b.n	80046ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75fb      	strb	r3, [r7, #23]
      break;
 80046ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_TIM_ConfigClockSource+0x1c>
 80046d8:	2302      	movs	r3, #2
 80046da:	e0b4      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x186>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004714:	d03e      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xd4>
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471a:	f200 8087 	bhi.w	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004722:	f000 8086 	beq.w	8004832 <HAL_TIM_ConfigClockSource+0x172>
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472a:	d87f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b70      	cmp	r3, #112	; 0x70
 800472e:	d01a      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0xa6>
 8004730:	2b70      	cmp	r3, #112	; 0x70
 8004732:	d87b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b60      	cmp	r3, #96	; 0x60
 8004736:	d050      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x11a>
 8004738:	2b60      	cmp	r3, #96	; 0x60
 800473a:	d877      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b50      	cmp	r3, #80	; 0x50
 800473e:	d03c      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0xfa>
 8004740:	2b50      	cmp	r3, #80	; 0x50
 8004742:	d873      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d058      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x13a>
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d86f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b30      	cmp	r3, #48	; 0x30
 800474e:	d064      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004750:	2b30      	cmp	r3, #48	; 0x30
 8004752:	d86b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b20      	cmp	r3, #32
 8004756:	d060      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	2b20      	cmp	r3, #32
 800475a:	d867      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	2b10      	cmp	r3, #16
 8004762:	d05a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004764:	e062      	b.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6899      	ldr	r1, [r3, #8]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f000 fb19 	bl	8004dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	609a      	str	r2, [r3, #8]
      break;
 8004792:	e04f      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6899      	ldr	r1, [r3, #8]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f000 fb02 	bl	8004dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b6:	609a      	str	r2, [r3, #8]
      break;
 80047b8:	e03c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fa76 	bl	8004cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2150      	movs	r1, #80	; 0x50
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 facf 	bl	8004d76 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e02c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f000 fa95 	bl	8004d16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2160      	movs	r1, #96	; 0x60
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fabf 	bl	8004d76 <TIM_ITRx_SetConfig>
      break;
 80047f8:	e01c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	461a      	mov	r2, r3
 8004808:	f000 fa56 	bl	8004cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2140      	movs	r1, #64	; 0x40
 8004812:	4618      	mov	r0, r3
 8004814:	f000 faaf 	bl	8004d76 <TIM_ITRx_SetConfig>
      break;
 8004818:	e00c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f000 faa6 	bl	8004d76 <TIM_ITRx_SetConfig>
      break;
 800482a:	e003      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      break;
 8004830:	e000      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a34      	ldr	r2, [pc, #208]	; (8004984 <TIM_Base_SetConfig+0xe4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00f      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048be:	d00b      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a31      	ldr	r2, [pc, #196]	; (8004988 <TIM_Base_SetConfig+0xe8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a30      	ldr	r2, [pc, #192]	; (800498c <TIM_Base_SetConfig+0xec>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <TIM_Base_SetConfig+0xf0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d108      	bne.n	80048ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a25      	ldr	r2, [pc, #148]	; (8004984 <TIM_Base_SetConfig+0xe4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01b      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f8:	d017      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a22      	ldr	r2, [pc, #136]	; (8004988 <TIM_Base_SetConfig+0xe8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a21      	ldr	r2, [pc, #132]	; (800498c <TIM_Base_SetConfig+0xec>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00f      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a20      	ldr	r2, [pc, #128]	; (8004990 <TIM_Base_SetConfig+0xf0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00b      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <TIM_Base_SetConfig+0xf4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <TIM_Base_SetConfig+0xf8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <TIM_Base_SetConfig+0xfc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d108      	bne.n	800493c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a08      	ldr	r2, [pc, #32]	; (8004984 <TIM_Base_SetConfig+0xe4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d103      	bne.n	8004970 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	615a      	str	r2, [r3, #20]
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40010000 	.word	0x40010000
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800
 8004990:	40000c00 	.word	0x40000c00
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800

080049a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 0302 	bic.w	r3, r3, #2
 80049e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <TIM_OC1_SetConfig+0xc8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d10c      	bne.n	8004a16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f023 0308 	bic.w	r3, r3, #8
 8004a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f023 0304 	bic.w	r3, r3, #4
 8004a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <TIM_OC1_SetConfig+0xc8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d111      	bne.n	8004a42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40010000 	.word	0x40010000

08004a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0210 	bic.w	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0320 	bic.w	r3, r3, #32
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a1e      	ldr	r2, [pc, #120]	; (8004b40 <TIM_OC2_SetConfig+0xd4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10d      	bne.n	8004ae8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <TIM_OC2_SetConfig+0xd4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d113      	bne.n	8004b18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000

08004b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <TIM_OC3_SetConfig+0xd0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10d      	bne.n	8004bbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <TIM_OC3_SetConfig+0xd0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d113      	bne.n	8004bee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40010000 	.word	0x40010000

08004c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	031b      	lsls	r3, r3, #12
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <TIM_OC4_SetConfig+0x9c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d109      	bne.n	8004c8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40010000 	.word	0x40010000

08004cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f023 0201 	bic.w	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 030a 	bic.w	r3, r3, #10
 8004cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b087      	sub	sp, #28
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f023 0210 	bic.w	r2, r3, #16
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	031b      	lsls	r3, r3, #12
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f043 0307 	orr.w	r3, r3, #7
 8004d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	609a      	str	r2, [r3, #8]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	021a      	lsls	r2, r3, #8
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	609a      	str	r2, [r3, #8]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	2201      	movs	r2, #1
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1a      	ldr	r2, [r3, #32]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	401a      	ands	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	fa01 f303 	lsl.w	r3, r1, r3
 8004e24:	431a      	orrs	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e050      	b.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d018      	beq.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9c:	d013      	beq.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d009      	beq.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40014000 	.word	0x40014000

08004f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e03f      	b.n	8004fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fd f93a 	bl	80021dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2224      	movs	r2, #36	; 0x24
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fe49 	bl	8005c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e021      	b.n	800502c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	; 0x24
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fd f977 	bl	80022f4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4613      	mov	r3, r2
 8005042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b20      	cmp	r3, #32
 8005052:	d17c      	bne.n	800514e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Transmit+0x2c>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e075      	b.n	8005150 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_UART_Transmit+0x3e>
 800506e:	2302      	movs	r3, #2
 8005070:	e06e      	b.n	8005150 <HAL_UART_Transmit+0x11c>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2221      	movs	r2, #33	; 0x21
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005088:	f7fd fb14 	bl	80026b4 <HAL_GetTick>
 800508c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d108      	bne.n	80050b6 <HAL_UART_Transmit+0x82>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e003      	b.n	80050be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050c6:	e02a      	b.n	800511e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	2180      	movs	r1, #128	; 0x80
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fb5a 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e036      	b.n	8005150 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10b      	bne.n	8005100 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	3302      	adds	r3, #2
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	e007      	b.n	8005110 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	781a      	ldrb	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3301      	adds	r3, #1
 800510e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1cf      	bne.n	80050c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2200      	movs	r2, #0
 8005130:	2140      	movs	r1, #64	; 0x40
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 fb2a 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e006      	b.n	8005150 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	e000      	b.n	8005150 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800514e:	2302      	movs	r3, #2
  }
}
 8005150:	4618      	mov	r0, r3
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b20      	cmp	r3, #32
 8005170:	d130      	bne.n	80051d4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_UART_Transmit_IT+0x26>
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e029      	b.n	80051d6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_UART_Transmit_IT+0x38>
 800518c:	2302      	movs	r3, #2
 800518e:	e022      	b.n	80051d6 <HAL_UART_Transmit_IT+0x7e>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	88fa      	ldrh	r2, [r7, #6]
 80051a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	88fa      	ldrh	r2, [r7, #6]
 80051a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2221      	movs	r2, #33	; 0x21
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d11d      	bne.n	8005238 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_UART_Receive_IT+0x26>
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e016      	b.n	800523a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_UART_Receive_IT+0x38>
 8005216:	2302      	movs	r3, #2
 8005218:	e00f      	b.n	800523a <HAL_UART_Receive_IT+0x58>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	461a      	mov	r2, r3
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fb1a 	bl	8005868 <UART_Start_Receive_IT>
 8005234:	4603      	mov	r3, r0
 8005236:	e000      	b.n	800523a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005238:	2302      	movs	r3, #2
  }
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b0ba      	sub	sp, #232	; 0xe8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800526a:	2300      	movs	r3, #0
 800526c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <HAL_UART_IRQHandler+0x66>
 8005296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fbfd 	bl	8005aa2 <UART_Receive_IT>
      return;
 80052a8:	e256      	b.n	8005758 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80de 	beq.w	8005470 <HAL_UART_IRQHandler+0x22c>
 80052b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80d1 	beq.w	8005470 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <HAL_UART_IRQHandler+0xae>
 80052da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	f043 0201 	orr.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_UART_IRQHandler+0xd2>
 80052fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f043 0202 	orr.w	r2, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <HAL_UART_IRQHandler+0xf6>
 8005322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f043 0204 	orr.w	r2, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d011      	beq.n	800536a <HAL_UART_IRQHandler+0x126>
 8005346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0208 	orr.w	r2, r3, #8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 81ed 	beq.w	800574e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_UART_IRQHandler+0x14e>
 8005380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fb88 	bl	8005aa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <HAL_UART_IRQHandler+0x17a>
 80053b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d04f      	beq.n	800545e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa90 	bl	80058e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d141      	bne.n	8005456 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800540a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1d9      	bne.n	80053d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	2b00      	cmp	r3, #0
 8005424:	d013      	beq.n	800544e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	4a7d      	ldr	r2, [pc, #500]	; (8005620 <HAL_UART_IRQHandler+0x3dc>)
 800542c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	4618      	mov	r0, r3
 8005434:	f7fd fb21 	bl	8002a7a <HAL_DMA_Abort_IT>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	e00e      	b.n	800546c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc fc8e 	bl	8001d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	e00a      	b.n	800546c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fc fc8a 	bl	8001d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	e006      	b.n	800546c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fc fc86 	bl	8001d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800546a:	e170      	b.n	800574e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	bf00      	nop
    return;
 800546e:	e16e      	b.n	800574e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	2b01      	cmp	r3, #1
 8005476:	f040 814a 	bne.w	800570e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8143 	beq.w	800570e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 813c 	beq.w	800570e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	f040 80b4 	bne.w	8005624 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8140 	beq.w	8005752 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054da:	429a      	cmp	r2, r3
 80054dc:	f080 8139 	bcs.w	8005752 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f2:	f000 8088 	beq.w	8005606 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800550c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	330c      	adds	r3, #12
 800551e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005522:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800552e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800553a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1d9      	bne.n	80054f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3314      	adds	r3, #20
 8005548:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3314      	adds	r3, #20
 8005562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005566:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800556a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800556e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e1      	bne.n	8005542 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3314      	adds	r3, #20
 8005584:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800558e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3314      	adds	r3, #20
 800559e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e3      	bne.n	800557e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d6:	f023 0310 	bic.w	r3, r3, #16
 80055da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80055ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e3      	bne.n	80055c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	4618      	mov	r0, r3
 8005602:	f7fd f9ca 	bl	800299a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800560e:	b29b      	uxth	r3, r3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8ac 	bl	8005774 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800561c:	e099      	b.n	8005752 <HAL_UART_IRQHandler+0x50e>
 800561e:	bf00      	nop
 8005620:	080059ab 	.word	0x080059ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800562c:	b29b      	uxth	r3, r3
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 808b 	beq.w	8005756 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8086 	beq.w	8005756 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800566e:	647a      	str	r2, [r7, #68]	; 0x44
 8005670:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e3      	bne.n	800564a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	623b      	str	r3, [r7, #32]
   return(result);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056a6:	633a      	str	r2, [r7, #48]	; 0x30
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e3      	bne.n	8005682 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056ec:	61fa      	str	r2, [r7, #28]
 80056ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	617b      	str	r3, [r7, #20]
   return(result);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e3      	bne.n	80056c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f834 	bl	8005774 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800570c:	e023      	b.n	8005756 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_UART_IRQHandler+0x4ea>
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f953 	bl	80059d2 <UART_Transmit_IT>
    return;
 800572c:	e014      	b.n	8005758 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00e      	beq.n	8005758 <HAL_UART_IRQHandler+0x514>
 800573a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f993 	bl	8005a72 <UART_EndTransmit_IT>
    return;
 800574c:	e004      	b.n	8005758 <HAL_UART_IRQHandler+0x514>
    return;
 800574e:	bf00      	nop
 8005750:	e002      	b.n	8005758 <HAL_UART_IRQHandler+0x514>
      return;
 8005752:	bf00      	nop
 8005754:	e000      	b.n	8005758 <HAL_UART_IRQHandler+0x514>
      return;
 8005756:	bf00      	nop
  }
}
 8005758:	37e8      	adds	r7, #232	; 0xe8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop

08005760 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b090      	sub	sp, #64	; 0x40
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579c:	e050      	b.n	8005840 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d04c      	beq.n	8005840 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <UART_WaitOnFlagUntilTimeout+0x30>
 80057ac:	f7fc ff82 	bl	80026b4 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d241      	bcs.n	8005840 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057dc:	637a      	str	r2, [r7, #52]	; 0x34
 80057de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	63bb      	str	r3, [r7, #56]	; 0x38
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3314      	adds	r3, #20
 800580e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005810:	623a      	str	r2, [r7, #32]
 8005812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	6a3a      	ldr	r2, [r7, #32]
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	61bb      	str	r3, [r7, #24]
   return(result);
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e5      	bne.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e00f      	b.n	8005860 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	429a      	cmp	r2, r3
 800584e:	bf0c      	ite	eq
 8005850:	2301      	moveq	r3, #1
 8005852:	2300      	movne	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	429a      	cmp	r2, r3
 800585c:	d09f      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3740      	adds	r7, #64	; 0x40
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	88fa      	ldrh	r2, [r7, #6]
 8005886:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2222      	movs	r2, #34	; 0x22
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d007      	beq.n	80058b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0220 	orr.w	r2, r2, #32
 80058d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b095      	sub	sp, #84	; 0x54
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800590c:	643a      	str	r2, [r7, #64]	; 0x40
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e5      	bne.n	80058ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3314      	adds	r3, #20
 8005926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	64bb      	str	r3, [r7, #72]	; 0x48
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3314      	adds	r3, #20
 800593e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005940:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e5      	bne.n	8005920 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	2b01      	cmp	r3, #1
 800595a:	d119      	bne.n	8005990 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	60bb      	str	r3, [r7, #8]
   return(result);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0310 	bic.w	r3, r3, #16
 8005972:	647b      	str	r3, [r7, #68]	; 0x44
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800597c:	61ba      	str	r2, [r7, #24]
 800597e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6979      	ldr	r1, [r7, #20]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	613b      	str	r3, [r7, #16]
   return(result);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800599e:	bf00      	nop
 80059a0:	3754      	adds	r7, #84	; 0x54
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7fc f9d3 	bl	8001d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b21      	cmp	r3, #33	; 0x21
 80059e4:	d13e      	bne.n	8005a64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d114      	bne.n	8005a1a <UART_Transmit_IT+0x48>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d110      	bne.n	8005a1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	1c9a      	adds	r2, r3, #2
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	621a      	str	r2, [r3, #32]
 8005a18:	e008      	b.n	8005a2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	1c59      	adds	r1, r3, #1
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6211      	str	r1, [r2, #32]
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10f      	bne.n	8005a60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fe64 	bl	8005760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b08c      	sub	sp, #48	; 0x30
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b22      	cmp	r3, #34	; 0x22
 8005ab4:	f040 80ab 	bne.w	8005c0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac0:	d117      	bne.n	8005af2 <UART_Receive_IT+0x50>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	1c9a      	adds	r2, r3, #2
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
 8005af0:	e026      	b.n	8005b40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d007      	beq.n	8005b16 <UART_Receive_IT+0x74>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <UART_Receive_IT+0x82>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e008      	b.n	8005b36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d15a      	bne.n	8005c0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0220 	bic.w	r2, r2, #32
 8005b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d135      	bne.n	8005c00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f023 0310 	bic.w	r3, r3, #16
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bba:	623a      	str	r2, [r7, #32]
 8005bbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	69f9      	ldr	r1, [r7, #28]
 8005bc0:	6a3a      	ldr	r2, [r7, #32]
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e5      	bne.n	8005b9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b10      	cmp	r3, #16
 8005bda:	d10a      	bne.n	8005bf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff fdbb 	bl	8005774 <HAL_UARTEx_RxEventCallback>
 8005bfe:	e002      	b.n	8005c06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7fc f909 	bl	8001e18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e002      	b.n	8005c10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e000      	b.n	8005c10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c0e:	2302      	movs	r3, #2
  }
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3730      	adds	r7, #48	; 0x30
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c1c:	b0c0      	sub	sp, #256	; 0x100
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c34:	68d9      	ldr	r1, [r3, #12]
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	ea40 0301 	orr.w	r3, r0, r1
 8005c40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c70:	f021 010c 	bic.w	r1, r1, #12
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c92:	6999      	ldr	r1, [r3, #24]
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	ea40 0301 	orr.w	r3, r0, r1
 8005c9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b8f      	ldr	r3, [pc, #572]	; (8005ee4 <UART_SetConfig+0x2cc>)
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d005      	beq.n	8005cb8 <UART_SetConfig+0xa0>
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b8d      	ldr	r3, [pc, #564]	; (8005ee8 <UART_SetConfig+0x2d0>)
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d104      	bne.n	8005cc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cb8:	f7fd fde2 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8005cbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005cc0:	e003      	b.n	8005cca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cc2:	f7fd fdc9 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8005cc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd4:	f040 810c 	bne.w	8005ef0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ce2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ce6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cea:	4622      	mov	r2, r4
 8005cec:	462b      	mov	r3, r5
 8005cee:	1891      	adds	r1, r2, r2
 8005cf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cf2:	415b      	adcs	r3, r3
 8005cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	eb12 0801 	adds.w	r8, r2, r1
 8005d00:	4629      	mov	r1, r5
 8005d02:	eb43 0901 	adc.w	r9, r3, r1
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d1a:	4690      	mov	r8, r2
 8005d1c:	4699      	mov	r9, r3
 8005d1e:	4623      	mov	r3, r4
 8005d20:	eb18 0303 	adds.w	r3, r8, r3
 8005d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d28:	462b      	mov	r3, r5
 8005d2a:	eb49 0303 	adc.w	r3, r9, r3
 8005d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d46:	460b      	mov	r3, r1
 8005d48:	18db      	adds	r3, r3, r3
 8005d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	eb42 0303 	adc.w	r3, r2, r3
 8005d52:	657b      	str	r3, [r7, #84]	; 0x54
 8005d54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d5c:	f7fa faa8 	bl	80002b0 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4b61      	ldr	r3, [pc, #388]	; (8005eec <UART_SetConfig+0x2d4>)
 8005d66:	fba3 2302 	umull	r2, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	011c      	lsls	r4, r3, #4
 8005d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	1891      	adds	r1, r2, r2
 8005d86:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d88:	415b      	adcs	r3, r3
 8005d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d90:	4641      	mov	r1, r8
 8005d92:	eb12 0a01 	adds.w	sl, r2, r1
 8005d96:	4649      	mov	r1, r9
 8005d98:	eb43 0b01 	adc.w	fp, r3, r1
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005da8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db0:	4692      	mov	sl, r2
 8005db2:	469b      	mov	fp, r3
 8005db4:	4643      	mov	r3, r8
 8005db6:	eb1a 0303 	adds.w	r3, sl, r3
 8005dba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	eb4b 0303 	adc.w	r3, fp, r3
 8005dc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005dd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	18db      	adds	r3, r3, r3
 8005de0:	643b      	str	r3, [r7, #64]	; 0x40
 8005de2:	4613      	mov	r3, r2
 8005de4:	eb42 0303 	adc.w	r3, r2, r3
 8005de8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005df2:	f7fa fa5d 	bl	80002b0 <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4b3b      	ldr	r3, [pc, #236]	; (8005eec <UART_SetConfig+0x2d4>)
 8005dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2264      	movs	r2, #100	; 0x64
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	1acb      	subs	r3, r1, r3
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e12:	4b36      	ldr	r3, [pc, #216]	; (8005eec <UART_SetConfig+0x2d4>)
 8005e14:	fba3 2302 	umull	r2, r3, r3, r2
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e20:	441c      	add	r4, r3
 8005e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	1891      	adds	r1, r2, r2
 8005e3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e3c:	415b      	adcs	r3, r3
 8005e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e44:	4641      	mov	r1, r8
 8005e46:	1851      	adds	r1, r2, r1
 8005e48:	6339      	str	r1, [r7, #48]	; 0x30
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	414b      	adcs	r3, r1
 8005e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	00cb      	lsls	r3, r1, #3
 8005e60:	4651      	mov	r1, sl
 8005e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e66:	4651      	mov	r1, sl
 8005e68:	00ca      	lsls	r2, r1, #3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4642      	mov	r2, r8
 8005e72:	189b      	adds	r3, r3, r2
 8005e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e78:	464b      	mov	r3, r9
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	eb42 0303 	adc.w	r3, r2, r3
 8005e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e98:	460b      	mov	r3, r1
 8005e9a:	18db      	adds	r3, r3, r3
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	eb42 0303 	adc.w	r3, r2, r3
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005eae:	f7fa f9ff 	bl	80002b0 <__aeabi_uldivmod>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <UART_SetConfig+0x2d4>)
 8005eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	2164      	movs	r1, #100	; 0x64
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	3332      	adds	r3, #50	; 0x32
 8005eca:	4a08      	ldr	r2, [pc, #32]	; (8005eec <UART_SetConfig+0x2d4>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f003 0207 	and.w	r2, r3, #7
 8005ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4422      	add	r2, r4
 8005ede:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ee0:	e106      	b.n	80060f0 <UART_SetConfig+0x4d8>
 8005ee2:	bf00      	nop
 8005ee4:	40011000 	.word	0x40011000
 8005ee8:	40011400 	.word	0x40011400
 8005eec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005efa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005efe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f02:	4642      	mov	r2, r8
 8005f04:	464b      	mov	r3, r9
 8005f06:	1891      	adds	r1, r2, r2
 8005f08:	6239      	str	r1, [r7, #32]
 8005f0a:	415b      	adcs	r3, r3
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f12:	4641      	mov	r1, r8
 8005f14:	1854      	adds	r4, r2, r1
 8005f16:	4649      	mov	r1, r9
 8005f18:	eb43 0501 	adc.w	r5, r3, r1
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	00eb      	lsls	r3, r5, #3
 8005f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f2a:	00e2      	lsls	r2, r4, #3
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	461d      	mov	r5, r3
 8005f30:	4643      	mov	r3, r8
 8005f32:	18e3      	adds	r3, r4, r3
 8005f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f38:	464b      	mov	r3, r9
 8005f3a:	eb45 0303 	adc.w	r3, r5, r3
 8005f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f5e:	4629      	mov	r1, r5
 8005f60:	008b      	lsls	r3, r1, #2
 8005f62:	4621      	mov	r1, r4
 8005f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f68:	4621      	mov	r1, r4
 8005f6a:	008a      	lsls	r2, r1, #2
 8005f6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f70:	f7fa f99e 	bl	80002b0 <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4b60      	ldr	r3, [pc, #384]	; (80060fc <UART_SetConfig+0x4e4>)
 8005f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	011c      	lsls	r4, r3, #4
 8005f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	1891      	adds	r1, r2, r2
 8005f9a:	61b9      	str	r1, [r7, #24]
 8005f9c:	415b      	adcs	r3, r3
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	1851      	adds	r1, r2, r1
 8005fa8:	6139      	str	r1, [r7, #16]
 8005faa:	4649      	mov	r1, r9
 8005fac:	414b      	adcs	r3, r1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	00cb      	lsls	r3, r1, #3
 8005fc0:	4651      	mov	r1, sl
 8005fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fc6:	4651      	mov	r1, sl
 8005fc8:	00ca      	lsls	r2, r1, #3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	189b      	adds	r3, r3, r2
 8005fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fd8:	464b      	mov	r3, r9
 8005fda:	460a      	mov	r2, r1
 8005fdc:	eb42 0303 	adc.w	r3, r2, r3
 8005fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	008b      	lsls	r3, r1, #2
 8006000:	4641      	mov	r1, r8
 8006002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006006:	4641      	mov	r1, r8
 8006008:	008a      	lsls	r2, r1, #2
 800600a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800600e:	f7fa f94f 	bl	80002b0 <__aeabi_uldivmod>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4611      	mov	r1, r2
 8006018:	4b38      	ldr	r3, [pc, #224]	; (80060fc <UART_SetConfig+0x4e4>)
 800601a:	fba3 2301 	umull	r2, r3, r3, r1
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	2264      	movs	r2, #100	; 0x64
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	1acb      	subs	r3, r1, r3
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	3332      	adds	r3, #50	; 0x32
 800602c:	4a33      	ldr	r2, [pc, #204]	; (80060fc <UART_SetConfig+0x4e4>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006038:	441c      	add	r4, r3
 800603a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800603e:	2200      	movs	r2, #0
 8006040:	673b      	str	r3, [r7, #112]	; 0x70
 8006042:	677a      	str	r2, [r7, #116]	; 0x74
 8006044:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006048:	4642      	mov	r2, r8
 800604a:	464b      	mov	r3, r9
 800604c:	1891      	adds	r1, r2, r2
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	415b      	adcs	r3, r3
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006058:	4641      	mov	r1, r8
 800605a:	1851      	adds	r1, r2, r1
 800605c:	6039      	str	r1, [r7, #0]
 800605e:	4649      	mov	r1, r9
 8006060:	414b      	adcs	r3, r1
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006070:	4659      	mov	r1, fp
 8006072:	00cb      	lsls	r3, r1, #3
 8006074:	4651      	mov	r1, sl
 8006076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800607a:	4651      	mov	r1, sl
 800607c:	00ca      	lsls	r2, r1, #3
 800607e:	4610      	mov	r0, r2
 8006080:	4619      	mov	r1, r3
 8006082:	4603      	mov	r3, r0
 8006084:	4642      	mov	r2, r8
 8006086:	189b      	adds	r3, r3, r2
 8006088:	66bb      	str	r3, [r7, #104]	; 0x68
 800608a:	464b      	mov	r3, r9
 800608c:	460a      	mov	r2, r1
 800608e:	eb42 0303 	adc.w	r3, r2, r3
 8006092:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	663b      	str	r3, [r7, #96]	; 0x60
 800609e:	667a      	str	r2, [r7, #100]	; 0x64
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060ac:	4649      	mov	r1, r9
 80060ae:	008b      	lsls	r3, r1, #2
 80060b0:	4641      	mov	r1, r8
 80060b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b6:	4641      	mov	r1, r8
 80060b8:	008a      	lsls	r2, r1, #2
 80060ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060be:	f7fa f8f7 	bl	80002b0 <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <UART_SetConfig+0x4e4>)
 80060c8:	fba3 1302 	umull	r1, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	2164      	movs	r1, #100	; 0x64
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	3332      	adds	r3, #50	; 0x32
 80060da:	4a08      	ldr	r2, [pc, #32]	; (80060fc <UART_SetConfig+0x4e4>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	f003 020f 	and.w	r2, r3, #15
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4422      	add	r2, r4
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	bf00      	nop
 80060f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060f6:	46bd      	mov	sp, r7
 80060f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060fc:	51eb851f 	.word	0x51eb851f

08006100 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <MUX>:
void MUX(struct WIFI *a)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2204      	movs	r2, #4
 8006190:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <IPDef>:
void IPDef(struct WIFI *a)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2205      	movs	r2, #5
 80061bc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2206      	movs	r2, #6
 8006214:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2208      	movs	r2, #8
 8006240:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2209      	movs	r2, #9
 800626c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2207      	movs	r2, #7
 8006298:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006446:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645a:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800645e:	af06      	add	r7, sp, #24
 8006460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006468:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800646a:	2300      	movs	r3, #0
 800646c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006470:	2300      	movs	r3, #0
 8006472:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006476:	2300      	movs	r3, #0
 8006478:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800647c:	2300      	movs	r3, #0
 800647e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006488:	2320      	movs	r3, #32
 800648a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 800648e:	2322      	movs	r3, #34	; 0x22
 8006490:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006494:	4b7c      	ldr	r3, [pc, #496]	; (8006688 <AT_ESP8266_ND+0x230>)
 8006496:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 800649a:	4a7c      	ldr	r2, [pc, #496]	; (800668c <AT_ESP8266_ND+0x234>)
 800649c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	4611      	mov	r1, r2
 80064a4:	8019      	strh	r1, [r3, #0]
 80064a6:	3302      	adds	r3, #2
 80064a8:	0c12      	lsrs	r2, r2, #16
 80064aa:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80064ac:	f642 4322 	movw	r3, #11298	; 0x2c22
 80064b0:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80064b4:	f640 230d 	movw	r3, #2573	; 0xa0d
 80064b8:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80064c2:	2300      	movs	r3, #0
 80064c4:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80064c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80064d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7f9 fe84 	bl	80001f4 <strlen>
 80064ec:	4603      	mov	r3, r0
 80064ee:	461a      	mov	r2, r3
 80064f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 80064fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006502:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 800650e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006512:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800651c:	4618      	mov	r0, r3
 800651e:	f7f9 fe69 	bl	80001f4 <strlen>
 8006522:	4603      	mov	r3, r0
 8006524:	461a      	mov	r2, r3
 8006526:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800652a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006534:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006538:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2206      	movs	r2, #6
 8006540:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006544:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006548:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006552:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006556:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006560:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006564:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800656e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006572:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006582:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800658c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006590:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006594:	6809      	ldr	r1, [r1, #0]
 8006596:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800659a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800659e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80065a2:	6800      	ldr	r0, [r0, #0]
 80065a4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80065a8:	2300      	movs	r3, #0
 80065aa:	9305      	str	r3, [sp, #20]
 80065ac:	9004      	str	r0, [sp, #16]
 80065ae:	9103      	str	r1, [sp, #12]
 80065b0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80065b4:	9102      	str	r1, [sp, #8]
 80065b6:	9201      	str	r2, [sp, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	4633      	mov	r3, r6
 80065be:	4a34      	ldr	r2, [pc, #208]	; (8006690 <AT_ESP8266_ND+0x238>)
 80065c0:	4629      	mov	r1, r5
 80065c2:	4620      	mov	r0, r4
 80065c4:	f007 f9c2 	bl	800d94c <FT_String_ND>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	f040 8140 	bne.w	8006850 <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 80065d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2206      	movs	r2, #6
 80065dc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 80065e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d150      	bne.n	8006694 <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 80065f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800660e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006612:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800661c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006620:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006630:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800663a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800663e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006642:	6809      	ldr	r1, [r1, #0]
 8006644:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006648:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800664c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006650:	6800      	ldr	r0, [r0, #0]
 8006652:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006656:	2304      	movs	r3, #4
 8006658:	9305      	str	r3, [sp, #20]
 800665a:	9004      	str	r0, [sp, #16]
 800665c:	9103      	str	r1, [sp, #12]
 800665e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006662:	9102      	str	r1, [sp, #8]
 8006664:	9201      	str	r2, [sp, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	4633      	mov	r3, r6
 800666c:	4a08      	ldr	r2, [pc, #32]	; (8006690 <AT_ESP8266_ND+0x238>)
 800666e:	4629      	mov	r1, r5
 8006670:	4620      	mov	r0, r4
 8006672:	f007 f96b 	bl	800d94c <FT_String_ND>
 8006676:	4602      	mov	r2, r0
 8006678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800667c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006686:	e04f      	b.n	8006728 <AT_ESP8266_ND+0x2d0>
 8006688:	00222c22 	.word	0x00222c22
 800668c:	0800fa38 	.word	0x0800fa38
 8006690:	0800f860 	.word	0x0800f860
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006694:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006698:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80066a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80066b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80066be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80066d2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80066dc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80066e0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80066e4:	6809      	ldr	r1, [r1, #0]
 80066e6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80066ea:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80066ee:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80066f2:	6800      	ldr	r0, [r0, #0]
 80066f4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80066f8:	2305      	movs	r3, #5
 80066fa:	9305      	str	r3, [sp, #20]
 80066fc:	9004      	str	r0, [sp, #16]
 80066fe:	9103      	str	r1, [sp, #12]
 8006700:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006704:	9102      	str	r1, [sp, #8]
 8006706:	9201      	str	r2, [sp, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	4633      	mov	r3, r6
 800670e:	4ad2      	ldr	r2, [pc, #840]	; (8006a58 <AT_ESP8266_ND+0x600>)
 8006710:	4629      	mov	r1, r5
 8006712:	4620      	mov	r0, r4
 8006714:	f007 f91a 	bl	800d94c <FT_String_ND>
 8006718:	4602      	mov	r2, r0
 800671a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800671e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006728:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800672c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006736:	2b04      	cmp	r3, #4
 8006738:	d15a      	bne.n	80067f0 <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 800673a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800673e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2263      	movs	r2, #99	; 0x63
 8006746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 800674a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800674e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800675c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800676a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006778:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006782:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006786:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006790:	2341      	movs	r3, #65	; 0x41
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	f007 fc55 	bl	800e044 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 800679a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800679e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80067a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f603 0194 	addw	r1, r3, #2196	; 0x894
 80067b6:	2341      	movs	r3, #65	; 0x41
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	2300      	movs	r3, #0
 80067bc:	2205      	movs	r2, #5
 80067be:	f007 fc41 	bl	800e044 <CopiaVector>

	 		a->_debug_rx_ok++;
 80067c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 80067e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 80067f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80067fe:	2b05      	cmp	r3, #5
 8006800:	d126      	bne.n	8006850 <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 8006802:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006806:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2237      	movs	r2, #55	; 0x37
 800680e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006812:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006816:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2200      	movs	r2, #0
 800681e:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006822:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006826:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006836:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006840:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006844:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2201      	movs	r2, #1
 800684c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006850:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006854:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2204      	movs	r2, #4
 800685c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800686e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006872:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800687c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006880:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800688a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800688e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800689e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80068a8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80068ac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80068b0:	6809      	ldr	r1, [r1, #0]
 80068b2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80068b6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80068ba:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80068be:	6800      	ldr	r0, [r0, #0]
 80068c0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80068c4:	2300      	movs	r3, #0
 80068c6:	9305      	str	r3, [sp, #20]
 80068c8:	9004      	str	r0, [sp, #16]
 80068ca:	9103      	str	r1, [sp, #12]
 80068cc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80068d0:	9102      	str	r1, [sp, #8]
 80068d2:	9201      	str	r2, [sp, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4633      	mov	r3, r6
 80068da:	4a60      	ldr	r2, [pc, #384]	; (8006a5c <AT_ESP8266_ND+0x604>)
 80068dc:	4629      	mov	r1, r5
 80068de:	4620      	mov	r0, r4
 80068e0:	f007 f834 	bl	800d94c <FT_String_ND>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	f040 83b4 	bne.w	8007054 <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 80068f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2206      	movs	r2, #6
 80068fe:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800691e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006922:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800692c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006940:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800694a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800694e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006952:	6809      	ldr	r1, [r1, #0]
 8006954:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006958:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800695c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006960:	6800      	ldr	r0, [r0, #0]
 8006962:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006966:	2300      	movs	r3, #0
 8006968:	9305      	str	r3, [sp, #20]
 800696a:	9004      	str	r0, [sp, #16]
 800696c:	9103      	str	r1, [sp, #12]
 800696e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006972:	9102      	str	r1, [sp, #8]
 8006974:	9201      	str	r2, [sp, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	4633      	mov	r3, r6
 800697c:	4a38      	ldr	r2, [pc, #224]	; (8006a60 <AT_ESP8266_ND+0x608>)
 800697e:	4629      	mov	r1, r5
 8006980:	4620      	mov	r0, r4
 8006982:	f006 ffe3 	bl	800d94c <FT_String_ND>
 8006986:	4603      	mov	r3, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	d113      	bne.n	80069b4 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 800698c:	2313      	movs	r3, #19
 800698e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006992:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006996:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 80069b0:	f001 bae1 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 80069b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2208      	movs	r2, #8
 80069c0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80069c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80069d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80069e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80069ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a02:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a0c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a10:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a14:	6809      	ldr	r1, [r1, #0]
 8006a16:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a1a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a1e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a22:	6800      	ldr	r0, [r0, #0]
 8006a24:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9305      	str	r3, [sp, #20]
 8006a2c:	9004      	str	r0, [sp, #16]
 8006a2e:	9103      	str	r1, [sp, #12]
 8006a30:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a34:	9102      	str	r1, [sp, #8]
 8006a36:	9201      	str	r2, [sp, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	4633      	mov	r3, r6
 8006a3e:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <AT_ESP8266_ND+0x60c>)
 8006a40:	4629      	mov	r1, r5
 8006a42:	4620      	mov	r0, r4
 8006a44:	f006 ff82 	bl	800d94c <FT_String_ND>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d10c      	bne.n	8006a68 <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8006a4e:	230d      	movs	r3, #13
 8006a50:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006a54:	f001 ba8f 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
 8006a58:	0800f860 	.word	0x0800f860
 8006a5c:	0800f868 	.word	0x0800f868
 8006a60:	0800f870 	.word	0x0800f870
 8006a64:	0800f878 	.word	0x0800f878
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	220a      	movs	r2, #10
 8006a74:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006a86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006a94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006aa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ab6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ac0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ac4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ac8:	6809      	ldr	r1, [r1, #0]
 8006aca:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ace:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ad2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006adc:	2300      	movs	r3, #0
 8006ade:	9305      	str	r3, [sp, #20]
 8006ae0:	9004      	str	r0, [sp, #16]
 8006ae2:	9103      	str	r1, [sp, #12]
 8006ae4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ae8:	9102      	str	r1, [sp, #8]
 8006aea:	9201      	str	r2, [sp, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	4633      	mov	r3, r6
 8006af2:	4aaa      	ldr	r2, [pc, #680]	; (8006d9c <AT_ESP8266_ND+0x944>)
 8006af4:	4629      	mov	r1, r5
 8006af6:	4620      	mov	r0, r4
 8006af8:	f006 ff28 	bl	800d94c <FT_String_ND>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d104      	bne.n	8006b0c <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 8006b02:	231c      	movs	r3, #28
 8006b04:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006b08:	f001 ba35 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	220f      	movs	r2, #15
 8006b18:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006b1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006b38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b54:	603b      	str	r3, [r7, #0]
 8006b56:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b5a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b64:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b68:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b6c:	6809      	ldr	r1, [r1, #0]
 8006b6e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b72:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b76:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b7a:	6800      	ldr	r0, [r0, #0]
 8006b7c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006b80:	2300      	movs	r3, #0
 8006b82:	9305      	str	r3, [sp, #20]
 8006b84:	9004      	str	r0, [sp, #16]
 8006b86:	9103      	str	r1, [sp, #12]
 8006b88:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b8c:	9102      	str	r1, [sp, #8]
 8006b8e:	9201      	str	r2, [sp, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	4633      	mov	r3, r6
 8006b96:	4a82      	ldr	r2, [pc, #520]	; (8006da0 <AT_ESP8266_ND+0x948>)
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f006 fed6 	bl	800d94c <FT_String_ND>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d104      	bne.n	8006bb0 <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006ba6:	2317      	movs	r3, #23
 8006ba8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006bac:	f001 b9e3 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2203      	movs	r2, #3
 8006bbc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8006bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006bce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006bfe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c08:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c0c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c10:	6809      	ldr	r1, [r1, #0]
 8006c12:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c16:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c1a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c1e:	6800      	ldr	r0, [r0, #0]
 8006c20:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006c24:	2300      	movs	r3, #0
 8006c26:	9305      	str	r3, [sp, #20]
 8006c28:	9004      	str	r0, [sp, #16]
 8006c2a:	9103      	str	r1, [sp, #12]
 8006c2c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c30:	9102      	str	r1, [sp, #8]
 8006c32:	9201      	str	r2, [sp, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	4633      	mov	r3, r6
 8006c3a:	4a5a      	ldr	r2, [pc, #360]	; (8006da4 <AT_ESP8266_ND+0x94c>)
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f006 fe84 	bl	800d94c <FT_String_ND>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d104      	bne.n	8006c54 <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 8006c4a:	2314      	movs	r3, #20
 8006c4c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006c50:	f001 b991 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8006c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	220c      	movs	r2, #12
 8006c60:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006c8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c9c:	603b      	str	r3, [r7, #0]
 8006c9e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ca2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006cac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cb0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006cb4:	6809      	ldr	r1, [r1, #0]
 8006cb6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006cba:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006cbe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006cc2:	6800      	ldr	r0, [r0, #0]
 8006cc4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9305      	str	r3, [sp, #20]
 8006ccc:	9004      	str	r0, [sp, #16]
 8006cce:	9103      	str	r1, [sp, #12]
 8006cd0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006cd4:	9102      	str	r1, [sp, #8]
 8006cd6:	9201      	str	r2, [sp, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	4633      	mov	r3, r6
 8006cde:	4a32      	ldr	r2, [pc, #200]	; (8006da8 <AT_ESP8266_ND+0x950>)
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f006 fe32 	bl	800d94c <FT_String_ND>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d104      	bne.n	8006cf8 <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 8006cee:	2315      	movs	r3, #21
 8006cf0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006cf4:	f001 b93f 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	220b      	movs	r2, #11
 8006d04:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006d16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006d24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006d32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d46:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d50:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d54:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d58:	6809      	ldr	r1, [r1, #0]
 8006d5a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d5e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d62:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d66:	6800      	ldr	r0, [r0, #0]
 8006d68:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9305      	str	r3, [sp, #20]
 8006d70:	9004      	str	r0, [sp, #16]
 8006d72:	9103      	str	r1, [sp, #12]
 8006d74:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d78:	9102      	str	r1, [sp, #8]
 8006d7a:	9201      	str	r2, [sp, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4633      	mov	r3, r6
 8006d82:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <AT_ESP8266_ND+0x954>)
 8006d84:	4629      	mov	r1, r5
 8006d86:	4620      	mov	r0, r4
 8006d88:	f006 fde0 	bl	800d94c <FT_String_ND>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d10e      	bne.n	8006db0 <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 8006d92:	2309      	movs	r3, #9
 8006d94:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d98:	f001 b8ed 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
 8006d9c:	0800f884 	.word	0x0800f884
 8006da0:	0800f890 	.word	0x0800f890
 8006da4:	0800f8a0 	.word	0x0800f8a0
 8006da8:	0800f8a4 	.word	0x0800f8a4
 8006dac:	0800f8b4 	.word	0x0800f8b4
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8006db0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006db4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	220b      	movs	r2, #11
 8006dbc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ddc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006de0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006dea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006dfe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e02:	6812      	ldr	r2, [r2, #0]
 8006e04:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e08:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e0c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e10:	6809      	ldr	r1, [r1, #0]
 8006e12:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e16:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e1a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006e24:	2300      	movs	r3, #0
 8006e26:	9305      	str	r3, [sp, #20]
 8006e28:	9004      	str	r0, [sp, #16]
 8006e2a:	9103      	str	r1, [sp, #12]
 8006e2c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e30:	9102      	str	r1, [sp, #8]
 8006e32:	9201      	str	r2, [sp, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	4633      	mov	r3, r6
 8006e3a:	4a82      	ldr	r2, [pc, #520]	; (8007044 <AT_ESP8266_ND+0xbec>)
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f006 fd84 	bl	800d94c <FT_String_ND>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d104      	bne.n	8006e54 <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 8006e4a:	2307      	movs	r3, #7
 8006e4c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e50:	f001 b891 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006e54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	220b      	movs	r2, #11
 8006e60:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006e64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006e72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006e80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e9c:	603b      	str	r3, [r7, #0]
 8006e9e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ea2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006eac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006eb0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006eb4:	6809      	ldr	r1, [r1, #0]
 8006eb6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006eba:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ebe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	9004      	str	r0, [sp, #16]
 8006ece:	9103      	str	r1, [sp, #12]
 8006ed0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ed4:	9102      	str	r1, [sp, #8]
 8006ed6:	9201      	str	r2, [sp, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4633      	mov	r3, r6
 8006ede:	4a5a      	ldr	r2, [pc, #360]	; (8007048 <AT_ESP8266_ND+0xbf0>)
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f006 fd32 	bl	800d94c <FT_String_ND>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d104      	bne.n	8006ef8 <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 8006eee:	2308      	movs	r3, #8
 8006ef0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ef4:	f001 b83f 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8006ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006efc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	220a      	movs	r2, #10
 8006f04:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006f08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f40:	603b      	str	r3, [r7, #0]
 8006f42:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f46:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f4a:	6812      	ldr	r2, [r2, #0]
 8006f4c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f50:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f54:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f58:	6809      	ldr	r1, [r1, #0]
 8006f5a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f5e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f62:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9305      	str	r3, [sp, #20]
 8006f70:	9004      	str	r0, [sp, #16]
 8006f72:	9103      	str	r1, [sp, #12]
 8006f74:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f78:	9102      	str	r1, [sp, #8]
 8006f7a:	9201      	str	r2, [sp, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	4633      	mov	r3, r6
 8006f82:	4a32      	ldr	r2, [pc, #200]	; (800704c <AT_ESP8266_ND+0xbf4>)
 8006f84:	4629      	mov	r1, r5
 8006f86:	4620      	mov	r0, r4
 8006f88:	f006 fce0 	bl	800d94c <FT_String_ND>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d104      	bne.n	8006f9c <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 8006f92:	231b      	movs	r3, #27
 8006f94:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f98:	f000 bfed 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8006f9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2207      	movs	r2, #7
 8006fa8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8006fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006fc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006fe4:	603b      	str	r3, [r7, #0]
 8006fe6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ff4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ff8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ffc:	6809      	ldr	r1, [r1, #0]
 8006ffe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007002:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007006:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007010:	2300      	movs	r3, #0
 8007012:	9305      	str	r3, [sp, #20]
 8007014:	9004      	str	r0, [sp, #16]
 8007016:	9103      	str	r1, [sp, #12]
 8007018:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800701c:	9102      	str	r1, [sp, #8]
 800701e:	9201      	str	r2, [sp, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4633      	mov	r3, r6
 8007026:	4a0a      	ldr	r2, [pc, #40]	; (8007050 <AT_ESP8266_ND+0xbf8>)
 8007028:	4629      	mov	r1, r5
 800702a:	4620      	mov	r0, r4
 800702c:	f006 fc8e 	bl	800d94c <FT_String_ND>
 8007030:	4603      	mov	r3, r0
 8007032:	2b01      	cmp	r3, #1
 8007034:	f040 879f 	bne.w	8007f76 <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 8007038:	230f      	movs	r3, #15
 800703a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800703e:	f000 bf9a 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
 8007042:	bf00      	nop
 8007044:	0800f8c0 	.word	0x0800f8c0
 8007048:	0800f8cc 	.word	0x0800f8cc
 800704c:	0800f8d8 	.word	0x0800f8d8
 8007050:	0800f8e4 	.word	0x0800f8e4
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007054:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007058:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2207      	movs	r2, #7
 8007060:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800708e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800709c:	603b      	str	r3, [r7, #0]
 800709e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070a2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070a6:	6812      	ldr	r2, [r2, #0]
 80070a8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070ac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070b0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070b4:	6809      	ldr	r1, [r1, #0]
 80070b6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070ba:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070be:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070c2:	6800      	ldr	r0, [r0, #0]
 80070c4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80070c8:	2300      	movs	r3, #0
 80070ca:	9305      	str	r3, [sp, #20]
 80070cc:	9004      	str	r0, [sp, #16]
 80070ce:	9103      	str	r1, [sp, #12]
 80070d0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070d4:	9102      	str	r1, [sp, #8]
 80070d6:	9201      	str	r2, [sp, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	4633      	mov	r3, r6
 80070de:	4aaa      	ldr	r2, [pc, #680]	; (8007388 <AT_ESP8266_ND+0xf30>)
 80070e0:	4629      	mov	r1, r5
 80070e2:	4620      	mov	r0, r4
 80070e4:	f006 fc32 	bl	800d94c <FT_String_ND>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	f040 839d 	bne.w	800782a <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 80070f0:	2302      	movs	r3, #2
 80070f2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 80070f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2208      	movs	r2, #8
 8007102:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 8007106:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800710a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007114:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007118:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007122:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007126:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007130:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007134:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007144:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800714e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007152:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007156:	6809      	ldr	r1, [r1, #0]
 8007158:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800715c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007160:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007164:	6800      	ldr	r0, [r0, #0]
 8007166:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800716a:	2300      	movs	r3, #0
 800716c:	9305      	str	r3, [sp, #20]
 800716e:	9004      	str	r0, [sp, #16]
 8007170:	9103      	str	r1, [sp, #12]
 8007172:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007176:	9102      	str	r1, [sp, #8]
 8007178:	9201      	str	r2, [sp, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	4633      	mov	r3, r6
 8007180:	4a82      	ldr	r2, [pc, #520]	; (800738c <AT_ESP8266_ND+0xf34>)
 8007182:	4629      	mov	r1, r5
 8007184:	4620      	mov	r0, r4
 8007186:	f006 fbe1 	bl	800d94c <FT_String_ND>
 800718a:	4603      	mov	r3, r0
 800718c:	2b01      	cmp	r3, #1
 800718e:	d104      	bne.n	800719a <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 8007190:	2306      	movs	r3, #6
 8007192:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007196:	f000 beee 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 800719a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800719e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2215      	movs	r2, #21
 80071a6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80071aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80071b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80071c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80071d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071e8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071f2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071f6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071fa:	6809      	ldr	r1, [r1, #0]
 80071fc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007200:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007204:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007208:	6800      	ldr	r0, [r0, #0]
 800720a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800720e:	2300      	movs	r3, #0
 8007210:	9305      	str	r3, [sp, #20]
 8007212:	9004      	str	r0, [sp, #16]
 8007214:	9103      	str	r1, [sp, #12]
 8007216:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800721a:	9102      	str	r1, [sp, #8]
 800721c:	9201      	str	r2, [sp, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4633      	mov	r3, r6
 8007224:	4a5a      	ldr	r2, [pc, #360]	; (8007390 <AT_ESP8266_ND+0xf38>)
 8007226:	4629      	mov	r1, r5
 8007228:	4620      	mov	r0, r4
 800722a:	f006 fb8f 	bl	800d94c <FT_String_ND>
 800722e:	4603      	mov	r3, r0
 8007230:	2b01      	cmp	r3, #1
 8007232:	d104      	bne.n	800723e <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8007234:	230e      	movs	r3, #14
 8007236:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800723a:	f000 be9c 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 800723e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007242:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	220c      	movs	r2, #12
 800724a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800724e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800725c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007260:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800726a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800726e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007278:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800727c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800728c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007296:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800729a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800729e:	6809      	ldr	r1, [r1, #0]
 80072a0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072a4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072a8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80072b2:	2300      	movs	r3, #0
 80072b4:	9305      	str	r3, [sp, #20]
 80072b6:	9004      	str	r0, [sp, #16]
 80072b8:	9103      	str	r1, [sp, #12]
 80072ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072be:	9102      	str	r1, [sp, #8]
 80072c0:	9201      	str	r2, [sp, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4633      	mov	r3, r6
 80072c8:	4a32      	ldr	r2, [pc, #200]	; (8007394 <AT_ESP8266_ND+0xf3c>)
 80072ca:	4629      	mov	r1, r5
 80072cc:	4620      	mov	r0, r4
 80072ce:	f006 fb3d 	bl	800d94c <FT_String_ND>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d104      	bne.n	80072e2 <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 80072d8:	2316      	movs	r3, #22
 80072da:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072de:	f000 be4a 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 80072e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	220b      	movs	r2, #11
 80072ee:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80072f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800730e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800731c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007320:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007330:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800733a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800733e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007342:	6809      	ldr	r1, [r1, #0]
 8007344:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007348:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800734c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007350:	6800      	ldr	r0, [r0, #0]
 8007352:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007356:	2300      	movs	r3, #0
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	9004      	str	r0, [sp, #16]
 800735c:	9103      	str	r1, [sp, #12]
 800735e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007362:	9102      	str	r1, [sp, #8]
 8007364:	9201      	str	r2, [sp, #4]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	4633      	mov	r3, r6
 800736c:	4a0a      	ldr	r2, [pc, #40]	; (8007398 <AT_ESP8266_ND+0xf40>)
 800736e:	4629      	mov	r1, r5
 8007370:	4620      	mov	r0, r4
 8007372:	f006 faeb 	bl	800d94c <FT_String_ND>
 8007376:	4603      	mov	r3, r0
 8007378:	2b01      	cmp	r3, #1
 800737a:	d10f      	bne.n	800739c <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 800737c:	231a      	movs	r3, #26
 800737e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007382:	f000 bdf8 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
 8007386:	bf00      	nop
 8007388:	0800f8ec 	.word	0x0800f8ec
 800738c:	0800f8f4 	.word	0x0800f8f4
 8007390:	0800f900 	.word	0x0800f900
 8007394:	0800f8a4 	.word	0x0800f8a4
 8007398:	0800f8b4 	.word	0x0800f8b4
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 800739c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2211      	movs	r2, #17
 80073a8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80073ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80073ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80073c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80073d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073fc:	6809      	ldr	r1, [r1, #0]
 80073fe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007402:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007406:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800740a:	6800      	ldr	r0, [r0, #0]
 800740c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007410:	2300      	movs	r3, #0
 8007412:	9305      	str	r3, [sp, #20]
 8007414:	9004      	str	r0, [sp, #16]
 8007416:	9103      	str	r1, [sp, #12]
 8007418:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800741c:	9102      	str	r1, [sp, #8]
 800741e:	9201      	str	r2, [sp, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	4633      	mov	r3, r6
 8007426:	4aaa      	ldr	r2, [pc, #680]	; (80076d0 <AT_ESP8266_ND+0x1278>)
 8007428:	4629      	mov	r1, r5
 800742a:	4620      	mov	r0, r4
 800742c:	f006 fa8e 	bl	800d94c <FT_String_ND>
 8007430:	4603      	mov	r3, r0
 8007432:	2b01      	cmp	r3, #1
 8007434:	d104      	bne.n	8007440 <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 8007436:	2311      	movs	r3, #17
 8007438:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800743c:	f000 bd9b 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8007440:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007444:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	220a      	movs	r2, #10
 800744c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007450:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007454:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800745e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007462:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800746c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800747a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800747e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800748e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007498:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800749c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074a0:	6809      	ldr	r1, [r1, #0]
 80074a2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074a6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074aa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074ae:	6800      	ldr	r0, [r0, #0]
 80074b0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80074b4:	2300      	movs	r3, #0
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	9004      	str	r0, [sp, #16]
 80074ba:	9103      	str	r1, [sp, #12]
 80074bc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074c0:	9102      	str	r1, [sp, #8]
 80074c2:	9201      	str	r2, [sp, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	4633      	mov	r3, r6
 80074ca:	4a82      	ldr	r2, [pc, #520]	; (80076d4 <AT_ESP8266_ND+0x127c>)
 80074cc:	4629      	mov	r1, r5
 80074ce:	4620      	mov	r0, r4
 80074d0:	f006 fa3c 	bl	800d94c <FT_String_ND>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d104      	bne.n	80074e4 <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 80074da:	231d      	movs	r3, #29
 80074dc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074e0:	f000 bd49 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 80074e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	220b      	movs	r2, #11
 80074f0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80074f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007502:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007506:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800751e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007522:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007532:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800753c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007540:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007544:	6809      	ldr	r1, [r1, #0]
 8007546:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800754a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800754e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007552:	6800      	ldr	r0, [r0, #0]
 8007554:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007558:	2300      	movs	r3, #0
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	9004      	str	r0, [sp, #16]
 800755e:	9103      	str	r1, [sp, #12]
 8007560:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007564:	9102      	str	r1, [sp, #8]
 8007566:	9201      	str	r2, [sp, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	4633      	mov	r3, r6
 800756e:	4a5a      	ldr	r2, [pc, #360]	; (80076d8 <AT_ESP8266_ND+0x1280>)
 8007570:	4629      	mov	r1, r5
 8007572:	4620      	mov	r0, r4
 8007574:	f006 f9ea 	bl	800d94c <FT_String_ND>
 8007578:	4603      	mov	r3, r0
 800757a:	2b01      	cmp	r3, #1
 800757c:	d104      	bne.n	8007588 <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 800757e:	231e      	movs	r3, #30
 8007580:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007584:	f000 bcf7 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007588:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800758c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	220b      	movs	r2, #11
 8007594:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007598:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800759c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80075a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80075b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80075c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075e8:	6809      	ldr	r1, [r1, #0]
 80075ea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075ee:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80075f2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80075f6:	6800      	ldr	r0, [r0, #0]
 80075f8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80075fc:	2300      	movs	r3, #0
 80075fe:	9305      	str	r3, [sp, #20]
 8007600:	9004      	str	r0, [sp, #16]
 8007602:	9103      	str	r1, [sp, #12]
 8007604:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007608:	9102      	str	r1, [sp, #8]
 800760a:	9201      	str	r2, [sp, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	4633      	mov	r3, r6
 8007612:	4a32      	ldr	r2, [pc, #200]	; (80076dc <AT_ESP8266_ND+0x1284>)
 8007614:	4629      	mov	r1, r5
 8007616:	4620      	mov	r0, r4
 8007618:	f006 f998 	bl	800d94c <FT_String_ND>
 800761c:	4603      	mov	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d104      	bne.n	800762c <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 8007622:	231f      	movs	r3, #31
 8007624:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007628:	f000 bca5 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 800762c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007630:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2208      	movs	r2, #8
 8007638:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800763c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007640:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800764a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800764e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800766a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007674:	603b      	str	r3, [r7, #0]
 8007676:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800767a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007684:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007688:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800768c:	6809      	ldr	r1, [r1, #0]
 800768e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007692:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007696:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80076a0:	2300      	movs	r3, #0
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	9004      	str	r0, [sp, #16]
 80076a6:	9103      	str	r1, [sp, #12]
 80076a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076ac:	9102      	str	r1, [sp, #8]
 80076ae:	9201      	str	r2, [sp, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	4633      	mov	r3, r6
 80076b6:	4a0a      	ldr	r2, [pc, #40]	; (80076e0 <AT_ESP8266_ND+0x1288>)
 80076b8:	4629      	mov	r1, r5
 80076ba:	4620      	mov	r0, r4
 80076bc:	f006 f946 	bl	800d94c <FT_String_ND>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10e      	bne.n	80076e4 <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 80076c6:	2320      	movs	r3, #32
 80076c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076cc:	f000 bc53 	b.w	8007f76 <AT_ESP8266_ND+0x1b1e>
 80076d0:	0800f918 	.word	0x0800f918
 80076d4:	0800f884 	.word	0x0800f884
 80076d8:	0800f8c0 	.word	0x0800f8c0
 80076dc:	0800f8cc 	.word	0x0800f8cc
 80076e0:	0800f92c 	.word	0x0800f92c
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 80076e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	220a      	movs	r2, #10
 80076f0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80076f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007702:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007706:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007710:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007714:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800771e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007722:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800772c:	603b      	str	r3, [r7, #0]
 800772e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007732:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800773c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007740:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007744:	6809      	ldr	r1, [r1, #0]
 8007746:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800774a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800774e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007752:	6800      	ldr	r0, [r0, #0]
 8007754:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007758:	2300      	movs	r3, #0
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	9004      	str	r0, [sp, #16]
 800775e:	9103      	str	r1, [sp, #12]
 8007760:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007764:	9102      	str	r1, [sp, #8]
 8007766:	9201      	str	r2, [sp, #4]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4633      	mov	r3, r6
 800776e:	4ab7      	ldr	r2, [pc, #732]	; (8007a4c <AT_ESP8266_ND+0x15f4>)
 8007770:	4629      	mov	r1, r5
 8007772:	4620      	mov	r0, r4
 8007774:	f006 f8ea 	bl	800d94c <FT_String_ND>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d103      	bne.n	8007786 <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 800777e:	2321      	movs	r3, #33	; 0x21
 8007780:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007784:	e3f7      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800778a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2205      	movs	r2, #5
 8007792:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800779a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80077a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80077b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80077c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077d8:	6812      	ldr	r2, [r2, #0]
 80077da:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077e6:	6809      	ldr	r1, [r1, #0]
 80077e8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077ec:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80077f0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80077f4:	6800      	ldr	r0, [r0, #0]
 80077f6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80077fa:	2300      	movs	r3, #0
 80077fc:	9305      	str	r3, [sp, #20]
 80077fe:	9004      	str	r0, [sp, #16]
 8007800:	9103      	str	r1, [sp, #12]
 8007802:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007806:	9102      	str	r1, [sp, #8]
 8007808:	9201      	str	r2, [sp, #4]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	4633      	mov	r3, r6
 8007810:	4a8f      	ldr	r2, [pc, #572]	; (8007a50 <AT_ESP8266_ND+0x15f8>)
 8007812:	4629      	mov	r1, r5
 8007814:	4620      	mov	r0, r4
 8007816:	f006 f899 	bl	800d94c <FT_String_ND>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	f040 83aa 	bne.w	8007f76 <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007822:	2322      	movs	r3, #34	; 0x22
 8007824:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007828:	e3a5      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 800782a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800782e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	220f      	movs	r2, #15
 8007836:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 800783a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800783e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800784c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007856:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007878:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007882:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007886:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800788a:	6809      	ldr	r1, [r1, #0]
 800788c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007890:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007894:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007898:	6800      	ldr	r0, [r0, #0]
 800789a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800789e:	2300      	movs	r3, #0
 80078a0:	9305      	str	r3, [sp, #20]
 80078a2:	9004      	str	r0, [sp, #16]
 80078a4:	9103      	str	r1, [sp, #12]
 80078a6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078aa:	9102      	str	r1, [sp, #8]
 80078ac:	9201      	str	r2, [sp, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	4633      	mov	r3, r6
 80078b4:	4a67      	ldr	r2, [pc, #412]	; (8007a54 <AT_ESP8266_ND+0x15fc>)
 80078b6:	4629      	mov	r1, r5
 80078b8:	4620      	mov	r0, r4
 80078ba:	f006 f847 	bl	800d94c <FT_String_ND>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d112      	bne.n	80078ea <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 80078c4:	230a      	movs	r3, #10
 80078c6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 80078ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 80078e8:	e345      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 80078ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2209      	movs	r2, #9
 80078f6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80078fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007916:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007924:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007928:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007938:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007942:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007946:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800794a:	6809      	ldr	r1, [r1, #0]
 800794c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007950:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007954:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007958:	6800      	ldr	r0, [r0, #0]
 800795a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800795e:	2300      	movs	r3, #0
 8007960:	9305      	str	r3, [sp, #20]
 8007962:	9004      	str	r0, [sp, #16]
 8007964:	9103      	str	r1, [sp, #12]
 8007966:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800796a:	9102      	str	r1, [sp, #8]
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	4633      	mov	r3, r6
 8007974:	4a38      	ldr	r2, [pc, #224]	; (8007a58 <AT_ESP8266_ND+0x1600>)
 8007976:	4629      	mov	r1, r5
 8007978:	4620      	mov	r0, r4
 800797a:	f005 ffe7 	bl	800d94c <FT_String_ND>
 800797e:	4603      	mov	r3, r0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d112      	bne.n	80079aa <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 8007984:	2319      	movs	r3, #25
 8007986:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 800798a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800798e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800799e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 80079a8:	e2e5      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 80079aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2208      	movs	r2, #8
 80079b6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80079ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80079c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80079d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80079e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079f8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079fc:	6812      	ldr	r2, [r2, #0]
 80079fe:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a02:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a06:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a0a:	6809      	ldr	r1, [r1, #0]
 8007a0c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a10:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a14:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a18:	6800      	ldr	r0, [r0, #0]
 8007a1a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9305      	str	r3, [sp, #20]
 8007a22:	9004      	str	r0, [sp, #16]
 8007a24:	9103      	str	r1, [sp, #12]
 8007a26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a2a:	9102      	str	r1, [sp, #8]
 8007a2c:	9201      	str	r2, [sp, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4633      	mov	r3, r6
 8007a34:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <AT_ESP8266_ND+0x1604>)
 8007a36:	4629      	mov	r1, r5
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f005 ff87 	bl	800d94c <FT_String_ND>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d10d      	bne.n	8007a60 <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8007a44:	2310      	movs	r3, #16
 8007a46:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a4a:	e294      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
 8007a4c:	0800f8d8 	.word	0x0800f8d8
 8007a50:	0800f938 	.word	0x0800f938
 8007a54:	0800f940 	.word	0x0800f940
 8007a58:	0800f950 	.word	0x0800f950
 8007a5c:	0800f8f4 	.word	0x0800f8f4
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f203 4694 	addw	r6, r3, #1172	; 0x494
 8007a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 8007a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007aac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ab6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007aba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007abe:	6809      	ldr	r1, [r1, #0]
 8007ac0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ac4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007ac8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007acc:	6800      	ldr	r0, [r0, #0]
 8007ace:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9305      	str	r3, [sp, #20]
 8007ad6:	9004      	str	r0, [sp, #16]
 8007ad8:	9103      	str	r1, [sp, #12]
 8007ada:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ade:	9102      	str	r1, [sp, #8]
 8007ae0:	9201      	str	r2, [sp, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	4663      	mov	r3, ip
 8007ae8:	4632      	mov	r2, r6
 8007aea:	4629      	mov	r1, r5
 8007aec:	4620      	mov	r0, r4
 8007aee:	f005 ff2d 	bl	800d94c <FT_String_ND>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d112      	bne.n	8007b1e <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007af8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007afc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8235 	beq.w	8007f76 <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007b1c:	e22b      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007b1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	220d      	movs	r2, #13
 8007b2a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b6c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b76:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b7a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b7e:	6809      	ldr	r1, [r1, #0]
 8007b80:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b84:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b88:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b92:	2300      	movs	r3, #0
 8007b94:	9305      	str	r3, [sp, #20]
 8007b96:	9004      	str	r0, [sp, #16]
 8007b98:	9103      	str	r1, [sp, #12]
 8007b9a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b9e:	9102      	str	r1, [sp, #8]
 8007ba0:	9201      	str	r2, [sp, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	4633      	mov	r3, r6
 8007ba8:	4ac5      	ldr	r2, [pc, #788]	; (8007ec0 <AT_ESP8266_ND+0x1a68>)
 8007baa:	4629      	mov	r1, r5
 8007bac:	4620      	mov	r0, r4
 8007bae:	f005 fecd 	bl	800d94c <FT_String_ND>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d112      	bne.n	8007bde <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007bb8:	2312      	movs	r3, #18
 8007bba:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007bbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007bdc:	e1cb      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007bde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007be2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	220d      	movs	r2, #13
 8007bea:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8007bee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007c0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007c18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c2c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c36:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c3a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c3e:	6809      	ldr	r1, [r1, #0]
 8007c40:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c44:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c48:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c4c:	6800      	ldr	r0, [r0, #0]
 8007c4e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007c52:	2300      	movs	r3, #0
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	9004      	str	r0, [sp, #16]
 8007c58:	9103      	str	r1, [sp, #12]
 8007c5a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c5e:	9102      	str	r1, [sp, #8]
 8007c60:	9201      	str	r2, [sp, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	4633      	mov	r3, r6
 8007c68:	4a96      	ldr	r2, [pc, #600]	; (8007ec4 <AT_ESP8266_ND+0x1a6c>)
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f005 fe6d 	bl	800d94c <FT_String_ND>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d112      	bne.n	8007c9e <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 8007c78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007c96:	230c      	movs	r3, #12
 8007c98:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c9c:	e16b      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007c9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	220e      	movs	r2, #14
 8007caa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 8007cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007cd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007cec:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007cf6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cfa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cfe:	6809      	ldr	r1, [r1, #0]
 8007d00:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d04:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d08:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d0c:	6800      	ldr	r0, [r0, #0]
 8007d0e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007d12:	2300      	movs	r3, #0
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	9004      	str	r0, [sp, #16]
 8007d18:	9103      	str	r1, [sp, #12]
 8007d1a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d1e:	9102      	str	r1, [sp, #8]
 8007d20:	9201      	str	r2, [sp, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	4633      	mov	r3, r6
 8007d28:	4a67      	ldr	r2, [pc, #412]	; (8007ec8 <AT_ESP8266_ND+0x1a70>)
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f005 fe0d 	bl	800d94c <FT_String_ND>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d112      	bne.n	8007d5e <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 8007d38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007d56:	230b      	movs	r3, #11
 8007d58:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d5c:	e10b      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	220a      	movs	r2, #10
 8007d6a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007d8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007dac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007db6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007dba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007dbe:	6809      	ldr	r1, [r1, #0]
 8007dc0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007dc4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007dc8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007dcc:	6800      	ldr	r0, [r0, #0]
 8007dce:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	9305      	str	r3, [sp, #20]
 8007dd6:	9004      	str	r0, [sp, #16]
 8007dd8:	9103      	str	r1, [sp, #12]
 8007dda:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007dde:	9102      	str	r1, [sp, #8]
 8007de0:	9201      	str	r2, [sp, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	4633      	mov	r3, r6
 8007de8:	4a38      	ldr	r2, [pc, #224]	; (8007ecc <AT_ESP8266_ND+0x1a74>)
 8007dea:	4629      	mov	r1, r5
 8007dec:	4620      	mov	r0, r4
 8007dee:	f005 fdad 	bl	800d94c <FT_String_ND>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d112      	bne.n	8007e1e <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007df8:	2318      	movs	r3, #24
 8007dfa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007dfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007e1c:	e0ab      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2208      	movs	r2, #8
 8007e2a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007e2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007e3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007e58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e6c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e76:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e7a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e7e:	6809      	ldr	r1, [r1, #0]
 8007e80:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e84:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007e88:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e8c:	6800      	ldr	r0, [r0, #0]
 8007e8e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007e92:	2300      	movs	r3, #0
 8007e94:	9305      	str	r3, [sp, #20]
 8007e96:	9004      	str	r0, [sp, #16]
 8007e98:	9103      	str	r1, [sp, #12]
 8007e9a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e9e:	9102      	str	r1, [sp, #8]
 8007ea0:	9201      	str	r2, [sp, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	4633      	mov	r3, r6
 8007ea8:	4a09      	ldr	r2, [pc, #36]	; (8007ed0 <AT_ESP8266_ND+0x1a78>)
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4620      	mov	r0, r4
 8007eae:	f005 fd4d 	bl	800d94c <FT_String_ND>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d10d      	bne.n	8007ed4 <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ebe:	e05a      	b.n	8007f76 <AT_ESP8266_ND+0x1b1e>
 8007ec0:	0800f95c 	.word	0x0800f95c
 8007ec4:	0800f96c 	.word	0x0800f96c
 8007ec8:	0800f97c 	.word	0x0800f97c
 8007ecc:	0800f98c 	.word	0x0800f98c
 8007ed0:	0800f998 	.word	0x0800f998
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8007ed4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2209      	movs	r2, #9
 8007ee0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007ee4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007f0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f1c:	603b      	str	r3, [r7, #0]
 8007f1e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f22:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f2c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f30:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f34:	6809      	ldr	r1, [r1, #0]
 8007f36:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f3a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f3e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f42:	6800      	ldr	r0, [r0, #0]
 8007f44:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f48:	2300      	movs	r3, #0
 8007f4a:	9305      	str	r3, [sp, #20]
 8007f4c:	9004      	str	r0, [sp, #16]
 8007f4e:	9103      	str	r1, [sp, #12]
 8007f50:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f54:	9102      	str	r1, [sp, #8]
 8007f56:	9201      	str	r2, [sp, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	4633      	mov	r3, r6
 8007f5e:	4a78      	ldr	r2, [pc, #480]	; (8008140 <AT_ESP8266_ND+0x1ce8>)
 8007f60:	4629      	mov	r1, r5
 8007f62:	4620      	mov	r0, r4
 8007f64:	f005 fcf2 	bl	800d94c <FT_String_ND>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d103      	bne.n	8007f76 <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 8007f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f72:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8007f76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007f84:	3b01      	subs	r3, #1
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	f201 84d7 	bhi.w	800993a <AT_ESP8266_ND+0x34e2>
 8007f8c:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <AT_ESP8266_ND+0x1b3c>)
 8007f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f92:	bf00      	nop
 8007f94:	08007fb9 	.word	0x08007fb9
 8007f98:	08008149 	.word	0x08008149
 8007f9c:	080083cb 	.word	0x080083cb
 8007fa0:	08008549 	.word	0x08008549
 8007fa4:	08008721 	.word	0x08008721
 8007fa8:	080089f5 	.word	0x080089f5
 8007fac:	08008cb5 	.word	0x08008cb5
 8007fb0:	080091dd 	.word	0x080091dd
 8007fb4:	080093b3 	.word	0x080093b3
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007fb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8007fc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d14f      	bne.n	800807a <AT_ESP8266_ND+0x1c22>
 8007fda:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d04b      	beq.n	800807a <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 8007fe2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d047      	beq.n	800807a <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 8007fea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d043      	beq.n	800807a <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 8007ff2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ff6:	2b13      	cmp	r3, #19
 8007ff8:	d03f      	beq.n	800807a <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 8007ffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ffe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800800a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800800e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2201      	movs	r2, #1
 8008016:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 800801a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800801e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008028:	4620      	mov	r0, r4
 800802a:	f7f8 f8e3 	bl	80001f4 <strlen>
 800802e:	4603      	mov	r3, r0
 8008030:	4423      	add	r3, r4
 8008032:	4a44      	ldr	r2, [pc, #272]	; (8008144 <AT_ESP8266_ND+0x1cec>)
 8008034:	461c      	mov	r4, r3
 8008036:	4613      	mov	r3, r2
 8008038:	cb07      	ldmia	r3!, {r0, r1, r2}
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	6061      	str	r1, [r4, #4]
 800803e:	60a2      	str	r2, [r4, #8]
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008044:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008048:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008052:	4618      	mov	r0, r3
 8008054:	f7f8 f8ce 	bl	80001f4 <strlen>
 8008058:	4603      	mov	r3, r0
 800805a:	461a      	mov	r2, r3
 800805c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 800806a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800806e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2264      	movs	r2, #100	; 0x64
 8008076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 800807a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800807e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800808e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800809c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d11b      	bne.n	80080e2 <AT_ESP8266_ND+0x1c8a>
 80080aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d023      	beq.n	80080fa <AT_ESP8266_ND+0x1ca2>
 80080b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080b6:	2b1c      	cmp	r3, #28
 80080b8:	d01f      	beq.n	80080fa <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 80080ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d01b      	beq.n	80080fa <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 80080c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d017      	beq.n	80080fa <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 80080ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080ce:	2b0b      	cmp	r3, #11
 80080d0:	d013      	beq.n	80080fa <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 80080d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080d6:	2b0c      	cmp	r3, #12
 80080d8:	d00f      	beq.n	80080fa <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80080da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080de:	2b13      	cmp	r3, #19
 80080e0:	d00b      	beq.n	80080fa <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80080e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80080f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f4:	4293      	cmp	r3, r2
 80080f6:	f341 842a 	ble.w	800994e <AT_ESP8266_ND+0x34f6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80080fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800810c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008110:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800811c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008120:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2200      	movs	r2, #0
 8008128:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 800812c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008130:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 800813c:	f001 bc07 	b.w	800994e <AT_ESP8266_ND+0x34f6>
 8008140:	0800f9a4 	.word	0x0800f9a4
 8008144:	0800f9b0 	.word	0x0800f9b0
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008148:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800814c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800815c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008166:	2b01      	cmp	r3, #1
 8008168:	f040 80c8 	bne.w	80082fc <AT_ESP8266_ND+0x1ea4>
 800816c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008170:	2b01      	cmp	r3, #1
 8008172:	f000 80c3 	beq.w	80082fc <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 8008176:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800817a:	2b02      	cmp	r3, #2
 800817c:	f000 80be 	beq.w	80082fc <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 8008180:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008184:	2b03      	cmp	r3, #3
 8008186:	f000 80b9 	beq.w	80082fc <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 800818a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800818e:	2b04      	cmp	r3, #4
 8008190:	f000 80b4 	beq.w	80082fc <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 8008194:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008198:	2b0a      	cmp	r3, #10
 800819a:	f000 80af 	beq.w	80082fc <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 800819e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081a2:	2b0b      	cmp	r3, #11
 80081a4:	f000 80aa 	beq.w	80082fc <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 80081a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ac:	2b0c      	cmp	r3, #12
 80081ae:	f000 80a5 	beq.w	80082fc <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 80081b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80081c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80081d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80081e0:	4620      	mov	r0, r4
 80081e2:	f7f8 f807 	bl	80001f4 <strlen>
 80081e6:	4603      	mov	r3, r0
 80081e8:	4423      	add	r3, r4
 80081ea:	49d5      	ldr	r1, [pc, #852]	; (8008540 <AT_ESP8266_ND+0x20e8>)
 80081ec:	461a      	mov	r2, r3
 80081ee:	460b      	mov	r3, r1
 80081f0:	cb03      	ldmia	r3!, {r0, r1}
 80081f2:	6010      	str	r0, [r2, #0]
 80081f4:	6051      	str	r1, [r2, #4]
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80081fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008208:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800820c:	2201      	movs	r2, #1
 800820e:	4618      	mov	r0, r3
 8008210:	f006 f90f 	bl	800e432 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008214:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008218:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008222:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008226:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	1d9d      	adds	r5, r3, #6
 800822e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008232:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3306      	adds	r3, #6
 800823a:	4618      	mov	r0, r3
 800823c:	f7f7 ffda 	bl	80001f4 <strlen>
 8008240:	4603      	mov	r3, r0
 8008242:	461a      	mov	r2, r3
 8008244:	4629      	mov	r1, r5
 8008246:	4620      	mov	r0, r4
 8008248:	f006 f8f3 	bl	800e432 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 800824c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008250:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800825a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800825e:	4618      	mov	r0, r3
 8008260:	f7f7 ffc8 	bl	80001f4 <strlen>
 8008264:	4602      	mov	r2, r0
 8008266:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800826a:	4619      	mov	r1, r3
 800826c:	4620      	mov	r0, r4
 800826e:	f006 f8e0 	bl	800e432 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8008272:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008276:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008280:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008284:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800828e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008292:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3326      	adds	r3, #38	; 0x26
 800829a:	4618      	mov	r0, r3
 800829c:	f7f7 ffaa 	bl	80001f4 <strlen>
 80082a0:	4603      	mov	r3, r0
 80082a2:	461a      	mov	r2, r3
 80082a4:	4629      	mov	r1, r5
 80082a6:	4620      	mov	r0, r4
 80082a8:	f006 f8c3 	bl	800e432 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 80082ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80082ba:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80082be:	2203      	movs	r2, #3
 80082c0:	4618      	mov	r0, r3
 80082c2:	f006 f8b6 	bl	800e432 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80082c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7f7 ff8d 	bl	80001f4 <strlen>
 80082da:	4603      	mov	r3, r0
 80082dc:	461a      	mov	r2, r3
 80082de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 80082ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	22c8      	movs	r2, #200	; 0xc8
 80082f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80082fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008300:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008310:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 800831a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d11b      	bne.n	8008364 <AT_ESP8266_ND+0x1f0c>
 800832c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008330:	2b01      	cmp	r3, #1
 8008332:	d023      	beq.n	800837c <AT_ESP8266_ND+0x1f24>
 8008334:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008338:	2b02      	cmp	r3, #2
 800833a:	d01f      	beq.n	800837c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 800833c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008340:	2b03      	cmp	r3, #3
 8008342:	d01b      	beq.n	800837c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 8008344:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008348:	2b04      	cmp	r3, #4
 800834a:	d017      	beq.n	800837c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 800834c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008350:	2b0a      	cmp	r3, #10
 8008352:	d013      	beq.n	800837c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 8008354:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008358:	2b0b      	cmp	r3, #11
 800835a:	d00f      	beq.n	800837c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 800835c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008360:	2b0c      	cmp	r3, #12
 8008362:	d00b      	beq.n	800837c <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008364:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008368:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008372:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008376:	4293      	cmp	r3, r2
 8008378:	f341 82eb 	ble.w	8009952 <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800837c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008380:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800838a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 800838e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008392:	2b0a      	cmp	r3, #10
 8008394:	d00f      	beq.n	80083b6 <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8008396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800839a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 80083a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 80083b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80083c6:	f001 bac4 	b.w	8009952 <AT_ESP8266_ND+0x34fa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80083ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80083da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d14d      	bne.n	8008488 <AT_ESP8266_ND+0x2030>
 80083ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d049      	beq.n	8008488 <AT_ESP8266_ND+0x2030>
 80083f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083f8:	2b0a      	cmp	r3, #10
 80083fa:	d045      	beq.n	8008488 <AT_ESP8266_ND+0x2030>
 80083fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008400:	2b0d      	cmp	r3, #13
 8008402:	d041      	beq.n	8008488 <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 8008404:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008408:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2201      	movs	r2, #1
 8008420:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 8008424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008432:	4620      	mov	r0, r4
 8008434:	f7f7 fede 	bl	80001f4 <strlen>
 8008438:	4603      	mov	r3, r0
 800843a:	4423      	add	r3, r4
 800843c:	4941      	ldr	r1, [pc, #260]	; (8008544 <AT_ESP8266_ND+0x20ec>)
 800843e:	461a      	mov	r2, r3
 8008440:	460b      	mov	r3, r1
 8008442:	cb03      	ldmia	r3!, {r0, r1}
 8008444:	6010      	str	r0, [r2, #0]
 8008446:	6051      	str	r1, [r2, #4]
 8008448:	8819      	ldrh	r1, [r3, #0]
 800844a:	789b      	ldrb	r3, [r3, #2]
 800844c:	8111      	strh	r1, [r2, #8]
 800844e:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008450:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008454:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800845e:	4618      	mov	r0, r3
 8008460:	f7f7 fec8 	bl	80001f4 <strlen>
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
 8008468:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800846c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8008476:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800847a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800848c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80084a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d113      	bne.n	80084e0 <AT_ESP8266_ND+0x2088>
 80084b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084bc:	2b0a      	cmp	r3, #10
 80084be:	d01b      	beq.n	80084f8 <AT_ESP8266_ND+0x20a0>
 80084c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084c4:	2b0b      	cmp	r3, #11
 80084c6:	d017      	beq.n	80084f8 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 80084c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084cc:	2b0c      	cmp	r3, #12
 80084ce:	d013      	beq.n	80084f8 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 80084d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d00f      	beq.n	80084f8 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 80084d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084dc:	2b0d      	cmp	r3, #13
 80084de:	d00b      	beq.n	80084f8 <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80084e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80084ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f2:	4293      	cmp	r3, r2
 80084f4:	f341 822f 	ble.w	8009956 <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80084f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800850a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2200      	movs	r2, #0
 8008516:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800851a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2200      	movs	r2, #0
 8008526:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 800852a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800852e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2200      	movs	r2, #0
 8008536:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800853a:	f001 ba0c 	b.w	8009956 <AT_ESP8266_ND+0x34fe>
 800853e:	bf00      	nop
 8008540:	0800f9c0 	.word	0x0800f9c0
 8008544:	0800f9cc 	.word	0x0800f9cc
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008558:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800855c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008566:	2b01      	cmp	r3, #1
 8008568:	d16b      	bne.n	8008642 <AT_ESP8266_ND+0x21ea>
 800856a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800856e:	2b04      	cmp	r3, #4
 8008570:	d067      	beq.n	8008642 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 8008572:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008576:	2b01      	cmp	r3, #1
 8008578:	d063      	beq.n	8008642 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 800857a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800857e:	2b02      	cmp	r3, #2
 8008580:	d05f      	beq.n	8008642 <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 8008582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008586:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008592:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008596:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2201      	movs	r2, #1
 800859e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 80085a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d115      	bne.n	80085e0 <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 80085b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80085c2:	4620      	mov	r0, r4
 80085c4:	f7f7 fe16 	bl	80001f4 <strlen>
 80085c8:	4603      	mov	r3, r0
 80085ca:	4423      	add	r3, r4
 80085cc:	4a52      	ldr	r2, [pc, #328]	; (8008718 <AT_ESP8266_ND+0x22c0>)
 80085ce:	461c      	mov	r4, r3
 80085d0:	4613      	mov	r3, r2
 80085d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80085d4:	6020      	str	r0, [r4, #0]
 80085d6:	6061      	str	r1, [r4, #4]
 80085d8:	60a2      	str	r2, [r4, #8]
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	e014      	b.n	800860a <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 80085e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7f7 fe00 	bl	80001f4 <strlen>
 80085f4:	4603      	mov	r3, r0
 80085f6:	4423      	add	r3, r4
 80085f8:	4a48      	ldr	r2, [pc, #288]	; (800871c <AT_ESP8266_ND+0x22c4>)
 80085fa:	461c      	mov	r4, r3
 80085fc:	4613      	mov	r3, r2
 80085fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008600:	6020      	str	r0, [r4, #0]
 8008602:	6061      	str	r1, [r4, #4]
 8008604:	60a2      	str	r2, [r4, #8]
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 800860a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800860e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008618:	4618      	mov	r0, r3
 800861a:	f7f7 fdeb 	bl	80001f4 <strlen>
 800861e:	4603      	mov	r3, r0
 8008620:	461a      	mov	r2, r3
 8008622:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008626:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008634:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800863e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008646:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008656:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008664:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800866e:	2b00      	cmp	r3, #0
 8008670:	d123      	bne.n	80086ba <AT_ESP8266_ND+0x2262>
 8008672:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008676:	2b01      	cmp	r3, #1
 8008678:	d02b      	beq.n	80086d2 <AT_ESP8266_ND+0x227a>
 800867a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800867e:	2b0b      	cmp	r3, #11
 8008680:	d027      	beq.n	80086d2 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 8008682:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008686:	2b0c      	cmp	r3, #12
 8008688:	d023      	beq.n	80086d2 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 800868a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800868e:	2b04      	cmp	r3, #4
 8008690:	d01f      	beq.n	80086d2 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 8008692:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008696:	2b02      	cmp	r3, #2
 8008698:	d01b      	beq.n	80086d2 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 800869a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800869e:	2b07      	cmp	r3, #7
 80086a0:	d017      	beq.n	80086d2 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 80086a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d013      	beq.n	80086d2 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 80086aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ae:	2b1e      	cmp	r3, #30
 80086b0:	d00f      	beq.n	80086d2 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 80086b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b6:	2b1f      	cmp	r3, #31
 80086b8:	d00b      	beq.n	80086d2 <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80086ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80086c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086cc:	4293      	cmp	r3, r2
 80086ce:	f341 8144 	ble.w	800995a <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80086d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80086e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80086e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80086f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008714:	f001 b921 	b.w	800995a <AT_ESP8266_ND+0x3502>
 8008718:	0800f9d8 	.word	0x0800f9d8
 800871c:	0800f9e8 	.word	0x0800f9e8
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008734:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800873e:	2b01      	cmp	r3, #1
 8008740:	f040 80f3 	bne.w	800892a <AT_ESP8266_ND+0x24d2>
 8008744:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008748:	2b04      	cmp	r3, #4
 800874a:	f000 80ee 	beq.w	800892a <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 800874e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008752:	2b01      	cmp	r3, #1
 8008754:	f000 80e9 	beq.w	800892a <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 8008758:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800875c:	2b02      	cmp	r3, #2
 800875e:	f000 80e4 	beq.w	800892a <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 8008762:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008766:	2b21      	cmp	r3, #33	; 0x21
 8008768:	f000 80df 	beq.w	800892a <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 800876c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008770:	2b1b      	cmp	r3, #27
 8008772:	f000 80da 	beq.w	800892a <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 8008776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800877a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2200      	movs	r2, #0
 8008782:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2201      	movs	r2, #1
 8008792:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800879a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087a4:	4620      	mov	r0, r4
 80087a6:	f7f7 fd25 	bl	80001f4 <strlen>
 80087aa:	4603      	mov	r3, r0
 80087ac:	4423      	add	r3, r4
 80087ae:	4990      	ldr	r1, [pc, #576]	; (80089f0 <AT_ESP8266_ND+0x2598>)
 80087b0:	461a      	mov	r2, r3
 80087b2:	460b      	mov	r3, r1
 80087b4:	cb03      	ldmia	r3!, {r0, r1}
 80087b6:	6010      	str	r0, [r2, #0]
 80087b8:	6051      	str	r1, [r2, #4]
 80087ba:	8819      	ldrh	r1, [r3, #0]
 80087bc:	789b      	ldrb	r3, [r3, #2]
 80087be:	8111      	strh	r1, [r2, #8]
 80087c0:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 80087c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80087d0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80087d4:	2201      	movs	r2, #1
 80087d6:	4618      	mov	r0, r3
 80087d8:	f005 fe2b 	bl	800e432 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 80087dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 80087f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	334c      	adds	r3, #76	; 0x4c
 8008804:	4618      	mov	r0, r3
 8008806:	f7f7 fcf5 	bl	80001f4 <strlen>
 800880a:	4603      	mov	r3, r0
 800880c:	461a      	mov	r2, r3
 800880e:	4629      	mov	r1, r5
 8008810:	4620      	mov	r0, r4
 8008812:	f005 fe0e 	bl	800e432 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008816:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800881a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008824:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008828:	2203      	movs	r2, #3
 800882a:	4618      	mov	r0, r3
 800882c:	f005 fe01 	bl	800e432 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008834:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800883e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008842:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f103 0562 	add.w	r5, r3, #98	; 0x62
 800884c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008850:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3362      	adds	r3, #98	; 0x62
 8008858:	4618      	mov	r0, r3
 800885a:	f7f7 fccb 	bl	80001f4 <strlen>
 800885e:	4603      	mov	r3, r0
 8008860:	461a      	mov	r2, r3
 8008862:	4629      	mov	r1, r5
 8008864:	4620      	mov	r0, r4
 8008866:	f005 fde4 	bl	800e432 <strncat>
						strncat(a->_uart2snd,separador,3);
 800886a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800886e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008878:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800887c:	2203      	movs	r2, #3
 800887e:	4618      	mov	r0, r3
 8008880:	f005 fdd7 	bl	800e432 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008892:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008896:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f103 0572 	add.w	r5, r3, #114	; 0x72
 80088a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3372      	adds	r3, #114	; 0x72
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7f7 fca1 	bl	80001f4 <strlen>
 80088b2:	4603      	mov	r3, r0
 80088b4:	461a      	mov	r2, r3
 80088b6:	4629      	mov	r1, r5
 80088b8:	4620      	mov	r0, r4
 80088ba:	f005 fdba 	bl	800e432 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 80088be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088cc:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80088d0:	2201      	movs	r2, #1
 80088d2:	4618      	mov	r0, r3
 80088d4:	f005 fdad 	bl	800e432 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80088d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088e6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80088ea:	2202      	movs	r2, #2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f005 fda0 	bl	800e432 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 80088f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008900:	4618      	mov	r0, r3
 8008902:	f7f7 fc77 	bl	80001f4 <strlen>
 8008906:	4603      	mov	r3, r0
 8008908:	461a      	mov	r2, r3
 800890a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800890e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008918:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800891c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800892a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800892e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800893e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800894c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d11b      	bne.n	8008992 <AT_ESP8266_ND+0x253a>
 800895a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800895e:	2b01      	cmp	r3, #1
 8008960:	d023      	beq.n	80089aa <AT_ESP8266_ND+0x2552>
 8008962:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008966:	2b0b      	cmp	r3, #11
 8008968:	d01f      	beq.n	80089aa <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 800896a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800896e:	2b0c      	cmp	r3, #12
 8008970:	d01b      	beq.n	80089aa <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 8008972:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008976:	2b04      	cmp	r3, #4
 8008978:	d017      	beq.n	80089aa <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 800897a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800897e:	2b02      	cmp	r3, #2
 8008980:	d013      	beq.n	80089aa <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 8008982:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008986:	2b21      	cmp	r3, #33	; 0x21
 8008988:	d00f      	beq.n	80089aa <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 800898a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800898e:	2b1b      	cmp	r3, #27
 8008990:	d00b      	beq.n	80089aa <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008992:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008996:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80089a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a4:	4293      	cmp	r3, r2
 80089a6:	f340 87da 	ble.w	800995e <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80089aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80089bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80089cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80089dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80089ec:	f000 bfb7 	b.w	800995e <AT_ESP8266_ND+0x3506>
 80089f0:	0800f8d8 	.word	0x0800f8d8
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80089f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008a04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	f040 80e2 	bne.w	8008bdc <AT_ESP8266_ND+0x2784>
 8008a18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a1c:	2b0b      	cmp	r3, #11
 8008a1e:	f000 80dd 	beq.w	8008bdc <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8008a22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a26:	2b0c      	cmp	r3, #12
 8008a28:	f000 80d8 	beq.w	8008bdc <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008a2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a30:	2b0e      	cmp	r3, #14
 8008a32:	f000 80d3 	beq.w	8008bdc <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 8008a36:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a3a:	2b0f      	cmp	r3, #15
 8008a3c:	f000 80ce 	beq.w	8008bdc <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8008a40:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a44:	2b10      	cmp	r3, #16
 8008a46:	f000 80c9 	beq.w	8008bdc <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 8008a4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	f000 80c4 	beq.w	8008bdc <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8008a54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008a64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008a74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a82:	4620      	mov	r0, r4
 8008a84:	f7f7 fbb6 	bl	80001f4 <strlen>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	4423      	add	r3, r4
 8008a8c:	4aa5      	ldr	r2, [pc, #660]	; (8008d24 <AT_ESP8266_ND+0x28cc>)
 8008a8e:	461c      	mov	r4, r3
 8008a90:	4613      	mov	r3, r2
 8008a92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a94:	6020      	str	r0, [r4, #0]
 8008a96:	6061      	str	r1, [r4, #4]
 8008a98:	60a2      	str	r2, [r4, #8]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008aac:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f005 fcbd 	bl	800e432 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008abc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7f7 fb94 	bl	80001f4 <strlen>
 8008acc:	4603      	mov	r3, r0
 8008ace:	4423      	add	r3, r4
 8008ad0:	4a95      	ldr	r2, [pc, #596]	; (8008d28 <AT_ESP8266_ND+0x28d0>)
 8008ad2:	6810      	ldr	r0, [r2, #0]
 8008ad4:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008ad6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ada:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ae4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008ae8:	2203      	movs	r2, #3
 8008aea:	4618      	mov	r0, r3
 8008aec:	f005 fca1 	bl	800e432 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3336      	adds	r3, #54	; 0x36
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7f7 fb6b 	bl	80001f4 <strlen>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	461a      	mov	r2, r3
 8008b22:	4629      	mov	r1, r5
 8008b24:	4620      	mov	r0, r4
 8008b26:	f005 fc84 	bl	800e432 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b38:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f005 fc77 	bl	800e432 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008b60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3346      	adds	r3, #70	; 0x46
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7f7 fb41 	bl	80001f4 <strlen>
 8008b72:	4603      	mov	r3, r0
 8008b74:	461a      	mov	r2, r3
 8008b76:	4629      	mov	r1, r5
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f005 fc5a 	bl	800e432 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008b7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b8c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7f7 fb2f 	bl	80001f4 <strlen>
 8008b96:	4602      	mov	r2, r0
 8008b98:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f005 fc47 	bl	800e432 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008ba4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7f7 fb1e 	bl	80001f4 <strlen>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008bfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d124      	bne.n	8008c56 <AT_ESP8266_ND+0x27fe>
 8008c0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c10:	2b0a      	cmp	r3, #10
 8008c12:	d02c      	beq.n	8008c6e <AT_ESP8266_ND+0x2816>
 8008c14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c18:	2b0b      	cmp	r3, #11
 8008c1a:	d028      	beq.n	8008c6e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_fail)
 8008c1c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d024      	beq.n	8008c6e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_wifi_gotip)
 8008c24:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c28:	2b0c      	cmp	r3, #12
 8008c2a:	d020      	beq.n	8008c6e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008c2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c30:	2b0e      	cmp	r3, #14
 8008c32:	d01c      	beq.n	8008c6e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_conectado)
 8008c34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c38:	2b0f      	cmp	r3, #15
 8008c3a:	d018      	beq.n	8008c6e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_desconectado)
 8008c3c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d014      	beq.n	8008c6e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_error)
 8008c44:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d010      	beq.n	8008c6e <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_busy_p)))
 8008c4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c54:	d00b      	beq.n	8008c6e <AT_ESP8266_ND+0x2816>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008c56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	f340 867a 	ble.w	8009962 <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008cb0:	f000 be57 	b.w	8009962 <AT_ESP8266_ND+0x350a>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008cb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cb8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8008cc4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cc8:	2b10      	cmp	r3, #16
 8008cca:	d007      	beq.n	8008cdc <AT_ESP8266_ND+0x2884>
 8008ccc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cd0:	2b0a      	cmp	r3, #10
 8008cd2:	d003      	beq.n	8008cdc <AT_ESP8266_ND+0x2884>
 8008cd4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d127      	bne.n	8008d2c <AT_ESP8266_ND+0x28d4>
				{
					a->_estado=AT_decode;
 8008cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008cee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008cfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008d0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008d1e:	f000 be22 	b.w	8009966 <AT_ESP8266_ND+0x350e>
 8008d22:	bf00      	nop
 8008d24:	0800f9f8 	.word	0x0800f9f8
 8008d28:	0800fa08 	.word	0x0800fa08
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008d2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	f040 80d1 	bne.w	8008ee2 <AT_ESP8266_ND+0x2a8a>
 8008d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f040 80c7 	bne.w	8008ee2 <AT_ESP8266_ND+0x2a8a>
										a->_ejecucion=1;
 8008d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2218      	movs	r2, #24
 8008d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008da2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008dc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f7f7 fa0f 	bl	80001f4 <strlen>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	4423      	add	r3, r4
 8008dda:	4ac0      	ldr	r2, [pc, #768]	; (80090dc <AT_ESP8266_ND+0x2c84>)
 8008ddc:	461c      	mov	r4, r3
 8008dde:	4613      	mov	r3, r2
 8008de0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008de2:	6020      	str	r0, [r4, #0]
 8008de4:	6061      	str	r1, [r4, #4]
 8008de6:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008df6:	f107 0214 	add.w	r2, r7, #20
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f005 f8ed 	bl	800dfdc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e10:	f107 0314 	add.w	r3, r7, #20
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7f7 f9ed 	bl	80001f4 <strlen>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	f107 0314 	add.w	r3, r7, #20
 8008e20:	4619      	mov	r1, r3
 8008e22:	4620      	mov	r0, r4
 8008e24:	f005 fb05 	bl	800e432 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008e28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f005 fbd4 	bl	800e5f4 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008e4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e5a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008e5e:	2202      	movs	r2, #2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f005 fae6 	bl	800e432 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008e66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f7 f9bd 	bl	80001f4 <strlen>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008e8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f7f7 f9aa 	bl	80001f4 <strlen>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	4423      	add	r3, r4
 8008ea4:	4a8e      	ldr	r2, [pc, #568]	; (80090e0 <AT_ESP8266_ND+0x2c88>)
 8008ea6:	461c      	mov	r4, r3
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008eac:	6020      	str	r0, [r4, #0]
 8008eae:	6061      	str	r1, [r4, #4]
 8008eb0:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8008ed0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008ee2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8008f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f040 80a6 	bne.w	8009060 <AT_ESP8266_ND+0x2c08>
 8008f14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f18:	2b13      	cmp	r3, #19
 8008f1a:	f000 80a1 	beq.w	8009060 <AT_ESP8266_ND+0x2c08>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8008f1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8008f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f7f7 f94f 	bl	80001e0 <strcmp>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01b      	beq.n	8008f80 <AT_ESP8266_ND+0x2b28>
 8008f48:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d017      	beq.n	8008f80 <AT_ESP8266_ND+0x2b28>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8008f50:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f54:	2b14      	cmp	r3, #20
 8008f56:	d013      	beq.n	8008f80 <AT_ESP8266_ND+0x2b28>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008f58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	dd78      	ble.n	8009060 <AT_ESP8266_ND+0x2c08>
 8008f6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d16f      	bne.n	8009060 <AT_ESP8266_ND+0x2c08>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8008f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f92:	4293      	cmp	r3, r2
 8008f94:	dd0e      	ble.n	8008fb4 <AT_ESP8266_ND+0x2b5c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008f96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008faa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8008fb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8008fd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8008ff0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f203 4094 	addw	r0, r3, #1172	; 0x494
 800900e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009012:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800901c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009020:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800902a:	2361      	movs	r3, #97	; 0x61
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	2301      	movs	r3, #1
 8009030:	f005 f808 	bl	800e044 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009034:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009038:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009042:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009046:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009050:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009054:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009060:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009064:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800906e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009072:	f040 8478 	bne.w	8009966 <AT_ESP8266_ND+0x350e>
 8009076:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800907a:	2b13      	cmp	r3, #19
 800907c:	d032      	beq.n	80090e4 <AT_ESP8266_ND+0x2c8c>
 800907e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009082:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800908c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009090:	4293      	cmp	r3, r2
 8009092:	dc27      	bgt.n	80090e4 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_disconnect)
 8009094:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009098:	2b0a      	cmp	r3, #10
 800909a:	d023      	beq.n	80090e4 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_fail)
 800909c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d01f      	beq.n	80090e4 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_connected)
 80090a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090a8:	2b0b      	cmp	r3, #11
 80090aa:	d01b      	beq.n	80090e4 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_gotip)
 80090ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090b0:	2b0c      	cmp	r3, #12
 80090b2:	d017      	beq.n	80090e4 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_desconectado)
 80090b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090b8:	2b10      	cmp	r3, #16
 80090ba:	d013      	beq.n	80090e4 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_snd_err)
 80090bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090c0:	2b11      	cmp	r3, #17
 80090c2:	d00f      	beq.n	80090e4 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_enviado_error)
 80090c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090c8:	2b12      	cmp	r3, #18
 80090ca:	d00b      	beq.n	80090e4 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_busy_p)))
 80090cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090d4:	f040 8447 	bne.w	8009966 <AT_ESP8266_ND+0x350e>
 80090d8:	e004      	b.n	80090e4 <AT_ESP8266_ND+0x2c8c>
 80090da:	bf00      	nop
 80090dc:	0800fa0c 	.word	0x0800fa0c
 80090e0:	0800fa18 	.word	0x0800fa18
									a->_debug_count5++;
 80090e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009102:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009106:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009110:	f241 3288 	movw	r2, #5000	; 0x1388
 8009114:	4293      	cmp	r3, r2
 8009116:	dd25      	ble.n	8009164 <AT_ESP8266_ND+0x2d0c>
										a->_debug_count8++;
 8009118:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800911c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800912c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800913a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800914a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009154:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009158:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2200      	movs	r2, #0
 8009160:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009172:	2b02      	cmp	r3, #2
 8009174:	dd10      	ble.n	8009198 <AT_ESP8266_ND+0x2d40>
 8009176:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800917a:	2b10      	cmp	r3, #16
 800917c:	d00c      	beq.n	8009198 <AT_ESP8266_ND+0x2d40>
 800917e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009182:	2b0a      	cmp	r3, #10
 8009184:	d008      	beq.n	8009198 <AT_ESP8266_ND+0x2d40>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8009186:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	220f      	movs	r2, #15
 8009192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009196:	e008      	b.n	80091aa <AT_ESP8266_ND+0x2d52>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80091a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80091aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80091ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80091ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 80091da:	e3c4      	b.n	8009966 <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80091dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 80091ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d16f      	bne.n	80092de <AT_ESP8266_ND+0x2e86>
						{
						a->_pasos=0;
 80091fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2200      	movs	r2, #0
 800920a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800920e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009212:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2201      	movs	r2, #1
 800921a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 800921e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009222:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800922c:	4620      	mov	r0, r4
 800922e:	f7f6 ffe1 	bl	80001f4 <strlen>
 8009232:	4603      	mov	r3, r0
 8009234:	4423      	add	r3, r4
 8009236:	4a7a      	ldr	r2, [pc, #488]	; (8009420 <AT_ESP8266_ND+0x2fc8>)
 8009238:	461c      	mov	r4, r3
 800923a:	4615      	mov	r5, r2
 800923c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800923e:	6020      	str	r0, [r4, #0]
 8009240:	6061      	str	r1, [r4, #4]
 8009242:	60a2      	str	r2, [r4, #8]
 8009244:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009254:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009258:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8009262:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009266:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	335c      	adds	r3, #92	; 0x5c
 800926e:	4618      	mov	r0, r3
 8009270:	f7f6 ffc0 	bl	80001f4 <strlen>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	4629      	mov	r1, r5
 800927a:	4620      	mov	r0, r4
 800927c:	f005 f8d9 	bl	800e432 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009280:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009284:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800928e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009292:	4618      	mov	r0, r3
 8009294:	f7f6 ffae 	bl	80001f4 <strlen>
 8009298:	4602      	mov	r2, r0
 800929a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800929e:	4619      	mov	r1, r3
 80092a0:	4620      	mov	r0, r4
 80092a2:	f005 f8c6 	bl	800e432 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80092a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7f6 ff9d 	bl	80001f4 <strlen>
 80092ba:	4603      	mov	r3, r0
 80092bc:	461a      	mov	r2, r3
 80092be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 80092cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80092da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80092de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80092fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009300:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800930a:	2b00      	cmp	r3, #0
 800930c:	d123      	bne.n	8009356 <AT_ESP8266_ND+0x2efe>
 800930e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009312:	2b0a      	cmp	r3, #10
 8009314:	d02b      	beq.n	800936e <AT_ESP8266_ND+0x2f16>
 8009316:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800931a:	2b0b      	cmp	r3, #11
 800931c:	d027      	beq.n	800936e <AT_ESP8266_ND+0x2f16>
 800931e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009322:	2b0c      	cmp	r3, #12
 8009324:	d023      	beq.n	800936e <AT_ESP8266_ND+0x2f16>
 8009326:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800932a:	2b0e      	cmp	r3, #14
 800932c:	d01f      	beq.n	800936e <AT_ESP8266_ND+0x2f16>
 800932e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009332:	2b0f      	cmp	r3, #15
 8009334:	d01b      	beq.n	800936e <AT_ESP8266_ND+0x2f16>
 8009336:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800933a:	2b10      	cmp	r3, #16
 800933c:	d017      	beq.n	800936e <AT_ESP8266_ND+0x2f16>
 800933e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009342:	2b15      	cmp	r3, #21
 8009344:	d013      	beq.n	800936e <AT_ESP8266_ND+0x2f16>
 8009346:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800934a:	2b16      	cmp	r3, #22
 800934c:	d00f      	beq.n	800936e <AT_ESP8266_ND+0x2f16>
 800934e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009352:	2b17      	cmp	r3, #23
 8009354:	d00b      	beq.n	800936e <AT_ESP8266_ND+0x2f16>
 8009356:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800935a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009364:	f241 3288 	movw	r2, #5000	; 0x1388
 8009368:	4293      	cmp	r3, r2
 800936a:	f340 82fe 	ble.w	800996a <AT_ESP8266_ND+0x3512>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800936e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009372:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800937c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009380:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009384:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009390:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009394:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2200      	movs	r2, #0
 800939c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80093a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 80093b0:	e2db      	b.n	800996a <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80093b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80093ba:	2200      	movs	r2, #0
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	2200      	movs	r2, #0
 80093c0:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 80093c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093c6:	2b10      	cmp	r3, #16
 80093c8:	d007      	beq.n	80093da <AT_ESP8266_ND+0x2f82>
 80093ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093ce:	2b0a      	cmp	r3, #10
 80093d0:	d003      	beq.n	80093da <AT_ESP8266_ND+0x2f82>
 80093d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d124      	bne.n	8009424 <AT_ESP8266_ND+0x2fcc>
				{
					a->_estado=AT_decode;
 80093da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80093e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80093ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 80093fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009400:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 800940c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009410:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 800941c:	e2a7      	b.n	800996e <AT_ESP8266_ND+0x3516>
 800941e:	bf00      	nop
 8009420:	0800fa24 	.word	0x0800fa24
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009432:	2b01      	cmp	r3, #1
 8009434:	f040 8102 	bne.w	800963c <AT_ESP8266_ND+0x31e4>
 8009438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800943c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009446:	2b00      	cmp	r3, #0
 8009448:	f040 80f8 	bne.w	800963c <AT_ESP8266_ND+0x31e4>
										a->_ejecucion=1;
 800944c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009450:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2201      	movs	r2, #1
 8009458:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 800945c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2218      	movs	r2, #24
 8009468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800946c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 800947c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009480:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009490:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 800949a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800949e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80094aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80094ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80094c8:	4620      	mov	r0, r4
 80094ca:	f7f6 fe93 	bl	80001f4 <strlen>
 80094ce:	4603      	mov	r3, r0
 80094d0:	4423      	add	r3, r4
 80094d2:	4a83      	ldr	r2, [pc, #524]	; (80096e0 <AT_ESP8266_ND+0x3288>)
 80094d4:	461c      	mov	r4, r3
 80094d6:	4613      	mov	r3, r2
 80094d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80094da:	6020      	str	r0, [r4, #0]
 80094dc:	6061      	str	r1, [r4, #4]
 80094de:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80094e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 80094ee:	f107 020c 	add.w	r2, r7, #12
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f004 fd71 	bl	800dfdc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80094fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009508:	f107 030c 	add.w	r3, r7, #12
 800950c:	4618      	mov	r0, r3
 800950e:	f7f6 fe71 	bl	80001f4 <strlen>
 8009512:	4602      	mov	r2, r0
 8009514:	f107 030c 	add.w	r3, r7, #12
 8009518:	4619      	mov	r1, r3
 800951a:	4620      	mov	r0, r4
 800951c:	f004 ff89 	bl	800e432 <strncat>
										strncat(a->_uart2snd,",",1);
 8009520:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009524:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800952e:	4620      	mov	r0, r4
 8009530:	f7f6 fe60 	bl	80001f4 <strlen>
 8009534:	4603      	mov	r3, r0
 8009536:	4423      	add	r3, r4
 8009538:	496a      	ldr	r1, [pc, #424]	; (80096e4 <AT_ESP8266_ND+0x328c>)
 800953a:	461a      	mov	r2, r3
 800953c:	460b      	mov	r3, r1
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009542:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009546:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009550:	f107 020c 	add.w	r2, r7, #12
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f004 fd40 	bl	800dfdc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 800955c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009560:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800956a:	f107 030c 	add.w	r3, r7, #12
 800956e:	4618      	mov	r0, r3
 8009570:	f7f6 fe40 	bl	80001f4 <strlen>
 8009574:	4602      	mov	r2, r0
 8009576:	f107 030c 	add.w	r3, r7, #12
 800957a:	4619      	mov	r1, r3
 800957c:	4620      	mov	r0, r4
 800957e:	f004 ff58 	bl	800e432 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009586:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009594:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800959e:	4619      	mov	r1, r3
 80095a0:	4610      	mov	r0, r2
 80095a2:	f005 f827 	bl	800e5f4 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80095a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80095b4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80095b8:	2202      	movs	r2, #2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f004 ff39 	bl	800e432 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80095c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7f6 fe10 	bl	80001f4 <strlen>
 80095d4:	4603      	mov	r3, r0
 80095d6:	461a      	mov	r2, r3
 80095d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80095e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80095f4:	4620      	mov	r0, r4
 80095f6:	f7f6 fdfd 	bl	80001f4 <strlen>
 80095fa:	4603      	mov	r3, r0
 80095fc:	4423      	add	r3, r4
 80095fe:	4a3a      	ldr	r2, [pc, #232]	; (80096e8 <AT_ESP8266_ND+0x3290>)
 8009600:	461c      	mov	r4, r3
 8009602:	4613      	mov	r3, r2
 8009604:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009606:	6020      	str	r0, [r4, #0]
 8009608:	6061      	str	r1, [r4, #4]
 800960a:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 800960c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009610:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009620:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 800962a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800962e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 800963c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009640:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009650:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 800965a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800965e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009668:	2b00      	cmp	r3, #0
 800966a:	f040 80b8 	bne.w	80097de <AT_ESP8266_ND+0x3386>
 800966e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009672:	2b13      	cmp	r3, #19
 8009674:	f000 80b3 	beq.w	80097de <AT_ESP8266_ND+0x3386>
 8009678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800967c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009686:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800968a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7f6 fda2 	bl	80001e0 <strcmp>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d024      	beq.n	80096ec <AT_ESP8266_ND+0x3294>
 80096a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d020      	beq.n	80096ec <AT_ESP8266_ND+0x3294>
 80096aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096ae:	2b14      	cmp	r3, #20
 80096b0:	d01c      	beq.n	80096ec <AT_ESP8266_ND+0x3294>
 80096b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80096c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c4:	4293      	cmp	r3, r2
 80096c6:	f340 808a 	ble.w	80097de <AT_ESP8266_ND+0x3386>
 80096ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80096d8:	2b01      	cmp	r3, #1
 80096da:	f040 8080 	bne.w	80097de <AT_ESP8266_ND+0x3386>
 80096de:	e005      	b.n	80096ec <AT_ESP8266_ND+0x3294>
 80096e0:	0800fa0c 	.word	0x0800fa0c
 80096e4:	0800fa34 	.word	0x0800fa34
 80096e8:	0800fa18 	.word	0x0800fa18
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 80096ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80096fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fe:	4293      	cmp	r3, r2
 8009700:	dd17      	ble.n	8009732 <AT_ESP8266_ND+0x32da>
 8009702:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009706:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009710:	2b01      	cmp	r3, #1
 8009712:	d10e      	bne.n	8009732 <AT_ESP8266_ND+0x32da>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009718:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009728:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009732:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009736:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009746:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009750:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009754:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009764:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 800976e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009772:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2201      	movs	r2, #1
 800977a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 800977e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009782:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f203 4094 	addw	r0, r3, #1172	; 0x494
 800978c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009790:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800979a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800979e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80097a8:	2361      	movs	r3, #97	; 0x61
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	2301      	movs	r3, #1
 80097ae:	f004 fc49 	bl	800e044 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80097b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80097c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80097ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 80097de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ec:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80097f0:	f040 80bd 	bne.w	800996e <AT_ESP8266_ND+0x3516>
 80097f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097f8:	2b13      	cmp	r3, #19
 80097fa:	d02b      	beq.n	8009854 <AT_ESP8266_ND+0x33fc>
 80097fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009800:	2b0b      	cmp	r3, #11
 8009802:	d027      	beq.n	8009854 <AT_ESP8266_ND+0x33fc>
 8009804:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009808:	2b0c      	cmp	r3, #12
 800980a:	d023      	beq.n	8009854 <AT_ESP8266_ND+0x33fc>
 800980c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009810:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800981a:	f241 3288 	movw	r2, #5000	; 0x1388
 800981e:	4293      	cmp	r3, r2
 8009820:	dc18      	bgt.n	8009854 <AT_ESP8266_ND+0x33fc>
 8009822:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009826:	2b0a      	cmp	r3, #10
 8009828:	d014      	beq.n	8009854 <AT_ESP8266_ND+0x33fc>
 800982a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800982e:	2b10      	cmp	r3, #16
 8009830:	d010      	beq.n	8009854 <AT_ESP8266_ND+0x33fc>
 8009832:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009836:	2b11      	cmp	r3, #17
 8009838:	d00c      	beq.n	8009854 <AT_ESP8266_ND+0x33fc>
 800983a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800983e:	2b12      	cmp	r3, #18
 8009840:	d008      	beq.n	8009854 <AT_ESP8266_ND+0x33fc>
 8009842:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009846:	2b16      	cmp	r3, #22
 8009848:	d004      	beq.n	8009854 <AT_ESP8266_ND+0x33fc>
 800984a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800984e:	2b19      	cmp	r3, #25
 8009850:	f040 808d 	bne.w	800996e <AT_ESP8266_ND+0x3516>
									a->_debug_count5++;
 8009854:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009858:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009880:	f241 3288 	movw	r2, #5000	; 0x1388
 8009884:	4293      	cmp	r3, r2
 8009886:	dd25      	ble.n	80098d4 <AT_ESP8266_ND+0x347c>
										a->_debug_count8++;
 8009888:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800988c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800989c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80098a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80098c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80098d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	dd07      	ble.n	80098f6 <AT_ESP8266_ND+0x349e>
 80098e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098ea:	2b10      	cmp	r3, #16
 80098ec:	d003      	beq.n	80098f6 <AT_ESP8266_ND+0x349e>
 80098ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098f2:	2b0a      	cmp	r3, #10
 80098f4:	d108      	bne.n	8009908 <AT_ESP8266_ND+0x34b0>
										a->_estado=AT_decode;	//Devuelvo el estado
 80098f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800990c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009918:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800991c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2200      	movs	r2, #0
 8009924:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009928:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800992c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2200      	movs	r2, #0
 8009934:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009938:	e019      	b.n	800996e <AT_ESP8266_ND+0x3516>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 800993a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800993e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800994c:	e010      	b.n	8009970 <AT_ESP8266_ND+0x3518>
			break;
 800994e:	bf00      	nop
 8009950:	e00e      	b.n	8009970 <AT_ESP8266_ND+0x3518>
			break;
 8009952:	bf00      	nop
 8009954:	e00c      	b.n	8009970 <AT_ESP8266_ND+0x3518>
			break;
 8009956:	bf00      	nop
 8009958:	e00a      	b.n	8009970 <AT_ESP8266_ND+0x3518>
			break;
 800995a:	bf00      	nop
 800995c:	e008      	b.n	8009970 <AT_ESP8266_ND+0x3518>
			break;
 800995e:	bf00      	nop
 8009960:	e006      	b.n	8009970 <AT_ESP8266_ND+0x3518>
			break;
 8009962:	bf00      	nop
 8009964:	e004      	b.n	8009970 <AT_ESP8266_ND+0x3518>
			break;
 8009966:	bf00      	nop
 8009968:	e002      	b.n	8009970 <AT_ESP8266_ND+0x3518>
			break;
 800996a:	bf00      	nop
 800996c:	e000      	b.n	8009970 <AT_ESP8266_ND+0x3518>
			break;
 800996e:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009970:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009974:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009980:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009984:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2200      	movs	r2, #0
 800998c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009990:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009994:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 800999e:	4618      	mov	r0, r3
 80099a0:	f507 7715 	add.w	r7, r7, #596	; 0x254
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099a8 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099ba:	f240 328d 	movw	r2, #909	; 0x38d
 80099be:	4293      	cmp	r3, r2
 80099c0:	f001 8430 	beq.w	800b224 <WiFi_Conn_ND+0x187c>
 80099c4:	f240 328d 	movw	r2, #909	; 0x38d
 80099c8:	4293      	cmp	r3, r2
 80099ca:	f301 84c5 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 80099ce:	f240 3289 	movw	r2, #905	; 0x389
 80099d2:	4293      	cmp	r3, r2
 80099d4:	f001 839d 	beq.w	800b112 <WiFi_Conn_ND+0x176a>
 80099d8:	f240 3289 	movw	r2, #905	; 0x389
 80099dc:	4293      	cmp	r3, r2
 80099de:	f301 84bb 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 80099e2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80099e6:	f001 828c 	beq.w	800af02 <WiFi_Conn_ND+0x155a>
 80099ea:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80099ee:	f301 84b3 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 80099f2:	f240 3229 	movw	r2, #809	; 0x329
 80099f6:	4293      	cmp	r3, r2
 80099f8:	f301 84ae 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 80099fc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009a00:	f280 80a5 	bge.w	8009b4e <WiFi_Conn_ND+0x1a6>
 8009a04:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	f000 87c0 	beq.w	800a98e <WiFi_Conn_ND+0xfe6>
 8009a0e:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009a12:	4293      	cmp	r3, r2
 8009a14:	f301 84a0 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009a18:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	f000 8741 	beq.w	800a8a4 <WiFi_Conn_ND+0xefc>
 8009a22:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009a26:	4293      	cmp	r3, r2
 8009a28:	f301 8496 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009a2c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009a30:	f000 866b 	beq.w	800a70a <WiFi_Conn_ND+0xd62>
 8009a34:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009a38:	f301 848e 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009a3c:	f240 2261 	movw	r2, #609	; 0x261
 8009a40:	4293      	cmp	r3, r2
 8009a42:	f000 85ec 	beq.w	800a61e <WiFi_Conn_ND+0xc76>
 8009a46:	f240 2261 	movw	r2, #609	; 0x261
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	f301 8484 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009a50:	f240 225d 	movw	r2, #605	; 0x25d
 8009a54:	4293      	cmp	r3, r2
 8009a56:	f000 8582 	beq.w	800a55e <WiFi_Conn_ND+0xbb6>
 8009a5a:	f240 225d 	movw	r2, #605	; 0x25d
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	f301 847a 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009a64:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009a68:	f000 8500 	beq.w	800a46c <WiFi_Conn_ND+0xac4>
 8009a6c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009a70:	f301 8472 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009a74:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	f000 8496 	beq.w	800a3aa <WiFi_Conn_ND+0xa02>
 8009a7e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009a82:	f281 8469 	bge.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009a86:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	f000 844c 	beq.w	800a328 <WiFi_Conn_ND+0x980>
 8009a90:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009a94:	f281 8460 	bge.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009a98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009a9c:	f000 83d7 	beq.w	800a24e <WiFi_Conn_ND+0x8a6>
 8009aa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009aa4:	f301 8458 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009aa8:	f240 1299 	movw	r2, #409	; 0x199
 8009aac:	4293      	cmp	r3, r2
 8009aae:	f000 8378 	beq.w	800a1a2 <WiFi_Conn_ND+0x7fa>
 8009ab2:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009ab6:	f281 844f 	bge.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009aba:	f240 1295 	movw	r2, #405	; 0x195
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	f000 8333 	beq.w	800a12a <WiFi_Conn_ND+0x782>
 8009ac4:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009ac8:	f281 8446 	bge.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009acc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ad0:	f000 82aa 	beq.w	800a028 <WiFi_Conn_ND+0x680>
 8009ad4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ad8:	f301 843e 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009adc:	f240 1235 	movw	r2, #309	; 0x135
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	f000 827b 	beq.w	8009fdc <WiFi_Conn_ND+0x634>
 8009ae6:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009aea:	f281 8435 	bge.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009aee:	f240 1231 	movw	r2, #305	; 0x131
 8009af2:	4293      	cmp	r3, r2
 8009af4:	f000 826d 	beq.w	8009fd2 <WiFi_Conn_ND+0x62a>
 8009af8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009afc:	f281 842c 	bge.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009b00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009b04:	f000 8211 	beq.w	8009f2a <WiFi_Conn_ND+0x582>
 8009b08:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009b0c:	f301 8424 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009b10:	2bd1      	cmp	r3, #209	; 0xd1
 8009b12:	f000 81a5 	beq.w	8009e60 <WiFi_Conn_ND+0x4b8>
 8009b16:	2bd1      	cmp	r3, #209	; 0xd1
 8009b18:	f301 841e 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009b1c:	2bcd      	cmp	r3, #205	; 0xcd
 8009b1e:	f000 8175 	beq.w	8009e0c <WiFi_Conn_ND+0x464>
 8009b22:	2bcd      	cmp	r3, #205	; 0xcd
 8009b24:	f301 8418 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009b28:	2bc8      	cmp	r3, #200	; 0xc8
 8009b2a:	f000 80f1 	beq.w	8009d10 <WiFi_Conn_ND+0x368>
 8009b2e:	2bc8      	cmp	r3, #200	; 0xc8
 8009b30:	f301 8412 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009b34:	2b6d      	cmp	r3, #109	; 0x6d
 8009b36:	f000 80b3 	beq.w	8009ca0 <WiFi_Conn_ND+0x2f8>
 8009b3a:	2b6d      	cmp	r3, #109	; 0x6d
 8009b3c:	f301 840c 	bgt.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009b40:	2b64      	cmp	r3, #100	; 0x64
 8009b42:	d021      	beq.n	8009b88 <WiFi_Conn_ND+0x1e0>
 8009b44:	2b69      	cmp	r3, #105	; 0x69
 8009b46:	f000 8096 	beq.w	8009c76 <WiFi_Conn_ND+0x2ce>
 8009b4a:	f001 bc05 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009b4e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	f201 8400 	bhi.w	800b358 <WiFi_Conn_ND+0x19b0>
 8009b58:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <WiFi_Conn_ND+0x1b8>)
 8009b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5e:	bf00      	nop
 8009b60:	0800aaa5 	.word	0x0800aaa5
 8009b64:	0800b359 	.word	0x0800b359
 8009b68:	0800b359 	.word	0x0800b359
 8009b6c:	0800b359 	.word	0x0800b359
 8009b70:	0800b359 	.word	0x0800b359
 8009b74:	0800ab73 	.word	0x0800ab73
 8009b78:	0800ac1d 	.word	0x0800ac1d
 8009b7c:	0800acc7 	.word	0x0800acc7
 8009b80:	0800ad71 	.word	0x0800ad71
 8009b84:	0800ae1b 	.word	0x0800ae1b
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b8e:	2b64      	cmp	r3, #100	; 0x64
 8009b90:	d046      	beq.n	8009c20 <WiFi_Conn_ND+0x278>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d041      	beq.n	8009c20 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba2:	2b1c      	cmp	r3, #28
 8009ba4:	d03c      	beq.n	8009c20 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d037      	beq.n	8009c20 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	d032      	beq.n	8009c20 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc0:	2b13      	cmp	r3, #19
 8009bc2:	d02d      	beq.n	8009c20 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7fc fab1 	bl	800612c <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d14e      	bne.n	8009c72 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f7fc fc3f 	bl	8006458 <AT_ESP8266_ND>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d109      	bne.n	8009c08 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009c00:	4619      	mov	r1, r3
 8009c02:	4610      	mov	r0, r2
 8009c04:	f7f7 fb82 	bl	800130c <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	2364      	movs	r3, #100	; 0x64
 8009c18:	68b8      	ldr	r0, [r7, #8]
 8009c1a:	f7fb fa0b 	bl	8005034 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009c1e:	e028      	b.n	8009c72 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d004      	beq.n	8009c34 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009c30:	2b1c      	cmp	r3, #28
 8009c32:	d103      	bne.n	8009c3c <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	226d      	movs	r2, #109	; 0x6d
 8009c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d00f      	beq.n	8009c66 <WiFi_Conn_ND+0x2be>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d00a      	beq.n	8009c66 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c56:	2b0b      	cmp	r3, #11
 8009c58:	d005      	beq.n	8009c66 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c60:	2b0c      	cmp	r3, #12
 8009c62:	f041 834a 	bne.w	800b2fa <WiFi_Conn_ND+0x1952>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2269      	movs	r2, #105	; 0x69
 8009c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009c6e:	f001 bb44 	b.w	800b2fa <WiFi_Conn_ND+0x1952>
 8009c72:	f001 bb42 	b.w	800b2fa <WiFi_Conn_ND+0x1952>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7fc fa58 	bl	800612c <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2264      	movs	r2, #100	; 0x64
 8009c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009c9c:	f001 bb5c 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00c      	beq.n	8009cc4 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7fc fa6a 	bl	8006184 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009cc2:	e00e      	b.n	8009ce2 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7fc fa47 	bl	8006158 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	22c8      	movs	r2, #200	; 0xc8
 8009cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	f041 8308 	bne.w	800b2fe <WiFi_Conn_ND+0x1956>
					{
						Cambiar_CWMODE(b);
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f7fc fa1c 	bl	800612c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2264      	movs	r2, #100	; 0x64
 8009cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009d0c:	f001 baf7 	b.w	800b2fe <WiFi_Conn_ND+0x1956>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d16:	2bc8      	cmp	r3, #200	; 0xc8
 8009d18:	d04f      	beq.n	8009dba <WiFi_Conn_ND+0x412>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d04a      	beq.n	8009dba <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d045      	beq.n	8009dba <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d040      	beq.n	8009dba <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d03b      	beq.n	8009dba <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d48:	2b0a      	cmp	r3, #10
 8009d4a:	d036      	beq.n	8009dba <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d52:	2b0b      	cmp	r3, #11
 8009d54:	d031      	beq.n	8009dba <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d5c:	2b0c      	cmp	r3, #12
 8009d5e:	d02c      	beq.n	8009dba <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f7fc f9f9 	bl	8006158 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d124      	bne.n	8009dba <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f7fc fb71 	bl	8006458 <AT_ESP8266_ND>
 8009d76:	4602      	mov	r2, r0
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d109      	bne.n	8009da4 <WiFi_Conn_ND+0x3fc>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7f7 fab4 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	2364      	movs	r3, #100	; 0x64
 8009db4:	68b8      	ldr	r0, [r7, #8]
 8009db6:	f7fb f93d 	bl	8005034 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d004      	beq.n	8009dce <WiFi_Conn_ND+0x426>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dca:	2b0c      	cmp	r3, #12
 8009dcc:	d103      	bne.n	8009dd6 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	22d1      	movs	r2, #209	; 0xd1
 8009dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d00f      	beq.n	8009e00 <WiFi_Conn_ND+0x458>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d00a      	beq.n	8009e00 <WiFi_Conn_ND+0x458>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df0:	2b20      	cmp	r3, #32
 8009df2:	d005      	beq.n	8009e00 <WiFi_Conn_ND+0x458>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dfa:	2b0a      	cmp	r3, #10
 8009dfc:	f041 8281 	bne.w	800b302 <WiFi_Conn_ND+0x195a>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	22cd      	movs	r2, #205	; 0xcd
 8009e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009e08:	f001 ba7b 	b.w	800b302 <WiFi_Conn_ND+0x195a>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009e0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009e10:	f7f8 fc5c 	bl	80026cc <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f7fc f99f 	bl	8006158 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	22c8      	movs	r2, #200	; 0xc8
 8009e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	f041 8264 	bne.w	800b306 <WiFi_Conn_ND+0x195e>
					{
						Cambiar_CWMODE(b);
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f7fc f974 	bl	800612c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2264      	movs	r2, #100	; 0x64
 8009e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009e5c:	f001 ba53 	b.w	800b306 <WiFi_Conn_ND+0x195e>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d108      	bne.n	8009e84 <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f240 3229 	movw	r2, #809	; 0x329
 8009e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8a:	2b0a      	cmp	r3, #10
 8009e8c:	d009      	beq.n	8009ea2 <WiFi_Conn_ND+0x4fa>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e94:	2b0d      	cmp	r3, #13
 8009e96:	d004      	beq.n	8009ea2 <WiFi_Conn_ND+0x4fa>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	d10a      	bne.n	8009eb8 <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7fc f958 	bl	8006158 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	22c8      	movs	r2, #200	; 0xc8
 8009eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	d10e      	bne.n	8009ee0 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f7fc f932 	bl	800612c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2264      	movs	r2, #100	; 0x64
 8009ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d011      	beq.n	8009f0e <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7fc f9a2 	bl	8006234 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009f0a:	f001 ba25 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f7fc f938 	bl	8006184 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009f26:	f001 ba17 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f34:	d03b      	beq.n	8009fae <WiFi_Conn_ND+0x606>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f3c:	2b04      	cmp	r3, #4
 8009f3e:	d036      	beq.n	8009fae <WiFi_Conn_ND+0x606>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f46:	2b0a      	cmp	r3, #10
 8009f48:	d031      	beq.n	8009fae <WiFi_Conn_ND+0x606>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f50:	2b0d      	cmp	r3, #13
 8009f52:	d02c      	beq.n	8009fae <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7fc f941 	bl	80061dc <DesconectarWIFI>
						if(b->_enviaruart==1)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d124      	bne.n	8009fae <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f7fc fa77 	bl	8006458 <AT_ESP8266_ND>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d109      	bne.n	8009f98 <WiFi_Conn_ND+0x5f0>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f7f7 f9ba 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	2364      	movs	r3, #100	; 0x64
 8009fa8:	68b8      	ldr	r0, [r7, #8]
 8009faa:	f7fb f843 	bl	8005034 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb4:	2b0a      	cmp	r3, #10
 8009fb6:	d005      	beq.n	8009fc4 <WiFi_Conn_ND+0x61c>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fbe:	2b0d      	cmp	r3, #13
 8009fc0:	f041 81a3 	bne.w	800b30a <WiFi_Conn_ND+0x1962>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f240 1235 	movw	r2, #309	; 0x135
 8009fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009fce:	f001 b99c 	b.w	800b30a <WiFi_Conn_ND+0x1962>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f7fc f894 	bl	8006100 <NOP>
			}
			break;
 8009fd8:	f001 b9be 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f7fc f8b7 	bl	8006158 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	22c8      	movs	r2, #200	; 0xc8
 8009fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a000:	2b04      	cmp	r3, #4
 800a002:	f041 8184 	bne.w	800b30e <WiFi_Conn_ND+0x1966>
					{
						Cambiar_CWMODE(b);
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7fc f890 	bl	800612c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2264      	movs	r2, #100	; 0x64
 800a010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a024:	f001 b973 	b.w	800b30e <WiFi_Conn_ND+0x1966>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a032:	d04f      	beq.n	800a0d4 <WiFi_Conn_ND+0x72c>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d04a      	beq.n	800a0d4 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a044:	2b01      	cmp	r3, #1
 800a046:	d045      	beq.n	800a0d4 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d040      	beq.n	800a0d4 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a058:	2b07      	cmp	r3, #7
 800a05a:	d03b      	beq.n	800a0d4 <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a062:	2b08      	cmp	r3, #8
 800a064:	d036      	beq.n	800a0d4 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06c:	2b1e      	cmp	r3, #30
 800a06e:	d031      	beq.n	800a0d4 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a076:	2b1f      	cmp	r3, #31
 800a078:	d02c      	beq.n	800a0d4 <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7fc f882 	bl	8006184 <MUX>
						if(b->_enviaruart==1)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a086:	2b01      	cmp	r3, #1
 800a088:	d124      	bne.n	800a0d4 <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f7fc f9e4 	bl	8006458 <AT_ESP8266_ND>
 800a090:	4602      	mov	r2, r0
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d109      	bne.n	800a0be <WiFi_Conn_ND+0x716>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f7f7 f927 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	2364      	movs	r3, #100	; 0x64
 800a0ce:	68b8      	ldr	r0, [r7, #8]
 800a0d0:	f7fa ffb0 	bl	8005034 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d009      	beq.n	800a0f2 <WiFi_Conn_ND+0x74a>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e4:	2b07      	cmp	r3, #7
 800a0e6:	d004      	beq.n	800a0f2 <WiFi_Conn_ND+0x74a>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ee:	2b08      	cmp	r3, #8
 800a0f0:	d104      	bne.n	800a0fc <WiFi_Conn_ND+0x754>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f240 1299 	movw	r2, #409	; 0x199
 800a0f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a102:	2b02      	cmp	r3, #2
 800a104:	d00a      	beq.n	800a11c <WiFi_Conn_ND+0x774>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10c:	2b1e      	cmp	r3, #30
 800a10e:	d005      	beq.n	800a11c <WiFi_Conn_ND+0x774>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a116:	2b1f      	cmp	r3, #31
 800a118:	f041 80fb 	bne.w	800b312 <WiFi_Conn_ND+0x196a>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f240 1295 	movw	r2, #405	; 0x195
 800a122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a126:	f001 b8f4 	b.w	800b312 <WiFi_Conn_ND+0x196a>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f7fb ffe8 	bl	8006100 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a136:	2b04      	cmp	r3, #4
 800a138:	d112      	bne.n	800a160 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f7fb fff6 	bl	800612c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2264      	movs	r2, #100	; 0x64
 800a144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a166:	2b0a      	cmp	r3, #10
 800a168:	d00a      	beq.n	800a180 <WiFi_Conn_ND+0x7d8>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a170:	2b0d      	cmp	r3, #13
 800a172:	d005      	beq.n	800a180 <WiFi_Conn_ND+0x7d8>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	f041 80cb 	bne.w	800b316 <WiFi_Conn_ND+0x196e>
				{
					ConectarWIFI(b);
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7fb ffe9 	bl	8006158 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	22c8      	movs	r2, #200	; 0xc8
 800a18a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a19e:	f001 b8ba 	b.w	800b316 <WiFi_Conn_ND+0x196e>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f7fb ffac 	bl	8006100 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d10e      	bne.n	800a1d8 <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7fb ffb6 	bl	800612c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2264      	movs	r2, #100	; 0x64
 800a1c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1de:	2b0a      	cmp	r3, #10
 800a1e0:	d009      	beq.n	800a1f6 <WiFi_Conn_ND+0x84e>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e8:	2b0d      	cmp	r3, #13
 800a1ea:	d004      	beq.n	800a1f6 <WiFi_Conn_ND+0x84e>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d10a      	bne.n	800a20c <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7fb ffae 	bl	8006158 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	22c8      	movs	r2, #200	; 0xc8
 800a200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10d      	bne.n	800a232 <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7fb ffca 	bl	80061b0 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a22e:	f001 b893 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
						IPDef(b);
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7fb ffbc 	bl	80061b0 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a24a:	f001 b885 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a254:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a258:	d045      	beq.n	800a2e6 <WiFi_Conn_ND+0x93e>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a260:	2b04      	cmp	r3, #4
 800a262:	d040      	beq.n	800a2e6 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d03b      	beq.n	800a2e6 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a274:	2b02      	cmp	r3, #2
 800a276:	d036      	beq.n	800a2e6 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27e:	2b1b      	cmp	r3, #27
 800a280:	d031      	beq.n	800a2e6 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a288:	2b21      	cmp	r3, #33	; 0x21
 800a28a:	d02c      	beq.n	800a2e6 <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f7fb ff8f 	bl	80061b0 <IPDef>
						if(b->_enviaruart==1)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d124      	bne.n	800a2e6 <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7fc f8db 	bl	8006458 <AT_ESP8266_ND>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d109      	bne.n	800a2d0 <WiFi_Conn_ND+0x928>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	f7f7 f81e 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	2364      	movs	r3, #100	; 0x64
 800a2e0:	68b8      	ldr	r0, [r7, #8]
 800a2e2:	f7fa fea7 	bl	8005034 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d004      	beq.n	800a2fa <WiFi_Conn_ND+0x952>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f6:	2b1b      	cmp	r3, #27
 800a2f8:	d104      	bne.n	800a304 <WiFi_Conn_ND+0x95c>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d005      	beq.n	800a31a <WiFi_Conn_ND+0x972>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a314:	2b21      	cmp	r3, #33	; 0x21
 800a316:	f041 8000 	bne.w	800b31a <WiFi_Conn_ND+0x1972>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a324:	f000 bff9 	b.w	800b31a <WiFi_Conn_ND+0x1972>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7fb fee9 	bl	8006100 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a334:	2b04      	cmp	r3, #4
 800a336:	d004      	beq.n	800a342 <WiFi_Conn_ND+0x99a>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d112      	bne.n	800a368 <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7fb fef2 	bl	800612c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2264      	movs	r2, #100	; 0x64
 800a34c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a36e:	2b0a      	cmp	r3, #10
 800a370:	d00a      	beq.n	800a388 <WiFi_Conn_ND+0x9e0>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a378:	2b0d      	cmp	r3, #13
 800a37a:	d005      	beq.n	800a388 <WiFi_Conn_ND+0x9e0>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a382:	2b03      	cmp	r3, #3
 800a384:	f040 87cb 	bne.w	800b31e <WiFi_Conn_ND+0x1976>
				{
					ConectarWIFI(b);
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f7fb fee5 	bl	8006158 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	22c8      	movs	r2, #200	; 0xc8
 800a392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a3a6:	f000 bfba 	b.w	800b31e <WiFi_Conn_ND+0x1976>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7fb fea8 	bl	8006100 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b6:	2b04      	cmp	r3, #4
 800a3b8:	d112      	bne.n	800a3e0 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7fb feb6 	bl	800612c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2264      	movs	r2, #100	; 0x64
 800a3c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e6:	2b0a      	cmp	r3, #10
 800a3e8:	d009      	beq.n	800a3fe <WiFi_Conn_ND+0xa56>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f0:	2b0d      	cmp	r3, #13
 800a3f2:	d004      	beq.n	800a3fe <WiFi_Conn_ND+0xa56>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d10e      	bne.n	800a41c <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f7fb feaa 	bl	8006158 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	22c8      	movs	r2, #200	; 0xc8
 800a408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a422:	2b00      	cmp	r3, #0
 800a424:	d111      	bne.n	800a44a <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7fb feee 	bl	8006208 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800a446:	f000 bf87 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
						ConectarWIFI(b);//
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7fb fe84 	bl	8006158 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	22c8      	movs	r2, #200	; 0xc8
 800a454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a468:	f000 bf76 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a472:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a476:	d04a      	beq.n	800a50e <WiFi_Conn_ND+0xb66>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d045      	beq.n	800a50e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d040      	beq.n	800a50e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a492:	2b0a      	cmp	r3, #10
 800a494:	d03b      	beq.n	800a50e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49c:	2b0e      	cmp	r3, #14
 800a49e:	d036      	beq.n	800a50e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a6:	2b0f      	cmp	r3, #15
 800a4a8:	d031      	beq.n	800a50e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b0:	2b10      	cmp	r3, #16
 800a4b2:	d02c      	beq.n	800a50e <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7fb fea7 	bl	8006208 <ConectarTCP>
						if(b->_enviaruart==1)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d124      	bne.n	800a50e <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7fb ffc7 	bl	8006458 <AT_ESP8266_ND>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d109      	bne.n	800a4f8 <WiFi_Conn_ND+0xb50>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f7f6 ff0a 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a504:	b29a      	uxth	r2, r3
 800a506:	2364      	movs	r3, #100	; 0x64
 800a508:	68b8      	ldr	r0, [r7, #8]
 800a50a:	f7fa fd93 	bl	8005034 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a514:	2b01      	cmp	r3, #1
 800a516:	d009      	beq.n	800a52c <WiFi_Conn_ND+0xb84>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51e:	2b0e      	cmp	r3, #14
 800a520:	d004      	beq.n	800a52c <WiFi_Conn_ND+0xb84>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a528:	2b0f      	cmp	r3, #15
 800a52a:	d106      	bne.n	800a53a <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f240 2261 	movw	r2, #609	; 0x261
 800a532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a536:	f000 bef4 	b.w	800b322 <WiFi_Conn_ND+0x197a>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a540:	2b02      	cmp	r3, #2
 800a542:	d005      	beq.n	800a550 <WiFi_Conn_ND+0xba8>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54a:	2b10      	cmp	r3, #16
 800a54c:	f040 86e9 	bne.w	800b322 <WiFi_Conn_ND+0x197a>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f240 225d 	movw	r2, #605	; 0x25d
 800a556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a55a:	f000 bee2 	b.w	800b322 <WiFi_Conn_ND+0x197a>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f7fb fdce 	bl	8006100 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d112      	bne.n	800a594 <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7fb fddc 	bl	800612c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2264      	movs	r2, #100	; 0x64
 800a578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a59a:	2b0a      	cmp	r3, #10
 800a59c:	d013      	beq.n	800a5c6 <WiFi_Conn_ND+0xc1e>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a4:	2b0d      	cmp	r3, #13
 800a5a6:	d00e      	beq.n	800a5c6 <WiFi_Conn_ND+0xc1e>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ae:	2b22      	cmp	r3, #34	; 0x22
 800a5b0:	d009      	beq.n	800a5c6 <WiFi_Conn_ND+0xc1e>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d004      	beq.n	800a5c6 <WiFi_Conn_ND+0xc1e>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d10e      	bne.n	800a5e4 <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f7fb fdc6 	bl	8006158 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	22c8      	movs	r2, #200	; 0xc8
 800a5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ea:	2b10      	cmp	r3, #16
 800a5ec:	d005      	beq.n	800a5fa <WiFi_Conn_ND+0xc52>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f4:	2b0e      	cmp	r3, #14
 800a5f6:	f040 8696 	bne.w	800b326 <WiFi_Conn_ND+0x197e>
				{
					ConectarTCP(b);
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7fb fe04 	bl	8006208 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a61a:	f000 be84 	b.w	800b326 <WiFi_Conn_ND+0x197e>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7fb fd6e 	bl	8006100 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d112      	bne.n	800a654 <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f7fb fd7c 	bl	800612c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2264      	movs	r2, #100	; 0x64
 800a638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65a:	2b0a      	cmp	r3, #10
 800a65c:	d009      	beq.n	800a672 <WiFi_Conn_ND+0xcca>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a664:	2b0d      	cmp	r3, #13
 800a666:	d004      	beq.n	800a672 <WiFi_Conn_ND+0xcca>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d10e      	bne.n	800a690 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7fb fd70 	bl	8006158 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	22c8      	movs	r2, #200	; 0xc8
 800a67c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a696:	2b02      	cmp	r3, #2
 800a698:	d004      	beq.n	800a6a4 <WiFi_Conn_ND+0xcfc>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a0:	2b10      	cmp	r3, #16
 800a6a2:	d10f      	bne.n	800a6c4 <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7fb fdaf 	bl	8006208 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a6b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ca:	2b0e      	cmp	r3, #14
 800a6cc:	d005      	beq.n	800a6da <WiFi_Conn_ND+0xd32>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d4:	2b0f      	cmp	r3, #15
 800a6d6:	f040 8628 	bne.w	800b32a <WiFi_Conn_ND+0x1982>
					{
						if(b->_automatizacion >= WF_SEND )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	f240 8622 	bls.w	800b32a <WiFi_Conn_ND+0x1982>
						{
							EnviarDatos(b);
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7fb fdd0 	bl	800628c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a706:	f000 be10 	b.w	800b32a <WiFi_Conn_ND+0x1982>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a710:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a714:	d054      	beq.n	800a7c0 <WiFi_Conn_ND+0xe18>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d04f      	beq.n	800a7c0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a726:	2b0a      	cmp	r3, #10
 800a728:	d04a      	beq.n	800a7c0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a730:	2b10      	cmp	r3, #16
 800a732:	d045      	beq.n	800a7c0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73a:	2b11      	cmp	r3, #17
 800a73c:	d040      	beq.n	800a7c0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a744:	2b14      	cmp	r3, #20
 800a746:	d03b      	beq.n	800a7c0 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a74e:	2b12      	cmp	r3, #18
 800a750:	d036      	beq.n	800a7c0 <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d907      	bls.n	800a76c <WiFi_Conn_ND+0xdc4>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a762:	2b00      	cmp	r3, #0
 800a764:	d002      	beq.n	800a76c <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7fb fd90 	bl	800628c <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a772:	2b01      	cmp	r3, #1
 800a774:	d124      	bne.n	800a7c0 <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7fb fe6e 	bl	8006458 <AT_ESP8266_ND>
 800a77c:	4602      	mov	r2, r0
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a792:	2b01      	cmp	r3, #1
 800a794:	d109      	bne.n	800a7aa <WiFi_Conn_ND+0xe02>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	f7f6 fdb1 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	2364      	movs	r3, #100	; 0x64
 800a7ba:	68b8      	ldr	r0, [r7, #8]
 800a7bc:	f7fa fc3a 	bl	8005034 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a7ca:	d13b      	bne.n	800a844 <WiFi_Conn_ND+0xe9c>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d136      	bne.n	800a844 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_error)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d031      	beq.n	800a844 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_wifi_disconnect)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e6:	2b0a      	cmp	r3, #10
 800a7e8:	d02c      	beq.n	800a844 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_desconectado)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d027      	beq.n	800a844 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_snd_err)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fa:	2b11      	cmp	r3, #17
 800a7fc:	d022      	beq.n	800a844 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a804:	2b12      	cmp	r3, #18
 800a806:	d01d      	beq.n	800a844 <WiFi_Conn_ND+0xe9c>
							{
								b->_enviaruart=0;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a816:	2b01      	cmp	r3, #1
 800a818:	d109      	bne.n	800a82e <WiFi_Conn_ND+0xe86>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7f6 fd6f 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	2364      	movs	r3, #100	; 0x64
 800a83e:	68b8      	ldr	r0, [r7, #8]
 800a840:	f7fa fbf8 	bl	8005034 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a84a:	2b13      	cmp	r3, #19
 800a84c:	d104      	bne.n	800a858 <WiFi_Conn_ND+0xeb0>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d019      	beq.n	800a896 <WiFi_Conn_ND+0xeee>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a868:	2b0a      	cmp	r3, #10
 800a86a:	d014      	beq.n	800a896 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_fail)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a872:	2b03      	cmp	r3, #3
 800a874:	d00f      	beq.n	800a896 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_desconectado)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a87c:	2b10      	cmp	r3, #16
 800a87e:	d00a      	beq.n	800a896 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_snd_err)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a886:	2b11      	cmp	r3, #17
 800a888:	d005      	beq.n	800a896 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_enviado_error))
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a890:	2b12      	cmp	r3, #18
 800a892:	f040 854c 	bne.w	800b32e <WiFi_Conn_ND+0x1986>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a89c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a8a0:	f000 bd45 	b.w	800b32e <WiFi_Conn_ND+0x1986>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7fb fc2b 	bl	8006100 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b0:	2b04      	cmp	r3, #4
 800a8b2:	d112      	bne.n	800a8da <WiFi_Conn_ND+0xf32>
				{
					Cambiar_CWMODE(b);
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f7fb fc39 	bl	800612c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2264      	movs	r2, #100	; 0x64
 800a8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e0:	2b0a      	cmp	r3, #10
 800a8e2:	d009      	beq.n	800a8f8 <WiFi_Conn_ND+0xf50>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ea:	2b0d      	cmp	r3, #13
 800a8ec:	d004      	beq.n	800a8f8 <WiFi_Conn_ND+0xf50>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f4:	2b03      	cmp	r3, #3
 800a8f6:	d10e      	bne.n	800a916 <WiFi_Conn_ND+0xf6e>
				{
					ConectarWIFI(b);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7fb fc2d 	bl	8006158 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	22c8      	movs	r2, #200	; 0xc8
 800a902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91c:	2b0c      	cmp	r3, #12
 800a91e:	d10f      	bne.n	800a940 <WiFi_Conn_ND+0xf98>
				{
					ConectarTCP(b);
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7fb fc71 	bl	8006208 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a92c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a946:	2b02      	cmp	r3, #2
 800a948:	d00f      	beq.n	800a96a <WiFi_Conn_ND+0xfc2>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a950:	2b10      	cmp	r3, #16
 800a952:	d00a      	beq.n	800a96a <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_snd_err)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95a:	2b11      	cmp	r3, #17
 800a95c:	d005      	beq.n	800a96a <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a964:	2b12      	cmp	r3, #18
 800a966:	f040 84e4 	bne.w	800b332 <WiFi_Conn_ND+0x198a>
				{
					ConectarTCP(b);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7fb fc4c 	bl	8006208 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a98a:	f000 bcd2 	b.w	800b332 <WiFi_Conn_ND+0x198a>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7fb fbb6 	bl	8006100 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99a:	2b04      	cmp	r3, #4
 800a99c:	d112      	bne.n	800a9c4 <WiFi_Conn_ND+0x101c>
					{
						Cambiar_CWMODE(b);
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f7fb fbc4 	bl	800612c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2264      	movs	r2, #100	; 0x64
 800a9a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ca:	2b0a      	cmp	r3, #10
 800a9cc:	d009      	beq.n	800a9e2 <WiFi_Conn_ND+0x103a>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d4:	2b0d      	cmp	r3, #13
 800a9d6:	d004      	beq.n	800a9e2 <WiFi_Conn_ND+0x103a>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9de:	2b03      	cmp	r3, #3
 800a9e0:	d10e      	bne.n	800aa00 <WiFi_Conn_ND+0x1058>
					{
						ConectarWIFI(b);
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f7fb fbb8 	bl	8006158 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	22c8      	movs	r2, #200	; 0xc8
 800a9ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d00e      	beq.n	800aa28 <WiFi_Conn_ND+0x1080>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa10:	2b0b      	cmp	r3, #11
 800aa12:	d009      	beq.n	800aa28 <WiFi_Conn_ND+0x1080>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1a:	2b0c      	cmp	r3, #12
 800aa1c:	d004      	beq.n	800aa28 <WiFi_Conn_ND+0x1080>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa24:	2b10      	cmp	r3, #16
 800aa26:	d10f      	bne.n	800aa48 <WiFi_Conn_ND+0x10a0>
					{
						ConectarTCP(b);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f7fb fbed 	bl	8006208 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800aa48:	20c8      	movs	r0, #200	; 0xc8
 800aa4a:	f7f7 fe3f 	bl	80026cc <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d916      	bls.n	800aa86 <WiFi_Conn_ND+0x10de>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d011      	beq.n	800aa86 <WiFi_Conn_ND+0x10de>
					{
							EnviarDatos(b);
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7fb fc12 	bl	800628c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800aa6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800aa82:	f000 bc69 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
							b->_estado_conexion=TCP_CONN_OK;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f240 2261 	movw	r2, #609	; 0x261
 800aa8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800aaa0:	f000 bc5a 	b.w	800b358 <WiFi_Conn_ND+0x19b0>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaaa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aaae:	d045      	beq.n	800ab3c <WiFi_Conn_ND+0x1194>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d040      	beq.n	800ab3c <WiFi_Conn_ND+0x1194>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac0:	2b0a      	cmp	r3, #10
 800aac2:	d03b      	beq.n	800ab3c <WiFi_Conn_ND+0x1194>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaca:	2b15      	cmp	r3, #21
 800aacc:	d036      	beq.n	800ab3c <WiFi_Conn_ND+0x1194>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad4:	2b16      	cmp	r3, #22
 800aad6:	d031      	beq.n	800ab3c <WiFi_Conn_ND+0x1194>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aade:	2b17      	cmp	r3, #23
 800aae0:	d02c      	beq.n	800ab3c <WiFi_Conn_ND+0x1194>
							{
								CrearServidorTCP(b);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7fb fba6 	bl	8006234 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d124      	bne.n	800ab3c <WiFi_Conn_ND+0x1194>
										{
											b->_estado=AT_ESP8266_ND(b);
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7fb fcb0 	bl	8006458 <AT_ESP8266_ND>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d109      	bne.n	800ab26 <WiFi_Conn_ND+0x117e>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4610      	mov	r0, r2
 800ab22:	f7f6 fbf3 	bl	800130c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	2364      	movs	r3, #100	; 0x64
 800ab36:	68b8      	ldr	r0, [r7, #8]
 800ab38:	f7fa fa7c 	bl	8005034 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab42:	2b15      	cmp	r3, #21
 800ab44:	d004      	beq.n	800ab50 <WiFi_Conn_ND+0x11a8>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4c:	2b17      	cmp	r3, #23
 800ab4e:	d104      	bne.n	800ab5a <WiFi_Conn_ND+0x11b2>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f240 3229 	movw	r2, #809	; 0x329
 800ab56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab60:	2b16      	cmp	r3, #22
 800ab62:	f040 83e8 	bne.w	800b336 <WiFi_Conn_ND+0x198e>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f240 3225 	movw	r2, #805	; 0x325
 800ab6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800ab70:	e3e1      	b.n	800b336 <WiFi_Conn_ND+0x198e>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7fb fac4 	bl	8006100 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab7e:	2b04      	cmp	r3, #4
 800ab80:	d112      	bne.n	800aba8 <WiFi_Conn_ND+0x1200>
							{
								Cambiar_CWMODE(b);
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7fb fad2 	bl	800612c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2264      	movs	r2, #100	; 0x64
 800ab8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abae:	2b0a      	cmp	r3, #10
 800abb0:	d009      	beq.n	800abc6 <WiFi_Conn_ND+0x121e>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb8:	2b0d      	cmp	r3, #13
 800abba:	d004      	beq.n	800abc6 <WiFi_Conn_ND+0x121e>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	d10e      	bne.n	800abe4 <WiFi_Conn_ND+0x123c>
							{
								ConectarWIFI(b);
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f7fb fac6 	bl	8006158 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	22c8      	movs	r2, #200	; 0xc8
 800abd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abea:	2b02      	cmp	r3, #2
 800abec:	d005      	beq.n	800abfa <WiFi_Conn_ND+0x1252>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf4:	2b10      	cmp	r3, #16
 800abf6:	f040 83a0 	bne.w	800b33a <WiFi_Conn_ND+0x1992>
							{
								ConectarTCP(b);
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f7fb fb04 	bl	8006208 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800ac1a:	e38e      	b.n	800b33a <WiFi_Conn_ND+0x1992>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7fb fa6f 	bl	8006100 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	d112      	bne.n	800ac52 <WiFi_Conn_ND+0x12aa>
							{
								Cambiar_CWMODE(b);
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7fb fa7d 	bl	800612c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2264      	movs	r2, #100	; 0x64
 800ac36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac58:	2b0a      	cmp	r3, #10
 800ac5a:	d009      	beq.n	800ac70 <WiFi_Conn_ND+0x12c8>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac62:	2b0d      	cmp	r3, #13
 800ac64:	d004      	beq.n	800ac70 <WiFi_Conn_ND+0x12c8>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d10e      	bne.n	800ac8e <WiFi_Conn_ND+0x12e6>
							{
								ConectarWIFI(b);
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f7fb fa71 	bl	8006158 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	22c8      	movs	r2, #200	; 0xc8
 800ac7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d005      	beq.n	800aca4 <WiFi_Conn_ND+0x12fc>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9e:	2b10      	cmp	r3, #16
 800aca0:	f040 834d 	bne.w	800b33e <WiFi_Conn_ND+0x1996>
							{
								ConectarTCP(b);
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f7fb faaf 	bl	8006208 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f44f 7216 	mov.w	r2, #600	; 0x258
 800acb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800acc4:	e33b      	b.n	800b33e <WiFi_Conn_ND+0x1996>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f7fb fa1a 	bl	8006100 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	d112      	bne.n	800acfc <WiFi_Conn_ND+0x1354>
							{
								Cambiar_CWMODE(b);
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f7fb fa28 	bl	800612c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2264      	movs	r2, #100	; 0x64
 800ace0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad02:	2b0a      	cmp	r3, #10
 800ad04:	d009      	beq.n	800ad1a <WiFi_Conn_ND+0x1372>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad0c:	2b0d      	cmp	r3, #13
 800ad0e:	d004      	beq.n	800ad1a <WiFi_Conn_ND+0x1372>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d10e      	bne.n	800ad38 <WiFi_Conn_ND+0x1390>
							{
								ConectarWIFI(b);
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f7fb fa1c 	bl	8006158 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	22c8      	movs	r2, #200	; 0xc8
 800ad24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d005      	beq.n	800ad4e <WiFi_Conn_ND+0x13a6>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad48:	2b10      	cmp	r3, #16
 800ad4a:	f040 82fa 	bne.w	800b342 <WiFi_Conn_ND+0x199a>
							{
								ConectarTCP(b);
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7fb fa5a 	bl	8006208 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ad6e:	e2e8      	b.n	800b342 <WiFi_Conn_ND+0x199a>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f7fb f9c5 	bl	8006100 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d112      	bne.n	800ada6 <WiFi_Conn_ND+0x13fe>
							{
								Cambiar_CWMODE(b);
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7fb f9d3 	bl	800612c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2264      	movs	r2, #100	; 0x64
 800ad8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adac:	2b0a      	cmp	r3, #10
 800adae:	d009      	beq.n	800adc4 <WiFi_Conn_ND+0x141c>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb6:	2b0d      	cmp	r3, #13
 800adb8:	d004      	beq.n	800adc4 <WiFi_Conn_ND+0x141c>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d10e      	bne.n	800ade2 <WiFi_Conn_ND+0x143a>
							{
								ConectarWIFI(b);
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f7fb f9c7 	bl	8006158 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	22c8      	movs	r2, #200	; 0xc8
 800adce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d005      	beq.n	800adf8 <WiFi_Conn_ND+0x1450>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf2:	2b10      	cmp	r3, #16
 800adf4:	f040 82a7 	bne.w	800b346 <WiFi_Conn_ND+0x199e>
							{
								ConectarTCP(b);
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7fb fa05 	bl	8006208 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ae18:	e295      	b.n	800b346 <WiFi_Conn_ND+0x199e>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7fb f970 	bl	8006100 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d112      	bne.n	800ae58 <WiFi_Conn_ND+0x14b0>
								{
									Cambiar_CWMODE(b);
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f7fb f97a 	bl	800612c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2264      	movs	r2, #100	; 0x64
 800ae3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae5e:	2b0a      	cmp	r3, #10
 800ae60:	d009      	beq.n	800ae76 <WiFi_Conn_ND+0x14ce>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae68:	2b0d      	cmp	r3, #13
 800ae6a:	d004      	beq.n	800ae76 <WiFi_Conn_ND+0x14ce>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d10e      	bne.n	800ae94 <WiFi_Conn_ND+0x14ec>
								{
									ConectarWIFI(b);
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7fb f96e 	bl	8006158 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	22c8      	movs	r2, #200	; 0xc8
 800ae80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d004      	beq.n	800aea8 <WiFi_Conn_ND+0x1500>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea4:	2b10      	cmp	r3, #16
 800aea6:	d10f      	bne.n	800aec8 <WiFi_Conn_ND+0x1520>
								{
									ConectarTCP(b);
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7fb f9ad 	bl	8006208 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aeb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800aece:	2b01      	cmp	r3, #1
 800aed0:	f040 823b 	bne.w	800b34a <WiFi_Conn_ND+0x19a2>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 8235 	beq.w	800b34a <WiFi_Conn_ND+0x19a2>
								{
									EnviarDatosSRVR(b);
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f7fb f9bd 	bl	8006260 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800aeec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800af00:	e223      	b.n	800b34a <WiFi_Conn_ND+0x19a2>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af08:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800af0c:	d063      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af14:	2b02      	cmp	r3, #2
 800af16:	d05e      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_disconnect)&&
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800af1e:	2b0a      	cmp	r3, #10
 800af20:	d059      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_connected)&&
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800af28:	2b0b      	cmp	r3, #11
 800af2a:	d054      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_gotip)&&
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800af32:	2b0c      	cmp	r3, #12
 800af34:	d04f      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_desconectado)&&
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800af3c:	2b10      	cmp	r3, #16
 800af3e:	d04a      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_snd_err)&&
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800af46:	2b11      	cmp	r3, #17
 800af48:	d045      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800af50:	2b12      	cmp	r3, #18
 800af52:	d040      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800af5a:	2b13      	cmp	r3, #19
 800af5c:	d03b      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800af64:	2b16      	cmp	r3, #22
 800af66:	d036      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af6e:	2b19      	cmp	r3, #25
 800af70:	d031      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d02c      	beq.n	800afd6 <WiFi_Conn_ND+0x162e>
								{
								EnviarDatosSRVR(b);
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f7fb f96f 	bl	8006260 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d124      	bne.n	800afd6 <WiFi_Conn_ND+0x162e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f7fb fa63 	bl	8006458 <AT_ESP8266_ND>
 800af92:	4602      	mov	r2, r0
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d109      	bne.n	800afc0 <WiFi_Conn_ND+0x1618>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800afb8:	4619      	mov	r1, r3
 800afba:	4610      	mov	r0, r2
 800afbc:	f7f6 f9a6 	bl	800130c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800afcc:	b29a      	uxth	r2, r3
 800afce:	2364      	movs	r3, #100	; 0x64
 800afd0:	68b8      	ldr	r0, [r7, #8]
 800afd2:	f7fa f82f 	bl	8005034 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afdc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800afe0:	d154      	bne.n	800b08c <WiFi_Conn_ND+0x16e4>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d14f      	bne.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_error)&&
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d04a      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_disconnect)&&
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800affc:	2b0a      	cmp	r3, #10
 800affe:	d045      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_connected)&&
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b006:	2b0b      	cmp	r3, #11
 800b008:	d040      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_gotip)&&
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b010:	2b0c      	cmp	r3, #12
 800b012:	d03b      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_desconectado)&&
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b01a:	2b10      	cmp	r3, #16
 800b01c:	d036      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_snd_err)&&
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b024:	2b11      	cmp	r3, #17
 800b026:	d031      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b02e:	2b12      	cmp	r3, #18
 800b030:	d02c      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b038:	2b13      	cmp	r3, #19
 800b03a:	d027      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b042:	2b16      	cmp	r3, #22
 800b044:	d022      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04c:	2b19      	cmp	r3, #25
 800b04e:	d01d      	beq.n	800b08c <WiFi_Conn_ND+0x16e4>
										{
											b->_enviaruart=0;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d109      	bne.n	800b076 <WiFi_Conn_ND+0x16ce>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b06e:	4619      	mov	r1, r3
 800b070:	4610      	mov	r0, r2
 800b072:	f7f6 f94b 	bl	800130c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b082:	b29a      	uxth	r2, r3
 800b084:	2364      	movs	r3, #100	; 0x64
 800b086:	68b8      	ldr	r0, [r7, #8]
 800b088:	f7f9 ffd4 	bl	8005034 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b092:	2b13      	cmp	r3, #19
 800b094:	d104      	bne.n	800b0a0 <WiFi_Conn_ND+0x16f8>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f240 328d 	movw	r2, #909	; 0x38d
 800b09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d02d      	beq.n	800b106 <WiFi_Conn_ND+0x175e>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d028      	beq.n	800b106 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b0ba:	2b0a      	cmp	r3, #10
 800b0bc:	d023      	beq.n	800b106 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c4:	2b0b      	cmp	r3, #11
 800b0c6:	d01e      	beq.n	800b106 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b0ce:	2b0c      	cmp	r3, #12
 800b0d0:	d019      	beq.n	800b106 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d8:	2b10      	cmp	r3, #16
 800b0da:	d014      	beq.n	800b106 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b0e2:	2b11      	cmp	r3, #17
 800b0e4:	d00f      	beq.n	800b106 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ec:	2b12      	cmp	r3, #18
 800b0ee:	d00a      	beq.n	800b106 <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b0f6:	2b16      	cmp	r3, #22
 800b0f8:	d005      	beq.n	800b106 <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b100:	2b19      	cmp	r3, #25
 800b102:	f040 8124 	bne.w	800b34e <WiFi_Conn_ND+0x19a6>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f240 3289 	movw	r2, #905	; 0x389
 800b10c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b110:	e11d      	b.n	800b34e <WiFi_Conn_ND+0x19a6>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7fa fff4 	bl	8006100 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d009      	beq.n	800b136 <WiFi_Conn_ND+0x178e>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b128:	2b0b      	cmp	r3, #11
 800b12a:	d004      	beq.n	800b136 <WiFi_Conn_ND+0x178e>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b132:	2b0c      	cmp	r3, #12
 800b134:	d112      	bne.n	800b15c <WiFi_Conn_ND+0x17b4>
							{
								Cambiar_CWMODE(b);
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f7fa fff8 	bl	800612c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2264      	movs	r2, #100	; 0x64
 800b140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b162:	2b0a      	cmp	r3, #10
 800b164:	d009      	beq.n	800b17a <WiFi_Conn_ND+0x17d2>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16c:	2b0d      	cmp	r3, #13
 800b16e:	d004      	beq.n	800b17a <WiFi_Conn_ND+0x17d2>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b176:	2b03      	cmp	r3, #3
 800b178:	d10e      	bne.n	800b198 <WiFi_Conn_ND+0x17f0>
							{
								ConectarWIFI(b);
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7fa ffec 	bl	8006158 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	22c8      	movs	r2, #200	; 0xc8
 800b184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19e:	2b16      	cmp	r3, #22
 800b1a0:	d10c      	bne.n	800b1bc <WiFi_Conn_ND+0x1814>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f240 3225 	movw	r2, #805	; 0x325
 800b1a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c2:	2b18      	cmp	r3, #24
 800b1c4:	d10c      	bne.n	800b1e0 <WiFi_Conn_ND+0x1838>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f240 3229 	movw	r2, #809	; 0x329
 800b1cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e6:	2b19      	cmp	r3, #25
 800b1e8:	d008      	beq.n	800b1fc <WiFi_Conn_ND+0x1854>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f0:	2b11      	cmp	r3, #17
 800b1f2:	d003      	beq.n	800b1fc <WiFi_Conn_ND+0x1854>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2212      	movs	r2, #18
 800b1f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b202:	2b01      	cmp	r3, #1
 800b204:	f040 80a5 	bne.w	800b352 <WiFi_Conn_ND+0x19aa>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b222:	e096      	b.n	800b352 <WiFi_Conn_ND+0x19aa>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f7fa ff6b 	bl	8006100 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b230:	2b04      	cmp	r3, #4
 800b232:	d009      	beq.n	800b248 <WiFi_Conn_ND+0x18a0>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b23a:	2b0b      	cmp	r3, #11
 800b23c:	d004      	beq.n	800b248 <WiFi_Conn_ND+0x18a0>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b244:	2b0c      	cmp	r3, #12
 800b246:	d112      	bne.n	800b26e <WiFi_Conn_ND+0x18c6>
								{
									Cambiar_CWMODE(b);
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f7fa ff6f 	bl	800612c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2264      	movs	r2, #100	; 0x64
 800b252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b274:	2b0a      	cmp	r3, #10
 800b276:	d009      	beq.n	800b28c <WiFi_Conn_ND+0x18e4>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b27e:	2b0d      	cmp	r3, #13
 800b280:	d004      	beq.n	800b28c <WiFi_Conn_ND+0x18e4>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d10e      	bne.n	800b2aa <WiFi_Conn_ND+0x1902>
								{
									ConectarWIFI(b);
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f7fa ff63 	bl	8006158 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	22c8      	movs	r2, #200	; 0xc8
 800b296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d004      	beq.n	800b2be <WiFi_Conn_ND+0x1916>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d14b      	bne.n	800b356 <WiFi_Conn_ND+0x19ae>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d046      	beq.n	800b356 <WiFi_Conn_ND+0x19ae>
								{
									EnviarDatosSRVR(b);
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f7fa ffc9 	bl	8006260 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b2d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b2f8:	e02d      	b.n	800b356 <WiFi_Conn_ND+0x19ae>
			break;
 800b2fa:	bf00      	nop
 800b2fc:	e02c      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b2fe:	bf00      	nop
 800b300:	e02a      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b302:	bf00      	nop
 800b304:	e028      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b306:	bf00      	nop
 800b308:	e026      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b30a:	bf00      	nop
 800b30c:	e024      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b30e:	bf00      	nop
 800b310:	e022      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b312:	bf00      	nop
 800b314:	e020      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b316:	bf00      	nop
 800b318:	e01e      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b31a:	bf00      	nop
 800b31c:	e01c      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b31e:	bf00      	nop
 800b320:	e01a      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b322:	bf00      	nop
 800b324:	e018      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b326:	bf00      	nop
 800b328:	e016      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b32a:	bf00      	nop
 800b32c:	e014      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b32e:	bf00      	nop
 800b330:	e012      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
			break;
 800b332:	bf00      	nop
 800b334:	e010      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
						break;
 800b336:	bf00      	nop
 800b338:	e00e      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
						break;
 800b33a:	bf00      	nop
 800b33c:	e00c      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
						break;
 800b33e:	bf00      	nop
 800b340:	e00a      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
						break;
 800b342:	bf00      	nop
 800b344:	e008      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
						break;
 800b346:	bf00      	nop
 800b348:	e006      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
						break;
 800b34a:	bf00      	nop
 800b34c:	e004      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
						break;
 800b34e:	bf00      	nop
 800b350:	e002      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
						break;
 800b352:	bf00      	nop
 800b354:	e000      	b.n	800b358 <WiFi_Conn_ND+0x19b0>
						break;
 800b356:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop

0800b368 <httpPOST>:

char deviceId[]={',','"','d','e','v','I','d','"',':','\0'};


httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b368:	b5b0      	push	{r4, r5, r7, lr}
 800b36a:	b0a8      	sub	sp, #160	; 0xa0
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
 800b374:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b376:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b37a:	2200      	movs	r2, #0
 800b37c:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b37e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b382:	2200      	movs	r2, #0
 800b384:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b386:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b38a:	f7f4 ff33 	bl	80001f4 <strlen>
 800b38e:	4603      	mov	r3, r0
 800b390:	461a      	mov	r2, r3
 800b392:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b396:	4413      	add	r3, r2
 800b398:	4aed      	ldr	r2, [pc, #948]	; (800b750 <httpPOST+0x3e8>)
 800b39a:	6810      	ldr	r0, [r2, #0]
 800b39c:	6018      	str	r0, [r3, #0]
 800b39e:	8892      	ldrh	r2, [r2, #4]
 800b3a0:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f7f4 ff26 	bl	80001f4 <strlen>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	68f9      	ldr	r1, [r7, #12]
 800b3ae:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3b2:	f003 f83e 	bl	800e432 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b3b6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3ba:	f7f4 ff1b 	bl	80001f4 <strlen>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3c6:	4413      	add	r3, r2
 800b3c8:	49e2      	ldr	r1, [pc, #904]	; (800b754 <httpPOST+0x3ec>)
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	cb03      	ldmia	r3!, {r0, r1}
 800b3d0:	6010      	str	r0, [r2, #0]
 800b3d2:	6051      	str	r1, [r2, #4]
 800b3d4:	8819      	ldrh	r1, [r3, #0]
 800b3d6:	789b      	ldrb	r3, [r3, #2]
 800b3d8:	8111      	strh	r1, [r2, #8]
 800b3da:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b3dc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3e0:	f7f4 ff08 	bl	80001f4 <strlen>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3ec:	4413      	add	r3, r2
 800b3ee:	4ada      	ldr	r2, [pc, #872]	; (800b758 <httpPOST+0x3f0>)
 800b3f0:	8811      	ldrh	r1, [r2, #0]
 800b3f2:	7892      	ldrb	r2, [r2, #2]
 800b3f4:	8019      	strh	r1, [r3, #0]
 800b3f6:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b3f8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3fc:	f7f4 fefa 	bl	80001f4 <strlen>
 800b400:	4603      	mov	r3, r0
 800b402:	461a      	mov	r2, r3
 800b404:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b408:	4413      	add	r3, r2
 800b40a:	4ad4      	ldr	r2, [pc, #848]	; (800b75c <httpPOST+0x3f4>)
 800b40c:	6810      	ldr	r0, [r2, #0]
 800b40e:	6018      	str	r0, [r3, #0]
 800b410:	8891      	ldrh	r1, [r2, #4]
 800b412:	7992      	ldrb	r2, [r2, #6]
 800b414:	8099      	strh	r1, [r3, #4]
 800b416:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b418:	68b8      	ldr	r0, [r7, #8]
 800b41a:	f7f4 feeb 	bl	80001f4 <strlen>
 800b41e:	4603      	mov	r3, r0
 800b420:	461a      	mov	r2, r3
 800b422:	68b9      	ldr	r1, [r7, #8]
 800b424:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b428:	f003 f803 	bl	800e432 <strncat>
	strncat(post,":",1);
 800b42c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b430:	f7f4 fee0 	bl	80001f4 <strlen>
 800b434:	4603      	mov	r3, r0
 800b436:	461a      	mov	r2, r3
 800b438:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b43c:	4413      	add	r3, r2
 800b43e:	49c8      	ldr	r1, [pc, #800]	; (800b760 <httpPOST+0x3f8>)
 800b440:	461a      	mov	r2, r3
 800b442:	460b      	mov	r3, r1
 800b444:	881b      	ldrh	r3, [r3, #0]
 800b446:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7f4 fed3 	bl	80001f4 <strlen>
 800b44e:	4603      	mov	r3, r0
 800b450:	461a      	mov	r2, r3
 800b452:	6879      	ldr	r1, [r7, #4]
 800b454:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b458:	f002 ffeb 	bl	800e432 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b45c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b460:	f7f4 fec8 	bl	80001f4 <strlen>
 800b464:	4603      	mov	r3, r0
 800b466:	461a      	mov	r2, r3
 800b468:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b46c:	4413      	add	r3, r2
 800b46e:	4aba      	ldr	r2, [pc, #744]	; (800b758 <httpPOST+0x3f0>)
 800b470:	8811      	ldrh	r1, [r2, #0]
 800b472:	7892      	ldrb	r2, [r2, #2]
 800b474:	8019      	strh	r1, [r3, #0]
 800b476:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b478:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b47c:	f7f4 feba 	bl	80001f4 <strlen>
 800b480:	4603      	mov	r3, r0
 800b482:	461a      	mov	r2, r3
 800b484:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b488:	4413      	add	r3, r2
 800b48a:	4ab6      	ldr	r2, [pc, #728]	; (800b764 <httpPOST+0x3fc>)
 800b48c:	461d      	mov	r5, r3
 800b48e:	4614      	mov	r4, r2
 800b490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b492:	6028      	str	r0, [r5, #0]
 800b494:	6069      	str	r1, [r5, #4]
 800b496:	60aa      	str	r2, [r5, #8]
 800b498:	60eb      	str	r3, [r5, #12]
 800b49a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b49c:	6128      	str	r0, [r5, #16]
 800b49e:	6169      	str	r1, [r5, #20]
 800b4a0:	61aa      	str	r2, [r5, #24]
 800b4a2:	8823      	ldrh	r3, [r4, #0]
 800b4a4:	78a2      	ldrb	r2, [r4, #2]
 800b4a6:	83ab      	strh	r3, [r5, #28]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b4ac:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4b0:	f7f4 fea0 	bl	80001f4 <strlen>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4bc:	4413      	add	r3, r2
 800b4be:	4aa6      	ldr	r2, [pc, #664]	; (800b758 <httpPOST+0x3f0>)
 800b4c0:	8811      	ldrh	r1, [r2, #0]
 800b4c2:	7892      	ldrb	r2, [r2, #2]
 800b4c4:	8019      	strh	r1, [r3, #0]
 800b4c6:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b4c8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4cc:	f7f4 fe92 	bl	80001f4 <strlen>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4d8:	4413      	add	r3, r2
 800b4da:	4aa3      	ldr	r2, [pc, #652]	; (800b768 <httpPOST+0x400>)
 800b4dc:	461c      	mov	r4, r3
 800b4de:	4615      	mov	r5, r2
 800b4e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4e2:	6020      	str	r0, [r4, #0]
 800b4e4:	6061      	str	r1, [r4, #4]
 800b4e6:	60a2      	str	r2, [r4, #8]
 800b4e8:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800b4f0:	887b      	ldrh	r3, [r7, #2]
 800b4f2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f002 fd6f 	bl	800dfdc <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800b4fe:	2300      	movs	r3, #0
 800b500:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800b504:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800b508:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800b50c:	4611      	mov	r1, r2
 800b50e:	4618      	mov	r0, r3
 800b510:	f002 fd64 	bl	800dfdc <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800b514:	2300      	movs	r3, #0
 800b516:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800b51a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b51e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b522:	4611      	mov	r1, r2
 800b524:	4618      	mov	r0, r3
 800b526:	f002 fd59 	bl	800dfdc <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800b52a:	2300      	movs	r3, #0
 800b52c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800b530:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800b534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f002 fd4e 	bl	800dfdc <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800b540:	2300      	movs	r3, #0
 800b542:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800b546:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800b54a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b54e:	4611      	mov	r1, r2
 800b550:	4618      	mov	r0, r3
 800b552:	f002 fd43 	bl	800dfdc <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800b556:	2300      	movs	r3, #0
 800b558:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800b55c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800b560:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b564:	4611      	mov	r1, r2
 800b566:	4618      	mov	r0, r3
 800b568:	f002 fd38 	bl	800dfdc <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800b56c:	2300      	movs	r3, #0
 800b56e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800b572:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800b576:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b57a:	4611      	mov	r1, r2
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 fd2d 	bl	800dfdc <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800b582:	2300      	movs	r3, #0
 800b584:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800b588:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800b58c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b590:	4611      	mov	r1, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f002 fd22 	bl	800dfdc <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800b598:	2300      	movs	r3, #0
 800b59a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800b59e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800b5a2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b5a6:	4611      	mov	r1, r2
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f002 fd17 	bl	800dfdc <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800b5b4:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800b5b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f002 fd0c 	bl	800dfdc <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800b5ca:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800b5ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f002 fd01 	bl	800dfdc <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800b5da:	2300      	movs	r3, #0
 800b5dc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800b5e0:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800b5e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f002 fcf6 	bl	800dfdc <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800b5f6:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800b5fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b5fe:	4611      	mov	r1, r2
 800b600:	4618      	mov	r0, r3
 800b602:	f002 fceb 	bl	800dfdc <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800b606:	2300      	movs	r3, #0
 800b608:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800b60c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800b610:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b614:	4611      	mov	r1, r2
 800b616:	4618      	mov	r0, r3
 800b618:	f002 fce0 	bl	800dfdc <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800b61c:	2300      	movs	r3, #0
 800b61e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800b622:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800b626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b62a:	4611      	mov	r1, r2
 800b62c:	4618      	mov	r0, r3
 800b62e:	f002 fcd5 	bl	800dfdc <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800b632:	2300      	movs	r3, #0
 800b634:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800b638:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800b63c:	f107 0220 	add.w	r2, r7, #32
 800b640:	4611      	mov	r1, r2
 800b642:	4618      	mov	r0, r3
 800b644:	f002 fcca 	bl	800dfdc <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800b648:	2300      	movs	r3, #0
 800b64a:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b64c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800b650:	f107 0218 	add.w	r2, r7, #24
 800b654:	4611      	mov	r1, r2
 800b656:	4618      	mov	r0, r3
 800b658:	f002 fcc0 	bl	800dfdc <INTOA>

	strncat(body,dd1,strlen(dd1));
 800b65c:	4843      	ldr	r0, [pc, #268]	; (800b76c <httpPOST+0x404>)
 800b65e:	f7f4 fdc9 	bl	80001f4 <strlen>
 800b662:	4603      	mov	r3, r0
 800b664:	461a      	mov	r2, r3
 800b666:	4941      	ldr	r1, [pc, #260]	; (800b76c <httpPOST+0x404>)
 800b668:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b66c:	f002 fee1 	bl	800e432 <strncat>
	strncat(body,_d1,strlen(_d1));
 800b670:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b674:	4618      	mov	r0, r3
 800b676:	f7f4 fdbd 	bl	80001f4 <strlen>
 800b67a:	4602      	mov	r2, r0
 800b67c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b680:	4619      	mov	r1, r3
 800b682:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b686:	f002 fed4 	bl	800e432 <strncat>

	strncat(body,dd2,strlen(dd2));
 800b68a:	4839      	ldr	r0, [pc, #228]	; (800b770 <httpPOST+0x408>)
 800b68c:	f7f4 fdb2 	bl	80001f4 <strlen>
 800b690:	4603      	mov	r3, r0
 800b692:	461a      	mov	r2, r3
 800b694:	4936      	ldr	r1, [pc, #216]	; (800b770 <httpPOST+0x408>)
 800b696:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b69a:	f002 feca 	bl	800e432 <strncat>
	strncat(body,_d2,strlen(_d2));
 800b69e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7f4 fda6 	bl	80001f4 <strlen>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6b4:	f002 febd 	bl	800e432 <strncat>

	strncat(body,dd3,strlen(dd3));
 800b6b8:	482e      	ldr	r0, [pc, #184]	; (800b774 <httpPOST+0x40c>)
 800b6ba:	f7f4 fd9b 	bl	80001f4 <strlen>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	492c      	ldr	r1, [pc, #176]	; (800b774 <httpPOST+0x40c>)
 800b6c4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6c8:	f002 feb3 	bl	800e432 <strncat>
	strncat(body,_d3,strlen(_d3));
 800b6cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7f4 fd8f 	bl	80001f4 <strlen>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b6dc:	4619      	mov	r1, r3
 800b6de:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6e2:	f002 fea6 	bl	800e432 <strncat>

	strncat(body,dd4,strlen(dd4));
 800b6e6:	4824      	ldr	r0, [pc, #144]	; (800b778 <httpPOST+0x410>)
 800b6e8:	f7f4 fd84 	bl	80001f4 <strlen>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	4921      	ldr	r1, [pc, #132]	; (800b778 <httpPOST+0x410>)
 800b6f2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6f6:	f002 fe9c 	bl	800e432 <strncat>
	strncat(body,_d4,strlen(_d4));
 800b6fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7f4 fd78 	bl	80001f4 <strlen>
 800b704:	4602      	mov	r2, r0
 800b706:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b70a:	4619      	mov	r1, r3
 800b70c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b710:	f002 fe8f 	bl	800e432 <strncat>

	strncat(body,dd5,strlen(dd5));
 800b714:	4819      	ldr	r0, [pc, #100]	; (800b77c <httpPOST+0x414>)
 800b716:	f7f4 fd6d 	bl	80001f4 <strlen>
 800b71a:	4603      	mov	r3, r0
 800b71c:	461a      	mov	r2, r3
 800b71e:	4917      	ldr	r1, [pc, #92]	; (800b77c <httpPOST+0x414>)
 800b720:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b724:	f002 fe85 	bl	800e432 <strncat>
	strncat(body,_d5,strlen(_d5));
 800b728:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f4 fd61 	bl	80001f4 <strlen>
 800b732:	4602      	mov	r2, r0
 800b734:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b738:	4619      	mov	r1, r3
 800b73a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b73e:	f002 fe78 	bl	800e432 <strncat>

	strncat(body,dd6,strlen(dd6));
 800b742:	480f      	ldr	r0, [pc, #60]	; (800b780 <httpPOST+0x418>)
 800b744:	f7f4 fd56 	bl	80001f4 <strlen>
 800b748:	4603      	mov	r3, r0
 800b74a:	461a      	mov	r2, r3
 800b74c:	e01a      	b.n	800b784 <httpPOST+0x41c>
 800b74e:	bf00      	nop
 800b750:	0800fa4c 	.word	0x0800fa4c
 800b754:	0800fa54 	.word	0x0800fa54
 800b758:	0800fa60 	.word	0x0800fa60
 800b75c:	0800fa64 	.word	0x0800fa64
 800b760:	0800fa6c 	.word	0x0800fa6c
 800b764:	0800fa70 	.word	0x0800fa70
 800b768:	0800fa90 	.word	0x0800fa90
 800b76c:	200000a4 	.word	0x200000a4
 800b770:	200000ac 	.word	0x200000ac
 800b774:	200000b4 	.word	0x200000b4
 800b778:	200000bc 	.word	0x200000bc
 800b77c:	200000c4 	.word	0x200000c4
 800b780:	200000cc 	.word	0x200000cc
 800b784:	49af      	ldr	r1, [pc, #700]	; (800ba44 <httpPOST+0x6dc>)
 800b786:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b78a:	f002 fe52 	bl	800e432 <strncat>
	strncat(body,_d6,strlen(_d6));
 800b78e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b792:	4618      	mov	r0, r3
 800b794:	f7f4 fd2e 	bl	80001f4 <strlen>
 800b798:	4602      	mov	r2, r0
 800b79a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b79e:	4619      	mov	r1, r3
 800b7a0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7a4:	f002 fe45 	bl	800e432 <strncat>

	strncat(body,dd7,strlen(dd7));
 800b7a8:	48a7      	ldr	r0, [pc, #668]	; (800ba48 <httpPOST+0x6e0>)
 800b7aa:	f7f4 fd23 	bl	80001f4 <strlen>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	49a5      	ldr	r1, [pc, #660]	; (800ba48 <httpPOST+0x6e0>)
 800b7b4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7b8:	f002 fe3b 	bl	800e432 <strncat>
	strncat(body,_d7,strlen(_d7));
 800b7bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7f4 fd17 	bl	80001f4 <strlen>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7d2:	f002 fe2e 	bl	800e432 <strncat>

	strncat(body,dd8,strlen(dd8));
 800b7d6:	489d      	ldr	r0, [pc, #628]	; (800ba4c <httpPOST+0x6e4>)
 800b7d8:	f7f4 fd0c 	bl	80001f4 <strlen>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	461a      	mov	r2, r3
 800b7e0:	499a      	ldr	r1, [pc, #616]	; (800ba4c <httpPOST+0x6e4>)
 800b7e2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7e6:	f002 fe24 	bl	800e432 <strncat>
	strncat(body,_d8,strlen(_d8));
 800b7ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7f4 fd00 	bl	80001f4 <strlen>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b800:	f002 fe17 	bl	800e432 <strncat>

	strncat(body,dd9,strlen(dd9));
 800b804:	4892      	ldr	r0, [pc, #584]	; (800ba50 <httpPOST+0x6e8>)
 800b806:	f7f4 fcf5 	bl	80001f4 <strlen>
 800b80a:	4603      	mov	r3, r0
 800b80c:	461a      	mov	r2, r3
 800b80e:	4990      	ldr	r1, [pc, #576]	; (800ba50 <httpPOST+0x6e8>)
 800b810:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b814:	f002 fe0d 	bl	800e432 <strncat>
	strncat(body,_d9,strlen(_d9));
 800b818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7f4 fce9 	bl	80001f4 <strlen>
 800b822:	4602      	mov	r2, r0
 800b824:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b828:	4619      	mov	r1, r3
 800b82a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b82e:	f002 fe00 	bl	800e432 <strncat>

	strncat(body,dd10,strlen(dd10));
 800b832:	4888      	ldr	r0, [pc, #544]	; (800ba54 <httpPOST+0x6ec>)
 800b834:	f7f4 fcde 	bl	80001f4 <strlen>
 800b838:	4603      	mov	r3, r0
 800b83a:	461a      	mov	r2, r3
 800b83c:	4985      	ldr	r1, [pc, #532]	; (800ba54 <httpPOST+0x6ec>)
 800b83e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b842:	f002 fdf6 	bl	800e432 <strncat>
	strncat(body,_d10,strlen(_d10));
 800b846:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7f4 fcd2 	bl	80001f4 <strlen>
 800b850:	4602      	mov	r2, r0
 800b852:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b856:	4619      	mov	r1, r3
 800b858:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b85c:	f002 fde9 	bl	800e432 <strncat>

	strncat(body,dd11,strlen(dd11));
 800b860:	487d      	ldr	r0, [pc, #500]	; (800ba58 <httpPOST+0x6f0>)
 800b862:	f7f4 fcc7 	bl	80001f4 <strlen>
 800b866:	4603      	mov	r3, r0
 800b868:	461a      	mov	r2, r3
 800b86a:	497b      	ldr	r1, [pc, #492]	; (800ba58 <httpPOST+0x6f0>)
 800b86c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b870:	f002 fddf 	bl	800e432 <strncat>
	strncat(body,_d11,strlen(_d11));
 800b874:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b878:	4618      	mov	r0, r3
 800b87a:	f7f4 fcbb 	bl	80001f4 <strlen>
 800b87e:	4602      	mov	r2, r0
 800b880:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b884:	4619      	mov	r1, r3
 800b886:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b88a:	f002 fdd2 	bl	800e432 <strncat>

	strncat(body,dd12,strlen(dd12));
 800b88e:	4873      	ldr	r0, [pc, #460]	; (800ba5c <httpPOST+0x6f4>)
 800b890:	f7f4 fcb0 	bl	80001f4 <strlen>
 800b894:	4603      	mov	r3, r0
 800b896:	461a      	mov	r2, r3
 800b898:	4970      	ldr	r1, [pc, #448]	; (800ba5c <httpPOST+0x6f4>)
 800b89a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b89e:	f002 fdc8 	bl	800e432 <strncat>
	strncat(body,_d12,strlen(_d12));
 800b8a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7f4 fca4 	bl	80001f4 <strlen>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8b8:	f002 fdbb 	bl	800e432 <strncat>

	strncat(body,dd13,strlen(dd13));
 800b8bc:	4868      	ldr	r0, [pc, #416]	; (800ba60 <httpPOST+0x6f8>)
 800b8be:	f7f4 fc99 	bl	80001f4 <strlen>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4966      	ldr	r1, [pc, #408]	; (800ba60 <httpPOST+0x6f8>)
 800b8c8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8cc:	f002 fdb1 	bl	800e432 <strncat>
	strncat(body,_d13,strlen(_d13));
 800b8d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f4 fc8d 	bl	80001f4 <strlen>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8e6:	f002 fda4 	bl	800e432 <strncat>

	strncat(body,dd14,strlen(dd14));
 800b8ea:	485e      	ldr	r0, [pc, #376]	; (800ba64 <httpPOST+0x6fc>)
 800b8ec:	f7f4 fc82 	bl	80001f4 <strlen>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	495b      	ldr	r1, [pc, #364]	; (800ba64 <httpPOST+0x6fc>)
 800b8f6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8fa:	f002 fd9a 	bl	800e432 <strncat>
	strncat(body,_d14,strlen(_d14));
 800b8fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b902:	4618      	mov	r0, r3
 800b904:	f7f4 fc76 	bl	80001f4 <strlen>
 800b908:	4602      	mov	r2, r0
 800b90a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b90e:	4619      	mov	r1, r3
 800b910:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b914:	f002 fd8d 	bl	800e432 <strncat>

	strncat(body,dd15,strlen(dd15));
 800b918:	4853      	ldr	r0, [pc, #332]	; (800ba68 <httpPOST+0x700>)
 800b91a:	f7f4 fc6b 	bl	80001f4 <strlen>
 800b91e:	4603      	mov	r3, r0
 800b920:	461a      	mov	r2, r3
 800b922:	4951      	ldr	r1, [pc, #324]	; (800ba68 <httpPOST+0x700>)
 800b924:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b928:	f002 fd83 	bl	800e432 <strncat>
	strncat(body,_d15,strlen(_d15));
 800b92c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b930:	4618      	mov	r0, r3
 800b932:	f7f4 fc5f 	bl	80001f4 <strlen>
 800b936:	4602      	mov	r2, r0
 800b938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b93c:	4619      	mov	r1, r3
 800b93e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b942:	f002 fd76 	bl	800e432 <strncat>

	strncat(body,dd16,strlen(dd16));
 800b946:	4849      	ldr	r0, [pc, #292]	; (800ba6c <httpPOST+0x704>)
 800b948:	f7f4 fc54 	bl	80001f4 <strlen>
 800b94c:	4603      	mov	r3, r0
 800b94e:	461a      	mov	r2, r3
 800b950:	4946      	ldr	r1, [pc, #280]	; (800ba6c <httpPOST+0x704>)
 800b952:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b956:	f002 fd6c 	bl	800e432 <strncat>
	strncat(body,_d16,strlen(_d16));
 800b95a:	f107 0320 	add.w	r3, r7, #32
 800b95e:	4618      	mov	r0, r3
 800b960:	f7f4 fc48 	bl	80001f4 <strlen>
 800b964:	4602      	mov	r2, r0
 800b966:	f107 0320 	add.w	r3, r7, #32
 800b96a:	4619      	mov	r1, r3
 800b96c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b970:	f002 fd5f 	bl	800e432 <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800b974:	483e      	ldr	r0, [pc, #248]	; (800ba70 <httpPOST+0x708>)
 800b976:	f7f4 fc3d 	bl	80001f4 <strlen>
 800b97a:	4603      	mov	r3, r0
 800b97c:	461a      	mov	r2, r3
 800b97e:	493c      	ldr	r1, [pc, #240]	; (800ba70 <httpPOST+0x708>)
 800b980:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b984:	f002 fd55 	bl	800e432 <strncat>
	strncat(body,_devId,strlen(_devId));
 800b988:	f107 0318 	add.w	r3, r7, #24
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7f4 fc31 	bl	80001f4 <strlen>
 800b992:	4602      	mov	r2, r0
 800b994:	f107 0318 	add.w	r3, r7, #24
 800b998:	4619      	mov	r1, r3
 800b99a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b99e:	f002 fd48 	bl	800e432 <strncat>

	strncat(body,"}",strlen("}"));
 800b9a2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9a6:	f7f4 fc25 	bl	80001f4 <strlen>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9b2:	4413      	add	r3, r2
 800b9b4:	492f      	ldr	r1, [pc, #188]	; (800ba74 <httpPOST+0x70c>)
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	881b      	ldrh	r3, [r3, #0]
 800b9bc:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b9be:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9c2:	f7f4 fc17 	bl	80001f4 <strlen>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	f107 0310 	add.w	r3, r7, #16
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	f002 fb04 	bl	800dfdc <INTOA>
	strncat(post,length,strlen(length));
 800b9d4:	f107 0310 	add.w	r3, r7, #16
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7f4 fc0b 	bl	80001f4 <strlen>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	f107 0310 	add.w	r3, r7, #16
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b9ea:	f002 fd22 	bl	800e432 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b9ee:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b9f2:	f7f4 fbff 	bl	80001f4 <strlen>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9fe:	4413      	add	r3, r2
 800ba00:	4a1d      	ldr	r2, [pc, #116]	; (800ba78 <httpPOST+0x710>)
 800ba02:	6810      	ldr	r0, [r2, #0]
 800ba04:	6018      	str	r0, [r3, #0]
 800ba06:	7912      	ldrb	r2, [r2, #4]
 800ba08:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800ba0a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba0e:	f7f4 fbf1 	bl	80001f4 <strlen>
 800ba12:	4602      	mov	r2, r0
 800ba14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d20d      	bcs.n	800ba38 <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800ba1c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba20:	f7f4 fbe8 	bl	80001f4 <strlen>
 800ba24:	4603      	mov	r3, r0
 800ba26:	461a      	mov	r2, r3
 800ba28:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800ba2c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba30:	f002 fcff 	bl	800e432 <strncat>
		return 1 ;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e000      	b.n	800ba3a <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800ba38:	2300      	movs	r3, #0
		}
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	37a0      	adds	r7, #160	; 0xa0
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bdb0      	pop	{r4, r5, r7, pc}
 800ba42:	bf00      	nop
 800ba44:	200000cc 	.word	0x200000cc
 800ba48:	200000d4 	.word	0x200000d4
 800ba4c:	200000dc 	.word	0x200000dc
 800ba50:	200000e4 	.word	0x200000e4
 800ba54:	200000ec 	.word	0x200000ec
 800ba58:	200000f4 	.word	0x200000f4
 800ba5c:	200000fc 	.word	0x200000fc
 800ba60:	20000104 	.word	0x20000104
 800ba64:	2000010c 	.word	0x2000010c
 800ba68:	20000114 	.word	0x20000114
 800ba6c:	2000011c 	.word	0x2000011c
 800ba70:	20000124 	.word	0x20000124
 800ba74:	0800faa0 	.word	0x0800faa0
 800ba78:	0800faa4 	.word	0x0800faa4

0800ba7c <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ba96:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2220      	movs	r2, #32
 800baa2:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a1c      	ldr	r2, [pc, #112]	; (800bb1c <ModBUS_Config+0xa0>)
 800baaa:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2201      	movs	r2, #1
 800bab2:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2220      	movs	r2, #32
 800bab8:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a18      	ldr	r2, [pc, #96]	; (800bb20 <ModBUS_Config+0xa4>)
 800bac0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2210      	movs	r2, #16
 800bace:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2201      	movs	r2, #1
 800bad6:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2210      	movs	r2, #16
 800badc:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2220      	movs	r2, #32
 800baea:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2201      	movs	r2, #1
 800baf2:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2220      	movs	r2, #32
 800bafe:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2220      	movs	r2, #32
 800bb0c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	f0f0af5a 	.word	0xf0f0af5a
 800bb20:	a5fa0f0f 	.word	0xa5fa0f0f

0800bb24 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3305      	adds	r3, #5
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	3306      	adds	r3, #6
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d10b      	bne.n	800bb54 <ModBUS_Check+0x30>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3302      	adds	r3, #2
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	461a      	mov	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3303      	adds	r3, #3
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <ModBUS_Check+0x30>
	{
		return(1);
 800bb50:	2301      	movs	r3, #1
 800bb52:	e000      	b.n	800bb56 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800bb54:	2300      	movs	r3, #0
	}
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	7c9b      	ldrb	r3, [r3, #18]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d11d      	bne.n	800bbb4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d116      	bne.n	800bbb4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d10f      	bne.n	800bbb4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d108      	bne.n	800bbb4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d101      	bne.n	800bbb4 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e000      	b.n	800bbb6 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800bbb4:	2300      	movs	r3, #0
	}
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b085      	sub	sp, #20
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	70fb      	strb	r3, [r7, #3]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bbdc:	78fa      	ldrb	r2, [r7, #3]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d901      	bls.n	800bbe6 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e013      	b.n	800bc0e <ModBUS_F03_Assign+0x4c>
	}
	else
	{
		m2->_Holding_Registers[(address)+1]=data;
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	883a      	ldrh	r2, [r7, #0]
 800bbec:	b2d1      	uxtb	r1, r2
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	460a      	mov	r2, r1
 800bbf4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800bbf8:	883b      	ldrh	r3, [r7, #0]
 800bbfa:	0a1b      	lsrs	r3, r3, #8
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800bc00:	78fb      	ldrb	r3, [r7, #3]
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	4413      	add	r3, r2
 800bc06:	7bfa      	ldrb	r2, [r7, #15]
 800bc08:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800bc0c:	2300      	movs	r3, #0
	}
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3714      	adds	r7, #20
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b085      	sub	sp, #20
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	460b      	mov	r3, r1
 800bc24:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800bc26:	2300      	movs	r3, #0
 800bc28:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bc34:	78fa      	ldrb	r2, [r7, #3]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d901      	bls.n	800bc3e <ModBUS_F03_Read+0x24>
	{
		return(1);
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e015      	b.n	800bc6a <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(address*2)];
 800bc3e:	78fb      	ldrb	r3, [r7, #3]
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	4413      	add	r3, r2
 800bc46:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bc4a:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800bc4c:	89fb      	ldrh	r3, [r7, #14]
 800bc4e:	021b      	lsls	r3, r3, #8
 800bc50:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address*2)+1];
 800bc52:	78fb      	ldrb	r3, [r7, #3]
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	3301      	adds	r3, #1
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	89fb      	ldrh	r3, [r7, #14]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	81fb      	strh	r3, [r7, #14]
		return(n);
 800bc68:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	460b      	mov	r3, r1
 800bc80:	807b      	strh	r3, [r7, #2]
 800bc82:	4613      	mov	r3, r2
 800bc84:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800bc86:	887b      	ldrh	r3, [r7, #2]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	bf14      	ite	ne
 800bc8c:	2301      	movne	r3, #1
 800bc8e:	2300      	moveq	r3, #0
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	461a      	mov	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800bc9a:	887b      	ldrh	r3, [r7, #2]
 800bc9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bca0:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800bca2:	887b      	ldrh	r3, [r7, #2]
 800bca4:	0a1b      	lsrs	r3, r3, #8
 800bca6:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800bca8:	887b      	ldrh	r3, [r7, #2]
 800bcaa:	f003 030f 	and.w	r3, r3, #15
 800bcae:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2206      	movs	r2, #6
 800bcdc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	781a      	ldrb	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2203      	movs	r2, #3
 800bcee:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800bcf2:	887b      	ldrh	r3, [r7, #2]
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	787a      	ldrb	r2, [r7, #1]
 800bd08:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	220c      	movs	r2, #12
 800bd10:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800bd14:	bf00      	nop
 800bd16:	4618      	mov	r0, r3
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
	...

0800bd24 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b09c      	sub	sp, #112	; 0x70
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	791b      	ldrb	r3, [r3, #4]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	f041 813f 	bne.w	800cfb4 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f103 0212 	add.w	r2, r3, #18
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd42:	4619      	mov	r1, r3
 800bd44:	4610      	mov	r0, r2
 800bd46:	f7ff feed 	bl	800bb24 <ModBUS_Check>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f001 812f 	beq.w	800cfb0 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	7e5b      	ldrb	r3, [r3, #25]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	2b0f      	cmp	r3, #15
 800bd5a:	f201 80f3 	bhi.w	800cf44 <ModBUS+0x1220>
 800bd5e:	a201      	add	r2, pc, #4	; (adr r2, 800bd64 <ModBUS+0x40>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bda5 	.word	0x0800bda5
 800bd68:	0800bfe5 	.word	0x0800bfe5
 800bd6c:	0800c225 	.word	0x0800c225
 800bd70:	0800c45d 	.word	0x0800c45d
 800bd74:	0800c695 	.word	0x0800c695
 800bd78:	0800c8ab 	.word	0x0800c8ab
 800bd7c:	0800cf45 	.word	0x0800cf45
 800bd80:	0800cf45 	.word	0x0800cf45
 800bd84:	0800cf45 	.word	0x0800cf45
 800bd88:	0800cf45 	.word	0x0800cf45
 800bd8c:	0800cf45 	.word	0x0800cf45
 800bd90:	0800cf45 	.word	0x0800cf45
 800bd94:	0800cf45 	.word	0x0800cf45
 800bd98:	0800cf45 	.word	0x0800cf45
 800bd9c:	0800ca67 	.word	0x0800ca67
 800bda0:	0800ccf7 	.word	0x0800ccf7

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	7d9a      	ldrb	r2, [r3, #22]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	7d5a      	ldrb	r2, [r3, #21]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	7d1a      	ldrb	r2, [r3, #20]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	7cda      	ldrb	r2, [r3, #19]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	7c9a      	ldrb	r2, [r3, #18]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7a9b      	ldrb	r3, [r3, #10]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	f040 80e6 	bne.w	800bfb0 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	7e9b      	ldrb	r3, [r3, #26]
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bdf6:	021b      	lsls	r3, r3, #8
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800be06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	7edb      	ldrb	r3, [r3, #27]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	4313      	orrs	r3, r2
 800be20:	b29a      	uxth	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	7f1b      	ldrb	r3, [r3, #28]
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be3a:	021b      	lsls	r3, r3, #8
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be4e:	b29a      	uxth	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	7f5b      	ldrb	r3, [r3, #29]
 800be60:	b29b      	uxth	r3, r3
 800be62:	4313      	orrs	r3, r2
 800be64:	b29a      	uxth	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800be78:	b29b      	uxth	r3, r3
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d87e      	bhi.n	800bf7c <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800be84:	461a      	mov	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be8c:	4413      	add	r3, r2
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800be94:	4293      	cmp	r3, r2
 800be96:	dc57      	bgt.n	800bf48 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800be98:	2300      	movs	r3, #0
 800be9a:	613b      	str	r3, [r7, #16]
 800be9c:	2300      	movs	r3, #0
 800be9e:	60fb      	str	r3, [r7, #12]
 800bea0:	2300      	movs	r3, #0
 800bea2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bea4:	2300      	movs	r3, #0
 800bea6:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800beb8:	40d3      	lsrs	r3, r2
 800beba:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bec2:	08db      	lsrs	r3, r3, #3
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bece:	f003 0307 	and.w	r3, r3, #7
 800bed2:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d102      	bne.n	800bee0 <ModBUS+0x1bc>
									{
										bytes=div;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bede:	e002      	b.n	800bee6 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	3301      	adds	r3, #1
 800bee4:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800bee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800bef0:	e00e      	b.n	800bf10 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bef4:	3308      	adds	r3, #8
 800bef6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bef8:	b2d1      	uxtb	r1, r2
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	4413      	add	r3, r2
 800befe:	460a      	mov	r2, r1
 800bf00:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800bf04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf06:	0a1b      	lsrs	r3, r3, #8
 800bf08:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800bf0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800bf10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dced      	bgt.n	800bef2 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bf2c:	3303      	adds	r3, #3
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bf3c:	1d9a      	adds	r2, r3, #6
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bf44:	f001 b8d4 	b.w	800d0f0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2281      	movs	r2, #129	; 0x81
 800bf54:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2203      	movs	r2, #3
 800bf64:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bf6e:	1d9a      	adds	r2, r3, #6
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800bf76:	2302      	movs	r3, #2
 800bf78:	f001 b8ba 	b.w	800d0f0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2203      	movs	r2, #3
 800bf80:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2281      	movs	r2, #129	; 0x81
 800bf88:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2203      	movs	r2, #3
 800bf98:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bfa2:	1d9a      	adds	r2, r3, #6
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800bfaa:	2303      	movs	r3, #3
 800bfac:	f001 b8a0 	b.w	800d0f0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2281      	movs	r2, #129	; 0x81
 800bfbc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2203      	movs	r2, #3
 800bfcc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bfd6:	1d9a      	adds	r2, r3, #6
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800bfde:	2301      	movs	r3, #1
 800bfe0:	f001 b886 	b.w	800d0f0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	7d9a      	ldrb	r2, [r3, #22]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	7d5a      	ldrb	r2, [r3, #21]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	7d1a      	ldrb	r2, [r3, #20]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	7cda      	ldrb	r2, [r3, #19]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	7c9a      	ldrb	r2, [r3, #18]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c016:	2300      	movs	r3, #0
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	7adb      	ldrb	r3, [r3, #11]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	f040 80e6 	bne.w	800c1f0 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	7e9b      	ldrb	r3, [r3, #26]
 800c028:	b29a      	uxth	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c036:	021b      	lsls	r3, r3, #8
 800c038:	b29a      	uxth	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c046:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	7edb      	ldrb	r3, [r3, #27]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	4313      	orrs	r3, r2
 800c060:	b29a      	uxth	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	7f1b      	ldrb	r3, [r3, #28]
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c07a:	021b      	lsls	r3, r3, #8
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c08a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c08e:	b29a      	uxth	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	7f5b      	ldrb	r3, [r3, #29]
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d87e      	bhi.n	800c1bc <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c0cc:	4413      	add	r3, r2
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	dc57      	bgt.n	800c188 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	623b      	str	r3, [r7, #32]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	61fb      	str	r3, [r7, #28]
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	667b      	str	r3, [r7, #100]	; 0x64
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800c0f8:	40d3      	lsrs	r3, r2
 800c0fa:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c102:	08db      	lsrs	r3, r3, #3
 800c104:	b29b      	uxth	r3, r3
 800c106:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c10e:	f003 0307 	and.w	r3, r3, #7
 800c112:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d102      	bne.n	800c120 <ModBUS+0x3fc>
									{
										bytes=div;
 800c11a:	6a3b      	ldr	r3, [r7, #32]
 800c11c:	667b      	str	r3, [r7, #100]	; 0x64
 800c11e:	e002      	b.n	800c126 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800c120:	6a3b      	ldr	r3, [r7, #32]
 800c122:	3301      	adds	r3, #1
 800c124:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800c126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c130:	e00e      	b.n	800c150 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c134:	3308      	adds	r3, #8
 800c136:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c138:	b2d1      	uxtb	r1, r2
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	4413      	add	r3, r2
 800c13e:	460a      	mov	r2, r1
 800c140:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c146:	0a1b      	lsrs	r3, r3, #8
 800c148:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800c14a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c14c:	3b01      	subs	r3, #1
 800c14e:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800c150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c152:	2b00      	cmp	r3, #0
 800c154:	dced      	bgt.n	800c132 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2202      	movs	r2, #2
 800c15a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c16c:	3303      	adds	r3, #3
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c17c:	1d9a      	adds	r2, r3, #6
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c184:	f000 bfb4 	b.w	800d0f0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2202      	movs	r2, #2
 800c18c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2282      	movs	r2, #130	; 0x82
 800c194:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2203      	movs	r2, #3
 800c1a4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c1ae:	1d9a      	adds	r2, r3, #6
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c1b6:	2302      	movs	r3, #2
 800c1b8:	f000 bf9a 	b.w	800d0f0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2203      	movs	r2, #3
 800c1c0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2282      	movs	r2, #130	; 0x82
 800c1c8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2203      	movs	r2, #3
 800c1d8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c1e2:	1d9a      	adds	r2, r3, #6
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	f000 bf80 	b.w	800d0f0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2282      	movs	r2, #130	; 0x82
 800c1fc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2203      	movs	r2, #3
 800c20c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c216:	1d9a      	adds	r2, r3, #6
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c21e:	2301      	movs	r3, #1
 800c220:	f000 bf66 	b.w	800d0f0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	7d9a      	ldrb	r2, [r3, #22]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	7d5a      	ldrb	r2, [r3, #21]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	7d1a      	ldrb	r2, [r3, #20]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	7cda      	ldrb	r2, [r3, #19]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	7c9a      	ldrb	r2, [r3, #18]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c256:	2300      	movs	r3, #0
 800c258:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	7b1b      	ldrb	r3, [r3, #12]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	f040 80e2 	bne.w	800c428 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7e9b      	ldrb	r3, [r3, #26]
 800c268:	b29a      	uxth	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c276:	021b      	lsls	r3, r3, #8
 800c278:	b29a      	uxth	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	7edb      	ldrb	r3, [r3, #27]
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7f1b      	ldrb	r3, [r3, #28]
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c2ba:	021b      	lsls	r3, r3, #8
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c2ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	7f5b      	ldrb	r3, [r3, #29]
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d87a      	bhi.n	800c3f4 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c304:	461a      	mov	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c30c:	4413      	add	r3, r2
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800c314:	4293      	cmp	r3, r2
 800c316:	dc53      	bgt.n	800c3c0 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c318:	e029      	b.n	800c36e <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c320:	461a      	mov	r2, r3
 800c322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c324:	4413      	add	r3, r2
 800c326:	005a      	lsls	r2, r3, #1
 800c328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c32a:	005b      	lsls	r3, r3, #1
 800c32c:	3309      	adds	r3, #9
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	440a      	add	r2, r1
 800c332:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	4413      	add	r3, r2
 800c33a:	460a      	mov	r2, r1
 800c33c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c346:	461a      	mov	r2, r3
 800c348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c34a:	4413      	add	r3, r2
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	1c5a      	adds	r2, r3, #1
 800c350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c352:	3305      	adds	r3, #5
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	6879      	ldr	r1, [r7, #4]
 800c358:	440a      	add	r2, r1
 800c35a:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	4413      	add	r3, r2
 800c362:	460a      	mov	r2, r1
 800c364:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c36a:	3301      	adds	r3, #1
 800c36c:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c374:	461a      	mov	r2, r3
 800c376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c378:	4293      	cmp	r3, r2
 800c37a:	dbce      	blt.n	800c31a <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c382:	b2db      	uxtb	r3, r3
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	b2da      	uxtb	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2203      	movs	r2, #3
 800c392:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c3a4:	3303      	adds	r3, #3
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c3b4:	1d9a      	adds	r2, r3, #6
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c3bc:	f000 be98 	b.w	800d0f0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2283      	movs	r2, #131	; 0x83
 800c3cc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2203      	movs	r2, #3
 800c3dc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c3e6:	1d9a      	adds	r2, r3, #6
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	f000 be7e 	b.w	800d0f0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2203      	movs	r2, #3
 800c3f8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2283      	movs	r2, #131	; 0x83
 800c400:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2203      	movs	r2, #3
 800c410:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c41a:	1d9a      	adds	r2, r3, #6
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c422:	2303      	movs	r3, #3
 800c424:	f000 be64 	b.w	800d0f0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2283      	movs	r2, #131	; 0x83
 800c434:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2203      	movs	r2, #3
 800c444:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c44e:	1d9a      	adds	r2, r3, #6
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c456:	2301      	movs	r3, #1
 800c458:	f000 be4a 	b.w	800d0f0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7d9a      	ldrb	r2, [r3, #22]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7d5a      	ldrb	r2, [r3, #21]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	7d1a      	ldrb	r2, [r3, #20]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	7cda      	ldrb	r2, [r3, #19]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7c9a      	ldrb	r2, [r3, #18]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c48e:	2300      	movs	r3, #0
 800c490:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7b5b      	ldrb	r3, [r3, #13]
 800c496:	2b01      	cmp	r3, #1
 800c498:	f040 80e2 	bne.w	800c660 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	7e9b      	ldrb	r3, [r3, #26]
 800c4a0:	b29a      	uxth	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c4ae:	021b      	lsls	r3, r3, #8
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c4be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	7edb      	ldrb	r3, [r3, #27]
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	7f1b      	ldrb	r3, [r3, #28]
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c506:	b29a      	uxth	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7f5b      	ldrb	r3, [r3, #29]
 800c518:	b29b      	uxth	r3, r3
 800c51a:	4313      	orrs	r3, r2
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800c530:	b29b      	uxth	r3, r3
 800c532:	429a      	cmp	r2, r3
 800c534:	d87a      	bhi.n	800c62c <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c53c:	461a      	mov	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c544:	4413      	add	r3, r2
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800c54c:	4293      	cmp	r3, r2
 800c54e:	dc53      	bgt.n	800c5f8 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c550:	e029      	b.n	800c5a6 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c558:	461a      	mov	r2, r3
 800c55a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c55c:	4413      	add	r3, r2
 800c55e:	005a      	lsls	r2, r3, #1
 800c560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c562:	005b      	lsls	r3, r3, #1
 800c564:	3309      	adds	r3, #9
 800c566:	6879      	ldr	r1, [r7, #4]
 800c568:	440a      	add	r2, r1
 800c56a:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	4413      	add	r3, r2
 800c572:	460a      	mov	r2, r1
 800c574:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c57e:	461a      	mov	r2, r3
 800c580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c582:	4413      	add	r3, r2
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c58a:	3305      	adds	r3, #5
 800c58c:	005b      	lsls	r3, r3, #1
 800c58e:	6879      	ldr	r1, [r7, #4]
 800c590:	440a      	add	r2, r1
 800c592:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	4413      	add	r3, r2
 800c59a:	460a      	mov	r2, r1
 800c59c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c5a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	dbce      	blt.n	800c552 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2204      	movs	r2, #4
 800c5ca:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c5dc:	3303      	adds	r3, #3
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c5ec:	1d9a      	adds	r2, r3, #6
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c5f4:	f000 bd7c 	b.w	800d0f0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2284      	movs	r2, #132	; 0x84
 800c604:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2203      	movs	r2, #3
 800c614:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c61e:	1d9a      	adds	r2, r3, #6
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c626:	2302      	movs	r3, #2
 800c628:	f000 bd62 	b.w	800d0f0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2203      	movs	r2, #3
 800c630:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2284      	movs	r2, #132	; 0x84
 800c638:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2203      	movs	r2, #3
 800c648:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c652:	1d9a      	adds	r2, r3, #6
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c65a:	2303      	movs	r3, #3
 800c65c:	f000 bd48 	b.w	800d0f0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2284      	movs	r2, #132	; 0x84
 800c66c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2203      	movs	r2, #3
 800c67c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c686:	1d9a      	adds	r2, r3, #6
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c68e:	2301      	movs	r3, #1
 800c690:	f000 bd2e 	b.w	800d0f0 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	7d9a      	ldrb	r2, [r3, #22]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	7d5a      	ldrb	r2, [r3, #21]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	7d1a      	ldrb	r2, [r3, #20]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	7cda      	ldrb	r2, [r3, #19]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	7c9a      	ldrb	r2, [r3, #18]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	7b9b      	ldrb	r3, [r3, #14]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	f040 80d1 	bne.w	800c876 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	7e9b      	ldrb	r3, [r3, #26]
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c6e6:	021b      	lsls	r3, r3, #8
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c6f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7edb      	ldrb	r3, [r3, #27]
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	4313      	orrs	r3, r2
 800c710:	b29a      	uxth	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	7f1b      	ldrb	r3, [r3, #28]
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c72a:	021b      	lsls	r3, r3, #8
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c73a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c73e:	b29a      	uxth	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	7f5b      	ldrb	r3, [r3, #29]
 800c750:	b29b      	uxth	r3, r3
 800c752:	4313      	orrs	r3, r2
 800c754:	b29a      	uxth	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800c762:	461a      	mov	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c76a:	429a      	cmp	r2, r3
 800c76c:	dd69      	ble.n	800c842 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c774:	2b00      	cmp	r3, #0
 800c776:	d005      	beq.n	800c784 <ModBUS+0xa60>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c77e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c782:	d144      	bne.n	800c80e <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c78a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c78e:	d10d      	bne.n	800c7ac <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800c79c:	4611      	mov	r1, r2
 800c79e:	2201      	movs	r2, #1
 800c7a0:	408a      	lsls	r2, r1
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800c7aa:	e003      	b.n	800c7b4 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	7f5a      	ldrb	r2, [r3, #29]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	7f1a      	ldrb	r2, [r3, #28]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	7eda      	ldrb	r2, [r3, #27]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	7e9a      	ldrb	r2, [r3, #26]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2205      	movs	r2, #5
 800c7e0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c7f2:	3306      	adds	r3, #6
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c802:	1d9a      	adds	r2, r3, #6
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c80a:	f000 bc71 	b.w	800d0f0 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2202      	movs	r2, #2
 800c812:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2285      	movs	r2, #133	; 0x85
 800c81a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2203      	movs	r2, #3
 800c82a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c834:	1d9a      	adds	r2, r3, #6
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800c83c:	2302      	movs	r3, #2
 800c83e:	f000 bc57 	b.w	800d0f0 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2203      	movs	r2, #3
 800c846:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2285      	movs	r2, #133	; 0x85
 800c84e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2203      	movs	r2, #3
 800c85e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c868:	1d9a      	adds	r2, r3, #6
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800c870:	2303      	movs	r3, #3
 800c872:	f000 bc3d 	b.w	800d0f0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2285      	movs	r2, #133	; 0x85
 800c882:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2203      	movs	r2, #3
 800c892:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c89c:	1d9a      	adds	r2, r3, #6
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	f000 bc23 	b.w	800d0f0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	7d9a      	ldrb	r2, [r3, #22]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	7d5a      	ldrb	r2, [r3, #21]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	7d1a      	ldrb	r2, [r3, #20]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	7cda      	ldrb	r2, [r3, #19]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	7c9a      	ldrb	r2, [r3, #18]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	7bdb      	ldrb	r3, [r3, #15]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	f040 80a3 	bne.w	800ca34 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	7e9b      	ldrb	r3, [r3, #26]
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c900:	021b      	lsls	r3, r3, #8
 800c902:	b29a      	uxth	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c910:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c914:	b29a      	uxth	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	7edb      	ldrb	r3, [r3, #27]
 800c926:	b29b      	uxth	r3, r3
 800c928:	4313      	orrs	r3, r2
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c938:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	7f1b      	ldrb	r3, [r3, #28]
 800c93e:	b29a      	uxth	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c94c:	021b      	lsls	r3, r3, #8
 800c94e:	b29a      	uxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c95c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c960:	b29a      	uxth	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7f5b      	ldrb	r3, [r3, #29]
 800c972:	b29b      	uxth	r3, r3
 800c974:	4313      	orrs	r3, r2
 800c976:	b29a      	uxth	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d838      	bhi.n	800ca02 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c990:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	7f11      	ldrb	r1, [r2, #28]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	4413      	add	r3, r2
 800c99a:	460a      	mov	r2, r1
 800c99c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c9a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	7f51      	ldrb	r1, [r2, #29]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	460a      	mov	r2, r1
 800c9ae:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	7f5a      	ldrb	r2, [r3, #29]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7f1a      	ldrb	r2, [r3, #28]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7eda      	ldrb	r2, [r3, #27]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	7e9a      	ldrb	r2, [r3, #26]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2206      	movs	r2, #6
 800c9de:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2206      	movs	r2, #6
 800c9ee:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c9f8:	1d9a      	adds	r2, r3, #6
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ca00:	e376      	b.n	800d0f0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2202      	movs	r2, #2
 800ca06:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2286      	movs	r2, #134	; 0x86
 800ca0e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2203      	movs	r2, #3
 800ca1e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca28:	1d9a      	adds	r2, r3, #6
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ca30:	2302      	movs	r3, #2
 800ca32:	e35d      	b.n	800d0f0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2286      	movs	r2, #134	; 0x86
 800ca40:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2203      	movs	r2, #3
 800ca50:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca5a:	1d9a      	adds	r2, r3, #6
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800ca62:	2301      	movs	r3, #1
 800ca64:	e344      	b.n	800d0f0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	7d9a      	ldrb	r2, [r3, #22]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	7d5a      	ldrb	r2, [r3, #21]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	7d1a      	ldrb	r2, [r3, #20]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	7cda      	ldrb	r2, [r3, #19]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	7c9a      	ldrb	r2, [r3, #18]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	7c1b      	ldrb	r3, [r3, #16]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	f040 810f 	bne.w	800ccc4 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	7e9b      	ldrb	r3, [r3, #26]
 800caaa:	b29a      	uxth	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cab8:	021b      	lsls	r3, r3, #8
 800caba:	b29a      	uxth	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cac8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cacc:	b29a      	uxth	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	7edb      	ldrb	r3, [r3, #27]
 800cade:	b29b      	uxth	r3, r3
 800cae0:	4313      	orrs	r3, r2
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7f1b      	ldrb	r3, [r3, #28]
 800caee:	b29a      	uxth	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cafc:	021b      	lsls	r3, r3, #8
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	7f5b      	ldrb	r3, [r3, #29]
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	4313      	orrs	r3, r2
 800cb26:	b29a      	uxth	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	f200 80a8 	bhi.w	800cc92 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb48:	461a      	mov	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb50:	4413      	add	r3, r2
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	f300 8081 	bgt.w	800cc60 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	657b      	str	r3, [r7, #84]	; 0x54
 800cb62:	2300      	movs	r3, #0
 800cb64:	653b      	str	r3, [r7, #80]	; 0x50
 800cb66:	2300      	movs	r3, #0
 800cb68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	7f9b      	ldrb	r3, [r3, #30]
 800cb72:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800cb74:	e00e      	b.n	800cb94 <ModBUS+0xe70>
									{
										data=data<<8;
 800cb76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb78:	021b      	lsls	r3, r3, #8
 800cb7a:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800cb7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb7e:	330c      	adds	r3, #12
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	4413      	add	r3, r2
 800cb84:	7c9b      	ldrb	r3, [r3, #18]
 800cb86:	461a      	mov	r2, r3
 800cb88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800cb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb90:	3b01      	subs	r3, #1
 800cb92:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800cb94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1ed      	bne.n	800cb76 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cba0:	461a      	mov	r2, r3
 800cba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cba4:	4093      	lsls	r3, r2
 800cba6:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cba8:	e00f      	b.n	800cbca <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb4:	4413      	add	r3, r2
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800cbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d3e8      	bcc.n	800cbaa <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800cbd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbda:	43db      	mvns	r3, r3
 800cbdc:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cbe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbe6:	401a      	ands	r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800cbee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbf0:	43db      	mvns	r3, r3
 800cbf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cbfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc00:	431a      	orrs	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	7f5a      	ldrb	r2, [r3, #29]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7f1a      	ldrb	r2, [r3, #28]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	7eda      	ldrb	r2, [r3, #27]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	7e9a      	ldrb	r2, [r3, #26]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	220f      	movs	r2, #15
 800cc34:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cc46:	3306      	adds	r3, #6
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cc56:	1d9a      	adds	r2, r3, #6
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cc5e:	e247      	b.n	800d0f0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2202      	movs	r2, #2
 800cc64:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	228f      	movs	r2, #143	; 0x8f
 800cc6c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2201      	movs	r2, #1
 800cc74:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2203      	movs	r2, #3
 800cc7c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cc86:	1d9a      	adds	r2, r3, #6
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cc8e:	2302      	movs	r3, #2
 800cc90:	e22e      	b.n	800d0f0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2203      	movs	r2, #3
 800cc96:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	228f      	movs	r2, #143	; 0x8f
 800cc9e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2203      	movs	r2, #3
 800ccae:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccb8:	1d9a      	adds	r2, r3, #6
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	e215      	b.n	800d0f0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	228f      	movs	r2, #143	; 0x8f
 800ccd0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2203      	movs	r2, #3
 800cce0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccea:	1d9a      	adds	r2, r3, #6
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e1fc      	b.n	800d0f0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	7d9a      	ldrb	r2, [r3, #22]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	7d5a      	ldrb	r2, [r3, #21]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	7d1a      	ldrb	r2, [r3, #20]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	7cda      	ldrb	r2, [r3, #19]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	7c9a      	ldrb	r2, [r3, #18]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cd2e:	2300      	movs	r3, #0
 800cd30:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	7c5b      	ldrb	r3, [r3, #17]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	f040 80eb 	bne.w	800cf12 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	7e9b      	ldrb	r3, [r3, #26]
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cd5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	7edb      	ldrb	r3, [r3, #27]
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	4313      	orrs	r3, r2
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	7f1b      	ldrb	r3, [r3, #28]
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cd9c:	021b      	lsls	r3, r3, #8
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cdac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	7f5b      	ldrb	r3, [r3, #29]
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d87f      	bhi.n	800cee0 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cde6:	461a      	mov	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cdee:	4413      	add	r3, r2
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	dc59      	bgt.n	800ceae <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800cdfa:	e029      	b.n	800ce50 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800cdfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce00:	f103 020d 	add.w	r2, r3, #13
 800ce04:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ce06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce0a:	440b      	add	r3, r1
 800ce0c:	6879      	ldr	r1, [r7, #4]
 800ce0e:	440a      	add	r2, r1
 800ce10:	7c91      	ldrb	r1, [r2, #18]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	4413      	add	r3, r2
 800ce16:	460a      	mov	r2, r1
 800ce18:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800ce1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce20:	3301      	adds	r3, #1
 800ce22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ce26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce2a:	f103 020d 	add.w	r2, r3, #13
 800ce2e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ce30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce34:	440b      	add	r3, r1
 800ce36:	6879      	ldr	r1, [r7, #4]
 800ce38:	440a      	add	r2, r1
 800ce3a:	7c91      	ldrb	r1, [r2, #18]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	4413      	add	r3, r2
 800ce40:	460a      	mov	r2, r1
 800ce42:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800ce46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	7f9b      	ldrb	r3, [r3, #30]
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d3ce      	bcc.n	800cdfc <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	7f5a      	ldrb	r2, [r3, #29]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	7f1a      	ldrb	r2, [r3, #28]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	7eda      	ldrb	r2, [r3, #27]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	7e9a      	ldrb	r2, [r3, #26]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2210      	movs	r2, #16
 800ce8a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2206      	movs	r2, #6
 800ce9a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cea4:	1d9a      	adds	r2, r3, #6
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ceac:	e120      	b.n	800d0f0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2290      	movs	r2, #144	; 0x90
 800ceba:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2203      	movs	r2, #3
 800ceca:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ced4:	1d9a      	adds	r2, r3, #6
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cedc:	2302      	movs	r3, #2
 800cede:	e107      	b.n	800d0f0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2203      	movs	r2, #3
 800cee4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2290      	movs	r2, #144	; 0x90
 800ceec:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2203      	movs	r2, #3
 800cefc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf06:	1d9a      	adds	r2, r3, #6
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cf0e:	2303      	movs	r3, #3
 800cf10:	e0ee      	b.n	800d0f0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2201      	movs	r2, #1
 800cf16:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2290      	movs	r2, #144	; 0x90
 800cf1e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2203      	movs	r2, #3
 800cf2e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf38:	1d9a      	adds	r2, r3, #6
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cf40:	2301      	movs	r3, #1
 800cf42:	e0d5      	b.n	800d0f0 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	7e5b      	ldrb	r3, [r3, #25]
 800cf50:	3b80      	subs	r3, #128	; 0x80
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	7e1a      	ldrb	r2, [r3, #24]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2203      	movs	r2, #3
 800cf68:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	7d9a      	ldrb	r2, [r3, #22]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	7d5a      	ldrb	r2, [r3, #21]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	7d1a      	ldrb	r2, [r3, #20]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	7cda      	ldrb	r2, [r3, #19]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7c9a      	ldrb	r2, [r3, #18]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cfa4:	1d9a      	adds	r2, r3, #6
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800cfac:	2301      	movs	r3, #1
 800cfae:	e09f      	b.n	800d0f0 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e09d      	b.n	800d0f0 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	791b      	ldrb	r3, [r3, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f040 8099 	bne.w	800d0f0 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f103 0212 	add.w	r2, r3, #18
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cfca:	4619      	mov	r1, r3
 800cfcc:	4610      	mov	r0, r2
 800cfce:	f7fe fda9 	bl	800bb24 <ModBUS_Check>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 808b 	beq.w	800d0f0 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7fe fdc1 	bl	800bb62 <ModBUS_Check_tid>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d04f      	beq.n	800d086 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7e5b      	ldrb	r3, [r3, #25]
 800cfea:	2b03      	cmp	r3, #3
 800cfec:	d143      	bne.n	800d076 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cffe:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d000:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d002:	021b      	lsls	r3, r3, #8
 800d004:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d010:	4313      	orrs	r3, r2
 800d012:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800d01a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d01e:	2300      	movs	r3, #0
 800d020:	643b      	str	r3, [r7, #64]	; 0x40
 800d022:	e022      	b.n	800d06a <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	f103 0209 	add.w	r2, r3, #9
 800d02c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d030:	440b      	add	r3, r1
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	6879      	ldr	r1, [r7, #4]
 800d036:	440a      	add	r2, r1
 800d038:	7c91      	ldrb	r1, [r2, #18]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	4413      	add	r3, r2
 800d03e:	460a      	mov	r2, r1
 800d040:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800d044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d046:	3305      	adds	r3, #5
 800d048:	005a      	lsls	r2, r3, #1
 800d04a:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d04e:	440b      	add	r3, r1
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	3301      	adds	r3, #1
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	440a      	add	r2, r1
 800d058:	7c91      	ldrb	r1, [r2, #18]
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	4413      	add	r3, r2
 800d05e:	460a      	mov	r2, r1
 800d060:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800d064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d066:	3301      	adds	r3, #1
 800d068:	643b      	str	r3, [r7, #64]	; 0x40
 800d06a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d06e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d070:	429a      	cmp	r2, r3
 800d072:	dbd7      	blt.n	800d024 <ModBUS+0x1300>

						}


					}
					break;
 800d074:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	7ddb      	ldrb	r3, [r3, #23]
 800d07a:	461a      	mov	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	7e9b      	ldrb	r3, [r3, #26]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	63bb      	str	r3, [r7, #56]	; 0x38
 800d084:	e034      	b.n	800d0f0 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	7e5b      	ldrb	r3, [r3, #25]
 800d08a:	3b81      	subs	r3, #129	; 0x81
 800d08c:	2b15      	cmp	r3, #21
 800d08e:	d82f      	bhi.n	800d0f0 <ModBUS+0x13cc>
 800d090:	a201      	add	r2, pc, #4	; (adr r2, 800d098 <ModBUS+0x1374>)
 800d092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d096:	bf00      	nop
 800d098:	0800d0f1 	.word	0x0800d0f1
 800d09c:	0800d0f1 	.word	0x0800d0f1
 800d0a0:	0800d0f1 	.word	0x0800d0f1
 800d0a4:	0800d0f1 	.word	0x0800d0f1
 800d0a8:	0800d0f1 	.word	0x0800d0f1
 800d0ac:	0800d0f1 	.word	0x0800d0f1
 800d0b0:	0800d0f1 	.word	0x0800d0f1
 800d0b4:	0800d0f1 	.word	0x0800d0f1
 800d0b8:	0800d0f1 	.word	0x0800d0f1
 800d0bc:	0800d0f1 	.word	0x0800d0f1
 800d0c0:	0800d0f1 	.word	0x0800d0f1
 800d0c4:	0800d0f1 	.word	0x0800d0f1
 800d0c8:	0800d0f1 	.word	0x0800d0f1
 800d0cc:	0800d0f1 	.word	0x0800d0f1
 800d0d0:	0800d0f1 	.word	0x0800d0f1
 800d0d4:	0800d0f1 	.word	0x0800d0f1
 800d0d8:	0800d0f1 	.word	0x0800d0f1
 800d0dc:	0800d0f1 	.word	0x0800d0f1
 800d0e0:	0800d0f1 	.word	0x0800d0f1
 800d0e4:	0800d0f1 	.word	0x0800d0f1
 800d0e8:	0800d0f1 	.word	0x0800d0f1
 800d0ec:	0800d0f1 	.word	0x0800d0f1
			}
		}
	}


}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3770      	adds	r7, #112	; 0x70
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af02      	add	r7, sp, #8
 800d0fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6858      	ldr	r0, [r3, #4]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	891b      	ldrh	r3, [r3, #8]
 800d108:	2200      	movs	r2, #0
 800d10a:	4619      	mov	r1, r3
 800d10c:	f7f5 ff40 	bl	8002f90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6818      	ldr	r0, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f103 0114 	add.w	r1, r3, #20
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f103 0218 	add.w	r2, r3, #24
 800d120:	2364      	movs	r3, #100	; 0x64
 800d122:	9300      	str	r3, [sp, #0]
 800d124:	2304      	movs	r3, #4
 800d126:	f7f6 fc48 	bl	80039ba <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6858      	ldr	r0, [r3, #4]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	891b      	ldrh	r3, [r3, #8]
 800d132:	2201      	movs	r2, #1
 800d134:	4619      	mov	r1, r3
 800d136:	f7f5 ff2b 	bl	8002f90 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	7edb      	ldrb	r3, [r3, #27]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b086      	sub	sp, #24
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	4608      	mov	r0, r1
 800d150:	4611      	mov	r1, r2
 800d152:	461a      	mov	r2, r3
 800d154:	4603      	mov	r3, r0
 800d156:	70fb      	strb	r3, [r7, #3]
 800d158:	460b      	mov	r3, r1
 800d15a:	70bb      	strb	r3, [r7, #2]
 800d15c:	4613      	mov	r3, r2
 800d15e:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800d160:	2300      	movs	r3, #0
 800d162:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	787a      	ldrb	r2, [r7, #1]
 800d168:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	78fa      	ldrb	r2, [r7, #3]
 800d16e:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	78ba      	ldrb	r2, [r7, #2]
 800d174:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800d17c:	787b      	ldrb	r3, [r7, #1]
 800d17e:	2bf0      	cmp	r3, #240	; 0xf0
 800d180:	d11d      	bne.n	800d1be <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800d182:	2300      	movs	r3, #0
 800d184:	613b      	str	r3, [r7, #16]
 800d186:	e013      	b.n	800d1b0 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	6a3a      	ldr	r2, [r7, #32]
 800d18c:	4413      	add	r3, r2
 800d18e:	781a      	ldrb	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7ff ffaf 	bl	800d0f8 <SPI_ETH>
 800d19a:	4603      	mov	r3, r0
 800d19c:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	7d9b      	ldrb	r3, [r3, #22]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	613b      	str	r3, [r7, #16]
 800d1b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1b4:	693a      	ldr	r2, [r7, #16]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	dbe6      	blt.n	800d188 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800d1ba:	8afb      	ldrh	r3, [r7, #22]
 800d1bc:	e037      	b.n	800d22e <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800d1be:	787b      	ldrb	r3, [r7, #1]
 800d1c0:	2b0f      	cmp	r3, #15
 800d1c2:	d134      	bne.n	800d22e <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800d1ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d120      	bne.n	800d214 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	60fb      	str	r3, [r7, #12]
 800d1d6:	e016      	b.n	800d206 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7ff ff8d 	bl	800d0f8 <SPI_ETH>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	8afb      	ldrh	r3, [r7, #22]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	7d9b      	ldrb	r3, [r3, #22]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d102      	bne.n	800d200 <SPI_ETH_REG+0xba>
 800d1fa:	8afb      	ldrh	r3, [r7, #22]
 800d1fc:	021b      	lsls	r3, r3, #8
 800d1fe:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	3301      	adds	r3, #1
 800d204:	60fb      	str	r3, [r7, #12]
 800d206:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	dbe3      	blt.n	800d1d8 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800d210:	8afb      	ldrh	r3, [r7, #22]
 800d212:	e00c      	b.n	800d22e <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff ff6f 	bl	800d0f8 <SPI_ETH>
 800d21a:	4603      	mov	r3, r0
 800d21c:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	7d9b      	ldrb	r3, [r3, #22]
 800d222:	3301      	adds	r3, #1
 800d224:	b2da      	uxtb	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	759a      	strb	r2, [r3, #22]
			return(res);
 800d22a:	8afb      	ldrh	r3, [r7, #22]
 800d22c:	e7ff      	b.n	800d22e <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b086      	sub	sp, #24
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	460b      	mov	r3, r1
 800d240:	807b      	strh	r3, [r7, #2]
 800d242:	4613      	mov	r3, r2
 800d244:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800d246:	2300      	movs	r3, #0
 800d248:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	22f0      	movs	r2, #240	; 0xf0
 800d24e:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800d250:	883b      	ldrh	r3, [r7, #0]
 800d252:	b2db      	uxtb	r3, r3
 800d254:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800d256:	883b      	ldrh	r3, [r7, #0]
 800d258:	0a1b      	lsrs	r3, r3, #8
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800d260:	2300      	movs	r3, #0
 800d262:	613b      	str	r3, [r7, #16]
 800d264:	e01b      	b.n	800d29e <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800d266:	887b      	ldrh	r3, [r7, #2]
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800d26e:	887b      	ldrh	r3, [r7, #2]
 800d270:	0a1b      	lsrs	r3, r3, #8
 800d272:	b29b      	uxth	r3, r3
 800d274:	b2da      	uxtb	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	755a      	strb	r2, [r3, #21]
		addr++;
 800d27a:	887b      	ldrh	r3, [r7, #2]
 800d27c:	3301      	adds	r3, #1
 800d27e:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800d280:	f107 020c 	add.w	r2, r7, #12
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	4413      	add	r3, r2
 800d288:	781a      	ldrb	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7ff ff32 	bl	800d0f8 <SPI_ETH>
 800d294:	4603      	mov	r3, r0
 800d296:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	3301      	adds	r3, #1
 800d29c:	613b      	str	r3, [r7, #16]
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	dde0      	ble.n	800d266 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800d2a4:	8afb      	ldrh	r3, [r7, #22]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3718      	adds	r7, #24
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d2ae:	b590      	push	{r4, r7, lr}
 800d2b0:	b087      	sub	sp, #28
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	607a      	str	r2, [r7, #4]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	817b      	strh	r3, [r7, #10]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	220f      	movs	r2, #15
 800d2c6:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d2c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2ce:	d226      	bcs.n	800d31e <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	617b      	str	r3, [r7, #20]
 800d2da:	e01a      	b.n	800d312 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800d2dc:	897b      	ldrh	r3, [r7, #10]
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d2e4:	897b      	ldrh	r3, [r7, #10]
 800d2e6:	0a1b      	lsrs	r3, r3, #8
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	b2da      	uxtb	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800d2f0:	893a      	ldrh	r2, [r7, #8]
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	189c      	adds	r4, r3, r2
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f7ff fefb 	bl	800d0f8 <SPI_ETH>
 800d302:	4603      	mov	r3, r0
 800d304:	7023      	strb	r3, [r4, #0]
				addr++;
 800d306:	897b      	ldrh	r3, [r7, #10]
 800d308:	3301      	adds	r3, #1
 800d30a:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	3301      	adds	r3, #1
 800d310:	617b      	str	r3, [r7, #20]
 800d312:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d314:	697a      	ldr	r2, [r7, #20]
 800d316:	429a      	cmp	r2, r3
 800d318:	dbe0      	blt.n	800d2dc <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d31a:	2300      	movs	r3, #0
 800d31c:	e000      	b.n	800d320 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800d31e:	2301      	movs	r3, #1
	}
}
 800d320:	4618      	mov	r0, r3
 800d322:	371c      	adds	r7, #28
 800d324:	46bd      	mov	sp, r7
 800d326:	bd90      	pop	{r4, r7, pc}

0800d328 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	607a      	str	r2, [r7, #4]
 800d332:	461a      	mov	r2, r3
 800d334:	460b      	mov	r3, r1
 800d336:	817b      	strh	r3, [r7, #10]
 800d338:	4613      	mov	r3, r2
 800d33a:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	22f0      	movs	r2, #240	; 0xf0
 800d340:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d342:	8c3b      	ldrh	r3, [r7, #32]
 800d344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d348:	d223      	bcs.n	800d392 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800d34a:	2300      	movs	r3, #0
 800d34c:	617b      	str	r3, [r7, #20]
 800d34e:	e01a      	b.n	800d386 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800d350:	897b      	ldrh	r3, [r7, #10]
 800d352:	b2da      	uxtb	r2, r3
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d358:	897b      	ldrh	r3, [r7, #10]
 800d35a:	0a1b      	lsrs	r3, r3, #8
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800d364:	893a      	ldrh	r2, [r7, #8]
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	4413      	add	r3, r2
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	4413      	add	r3, r2
 800d36e:	7f1a      	ldrb	r2, [r3, #28]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f7ff febf 	bl	800d0f8 <SPI_ETH>
				addr++;
 800d37a:	897b      	ldrh	r3, [r7, #10]
 800d37c:	3301      	adds	r3, #1
 800d37e:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	3301      	adds	r3, #1
 800d384:	617b      	str	r3, [r7, #20]
 800d386:	8c3b      	ldrh	r3, [r7, #32]
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	dbe0      	blt.n	800d350 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d38e:	2300      	movs	r3, #0
 800d390:	e000      	b.n	800d394 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800d392:	2301      	movs	r3, #1
	}
}
 800d394:	4618      	mov	r0, r3
 800d396:	3718      	adds	r7, #24
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	70fb      	strb	r3, [r7, #3]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	22f0      	movs	r2, #240	; 0xf0
 800d3b0:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800d3b2:	78fb      	ldrb	r3, [r7, #3]
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	78ba      	ldrb	r2, [r7, #2]
 800d3c6:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7ff fe95 	bl	800d0f8 <SPI_ETH>
}
 800d3ce:	bf00      	nop
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	22f0      	movs	r2, #240	; 0xf0
 800d3ec:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800d3ee:	78fb      	ldrb	r3, [r7, #3]
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	78ba      	ldrb	r2, [r7, #2]
 800d402:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7ff fe77 	bl	800d0f8 <SPI_ETH>
}
 800d40a:	bf00      	nop
 800d40c:	4618      	mov	r0, r3
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af02      	add	r7, sp, #8
 800d41a:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d422:	331c      	adds	r3, #28
 800d424:	2204      	movs	r2, #4
 800d426:	9201      	str	r2, [sp, #4]
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	23f0      	movs	r3, #240	; 0xf0
 800d42c:	2201      	movs	r2, #1
 800d42e:	2100      	movs	r1, #0
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7ff fe88 	bl	800d146 <SPI_ETH_REG>
	 // ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d43c:	2204      	movs	r2, #4
 800d43e:	9201      	str	r2, [sp, #4]
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	23f0      	movs	r3, #240	; 0xf0
 800d444:	2205      	movs	r2, #5
 800d446:	2100      	movs	r1, #0
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7ff fe7c 	bl	800d146 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d454:	3304      	adds	r3, #4
 800d456:	2206      	movs	r2, #6
 800d458:	9201      	str	r2, [sp, #4]
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	23f0      	movs	r3, #240	; 0xf0
 800d45e:	2209      	movs	r2, #9
 800d460:	2100      	movs	r1, #0
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f7ff fe6f 	bl	800d146 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d46e:	330a      	adds	r3, #10
 800d470:	2204      	movs	r2, #4
 800d472:	9201      	str	r2, [sp, #4]
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	23f0      	movs	r3, #240	; 0xf0
 800d478:	220f      	movs	r2, #15
 800d47a:	2100      	movs	r1, #0
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7ff fe62 	bl	800d146 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d488:	330e      	adds	r3, #14
 800d48a:	2201      	movs	r2, #1
 800d48c:	9201      	str	r2, [sp, #4]
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	23f0      	movs	r3, #240	; 0xf0
 800d492:	221a      	movs	r2, #26
 800d494:	2100      	movs	r1, #0
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7ff fe55 	bl	800d146 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4a2:	330f      	adds	r3, #15
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	9201      	str	r2, [sp, #4]
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	23f0      	movs	r3, #240	; 0xf0
 800d4ac:	221b      	movs	r2, #27
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff fe48 	bl	800d146 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client

}
 800d4b6:	bf00      	nop
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af02      	add	r7, sp, #8
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800d4cc:	78fb      	ldrb	r3, [r7, #3]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f7ff ff80 	bl	800d3d8 <eth_wr_SOCKET_MODE>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4de:	331a      	adds	r3, #26
 800d4e0:	2202      	movs	r2, #2
 800d4e2:	9201      	str	r2, [sp, #4]
 800d4e4:	9300      	str	r3, [sp, #0]
 800d4e6:	23f0      	movs	r3, #240	; 0xf0
 800d4e8:	2204      	movs	r2, #4
 800d4ea:	2104      	movs	r1, #4
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fe2a 	bl	800d146 <SPI_ETH_REG>

	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4f8:	331c      	adds	r3, #28
 800d4fa:	2204      	movs	r2, #4
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	23f0      	movs	r3, #240	; 0xf0
 800d502:	220c      	movs	r2, #12
 800d504:	2104      	movs	r1, #4
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7ff fe1d 	bl	800d146 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d512:	2202      	movs	r2, #2
 800d514:	9201      	str	r2, [sp, #4]
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	23f0      	movs	r3, #240	; 0xf0
 800d51a:	2210      	movs	r2, #16
 800d51c:	2104      	movs	r1, #4
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7ff fe11 	bl	800d146 <SPI_ETH_REG>


	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800d524:	78fb      	ldrb	r3, [r7, #3]
 800d526:	2201      	movs	r2, #1
 800d528:	4619      	mov	r1, r3
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7ff ff36 	bl	800d39c <eth_wr_SOCKET_CMD>
	 //ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client

	 if(ETH->S0_ENserver == 1)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d106      	bne.n	800d54c <eth_socket_init+0x8c>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800d53e:	78fb      	ldrb	r3, [r7, #3]
 800d540:	2202      	movs	r2, #2
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff ff29 	bl	800d39c <eth_wr_SOCKET_CMD>
 800d54a:	e009      	b.n	800d560 <eth_socket_init+0xa0>
		 //ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800d54c:	78fb      	ldrb	r3, [r7, #3]
 800d54e:	2204      	movs	r2, #4
 800d550:	4619      	mov	r1, r3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7ff ff22 	bl	800d39c <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800d558:	2115      	movs	r1, #21
 800d55a:	4804      	ldr	r0, [pc, #16]	; (800d56c <eth_socket_init+0xac>)
 800d55c:	f7f3 fed6 	bl	800130c <ITM0_Write>
	 }
}
 800d560:	bf00      	nop
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	0800faac 	.word	0x0800faac

0800d570 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	220f      	movs	r2, #15
 800d580:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800d582:	78fb      	ldrb	r3, [r7, #3]
 800d584:	3304      	adds	r3, #4
 800d586:	b2da      	uxtb	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2203      	movs	r2, #3
 800d590:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7ff fdad 	bl	800d0f8 <SPI_ETH>
	return(y->RX[3]);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	7edb      	ldrb	r3, [r3, #27]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b082      	sub	sp, #8
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	220f      	movs	r2, #15
 800d5ba:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800d5bc:	78fb      	ldrb	r3, [r7, #3]
 800d5be:	3304      	adds	r3, #4
 800d5c0:	b2da      	uxtb	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f7ff fd90 	bl	800d0f8 <SPI_ETH>
	return(y->RX[3]);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	7edb      	ldrb	r3, [r3, #27]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b08c      	sub	sp, #48	; 0x30
 800d5e8:	af02      	add	r7, sp, #8
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	607a      	str	r2, [r7, #4]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	72fb      	strb	r3, [r7, #11]
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800d600:	2300      	movs	r3, #0
 800d602:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800d604:	2300      	movs	r3, #0
 800d606:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800d608:	2300      	movs	r3, #0
 800d60a:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800d60c:	2300      	movs	r3, #0
 800d60e:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800d610:	2300      	movs	r3, #0
 800d612:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800d614:	2300      	movs	r3, #0
 800d616:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800d618:	2300      	movs	r3, #0
 800d61a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800d620:	7afb      	ldrb	r3, [r7, #11]
 800d622:	2b03      	cmp	r3, #3
 800d624:	d83e      	bhi.n	800d6a4 <eth_rd_SOCKET_DATA+0xc0>
 800d626:	a201      	add	r2, pc, #4	; (adr r2, 800d62c <eth_rd_SOCKET_DATA+0x48>)
 800d628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62c:	0800d63d 	.word	0x0800d63d
 800d630:	0800d657 	.word	0x0800d657
 800d634:	0800d671 	.word	0x0800d671
 800d638:	0800d68b 	.word	0x0800d68b
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d642:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d646:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d64e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d652:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d654:	e033      	b.n	800d6be <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d65c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d660:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d668:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d66c:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d66e:	e026      	b.n	800d6be <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d67a:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d682:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d686:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d688:	e019      	b.n	800d6be <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d690:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d694:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d69c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d6a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d6a2:	e00c      	b.n	800d6be <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d6ae:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d6ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d6bc:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d6be:	7afb      	ldrb	r3, [r7, #11]
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	b2d9      	uxtb	r1, r3
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	9301      	str	r3, [sp, #4]
 800d6c8:	f107 0310 	add.w	r3, r7, #16
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	230f      	movs	r3, #15
 800d6d0:	2228      	movs	r2, #40	; 0x28
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f7ff fd37 	bl	800d146 <SPI_ETH_REG>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800d6dc:	8b7a      	ldrh	r2, [r7, #26]
 800d6de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800d6e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d6e6:	8b3b      	ldrh	r3, [r7, #24]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800d6ec:	8b3a      	ldrh	r2, [r7, #24]
 800d6ee:	893b      	ldrh	r3, [r7, #8]
 800d6f0:	441a      	add	r2, r3
 800d6f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	dd2c      	ble.n	800d754 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800d6fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6fc:	8b3b      	ldrh	r3, [r7, #24]
 800d6fe:	1ad3      	subs	r3, r2, r3
 800d700:	b29b      	uxth	r3, r3
 800d702:	3301      	adds	r3, #1
 800d704:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f103 021c 	add.w	r2, r3, #28
 800d70c:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d70e:	8af9      	ldrh	r1, [r7, #22]
 800d710:	8bfb      	ldrh	r3, [r7, #30]
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	4603      	mov	r3, r0
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f7ff fdc9 	bl	800d2ae <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d71c:	8bba      	ldrh	r2, [r7, #28]
 800d71e:	8bfb      	ldrh	r3, [r7, #30]
 800d720:	4413      	add	r3, r2
 800d722:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800d724:	893a      	ldrh	r2, [r7, #8]
 800d726:	8bfb      	ldrh	r3, [r7, #30]
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800d72c:	8bfb      	ldrh	r3, [r7, #30]
 800d72e:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f103 021c 	add.w	r2, r3, #28
 800d736:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d738:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800d73a:	8c3b      	ldrh	r3, [r7, #32]
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	4603      	mov	r3, r0
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f7ff fdb4 	bl	800d2ae <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800d746:	8b7a      	ldrh	r2, [r7, #26]
 800d748:	893b      	ldrh	r3, [r7, #8]
 800d74a:	4413      	add	r3, r2
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	801a      	strh	r2, [r3, #0]
 800d752:	e010      	b.n	800d776 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f103 021c 	add.w	r2, r3, #28
 800d75a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d75c:	8af9      	ldrh	r1, [r7, #22]
 800d75e:	893b      	ldrh	r3, [r7, #8]
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	4603      	mov	r3, r0
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f7ff fda2 	bl	800d2ae <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800d76a:	8b7a      	ldrh	r2, [r7, #26]
 800d76c:	893b      	ldrh	r3, [r7, #8]
 800d76e:	4413      	add	r3, r2
 800d770:	b29a      	uxth	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	b29b      	uxth	r3, r3
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3728      	adds	r7, #40	; 0x28
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop

0800d784 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08c      	sub	sp, #48	; 0x30
 800d788:	af02      	add	r7, sp, #8
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	607a      	str	r2, [r7, #4]
 800d78e:	461a      	mov	r2, r3
 800d790:	460b      	mov	r3, r1
 800d792:	72fb      	strb	r3, [r7, #11]
 800d794:	4613      	mov	r3, r2
 800d796:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d798:	2300      	movs	r3, #0
 800d79a:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800d79c:	2300      	movs	r3, #0
 800d79e:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800d7bc:	2300      	movs	r3, #0
 800d7be:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800d7c4:	7afb      	ldrb	r3, [r7, #11]
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	d83e      	bhi.n	800d848 <eth_wr_SOCKET_DATA+0xc4>
 800d7ca:	a201      	add	r2, pc, #4	; (adr r2, 800d7d0 <eth_wr_SOCKET_DATA+0x4c>)
 800d7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d0:	0800d7e1 	.word	0x0800d7e1
 800d7d4:	0800d7fb 	.word	0x0800d7fb
 800d7d8:	0800d815 	.word	0x0800d815
 800d7dc:	0800d82f 	.word	0x0800d82f
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d7ea:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d7f6:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d7f8:	e033      	b.n	800d862 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d804:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d80c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d810:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d812:	e026      	b.n	800d862 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d81a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d81e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d82a:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d82c:	e019      	b.n	800d862 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d834:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d838:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d844:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d846:	e00c      	b.n	800d862 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d84e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d852:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d85a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d85e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d860:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d862:	e00e      	b.n	800d882 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800d864:	7afb      	ldrb	r3, [r7, #11]
 800d866:	3304      	adds	r3, #4
 800d868:	b2d9      	uxtb	r1, r3
 800d86a:	2302      	movs	r3, #2
 800d86c:	9301      	str	r3, [sp, #4]
 800d86e:	f107 0310 	add.w	r3, r7, #16
 800d872:	9300      	str	r3, [sp, #0]
 800d874:	230f      	movs	r3, #15
 800d876:	2220      	movs	r2, #32
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	f7ff fc64 	bl	800d146 <SPI_ETH_REG>
 800d87e:	4603      	mov	r3, r0
 800d880:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d882:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d884:	893b      	ldrh	r3, [r7, #8]
 800d886:	429a      	cmp	r2, r3
 800d888:	d3ec      	bcc.n	800d864 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800d88a:	7afb      	ldrb	r3, [r7, #11]
 800d88c:	3304      	adds	r3, #4
 800d88e:	b2d9      	uxtb	r1, r3
 800d890:	2302      	movs	r3, #2
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	f107 0310 	add.w	r3, r7, #16
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	230f      	movs	r3, #15
 800d89c:	2224      	movs	r2, #36	; 0x24
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7ff fc51 	bl	800d146 <SPI_ETH_REG>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800d8a8:	8b3a      	ldrh	r2, [r7, #24]
 800d8aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8ac:	4013      	ands	r3, r2
 800d8ae:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800d8b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8b2:	8afb      	ldrh	r3, [r7, #22]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800d8b8:	8afa      	ldrh	r2, [r7, #22]
 800d8ba:	893b      	ldrh	r3, [r7, #8]
 800d8bc:	441a      	add	r2, r3
 800d8be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	dd2c      	ble.n	800d920 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800d8c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d8c8:	8afb      	ldrh	r3, [r7, #22]
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f103 021c 	add.w	r2, r3, #28
 800d8d8:	8c38      	ldrh	r0, [r7, #32]
 800d8da:	8ab9      	ldrh	r1, [r7, #20]
 800d8dc:	8bbb      	ldrh	r3, [r7, #28]
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f7ff fd20 	bl	800d328 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800d8e8:	8b7a      	ldrh	r2, [r7, #26]
 800d8ea:	8bbb      	ldrh	r3, [r7, #28]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800d8f0:	893a      	ldrh	r2, [r7, #8]
 800d8f2:	8bbb      	ldrh	r3, [r7, #28]
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800d8f8:	8bbb      	ldrh	r3, [r7, #28]
 800d8fa:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f103 021c 	add.w	r2, r3, #28
 800d902:	8c38      	ldrh	r0, [r7, #32]
 800d904:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800d906:	8bfb      	ldrh	r3, [r7, #30]
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	4603      	mov	r3, r0
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f7ff fd0b 	bl	800d328 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800d912:	8b3a      	ldrh	r2, [r7, #24]
 800d914:	893b      	ldrh	r3, [r7, #8]
 800d916:	4413      	add	r3, r2
 800d918:	b29a      	uxth	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	801a      	strh	r2, [r3, #0]
 800d91e:	e010      	b.n	800d942 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f103 021c 	add.w	r2, r3, #28
 800d926:	8c38      	ldrh	r0, [r7, #32]
 800d928:	8ab9      	ldrh	r1, [r7, #20]
 800d92a:	893b      	ldrh	r3, [r7, #8]
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	4603      	mov	r3, r0
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7ff fcf9 	bl	800d328 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800d936:	8b3a      	ldrh	r2, [r7, #24]
 800d938:	893b      	ldrh	r3, [r7, #8]
 800d93a:	4413      	add	r3, r2
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	801a      	strh	r2, [r3, #0]
					}

}
 800d942:	bf00      	nop
 800d944:	4618      	mov	r0, r3
 800d946:	3728      	adds	r7, #40	; 0x28
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b090      	sub	sp, #64	; 0x40
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
 800d958:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d95e:	2300      	movs	r3, #0
 800d960:	63bb      	str	r3, [r7, #56]	; 0x38
 800d962:	2300      	movs	r3, #0
 800d964:	637b      	str	r3, [r7, #52]	; 0x34
 800d966:	2300      	movs	r3, #0
 800d968:	633b      	str	r3, [r7, #48]	; 0x30
 800d96a:	2300      	movs	r3, #0
 800d96c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d96e:	2300      	movs	r3, #0
 800d970:	61fb      	str	r3, [r7, #28]
 800d972:	2300      	movs	r3, #0
 800d974:	61bb      	str	r3, [r7, #24]
 800d976:	2300      	movs	r3, #0
 800d978:	62bb      	str	r3, [r7, #40]	; 0x28
 800d97a:	2300      	movs	r3, #0
 800d97c:	627b      	str	r3, [r7, #36]	; 0x24
 800d97e:	2300      	movs	r3, #0
 800d980:	617b      	str	r3, [r7, #20]
 800d982:	2300      	movs	r3, #0
 800d984:	623b      	str	r3, [r7, #32]
 800d986:	2300      	movs	r3, #0
 800d988:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800d996:	69fa      	ldr	r2, [r7, #28]
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	f2c0 8315 	blt.w	800dfca <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800d9a4:	e00c      	b.n	800d9c0 <FT_String_ND+0x74>
							{
								n++;
 800d9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800d9ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	441a      	add	r2, r3
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	dd02      	ble.n	800d9c0 <FT_String_ND+0x74>
								{
									estado=0;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	623b      	str	r3, [r7, #32]
									break;
 800d9be:	e009      	b.n	800d9d4 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800d9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	781a      	ldrb	r2, [r3, #0]
 800d9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ca:	6879      	ldr	r1, [r7, #4]
 800d9cc:	440b      	add	r3, r1
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d1e8      	bne.n	800d9a6 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800d9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	3301      	adds	r3, #1
 800d9de:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800d9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d108      	bne.n	800d9fa <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800d9e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	1ad3      	subs	r3, r2, r3
 800d9ee:	1c5a      	adds	r2, r3, #1
 800d9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9f2:	601a      	str	r2, [r3, #0]
									estado=1;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	623b      	str	r3, [r7, #32]
									break;
 800d9f8:	e010      	b.n	800da1c <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800d9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	dd02      	ble.n	800da08 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800da02:	2300      	movs	r3, #0
 800da04:	623b      	str	r3, [r7, #32]
									 break;
 800da06:	e009      	b.n	800da1c <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800da08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	4413      	add	r3, r2
 800da0e:	781a      	ldrb	r2, [r3, #0]
 800da10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da12:	6879      	ldr	r1, [r7, #4]
 800da14:	440b      	add	r3, r1
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d0db      	beq.n	800d9d4 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	1e5a      	subs	r2, r3, #1
 800da20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da22:	4413      	add	r3, r2
 800da24:	69fa      	ldr	r2, [r7, #28]
 800da26:	429a      	cmp	r2, r3
 800da28:	dd02      	ble.n	800da30 <FT_String_ND+0xe4>
 800da2a:	6a3b      	ldr	r3, [r7, #32]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d1b7      	bne.n	800d9a0 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800da30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800da36:	6a3b      	ldr	r3, [r7, #32]
 800da38:	e2c8      	b.n	800dfcc <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800da3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d12c      	bne.n	800da9a <FT_String_ND+0x14e>
 800da40:	6a3b      	ldr	r3, [r7, #32]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d129      	bne.n	800da9a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800da46:	e014      	b.n	800da72 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800da48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	441a      	add	r2, r3
 800da50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da52:	4413      	add	r3, r2
 800da54:	3b01      	subs	r3, #1
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	441a      	add	r2, r3
 800da5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da5c:	6819      	ldr	r1, [r3, #0]
 800da5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da60:	440b      	add	r3, r1
 800da62:	3b01      	subs	r3, #1
 800da64:	68f9      	ldr	r1, [r7, #12]
 800da66:	440b      	add	r3, r1
 800da68:	7812      	ldrb	r2, [r2, #0]
 800da6a:	701a      	strb	r2, [r3, #0]
										n3++;
 800da6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6e:	3301      	adds	r3, #1
 800da70:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800da72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da78:	441a      	add	r2, r3
 800da7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da7c:	4413      	add	r3, r2
 800da7e:	69fa      	ldr	r2, [r7, #28]
 800da80:	429a      	cmp	r2, r3
 800da82:	dae1      	bge.n	800da48 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800da84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da8a:	4413      	add	r3, r2
 800da8c:	1e5a      	subs	r2, r3, #1
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	601a      	str	r2, [r3, #0]
							estado=3;
 800da92:	2303      	movs	r3, #3
 800da94:	623b      	str	r3, [r7, #32]
							return(estado);
 800da96:	6a3b      	ldr	r3, [r7, #32]
 800da98:	e298      	b.n	800dfcc <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800da9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	f040 80be 	bne.w	800dc1e <FT_String_ND+0x2d2>
 800daa2:	6a3b      	ldr	r3, [r7, #32]
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	f040 80ba 	bne.w	800dc1e <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800daaa:	e012      	b.n	800dad2 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800daac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	1ad2      	subs	r2, r2, r3
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	4413      	add	r3, r2
 800dab6:	461a      	mov	r2, r3
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	441a      	add	r2, r3
 800dabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dac0:	440b      	add	r3, r1
 800dac2:	7812      	ldrb	r2, [r2, #0]
 800dac4:	701a      	strb	r2, [r3, #0]
								n4++;
 800dac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac8:	3301      	adds	r3, #1
 800daca:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800dacc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dad0:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800dad2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	1ad2      	subs	r2, r2, r3
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	4413      	add	r3, r2
 800dadc:	69fa      	ldr	r2, [r7, #28]
 800dade:	429a      	cmp	r2, r3
 800dae0:	dae4      	bge.n	800daac <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800dae2:	499d      	ldr	r1, [pc, #628]	; (800dd58 <FT_String_ND+0x40c>)
 800dae4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dae6:	f000 fcb7 	bl	800e458 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800daea:	499c      	ldr	r1, [pc, #624]	; (800dd5c <FT_String_ND+0x410>)
 800daec:	2000      	movs	r0, #0
 800daee:	f000 fcb3 	bl	800e458 <strtok>
 800daf2:	4603      	mov	r3, r0
 800daf4:	4618      	mov	r0, r3
 800daf6:	f000 faf0 	bl	800e0da <atoi>
 800dafa:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800dafc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dafe:	3b01      	subs	r3, #1
 800db00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db02:	429a      	cmp	r2, r3
 800db04:	db02      	blt.n	800db0c <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800db06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db08:	3b01      	subs	r3, #1
 800db0a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800db0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db0e:	3306      	adds	r3, #6
 800db10:	222c      	movs	r2, #44	; 0x2c
 800db12:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800db14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db16:	2b09      	cmp	r3, #9
 800db18:	dc0d      	bgt.n	800db36 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800db1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db1c:	3308      	adds	r3, #8
 800db1e:	223a      	movs	r2, #58	; 0x3a
 800db20:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	3309      	adds	r3, #9
 800db26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db28:	4413      	add	r3, r2
 800db2a:	2200      	movs	r2, #0
 800db2c:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	3309      	adds	r3, #9
 800db32:	627b      	str	r3, [r7, #36]	; 0x24
 800db34:	e021      	b.n	800db7a <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800db36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db38:	2b63      	cmp	r3, #99	; 0x63
 800db3a:	dc0d      	bgt.n	800db58 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800db3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db3e:	3309      	adds	r3, #9
 800db40:	223a      	movs	r2, #58	; 0x3a
 800db42:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	330a      	adds	r3, #10
 800db48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db4a:	4413      	add	r3, r2
 800db4c:	2200      	movs	r2, #0
 800db4e:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db52:	330a      	adds	r3, #10
 800db54:	627b      	str	r3, [r7, #36]	; 0x24
 800db56:	e010      	b.n	800db7a <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db5e:	da0c      	bge.n	800db7a <FT_String_ND+0x22e>
														{
															c[10]=':';
 800db60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db62:	330a      	adds	r3, #10
 800db64:	223a      	movs	r2, #58	; 0x3a
 800db66:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800db68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6a:	330b      	adds	r3, #11
 800db6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db6e:	4413      	add	r3, r2
 800db70:	2200      	movs	r2, #0
 800db72:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800db74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db76:	330b      	adds	r3, #11
 800db78:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800db7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db7e:	601a      	str	r2, [r3, #0]
							n4=0;
 800db80:	2300      	movs	r3, #0
 800db82:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800db84:	e016      	b.n	800dbb4 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800db86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	1ad2      	subs	r2, r2, r3
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	441a      	add	r2, r3
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	4413      	add	r3, r2
 800db94:	461a      	mov	r2, r3
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	441a      	add	r2, r3
 800db9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	1ac9      	subs	r1, r1, r3
 800dba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba2:	440b      	add	r3, r1
 800dba4:	4619      	mov	r1, r3
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	440b      	add	r3, r1
 800dbaa:	7812      	ldrb	r2, [r2, #0]
 800dbac:	701a      	strb	r2, [r3, #0]
								n4++;
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dbb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	1ad2      	subs	r2, r2, r3
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	441a      	add	r2, r3
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc0:	4413      	add	r3, r2
 800dbc2:	69fa      	ldr	r2, [r7, #28]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	dade      	bge.n	800db86 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800dbc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbcc:	441a      	add	r2, r3
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	1e5a      	subs	r2, r3, #1
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800dbd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	1ad2      	subs	r2, r2, r3
 800dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe0:	441a      	add	r2, r3
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	4413      	add	r3, r2
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	4413      	add	r3, r2
 800dbec:	2200      	movs	r2, #0
 800dbee:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800dbf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	1ad2      	subs	r2, r2, r3
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf8:	4413      	add	r3, r2
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	4413      	add	r3, r2
 800dc00:	2200      	movs	r2, #0
 800dc02:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800dc04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	1ad2      	subs	r2, r2, r3
 800dc0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0e:	440b      	add	r3, r1
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d102      	bne.n	800dc1a <FT_String_ND+0x2ce>
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	701a      	strb	r2, [r3, #0]
							estado=3;
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800dc1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d146      	bne.n	800dcb2 <FT_String_ND+0x366>
 800dc24:	6a3b      	ldr	r3, [r7, #32]
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d143      	bne.n	800dcb2 <FT_String_ND+0x366>
						{
						n3=0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800dc2e:	e00e      	b.n	800dc4e <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800dc30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc36:	4413      	add	r3, r2
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	441a      	add	r2, r3
 800dc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dc42:	440b      	add	r3, r1
 800dc44:	7812      	ldrb	r2, [r2, #0]
 800dc46:	701a      	strb	r2, [r3, #0]
										n3++;
 800dc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800dc4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc50:	69bb      	ldr	r3, [r7, #24]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	dbec      	blt.n	800dc30 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800dc56:	2300      	movs	r3, #0
 800dc58:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800dc5a:	e014      	b.n	800dc86 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800dc5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	441a      	add	r2, r3
 800dc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc66:	4413      	add	r3, r2
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	441a      	add	r2, r3
 800dc6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc70:	6819      	ldr	r1, [r3, #0]
 800dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc74:	440b      	add	r3, r1
 800dc76:	3b01      	subs	r3, #1
 800dc78:	68f9      	ldr	r1, [r7, #12]
 800dc7a:	440b      	add	r3, r1
 800dc7c:	7812      	ldrb	r2, [r2, #0]
 800dc7e:	701a      	strb	r2, [r3, #0]
										n5++;
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	3301      	adds	r3, #1
 800dc84:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800dc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	441a      	add	r2, r3
 800dc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc90:	441a      	add	r2, r3
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	dde0      	ble.n	800dc5c <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800dc9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca0:	4413      	add	r3, r2
 800dca2:	1e5a      	subs	r2, r3, #1
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800dca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcac:	601a      	str	r2, [r3, #0]
							estado=3;
 800dcae:	2303      	movs	r3, #3
 800dcb0:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800dcb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcb4:	2b04      	cmp	r3, #4
 800dcb6:	f040 80bd 	bne.w	800de34 <FT_String_ND+0x4e8>
 800dcba:	6a3b      	ldr	r3, [r7, #32]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	f040 80b9 	bne.w	800de34 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800dcc2:	e012      	b.n	800dcea <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800dcc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	1ad2      	subs	r2, r2, r3
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	4413      	add	r3, r2
 800dcce:	461a      	mov	r2, r3
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	441a      	add	r2, r3
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dcd8:	440b      	add	r3, r1
 800dcda:	7812      	ldrb	r2, [r2, #0]
 800dcdc:	701a      	strb	r2, [r3, #0]
								n4++;
 800dcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce0:	3301      	adds	r3, #1
 800dce2:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800dce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dce8:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800dcea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	1ad2      	subs	r2, r2, r3
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf2:	4413      	add	r3, r2
 800dcf4:	69fa      	ldr	r2, [r7, #28]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	dae4      	bge.n	800dcc4 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800dcfa:	4917      	ldr	r1, [pc, #92]	; (800dd58 <FT_String_ND+0x40c>)
 800dcfc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dcfe:	f000 fbab 	bl	800e458 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800dd02:	4916      	ldr	r1, [pc, #88]	; (800dd5c <FT_String_ND+0x410>)
 800dd04:	2000      	movs	r0, #0
 800dd06:	f000 fba7 	bl	800e458 <strtok>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f000 f9e4 	bl	800e0da <atoi>
 800dd12:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800dd14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd16:	3b01      	subs	r3, #1
 800dd18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	db02      	blt.n	800dd24 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800dd1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd20:	3b01      	subs	r3, #1
 800dd22:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800dd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd26:	3306      	adds	r3, #6
 800dd28:	222c      	movs	r2, #44	; 0x2c
 800dd2a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800dd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2e:	2b09      	cmp	r3, #9
 800dd30:	dc07      	bgt.n	800dd42 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800dd32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd34:	3308      	adds	r3, #8
 800dd36:	223a      	movs	r2, #58	; 0x3a
 800dd38:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800dd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3c:	3309      	adds	r3, #9
 800dd3e:	627b      	str	r3, [r7, #36]	; 0x24
 800dd40:	e019      	b.n	800dd76 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800dd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd44:	2b63      	cmp	r3, #99	; 0x63
 800dd46:	dc0b      	bgt.n	800dd60 <FT_String_ND+0x414>
														{
															c[9]=':';
 800dd48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd4a:	3309      	adds	r3, #9
 800dd4c:	223a      	movs	r2, #58	; 0x3a
 800dd4e:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800dd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd52:	330a      	adds	r3, #10
 800dd54:	627b      	str	r3, [r7, #36]	; 0x24
 800dd56:	e00e      	b.n	800dd76 <FT_String_ND+0x42a>
 800dd58:	0800fac4 	.word	0x0800fac4
 800dd5c:	0800fac8 	.word	0x0800fac8
														}
														else
														{
														if (lngd < 1000)
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd66:	da06      	bge.n	800dd76 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800dd68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd6a:	330a      	adds	r3, #10
 800dd6c:	223a      	movs	r2, #58	; 0x3a
 800dd6e:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd72:	330b      	adds	r3, #11
 800dd74:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800dd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd7a:	601a      	str	r2, [r3, #0]
							n4=0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dd80:	e016      	b.n	800ddb0 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800dd82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	1ad2      	subs	r2, r2, r3
 800dd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8a:	441a      	add	r2, r3
 800dd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8e:	4413      	add	r3, r2
 800dd90:	461a      	mov	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	441a      	add	r2, r3
 800dd96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	1ac9      	subs	r1, r1, r3
 800dd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9e:	440b      	add	r3, r1
 800dda0:	4619      	mov	r1, r3
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	440b      	add	r3, r1
 800dda6:	7812      	ldrb	r2, [r2, #0]
 800dda8:	701a      	strb	r2, [r3, #0]
								n4++;
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddac:	3301      	adds	r3, #1
 800ddae:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ddb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	1ad2      	subs	r2, r2, r3
 800ddb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb8:	441a      	add	r2, r3
 800ddba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbc:	4413      	add	r3, r2
 800ddbe:	69fa      	ldr	r2, [r7, #28]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	dade      	bge.n	800dd82 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ddc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc8:	441a      	add	r2, r3
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	1ad3      	subs	r3, r2, r3
 800ddce:	1e5a      	subs	r2, r3, #1
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	601a      	str	r2, [r3, #0]
							n5=0;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ddd8:	e00f      	b.n	800ddfa <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ddda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	1ad2      	subs	r2, r2, r3
 800dde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde2:	4413      	add	r3, r2
 800dde4:	461a      	mov	r2, r3
 800dde6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dde8:	441a      	add	r2, r3
 800ddea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ddee:	440b      	add	r3, r1
 800ddf0:	7812      	ldrb	r2, [r2, #0]
 800ddf2:	701a      	strb	r2, [r3, #0]
								n5++;
 800ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ddfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	1ad2      	subs	r2, r2, r3
 800de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de02:	441a      	add	r2, r3
 800de04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	429a      	cmp	r2, r3
 800de0a:	dbe6      	blt.n	800ddda <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800de0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de10:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800de12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de18:	441a      	add	r2, r3
 800de1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1c:	1ad2      	subs	r2, r2, r3
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4413      	add	r3, r2
 800de24:	69fa      	ldr	r2, [r7, #28]
 800de26:	429a      	cmp	r2, r3
 800de28:	d102      	bne.n	800de30 <FT_String_ND+0x4e4>
							{
								estado=4;
 800de2a:	2304      	movs	r3, #4
 800de2c:	623b      	str	r3, [r7, #32]
 800de2e:	e001      	b.n	800de34 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800de30:	2305      	movs	r3, #5
 800de32:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800de34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de36:	2b05      	cmp	r3, #5
 800de38:	f040 80c5 	bne.w	800dfc6 <FT_String_ND+0x67a>
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	2b01      	cmp	r3, #1
 800de40:	f040 80c1 	bne.w	800dfc6 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800de44:	e012      	b.n	800de6c <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800de46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	1ad2      	subs	r2, r2, r3
 800de4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4e:	4413      	add	r3, r2
 800de50:	461a      	mov	r2, r3
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	441a      	add	r2, r3
 800de56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de58:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800de5a:	440b      	add	r3, r1
 800de5c:	7812      	ldrb	r2, [r2, #0]
 800de5e:	701a      	strb	r2, [r3, #0]
								n4++;
 800de60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de62:	3301      	adds	r3, #1
 800de64:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800de66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de6a:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800de6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	1ad2      	subs	r2, r2, r3
 800de72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de74:	4413      	add	r3, r2
 800de76:	69fa      	ldr	r2, [r7, #28]
 800de78:	429a      	cmp	r2, r3
 800de7a:	dae4      	bge.n	800de46 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800de7c:	4955      	ldr	r1, [pc, #340]	; (800dfd4 <FT_String_ND+0x688>)
 800de7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800de80:	f000 faea 	bl	800e458 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800de84:	4954      	ldr	r1, [pc, #336]	; (800dfd8 <FT_String_ND+0x68c>)
 800de86:	2000      	movs	r0, #0
 800de88:	f000 fae6 	bl	800e458 <strtok>
 800de8c:	4603      	mov	r3, r0
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 f923 	bl	800e0da <atoi>
 800de94:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800de96:	4950      	ldr	r1, [pc, #320]	; (800dfd8 <FT_String_ND+0x68c>)
 800de98:	2000      	movs	r0, #0
 800de9a:	f000 fadd 	bl	800e458 <strtok>
 800de9e:	4603      	mov	r3, r0
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f91a 	bl	800e0da <atoi>
 800dea6:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800dea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deaa:	3b01      	subs	r3, #1
 800deac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800deae:	429a      	cmp	r2, r3
 800deb0:	db02      	blt.n	800deb8 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800deb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deb4:	3b01      	subs	r3, #1
 800deb6:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800deb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deba:	3306      	adds	r3, #6
 800debc:	222c      	movs	r2, #44	; 0x2c
 800debe:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec2:	2b09      	cmp	r3, #9
 800dec4:	dc07      	bgt.n	800ded6 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800dec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dec8:	330a      	adds	r3, #10
 800deca:	223a      	movs	r2, #58	; 0x3a
 800decc:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded0:	330b      	adds	r3, #11
 800ded2:	627b      	str	r3, [r7, #36]	; 0x24
 800ded4:	e015      	b.n	800df02 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800ded6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded8:	2b63      	cmp	r3, #99	; 0x63
 800deda:	dc07      	bgt.n	800deec <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800dedc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dede:	330b      	adds	r3, #11
 800dee0:	223a      	movs	r2, #58	; 0x3a
 800dee2:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800dee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee6:	330c      	adds	r3, #12
 800dee8:	627b      	str	r3, [r7, #36]	; 0x24
 800deea:	e00a      	b.n	800df02 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800deec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800def2:	da06      	bge.n	800df02 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800def4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800def6:	330c      	adds	r3, #12
 800def8:	223a      	movs	r2, #58	; 0x3a
 800defa:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800defc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defe:	330d      	adds	r3, #13
 800df00:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800df02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df06:	601a      	str	r2, [r3, #0]
							n4=0;
 800df08:	2300      	movs	r3, #0
 800df0a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800df0c:	e016      	b.n	800df3c <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800df0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	1ad2      	subs	r2, r2, r3
 800df14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df16:	441a      	add	r2, r3
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	4413      	add	r3, r2
 800df1c:	461a      	mov	r2, r3
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	441a      	add	r2, r3
 800df22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	1ac9      	subs	r1, r1, r3
 800df28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2a:	440b      	add	r3, r1
 800df2c:	4619      	mov	r1, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	440b      	add	r3, r1
 800df32:	7812      	ldrb	r2, [r2, #0]
 800df34:	701a      	strb	r2, [r3, #0]
								n4++;
 800df36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df38:	3301      	adds	r3, #1
 800df3a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800df3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	1ad2      	subs	r2, r2, r3
 800df42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df44:	441a      	add	r2, r3
 800df46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df48:	4413      	add	r3, r2
 800df4a:	69fa      	ldr	r2, [r7, #28]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	dade      	bge.n	800df0e <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800df50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df54:	441a      	add	r2, r3
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	1ad3      	subs	r3, r2, r3
 800df5a:	1e5a      	subs	r2, r3, #1
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	601a      	str	r2, [r3, #0]
							n5=0;
 800df60:	2300      	movs	r3, #0
 800df62:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800df64:	e00f      	b.n	800df86 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800df66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6a:	1ad2      	subs	r2, r2, r3
 800df6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6e:	4413      	add	r3, r2
 800df70:	461a      	mov	r2, r3
 800df72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df74:	441a      	add	r2, r3
 800df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800df7a:	440b      	add	r3, r1
 800df7c:	7812      	ldrb	r2, [r2, #0]
 800df7e:	701a      	strb	r2, [r3, #0]
								n5++;
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	3301      	adds	r3, #1
 800df84:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800df86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	1ad2      	subs	r2, r2, r3
 800df8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8e:	441a      	add	r2, r3
 800df90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	429a      	cmp	r2, r3
 800df96:	dbe6      	blt.n	800df66 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800df98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df9c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800df9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	441a      	add	r2, r3
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	1ad2      	subs	r2, r2, r3
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4413      	add	r3, r2
 800dfb0:	69fa      	ldr	r2, [r7, #28]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d105      	bne.n	800dfc2 <FT_String_ND+0x676>
							{
								estado=4;
 800dfb6:	2304      	movs	r3, #4
 800dfb8:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800dfba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfbc:	693a      	ldr	r2, [r7, #16]
 800dfbe:	601a      	str	r2, [r3, #0]
 800dfc0:	e001      	b.n	800dfc6 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800dfc2:	2305      	movs	r3, #5
 800dfc4:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	e000      	b.n	800dfcc <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800dfca:	2302      	movs	r3, #2
			}
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3740      	adds	r7, #64	; 0x40
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	0800fac4 	.word	0x0800fac4
 800dfd8:	0800fac8 	.word	0x0800fac8

0800dfdc <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b088      	sub	sp, #32
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800dfe6:	2330      	movs	r3, #48	; 0x30
 800dfe8:	60bb      	str	r3, [r7, #8]
 800dfea:	f107 030c 	add.w	r3, r7, #12
 800dfee:	2200      	movs	r2, #0
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	605a      	str	r2, [r3, #4]
 800dff4:	609a      	str	r2, [r3, #8]
 800dff6:	60da      	str	r2, [r3, #12]
int i=0;	
 800dff8:	2300      	movs	r3, #0
 800dffa:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800dffc:	f107 0308 	add.w	r3, r7, #8
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	490f      	ldr	r1, [pc, #60]	; (800e040 <INTOA+0x64>)
 800e004:	4618      	mov	r0, r3
 800e006:	f000 f9a9 	bl	800e35c <siprintf>
		while(i<=strlen(origbuff))
 800e00a:	e00b      	b.n	800e024 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	1c5a      	adds	r2, r3, #1
 800e010:	603a      	str	r2, [r7, #0]
 800e012:	f107 0108 	add.w	r1, r7, #8
 800e016:	69fa      	ldr	r2, [r7, #28]
 800e018:	440a      	add	r2, r1
 800e01a:	7812      	ldrb	r2, [r2, #0]
 800e01c:	701a      	strb	r2, [r3, #0]
		i++;
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	3301      	adds	r3, #1
 800e022:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800e024:	f107 0308 	add.w	r3, r7, #8
 800e028:	4618      	mov	r0, r3
 800e02a:	f7f2 f8e3 	bl	80001f4 <strlen>
 800e02e:	4602      	mov	r2, r0
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	429a      	cmp	r2, r3
 800e034:	d2ea      	bcs.n	800e00c <INTOA+0x30>
		}
		return(i);
 800e036:	69fb      	ldr	r3, [r7, #28]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3720      	adds	r7, #32
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	0800facc 	.word	0x0800facc

0800e044 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b088      	sub	sp, #32
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
 800e050:	603b      	str	r3, [r7, #0]
int x =0;
 800e052:	2300      	movs	r3, #0
 800e054:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800e056:	2300      	movs	r3, #0
 800e058:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800e05a:	f107 0310 	add.w	r3, r7, #16
 800e05e:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d105      	bne.n	800e072 <CopiaVector+0x2e>
 800e066:	68b8      	ldr	r0, [r7, #8]
 800e068:	f7f2 f8c4 	bl	80001f4 <strlen>
 800e06c:	4603      	mov	r3, r0
 800e06e:	61bb      	str	r3, [r7, #24]
 800e070:	e02e      	b.n	800e0d0 <CopiaVector+0x8c>
else
	{
		x=c;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e07c:	dd01      	ble.n	800e082 <CopiaVector+0x3e>
			{
				return(1);
 800e07e:	2301      	movs	r3, #1
 800e080:	e027      	b.n	800e0d2 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800e082:	2300      	movs	r3, #0
 800e084:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e086:	e00a      	b.n	800e09e <CopiaVector+0x5a>
				{
					*a++=*b++;
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	1c53      	adds	r3, r2, #1
 800e08c:	60bb      	str	r3, [r7, #8]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	1c59      	adds	r1, r3, #1
 800e092:	60f9      	str	r1, [r7, #12]
 800e094:	7812      	ldrb	r2, [r2, #0]
 800e096:	701a      	strb	r2, [r3, #0]
					p++;
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	3301      	adds	r3, #1
 800e09c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e09e:	69fa      	ldr	r2, [r7, #28]
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	dbf0      	blt.n	800e088 <CopiaVector+0x44>
				}
				if (d==1)
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d111      	bne.n	800e0d0 <CopiaVector+0x8c>
				{
				  p=c;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e0b0:	e008      	b.n	800e0c4 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	1c5a      	adds	r2, r3, #1
 800e0b6:	60fa      	str	r2, [r7, #12]
 800e0b8:	697a      	ldr	r2, [r7, #20]
 800e0ba:	7812      	ldrb	r2, [r2, #0]
 800e0bc:	701a      	strb	r2, [r3, #0]
					  p++;
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	daf2      	bge.n	800e0b2 <CopiaVector+0x6e>
				  }
				return (0);
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	e000      	b.n	800e0d2 <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800e0d0:	2301      	movs	r3, #1
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3720      	adds	r7, #32
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <atoi>:
 800e0da:	220a      	movs	r2, #10
 800e0dc:	2100      	movs	r1, #0
 800e0de:	f000 b883 	b.w	800e1e8 <strtol>
	...

0800e0e4 <_strtol_l.constprop.0>:
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ea:	d001      	beq.n	800e0f0 <_strtol_l.constprop.0+0xc>
 800e0ec:	2b24      	cmp	r3, #36	; 0x24
 800e0ee:	d906      	bls.n	800e0fe <_strtol_l.constprop.0+0x1a>
 800e0f0:	f000 fa54 	bl	800e59c <__errno>
 800e0f4:	2316      	movs	r3, #22
 800e0f6:	6003      	str	r3, [r0, #0]
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e1e4 <_strtol_l.constprop.0+0x100>
 800e102:	460d      	mov	r5, r1
 800e104:	462e      	mov	r6, r5
 800e106:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e10a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e10e:	f017 0708 	ands.w	r7, r7, #8
 800e112:	d1f7      	bne.n	800e104 <_strtol_l.constprop.0+0x20>
 800e114:	2c2d      	cmp	r4, #45	; 0x2d
 800e116:	d132      	bne.n	800e17e <_strtol_l.constprop.0+0x9a>
 800e118:	782c      	ldrb	r4, [r5, #0]
 800e11a:	2701      	movs	r7, #1
 800e11c:	1cb5      	adds	r5, r6, #2
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d05b      	beq.n	800e1da <_strtol_l.constprop.0+0xf6>
 800e122:	2b10      	cmp	r3, #16
 800e124:	d109      	bne.n	800e13a <_strtol_l.constprop.0+0x56>
 800e126:	2c30      	cmp	r4, #48	; 0x30
 800e128:	d107      	bne.n	800e13a <_strtol_l.constprop.0+0x56>
 800e12a:	782c      	ldrb	r4, [r5, #0]
 800e12c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e130:	2c58      	cmp	r4, #88	; 0x58
 800e132:	d14d      	bne.n	800e1d0 <_strtol_l.constprop.0+0xec>
 800e134:	786c      	ldrb	r4, [r5, #1]
 800e136:	2310      	movs	r3, #16
 800e138:	3502      	adds	r5, #2
 800e13a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e13e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e142:	f04f 0e00 	mov.w	lr, #0
 800e146:	fbb8 f9f3 	udiv	r9, r8, r3
 800e14a:	4676      	mov	r6, lr
 800e14c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e150:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e154:	f1bc 0f09 	cmp.w	ip, #9
 800e158:	d816      	bhi.n	800e188 <_strtol_l.constprop.0+0xa4>
 800e15a:	4664      	mov	r4, ip
 800e15c:	42a3      	cmp	r3, r4
 800e15e:	dd24      	ble.n	800e1aa <_strtol_l.constprop.0+0xc6>
 800e160:	f1be 3fff 	cmp.w	lr, #4294967295
 800e164:	d008      	beq.n	800e178 <_strtol_l.constprop.0+0x94>
 800e166:	45b1      	cmp	r9, r6
 800e168:	d31c      	bcc.n	800e1a4 <_strtol_l.constprop.0+0xc0>
 800e16a:	d101      	bne.n	800e170 <_strtol_l.constprop.0+0x8c>
 800e16c:	45a2      	cmp	sl, r4
 800e16e:	db19      	blt.n	800e1a4 <_strtol_l.constprop.0+0xc0>
 800e170:	fb06 4603 	mla	r6, r6, r3, r4
 800e174:	f04f 0e01 	mov.w	lr, #1
 800e178:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e17c:	e7e8      	b.n	800e150 <_strtol_l.constprop.0+0x6c>
 800e17e:	2c2b      	cmp	r4, #43	; 0x2b
 800e180:	bf04      	itt	eq
 800e182:	782c      	ldrbeq	r4, [r5, #0]
 800e184:	1cb5      	addeq	r5, r6, #2
 800e186:	e7ca      	b.n	800e11e <_strtol_l.constprop.0+0x3a>
 800e188:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e18c:	f1bc 0f19 	cmp.w	ip, #25
 800e190:	d801      	bhi.n	800e196 <_strtol_l.constprop.0+0xb2>
 800e192:	3c37      	subs	r4, #55	; 0x37
 800e194:	e7e2      	b.n	800e15c <_strtol_l.constprop.0+0x78>
 800e196:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e19a:	f1bc 0f19 	cmp.w	ip, #25
 800e19e:	d804      	bhi.n	800e1aa <_strtol_l.constprop.0+0xc6>
 800e1a0:	3c57      	subs	r4, #87	; 0x57
 800e1a2:	e7db      	b.n	800e15c <_strtol_l.constprop.0+0x78>
 800e1a4:	f04f 3eff 	mov.w	lr, #4294967295
 800e1a8:	e7e6      	b.n	800e178 <_strtol_l.constprop.0+0x94>
 800e1aa:	f1be 3fff 	cmp.w	lr, #4294967295
 800e1ae:	d105      	bne.n	800e1bc <_strtol_l.constprop.0+0xd8>
 800e1b0:	2322      	movs	r3, #34	; 0x22
 800e1b2:	6003      	str	r3, [r0, #0]
 800e1b4:	4646      	mov	r6, r8
 800e1b6:	b942      	cbnz	r2, 800e1ca <_strtol_l.constprop.0+0xe6>
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	e79e      	b.n	800e0fa <_strtol_l.constprop.0+0x16>
 800e1bc:	b107      	cbz	r7, 800e1c0 <_strtol_l.constprop.0+0xdc>
 800e1be:	4276      	negs	r6, r6
 800e1c0:	2a00      	cmp	r2, #0
 800e1c2:	d0f9      	beq.n	800e1b8 <_strtol_l.constprop.0+0xd4>
 800e1c4:	f1be 0f00 	cmp.w	lr, #0
 800e1c8:	d000      	beq.n	800e1cc <_strtol_l.constprop.0+0xe8>
 800e1ca:	1e69      	subs	r1, r5, #1
 800e1cc:	6011      	str	r1, [r2, #0]
 800e1ce:	e7f3      	b.n	800e1b8 <_strtol_l.constprop.0+0xd4>
 800e1d0:	2430      	movs	r4, #48	; 0x30
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d1b1      	bne.n	800e13a <_strtol_l.constprop.0+0x56>
 800e1d6:	2308      	movs	r3, #8
 800e1d8:	e7af      	b.n	800e13a <_strtol_l.constprop.0+0x56>
 800e1da:	2c30      	cmp	r4, #48	; 0x30
 800e1dc:	d0a5      	beq.n	800e12a <_strtol_l.constprop.0+0x46>
 800e1de:	230a      	movs	r3, #10
 800e1e0:	e7ab      	b.n	800e13a <_strtol_l.constprop.0+0x56>
 800e1e2:	bf00      	nop
 800e1e4:	0800fae9 	.word	0x0800fae9

0800e1e8 <strtol>:
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	460a      	mov	r2, r1
 800e1ec:	4601      	mov	r1, r0
 800e1ee:	4802      	ldr	r0, [pc, #8]	; (800e1f8 <strtol+0x10>)
 800e1f0:	6800      	ldr	r0, [r0, #0]
 800e1f2:	f7ff bf77 	b.w	800e0e4 <_strtol_l.constprop.0>
 800e1f6:	bf00      	nop
 800e1f8:	20000188 	.word	0x20000188

0800e1fc <std>:
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	b510      	push	{r4, lr}
 800e200:	4604      	mov	r4, r0
 800e202:	e9c0 3300 	strd	r3, r3, [r0]
 800e206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e20a:	6083      	str	r3, [r0, #8]
 800e20c:	8181      	strh	r1, [r0, #12]
 800e20e:	6643      	str	r3, [r0, #100]	; 0x64
 800e210:	81c2      	strh	r2, [r0, #14]
 800e212:	6183      	str	r3, [r0, #24]
 800e214:	4619      	mov	r1, r3
 800e216:	2208      	movs	r2, #8
 800e218:	305c      	adds	r0, #92	; 0x5c
 800e21a:	f000 f902 	bl	800e422 <memset>
 800e21e:	4b05      	ldr	r3, [pc, #20]	; (800e234 <std+0x38>)
 800e220:	6263      	str	r3, [r4, #36]	; 0x24
 800e222:	4b05      	ldr	r3, [pc, #20]	; (800e238 <std+0x3c>)
 800e224:	62a3      	str	r3, [r4, #40]	; 0x28
 800e226:	4b05      	ldr	r3, [pc, #20]	; (800e23c <std+0x40>)
 800e228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e22a:	4b05      	ldr	r3, [pc, #20]	; (800e240 <std+0x44>)
 800e22c:	6224      	str	r4, [r4, #32]
 800e22e:	6323      	str	r3, [r4, #48]	; 0x30
 800e230:	bd10      	pop	{r4, pc}
 800e232:	bf00      	nop
 800e234:	0800e39d 	.word	0x0800e39d
 800e238:	0800e3bf 	.word	0x0800e3bf
 800e23c:	0800e3f7 	.word	0x0800e3f7
 800e240:	0800e41b 	.word	0x0800e41b

0800e244 <stdio_exit_handler>:
 800e244:	4a02      	ldr	r2, [pc, #8]	; (800e250 <stdio_exit_handler+0xc>)
 800e246:	4903      	ldr	r1, [pc, #12]	; (800e254 <stdio_exit_handler+0x10>)
 800e248:	4803      	ldr	r0, [pc, #12]	; (800e258 <stdio_exit_handler+0x14>)
 800e24a:	f000 b869 	b.w	800e320 <_fwalk_sglue>
 800e24e:	bf00      	nop
 800e250:	20000130 	.word	0x20000130
 800e254:	0800ef1d 	.word	0x0800ef1d
 800e258:	2000013c 	.word	0x2000013c

0800e25c <cleanup_stdio>:
 800e25c:	6841      	ldr	r1, [r0, #4]
 800e25e:	4b0c      	ldr	r3, [pc, #48]	; (800e290 <cleanup_stdio+0x34>)
 800e260:	4299      	cmp	r1, r3
 800e262:	b510      	push	{r4, lr}
 800e264:	4604      	mov	r4, r0
 800e266:	d001      	beq.n	800e26c <cleanup_stdio+0x10>
 800e268:	f000 fe58 	bl	800ef1c <_fflush_r>
 800e26c:	68a1      	ldr	r1, [r4, #8]
 800e26e:	4b09      	ldr	r3, [pc, #36]	; (800e294 <cleanup_stdio+0x38>)
 800e270:	4299      	cmp	r1, r3
 800e272:	d002      	beq.n	800e27a <cleanup_stdio+0x1e>
 800e274:	4620      	mov	r0, r4
 800e276:	f000 fe51 	bl	800ef1c <_fflush_r>
 800e27a:	68e1      	ldr	r1, [r4, #12]
 800e27c:	4b06      	ldr	r3, [pc, #24]	; (800e298 <cleanup_stdio+0x3c>)
 800e27e:	4299      	cmp	r1, r3
 800e280:	d004      	beq.n	800e28c <cleanup_stdio+0x30>
 800e282:	4620      	mov	r0, r4
 800e284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e288:	f000 be48 	b.w	800ef1c <_fflush_r>
 800e28c:	bd10      	pop	{r4, pc}
 800e28e:	bf00      	nop
 800e290:	200035d4 	.word	0x200035d4
 800e294:	2000363c 	.word	0x2000363c
 800e298:	200036a4 	.word	0x200036a4

0800e29c <global_stdio_init.part.0>:
 800e29c:	b510      	push	{r4, lr}
 800e29e:	4b0b      	ldr	r3, [pc, #44]	; (800e2cc <global_stdio_init.part.0+0x30>)
 800e2a0:	4c0b      	ldr	r4, [pc, #44]	; (800e2d0 <global_stdio_init.part.0+0x34>)
 800e2a2:	4a0c      	ldr	r2, [pc, #48]	; (800e2d4 <global_stdio_init.part.0+0x38>)
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2104      	movs	r1, #4
 800e2ac:	f7ff ffa6 	bl	800e1fc <std>
 800e2b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	2109      	movs	r1, #9
 800e2b8:	f7ff ffa0 	bl	800e1fc <std>
 800e2bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2c6:	2112      	movs	r1, #18
 800e2c8:	f7ff bf98 	b.w	800e1fc <std>
 800e2cc:	2000370c 	.word	0x2000370c
 800e2d0:	200035d4 	.word	0x200035d4
 800e2d4:	0800e245 	.word	0x0800e245

0800e2d8 <__sfp_lock_acquire>:
 800e2d8:	4801      	ldr	r0, [pc, #4]	; (800e2e0 <__sfp_lock_acquire+0x8>)
 800e2da:	f000 b989 	b.w	800e5f0 <__retarget_lock_acquire_recursive>
 800e2de:	bf00      	nop
 800e2e0:	20003715 	.word	0x20003715

0800e2e4 <__sfp_lock_release>:
 800e2e4:	4801      	ldr	r0, [pc, #4]	; (800e2ec <__sfp_lock_release+0x8>)
 800e2e6:	f000 b984 	b.w	800e5f2 <__retarget_lock_release_recursive>
 800e2ea:	bf00      	nop
 800e2ec:	20003715 	.word	0x20003715

0800e2f0 <__sinit>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	f7ff fff0 	bl	800e2d8 <__sfp_lock_acquire>
 800e2f8:	6a23      	ldr	r3, [r4, #32]
 800e2fa:	b11b      	cbz	r3, 800e304 <__sinit+0x14>
 800e2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e300:	f7ff bff0 	b.w	800e2e4 <__sfp_lock_release>
 800e304:	4b04      	ldr	r3, [pc, #16]	; (800e318 <__sinit+0x28>)
 800e306:	6223      	str	r3, [r4, #32]
 800e308:	4b04      	ldr	r3, [pc, #16]	; (800e31c <__sinit+0x2c>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d1f5      	bne.n	800e2fc <__sinit+0xc>
 800e310:	f7ff ffc4 	bl	800e29c <global_stdio_init.part.0>
 800e314:	e7f2      	b.n	800e2fc <__sinit+0xc>
 800e316:	bf00      	nop
 800e318:	0800e25d 	.word	0x0800e25d
 800e31c:	2000370c 	.word	0x2000370c

0800e320 <_fwalk_sglue>:
 800e320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e324:	4607      	mov	r7, r0
 800e326:	4688      	mov	r8, r1
 800e328:	4614      	mov	r4, r2
 800e32a:	2600      	movs	r6, #0
 800e32c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e330:	f1b9 0901 	subs.w	r9, r9, #1
 800e334:	d505      	bpl.n	800e342 <_fwalk_sglue+0x22>
 800e336:	6824      	ldr	r4, [r4, #0]
 800e338:	2c00      	cmp	r4, #0
 800e33a:	d1f7      	bne.n	800e32c <_fwalk_sglue+0xc>
 800e33c:	4630      	mov	r0, r6
 800e33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e342:	89ab      	ldrh	r3, [r5, #12]
 800e344:	2b01      	cmp	r3, #1
 800e346:	d907      	bls.n	800e358 <_fwalk_sglue+0x38>
 800e348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e34c:	3301      	adds	r3, #1
 800e34e:	d003      	beq.n	800e358 <_fwalk_sglue+0x38>
 800e350:	4629      	mov	r1, r5
 800e352:	4638      	mov	r0, r7
 800e354:	47c0      	blx	r8
 800e356:	4306      	orrs	r6, r0
 800e358:	3568      	adds	r5, #104	; 0x68
 800e35a:	e7e9      	b.n	800e330 <_fwalk_sglue+0x10>

0800e35c <siprintf>:
 800e35c:	b40e      	push	{r1, r2, r3}
 800e35e:	b500      	push	{lr}
 800e360:	b09c      	sub	sp, #112	; 0x70
 800e362:	ab1d      	add	r3, sp, #116	; 0x74
 800e364:	9002      	str	r0, [sp, #8]
 800e366:	9006      	str	r0, [sp, #24]
 800e368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e36c:	4809      	ldr	r0, [pc, #36]	; (800e394 <siprintf+0x38>)
 800e36e:	9107      	str	r1, [sp, #28]
 800e370:	9104      	str	r1, [sp, #16]
 800e372:	4909      	ldr	r1, [pc, #36]	; (800e398 <siprintf+0x3c>)
 800e374:	f853 2b04 	ldr.w	r2, [r3], #4
 800e378:	9105      	str	r1, [sp, #20]
 800e37a:	6800      	ldr	r0, [r0, #0]
 800e37c:	9301      	str	r3, [sp, #4]
 800e37e:	a902      	add	r1, sp, #8
 800e380:	f000 fab8 	bl	800e8f4 <_svfiprintf_r>
 800e384:	9b02      	ldr	r3, [sp, #8]
 800e386:	2200      	movs	r2, #0
 800e388:	701a      	strb	r2, [r3, #0]
 800e38a:	b01c      	add	sp, #112	; 0x70
 800e38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e390:	b003      	add	sp, #12
 800e392:	4770      	bx	lr
 800e394:	20000188 	.word	0x20000188
 800e398:	ffff0208 	.word	0xffff0208

0800e39c <__sread>:
 800e39c:	b510      	push	{r4, lr}
 800e39e:	460c      	mov	r4, r1
 800e3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3a4:	f000 f8d6 	bl	800e554 <_read_r>
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	bfab      	itete	ge
 800e3ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800e3b0:	181b      	addge	r3, r3, r0
 800e3b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3b6:	bfac      	ite	ge
 800e3b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3ba:	81a3      	strhlt	r3, [r4, #12]
 800e3bc:	bd10      	pop	{r4, pc}

0800e3be <__swrite>:
 800e3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c2:	461f      	mov	r7, r3
 800e3c4:	898b      	ldrh	r3, [r1, #12]
 800e3c6:	05db      	lsls	r3, r3, #23
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	4616      	mov	r6, r2
 800e3ce:	d505      	bpl.n	800e3dc <__swrite+0x1e>
 800e3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f000 f8aa 	bl	800e530 <_lseek_r>
 800e3dc:	89a3      	ldrh	r3, [r4, #12]
 800e3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3e6:	81a3      	strh	r3, [r4, #12]
 800e3e8:	4632      	mov	r2, r6
 800e3ea:	463b      	mov	r3, r7
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f2:	f000 b8c1 	b.w	800e578 <_write_r>

0800e3f6 <__sseek>:
 800e3f6:	b510      	push	{r4, lr}
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3fe:	f000 f897 	bl	800e530 <_lseek_r>
 800e402:	1c43      	adds	r3, r0, #1
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	bf15      	itete	ne
 800e408:	6560      	strne	r0, [r4, #84]	; 0x54
 800e40a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e40e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e412:	81a3      	strheq	r3, [r4, #12]
 800e414:	bf18      	it	ne
 800e416:	81a3      	strhne	r3, [r4, #12]
 800e418:	bd10      	pop	{r4, pc}

0800e41a <__sclose>:
 800e41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e41e:	f000 b877 	b.w	800e510 <_close_r>

0800e422 <memset>:
 800e422:	4402      	add	r2, r0
 800e424:	4603      	mov	r3, r0
 800e426:	4293      	cmp	r3, r2
 800e428:	d100      	bne.n	800e42c <memset+0xa>
 800e42a:	4770      	bx	lr
 800e42c:	f803 1b01 	strb.w	r1, [r3], #1
 800e430:	e7f9      	b.n	800e426 <memset+0x4>

0800e432 <strncat>:
 800e432:	b530      	push	{r4, r5, lr}
 800e434:	4604      	mov	r4, r0
 800e436:	7825      	ldrb	r5, [r4, #0]
 800e438:	4623      	mov	r3, r4
 800e43a:	3401      	adds	r4, #1
 800e43c:	2d00      	cmp	r5, #0
 800e43e:	d1fa      	bne.n	800e436 <strncat+0x4>
 800e440:	3a01      	subs	r2, #1
 800e442:	d304      	bcc.n	800e44e <strncat+0x1c>
 800e444:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e448:	f803 4b01 	strb.w	r4, [r3], #1
 800e44c:	b904      	cbnz	r4, 800e450 <strncat+0x1e>
 800e44e:	bd30      	pop	{r4, r5, pc}
 800e450:	2a00      	cmp	r2, #0
 800e452:	d1f5      	bne.n	800e440 <strncat+0xe>
 800e454:	701a      	strb	r2, [r3, #0]
 800e456:	e7f3      	b.n	800e440 <strncat+0xe>

0800e458 <strtok>:
 800e458:	4b16      	ldr	r3, [pc, #88]	; (800e4b4 <strtok+0x5c>)
 800e45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e45c:	681e      	ldr	r6, [r3, #0]
 800e45e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800e460:	4605      	mov	r5, r0
 800e462:	b9fc      	cbnz	r4, 800e4a4 <strtok+0x4c>
 800e464:	2050      	movs	r0, #80	; 0x50
 800e466:	9101      	str	r1, [sp, #4]
 800e468:	f000 f936 	bl	800e6d8 <malloc>
 800e46c:	9901      	ldr	r1, [sp, #4]
 800e46e:	6470      	str	r0, [r6, #68]	; 0x44
 800e470:	4602      	mov	r2, r0
 800e472:	b920      	cbnz	r0, 800e47e <strtok+0x26>
 800e474:	4b10      	ldr	r3, [pc, #64]	; (800e4b8 <strtok+0x60>)
 800e476:	4811      	ldr	r0, [pc, #68]	; (800e4bc <strtok+0x64>)
 800e478:	215b      	movs	r1, #91	; 0x5b
 800e47a:	f000 f8c3 	bl	800e604 <__assert_func>
 800e47e:	e9c0 4400 	strd	r4, r4, [r0]
 800e482:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e486:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e48a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e48e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e492:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e496:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e49a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e49e:	6184      	str	r4, [r0, #24]
 800e4a0:	7704      	strb	r4, [r0, #28]
 800e4a2:	6244      	str	r4, [r0, #36]	; 0x24
 800e4a4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	b002      	add	sp, #8
 800e4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4b0:	f000 b806 	b.w	800e4c0 <__strtok_r>
 800e4b4:	20000188 	.word	0x20000188
 800e4b8:	0800fbe9 	.word	0x0800fbe9
 800e4bc:	0800fc00 	.word	0x0800fc00

0800e4c0 <__strtok_r>:
 800e4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4c2:	b908      	cbnz	r0, 800e4c8 <__strtok_r+0x8>
 800e4c4:	6810      	ldr	r0, [r2, #0]
 800e4c6:	b188      	cbz	r0, 800e4ec <__strtok_r+0x2c>
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e4d0:	460f      	mov	r7, r1
 800e4d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e4d6:	b91e      	cbnz	r6, 800e4e0 <__strtok_r+0x20>
 800e4d8:	b965      	cbnz	r5, 800e4f4 <__strtok_r+0x34>
 800e4da:	6015      	str	r5, [r2, #0]
 800e4dc:	4628      	mov	r0, r5
 800e4de:	e005      	b.n	800e4ec <__strtok_r+0x2c>
 800e4e0:	42b5      	cmp	r5, r6
 800e4e2:	d1f6      	bne.n	800e4d2 <__strtok_r+0x12>
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1f0      	bne.n	800e4ca <__strtok_r+0xa>
 800e4e8:	6014      	str	r4, [r2, #0]
 800e4ea:	7003      	strb	r3, [r0, #0]
 800e4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4ee:	461c      	mov	r4, r3
 800e4f0:	e00c      	b.n	800e50c <__strtok_r+0x4c>
 800e4f2:	b915      	cbnz	r5, 800e4fa <__strtok_r+0x3a>
 800e4f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e4f8:	460e      	mov	r6, r1
 800e4fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e4fe:	42ab      	cmp	r3, r5
 800e500:	d1f7      	bne.n	800e4f2 <__strtok_r+0x32>
 800e502:	2b00      	cmp	r3, #0
 800e504:	d0f3      	beq.n	800e4ee <__strtok_r+0x2e>
 800e506:	2300      	movs	r3, #0
 800e508:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e50c:	6014      	str	r4, [r2, #0]
 800e50e:	e7ed      	b.n	800e4ec <__strtok_r+0x2c>

0800e510 <_close_r>:
 800e510:	b538      	push	{r3, r4, r5, lr}
 800e512:	4d06      	ldr	r5, [pc, #24]	; (800e52c <_close_r+0x1c>)
 800e514:	2300      	movs	r3, #0
 800e516:	4604      	mov	r4, r0
 800e518:	4608      	mov	r0, r1
 800e51a:	602b      	str	r3, [r5, #0]
 800e51c:	f7f3 ffbd 	bl	800249a <_close>
 800e520:	1c43      	adds	r3, r0, #1
 800e522:	d102      	bne.n	800e52a <_close_r+0x1a>
 800e524:	682b      	ldr	r3, [r5, #0]
 800e526:	b103      	cbz	r3, 800e52a <_close_r+0x1a>
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	bd38      	pop	{r3, r4, r5, pc}
 800e52c:	20003710 	.word	0x20003710

0800e530 <_lseek_r>:
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4d07      	ldr	r5, [pc, #28]	; (800e550 <_lseek_r+0x20>)
 800e534:	4604      	mov	r4, r0
 800e536:	4608      	mov	r0, r1
 800e538:	4611      	mov	r1, r2
 800e53a:	2200      	movs	r2, #0
 800e53c:	602a      	str	r2, [r5, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	f7f3 ffd2 	bl	80024e8 <_lseek>
 800e544:	1c43      	adds	r3, r0, #1
 800e546:	d102      	bne.n	800e54e <_lseek_r+0x1e>
 800e548:	682b      	ldr	r3, [r5, #0]
 800e54a:	b103      	cbz	r3, 800e54e <_lseek_r+0x1e>
 800e54c:	6023      	str	r3, [r4, #0]
 800e54e:	bd38      	pop	{r3, r4, r5, pc}
 800e550:	20003710 	.word	0x20003710

0800e554 <_read_r>:
 800e554:	b538      	push	{r3, r4, r5, lr}
 800e556:	4d07      	ldr	r5, [pc, #28]	; (800e574 <_read_r+0x20>)
 800e558:	4604      	mov	r4, r0
 800e55a:	4608      	mov	r0, r1
 800e55c:	4611      	mov	r1, r2
 800e55e:	2200      	movs	r2, #0
 800e560:	602a      	str	r2, [r5, #0]
 800e562:	461a      	mov	r2, r3
 800e564:	f7f3 ff60 	bl	8002428 <_read>
 800e568:	1c43      	adds	r3, r0, #1
 800e56a:	d102      	bne.n	800e572 <_read_r+0x1e>
 800e56c:	682b      	ldr	r3, [r5, #0]
 800e56e:	b103      	cbz	r3, 800e572 <_read_r+0x1e>
 800e570:	6023      	str	r3, [r4, #0]
 800e572:	bd38      	pop	{r3, r4, r5, pc}
 800e574:	20003710 	.word	0x20003710

0800e578 <_write_r>:
 800e578:	b538      	push	{r3, r4, r5, lr}
 800e57a:	4d07      	ldr	r5, [pc, #28]	; (800e598 <_write_r+0x20>)
 800e57c:	4604      	mov	r4, r0
 800e57e:	4608      	mov	r0, r1
 800e580:	4611      	mov	r1, r2
 800e582:	2200      	movs	r2, #0
 800e584:	602a      	str	r2, [r5, #0]
 800e586:	461a      	mov	r2, r3
 800e588:	f7f3 ff6b 	bl	8002462 <_write>
 800e58c:	1c43      	adds	r3, r0, #1
 800e58e:	d102      	bne.n	800e596 <_write_r+0x1e>
 800e590:	682b      	ldr	r3, [r5, #0]
 800e592:	b103      	cbz	r3, 800e596 <_write_r+0x1e>
 800e594:	6023      	str	r3, [r4, #0]
 800e596:	bd38      	pop	{r3, r4, r5, pc}
 800e598:	20003710 	.word	0x20003710

0800e59c <__errno>:
 800e59c:	4b01      	ldr	r3, [pc, #4]	; (800e5a4 <__errno+0x8>)
 800e59e:	6818      	ldr	r0, [r3, #0]
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	20000188 	.word	0x20000188

0800e5a8 <__libc_init_array>:
 800e5a8:	b570      	push	{r4, r5, r6, lr}
 800e5aa:	4d0d      	ldr	r5, [pc, #52]	; (800e5e0 <__libc_init_array+0x38>)
 800e5ac:	4c0d      	ldr	r4, [pc, #52]	; (800e5e4 <__libc_init_array+0x3c>)
 800e5ae:	1b64      	subs	r4, r4, r5
 800e5b0:	10a4      	asrs	r4, r4, #2
 800e5b2:	2600      	movs	r6, #0
 800e5b4:	42a6      	cmp	r6, r4
 800e5b6:	d109      	bne.n	800e5cc <__libc_init_array+0x24>
 800e5b8:	4d0b      	ldr	r5, [pc, #44]	; (800e5e8 <__libc_init_array+0x40>)
 800e5ba:	4c0c      	ldr	r4, [pc, #48]	; (800e5ec <__libc_init_array+0x44>)
 800e5bc:	f001 f800 	bl	800f5c0 <_init>
 800e5c0:	1b64      	subs	r4, r4, r5
 800e5c2:	10a4      	asrs	r4, r4, #2
 800e5c4:	2600      	movs	r6, #0
 800e5c6:	42a6      	cmp	r6, r4
 800e5c8:	d105      	bne.n	800e5d6 <__libc_init_array+0x2e>
 800e5ca:	bd70      	pop	{r4, r5, r6, pc}
 800e5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5d0:	4798      	blx	r3
 800e5d2:	3601      	adds	r6, #1
 800e5d4:	e7ee      	b.n	800e5b4 <__libc_init_array+0xc>
 800e5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5da:	4798      	blx	r3
 800e5dc:	3601      	adds	r6, #1
 800e5de:	e7f2      	b.n	800e5c6 <__libc_init_array+0x1e>
 800e5e0:	0800fcd4 	.word	0x0800fcd4
 800e5e4:	0800fcd4 	.word	0x0800fcd4
 800e5e8:	0800fcd4 	.word	0x0800fcd4
 800e5ec:	0800fcd8 	.word	0x0800fcd8

0800e5f0 <__retarget_lock_acquire_recursive>:
 800e5f0:	4770      	bx	lr

0800e5f2 <__retarget_lock_release_recursive>:
 800e5f2:	4770      	bx	lr

0800e5f4 <strcpy>:
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5fa:	f803 2b01 	strb.w	r2, [r3], #1
 800e5fe:	2a00      	cmp	r2, #0
 800e600:	d1f9      	bne.n	800e5f6 <strcpy+0x2>
 800e602:	4770      	bx	lr

0800e604 <__assert_func>:
 800e604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e606:	4614      	mov	r4, r2
 800e608:	461a      	mov	r2, r3
 800e60a:	4b09      	ldr	r3, [pc, #36]	; (800e630 <__assert_func+0x2c>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4605      	mov	r5, r0
 800e610:	68d8      	ldr	r0, [r3, #12]
 800e612:	b14c      	cbz	r4, 800e628 <__assert_func+0x24>
 800e614:	4b07      	ldr	r3, [pc, #28]	; (800e634 <__assert_func+0x30>)
 800e616:	9100      	str	r1, [sp, #0]
 800e618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e61c:	4906      	ldr	r1, [pc, #24]	; (800e638 <__assert_func+0x34>)
 800e61e:	462b      	mov	r3, r5
 800e620:	f000 fca4 	bl	800ef6c <fiprintf>
 800e624:	f000 fcec 	bl	800f000 <abort>
 800e628:	4b04      	ldr	r3, [pc, #16]	; (800e63c <__assert_func+0x38>)
 800e62a:	461c      	mov	r4, r3
 800e62c:	e7f3      	b.n	800e616 <__assert_func+0x12>
 800e62e:	bf00      	nop
 800e630:	20000188 	.word	0x20000188
 800e634:	0800fc5a 	.word	0x0800fc5a
 800e638:	0800fc67 	.word	0x0800fc67
 800e63c:	0800fc95 	.word	0x0800fc95

0800e640 <_free_r>:
 800e640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e642:	2900      	cmp	r1, #0
 800e644:	d044      	beq.n	800e6d0 <_free_r+0x90>
 800e646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e64a:	9001      	str	r0, [sp, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f1a1 0404 	sub.w	r4, r1, #4
 800e652:	bfb8      	it	lt
 800e654:	18e4      	addlt	r4, r4, r3
 800e656:	f000 f8e7 	bl	800e828 <__malloc_lock>
 800e65a:	4a1e      	ldr	r2, [pc, #120]	; (800e6d4 <_free_r+0x94>)
 800e65c:	9801      	ldr	r0, [sp, #4]
 800e65e:	6813      	ldr	r3, [r2, #0]
 800e660:	b933      	cbnz	r3, 800e670 <_free_r+0x30>
 800e662:	6063      	str	r3, [r4, #4]
 800e664:	6014      	str	r4, [r2, #0]
 800e666:	b003      	add	sp, #12
 800e668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e66c:	f000 b8e2 	b.w	800e834 <__malloc_unlock>
 800e670:	42a3      	cmp	r3, r4
 800e672:	d908      	bls.n	800e686 <_free_r+0x46>
 800e674:	6825      	ldr	r5, [r4, #0]
 800e676:	1961      	adds	r1, r4, r5
 800e678:	428b      	cmp	r3, r1
 800e67a:	bf01      	itttt	eq
 800e67c:	6819      	ldreq	r1, [r3, #0]
 800e67e:	685b      	ldreq	r3, [r3, #4]
 800e680:	1949      	addeq	r1, r1, r5
 800e682:	6021      	streq	r1, [r4, #0]
 800e684:	e7ed      	b.n	800e662 <_free_r+0x22>
 800e686:	461a      	mov	r2, r3
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	b10b      	cbz	r3, 800e690 <_free_r+0x50>
 800e68c:	42a3      	cmp	r3, r4
 800e68e:	d9fa      	bls.n	800e686 <_free_r+0x46>
 800e690:	6811      	ldr	r1, [r2, #0]
 800e692:	1855      	adds	r5, r2, r1
 800e694:	42a5      	cmp	r5, r4
 800e696:	d10b      	bne.n	800e6b0 <_free_r+0x70>
 800e698:	6824      	ldr	r4, [r4, #0]
 800e69a:	4421      	add	r1, r4
 800e69c:	1854      	adds	r4, r2, r1
 800e69e:	42a3      	cmp	r3, r4
 800e6a0:	6011      	str	r1, [r2, #0]
 800e6a2:	d1e0      	bne.n	800e666 <_free_r+0x26>
 800e6a4:	681c      	ldr	r4, [r3, #0]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	6053      	str	r3, [r2, #4]
 800e6aa:	440c      	add	r4, r1
 800e6ac:	6014      	str	r4, [r2, #0]
 800e6ae:	e7da      	b.n	800e666 <_free_r+0x26>
 800e6b0:	d902      	bls.n	800e6b8 <_free_r+0x78>
 800e6b2:	230c      	movs	r3, #12
 800e6b4:	6003      	str	r3, [r0, #0]
 800e6b6:	e7d6      	b.n	800e666 <_free_r+0x26>
 800e6b8:	6825      	ldr	r5, [r4, #0]
 800e6ba:	1961      	adds	r1, r4, r5
 800e6bc:	428b      	cmp	r3, r1
 800e6be:	bf04      	itt	eq
 800e6c0:	6819      	ldreq	r1, [r3, #0]
 800e6c2:	685b      	ldreq	r3, [r3, #4]
 800e6c4:	6063      	str	r3, [r4, #4]
 800e6c6:	bf04      	itt	eq
 800e6c8:	1949      	addeq	r1, r1, r5
 800e6ca:	6021      	streq	r1, [r4, #0]
 800e6cc:	6054      	str	r4, [r2, #4]
 800e6ce:	e7ca      	b.n	800e666 <_free_r+0x26>
 800e6d0:	b003      	add	sp, #12
 800e6d2:	bd30      	pop	{r4, r5, pc}
 800e6d4:	20003718 	.word	0x20003718

0800e6d8 <malloc>:
 800e6d8:	4b02      	ldr	r3, [pc, #8]	; (800e6e4 <malloc+0xc>)
 800e6da:	4601      	mov	r1, r0
 800e6dc:	6818      	ldr	r0, [r3, #0]
 800e6de:	f000 b823 	b.w	800e728 <_malloc_r>
 800e6e2:	bf00      	nop
 800e6e4:	20000188 	.word	0x20000188

0800e6e8 <sbrk_aligned>:
 800e6e8:	b570      	push	{r4, r5, r6, lr}
 800e6ea:	4e0e      	ldr	r6, [pc, #56]	; (800e724 <sbrk_aligned+0x3c>)
 800e6ec:	460c      	mov	r4, r1
 800e6ee:	6831      	ldr	r1, [r6, #0]
 800e6f0:	4605      	mov	r5, r0
 800e6f2:	b911      	cbnz	r1, 800e6fa <sbrk_aligned+0x12>
 800e6f4:	f000 fc66 	bl	800efc4 <_sbrk_r>
 800e6f8:	6030      	str	r0, [r6, #0]
 800e6fa:	4621      	mov	r1, r4
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	f000 fc61 	bl	800efc4 <_sbrk_r>
 800e702:	1c43      	adds	r3, r0, #1
 800e704:	d00a      	beq.n	800e71c <sbrk_aligned+0x34>
 800e706:	1cc4      	adds	r4, r0, #3
 800e708:	f024 0403 	bic.w	r4, r4, #3
 800e70c:	42a0      	cmp	r0, r4
 800e70e:	d007      	beq.n	800e720 <sbrk_aligned+0x38>
 800e710:	1a21      	subs	r1, r4, r0
 800e712:	4628      	mov	r0, r5
 800e714:	f000 fc56 	bl	800efc4 <_sbrk_r>
 800e718:	3001      	adds	r0, #1
 800e71a:	d101      	bne.n	800e720 <sbrk_aligned+0x38>
 800e71c:	f04f 34ff 	mov.w	r4, #4294967295
 800e720:	4620      	mov	r0, r4
 800e722:	bd70      	pop	{r4, r5, r6, pc}
 800e724:	2000371c 	.word	0x2000371c

0800e728 <_malloc_r>:
 800e728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e72c:	1ccd      	adds	r5, r1, #3
 800e72e:	f025 0503 	bic.w	r5, r5, #3
 800e732:	3508      	adds	r5, #8
 800e734:	2d0c      	cmp	r5, #12
 800e736:	bf38      	it	cc
 800e738:	250c      	movcc	r5, #12
 800e73a:	2d00      	cmp	r5, #0
 800e73c:	4607      	mov	r7, r0
 800e73e:	db01      	blt.n	800e744 <_malloc_r+0x1c>
 800e740:	42a9      	cmp	r1, r5
 800e742:	d905      	bls.n	800e750 <_malloc_r+0x28>
 800e744:	230c      	movs	r3, #12
 800e746:	603b      	str	r3, [r7, #0]
 800e748:	2600      	movs	r6, #0
 800e74a:	4630      	mov	r0, r6
 800e74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e750:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e824 <_malloc_r+0xfc>
 800e754:	f000 f868 	bl	800e828 <__malloc_lock>
 800e758:	f8d8 3000 	ldr.w	r3, [r8]
 800e75c:	461c      	mov	r4, r3
 800e75e:	bb5c      	cbnz	r4, 800e7b8 <_malloc_r+0x90>
 800e760:	4629      	mov	r1, r5
 800e762:	4638      	mov	r0, r7
 800e764:	f7ff ffc0 	bl	800e6e8 <sbrk_aligned>
 800e768:	1c43      	adds	r3, r0, #1
 800e76a:	4604      	mov	r4, r0
 800e76c:	d155      	bne.n	800e81a <_malloc_r+0xf2>
 800e76e:	f8d8 4000 	ldr.w	r4, [r8]
 800e772:	4626      	mov	r6, r4
 800e774:	2e00      	cmp	r6, #0
 800e776:	d145      	bne.n	800e804 <_malloc_r+0xdc>
 800e778:	2c00      	cmp	r4, #0
 800e77a:	d048      	beq.n	800e80e <_malloc_r+0xe6>
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	4631      	mov	r1, r6
 800e780:	4638      	mov	r0, r7
 800e782:	eb04 0903 	add.w	r9, r4, r3
 800e786:	f000 fc1d 	bl	800efc4 <_sbrk_r>
 800e78a:	4581      	cmp	r9, r0
 800e78c:	d13f      	bne.n	800e80e <_malloc_r+0xe6>
 800e78e:	6821      	ldr	r1, [r4, #0]
 800e790:	1a6d      	subs	r5, r5, r1
 800e792:	4629      	mov	r1, r5
 800e794:	4638      	mov	r0, r7
 800e796:	f7ff ffa7 	bl	800e6e8 <sbrk_aligned>
 800e79a:	3001      	adds	r0, #1
 800e79c:	d037      	beq.n	800e80e <_malloc_r+0xe6>
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	442b      	add	r3, r5
 800e7a2:	6023      	str	r3, [r4, #0]
 800e7a4:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d038      	beq.n	800e81e <_malloc_r+0xf6>
 800e7ac:	685a      	ldr	r2, [r3, #4]
 800e7ae:	42a2      	cmp	r2, r4
 800e7b0:	d12b      	bne.n	800e80a <_malloc_r+0xe2>
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	605a      	str	r2, [r3, #4]
 800e7b6:	e00f      	b.n	800e7d8 <_malloc_r+0xb0>
 800e7b8:	6822      	ldr	r2, [r4, #0]
 800e7ba:	1b52      	subs	r2, r2, r5
 800e7bc:	d41f      	bmi.n	800e7fe <_malloc_r+0xd6>
 800e7be:	2a0b      	cmp	r2, #11
 800e7c0:	d917      	bls.n	800e7f2 <_malloc_r+0xca>
 800e7c2:	1961      	adds	r1, r4, r5
 800e7c4:	42a3      	cmp	r3, r4
 800e7c6:	6025      	str	r5, [r4, #0]
 800e7c8:	bf18      	it	ne
 800e7ca:	6059      	strne	r1, [r3, #4]
 800e7cc:	6863      	ldr	r3, [r4, #4]
 800e7ce:	bf08      	it	eq
 800e7d0:	f8c8 1000 	streq.w	r1, [r8]
 800e7d4:	5162      	str	r2, [r4, r5]
 800e7d6:	604b      	str	r3, [r1, #4]
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f104 060b 	add.w	r6, r4, #11
 800e7de:	f000 f829 	bl	800e834 <__malloc_unlock>
 800e7e2:	f026 0607 	bic.w	r6, r6, #7
 800e7e6:	1d23      	adds	r3, r4, #4
 800e7e8:	1af2      	subs	r2, r6, r3
 800e7ea:	d0ae      	beq.n	800e74a <_malloc_r+0x22>
 800e7ec:	1b9b      	subs	r3, r3, r6
 800e7ee:	50a3      	str	r3, [r4, r2]
 800e7f0:	e7ab      	b.n	800e74a <_malloc_r+0x22>
 800e7f2:	42a3      	cmp	r3, r4
 800e7f4:	6862      	ldr	r2, [r4, #4]
 800e7f6:	d1dd      	bne.n	800e7b4 <_malloc_r+0x8c>
 800e7f8:	f8c8 2000 	str.w	r2, [r8]
 800e7fc:	e7ec      	b.n	800e7d8 <_malloc_r+0xb0>
 800e7fe:	4623      	mov	r3, r4
 800e800:	6864      	ldr	r4, [r4, #4]
 800e802:	e7ac      	b.n	800e75e <_malloc_r+0x36>
 800e804:	4634      	mov	r4, r6
 800e806:	6876      	ldr	r6, [r6, #4]
 800e808:	e7b4      	b.n	800e774 <_malloc_r+0x4c>
 800e80a:	4613      	mov	r3, r2
 800e80c:	e7cc      	b.n	800e7a8 <_malloc_r+0x80>
 800e80e:	230c      	movs	r3, #12
 800e810:	603b      	str	r3, [r7, #0]
 800e812:	4638      	mov	r0, r7
 800e814:	f000 f80e 	bl	800e834 <__malloc_unlock>
 800e818:	e797      	b.n	800e74a <_malloc_r+0x22>
 800e81a:	6025      	str	r5, [r4, #0]
 800e81c:	e7dc      	b.n	800e7d8 <_malloc_r+0xb0>
 800e81e:	605b      	str	r3, [r3, #4]
 800e820:	deff      	udf	#255	; 0xff
 800e822:	bf00      	nop
 800e824:	20003718 	.word	0x20003718

0800e828 <__malloc_lock>:
 800e828:	4801      	ldr	r0, [pc, #4]	; (800e830 <__malloc_lock+0x8>)
 800e82a:	f7ff bee1 	b.w	800e5f0 <__retarget_lock_acquire_recursive>
 800e82e:	bf00      	nop
 800e830:	20003714 	.word	0x20003714

0800e834 <__malloc_unlock>:
 800e834:	4801      	ldr	r0, [pc, #4]	; (800e83c <__malloc_unlock+0x8>)
 800e836:	f7ff bedc 	b.w	800e5f2 <__retarget_lock_release_recursive>
 800e83a:	bf00      	nop
 800e83c:	20003714 	.word	0x20003714

0800e840 <__ssputs_r>:
 800e840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e844:	688e      	ldr	r6, [r1, #8]
 800e846:	461f      	mov	r7, r3
 800e848:	42be      	cmp	r6, r7
 800e84a:	680b      	ldr	r3, [r1, #0]
 800e84c:	4682      	mov	sl, r0
 800e84e:	460c      	mov	r4, r1
 800e850:	4690      	mov	r8, r2
 800e852:	d82c      	bhi.n	800e8ae <__ssputs_r+0x6e>
 800e854:	898a      	ldrh	r2, [r1, #12]
 800e856:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e85a:	d026      	beq.n	800e8aa <__ssputs_r+0x6a>
 800e85c:	6965      	ldr	r5, [r4, #20]
 800e85e:	6909      	ldr	r1, [r1, #16]
 800e860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e864:	eba3 0901 	sub.w	r9, r3, r1
 800e868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e86c:	1c7b      	adds	r3, r7, #1
 800e86e:	444b      	add	r3, r9
 800e870:	106d      	asrs	r5, r5, #1
 800e872:	429d      	cmp	r5, r3
 800e874:	bf38      	it	cc
 800e876:	461d      	movcc	r5, r3
 800e878:	0553      	lsls	r3, r2, #21
 800e87a:	d527      	bpl.n	800e8cc <__ssputs_r+0x8c>
 800e87c:	4629      	mov	r1, r5
 800e87e:	f7ff ff53 	bl	800e728 <_malloc_r>
 800e882:	4606      	mov	r6, r0
 800e884:	b360      	cbz	r0, 800e8e0 <__ssputs_r+0xa0>
 800e886:	6921      	ldr	r1, [r4, #16]
 800e888:	464a      	mov	r2, r9
 800e88a:	f000 fbab 	bl	800efe4 <memcpy>
 800e88e:	89a3      	ldrh	r3, [r4, #12]
 800e890:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e898:	81a3      	strh	r3, [r4, #12]
 800e89a:	6126      	str	r6, [r4, #16]
 800e89c:	6165      	str	r5, [r4, #20]
 800e89e:	444e      	add	r6, r9
 800e8a0:	eba5 0509 	sub.w	r5, r5, r9
 800e8a4:	6026      	str	r6, [r4, #0]
 800e8a6:	60a5      	str	r5, [r4, #8]
 800e8a8:	463e      	mov	r6, r7
 800e8aa:	42be      	cmp	r6, r7
 800e8ac:	d900      	bls.n	800e8b0 <__ssputs_r+0x70>
 800e8ae:	463e      	mov	r6, r7
 800e8b0:	6820      	ldr	r0, [r4, #0]
 800e8b2:	4632      	mov	r2, r6
 800e8b4:	4641      	mov	r1, r8
 800e8b6:	f000 fb6b 	bl	800ef90 <memmove>
 800e8ba:	68a3      	ldr	r3, [r4, #8]
 800e8bc:	1b9b      	subs	r3, r3, r6
 800e8be:	60a3      	str	r3, [r4, #8]
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	4433      	add	r3, r6
 800e8c4:	6023      	str	r3, [r4, #0]
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8cc:	462a      	mov	r2, r5
 800e8ce:	f000 fb9e 	bl	800f00e <_realloc_r>
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d1e0      	bne.n	800e89a <__ssputs_r+0x5a>
 800e8d8:	6921      	ldr	r1, [r4, #16]
 800e8da:	4650      	mov	r0, sl
 800e8dc:	f7ff feb0 	bl	800e640 <_free_r>
 800e8e0:	230c      	movs	r3, #12
 800e8e2:	f8ca 3000 	str.w	r3, [sl]
 800e8e6:	89a3      	ldrh	r3, [r4, #12]
 800e8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ec:	81a3      	strh	r3, [r4, #12]
 800e8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f2:	e7e9      	b.n	800e8c8 <__ssputs_r+0x88>

0800e8f4 <_svfiprintf_r>:
 800e8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f8:	4698      	mov	r8, r3
 800e8fa:	898b      	ldrh	r3, [r1, #12]
 800e8fc:	061b      	lsls	r3, r3, #24
 800e8fe:	b09d      	sub	sp, #116	; 0x74
 800e900:	4607      	mov	r7, r0
 800e902:	460d      	mov	r5, r1
 800e904:	4614      	mov	r4, r2
 800e906:	d50e      	bpl.n	800e926 <_svfiprintf_r+0x32>
 800e908:	690b      	ldr	r3, [r1, #16]
 800e90a:	b963      	cbnz	r3, 800e926 <_svfiprintf_r+0x32>
 800e90c:	2140      	movs	r1, #64	; 0x40
 800e90e:	f7ff ff0b 	bl	800e728 <_malloc_r>
 800e912:	6028      	str	r0, [r5, #0]
 800e914:	6128      	str	r0, [r5, #16]
 800e916:	b920      	cbnz	r0, 800e922 <_svfiprintf_r+0x2e>
 800e918:	230c      	movs	r3, #12
 800e91a:	603b      	str	r3, [r7, #0]
 800e91c:	f04f 30ff 	mov.w	r0, #4294967295
 800e920:	e0d0      	b.n	800eac4 <_svfiprintf_r+0x1d0>
 800e922:	2340      	movs	r3, #64	; 0x40
 800e924:	616b      	str	r3, [r5, #20]
 800e926:	2300      	movs	r3, #0
 800e928:	9309      	str	r3, [sp, #36]	; 0x24
 800e92a:	2320      	movs	r3, #32
 800e92c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e930:	f8cd 800c 	str.w	r8, [sp, #12]
 800e934:	2330      	movs	r3, #48	; 0x30
 800e936:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eadc <_svfiprintf_r+0x1e8>
 800e93a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e93e:	f04f 0901 	mov.w	r9, #1
 800e942:	4623      	mov	r3, r4
 800e944:	469a      	mov	sl, r3
 800e946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e94a:	b10a      	cbz	r2, 800e950 <_svfiprintf_r+0x5c>
 800e94c:	2a25      	cmp	r2, #37	; 0x25
 800e94e:	d1f9      	bne.n	800e944 <_svfiprintf_r+0x50>
 800e950:	ebba 0b04 	subs.w	fp, sl, r4
 800e954:	d00b      	beq.n	800e96e <_svfiprintf_r+0x7a>
 800e956:	465b      	mov	r3, fp
 800e958:	4622      	mov	r2, r4
 800e95a:	4629      	mov	r1, r5
 800e95c:	4638      	mov	r0, r7
 800e95e:	f7ff ff6f 	bl	800e840 <__ssputs_r>
 800e962:	3001      	adds	r0, #1
 800e964:	f000 80a9 	beq.w	800eaba <_svfiprintf_r+0x1c6>
 800e968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e96a:	445a      	add	r2, fp
 800e96c:	9209      	str	r2, [sp, #36]	; 0x24
 800e96e:	f89a 3000 	ldrb.w	r3, [sl]
 800e972:	2b00      	cmp	r3, #0
 800e974:	f000 80a1 	beq.w	800eaba <_svfiprintf_r+0x1c6>
 800e978:	2300      	movs	r3, #0
 800e97a:	f04f 32ff 	mov.w	r2, #4294967295
 800e97e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e982:	f10a 0a01 	add.w	sl, sl, #1
 800e986:	9304      	str	r3, [sp, #16]
 800e988:	9307      	str	r3, [sp, #28]
 800e98a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e98e:	931a      	str	r3, [sp, #104]	; 0x68
 800e990:	4654      	mov	r4, sl
 800e992:	2205      	movs	r2, #5
 800e994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e998:	4850      	ldr	r0, [pc, #320]	; (800eadc <_svfiprintf_r+0x1e8>)
 800e99a:	f7f1 fc39 	bl	8000210 <memchr>
 800e99e:	9a04      	ldr	r2, [sp, #16]
 800e9a0:	b9d8      	cbnz	r0, 800e9da <_svfiprintf_r+0xe6>
 800e9a2:	06d0      	lsls	r0, r2, #27
 800e9a4:	bf44      	itt	mi
 800e9a6:	2320      	movmi	r3, #32
 800e9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9ac:	0711      	lsls	r1, r2, #28
 800e9ae:	bf44      	itt	mi
 800e9b0:	232b      	movmi	r3, #43	; 0x2b
 800e9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e9bc:	d015      	beq.n	800e9ea <_svfiprintf_r+0xf6>
 800e9be:	9a07      	ldr	r2, [sp, #28]
 800e9c0:	4654      	mov	r4, sl
 800e9c2:	2000      	movs	r0, #0
 800e9c4:	f04f 0c0a 	mov.w	ip, #10
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9ce:	3b30      	subs	r3, #48	; 0x30
 800e9d0:	2b09      	cmp	r3, #9
 800e9d2:	d94d      	bls.n	800ea70 <_svfiprintf_r+0x17c>
 800e9d4:	b1b0      	cbz	r0, 800ea04 <_svfiprintf_r+0x110>
 800e9d6:	9207      	str	r2, [sp, #28]
 800e9d8:	e014      	b.n	800ea04 <_svfiprintf_r+0x110>
 800e9da:	eba0 0308 	sub.w	r3, r0, r8
 800e9de:	fa09 f303 	lsl.w	r3, r9, r3
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	9304      	str	r3, [sp, #16]
 800e9e6:	46a2      	mov	sl, r4
 800e9e8:	e7d2      	b.n	800e990 <_svfiprintf_r+0x9c>
 800e9ea:	9b03      	ldr	r3, [sp, #12]
 800e9ec:	1d19      	adds	r1, r3, #4
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	9103      	str	r1, [sp, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	bfbb      	ittet	lt
 800e9f6:	425b      	neglt	r3, r3
 800e9f8:	f042 0202 	orrlt.w	r2, r2, #2
 800e9fc:	9307      	strge	r3, [sp, #28]
 800e9fe:	9307      	strlt	r3, [sp, #28]
 800ea00:	bfb8      	it	lt
 800ea02:	9204      	strlt	r2, [sp, #16]
 800ea04:	7823      	ldrb	r3, [r4, #0]
 800ea06:	2b2e      	cmp	r3, #46	; 0x2e
 800ea08:	d10c      	bne.n	800ea24 <_svfiprintf_r+0x130>
 800ea0a:	7863      	ldrb	r3, [r4, #1]
 800ea0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea0e:	d134      	bne.n	800ea7a <_svfiprintf_r+0x186>
 800ea10:	9b03      	ldr	r3, [sp, #12]
 800ea12:	1d1a      	adds	r2, r3, #4
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	9203      	str	r2, [sp, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	bfb8      	it	lt
 800ea1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea20:	3402      	adds	r4, #2
 800ea22:	9305      	str	r3, [sp, #20]
 800ea24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eaec <_svfiprintf_r+0x1f8>
 800ea28:	7821      	ldrb	r1, [r4, #0]
 800ea2a:	2203      	movs	r2, #3
 800ea2c:	4650      	mov	r0, sl
 800ea2e:	f7f1 fbef 	bl	8000210 <memchr>
 800ea32:	b138      	cbz	r0, 800ea44 <_svfiprintf_r+0x150>
 800ea34:	9b04      	ldr	r3, [sp, #16]
 800ea36:	eba0 000a 	sub.w	r0, r0, sl
 800ea3a:	2240      	movs	r2, #64	; 0x40
 800ea3c:	4082      	lsls	r2, r0
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	3401      	adds	r4, #1
 800ea42:	9304      	str	r3, [sp, #16]
 800ea44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea48:	4825      	ldr	r0, [pc, #148]	; (800eae0 <_svfiprintf_r+0x1ec>)
 800ea4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea4e:	2206      	movs	r2, #6
 800ea50:	f7f1 fbde 	bl	8000210 <memchr>
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d038      	beq.n	800eaca <_svfiprintf_r+0x1d6>
 800ea58:	4b22      	ldr	r3, [pc, #136]	; (800eae4 <_svfiprintf_r+0x1f0>)
 800ea5a:	bb1b      	cbnz	r3, 800eaa4 <_svfiprintf_r+0x1b0>
 800ea5c:	9b03      	ldr	r3, [sp, #12]
 800ea5e:	3307      	adds	r3, #7
 800ea60:	f023 0307 	bic.w	r3, r3, #7
 800ea64:	3308      	adds	r3, #8
 800ea66:	9303      	str	r3, [sp, #12]
 800ea68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea6a:	4433      	add	r3, r6
 800ea6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea6e:	e768      	b.n	800e942 <_svfiprintf_r+0x4e>
 800ea70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea74:	460c      	mov	r4, r1
 800ea76:	2001      	movs	r0, #1
 800ea78:	e7a6      	b.n	800e9c8 <_svfiprintf_r+0xd4>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	3401      	adds	r4, #1
 800ea7e:	9305      	str	r3, [sp, #20]
 800ea80:	4619      	mov	r1, r3
 800ea82:	f04f 0c0a 	mov.w	ip, #10
 800ea86:	4620      	mov	r0, r4
 800ea88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea8c:	3a30      	subs	r2, #48	; 0x30
 800ea8e:	2a09      	cmp	r2, #9
 800ea90:	d903      	bls.n	800ea9a <_svfiprintf_r+0x1a6>
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d0c6      	beq.n	800ea24 <_svfiprintf_r+0x130>
 800ea96:	9105      	str	r1, [sp, #20]
 800ea98:	e7c4      	b.n	800ea24 <_svfiprintf_r+0x130>
 800ea9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e7f0      	b.n	800ea86 <_svfiprintf_r+0x192>
 800eaa4:	ab03      	add	r3, sp, #12
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	462a      	mov	r2, r5
 800eaaa:	4b0f      	ldr	r3, [pc, #60]	; (800eae8 <_svfiprintf_r+0x1f4>)
 800eaac:	a904      	add	r1, sp, #16
 800eaae:	4638      	mov	r0, r7
 800eab0:	f3af 8000 	nop.w
 800eab4:	1c42      	adds	r2, r0, #1
 800eab6:	4606      	mov	r6, r0
 800eab8:	d1d6      	bne.n	800ea68 <_svfiprintf_r+0x174>
 800eaba:	89ab      	ldrh	r3, [r5, #12]
 800eabc:	065b      	lsls	r3, r3, #25
 800eabe:	f53f af2d 	bmi.w	800e91c <_svfiprintf_r+0x28>
 800eac2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eac4:	b01d      	add	sp, #116	; 0x74
 800eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaca:	ab03      	add	r3, sp, #12
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	462a      	mov	r2, r5
 800ead0:	4b05      	ldr	r3, [pc, #20]	; (800eae8 <_svfiprintf_r+0x1f4>)
 800ead2:	a904      	add	r1, sp, #16
 800ead4:	4638      	mov	r0, r7
 800ead6:	f000 f879 	bl	800ebcc <_printf_i>
 800eada:	e7eb      	b.n	800eab4 <_svfiprintf_r+0x1c0>
 800eadc:	0800fc96 	.word	0x0800fc96
 800eae0:	0800fca0 	.word	0x0800fca0
 800eae4:	00000000 	.word	0x00000000
 800eae8:	0800e841 	.word	0x0800e841
 800eaec:	0800fc9c 	.word	0x0800fc9c

0800eaf0 <_printf_common>:
 800eaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf4:	4616      	mov	r6, r2
 800eaf6:	4699      	mov	r9, r3
 800eaf8:	688a      	ldr	r2, [r1, #8]
 800eafa:	690b      	ldr	r3, [r1, #16]
 800eafc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb00:	4293      	cmp	r3, r2
 800eb02:	bfb8      	it	lt
 800eb04:	4613      	movlt	r3, r2
 800eb06:	6033      	str	r3, [r6, #0]
 800eb08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb0c:	4607      	mov	r7, r0
 800eb0e:	460c      	mov	r4, r1
 800eb10:	b10a      	cbz	r2, 800eb16 <_printf_common+0x26>
 800eb12:	3301      	adds	r3, #1
 800eb14:	6033      	str	r3, [r6, #0]
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	0699      	lsls	r1, r3, #26
 800eb1a:	bf42      	ittt	mi
 800eb1c:	6833      	ldrmi	r3, [r6, #0]
 800eb1e:	3302      	addmi	r3, #2
 800eb20:	6033      	strmi	r3, [r6, #0]
 800eb22:	6825      	ldr	r5, [r4, #0]
 800eb24:	f015 0506 	ands.w	r5, r5, #6
 800eb28:	d106      	bne.n	800eb38 <_printf_common+0x48>
 800eb2a:	f104 0a19 	add.w	sl, r4, #25
 800eb2e:	68e3      	ldr	r3, [r4, #12]
 800eb30:	6832      	ldr	r2, [r6, #0]
 800eb32:	1a9b      	subs	r3, r3, r2
 800eb34:	42ab      	cmp	r3, r5
 800eb36:	dc26      	bgt.n	800eb86 <_printf_common+0x96>
 800eb38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb3c:	1e13      	subs	r3, r2, #0
 800eb3e:	6822      	ldr	r2, [r4, #0]
 800eb40:	bf18      	it	ne
 800eb42:	2301      	movne	r3, #1
 800eb44:	0692      	lsls	r2, r2, #26
 800eb46:	d42b      	bmi.n	800eba0 <_printf_common+0xb0>
 800eb48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	4638      	mov	r0, r7
 800eb50:	47c0      	blx	r8
 800eb52:	3001      	adds	r0, #1
 800eb54:	d01e      	beq.n	800eb94 <_printf_common+0xa4>
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	6922      	ldr	r2, [r4, #16]
 800eb5a:	f003 0306 	and.w	r3, r3, #6
 800eb5e:	2b04      	cmp	r3, #4
 800eb60:	bf02      	ittt	eq
 800eb62:	68e5      	ldreq	r5, [r4, #12]
 800eb64:	6833      	ldreq	r3, [r6, #0]
 800eb66:	1aed      	subeq	r5, r5, r3
 800eb68:	68a3      	ldr	r3, [r4, #8]
 800eb6a:	bf0c      	ite	eq
 800eb6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb70:	2500      	movne	r5, #0
 800eb72:	4293      	cmp	r3, r2
 800eb74:	bfc4      	itt	gt
 800eb76:	1a9b      	subgt	r3, r3, r2
 800eb78:	18ed      	addgt	r5, r5, r3
 800eb7a:	2600      	movs	r6, #0
 800eb7c:	341a      	adds	r4, #26
 800eb7e:	42b5      	cmp	r5, r6
 800eb80:	d11a      	bne.n	800ebb8 <_printf_common+0xc8>
 800eb82:	2000      	movs	r0, #0
 800eb84:	e008      	b.n	800eb98 <_printf_common+0xa8>
 800eb86:	2301      	movs	r3, #1
 800eb88:	4652      	mov	r2, sl
 800eb8a:	4649      	mov	r1, r9
 800eb8c:	4638      	mov	r0, r7
 800eb8e:	47c0      	blx	r8
 800eb90:	3001      	adds	r0, #1
 800eb92:	d103      	bne.n	800eb9c <_printf_common+0xac>
 800eb94:	f04f 30ff 	mov.w	r0, #4294967295
 800eb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9c:	3501      	adds	r5, #1
 800eb9e:	e7c6      	b.n	800eb2e <_printf_common+0x3e>
 800eba0:	18e1      	adds	r1, r4, r3
 800eba2:	1c5a      	adds	r2, r3, #1
 800eba4:	2030      	movs	r0, #48	; 0x30
 800eba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebaa:	4422      	add	r2, r4
 800ebac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebb4:	3302      	adds	r3, #2
 800ebb6:	e7c7      	b.n	800eb48 <_printf_common+0x58>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	4622      	mov	r2, r4
 800ebbc:	4649      	mov	r1, r9
 800ebbe:	4638      	mov	r0, r7
 800ebc0:	47c0      	blx	r8
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	d0e6      	beq.n	800eb94 <_printf_common+0xa4>
 800ebc6:	3601      	adds	r6, #1
 800ebc8:	e7d9      	b.n	800eb7e <_printf_common+0x8e>
	...

0800ebcc <_printf_i>:
 800ebcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd0:	7e0f      	ldrb	r7, [r1, #24]
 800ebd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ebd4:	2f78      	cmp	r7, #120	; 0x78
 800ebd6:	4691      	mov	r9, r2
 800ebd8:	4680      	mov	r8, r0
 800ebda:	460c      	mov	r4, r1
 800ebdc:	469a      	mov	sl, r3
 800ebde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ebe2:	d807      	bhi.n	800ebf4 <_printf_i+0x28>
 800ebe4:	2f62      	cmp	r7, #98	; 0x62
 800ebe6:	d80a      	bhi.n	800ebfe <_printf_i+0x32>
 800ebe8:	2f00      	cmp	r7, #0
 800ebea:	f000 80d4 	beq.w	800ed96 <_printf_i+0x1ca>
 800ebee:	2f58      	cmp	r7, #88	; 0x58
 800ebf0:	f000 80c0 	beq.w	800ed74 <_printf_i+0x1a8>
 800ebf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ebfc:	e03a      	b.n	800ec74 <_printf_i+0xa8>
 800ebfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec02:	2b15      	cmp	r3, #21
 800ec04:	d8f6      	bhi.n	800ebf4 <_printf_i+0x28>
 800ec06:	a101      	add	r1, pc, #4	; (adr r1, 800ec0c <_printf_i+0x40>)
 800ec08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec0c:	0800ec65 	.word	0x0800ec65
 800ec10:	0800ec79 	.word	0x0800ec79
 800ec14:	0800ebf5 	.word	0x0800ebf5
 800ec18:	0800ebf5 	.word	0x0800ebf5
 800ec1c:	0800ebf5 	.word	0x0800ebf5
 800ec20:	0800ebf5 	.word	0x0800ebf5
 800ec24:	0800ec79 	.word	0x0800ec79
 800ec28:	0800ebf5 	.word	0x0800ebf5
 800ec2c:	0800ebf5 	.word	0x0800ebf5
 800ec30:	0800ebf5 	.word	0x0800ebf5
 800ec34:	0800ebf5 	.word	0x0800ebf5
 800ec38:	0800ed7d 	.word	0x0800ed7d
 800ec3c:	0800eca5 	.word	0x0800eca5
 800ec40:	0800ed37 	.word	0x0800ed37
 800ec44:	0800ebf5 	.word	0x0800ebf5
 800ec48:	0800ebf5 	.word	0x0800ebf5
 800ec4c:	0800ed9f 	.word	0x0800ed9f
 800ec50:	0800ebf5 	.word	0x0800ebf5
 800ec54:	0800eca5 	.word	0x0800eca5
 800ec58:	0800ebf5 	.word	0x0800ebf5
 800ec5c:	0800ebf5 	.word	0x0800ebf5
 800ec60:	0800ed3f 	.word	0x0800ed3f
 800ec64:	682b      	ldr	r3, [r5, #0]
 800ec66:	1d1a      	adds	r2, r3, #4
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	602a      	str	r2, [r5, #0]
 800ec6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec74:	2301      	movs	r3, #1
 800ec76:	e09f      	b.n	800edb8 <_printf_i+0x1ec>
 800ec78:	6820      	ldr	r0, [r4, #0]
 800ec7a:	682b      	ldr	r3, [r5, #0]
 800ec7c:	0607      	lsls	r7, r0, #24
 800ec7e:	f103 0104 	add.w	r1, r3, #4
 800ec82:	6029      	str	r1, [r5, #0]
 800ec84:	d501      	bpl.n	800ec8a <_printf_i+0xbe>
 800ec86:	681e      	ldr	r6, [r3, #0]
 800ec88:	e003      	b.n	800ec92 <_printf_i+0xc6>
 800ec8a:	0646      	lsls	r6, r0, #25
 800ec8c:	d5fb      	bpl.n	800ec86 <_printf_i+0xba>
 800ec8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ec92:	2e00      	cmp	r6, #0
 800ec94:	da03      	bge.n	800ec9e <_printf_i+0xd2>
 800ec96:	232d      	movs	r3, #45	; 0x2d
 800ec98:	4276      	negs	r6, r6
 800ec9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec9e:	485a      	ldr	r0, [pc, #360]	; (800ee08 <_printf_i+0x23c>)
 800eca0:	230a      	movs	r3, #10
 800eca2:	e012      	b.n	800ecca <_printf_i+0xfe>
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	6820      	ldr	r0, [r4, #0]
 800eca8:	1d19      	adds	r1, r3, #4
 800ecaa:	6029      	str	r1, [r5, #0]
 800ecac:	0605      	lsls	r5, r0, #24
 800ecae:	d501      	bpl.n	800ecb4 <_printf_i+0xe8>
 800ecb0:	681e      	ldr	r6, [r3, #0]
 800ecb2:	e002      	b.n	800ecba <_printf_i+0xee>
 800ecb4:	0641      	lsls	r1, r0, #25
 800ecb6:	d5fb      	bpl.n	800ecb0 <_printf_i+0xe4>
 800ecb8:	881e      	ldrh	r6, [r3, #0]
 800ecba:	4853      	ldr	r0, [pc, #332]	; (800ee08 <_printf_i+0x23c>)
 800ecbc:	2f6f      	cmp	r7, #111	; 0x6f
 800ecbe:	bf0c      	ite	eq
 800ecc0:	2308      	moveq	r3, #8
 800ecc2:	230a      	movne	r3, #10
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ecca:	6865      	ldr	r5, [r4, #4]
 800eccc:	60a5      	str	r5, [r4, #8]
 800ecce:	2d00      	cmp	r5, #0
 800ecd0:	bfa2      	ittt	ge
 800ecd2:	6821      	ldrge	r1, [r4, #0]
 800ecd4:	f021 0104 	bicge.w	r1, r1, #4
 800ecd8:	6021      	strge	r1, [r4, #0]
 800ecda:	b90e      	cbnz	r6, 800ece0 <_printf_i+0x114>
 800ecdc:	2d00      	cmp	r5, #0
 800ecde:	d04b      	beq.n	800ed78 <_printf_i+0x1ac>
 800ece0:	4615      	mov	r5, r2
 800ece2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ece6:	fb03 6711 	mls	r7, r3, r1, r6
 800ecea:	5dc7      	ldrb	r7, [r0, r7]
 800ecec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ecf0:	4637      	mov	r7, r6
 800ecf2:	42bb      	cmp	r3, r7
 800ecf4:	460e      	mov	r6, r1
 800ecf6:	d9f4      	bls.n	800ece2 <_printf_i+0x116>
 800ecf8:	2b08      	cmp	r3, #8
 800ecfa:	d10b      	bne.n	800ed14 <_printf_i+0x148>
 800ecfc:	6823      	ldr	r3, [r4, #0]
 800ecfe:	07de      	lsls	r6, r3, #31
 800ed00:	d508      	bpl.n	800ed14 <_printf_i+0x148>
 800ed02:	6923      	ldr	r3, [r4, #16]
 800ed04:	6861      	ldr	r1, [r4, #4]
 800ed06:	4299      	cmp	r1, r3
 800ed08:	bfde      	ittt	le
 800ed0a:	2330      	movle	r3, #48	; 0x30
 800ed0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed14:	1b52      	subs	r2, r2, r5
 800ed16:	6122      	str	r2, [r4, #16]
 800ed18:	f8cd a000 	str.w	sl, [sp]
 800ed1c:	464b      	mov	r3, r9
 800ed1e:	aa03      	add	r2, sp, #12
 800ed20:	4621      	mov	r1, r4
 800ed22:	4640      	mov	r0, r8
 800ed24:	f7ff fee4 	bl	800eaf0 <_printf_common>
 800ed28:	3001      	adds	r0, #1
 800ed2a:	d14a      	bne.n	800edc2 <_printf_i+0x1f6>
 800ed2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed30:	b004      	add	sp, #16
 800ed32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	f043 0320 	orr.w	r3, r3, #32
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	4833      	ldr	r0, [pc, #204]	; (800ee0c <_printf_i+0x240>)
 800ed40:	2778      	movs	r7, #120	; 0x78
 800ed42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed46:	6823      	ldr	r3, [r4, #0]
 800ed48:	6829      	ldr	r1, [r5, #0]
 800ed4a:	061f      	lsls	r7, r3, #24
 800ed4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ed50:	d402      	bmi.n	800ed58 <_printf_i+0x18c>
 800ed52:	065f      	lsls	r7, r3, #25
 800ed54:	bf48      	it	mi
 800ed56:	b2b6      	uxthmi	r6, r6
 800ed58:	07df      	lsls	r7, r3, #31
 800ed5a:	bf48      	it	mi
 800ed5c:	f043 0320 	orrmi.w	r3, r3, #32
 800ed60:	6029      	str	r1, [r5, #0]
 800ed62:	bf48      	it	mi
 800ed64:	6023      	strmi	r3, [r4, #0]
 800ed66:	b91e      	cbnz	r6, 800ed70 <_printf_i+0x1a4>
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	f023 0320 	bic.w	r3, r3, #32
 800ed6e:	6023      	str	r3, [r4, #0]
 800ed70:	2310      	movs	r3, #16
 800ed72:	e7a7      	b.n	800ecc4 <_printf_i+0xf8>
 800ed74:	4824      	ldr	r0, [pc, #144]	; (800ee08 <_printf_i+0x23c>)
 800ed76:	e7e4      	b.n	800ed42 <_printf_i+0x176>
 800ed78:	4615      	mov	r5, r2
 800ed7a:	e7bd      	b.n	800ecf8 <_printf_i+0x12c>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	6826      	ldr	r6, [r4, #0]
 800ed80:	6961      	ldr	r1, [r4, #20]
 800ed82:	1d18      	adds	r0, r3, #4
 800ed84:	6028      	str	r0, [r5, #0]
 800ed86:	0635      	lsls	r5, r6, #24
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	d501      	bpl.n	800ed90 <_printf_i+0x1c4>
 800ed8c:	6019      	str	r1, [r3, #0]
 800ed8e:	e002      	b.n	800ed96 <_printf_i+0x1ca>
 800ed90:	0670      	lsls	r0, r6, #25
 800ed92:	d5fb      	bpl.n	800ed8c <_printf_i+0x1c0>
 800ed94:	8019      	strh	r1, [r3, #0]
 800ed96:	2300      	movs	r3, #0
 800ed98:	6123      	str	r3, [r4, #16]
 800ed9a:	4615      	mov	r5, r2
 800ed9c:	e7bc      	b.n	800ed18 <_printf_i+0x14c>
 800ed9e:	682b      	ldr	r3, [r5, #0]
 800eda0:	1d1a      	adds	r2, r3, #4
 800eda2:	602a      	str	r2, [r5, #0]
 800eda4:	681d      	ldr	r5, [r3, #0]
 800eda6:	6862      	ldr	r2, [r4, #4]
 800eda8:	2100      	movs	r1, #0
 800edaa:	4628      	mov	r0, r5
 800edac:	f7f1 fa30 	bl	8000210 <memchr>
 800edb0:	b108      	cbz	r0, 800edb6 <_printf_i+0x1ea>
 800edb2:	1b40      	subs	r0, r0, r5
 800edb4:	6060      	str	r0, [r4, #4]
 800edb6:	6863      	ldr	r3, [r4, #4]
 800edb8:	6123      	str	r3, [r4, #16]
 800edba:	2300      	movs	r3, #0
 800edbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edc0:	e7aa      	b.n	800ed18 <_printf_i+0x14c>
 800edc2:	6923      	ldr	r3, [r4, #16]
 800edc4:	462a      	mov	r2, r5
 800edc6:	4649      	mov	r1, r9
 800edc8:	4640      	mov	r0, r8
 800edca:	47d0      	blx	sl
 800edcc:	3001      	adds	r0, #1
 800edce:	d0ad      	beq.n	800ed2c <_printf_i+0x160>
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	079b      	lsls	r3, r3, #30
 800edd4:	d413      	bmi.n	800edfe <_printf_i+0x232>
 800edd6:	68e0      	ldr	r0, [r4, #12]
 800edd8:	9b03      	ldr	r3, [sp, #12]
 800edda:	4298      	cmp	r0, r3
 800eddc:	bfb8      	it	lt
 800edde:	4618      	movlt	r0, r3
 800ede0:	e7a6      	b.n	800ed30 <_printf_i+0x164>
 800ede2:	2301      	movs	r3, #1
 800ede4:	4632      	mov	r2, r6
 800ede6:	4649      	mov	r1, r9
 800ede8:	4640      	mov	r0, r8
 800edea:	47d0      	blx	sl
 800edec:	3001      	adds	r0, #1
 800edee:	d09d      	beq.n	800ed2c <_printf_i+0x160>
 800edf0:	3501      	adds	r5, #1
 800edf2:	68e3      	ldr	r3, [r4, #12]
 800edf4:	9903      	ldr	r1, [sp, #12]
 800edf6:	1a5b      	subs	r3, r3, r1
 800edf8:	42ab      	cmp	r3, r5
 800edfa:	dcf2      	bgt.n	800ede2 <_printf_i+0x216>
 800edfc:	e7eb      	b.n	800edd6 <_printf_i+0x20a>
 800edfe:	2500      	movs	r5, #0
 800ee00:	f104 0619 	add.w	r6, r4, #25
 800ee04:	e7f5      	b.n	800edf2 <_printf_i+0x226>
 800ee06:	bf00      	nop
 800ee08:	0800fca7 	.word	0x0800fca7
 800ee0c:	0800fcb8 	.word	0x0800fcb8

0800ee10 <__sflush_r>:
 800ee10:	898a      	ldrh	r2, [r1, #12]
 800ee12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee16:	4605      	mov	r5, r0
 800ee18:	0710      	lsls	r0, r2, #28
 800ee1a:	460c      	mov	r4, r1
 800ee1c:	d458      	bmi.n	800eed0 <__sflush_r+0xc0>
 800ee1e:	684b      	ldr	r3, [r1, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	dc05      	bgt.n	800ee30 <__sflush_r+0x20>
 800ee24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	dc02      	bgt.n	800ee30 <__sflush_r+0x20>
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee32:	2e00      	cmp	r6, #0
 800ee34:	d0f9      	beq.n	800ee2a <__sflush_r+0x1a>
 800ee36:	2300      	movs	r3, #0
 800ee38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee3c:	682f      	ldr	r7, [r5, #0]
 800ee3e:	6a21      	ldr	r1, [r4, #32]
 800ee40:	602b      	str	r3, [r5, #0]
 800ee42:	d032      	beq.n	800eeaa <__sflush_r+0x9a>
 800ee44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee46:	89a3      	ldrh	r3, [r4, #12]
 800ee48:	075a      	lsls	r2, r3, #29
 800ee4a:	d505      	bpl.n	800ee58 <__sflush_r+0x48>
 800ee4c:	6863      	ldr	r3, [r4, #4]
 800ee4e:	1ac0      	subs	r0, r0, r3
 800ee50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee52:	b10b      	cbz	r3, 800ee58 <__sflush_r+0x48>
 800ee54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee56:	1ac0      	subs	r0, r0, r3
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee5e:	6a21      	ldr	r1, [r4, #32]
 800ee60:	4628      	mov	r0, r5
 800ee62:	47b0      	blx	r6
 800ee64:	1c43      	adds	r3, r0, #1
 800ee66:	89a3      	ldrh	r3, [r4, #12]
 800ee68:	d106      	bne.n	800ee78 <__sflush_r+0x68>
 800ee6a:	6829      	ldr	r1, [r5, #0]
 800ee6c:	291d      	cmp	r1, #29
 800ee6e:	d82b      	bhi.n	800eec8 <__sflush_r+0xb8>
 800ee70:	4a29      	ldr	r2, [pc, #164]	; (800ef18 <__sflush_r+0x108>)
 800ee72:	410a      	asrs	r2, r1
 800ee74:	07d6      	lsls	r6, r2, #31
 800ee76:	d427      	bmi.n	800eec8 <__sflush_r+0xb8>
 800ee78:	2200      	movs	r2, #0
 800ee7a:	6062      	str	r2, [r4, #4]
 800ee7c:	04d9      	lsls	r1, r3, #19
 800ee7e:	6922      	ldr	r2, [r4, #16]
 800ee80:	6022      	str	r2, [r4, #0]
 800ee82:	d504      	bpl.n	800ee8e <__sflush_r+0x7e>
 800ee84:	1c42      	adds	r2, r0, #1
 800ee86:	d101      	bne.n	800ee8c <__sflush_r+0x7c>
 800ee88:	682b      	ldr	r3, [r5, #0]
 800ee8a:	b903      	cbnz	r3, 800ee8e <__sflush_r+0x7e>
 800ee8c:	6560      	str	r0, [r4, #84]	; 0x54
 800ee8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee90:	602f      	str	r7, [r5, #0]
 800ee92:	2900      	cmp	r1, #0
 800ee94:	d0c9      	beq.n	800ee2a <__sflush_r+0x1a>
 800ee96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee9a:	4299      	cmp	r1, r3
 800ee9c:	d002      	beq.n	800eea4 <__sflush_r+0x94>
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f7ff fbce 	bl	800e640 <_free_r>
 800eea4:	2000      	movs	r0, #0
 800eea6:	6360      	str	r0, [r4, #52]	; 0x34
 800eea8:	e7c0      	b.n	800ee2c <__sflush_r+0x1c>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	4628      	mov	r0, r5
 800eeae:	47b0      	blx	r6
 800eeb0:	1c41      	adds	r1, r0, #1
 800eeb2:	d1c8      	bne.n	800ee46 <__sflush_r+0x36>
 800eeb4:	682b      	ldr	r3, [r5, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d0c5      	beq.n	800ee46 <__sflush_r+0x36>
 800eeba:	2b1d      	cmp	r3, #29
 800eebc:	d001      	beq.n	800eec2 <__sflush_r+0xb2>
 800eebe:	2b16      	cmp	r3, #22
 800eec0:	d101      	bne.n	800eec6 <__sflush_r+0xb6>
 800eec2:	602f      	str	r7, [r5, #0]
 800eec4:	e7b1      	b.n	800ee2a <__sflush_r+0x1a>
 800eec6:	89a3      	ldrh	r3, [r4, #12]
 800eec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eecc:	81a3      	strh	r3, [r4, #12]
 800eece:	e7ad      	b.n	800ee2c <__sflush_r+0x1c>
 800eed0:	690f      	ldr	r7, [r1, #16]
 800eed2:	2f00      	cmp	r7, #0
 800eed4:	d0a9      	beq.n	800ee2a <__sflush_r+0x1a>
 800eed6:	0793      	lsls	r3, r2, #30
 800eed8:	680e      	ldr	r6, [r1, #0]
 800eeda:	bf08      	it	eq
 800eedc:	694b      	ldreq	r3, [r1, #20]
 800eede:	600f      	str	r7, [r1, #0]
 800eee0:	bf18      	it	ne
 800eee2:	2300      	movne	r3, #0
 800eee4:	eba6 0807 	sub.w	r8, r6, r7
 800eee8:	608b      	str	r3, [r1, #8]
 800eeea:	f1b8 0f00 	cmp.w	r8, #0
 800eeee:	dd9c      	ble.n	800ee2a <__sflush_r+0x1a>
 800eef0:	6a21      	ldr	r1, [r4, #32]
 800eef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eef4:	4643      	mov	r3, r8
 800eef6:	463a      	mov	r2, r7
 800eef8:	4628      	mov	r0, r5
 800eefa:	47b0      	blx	r6
 800eefc:	2800      	cmp	r0, #0
 800eefe:	dc06      	bgt.n	800ef0e <__sflush_r+0xfe>
 800ef00:	89a3      	ldrh	r3, [r4, #12]
 800ef02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef06:	81a3      	strh	r3, [r4, #12]
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	e78e      	b.n	800ee2c <__sflush_r+0x1c>
 800ef0e:	4407      	add	r7, r0
 800ef10:	eba8 0800 	sub.w	r8, r8, r0
 800ef14:	e7e9      	b.n	800eeea <__sflush_r+0xda>
 800ef16:	bf00      	nop
 800ef18:	dfbffffe 	.word	0xdfbffffe

0800ef1c <_fflush_r>:
 800ef1c:	b538      	push	{r3, r4, r5, lr}
 800ef1e:	690b      	ldr	r3, [r1, #16]
 800ef20:	4605      	mov	r5, r0
 800ef22:	460c      	mov	r4, r1
 800ef24:	b913      	cbnz	r3, 800ef2c <_fflush_r+0x10>
 800ef26:	2500      	movs	r5, #0
 800ef28:	4628      	mov	r0, r5
 800ef2a:	bd38      	pop	{r3, r4, r5, pc}
 800ef2c:	b118      	cbz	r0, 800ef36 <_fflush_r+0x1a>
 800ef2e:	6a03      	ldr	r3, [r0, #32]
 800ef30:	b90b      	cbnz	r3, 800ef36 <_fflush_r+0x1a>
 800ef32:	f7ff f9dd 	bl	800e2f0 <__sinit>
 800ef36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d0f3      	beq.n	800ef26 <_fflush_r+0xa>
 800ef3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef40:	07d0      	lsls	r0, r2, #31
 800ef42:	d404      	bmi.n	800ef4e <_fflush_r+0x32>
 800ef44:	0599      	lsls	r1, r3, #22
 800ef46:	d402      	bmi.n	800ef4e <_fflush_r+0x32>
 800ef48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef4a:	f7ff fb51 	bl	800e5f0 <__retarget_lock_acquire_recursive>
 800ef4e:	4628      	mov	r0, r5
 800ef50:	4621      	mov	r1, r4
 800ef52:	f7ff ff5d 	bl	800ee10 <__sflush_r>
 800ef56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef58:	07da      	lsls	r2, r3, #31
 800ef5a:	4605      	mov	r5, r0
 800ef5c:	d4e4      	bmi.n	800ef28 <_fflush_r+0xc>
 800ef5e:	89a3      	ldrh	r3, [r4, #12]
 800ef60:	059b      	lsls	r3, r3, #22
 800ef62:	d4e1      	bmi.n	800ef28 <_fflush_r+0xc>
 800ef64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef66:	f7ff fb44 	bl	800e5f2 <__retarget_lock_release_recursive>
 800ef6a:	e7dd      	b.n	800ef28 <_fflush_r+0xc>

0800ef6c <fiprintf>:
 800ef6c:	b40e      	push	{r1, r2, r3}
 800ef6e:	b503      	push	{r0, r1, lr}
 800ef70:	4601      	mov	r1, r0
 800ef72:	ab03      	add	r3, sp, #12
 800ef74:	4805      	ldr	r0, [pc, #20]	; (800ef8c <fiprintf+0x20>)
 800ef76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef7a:	6800      	ldr	r0, [r0, #0]
 800ef7c:	9301      	str	r3, [sp, #4]
 800ef7e:	f000 f89f 	bl	800f0c0 <_vfiprintf_r>
 800ef82:	b002      	add	sp, #8
 800ef84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef88:	b003      	add	sp, #12
 800ef8a:	4770      	bx	lr
 800ef8c:	20000188 	.word	0x20000188

0800ef90 <memmove>:
 800ef90:	4288      	cmp	r0, r1
 800ef92:	b510      	push	{r4, lr}
 800ef94:	eb01 0402 	add.w	r4, r1, r2
 800ef98:	d902      	bls.n	800efa0 <memmove+0x10>
 800ef9a:	4284      	cmp	r4, r0
 800ef9c:	4623      	mov	r3, r4
 800ef9e:	d807      	bhi.n	800efb0 <memmove+0x20>
 800efa0:	1e43      	subs	r3, r0, #1
 800efa2:	42a1      	cmp	r1, r4
 800efa4:	d008      	beq.n	800efb8 <memmove+0x28>
 800efa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efae:	e7f8      	b.n	800efa2 <memmove+0x12>
 800efb0:	4402      	add	r2, r0
 800efb2:	4601      	mov	r1, r0
 800efb4:	428a      	cmp	r2, r1
 800efb6:	d100      	bne.n	800efba <memmove+0x2a>
 800efb8:	bd10      	pop	{r4, pc}
 800efba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efc2:	e7f7      	b.n	800efb4 <memmove+0x24>

0800efc4 <_sbrk_r>:
 800efc4:	b538      	push	{r3, r4, r5, lr}
 800efc6:	4d06      	ldr	r5, [pc, #24]	; (800efe0 <_sbrk_r+0x1c>)
 800efc8:	2300      	movs	r3, #0
 800efca:	4604      	mov	r4, r0
 800efcc:	4608      	mov	r0, r1
 800efce:	602b      	str	r3, [r5, #0]
 800efd0:	f7f3 fa98 	bl	8002504 <_sbrk>
 800efd4:	1c43      	adds	r3, r0, #1
 800efd6:	d102      	bne.n	800efde <_sbrk_r+0x1a>
 800efd8:	682b      	ldr	r3, [r5, #0]
 800efda:	b103      	cbz	r3, 800efde <_sbrk_r+0x1a>
 800efdc:	6023      	str	r3, [r4, #0]
 800efde:	bd38      	pop	{r3, r4, r5, pc}
 800efe0:	20003710 	.word	0x20003710

0800efe4 <memcpy>:
 800efe4:	440a      	add	r2, r1
 800efe6:	4291      	cmp	r1, r2
 800efe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800efec:	d100      	bne.n	800eff0 <memcpy+0xc>
 800efee:	4770      	bx	lr
 800eff0:	b510      	push	{r4, lr}
 800eff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800effa:	4291      	cmp	r1, r2
 800effc:	d1f9      	bne.n	800eff2 <memcpy+0xe>
 800effe:	bd10      	pop	{r4, pc}

0800f000 <abort>:
 800f000:	b508      	push	{r3, lr}
 800f002:	2006      	movs	r0, #6
 800f004:	f000 fa34 	bl	800f470 <raise>
 800f008:	2001      	movs	r0, #1
 800f00a:	f7f3 fa03 	bl	8002414 <_exit>

0800f00e <_realloc_r>:
 800f00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f012:	4680      	mov	r8, r0
 800f014:	4614      	mov	r4, r2
 800f016:	460e      	mov	r6, r1
 800f018:	b921      	cbnz	r1, 800f024 <_realloc_r+0x16>
 800f01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f01e:	4611      	mov	r1, r2
 800f020:	f7ff bb82 	b.w	800e728 <_malloc_r>
 800f024:	b92a      	cbnz	r2, 800f032 <_realloc_r+0x24>
 800f026:	f7ff fb0b 	bl	800e640 <_free_r>
 800f02a:	4625      	mov	r5, r4
 800f02c:	4628      	mov	r0, r5
 800f02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f032:	f000 fa39 	bl	800f4a8 <_malloc_usable_size_r>
 800f036:	4284      	cmp	r4, r0
 800f038:	4607      	mov	r7, r0
 800f03a:	d802      	bhi.n	800f042 <_realloc_r+0x34>
 800f03c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f040:	d812      	bhi.n	800f068 <_realloc_r+0x5a>
 800f042:	4621      	mov	r1, r4
 800f044:	4640      	mov	r0, r8
 800f046:	f7ff fb6f 	bl	800e728 <_malloc_r>
 800f04a:	4605      	mov	r5, r0
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d0ed      	beq.n	800f02c <_realloc_r+0x1e>
 800f050:	42bc      	cmp	r4, r7
 800f052:	4622      	mov	r2, r4
 800f054:	4631      	mov	r1, r6
 800f056:	bf28      	it	cs
 800f058:	463a      	movcs	r2, r7
 800f05a:	f7ff ffc3 	bl	800efe4 <memcpy>
 800f05e:	4631      	mov	r1, r6
 800f060:	4640      	mov	r0, r8
 800f062:	f7ff faed 	bl	800e640 <_free_r>
 800f066:	e7e1      	b.n	800f02c <_realloc_r+0x1e>
 800f068:	4635      	mov	r5, r6
 800f06a:	e7df      	b.n	800f02c <_realloc_r+0x1e>

0800f06c <__sfputc_r>:
 800f06c:	6893      	ldr	r3, [r2, #8]
 800f06e:	3b01      	subs	r3, #1
 800f070:	2b00      	cmp	r3, #0
 800f072:	b410      	push	{r4}
 800f074:	6093      	str	r3, [r2, #8]
 800f076:	da08      	bge.n	800f08a <__sfputc_r+0x1e>
 800f078:	6994      	ldr	r4, [r2, #24]
 800f07a:	42a3      	cmp	r3, r4
 800f07c:	db01      	blt.n	800f082 <__sfputc_r+0x16>
 800f07e:	290a      	cmp	r1, #10
 800f080:	d103      	bne.n	800f08a <__sfputc_r+0x1e>
 800f082:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f086:	f000 b935 	b.w	800f2f4 <__swbuf_r>
 800f08a:	6813      	ldr	r3, [r2, #0]
 800f08c:	1c58      	adds	r0, r3, #1
 800f08e:	6010      	str	r0, [r2, #0]
 800f090:	7019      	strb	r1, [r3, #0]
 800f092:	4608      	mov	r0, r1
 800f094:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f098:	4770      	bx	lr

0800f09a <__sfputs_r>:
 800f09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09c:	4606      	mov	r6, r0
 800f09e:	460f      	mov	r7, r1
 800f0a0:	4614      	mov	r4, r2
 800f0a2:	18d5      	adds	r5, r2, r3
 800f0a4:	42ac      	cmp	r4, r5
 800f0a6:	d101      	bne.n	800f0ac <__sfputs_r+0x12>
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	e007      	b.n	800f0bc <__sfputs_r+0x22>
 800f0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0b0:	463a      	mov	r2, r7
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	f7ff ffda 	bl	800f06c <__sfputc_r>
 800f0b8:	1c43      	adds	r3, r0, #1
 800f0ba:	d1f3      	bne.n	800f0a4 <__sfputs_r+0xa>
 800f0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f0c0 <_vfiprintf_r>:
 800f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c4:	460d      	mov	r5, r1
 800f0c6:	b09d      	sub	sp, #116	; 0x74
 800f0c8:	4614      	mov	r4, r2
 800f0ca:	4698      	mov	r8, r3
 800f0cc:	4606      	mov	r6, r0
 800f0ce:	b118      	cbz	r0, 800f0d8 <_vfiprintf_r+0x18>
 800f0d0:	6a03      	ldr	r3, [r0, #32]
 800f0d2:	b90b      	cbnz	r3, 800f0d8 <_vfiprintf_r+0x18>
 800f0d4:	f7ff f90c 	bl	800e2f0 <__sinit>
 800f0d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0da:	07d9      	lsls	r1, r3, #31
 800f0dc:	d405      	bmi.n	800f0ea <_vfiprintf_r+0x2a>
 800f0de:	89ab      	ldrh	r3, [r5, #12]
 800f0e0:	059a      	lsls	r2, r3, #22
 800f0e2:	d402      	bmi.n	800f0ea <_vfiprintf_r+0x2a>
 800f0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0e6:	f7ff fa83 	bl	800e5f0 <__retarget_lock_acquire_recursive>
 800f0ea:	89ab      	ldrh	r3, [r5, #12]
 800f0ec:	071b      	lsls	r3, r3, #28
 800f0ee:	d501      	bpl.n	800f0f4 <_vfiprintf_r+0x34>
 800f0f0:	692b      	ldr	r3, [r5, #16]
 800f0f2:	b99b      	cbnz	r3, 800f11c <_vfiprintf_r+0x5c>
 800f0f4:	4629      	mov	r1, r5
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f000 f93a 	bl	800f370 <__swsetup_r>
 800f0fc:	b170      	cbz	r0, 800f11c <_vfiprintf_r+0x5c>
 800f0fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f100:	07dc      	lsls	r4, r3, #31
 800f102:	d504      	bpl.n	800f10e <_vfiprintf_r+0x4e>
 800f104:	f04f 30ff 	mov.w	r0, #4294967295
 800f108:	b01d      	add	sp, #116	; 0x74
 800f10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10e:	89ab      	ldrh	r3, [r5, #12]
 800f110:	0598      	lsls	r0, r3, #22
 800f112:	d4f7      	bmi.n	800f104 <_vfiprintf_r+0x44>
 800f114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f116:	f7ff fa6c 	bl	800e5f2 <__retarget_lock_release_recursive>
 800f11a:	e7f3      	b.n	800f104 <_vfiprintf_r+0x44>
 800f11c:	2300      	movs	r3, #0
 800f11e:	9309      	str	r3, [sp, #36]	; 0x24
 800f120:	2320      	movs	r3, #32
 800f122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f126:	f8cd 800c 	str.w	r8, [sp, #12]
 800f12a:	2330      	movs	r3, #48	; 0x30
 800f12c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f2e0 <_vfiprintf_r+0x220>
 800f130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f134:	f04f 0901 	mov.w	r9, #1
 800f138:	4623      	mov	r3, r4
 800f13a:	469a      	mov	sl, r3
 800f13c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f140:	b10a      	cbz	r2, 800f146 <_vfiprintf_r+0x86>
 800f142:	2a25      	cmp	r2, #37	; 0x25
 800f144:	d1f9      	bne.n	800f13a <_vfiprintf_r+0x7a>
 800f146:	ebba 0b04 	subs.w	fp, sl, r4
 800f14a:	d00b      	beq.n	800f164 <_vfiprintf_r+0xa4>
 800f14c:	465b      	mov	r3, fp
 800f14e:	4622      	mov	r2, r4
 800f150:	4629      	mov	r1, r5
 800f152:	4630      	mov	r0, r6
 800f154:	f7ff ffa1 	bl	800f09a <__sfputs_r>
 800f158:	3001      	adds	r0, #1
 800f15a:	f000 80a9 	beq.w	800f2b0 <_vfiprintf_r+0x1f0>
 800f15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f160:	445a      	add	r2, fp
 800f162:	9209      	str	r2, [sp, #36]	; 0x24
 800f164:	f89a 3000 	ldrb.w	r3, [sl]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f000 80a1 	beq.w	800f2b0 <_vfiprintf_r+0x1f0>
 800f16e:	2300      	movs	r3, #0
 800f170:	f04f 32ff 	mov.w	r2, #4294967295
 800f174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f178:	f10a 0a01 	add.w	sl, sl, #1
 800f17c:	9304      	str	r3, [sp, #16]
 800f17e:	9307      	str	r3, [sp, #28]
 800f180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f184:	931a      	str	r3, [sp, #104]	; 0x68
 800f186:	4654      	mov	r4, sl
 800f188:	2205      	movs	r2, #5
 800f18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f18e:	4854      	ldr	r0, [pc, #336]	; (800f2e0 <_vfiprintf_r+0x220>)
 800f190:	f7f1 f83e 	bl	8000210 <memchr>
 800f194:	9a04      	ldr	r2, [sp, #16]
 800f196:	b9d8      	cbnz	r0, 800f1d0 <_vfiprintf_r+0x110>
 800f198:	06d1      	lsls	r1, r2, #27
 800f19a:	bf44      	itt	mi
 800f19c:	2320      	movmi	r3, #32
 800f19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1a2:	0713      	lsls	r3, r2, #28
 800f1a4:	bf44      	itt	mi
 800f1a6:	232b      	movmi	r3, #43	; 0x2b
 800f1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1b2:	d015      	beq.n	800f1e0 <_vfiprintf_r+0x120>
 800f1b4:	9a07      	ldr	r2, [sp, #28]
 800f1b6:	4654      	mov	r4, sl
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	f04f 0c0a 	mov.w	ip, #10
 800f1be:	4621      	mov	r1, r4
 800f1c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1c4:	3b30      	subs	r3, #48	; 0x30
 800f1c6:	2b09      	cmp	r3, #9
 800f1c8:	d94d      	bls.n	800f266 <_vfiprintf_r+0x1a6>
 800f1ca:	b1b0      	cbz	r0, 800f1fa <_vfiprintf_r+0x13a>
 800f1cc:	9207      	str	r2, [sp, #28]
 800f1ce:	e014      	b.n	800f1fa <_vfiprintf_r+0x13a>
 800f1d0:	eba0 0308 	sub.w	r3, r0, r8
 800f1d4:	fa09 f303 	lsl.w	r3, r9, r3
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	9304      	str	r3, [sp, #16]
 800f1dc:	46a2      	mov	sl, r4
 800f1de:	e7d2      	b.n	800f186 <_vfiprintf_r+0xc6>
 800f1e0:	9b03      	ldr	r3, [sp, #12]
 800f1e2:	1d19      	adds	r1, r3, #4
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	9103      	str	r1, [sp, #12]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	bfbb      	ittet	lt
 800f1ec:	425b      	neglt	r3, r3
 800f1ee:	f042 0202 	orrlt.w	r2, r2, #2
 800f1f2:	9307      	strge	r3, [sp, #28]
 800f1f4:	9307      	strlt	r3, [sp, #28]
 800f1f6:	bfb8      	it	lt
 800f1f8:	9204      	strlt	r2, [sp, #16]
 800f1fa:	7823      	ldrb	r3, [r4, #0]
 800f1fc:	2b2e      	cmp	r3, #46	; 0x2e
 800f1fe:	d10c      	bne.n	800f21a <_vfiprintf_r+0x15a>
 800f200:	7863      	ldrb	r3, [r4, #1]
 800f202:	2b2a      	cmp	r3, #42	; 0x2a
 800f204:	d134      	bne.n	800f270 <_vfiprintf_r+0x1b0>
 800f206:	9b03      	ldr	r3, [sp, #12]
 800f208:	1d1a      	adds	r2, r3, #4
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	9203      	str	r2, [sp, #12]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	bfb8      	it	lt
 800f212:	f04f 33ff 	movlt.w	r3, #4294967295
 800f216:	3402      	adds	r4, #2
 800f218:	9305      	str	r3, [sp, #20]
 800f21a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f2f0 <_vfiprintf_r+0x230>
 800f21e:	7821      	ldrb	r1, [r4, #0]
 800f220:	2203      	movs	r2, #3
 800f222:	4650      	mov	r0, sl
 800f224:	f7f0 fff4 	bl	8000210 <memchr>
 800f228:	b138      	cbz	r0, 800f23a <_vfiprintf_r+0x17a>
 800f22a:	9b04      	ldr	r3, [sp, #16]
 800f22c:	eba0 000a 	sub.w	r0, r0, sl
 800f230:	2240      	movs	r2, #64	; 0x40
 800f232:	4082      	lsls	r2, r0
 800f234:	4313      	orrs	r3, r2
 800f236:	3401      	adds	r4, #1
 800f238:	9304      	str	r3, [sp, #16]
 800f23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f23e:	4829      	ldr	r0, [pc, #164]	; (800f2e4 <_vfiprintf_r+0x224>)
 800f240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f244:	2206      	movs	r2, #6
 800f246:	f7f0 ffe3 	bl	8000210 <memchr>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d03f      	beq.n	800f2ce <_vfiprintf_r+0x20e>
 800f24e:	4b26      	ldr	r3, [pc, #152]	; (800f2e8 <_vfiprintf_r+0x228>)
 800f250:	bb1b      	cbnz	r3, 800f29a <_vfiprintf_r+0x1da>
 800f252:	9b03      	ldr	r3, [sp, #12]
 800f254:	3307      	adds	r3, #7
 800f256:	f023 0307 	bic.w	r3, r3, #7
 800f25a:	3308      	adds	r3, #8
 800f25c:	9303      	str	r3, [sp, #12]
 800f25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f260:	443b      	add	r3, r7
 800f262:	9309      	str	r3, [sp, #36]	; 0x24
 800f264:	e768      	b.n	800f138 <_vfiprintf_r+0x78>
 800f266:	fb0c 3202 	mla	r2, ip, r2, r3
 800f26a:	460c      	mov	r4, r1
 800f26c:	2001      	movs	r0, #1
 800f26e:	e7a6      	b.n	800f1be <_vfiprintf_r+0xfe>
 800f270:	2300      	movs	r3, #0
 800f272:	3401      	adds	r4, #1
 800f274:	9305      	str	r3, [sp, #20]
 800f276:	4619      	mov	r1, r3
 800f278:	f04f 0c0a 	mov.w	ip, #10
 800f27c:	4620      	mov	r0, r4
 800f27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f282:	3a30      	subs	r2, #48	; 0x30
 800f284:	2a09      	cmp	r2, #9
 800f286:	d903      	bls.n	800f290 <_vfiprintf_r+0x1d0>
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d0c6      	beq.n	800f21a <_vfiprintf_r+0x15a>
 800f28c:	9105      	str	r1, [sp, #20]
 800f28e:	e7c4      	b.n	800f21a <_vfiprintf_r+0x15a>
 800f290:	fb0c 2101 	mla	r1, ip, r1, r2
 800f294:	4604      	mov	r4, r0
 800f296:	2301      	movs	r3, #1
 800f298:	e7f0      	b.n	800f27c <_vfiprintf_r+0x1bc>
 800f29a:	ab03      	add	r3, sp, #12
 800f29c:	9300      	str	r3, [sp, #0]
 800f29e:	462a      	mov	r2, r5
 800f2a0:	4b12      	ldr	r3, [pc, #72]	; (800f2ec <_vfiprintf_r+0x22c>)
 800f2a2:	a904      	add	r1, sp, #16
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	f3af 8000 	nop.w
 800f2aa:	4607      	mov	r7, r0
 800f2ac:	1c78      	adds	r0, r7, #1
 800f2ae:	d1d6      	bne.n	800f25e <_vfiprintf_r+0x19e>
 800f2b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2b2:	07d9      	lsls	r1, r3, #31
 800f2b4:	d405      	bmi.n	800f2c2 <_vfiprintf_r+0x202>
 800f2b6:	89ab      	ldrh	r3, [r5, #12]
 800f2b8:	059a      	lsls	r2, r3, #22
 800f2ba:	d402      	bmi.n	800f2c2 <_vfiprintf_r+0x202>
 800f2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2be:	f7ff f998 	bl	800e5f2 <__retarget_lock_release_recursive>
 800f2c2:	89ab      	ldrh	r3, [r5, #12]
 800f2c4:	065b      	lsls	r3, r3, #25
 800f2c6:	f53f af1d 	bmi.w	800f104 <_vfiprintf_r+0x44>
 800f2ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2cc:	e71c      	b.n	800f108 <_vfiprintf_r+0x48>
 800f2ce:	ab03      	add	r3, sp, #12
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	462a      	mov	r2, r5
 800f2d4:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <_vfiprintf_r+0x22c>)
 800f2d6:	a904      	add	r1, sp, #16
 800f2d8:	4630      	mov	r0, r6
 800f2da:	f7ff fc77 	bl	800ebcc <_printf_i>
 800f2de:	e7e4      	b.n	800f2aa <_vfiprintf_r+0x1ea>
 800f2e0:	0800fc96 	.word	0x0800fc96
 800f2e4:	0800fca0 	.word	0x0800fca0
 800f2e8:	00000000 	.word	0x00000000
 800f2ec:	0800f09b 	.word	0x0800f09b
 800f2f0:	0800fc9c 	.word	0x0800fc9c

0800f2f4 <__swbuf_r>:
 800f2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2f6:	460e      	mov	r6, r1
 800f2f8:	4614      	mov	r4, r2
 800f2fa:	4605      	mov	r5, r0
 800f2fc:	b118      	cbz	r0, 800f306 <__swbuf_r+0x12>
 800f2fe:	6a03      	ldr	r3, [r0, #32]
 800f300:	b90b      	cbnz	r3, 800f306 <__swbuf_r+0x12>
 800f302:	f7fe fff5 	bl	800e2f0 <__sinit>
 800f306:	69a3      	ldr	r3, [r4, #24]
 800f308:	60a3      	str	r3, [r4, #8]
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	071a      	lsls	r2, r3, #28
 800f30e:	d525      	bpl.n	800f35c <__swbuf_r+0x68>
 800f310:	6923      	ldr	r3, [r4, #16]
 800f312:	b31b      	cbz	r3, 800f35c <__swbuf_r+0x68>
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	6922      	ldr	r2, [r4, #16]
 800f318:	1a98      	subs	r0, r3, r2
 800f31a:	6963      	ldr	r3, [r4, #20]
 800f31c:	b2f6      	uxtb	r6, r6
 800f31e:	4283      	cmp	r3, r0
 800f320:	4637      	mov	r7, r6
 800f322:	dc04      	bgt.n	800f32e <__swbuf_r+0x3a>
 800f324:	4621      	mov	r1, r4
 800f326:	4628      	mov	r0, r5
 800f328:	f7ff fdf8 	bl	800ef1c <_fflush_r>
 800f32c:	b9e0      	cbnz	r0, 800f368 <__swbuf_r+0x74>
 800f32e:	68a3      	ldr	r3, [r4, #8]
 800f330:	3b01      	subs	r3, #1
 800f332:	60a3      	str	r3, [r4, #8]
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	1c5a      	adds	r2, r3, #1
 800f338:	6022      	str	r2, [r4, #0]
 800f33a:	701e      	strb	r6, [r3, #0]
 800f33c:	6962      	ldr	r2, [r4, #20]
 800f33e:	1c43      	adds	r3, r0, #1
 800f340:	429a      	cmp	r2, r3
 800f342:	d004      	beq.n	800f34e <__swbuf_r+0x5a>
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	07db      	lsls	r3, r3, #31
 800f348:	d506      	bpl.n	800f358 <__swbuf_r+0x64>
 800f34a:	2e0a      	cmp	r6, #10
 800f34c:	d104      	bne.n	800f358 <__swbuf_r+0x64>
 800f34e:	4621      	mov	r1, r4
 800f350:	4628      	mov	r0, r5
 800f352:	f7ff fde3 	bl	800ef1c <_fflush_r>
 800f356:	b938      	cbnz	r0, 800f368 <__swbuf_r+0x74>
 800f358:	4638      	mov	r0, r7
 800f35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f35c:	4621      	mov	r1, r4
 800f35e:	4628      	mov	r0, r5
 800f360:	f000 f806 	bl	800f370 <__swsetup_r>
 800f364:	2800      	cmp	r0, #0
 800f366:	d0d5      	beq.n	800f314 <__swbuf_r+0x20>
 800f368:	f04f 37ff 	mov.w	r7, #4294967295
 800f36c:	e7f4      	b.n	800f358 <__swbuf_r+0x64>
	...

0800f370 <__swsetup_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	4b2a      	ldr	r3, [pc, #168]	; (800f41c <__swsetup_r+0xac>)
 800f374:	4605      	mov	r5, r0
 800f376:	6818      	ldr	r0, [r3, #0]
 800f378:	460c      	mov	r4, r1
 800f37a:	b118      	cbz	r0, 800f384 <__swsetup_r+0x14>
 800f37c:	6a03      	ldr	r3, [r0, #32]
 800f37e:	b90b      	cbnz	r3, 800f384 <__swsetup_r+0x14>
 800f380:	f7fe ffb6 	bl	800e2f0 <__sinit>
 800f384:	89a3      	ldrh	r3, [r4, #12]
 800f386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f38a:	0718      	lsls	r0, r3, #28
 800f38c:	d422      	bmi.n	800f3d4 <__swsetup_r+0x64>
 800f38e:	06d9      	lsls	r1, r3, #27
 800f390:	d407      	bmi.n	800f3a2 <__swsetup_r+0x32>
 800f392:	2309      	movs	r3, #9
 800f394:	602b      	str	r3, [r5, #0]
 800f396:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f39a:	81a3      	strh	r3, [r4, #12]
 800f39c:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a0:	e034      	b.n	800f40c <__swsetup_r+0x9c>
 800f3a2:	0758      	lsls	r0, r3, #29
 800f3a4:	d512      	bpl.n	800f3cc <__swsetup_r+0x5c>
 800f3a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3a8:	b141      	cbz	r1, 800f3bc <__swsetup_r+0x4c>
 800f3aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3ae:	4299      	cmp	r1, r3
 800f3b0:	d002      	beq.n	800f3b8 <__swsetup_r+0x48>
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f7ff f944 	bl	800e640 <_free_r>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	6363      	str	r3, [r4, #52]	; 0x34
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3c2:	81a3      	strh	r3, [r4, #12]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	6063      	str	r3, [r4, #4]
 800f3c8:	6923      	ldr	r3, [r4, #16]
 800f3ca:	6023      	str	r3, [r4, #0]
 800f3cc:	89a3      	ldrh	r3, [r4, #12]
 800f3ce:	f043 0308 	orr.w	r3, r3, #8
 800f3d2:	81a3      	strh	r3, [r4, #12]
 800f3d4:	6923      	ldr	r3, [r4, #16]
 800f3d6:	b94b      	cbnz	r3, 800f3ec <__swsetup_r+0x7c>
 800f3d8:	89a3      	ldrh	r3, [r4, #12]
 800f3da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3e2:	d003      	beq.n	800f3ec <__swsetup_r+0x7c>
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f000 f88c 	bl	800f504 <__smakebuf_r>
 800f3ec:	89a0      	ldrh	r0, [r4, #12]
 800f3ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3f2:	f010 0301 	ands.w	r3, r0, #1
 800f3f6:	d00a      	beq.n	800f40e <__swsetup_r+0x9e>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	60a3      	str	r3, [r4, #8]
 800f3fc:	6963      	ldr	r3, [r4, #20]
 800f3fe:	425b      	negs	r3, r3
 800f400:	61a3      	str	r3, [r4, #24]
 800f402:	6923      	ldr	r3, [r4, #16]
 800f404:	b943      	cbnz	r3, 800f418 <__swsetup_r+0xa8>
 800f406:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f40a:	d1c4      	bne.n	800f396 <__swsetup_r+0x26>
 800f40c:	bd38      	pop	{r3, r4, r5, pc}
 800f40e:	0781      	lsls	r1, r0, #30
 800f410:	bf58      	it	pl
 800f412:	6963      	ldrpl	r3, [r4, #20]
 800f414:	60a3      	str	r3, [r4, #8]
 800f416:	e7f4      	b.n	800f402 <__swsetup_r+0x92>
 800f418:	2000      	movs	r0, #0
 800f41a:	e7f7      	b.n	800f40c <__swsetup_r+0x9c>
 800f41c:	20000188 	.word	0x20000188

0800f420 <_raise_r>:
 800f420:	291f      	cmp	r1, #31
 800f422:	b538      	push	{r3, r4, r5, lr}
 800f424:	4604      	mov	r4, r0
 800f426:	460d      	mov	r5, r1
 800f428:	d904      	bls.n	800f434 <_raise_r+0x14>
 800f42a:	2316      	movs	r3, #22
 800f42c:	6003      	str	r3, [r0, #0]
 800f42e:	f04f 30ff 	mov.w	r0, #4294967295
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f436:	b112      	cbz	r2, 800f43e <_raise_r+0x1e>
 800f438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f43c:	b94b      	cbnz	r3, 800f452 <_raise_r+0x32>
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 f830 	bl	800f4a4 <_getpid_r>
 800f444:	462a      	mov	r2, r5
 800f446:	4601      	mov	r1, r0
 800f448:	4620      	mov	r0, r4
 800f44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f44e:	f000 b817 	b.w	800f480 <_kill_r>
 800f452:	2b01      	cmp	r3, #1
 800f454:	d00a      	beq.n	800f46c <_raise_r+0x4c>
 800f456:	1c59      	adds	r1, r3, #1
 800f458:	d103      	bne.n	800f462 <_raise_r+0x42>
 800f45a:	2316      	movs	r3, #22
 800f45c:	6003      	str	r3, [r0, #0]
 800f45e:	2001      	movs	r0, #1
 800f460:	e7e7      	b.n	800f432 <_raise_r+0x12>
 800f462:	2400      	movs	r4, #0
 800f464:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f468:	4628      	mov	r0, r5
 800f46a:	4798      	blx	r3
 800f46c:	2000      	movs	r0, #0
 800f46e:	e7e0      	b.n	800f432 <_raise_r+0x12>

0800f470 <raise>:
 800f470:	4b02      	ldr	r3, [pc, #8]	; (800f47c <raise+0xc>)
 800f472:	4601      	mov	r1, r0
 800f474:	6818      	ldr	r0, [r3, #0]
 800f476:	f7ff bfd3 	b.w	800f420 <_raise_r>
 800f47a:	bf00      	nop
 800f47c:	20000188 	.word	0x20000188

0800f480 <_kill_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4d07      	ldr	r5, [pc, #28]	; (800f4a0 <_kill_r+0x20>)
 800f484:	2300      	movs	r3, #0
 800f486:	4604      	mov	r4, r0
 800f488:	4608      	mov	r0, r1
 800f48a:	4611      	mov	r1, r2
 800f48c:	602b      	str	r3, [r5, #0]
 800f48e:	f7f2 ffb1 	bl	80023f4 <_kill>
 800f492:	1c43      	adds	r3, r0, #1
 800f494:	d102      	bne.n	800f49c <_kill_r+0x1c>
 800f496:	682b      	ldr	r3, [r5, #0]
 800f498:	b103      	cbz	r3, 800f49c <_kill_r+0x1c>
 800f49a:	6023      	str	r3, [r4, #0]
 800f49c:	bd38      	pop	{r3, r4, r5, pc}
 800f49e:	bf00      	nop
 800f4a0:	20003710 	.word	0x20003710

0800f4a4 <_getpid_r>:
 800f4a4:	f7f2 bf9e 	b.w	80023e4 <_getpid>

0800f4a8 <_malloc_usable_size_r>:
 800f4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4ac:	1f18      	subs	r0, r3, #4
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	bfbc      	itt	lt
 800f4b2:	580b      	ldrlt	r3, [r1, r0]
 800f4b4:	18c0      	addlt	r0, r0, r3
 800f4b6:	4770      	bx	lr

0800f4b8 <__swhatbuf_r>:
 800f4b8:	b570      	push	{r4, r5, r6, lr}
 800f4ba:	460c      	mov	r4, r1
 800f4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4c0:	2900      	cmp	r1, #0
 800f4c2:	b096      	sub	sp, #88	; 0x58
 800f4c4:	4615      	mov	r5, r2
 800f4c6:	461e      	mov	r6, r3
 800f4c8:	da0d      	bge.n	800f4e6 <__swhatbuf_r+0x2e>
 800f4ca:	89a3      	ldrh	r3, [r4, #12]
 800f4cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f4d0:	f04f 0100 	mov.w	r1, #0
 800f4d4:	bf0c      	ite	eq
 800f4d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f4da:	2340      	movne	r3, #64	; 0x40
 800f4dc:	2000      	movs	r0, #0
 800f4de:	6031      	str	r1, [r6, #0]
 800f4e0:	602b      	str	r3, [r5, #0]
 800f4e2:	b016      	add	sp, #88	; 0x58
 800f4e4:	bd70      	pop	{r4, r5, r6, pc}
 800f4e6:	466a      	mov	r2, sp
 800f4e8:	f000 f848 	bl	800f57c <_fstat_r>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	dbec      	blt.n	800f4ca <__swhatbuf_r+0x12>
 800f4f0:	9901      	ldr	r1, [sp, #4]
 800f4f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f4f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f4fa:	4259      	negs	r1, r3
 800f4fc:	4159      	adcs	r1, r3
 800f4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f502:	e7eb      	b.n	800f4dc <__swhatbuf_r+0x24>

0800f504 <__smakebuf_r>:
 800f504:	898b      	ldrh	r3, [r1, #12]
 800f506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f508:	079d      	lsls	r5, r3, #30
 800f50a:	4606      	mov	r6, r0
 800f50c:	460c      	mov	r4, r1
 800f50e:	d507      	bpl.n	800f520 <__smakebuf_r+0x1c>
 800f510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f514:	6023      	str	r3, [r4, #0]
 800f516:	6123      	str	r3, [r4, #16]
 800f518:	2301      	movs	r3, #1
 800f51a:	6163      	str	r3, [r4, #20]
 800f51c:	b002      	add	sp, #8
 800f51e:	bd70      	pop	{r4, r5, r6, pc}
 800f520:	ab01      	add	r3, sp, #4
 800f522:	466a      	mov	r2, sp
 800f524:	f7ff ffc8 	bl	800f4b8 <__swhatbuf_r>
 800f528:	9900      	ldr	r1, [sp, #0]
 800f52a:	4605      	mov	r5, r0
 800f52c:	4630      	mov	r0, r6
 800f52e:	f7ff f8fb 	bl	800e728 <_malloc_r>
 800f532:	b948      	cbnz	r0, 800f548 <__smakebuf_r+0x44>
 800f534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f538:	059a      	lsls	r2, r3, #22
 800f53a:	d4ef      	bmi.n	800f51c <__smakebuf_r+0x18>
 800f53c:	f023 0303 	bic.w	r3, r3, #3
 800f540:	f043 0302 	orr.w	r3, r3, #2
 800f544:	81a3      	strh	r3, [r4, #12]
 800f546:	e7e3      	b.n	800f510 <__smakebuf_r+0xc>
 800f548:	89a3      	ldrh	r3, [r4, #12]
 800f54a:	6020      	str	r0, [r4, #0]
 800f54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f550:	81a3      	strh	r3, [r4, #12]
 800f552:	9b00      	ldr	r3, [sp, #0]
 800f554:	6163      	str	r3, [r4, #20]
 800f556:	9b01      	ldr	r3, [sp, #4]
 800f558:	6120      	str	r0, [r4, #16]
 800f55a:	b15b      	cbz	r3, 800f574 <__smakebuf_r+0x70>
 800f55c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f560:	4630      	mov	r0, r6
 800f562:	f000 f81d 	bl	800f5a0 <_isatty_r>
 800f566:	b128      	cbz	r0, 800f574 <__smakebuf_r+0x70>
 800f568:	89a3      	ldrh	r3, [r4, #12]
 800f56a:	f023 0303 	bic.w	r3, r3, #3
 800f56e:	f043 0301 	orr.w	r3, r3, #1
 800f572:	81a3      	strh	r3, [r4, #12]
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	431d      	orrs	r5, r3
 800f578:	81a5      	strh	r5, [r4, #12]
 800f57a:	e7cf      	b.n	800f51c <__smakebuf_r+0x18>

0800f57c <_fstat_r>:
 800f57c:	b538      	push	{r3, r4, r5, lr}
 800f57e:	4d07      	ldr	r5, [pc, #28]	; (800f59c <_fstat_r+0x20>)
 800f580:	2300      	movs	r3, #0
 800f582:	4604      	mov	r4, r0
 800f584:	4608      	mov	r0, r1
 800f586:	4611      	mov	r1, r2
 800f588:	602b      	str	r3, [r5, #0]
 800f58a:	f7f2 ff92 	bl	80024b2 <_fstat>
 800f58e:	1c43      	adds	r3, r0, #1
 800f590:	d102      	bne.n	800f598 <_fstat_r+0x1c>
 800f592:	682b      	ldr	r3, [r5, #0]
 800f594:	b103      	cbz	r3, 800f598 <_fstat_r+0x1c>
 800f596:	6023      	str	r3, [r4, #0]
 800f598:	bd38      	pop	{r3, r4, r5, pc}
 800f59a:	bf00      	nop
 800f59c:	20003710 	.word	0x20003710

0800f5a0 <_isatty_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d06      	ldr	r5, [pc, #24]	; (800f5bc <_isatty_r+0x1c>)
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	4608      	mov	r0, r1
 800f5aa:	602b      	str	r3, [r5, #0]
 800f5ac:	f7f2 ff91 	bl	80024d2 <_isatty>
 800f5b0:	1c43      	adds	r3, r0, #1
 800f5b2:	d102      	bne.n	800f5ba <_isatty_r+0x1a>
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	b103      	cbz	r3, 800f5ba <_isatty_r+0x1a>
 800f5b8:	6023      	str	r3, [r4, #0]
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
 800f5bc:	20003710 	.word	0x20003710

0800f5c0 <_init>:
 800f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c2:	bf00      	nop
 800f5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5c6:	bc08      	pop	{r3}
 800f5c8:	469e      	mov	lr, r3
 800f5ca:	4770      	bx	lr

0800f5cc <_fini>:
 800f5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ce:	bf00      	nop
 800f5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5d2:	bc08      	pop	{r3}
 800f5d4:	469e      	mov	lr, r3
 800f5d6:	4770      	bx	lr
