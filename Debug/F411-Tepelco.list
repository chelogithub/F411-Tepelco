
F411-Tepelco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  08010690  08010690  00020690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011198  08011198  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  08011198  08011198  00021198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111a0  080111a0  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111a0  080111a0  000211a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080111a4  080111a4  000211a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  080111a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000403c  20000178  08011320  00030178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041b4  08011320  000341b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a80  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000309a  00000000  00000000  00045c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00048d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e41  00000000  00000000  00049ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001885c  00000000  00000000  0004ace1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180d5  00000000  00000000  0006353d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a8e  00000000  00000000  0007b612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005684  00000000  00000000  0010f0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00114724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010678 	.word	0x08010678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	08010678 	.word	0x08010678

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b0a0      	sub	sp, #128	; 0x80
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bce      	ldr	r3, [pc, #824]	; (80009d8 <main+0x344>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcc      	ldr	r3, [pc, #816]	; (80009d8 <main+0x344>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bc9      	ldr	r3, [pc, #804]	; (80009d8 <main+0x344>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc7      	ldr	r3, [pc, #796]	; (80009d8 <main+0x344>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc4      	ldr	r3, [pc, #784]	; (80009d8 <main+0x344>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc1      	ldr	r3, [pc, #772]	; (80009d8 <main+0x344>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbe      	ldr	r3, [pc, #760]	; (80009d8 <main+0x344>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbb      	ldr	r3, [pc, #748]	; (80009d8 <main+0x344>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb8      	ldr	r3, [pc, #736]	; (80009d8 <main+0x344>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb5      	ldr	r3, [pc, #724]	; (80009d8 <main+0x344>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb2      	ldr	r3, [pc, #712]	; (80009d8 <main+0x344>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4baf      	ldr	r3, [pc, #700]	; (80009d8 <main+0x344>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bac      	ldr	r3, [pc, #688]	; (80009d8 <main+0x344>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4ba9      	ldr	r3, [pc, #676]	; (80009d8 <main+0x344>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba6      	ldr	r3, [pc, #664]	; (80009d8 <main+0x344>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba3      	ldr	r3, [pc, #652]	; (80009d8 <main+0x344>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba0      	ldr	r3, [pc, #640]	; (80009d8 <main+0x344>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000760:	4b9d      	ldr	r3, [pc, #628]	; (80009d8 <main+0x344>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2206      	movs	r2, #6
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9a      	ldr	r3, [pc, #616]	; (80009d8 <main+0x344>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000778:	4b97      	ldr	r3, [pc, #604]	; (80009d8 <main+0x344>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b94      	ldr	r3, [pc, #592]	; (80009d8 <main+0x344>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b91      	ldr	r3, [pc, #580]	; (80009d8 <main+0x344>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8e      	ldr	r3, [pc, #568]	; (80009d8 <main+0x344>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8b      	ldr	r3, [pc, #556]	; (80009d8 <main+0x344>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b88      	ldr	r3, [pc, #544]	; (80009d8 <main+0x344>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b85      	ldr	r3, [pc, #532]	; (80009d8 <main+0x344>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b82      	ldr	r3, [pc, #520]	; (80009d8 <main+0x344>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b7f      	ldr	r3, [pc, #508]	; (80009d8 <main+0x344>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7c      	ldr	r3, [pc, #496]	; (80009d8 <main+0x344>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b79      	ldr	r3, [pc, #484]	; (80009d8 <main+0x344>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b75      	ldr	r3, [pc, #468]	; (80009d8 <main+0x344>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b72      	ldr	r3, [pc, #456]	; (80009d8 <main+0x344>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6e      	ldr	r3, [pc, #440]	; (80009d8 <main+0x344>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6b      	ldr	r3, [pc, #428]	; (80009d8 <main+0x344>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <main+0x344>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b64      	ldr	r3, [pc, #400]	; (80009d8 <main+0x344>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b60      	ldr	r3, [pc, #384]	; (80009d8 <main+0x344>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5d      	ldr	r3, [pc, #372]	; (80009d8 <main+0x344>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <main+0x344>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b56      	ldr	r3, [pc, #344]	; (80009d8 <main+0x344>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <main+0x344>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <main+0x344>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <main+0x344>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b48      	ldr	r3, [pc, #288]	; (80009d8 <main+0x344>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <main+0x344>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4842      	ldr	r0, [pc, #264]	; (80009dc <main+0x348>)
 80008d2:	f005 ff95 	bl	8006800 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008d6:	4942      	ldr	r1, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d8:	4842      	ldr	r0, [pc, #264]	; (80009e4 <main+0x350>)
 80008da:	f00e fee7 	bl	800f6ac <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008de:	4942      	ldr	r1, [pc, #264]	; (80009e8 <main+0x354>)
 80008e0:	4842      	ldr	r0, [pc, #264]	; (80009ec <main+0x358>)
 80008e2:	f00e fee3 	bl	800f6ac <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008e6:	4942      	ldr	r1, [pc, #264]	; (80009f0 <main+0x35c>)
 80008e8:	4842      	ldr	r0, [pc, #264]	; (80009f4 <main+0x360>)
 80008ea:	f00e fedf 	bl	800f6ac <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008ee:	4942      	ldr	r1, [pc, #264]	; (80009f8 <main+0x364>)
 80008f0:	4842      	ldr	r0, [pc, #264]	; (80009fc <main+0x368>)
 80008f2:	f00e fedb 	bl	800f6ac <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008f6:	4942      	ldr	r1, [pc, #264]	; (8000a00 <main+0x36c>)
 80008f8:	4842      	ldr	r0, [pc, #264]	; (8000a04 <main+0x370>)
 80008fa:	f00e fed7 	bl	800f6ac <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80008fe:	4942      	ldr	r1, [pc, #264]	; (8000a08 <main+0x374>)
 8000900:	4842      	ldr	r0, [pc, #264]	; (8000a0c <main+0x378>)
 8000902:	f00e fed3 	bl	800f6ac <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000906:	4942      	ldr	r1, [pc, #264]	; (8000a10 <main+0x37c>)
 8000908:	4842      	ldr	r0, [pc, #264]	; (8000a14 <main+0x380>)
 800090a:	f00e fecf 	bl	800f6ac <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800090e:	4942      	ldr	r1, [pc, #264]	; (8000a18 <main+0x384>)
 8000910:	4842      	ldr	r0, [pc, #264]	; (8000a1c <main+0x388>)
 8000912:	f00e fecb 	bl	800f6ac <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <main+0x348>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <main+0x348>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <main+0x348>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <main+0x348>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <main+0x348>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <main+0x348>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <main+0x348>)
 8000948:	2206      	movs	r2, #6
 800094a:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <main+0x348>)
 8000950:	2201      	movs	r2, #1
 8000952:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <main+0x348>)
 8000958:	2203      	movs	r2, #3
 800095a:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <main+0x348>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <main+0x348>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <main+0x348>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <main+0x348>)
 8000978:	220a      	movs	r2, #10
 800097a:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <main+0x348>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <main+0x348>)
 8000988:	2233      	movs	r2, #51	; 0x33
 800098a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <main+0x348>)
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <main+0x348>)
 8000998:	2235      	movs	r2, #53	; 0x35
 800099a:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <main+0x348>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <main+0x348>)
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <main+0x348>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <main+0x348>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <main+0x38c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <main+0x344>)
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <main+0x390>)
 80009c8:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009ca:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <main+0x344>)
 80009cc:	2210      	movs	r2, #16
 80009ce:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d0:	4b01      	ldr	r3, [pc, #4]	; (80009d8 <main+0x344>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <main+0x394>)
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e029      	b.n	8000a2c <main+0x398>
 80009d8:	20002954 	.word	0x20002954
 80009dc:	20000b58 	.word	0x20000b58
 80009e0:	20000024 	.word	0x20000024
 80009e4:	20000b5e 	.word	0x20000b5e
 80009e8:	2000002c 	.word	0x2000002c
 80009ec:	20000b7e 	.word	0x20000b7e
 80009f0:	20000038 	.word	0x20000038
 80009f4:	20000b8e 	.word	0x20000b8e
 80009f8:	20000048 	.word	0x20000048
 80009fc:	20000b9e 	.word	0x20000b9e
 8000a00:	20000050 	.word	0x20000050
 8000a04:	20000ba4 	.word	0x20000ba4
 8000a08:	20000060 	.word	0x20000060
 8000a0c:	20000bba 	.word	0x20000bba
 8000a10:	20000070 	.word	0x20000070
 8000a14:	20000bca 	.word	0x20000bca
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	20000bb4 	.word	0x20000bb4
 8000a20:	20003a04 	.word	0x20003a04
 8000a24:	40020000 	.word	0x40020000
 8000a28:	20000194 	.word	0x20000194

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a2c:	484e      	ldr	r0, [pc, #312]	; (8000b68 <main+0x4d4>)
 8000a2e:	f00b ffdb 	bl	800c9e8 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a32:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <main+0x4d4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a38:	484c      	ldr	r0, [pc, #304]	; (8000b6c <main+0x4d8>)
 8000a3a:	f00b ffd5 	bl	800c9e8 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a3e:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <main+0x4d8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a44:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a48:	2103      	movs	r1, #3
 8000a4a:	4848      	ldr	r0, [pc, #288]	; (8000b6c <main+0x4d8>)
 8000a4c:	f00c f86f 	bl	800cb2e <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f002 f86e 	bl	8002b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 faf4 	bl	8001040 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a58:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <main+0x4dc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <main+0x4e0>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	099b      	lsrs	r3, r3, #6
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fdcb 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6a:	f000 fcfb 	bl	8001464 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a6e:	f000 fb4f 	bl	8001110 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a72:	f000 fc79 	bl	8001368 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a76:	f000 fca1 	bl	80013bc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a7a:	f000 fcc9 	bl	8001410 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a7e:	f000 fb7d 	bl	800117c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a82:	f000 fbf5 	bl	8001270 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	483b      	ldr	r0, [pc, #236]	; (8000b78 <main+0x4e4>)
 8000a8c:	f002 fd24 	bl	80034d8 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a90:	210e      	movs	r1, #14
 8000a92:	483a      	ldr	r0, [pc, #232]	; (8000b7c <main+0x4e8>)
 8000a94:	f000 fd6e 	bl	8001574 <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000a98:	f001 fc5e 	bl	8002358 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000a9c:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <main+0x4ec>)
 8000a9e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <main+0x41a>
 8000aa6:	2113      	movs	r1, #19
 8000aa8:	4836      	ldr	r0, [pc, #216]	; (8000b84 <main+0x4f0>)
 8000aaa:	f000 fd63 	bl	8001574 <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4935      	ldr	r1, [pc, #212]	; (8000b88 <main+0x4f4>)
 8000ab2:	4836      	ldr	r0, [pc, #216]	; (8000b8c <main+0x4f8>)
 8000ab4:	f004 fe39 	bl	800572a <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4935      	ldr	r1, [pc, #212]	; (8000b90 <main+0x4fc>)
 8000abc:	4835      	ldr	r0, [pc, #212]	; (8000b94 <main+0x500>)
 8000abe:	f004 fe34 	bl	800572a <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <main+0x504>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <main+0x43e>
 8000aca:	2112      	movs	r1, #18
 8000acc:	4833      	ldr	r0, [pc, #204]	; (8000b9c <main+0x508>)
 8000ace:	f000 fd51 	bl	8001574 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <main+0x50c>)
 8000ad4:	22f0      	movs	r2, #240	; 0xf0
 8000ad6:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000ad8:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <main+0x50c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <main+0x50c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <main+0x50c>)
 8000ae6:	22c0      	movs	r2, #192	; 0xc0
 8000ae8:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000aea:	482d      	ldr	r0, [pc, #180]	; (8000ba0 <main+0x50c>)
 8000aec:	f00d fc4a 	bl	800e384 <eth_init>

   	 eth_socket_init(&ETH,0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	482b      	ldr	r0, [pc, #172]	; (8000ba0 <main+0x50c>)
 8000af4:	f00d fcc0 	bl	800e478 <eth_socket_init>

   SPI_READ_EN=1;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <main+0x510>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <main+0x50c>)
 8000b00:	220f      	movs	r2, #15
 8000b02:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <main+0x50c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <main+0x50c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <main+0x50c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b16:	481d      	ldr	r0, [pc, #116]	; (8000b8c <main+0x4f8>)
 8000b18:	f001 fc46 	bl	80023a8 <ESP8266_HW_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10c      	bne.n	8000b3c <main+0x4a8>
     {
   	  ESP_HW_Init=1;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <main+0x514>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <main+0x4ec>)
 8000b2a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d04a      	beq.n	8000bc8 <main+0x534>
 8000b32:	2113      	movs	r1, #19
 8000b34:	481d      	ldr	r0, [pc, #116]	; (8000bac <main+0x518>)
 8000b36:	f000 fd1d 	bl	8001574 <ITM0_Write>
 8000b3a:	e045      	b.n	8000bc8 <main+0x534>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b3c:	f001 fc0c 	bl	8002358 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <main+0x4f8>)
 8000b42:	f001 fc31 	bl	80023a8 <ESP8266_HW_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d131      	bne.n	8000bb0 <main+0x51c>
   	  {
   		  ESP_HW_Init=1;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <main+0x514>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <main+0x4ec>)
 8000b54:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d035      	beq.n	8000bc8 <main+0x534>
 8000b5c:	2113      	movs	r1, #19
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <main+0x518>)
 8000b60:	f000 fd08 	bl	8001574 <ITM0_Write>
 8000b64:	e030      	b.n	8000bc8 <main+0x534>
 8000b66:	bf00      	nop
 8000b68:	200018ac 	.word	0x200018ac
 8000b6c:	20001efc 	.word	0x20001efc
 8000b70:	20000084 	.word	0x20000084
 8000b74:	10624dd3 	.word	0x10624dd3
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	08010690 	.word	0x08010690
 8000b80:	20000b58 	.word	0x20000b58
 8000b84:	080106a0 	.word	0x080106a0
 8000b88:	2000401c 	.word	0x2000401c
 8000b8c:	2000027c 	.word	0x2000027c
 8000b90:	20004020 	.word	0x20004020
 8000b94:	200002c0 	.word	0x200002c0
 8000b98:	2000294c 	.word	0x2000294c
 8000b9c:	080106b4 	.word	0x080106b4
 8000ba0:	20002954 	.word	0x20002954
 8000ba4:	20003a14 	.word	0x20003a14
 8000ba8:	20003a07 	.word	0x20003a07
 8000bac:	080106c8 	.word	0x080106c8
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bb0:	4bab      	ldr	r3, [pc, #684]	; (8000e60 <main+0x7cc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bb6:	4bab      	ldr	r3, [pc, #684]	; (8000e64 <main+0x7d0>)
 8000bb8:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <main+0x534>
 8000bc0:	2115      	movs	r1, #21
 8000bc2:	48a9      	ldr	r0, [pc, #676]	; (8000e68 <main+0x7d4>)
 8000bc4:	f000 fcd6 	bl	8001574 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bcc:	f002 f822 	bl	8002c14 <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bd0:	4ba3      	ldr	r3, [pc, #652]	; (8000e60 <main+0x7cc>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	f040 80cd 	bne.w	8000d74 <main+0x6e0>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000bda:	4ba4      	ldr	r3, [pc, #656]	; (8000e6c <main+0x7d8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	f040 80c8 	bne.w	8000d74 <main+0x6e0>
 8000be4:	4b9f      	ldr	r3, [pc, #636]	; (8000e64 <main+0x7d0>)
 8000be6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f040 80c2 	bne.w	8000d74 <main+0x6e0>
 8000bf0:	4b9c      	ldr	r3, [pc, #624]	; (8000e64 <main+0x7d0>)
 8000bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000bfa:	f340 80bb 	ble.w	8000d74 <main+0x6e0>
 8000bfe:	4b9c      	ldr	r3, [pc, #624]	; (8000e70 <main+0x7dc>)
 8000c00:	7c9b      	ldrb	r3, [r3, #18]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80b6 	beq.w	8000d74 <main+0x6e0>
	  			{	ETH.S0_data_available=0;
 8000c08:	4b99      	ldr	r3, [pc, #612]	; (8000e70 <main+0x7dc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c0e:	4b99      	ldr	r3, [pc, #612]	; (8000e74 <main+0x7e0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c14:	4b95      	ldr	r3, [pc, #596]	; (8000e6c <main+0x7d8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4896      	ldr	r0, [pc, #600]	; (8000e78 <main+0x7e4>)
 8000c1e:	f00b ffb4 	bl	800cb8a <ModBUS_F03_Read>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4698      	mov	r8, r3
 8000c26:	2101      	movs	r1, #1
 8000c28:	4893      	ldr	r0, [pc, #588]	; (8000e78 <main+0x7e4>)
 8000c2a:	f00b ffae 	bl	800cb8a <ModBUS_F03_Read>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c32:	2102      	movs	r1, #2
 8000c34:	4890      	ldr	r0, [pc, #576]	; (8000e78 <main+0x7e4>)
 8000c36:	f00b ffa8 	bl	800cb8a <ModBUS_F03_Read>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3e:	2103      	movs	r1, #3
 8000c40:	488d      	ldr	r0, [pc, #564]	; (8000e78 <main+0x7e4>)
 8000c42:	f00b ffa2 	bl	800cb8a <ModBUS_F03_Read>
 8000c46:	4603      	mov	r3, r0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	488a      	ldr	r0, [pc, #552]	; (8000e78 <main+0x7e4>)
 8000c4e:	f00b ff9c 	bl	800cb8a <ModBUS_F03_Read>
 8000c52:	4603      	mov	r3, r0
 8000c54:	623b      	str	r3, [r7, #32]
 8000c56:	2105      	movs	r1, #5
 8000c58:	4887      	ldr	r0, [pc, #540]	; (8000e78 <main+0x7e4>)
 8000c5a:	f00b ff96 	bl	800cb8a <ModBUS_F03_Read>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	2106      	movs	r1, #6
 8000c64:	4884      	ldr	r0, [pc, #528]	; (8000e78 <main+0x7e4>)
 8000c66:	f00b ff90 	bl	800cb8a <ModBUS_F03_Read>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	2107      	movs	r1, #7
 8000c70:	4881      	ldr	r0, [pc, #516]	; (8000e78 <main+0x7e4>)
 8000c72:	f00b ff8a 	bl	800cb8a <ModBUS_F03_Read>
 8000c76:	4603      	mov	r3, r0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	487e      	ldr	r0, [pc, #504]	; (8000e78 <main+0x7e4>)
 8000c7e:	f00b ff84 	bl	800cb8a <ModBUS_F03_Read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	2109      	movs	r1, #9
 8000c88:	487b      	ldr	r0, [pc, #492]	; (8000e78 <main+0x7e4>)
 8000c8a:	f00b ff7e 	bl	800cb8a <ModBUS_F03_Read>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	210a      	movs	r1, #10
 8000c94:	4878      	ldr	r0, [pc, #480]	; (8000e78 <main+0x7e4>)
 8000c96:	f00b ff78 	bl	800cb8a <ModBUS_F03_Read>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	210b      	movs	r1, #11
 8000ca0:	4875      	ldr	r0, [pc, #468]	; (8000e78 <main+0x7e4>)
 8000ca2:	f00b ff72 	bl	800cb8a <ModBUS_F03_Read>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	210c      	movs	r1, #12
 8000cac:	4872      	ldr	r0, [pc, #456]	; (8000e78 <main+0x7e4>)
 8000cae:	f00b ff6c 	bl	800cb8a <ModBUS_F03_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461e      	mov	r6, r3
 8000cb6:	210d      	movs	r1, #13
 8000cb8:	486f      	ldr	r0, [pc, #444]	; (8000e78 <main+0x7e4>)
 8000cba:	f00b ff66 	bl	800cb8a <ModBUS_F03_Read>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461d      	mov	r5, r3
 8000cc2:	210e      	movs	r1, #14
 8000cc4:	486c      	ldr	r0, [pc, #432]	; (8000e78 <main+0x7e4>)
 8000cc6:	f00b ff60 	bl	800cb8a <ModBUS_F03_Read>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461c      	mov	r4, r3
 8000cce:	210f      	movs	r1, #15
 8000cd0:	4869      	ldr	r0, [pc, #420]	; (8000e78 <main+0x7e4>)
 8000cd2:	f00b ff5a 	bl	800cb8a <ModBUS_F03_Read>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cde:	9312      	str	r3, [sp, #72]	; 0x48
 8000ce0:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <main+0x7e8>)
 8000ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8000ce4:	4b66      	ldr	r3, [pc, #408]	; (8000e80 <main+0x7ec>)
 8000ce6:	9310      	str	r3, [sp, #64]	; 0x40
 8000ce8:	2301      	movs	r3, #1
 8000cea:	930f      	str	r3, [sp, #60]	; 0x3c
 8000cec:	920e      	str	r2, [sp, #56]	; 0x38
 8000cee:	940d      	str	r4, [sp, #52]	; 0x34
 8000cf0:	950c      	str	r5, [sp, #48]	; 0x30
 8000cf2:	960b      	str	r6, [sp, #44]	; 0x2c
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	920a      	str	r2, [sp, #40]	; 0x28
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	9208      	str	r2, [sp, #32]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	9207      	str	r2, [sp, #28]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	9206      	str	r2, [sp, #24]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	9205      	str	r2, [sp, #20]
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	9204      	str	r2, [sp, #16]
 8000d10:	6a3a      	ldr	r2, [r7, #32]
 8000d12:	9203      	str	r2, [sp, #12]
 8000d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d16:	9202      	str	r2, [sp, #8]
 8000d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d1a:	9201      	str	r2, [sp, #4]
 8000d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	4643      	mov	r3, r8
 8000d22:	4a58      	ldr	r2, [pc, #352]	; (8000e84 <main+0x7f0>)
 8000d24:	4958      	ldr	r1, [pc, #352]	; (8000e88 <main+0x7f4>)
 8000d26:	4859      	ldr	r0, [pc, #356]	; (8000e8c <main+0x7f8>)
 8000d28:	f00a fd52 	bl	800b7d0 <httpPOST>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d020      	beq.n	8000d74 <main+0x6e0>
									ModBUS_F03_Read(&mb_eth,14),
									ModBUS_F03_Read(&mb_eth,15),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d32:	4853      	ldr	r0, [pc, #332]	; (8000e80 <main+0x7ec>)
 8000d34:	f7ff fa5e 	bl	80001f4 <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2341      	movs	r3, #65	; 0x41
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	494f      	ldr	r1, [pc, #316]	; (8000e80 <main+0x7ec>)
 8000d44:	4852      	ldr	r0, [pc, #328]	; (8000e90 <main+0x7fc>)
 8000d46:	f00e f97d 	bl	800f044 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d4a:	484d      	ldr	r0, [pc, #308]	; (8000e80 <main+0x7ec>)
 8000d4c:	f7ff fa52 	bl	80001f4 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <main+0x7d0>)
 8000d56:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d5a:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <main+0x7d0>)
 8000d5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d807      	bhi.n	8000d74 <main+0x6e0>
	  							{
	  								EnviarDatos(&wf);
 8000d64:	483f      	ldr	r0, [pc, #252]	; (8000e64 <main+0x7d0>)
 8000d66:	f005 fd35 	bl	80067d4 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d6a:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <main+0x7d0>)
 8000d6c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d74:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <main+0x800>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d004      	beq.n	8000d86 <main+0x6f2>
 8000d7c:	4b46      	ldr	r3, [pc, #280]	; (8000e98 <main+0x804>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	f040 80aa 	bne.w	8000eda <main+0x846>
	  		{
	  			if(FLAG_UART1==1)
 8000d86:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <main+0x800>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d11c      	bne.n	8000dc8 <main+0x734>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <main+0x808>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <main+0x80c>)
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	4942      	ldr	r1, [pc, #264]	; (8000ea4 <main+0x810>)
 8000d9a:	4843      	ldr	r0, [pc, #268]	; (8000ea8 <main+0x814>)
 8000d9c:	f00e f952 	bl	800f044 <CopiaVector>
	  					FLAG_UART1=0;
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <main+0x800>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <main+0x818>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d102      	bne.n	8000db4 <main+0x720>
	  						{
	  							error_rxdata=0;
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <main+0x818>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <main+0x818>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d105      	bne.n	8000dc8 <main+0x734>
	  						{
	  							error_rxdata=5;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <main+0x818>)
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <main+0x818>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <main+0x804>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d102      	bne.n	8000dd6 <main+0x742>
	  					{
	  						FLAG_TIMEOUT=0;
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <main+0x804>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <main+0x7cc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d17d      	bne.n	8000eda <main+0x846>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <main+0x808>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <main+0x7d0>)
 8000de4:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <main+0x808>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <main+0x80c>)
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	492c      	ldr	r1, [pc, #176]	; (8000ea4 <main+0x810>)
 8000df4:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <main+0x814>)
 8000df6:	f00e f925 	bl	800f044 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000dfa:	481a      	ldr	r0, [pc, #104]	; (8000e64 <main+0x7d0>)
 8000dfc:	f005 fdd0 	bl	80069a0 <AT_ESP8266_ND>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <main+0x81c>)
 8000e06:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <main+0x7d0>)
 8000e0a:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d163      	bne.n	8000eda <main+0x846>
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <main+0x7d0>)
 8000e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e18:	2b63      	cmp	r3, #99	; 0x63
 8000e1a:	d15e      	bne.n	8000eda <main+0x846>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <main+0x7d0>)
 8000e1e:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000e22:	2341      	movs	r3, #65	; 0x41
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	4922      	ldr	r1, [pc, #136]	; (8000eb4 <main+0x820>)
 8000e2a:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <main+0x824>)
 8000e2c:	f00e f90a 	bl	800f044 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <main+0x7d0>)
 8000e32:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <main+0x828>)
 8000e38:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000e3c:	481f      	ldr	r0, [pc, #124]	; (8000ebc <main+0x828>)
 8000e3e:	f00b ff29 	bl	800cc94 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <main+0x828>)
 8000e44:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e48:	2341      	movs	r3, #65	; 0x41
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	491c      	ldr	r1, [pc, #112]	; (8000ec0 <main+0x82c>)
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <main+0x7fc>)
 8000e52:	f00e f8f7 	bl	800f044 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <main+0x828>)
 8000e58:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e5c:	e032      	b.n	8000ec4 <main+0x830>
 8000e5e:	bf00      	nop
 8000e60:	20003a07 	.word	0x20003a07
 8000e64:	20000b58 	.word	0x20000b58
 8000e68:	080106dc 	.word	0x080106dc
 8000e6c:	2000294d 	.word	0x2000294d
 8000e70:	20002954 	.word	0x20002954
 8000e74:	20002950 	.word	0x20002950
 8000e78:	200018ac 	.word	0x200018ac
 8000e7c:	2000274c 	.word	0x2000274c
 8000e80:	2000254c 	.word	0x2000254c
 8000e84:	2000001c 	.word	0x2000001c
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000dec 	.word	0x20000dec
 8000e94:	20003a0c 	.word	0x20003a0c
 8000e98:	20003a0b 	.word	0x20003a0b
 8000e9c:	20004028 	.word	0x20004028
 8000ea0:	20004018 	.word	0x20004018
 8000ea4:	20003e18 	.word	0x20003e18
 8000ea8:	200011ec 	.word	0x200011ec
 8000eac:	20003a0f 	.word	0x20003a0f
 8000eb0:	20003a0e 	.word	0x20003a0e
 8000eb4:	20000bec 	.word	0x20000bec
 8000eb8:	20001f0e 	.word	0x20001f0e
 8000ebc:	20001efc 	.word	0x20001efc
 8000ec0:	20002114 	.word	0x20002114
 8000ec4:	4a4e      	ldr	r2, [pc, #312]	; (8001000 <main+0x96c>)
 8000ec6:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000eca:	4b4d      	ldr	r3, [pc, #308]	; (8001000 <main+0x96c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000ed2:	4b4b      	ldr	r3, [pc, #300]	; (8001000 <main+0x96c>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000eda:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <main+0x970>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d004      	beq.n	8000eec <main+0x858>
 8000ee2:	4b49      	ldr	r3, [pc, #292]	; (8001008 <main+0x974>)
 8000ee4:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d156      	bne.n	8000f9a <main+0x906>
	  		{
	  			if(FLAG_UART2==1)
 8000eec:	4b45      	ldr	r3, [pc, #276]	; (8001004 <main+0x970>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d105      	bne.n	8000f00 <main+0x86c>
	  				{
	  				FLAG_UART2=0;
 8000ef4:	4b43      	ldr	r3, [pc, #268]	; (8001004 <main+0x970>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000efa:	4843      	ldr	r0, [pc, #268]	; (8001008 <main+0x974>)
 8000efc:	f00b f8bc 	bl	800c078 <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000f00:	4b41      	ldr	r3, [pc, #260]	; (8001008 <main+0x974>)
 8000f02:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d147      	bne.n	8000f9a <main+0x906>
	  				{
	  					lr.tmr_dly_ON=0;
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <main+0x974>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000f12:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000f16:	483c      	ldr	r0, [pc, #240]	; (8001008 <main+0x974>)
 8000f18:	f00b f892 	bl	800c040 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000f1c:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <main+0x974>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000f22:	4b39      	ldr	r3, [pc, #228]	; (8001008 <main+0x974>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000f2a:	4838      	ldr	r0, [pc, #224]	; (800100c <main+0x978>)
 8000f2c:	f7ff f962 	bl	80001f4 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b35      	ldr	r3, [pc, #212]	; (800100c <main+0x978>)
 8000f36:	4413      	add	r3, r2
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <main+0x97c>)
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000f42:	4834      	ldr	r0, [pc, #208]	; (8001014 <main+0x980>)
 8000f44:	f7ff f956 	bl	80001f4 <strlen>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b31      	ldr	r3, [pc, #196]	; (8001014 <main+0x980>)
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a31      	ldr	r2, [pc, #196]	; (8001018 <main+0x984>)
 8000f52:	4614      	mov	r4, r2
 8000f54:	469c      	mov	ip, r3
 8000f56:	f104 0e20 	add.w	lr, r4, #32
 8000f5a:	4665      	mov	r5, ip
 8000f5c:	4626      	mov	r6, r4
 8000f5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f60:	6028      	str	r0, [r5, #0]
 8000f62:	6069      	str	r1, [r5, #4]
 8000f64:	60aa      	str	r2, [r5, #8]
 8000f66:	60eb      	str	r3, [r5, #12]
 8000f68:	3410      	adds	r4, #16
 8000f6a:	f10c 0c10 	add.w	ip, ip, #16
 8000f6e:	4574      	cmp	r4, lr
 8000f70:	d1f3      	bne.n	8000f5a <main+0x8c6>
 8000f72:	4663      	mov	r3, ip
 8000f74:	4622      	mov	r2, r4
 8000f76:	6810      	ldr	r0, [r2, #0]
 8000f78:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <main+0x974>)
 8000f7c:	2223      	movs	r2, #35	; 0x23
 8000f7e:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <main+0x974>)
 8000f84:	2214      	movs	r2, #20
 8000f86:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8000f8a:	4924      	ldr	r1, [pc, #144]	; (800101c <main+0x988>)
 8000f8c:	481e      	ldr	r0, [pc, #120]	; (8001008 <main+0x974>)
 8000f8e:	f00a ffa9 	bl	800bee4 <LoRa_Send>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <main+0x98c>)
 8000f98:	701a      	strb	r2, [r3, #0]
	  				}

	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <main+0x990>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d108      	bne.n	8000fb4 <main+0x920>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4920      	ldr	r1, [pc, #128]	; (8001028 <main+0x994>)
 8000fa6:	4816      	ldr	r0, [pc, #88]	; (8001000 <main+0x96c>)
 8000fa8:	f008 ff92 	bl	8009ed0 <WiFi_Conn_ND>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <main+0x998>)
 8000fb2:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <main+0x99c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	f47f ae09 	bne.w	8000bd0 <main+0x53c>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc4:	481b      	ldr	r0, [pc, #108]	; (8001034 <main+0x9a0>)
 8000fc6:	f002 fa87 	bl	80034d8 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000fca:	2115      	movs	r1, #21
 8000fcc:	481a      	ldr	r0, [pc, #104]	; (8001038 <main+0x9a4>)
 8000fce:	f000 fad1 	bl	8001574 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000fd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fd6:	f001 fe1d 	bl	8002c14 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0x9a0>)
 8000fe2:	f002 fa79 	bl	80034d8 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000fe6:	2118      	movs	r1, #24
 8000fe8:	4814      	ldr	r0, [pc, #80]	; (800103c <main+0x9a8>)
 8000fea:	f000 fac3 	bl	8001574 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000fee:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ff2:	f001 fe0f 	bl	8002c14 <HAL_Delay>
	  				esp_restart=0;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <main+0x99c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000ffc:	e5e8      	b.n	8000bd0 <main+0x53c>
 8000ffe:	bf00      	nop
 8001000:	20000b58 	.word	0x20000b58
 8001004:	20003a0d 	.word	0x20003a0d
 8001008:	20000350 	.word	0x20000350
 800100c:	20000366 	.word	0x20000366
 8001010:	080106f4 	.word	0x080106f4
 8001014:	2000082c 	.word	0x2000082c
 8001018:	080106f8 	.word	0x080106f8
 800101c:	200002c0 	.word	0x200002c0
 8001020:	20000b54 	.word	0x20000b54
 8001024:	20003a07 	.word	0x20003a07
 8001028:	2000027c 	.word	0x2000027c
 800102c:	20003a11 	.word	0x20003a11
 8001030:	20003a10 	.word	0x20003a10
 8001034:	40020000 	.word	0x40020000
 8001038:	0801071c 	.word	0x0801071c
 800103c:	08010734 	.word	0x08010734

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00e fa43 	bl	800f4da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <SystemClock_Config+0xc8>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <SystemClock_Config+0xc8>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <SystemClock_Config+0xc8>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <SystemClock_Config+0xcc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <SystemClock_Config+0xcc>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <SystemClock_Config+0xcc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80010b0:	230c      	movs	r3, #12
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010b4:	2360      	movs	r3, #96	; 0x60
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fa3b 	bl	8003540 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d0:	f001 fa1a 	bl	8002508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2103      	movs	r1, #3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fc9d 	bl	8003a30 <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010fc:	f001 fa04 	bl	8002508 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3750      	adds	r7, #80	; 0x50
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_SPI1_Init+0x64>)
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <MX_SPI1_Init+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_SPI1_Init+0x64>)
 800111c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001120:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_SPI1_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_SPI1_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_SPI1_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_SPI1_Init+0x64>)
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_SPI1_Init+0x64>)
 8001144:	2210      	movs	r2, #16
 8001146:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_SPI1_Init+0x64>)
 800115c:	220a      	movs	r2, #10
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_SPI1_Init+0x64>)
 8001162:	f002 fe45 	bl	8003df0 <HAL_SPI_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800116c:	f001 f9cc 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000194 	.word	0x20000194
 8001178:	40013000 	.word	0x40013000

0800117c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <MX_TIM2_Init+0xf0>)
 80011ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <MX_TIM2_Init+0xf0>)
 80011b6:	2264      	movs	r2, #100	; 0x64
 80011b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <MX_TIM2_Init+0xf0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80011c0:	4b2a      	ldr	r3, [pc, #168]	; (800126c <MX_TIM2_Init+0xf0>)
 80011c2:	2264      	movs	r2, #100	; 0x64
 80011c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_TIM2_Init+0xf0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <MX_TIM2_Init+0xf0>)
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d2:	4826      	ldr	r0, [pc, #152]	; (800126c <MX_TIM2_Init+0xf0>)
 80011d4:	f003 f902 	bl	80043dc <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80011de:	f001 f993 	bl	8002508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ec:	4619      	mov	r1, r3
 80011ee:	481f      	ldr	r0, [pc, #124]	; (800126c <MX_TIM2_Init+0xf0>)
 80011f0:	f003 fd0a 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011fa:	f001 f985 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <MX_TIM2_Init+0xf0>)
 8001200:	f003 f93b 	bl	800447a <HAL_TIM_OC_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800120a:	f001 f97d 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800120e:	2108      	movs	r1, #8
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <MX_TIM2_Init+0xf0>)
 8001212:	f003 fb3b 	bl	800488c <HAL_TIM_OnePulse_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800121c:	f001 f974 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4619      	mov	r1, r3
 800122e:	480f      	ldr	r0, [pc, #60]	; (800126c <MX_TIM2_Init+0xf0>)
 8001230:	f004 f8a6 	bl	8005380 <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800123a:	f001 f965 	bl	8002508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800123e:	2320      	movs	r3, #32
 8001240:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_TIM2_Init+0xf0>)
 8001256:	f003 fc7b 	bl	8004b50 <HAL_TIM_OC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001260:	f001 f952 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3738      	adds	r7, #56	; 0x38
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200001ec 	.word	0x200001ec

08001270 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <MX_TIM3_Init+0xf0>)
 80012a2:	4a30      	ldr	r2, [pc, #192]	; (8001364 <MX_TIM3_Init+0xf4>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <MX_TIM3_Init+0xf0>)
 80012a8:	2264      	movs	r2, #100	; 0x64
 80012aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <MX_TIM3_Init+0xf0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_TIM3_Init+0xf0>)
 80012b4:	2296      	movs	r2, #150	; 0x96
 80012b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <MX_TIM3_Init+0xf0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <MX_TIM3_Init+0xf0>)
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c4:	4826      	ldr	r0, [pc, #152]	; (8001360 <MX_TIM3_Init+0xf0>)
 80012c6:	f003 f889 	bl	80043dc <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80012d0:	f001 f91a 	bl	8002508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012de:	4619      	mov	r1, r3
 80012e0:	481f      	ldr	r0, [pc, #124]	; (8001360 <MX_TIM3_Init+0xf0>)
 80012e2:	f003 fc91 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80012ec:	f001 f90c 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80012f0:	481b      	ldr	r0, [pc, #108]	; (8001360 <MX_TIM3_Init+0xf0>)
 80012f2:	f003 f8c2 	bl	800447a <HAL_TIM_OC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80012fc:	f001 f904 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001300:	2108      	movs	r1, #8
 8001302:	4817      	ldr	r0, [pc, #92]	; (8001360 <MX_TIM3_Init+0xf0>)
 8001304:	f003 fac2 	bl	800488c <HAL_TIM_OnePulse_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800130e:	f001 f8fb 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	4619      	mov	r1, r3
 8001320:	480f      	ldr	r0, [pc, #60]	; (8001360 <MX_TIM3_Init+0xf0>)
 8001322:	f004 f82d 	bl	8005380 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 800132c:	f001 f8ec 	bl	8002508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8001330:	2320      	movs	r3, #32
 8001332:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_TIM3_Init+0xf0>)
 8001348:	f003 fc02 	bl	8004b50 <HAL_TIM_OC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001352:	f001 f8d9 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3738      	adds	r7, #56	; 0x38
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000234 	.word	0x20000234
 8001364:	40000400 	.word	0x40000400

08001368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART1_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 80013a0:	f004 f870 	bl	8005484 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f001 f8ad 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000027c 	.word	0x2000027c
 80013b8:	40011000 	.word	0x40011000

080013bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_USART2_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013f4:	f004 f846 	bl	8005484 <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f001 f883 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200002c0 	.word	0x200002c0
 800140c:	40004400 	.word	0x40004400

08001410 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART6_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART6_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART6_UART_Init+0x4c>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART6_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART6_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART6_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART6_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART6_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART6_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART6_UART_Init+0x4c>)
 8001448:	f004 f81c 	bl	8005484 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f001 f859 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000304 	.word	0x20000304
 8001460:	40011400 	.word	0x40011400

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <MX_GPIO_Init+0x104>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a39      	ldr	r2, [pc, #228]	; (8001568 <MX_GPIO_Init+0x104>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b37      	ldr	r3, [pc, #220]	; (8001568 <MX_GPIO_Init+0x104>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <MX_GPIO_Init+0x104>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a32      	ldr	r2, [pc, #200]	; (8001568 <MX_GPIO_Init+0x104>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <MX_GPIO_Init+0x104>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <MX_GPIO_Init+0x104>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a2b      	ldr	r2, [pc, #172]	; (8001568 <MX_GPIO_Init+0x104>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <MX_GPIO_Init+0x104>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <MX_GPIO_Init+0x104>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a24      	ldr	r2, [pc, #144]	; (8001568 <MX_GPIO_Init+0x104>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <MX_GPIO_Init+0x104>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f0:	481e      	ldr	r0, [pc, #120]	; (800156c <MX_GPIO_Init+0x108>)
 80014f2:	f001 fff1 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2102      	movs	r1, #2
 80014fa:	481d      	ldr	r0, [pc, #116]	; (8001570 <MX_GPIO_Init+0x10c>)
 80014fc:	f001 ffec 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2110      	movs	r1, #16
 8001504:	481a      	ldr	r0, [pc, #104]	; (8001570 <MX_GPIO_Init+0x10c>)
 8001506:	f001 ffe7 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 800150a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4812      	ldr	r0, [pc, #72]	; (800156c <MX_GPIO_Init+0x108>)
 8001524:	f001 fd70 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 8001528:	f240 1301 	movw	r3, #257	; 0x101
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <MX_GPIO_Init+0x10c>)
 800153e:	f001 fd63 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 8001542:	2312      	movs	r3, #18
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_GPIO_Init+0x10c>)
 800155a:	f001 fd55 	bl	8003008 <HAL_GPIO_Init>

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40020800 	.word	0x40020800
 8001570:	40020000 	.word	0x40020000

08001574 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e009      	b.n	8001598 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f859 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf1      	blt.n	8001584 <ITM0_Write+0x10>
  }
  return len;
 80015a0:	683b      	ldr	r3, [r7, #0]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <SysTick_Handler>:

void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 80015b2:	4b68      	ldr	r3, [pc, #416]	; (8001754 <SysTick_Handler+0x1a8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a66      	ldr	r2, [pc, #408]	; (8001754 <SysTick_Handler+0x1a8>)
 80015ba:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <SysTick_Handler+0x1ac>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3301      	adds	r3, #1
 80015c2:	4a65      	ldr	r2, [pc, #404]	; (8001758 <SysTick_Handler+0x1ac>)
 80015c4:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 80015c6:	4b65      	ldr	r3, [pc, #404]	; (800175c <SysTick_Handler+0x1b0>)
 80015c8:	7a1b      	ldrb	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <SysTick_Handler+0x2c>
 80015ce:	4b64      	ldr	r3, [pc, #400]	; (8001760 <SysTick_Handler+0x1b4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a62      	ldr	r2, [pc, #392]	; (8001760 <SysTick_Handler+0x1b4>)
 80015d6:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80015d8:	4b60      	ldr	r3, [pc, #384]	; (800175c <SysTick_Handler+0x1b0>)
 80015da:	7a1b      	ldrb	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <SysTick_Handler+0x4e>
 80015e0:	4b5e      	ldr	r3, [pc, #376]	; (800175c <SysTick_Handler+0x1b0>)
 80015e2:	88db      	ldrh	r3, [r3, #6]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <SysTick_Handler+0x1b4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	da05      	bge.n	80015fa <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80015ee:	4b5b      	ldr	r3, [pc, #364]	; (800175c <SysTick_Handler+0x1b0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80015f4:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <SysTick_Handler+0x1b4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80015fa:	4b5a      	ldr	r3, [pc, #360]	; (8001764 <SysTick_Handler+0x1b8>)
 80015fc:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8001600:	2b01      	cmp	r3, #1
 8001602:	d116      	bne.n	8001632 <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 8001604:	4b57      	ldr	r3, [pc, #348]	; (8001764 <SysTick_Handler+0x1b8>)
 8001606:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 800160a:	3301      	adds	r3, #1
 800160c:	4a55      	ldr	r2, [pc, #340]	; (8001764 <SysTick_Handler+0x1b8>)
 800160e:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 8001612:	4b54      	ldr	r3, [pc, #336]	; (8001764 <SysTick_Handler+0x1b8>)
 8001614:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 8001618:	4b52      	ldr	r3, [pc, #328]	; (8001764 <SysTick_Handler+0x1b8>)
 800161a:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 800161e:	429a      	cmp	r2, r3
 8001620:	dd07      	ble.n	8001632 <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 8001622:	4b50      	ldr	r3, [pc, #320]	; (8001764 <SysTick_Handler+0x1b8>)
 8001624:	2201      	movs	r2, #1
 8001626:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 800162a:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <SysTick_Handler+0x1b8>)
 800162c:	2200      	movs	r2, #0
 800162e:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 8001632:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <SysTick_Handler+0x1bc>)
 8001634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001638:	f240 2261 	movw	r2, #609	; 0x261
 800163c:	4293      	cmp	r3, r2
 800163e:	d005      	beq.n	800164c <SysTick_Handler+0xa0>
 8001640:	4b49      	ldr	r3, [pc, #292]	; (8001768 <SysTick_Handler+0x1bc>)
 8001642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001646:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800164a:	d109      	bne.n	8001660 <SysTick_Handler+0xb4>
 800164c:	4b46      	ldr	r3, [pc, #280]	; (8001768 <SysTick_Handler+0x1bc>)
 800164e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <SysTick_Handler+0xb4>
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <SysTick_Handler+0x1c0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	4a43      	ldr	r2, [pc, #268]	; (800176c <SysTick_Handler+0x1c0>)
 800165e:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 20000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 8001660:	4b42      	ldr	r3, [pc, #264]	; (800176c <SysTick_Handler+0x1c0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001668:	4293      	cmp	r3, r2
 800166a:	dd0c      	ble.n	8001686 <SysTick_Handler+0xda>
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <SysTick_Handler+0x1bc>)
 800166e:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001672:	2b01      	cmp	r3, #1
 8001674:	d007      	beq.n	8001686 <SysTick_Handler+0xda>
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <SysTick_Handler+0x1bc>)
 8001678:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SysTick_Handler+0xda>
 8001680:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <SysTick_Handler+0x1c4>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001686:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <SysTick_Handler+0x1c8>)
 8001688:	7b9b      	ldrb	r3, [r3, #14]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10e      	bne.n	80016ac <SysTick_Handler+0x100>
	{
		ETH.ETH_WDG++;
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <SysTick_Handler+0x1c8>)
 8001690:	899b      	ldrh	r3, [r3, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <SysTick_Handler+0x1c8>)
 8001698:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <SysTick_Handler+0x1c8>)
 800169c:	899b      	ldrh	r3, [r3, #12]
 800169e:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80016a2:	d303      	bcc.n	80016ac <SysTick_Handler+0x100>
		{
			ETH.ETH_WDG=64000;
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <SysTick_Handler+0x1c8>)
 80016a6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80016aa:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 80016ac:	4b29      	ldr	r3, [pc, #164]	; (8001754 <SysTick_Handler+0x1a8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	f040 841f 	bne.w	8001ef4 <SysTick_Handler+0x948>
  {
	  dbgn++;
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <SysTick_Handler+0x1cc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a2e      	ldr	r2, [pc, #184]	; (8001778 <SysTick_Handler+0x1cc>)
 80016be:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <SysTick_Handler+0x1a8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <SysTick_Handler+0x1d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4a2b      	ldr	r2, [pc, #172]	; (800177c <SysTick_Handler+0x1d0>)
 80016ce:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <SysTick_Handler+0x1d4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80016d8:	d102      	bne.n	80016e0 <SysTick_Handler+0x134>
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <SysTick_Handler+0x1d4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <SysTick_Handler+0x1d8>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d104      	bne.n	80016f2 <SysTick_Handler+0x146>
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <SysTick_Handler+0x1d4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a24      	ldr	r2, [pc, #144]	; (8001780 <SysTick_Handler+0x1d4>)
 80016f0:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <SysTick_Handler+0x1d4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d102      	bne.n	8001700 <SysTick_Handler+0x154>
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <SysTick_Handler+0x1d8>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <SysTick_Handler+0x1d8>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d104      	bne.n	8001712 <SysTick_Handler+0x166>
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <SysTick_Handler+0x1d4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3b01      	subs	r3, #1
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <SysTick_Handler+0x1d4>)
 8001710:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <SysTick_Handler+0x1d4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <SysTick_Handler+0x174>
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <SysTick_Handler+0x1d8>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001724:	4818      	ldr	r0, [pc, #96]	; (8001788 <SysTick_Handler+0x1dc>)
 8001726:	f001 fef0 	bl	800350a <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <SysTick_Handler+0x1e0>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 83d0 	beq.w	8001ed4 <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <SysTick_Handler+0x1e4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 83cf 	beq.w	8001edc <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 800173e:	2100      	movs	r1, #0
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <SysTick_Handler+0x1c8>)
 8001742:	f00c ff15 	bl	800e570 <eth_rd_SOCKET_STAT>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <SysTick_Handler+0x1c8>)
 800174c:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <SysTick_Handler+0x1c8>)
 8001750:	7b9b      	ldrb	r3, [r3, #14]
 8001752:	e01f      	b.n	8001794 <SysTick_Handler+0x1e8>
 8001754:	20000348 	.word	0x20000348
 8001758:	20004030 	.word	0x20004030
 800175c:	200018ac 	.word	0x200018ac
 8001760:	20004038 	.word	0x20004038
 8001764:	20000350 	.word	0x20000350
 8001768:	20000b58 	.word	0x20000b58
 800176c:	20002950 	.word	0x20002950
 8001770:	2000294d 	.word	0x2000294d
 8001774:	20002954 	.word	0x20002954
 8001778:	2000405c 	.word	0x2000405c
 800177c:	2000034c 	.word	0x2000034c
 8001780:	20004034 	.word	0x20004034
 8001784:	20003a12 	.word	0x20003a12
 8001788:	40020800 	.word	0x40020800
 800178c:	20003a04 	.word	0x20003a04
 8001790:	20003a14 	.word	0x20003a14
 8001794:	2b5f      	cmp	r3, #95	; 0x5f
 8001796:	f200 83a6 	bhi.w	8001ee6 <SysTick_Handler+0x93a>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <SysTick_Handler+0x1f4>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	08001921 	.word	0x08001921
 80017a4:	08001ee7 	.word	0x08001ee7
 80017a8:	08001ee7 	.word	0x08001ee7
 80017ac:	08001ee7 	.word	0x08001ee7
 80017b0:	08001ee7 	.word	0x08001ee7
 80017b4:	08001ee7 	.word	0x08001ee7
 80017b8:	08001ee7 	.word	0x08001ee7
 80017bc:	08001ee7 	.word	0x08001ee7
 80017c0:	08001ee7 	.word	0x08001ee7
 80017c4:	08001ee7 	.word	0x08001ee7
 80017c8:	08001ee7 	.word	0x08001ee7
 80017cc:	08001ee7 	.word	0x08001ee7
 80017d0:	08001ee7 	.word	0x08001ee7
 80017d4:	08001ee7 	.word	0x08001ee7
 80017d8:	08001ee7 	.word	0x08001ee7
 80017dc:	08001ee7 	.word	0x08001ee7
 80017e0:	08001ee7 	.word	0x08001ee7
 80017e4:	08001ee7 	.word	0x08001ee7
 80017e8:	08001ee7 	.word	0x08001ee7
 80017ec:	08001959 	.word	0x08001959
 80017f0:	080019ab 	.word	0x080019ab
 80017f4:	080019c3 	.word	0x080019c3
 80017f8:	080019db 	.word	0x080019db
 80017fc:	080019f3 	.word	0x080019f3
 8001800:	08001d4f 	.word	0x08001d4f
 8001804:	08001ee7 	.word	0x08001ee7
 8001808:	08001d67 	.word	0x08001d67
 800180c:	08001d7f 	.word	0x08001d7f
 8001810:	08001dbd 	.word	0x08001dbd
 8001814:	08001dfb 	.word	0x08001dfb
 8001818:	08001ee7 	.word	0x08001ee7
 800181c:	08001ee7 	.word	0x08001ee7
 8001820:	08001ee7 	.word	0x08001ee7
 8001824:	08001ee7 	.word	0x08001ee7
 8001828:	08001e13 	.word	0x08001e13
 800182c:	08001ee7 	.word	0x08001ee7
 8001830:	08001ee7 	.word	0x08001ee7
 8001834:	08001ee7 	.word	0x08001ee7
 8001838:	08001ee7 	.word	0x08001ee7
 800183c:	08001ee7 	.word	0x08001ee7
 8001840:	08001ee7 	.word	0x08001ee7
 8001844:	08001ee7 	.word	0x08001ee7
 8001848:	08001ee7 	.word	0x08001ee7
 800184c:	08001ee7 	.word	0x08001ee7
 8001850:	08001ee7 	.word	0x08001ee7
 8001854:	08001ee7 	.word	0x08001ee7
 8001858:	08001ee7 	.word	0x08001ee7
 800185c:	08001ee7 	.word	0x08001ee7
 8001860:	08001ee7 	.word	0x08001ee7
 8001864:	08001ee7 	.word	0x08001ee7
 8001868:	08001e8d 	.word	0x08001e8d
 800186c:	08001ee7 	.word	0x08001ee7
 8001870:	08001ee7 	.word	0x08001ee7
 8001874:	08001ee7 	.word	0x08001ee7
 8001878:	08001ee7 	.word	0x08001ee7
 800187c:	08001ee7 	.word	0x08001ee7
 8001880:	08001ee7 	.word	0x08001ee7
 8001884:	08001ee7 	.word	0x08001ee7
 8001888:	08001ee7 	.word	0x08001ee7
 800188c:	08001ee7 	.word	0x08001ee7
 8001890:	08001ee7 	.word	0x08001ee7
 8001894:	08001ee7 	.word	0x08001ee7
 8001898:	08001ee7 	.word	0x08001ee7
 800189c:	08001ee7 	.word	0x08001ee7
 80018a0:	08001ee7 	.word	0x08001ee7
 80018a4:	08001ee7 	.word	0x08001ee7
 80018a8:	08001ea5 	.word	0x08001ea5
 80018ac:	08001ee7 	.word	0x08001ee7
 80018b0:	08001ee7 	.word	0x08001ee7
 80018b4:	08001ee7 	.word	0x08001ee7
 80018b8:	08001ee7 	.word	0x08001ee7
 80018bc:	08001ee7 	.word	0x08001ee7
 80018c0:	08001ee7 	.word	0x08001ee7
 80018c4:	08001ee7 	.word	0x08001ee7
 80018c8:	08001ee7 	.word	0x08001ee7
 80018cc:	08001ee7 	.word	0x08001ee7
 80018d0:	08001ee7 	.word	0x08001ee7
 80018d4:	08001ee7 	.word	0x08001ee7
 80018d8:	08001ee7 	.word	0x08001ee7
 80018dc:	08001ee7 	.word	0x08001ee7
 80018e0:	08001ee7 	.word	0x08001ee7
 80018e4:	08001ee7 	.word	0x08001ee7
 80018e8:	08001ee7 	.word	0x08001ee7
 80018ec:	08001ee7 	.word	0x08001ee7
 80018f0:	08001ee7 	.word	0x08001ee7
 80018f4:	08001ee7 	.word	0x08001ee7
 80018f8:	08001ee7 	.word	0x08001ee7
 80018fc:	08001ee7 	.word	0x08001ee7
 8001900:	08001ee7 	.word	0x08001ee7
 8001904:	08001ee7 	.word	0x08001ee7
 8001908:	08001ee7 	.word	0x08001ee7
 800190c:	08001ee7 	.word	0x08001ee7
 8001910:	08001ee7 	.word	0x08001ee7
 8001914:	08001ee7 	.word	0x08001ee7
 8001918:	08001ee7 	.word	0x08001ee7
 800191c:	08001ebd 	.word	0x08001ebd
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 8001920:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <SysTick_Handler+0x580>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <SysTick_Handler+0x384>
 8001928:	2113      	movs	r1, #19
 800192a:	4881      	ldr	r0, [pc, #516]	; (8001b30 <SysTick_Handler+0x584>)
 800192c:	f7ff fe22 	bl	8001574 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001930:	2201      	movs	r2, #1
 8001932:	2100      	movs	r1, #0
 8001934:	487f      	ldr	r0, [pc, #508]	; (8001b34 <SysTick_Handler+0x588>)
 8001936:	f00c fce9 	bl	800e30c <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 800193a:	4b7e      	ldr	r3, [pc, #504]	; (8001b34 <SysTick_Handler+0x588>)
 800193c:	899b      	ldrh	r3, [r3, #12]
 800193e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001942:	4293      	cmp	r3, r2
 8001944:	f240 82cc 	bls.w	8001ee0 <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 8001948:	487a      	ldr	r0, [pc, #488]	; (8001b34 <SysTick_Handler+0x588>)
 800194a:	f00c fd1b 	bl	800e384 <eth_init>

						 eth_socket_init(&ETH,0);
 800194e:	2100      	movs	r1, #0
 8001950:	4878      	ldr	r0, [pc, #480]	; (8001b34 <SysTick_Handler+0x588>)
 8001952:	f00c fd91 	bl	800e478 <eth_socket_init>
					 }

				 }
			 break;
 8001956:	e2c3      	b.n	8001ee0 <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001958:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <SysTick_Handler+0x588>)
 800195a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001962:	2b01      	cmp	r3, #1
 8001964:	d110      	bne.n	8001988 <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001966:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <SysTick_Handler+0x580>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <SysTick_Handler+0x3ca>
 800196e:	2111      	movs	r1, #17
 8001970:	4871      	ldr	r0, [pc, #452]	; (8001b38 <SysTick_Handler+0x58c>)
 8001972:	f7ff fdff 	bl	8001574 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001976:	2202      	movs	r2, #2
 8001978:	2100      	movs	r1, #0
 800197a:	486e      	ldr	r0, [pc, #440]	; (8001b34 <SysTick_Handler+0x588>)
 800197c:	f00c fcc6 	bl	800e30c <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001980:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <SysTick_Handler+0x588>)
 8001982:	2200      	movs	r2, #0
 8001984:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001986:	e2ae      	b.n	8001ee6 <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001988:	2204      	movs	r2, #4
 800198a:	2100      	movs	r1, #0
 800198c:	4869      	ldr	r0, [pc, #420]	; (8001b34 <SysTick_Handler+0x588>)
 800198e:	f00c fcbd 	bl	800e30c <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001992:	4b66      	ldr	r3, [pc, #408]	; (8001b2c <SysTick_Handler+0x580>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <SysTick_Handler+0x3f6>
 800199a:	2115      	movs	r1, #21
 800199c:	4867      	ldr	r0, [pc, #412]	; (8001b3c <SysTick_Handler+0x590>)
 800199e:	f7ff fde9 	bl	8001574 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 80019a2:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <SysTick_Handler+0x588>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	819a      	strh	r2, [r3, #12]
			 break;
 80019a8:	e29d      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 80019aa:	4b60      	ldr	r3, [pc, #384]	; (8001b2c <SysTick_Handler+0x580>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <SysTick_Handler+0x40e>
 80019b2:	2113      	movs	r1, #19
 80019b4:	4862      	ldr	r0, [pc, #392]	; (8001b40 <SysTick_Handler+0x594>)
 80019b6:	f7ff fddd 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019ba:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <SysTick_Handler+0x588>)
 80019bc:	2200      	movs	r2, #0
 80019be:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019c0:	e291      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 80019c2:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <SysTick_Handler+0x580>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <SysTick_Handler+0x426>
 80019ca:	2114      	movs	r1, #20
 80019cc:	485d      	ldr	r0, [pc, #372]	; (8001b44 <SysTick_Handler+0x598>)
 80019ce:	f7ff fdd1 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019d2:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <SysTick_Handler+0x588>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019d8:	e285      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <SysTick_Handler+0x580>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <SysTick_Handler+0x43e>
 80019e2:	2114      	movs	r1, #20
 80019e4:	4858      	ldr	r0, [pc, #352]	; (8001b48 <SysTick_Handler+0x59c>)
 80019e6:	f7ff fdc5 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <SysTick_Handler+0x588>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019f0:	e279      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 80019f2:	4b4e      	ldr	r3, [pc, #312]	; (8001b2c <SysTick_Handler+0x580>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <SysTick_Handler+0x456>
 80019fa:	2118      	movs	r1, #24
 80019fc:	4853      	ldr	r0, [pc, #332]	; (8001b4c <SysTick_Handler+0x5a0>)
 80019fe:	f7ff fdb9 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a02:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <SysTick_Handler+0x588>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001a08:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <SysTick_Handler+0x588>)
 8001a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f040 80b0 	bne.w	8001b78 <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001a18:	2302      	movs	r3, #2
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <SysTick_Handler+0x5a4>)
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	230f      	movs	r3, #15
 8001a22:	2226      	movs	r2, #38	; 0x26
 8001a24:	2104      	movs	r1, #4
 8001a26:	4843      	ldr	r0, [pc, #268]	; (8001b34 <SysTick_Handler+0x588>)
 8001a28:	f00c fb45 	bl	800e0b6 <SPI_ETH_REG>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b48      	ldr	r3, [pc, #288]	; (8001b54 <SysTick_Handler+0x5a8>)
 8001a32:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <SysTick_Handler+0x5a8>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8253 	beq.w	8001ee4 <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001a3e:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <SysTick_Handler+0x5a8>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	4a45      	ldr	r2, [pc, #276]	; (8001b58 <SysTick_Handler+0x5ac>)
 8001a44:	2100      	movs	r1, #0
 8001a46:	483b      	ldr	r0, [pc, #236]	; (8001b34 <SysTick_Handler+0x588>)
 8001a48:	f00c fdcc 	bl	800e5e4 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001a4c:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <SysTick_Handler+0x5ac>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001a56:	4837      	ldr	r0, [pc, #220]	; (8001b34 <SysTick_Handler+0x588>)
 8001a58:	f00c fba5 	bl	800e1a6 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001a5c:	2240      	movs	r2, #64	; 0x40
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4834      	ldr	r0, [pc, #208]	; (8001b34 <SysTick_Handler+0x588>)
 8001a62:	f00c fc53 	bl	800e30c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001a66:	bf00      	nop
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4832      	ldr	r0, [pc, #200]	; (8001b34 <SysTick_Handler+0x588>)
 8001a6c:	f00c fd9d 	bl	800e5aa <eth_rd_SOCKET_CMD>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f8      	bne.n	8001a68 <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a76:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <SysTick_Handler+0x5a8>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2300      	movs	r3, #0
 8001a82:	4936      	ldr	r1, [pc, #216]	; (8001b5c <SysTick_Handler+0x5b0>)
 8001a84:	4836      	ldr	r0, [pc, #216]	; (8001b60 <SysTick_Handler+0x5b4>)
 8001a86:	f00d fadd 	bl	800f044 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a8a:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <SysTick_Handler+0x5a8>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <SysTick_Handler+0x5b8>)
 8001a92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <SysTick_Handler+0x5a8>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <SysTick_Handler+0x4f8>
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <SysTick_Handler+0x588>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <SysTick_Handler+0x5b8>)
 8001aa6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001aaa:	4619      	mov	r1, r3
 8001aac:	482c      	ldr	r0, [pc, #176]	; (8001b60 <SysTick_Handler+0x5b4>)
 8001aae:	f00a ffef 	bl	800ca90 <ModBUS_Check>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00d      	beq.n	8001ad4 <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001ab8:	482a      	ldr	r0, [pc, #168]	; (8001b64 <SysTick_Handler+0x5b8>)
 8001aba:	f00b f8eb 	bl	800cc94 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <SysTick_Handler+0x5b8>)
 8001ac0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4927      	ldr	r1, [pc, #156]	; (8001b68 <SysTick_Handler+0x5bc>)
 8001acc:	4823      	ldr	r0, [pc, #140]	; (8001b5c <SysTick_Handler+0x5b0>)
 8001ace:	f00d fab9 	bl	800f044 <CopiaVector>
 8001ad2:	e007      	b.n	8001ae4 <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <SysTick_Handler+0x580>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <SysTick_Handler+0x538>
 8001adc:	2111      	movs	r1, #17
 8001ade:	4823      	ldr	r0, [pc, #140]	; (8001b6c <SysTick_Handler+0x5c0>)
 8001ae0:	f7ff fd48 	bl	8001574 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <SysTick_Handler+0x5b8>)
 8001ae6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <SysTick_Handler+0x5c4>)
 8001aee:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <SysTick_Handler+0x5c4>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <SysTick_Handler+0x5c8>)
 8001af6:	2100      	movs	r1, #0
 8001af8:	480e      	ldr	r0, [pc, #56]	; (8001b34 <SysTick_Handler+0x588>)
 8001afa:	f00c fe43 	bl	800e784 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <SysTick_Handler+0x5c8>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f240 4124 	movw	r1, #1060	; 0x424
 8001b08:	480a      	ldr	r0, [pc, #40]	; (8001b34 <SysTick_Handler+0x588>)
 8001b0a:	f00c fb4c 	bl	800e1a6 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001b0e:	2220      	movs	r2, #32
 8001b10:	2100      	movs	r1, #0
 8001b12:	4808      	ldr	r0, [pc, #32]	; (8001b34 <SysTick_Handler+0x588>)
 8001b14:	f00c fbfa 	bl	800e30c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001b18:	bf00      	nop
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <SysTick_Handler+0x588>)
 8001b1e:	f00c fd44 	bl	800e5aa <eth_rd_SOCKET_CMD>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f8      	bne.n	8001b1a <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001b28:	e1dc      	b.n	8001ee4 <SysTick_Handler+0x938>
 8001b2a:	bf00      	nop
 8001b2c:	2000294c 	.word	0x2000294c
 8001b30:	08010750 	.word	0x08010750
 8001b34:	20002954 	.word	0x20002954
 8001b38:	08010764 	.word	0x08010764
 8001b3c:	08010778 	.word	0x08010778
 8001b40:	08010790 	.word	0x08010790
 8001b44:	080107a4 	.word	0x080107a4
 8001b48:	080107bc 	.word	0x080107bc
 8001b4c:	080107d4 	.word	0x080107d4
 8001b50:	200039c4 	.word	0x200039c4
 8001b54:	200039bc 	.word	0x200039bc
 8001b58:	200039c0 	.word	0x200039c0
 8001b5c:	20002970 	.word	0x20002970
 8001b60:	200018be 	.word	0x200018be
 8001b64:	200018ac 	.word	0x200018ac
 8001b68:	20001ac4 	.word	0x20001ac4
 8001b6c:	080107f0 	.word	0x080107f0
 8001b70:	200039c2 	.word	0x200039c2
 8001b74:	200039be 	.word	0x200039be
						if (mb_eth._w_answer==0)
 8001b78:	4bac      	ldr	r3, [pc, #688]	; (8001e2c <SysTick_Handler+0x880>)
 8001b7a:	7a1b      	ldrb	r3, [r3, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d167      	bne.n	8001c50 <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001b80:	4bab      	ldr	r3, [pc, #684]	; (8001e30 <SysTick_Handler+0x884>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001b86:	4baa      	ldr	r3, [pc, #680]	; (8001e30 <SysTick_Handler+0x884>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001b8c:	4ba8      	ldr	r3, [pc, #672]	; (8001e30 <SysTick_Handler+0x884>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001b92:	4ba7      	ldr	r3, [pc, #668]	; (8001e30 <SysTick_Handler+0x884>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001b98:	4ba5      	ldr	r3, [pc, #660]	; (8001e30 <SysTick_Handler+0x884>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001ba0:	4ba3      	ldr	r3, [pc, #652]	; (8001e30 <SysTick_Handler+0x884>)
 8001ba2:	2206      	movs	r2, #6
 8001ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001ba8:	4ba1      	ldr	r3, [pc, #644]	; (8001e30 <SysTick_Handler+0x884>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001bb0:	4b9f      	ldr	r3, [pc, #636]	; (8001e30 <SysTick_Handler+0x884>)
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001bb8:	4b9d      	ldr	r3, [pc, #628]	; (8001e30 <SysTick_Handler+0x884>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001bc0:	4b9b      	ldr	r3, [pc, #620]	; (8001e30 <SysTick_Handler+0x884>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001bc8:	4b99      	ldr	r3, [pc, #612]	; (8001e30 <SysTick_Handler+0x884>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001bd0:	4b97      	ldr	r3, [pc, #604]	; (8001e30 <SysTick_Handler+0x884>)
 8001bd2:	220a      	movs	r2, #10
 8001bd4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001bd8:	4b96      	ldr	r3, [pc, #600]	; (8001e34 <SysTick_Handler+0x888>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001bde:	220f      	movs	r2, #15
 8001be0:	2100      	movs	r1, #0
 8001be2:	4892      	ldr	r0, [pc, #584]	; (8001e2c <SysTick_Handler+0x880>)
 8001be4:	f00a ffff 	bl	800cbe6 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001be8:	2300      	movs	r3, #0
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2300      	movs	r3, #0
 8001bee:	220c      	movs	r2, #12
 8001bf0:	4991      	ldr	r1, [pc, #580]	; (8001e38 <SysTick_Handler+0x88c>)
 8001bf2:	4892      	ldr	r0, [pc, #584]	; (8001e3c <SysTick_Handler+0x890>)
 8001bf4:	f00d fa26 	bl	800f044 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001bf8:	4b8e      	ldr	r3, [pc, #568]	; (8001e34 <SysTick_Handler+0x888>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	4a90      	ldr	r2, [pc, #576]	; (8001e40 <SysTick_Handler+0x894>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	488b      	ldr	r0, [pc, #556]	; (8001e30 <SysTick_Handler+0x884>)
 8001c02:	f00c fdbf 	bl	800e784 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001c06:	4b8e      	ldr	r3, [pc, #568]	; (8001e40 <SysTick_Handler+0x894>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f240 4124 	movw	r1, #1060	; 0x424
 8001c10:	4887      	ldr	r0, [pc, #540]	; (8001e30 <SysTick_Handler+0x884>)
 8001c12:	f00c fac8 	bl	800e1a6 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001c16:	2220      	movs	r2, #32
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4885      	ldr	r0, [pc, #532]	; (8001e30 <SysTick_Handler+0x884>)
 8001c1c:	f00c fb76 	bl	800e30c <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c20:	bf00      	nop
 8001c22:	2100      	movs	r1, #0
 8001c24:	4882      	ldr	r0, [pc, #520]	; (8001e30 <SysTick_Handler+0x884>)
 8001c26:	f00c fcc0 	bl	800e5aa <eth_rd_SOCKET_CMD>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f8      	bne.n	8001c22 <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001c30:	4b7e      	ldr	r3, [pc, #504]	; (8001e2c <SysTick_Handler+0x880>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001c36:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <SysTick_Handler+0x898>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001c3c:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <SysTick_Handler+0x89c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 814f 	beq.w	8001ee4 <SysTick_Handler+0x938>
 8001c46:	2117      	movs	r1, #23
 8001c48:	4880      	ldr	r0, [pc, #512]	; (8001e4c <SysTick_Handler+0x8a0>)
 8001c4a:	f7ff fc93 	bl	8001574 <ITM0_Write>
			 break;
 8001c4e:	e149      	b.n	8001ee4 <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001c50:	2302      	movs	r3, #2
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	4b7e      	ldr	r3, [pc, #504]	; (8001e50 <SysTick_Handler+0x8a4>)
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	230f      	movs	r3, #15
 8001c5a:	2226      	movs	r2, #38	; 0x26
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	4874      	ldr	r0, [pc, #464]	; (8001e30 <SysTick_Handler+0x884>)
 8001c60:	f00c fa29 	bl	800e0b6 <SPI_ETH_REG>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b7a      	ldr	r3, [pc, #488]	; (8001e54 <SysTick_Handler+0x8a8>)
 8001c6a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001c6c:	4b79      	ldr	r3, [pc, #484]	; (8001e54 <SysTick_Handler+0x8a8>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8137 	beq.w	8001ee4 <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001c76:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <SysTick_Handler+0x8a8>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	4a77      	ldr	r2, [pc, #476]	; (8001e58 <SysTick_Handler+0x8ac>)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	486c      	ldr	r0, [pc, #432]	; (8001e30 <SysTick_Handler+0x884>)
 8001c80:	f00c fcb0 	bl	800e5e4 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001c84:	4b74      	ldr	r3, [pc, #464]	; (8001e58 <SysTick_Handler+0x8ac>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001c8e:	4868      	ldr	r0, [pc, #416]	; (8001e30 <SysTick_Handler+0x884>)
 8001c90:	f00c fa89 	bl	800e1a6 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	2100      	movs	r1, #0
 8001c98:	4865      	ldr	r0, [pc, #404]	; (8001e30 <SysTick_Handler+0x884>)
 8001c9a:	f00c fb37 	bl	800e30c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c9e:	bf00      	nop
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4863      	ldr	r0, [pc, #396]	; (8001e30 <SysTick_Handler+0x884>)
 8001ca4:	f00c fc81 	bl	800e5aa <eth_rd_SOCKET_CMD>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f8      	bne.n	8001ca0 <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001cae:	4b69      	ldr	r3, [pc, #420]	; (8001e54 <SysTick_Handler+0x8a8>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	4960      	ldr	r1, [pc, #384]	; (8001e3c <SysTick_Handler+0x890>)
 8001cbc:	4867      	ldr	r0, [pc, #412]	; (8001e5c <SysTick_Handler+0x8b0>)
 8001cbe:	f00d f9c1 	bl	800f044 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001cc2:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <SysTick_Handler+0x8a8>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <SysTick_Handler+0x880>)
 8001cca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001cce:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <SysTick_Handler+0x8a8>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <SysTick_Handler+0x730>
 8001cd6:	4b56      	ldr	r3, [pc, #344]	; (8001e30 <SysTick_Handler+0x884>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <SysTick_Handler+0x880>)
 8001cde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	485d      	ldr	r0, [pc, #372]	; (8001e5c <SysTick_Handler+0x8b0>)
 8001ce6:	f00a fed3 	bl	800ca90 <ModBUS_Check>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d024      	beq.n	8001d3a <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001cf0:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <SysTick_Handler+0x880>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001cf6:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <SysTick_Handler+0x898>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001cfc:	484b      	ldr	r0, [pc, #300]	; (8001e2c <SysTick_Handler+0x880>)
 8001cfe:	f00a ffc9 	bl	800cc94 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <SysTick_Handler+0x880>)
 8001d04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	4953      	ldr	r1, [pc, #332]	; (8001e5c <SysTick_Handler+0x8b0>)
 8001d10:	4853      	ldr	r0, [pc, #332]	; (8001e60 <SysTick_Handler+0x8b4>)
 8001d12:	f00d f997 	bl	800f044 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001d16:	2300      	movs	r3, #0
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	4951      	ldr	r1, [pc, #324]	; (8001e64 <SysTick_Handler+0x8b8>)
 8001d20:	4851      	ldr	r0, [pc, #324]	; (8001e68 <SysTick_Handler+0x8bc>)
 8001d22:	f00d f98f 	bl	800f044 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001d26:	4b48      	ldr	r3, [pc, #288]	; (8001e48 <SysTick_Handler+0x89c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80da 	beq.w	8001ee4 <SysTick_Handler+0x938>
 8001d30:	2117      	movs	r1, #23
 8001d32:	484e      	ldr	r0, [pc, #312]	; (8001e6c <SysTick_Handler+0x8c0>)
 8001d34:	f7ff fc1e 	bl	8001574 <ITM0_Write>
			 break;
 8001d38:	e0d4      	b.n	8001ee4 <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <SysTick_Handler+0x89c>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 80d0 	beq.w	8001ee4 <SysTick_Handler+0x938>
 8001d44:	2111      	movs	r1, #17
 8001d46:	484a      	ldr	r0, [pc, #296]	; (8001e70 <SysTick_Handler+0x8c4>)
 8001d48:	f7ff fc14 	bl	8001574 <ITM0_Write>
			 break;
 8001d4c:	e0ca      	b.n	8001ee4 <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <SysTick_Handler+0x89c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <SysTick_Handler+0x7b2>
 8001d56:	2115      	movs	r1, #21
 8001d58:	4846      	ldr	r0, [pc, #280]	; (8001e74 <SysTick_Handler+0x8c8>)
 8001d5a:	f7ff fc0b 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <SysTick_Handler+0x884>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d64:	e0bf      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001d66:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <SysTick_Handler+0x89c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <SysTick_Handler+0x7ca>
 8001d6e:	2114      	movs	r1, #20
 8001d70:	4841      	ldr	r0, [pc, #260]	; (8001e78 <SysTick_Handler+0x8cc>)
 8001d72:	f7ff fbff 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <SysTick_Handler+0x884>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d7c:	e0b3      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001d7e:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <SysTick_Handler+0x89c>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <SysTick_Handler+0x7e2>
 8001d86:	2116      	movs	r1, #22
 8001d88:	483c      	ldr	r0, [pc, #240]	; (8001e7c <SysTick_Handler+0x8d0>)
 8001d8a:	f7ff fbf3 	bl	8001574 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001d8e:	2208      	movs	r2, #8
 8001d90:	2100      	movs	r1, #0
 8001d92:	4827      	ldr	r0, [pc, #156]	; (8001e30 <SysTick_Handler+0x884>)
 8001d94:	f00c faba 	bl	800e30c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001d98:	bf00      	nop
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <SysTick_Handler+0x8a4>)
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	230f      	movs	r3, #15
 8001da4:	2201      	movs	r2, #1
 8001da6:	2104      	movs	r1, #4
 8001da8:	4821      	ldr	r0, [pc, #132]	; (8001e30 <SysTick_Handler+0x884>)
 8001daa:	f00c f984 	bl	800e0b6 <SPI_ETH_REG>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f2      	bne.n	8001d9a <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <SysTick_Handler+0x884>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001dba:	e094      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <SysTick_Handler+0x89c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <SysTick_Handler+0x820>
 8001dc4:	2117      	movs	r1, #23
 8001dc6:	482e      	ldr	r0, [pc, #184]	; (8001e80 <SysTick_Handler+0x8d4>)
 8001dc8:	f7ff fbd4 	bl	8001574 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001dcc:	2208      	movs	r2, #8
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4817      	ldr	r0, [pc, #92]	; (8001e30 <SysTick_Handler+0x884>)
 8001dd2:	f00c fa9b 	bl	800e30c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001dd6:	bf00      	nop
 8001dd8:	2301      	movs	r3, #1
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <SysTick_Handler+0x8a4>)
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	230f      	movs	r3, #15
 8001de2:	2201      	movs	r2, #1
 8001de4:	2104      	movs	r1, #4
 8001de6:	4812      	ldr	r0, [pc, #72]	; (8001e30 <SysTick_Handler+0x884>)
 8001de8:	f00c f965 	bl	800e0b6 <SPI_ETH_REG>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f2      	bne.n	8001dd8 <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <SysTick_Handler+0x884>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001df8:	e075      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <SysTick_Handler+0x89c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <SysTick_Handler+0x85e>
 8001e02:	2115      	movs	r1, #21
 8001e04:	481f      	ldr	r0, [pc, #124]	; (8001e84 <SysTick_Handler+0x8d8>)
 8001e06:	f7ff fbb5 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <SysTick_Handler+0x884>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e10:	e069      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <SysTick_Handler+0x89c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <SysTick_Handler+0x876>
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	481a      	ldr	r0, [pc, #104]	; (8001e88 <SysTick_Handler+0x8dc>)
 8001e1e:	f7ff fba9 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e22:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <SysTick_Handler+0x884>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e28:	e05d      	b.n	8001ee6 <SysTick_Handler+0x93a>
 8001e2a:	bf00      	nop
 8001e2c:	200018ac 	.word	0x200018ac
 8001e30:	20002954 	.word	0x20002954
 8001e34:	200039c2 	.word	0x200039c2
 8001e38:	20001ac4 	.word	0x20001ac4
 8001e3c:	20002970 	.word	0x20002970
 8001e40:	200039be 	.word	0x200039be
 8001e44:	20004038 	.word	0x20004038
 8001e48:	2000294c 	.word	0x2000294c
 8001e4c:	08010800 	.word	0x08010800
 8001e50:	200039c4 	.word	0x200039c4
 8001e54:	200039bc 	.word	0x200039bc
 8001e58:	200039c0 	.word	0x200039c0
 8001e5c:	200018be 	.word	0x200018be
 8001e60:	20003170 	.word	0x20003170
 8001e64:	20001cd0 	.word	0x20001cd0
 8001e68:	20002320 	.word	0x20002320
 8001e6c:	08010814 	.word	0x08010814
 8001e70:	080107f0 	.word	0x080107f0
 8001e74:	08010828 	.word	0x08010828
 8001e78:	08010840 	.word	0x08010840
 8001e7c:	08010858 	.word	0x08010858
 8001e80:	08010870 	.word	0x08010870
 8001e84:	08010888 	.word	0x08010888
 8001e88:	080108a0 	.word	0x080108a0
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001e8c:	4b62      	ldr	r3, [pc, #392]	; (8002018 <SysTick_Handler+0xa6c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <SysTick_Handler+0x8f0>
 8001e94:	2112      	movs	r1, #18
 8001e96:	4861      	ldr	r0, [pc, #388]	; (800201c <SysTick_Handler+0xa70>)
 8001e98:	f7ff fb6c 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e9c:	4b60      	ldr	r3, [pc, #384]	; (8002020 <SysTick_Handler+0xa74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ea2:	e020      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001ea4:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <SysTick_Handler+0xa6c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <SysTick_Handler+0x908>
 8001eac:	2113      	movs	r1, #19
 8001eae:	485d      	ldr	r0, [pc, #372]	; (8002024 <SysTick_Handler+0xa78>)
 8001eb0:	f7ff fb60 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001eb4:	4b5a      	ldr	r3, [pc, #360]	; (8002020 <SysTick_Handler+0xa74>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001eba:	e014      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001ebc:	4b56      	ldr	r3, [pc, #344]	; (8002018 <SysTick_Handler+0xa6c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <SysTick_Handler+0x920>
 8001ec4:	2111      	movs	r1, #17
 8001ec6:	4858      	ldr	r0, [pc, #352]	; (8002028 <SysTick_Handler+0xa7c>)
 8001ec8:	f7ff fb54 	bl	8001574 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ecc:	4b54      	ldr	r3, [pc, #336]	; (8002020 <SysTick_Handler+0xa74>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ed2:	e008      	b.n	8001ee6 <SysTick_Handler+0x93a>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001ed4:	4852      	ldr	r0, [pc, #328]	; (8002020 <SysTick_Handler+0xa74>)
 8001ed6:	f00c f8c7 	bl	800e068 <SPI_ETH>
 8001eda:	e004      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 default:
 8001edc:	bf00      	nop
 8001ede:	e002      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 break;
 8001ee0:	bf00      	nop
 8001ee2:	e000      	b.n	8001ee6 <SysTick_Handler+0x93a>
			 break;
 8001ee4:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001ee6:	4b51      	ldr	r3, [pc, #324]	; (800202c <SysTick_Handler+0xa80>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d102      	bne.n	8001ef4 <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001eee:	4b4f      	ldr	r3, [pc, #316]	; (800202c <SysTick_Handler+0xa80>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <SysTick_Handler+0xa84>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d104      	bne.n	8001f06 <SysTick_Handler+0x95a>
 8001efc:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <SysTick_Handler+0xa88>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <SysTick_Handler+0xa88>)
 8001f04:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001f06:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <SysTick_Handler+0xa88>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	dd0f      	ble.n	8001f2e <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001f0e:	4b49      	ldr	r3, [pc, #292]	; (8002034 <SysTick_Handler+0xa88>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001f14:	4b48      	ldr	r3, [pc, #288]	; (8002038 <SysTick_Handler+0xa8c>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001f1a:	4b45      	ldr	r3, [pc, #276]	; (8002030 <SysTick_Handler+0xa84>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001f20:	4b46      	ldr	r3, [pc, #280]	; (800203c <SysTick_Handler+0xa90>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a46      	ldr	r2, [pc, #280]	; (8002040 <SysTick_Handler+0xa94>)
 8001f26:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001f28:	4b44      	ldr	r3, [pc, #272]	; (800203c <SysTick_Handler+0xa90>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2e:	f000 fe51 	bl	8002bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <SysTick_Handler+0xa98>)
 8001f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d105      	bne.n	8001f48 <SysTick_Handler+0x99c>
	{
		ticks++;
 8001f3c:	4b42      	ldr	r3, [pc, #264]	; (8002048 <SysTick_Handler+0xa9c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	4a41      	ldr	r2, [pc, #260]	; (8002048 <SysTick_Handler+0xa9c>)
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e002      	b.n	8001f4e <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8001f48:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <SysTick_Handler+0xa9c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <SysTick_Handler+0xa98>)
 8001f50:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d158      	bne.n	800200a <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8001f58:	4b3c      	ldr	r3, [pc, #240]	; (800204c <SysTick_Handler+0xaa0>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d017      	beq.n	8001f90 <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <SysTick_Handler+0xa98>)
 8001f62:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d006      	beq.n	8001f78 <SysTick_Handler+0x9cc>
 8001f6a:	4b36      	ldr	r3, [pc, #216]	; (8002044 <SysTick_Handler+0xa98>)
 8001f6c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001f70:	3301      	adds	r3, #1
 8001f72:	4a34      	ldr	r2, [pc, #208]	; (8002044 <SysTick_Handler+0xa98>)
 8001f74:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <SysTick_Handler+0xa98>)
 8001f7a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d106      	bne.n	8001f90 <SysTick_Handler+0x9e4>
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <SysTick_Handler+0xa98>)
 8001f84:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <SysTick_Handler+0xa98>)
 8001f8c:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <SysTick_Handler+0xa98>)
 8001f92:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d018      	beq.n	8001fcc <SysTick_Handler+0xa20>
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <SysTick_Handler+0xa98>)
 8001f9c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001fa0:	f241 527c 	movw	r2, #5500	; 0x157c
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	dd11      	ble.n	8001fcc <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <SysTick_Handler+0xaa0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <SysTick_Handler+0xaa4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f242 020c 	movw	r2, #8204	; 0x200c
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d107      	bne.n	8001fcc <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4925      	ldr	r1, [pc, #148]	; (8002054 <SysTick_Handler+0xaa8>)
 8001fc0:	4823      	ldr	r0, [pc, #140]	; (8002050 <SysTick_Handler+0xaa4>)
 8001fc2:	f003 fbb2 	bl	800572a <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <SysTick_Handler+0xaac>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
			}
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <SysTick_Handler+0xa98>)
 8001fce:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d11d      	bne.n	8002012 <SysTick_Handler+0xa66>
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <SysTick_Handler+0xa98>)
 8001fd8:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001fdc:	f245 0214 	movw	r2, #20500	; 0x5014
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	dd16      	ble.n	8002012 <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <SysTick_Handler+0xaa0>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <SysTick_Handler+0xaa4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f242 020c 	movw	r2, #8204	; 0x200c
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10c      	bne.n	8002012 <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4916      	ldr	r1, [pc, #88]	; (8002054 <SysTick_Handler+0xaa8>)
 8001ffc:	4814      	ldr	r0, [pc, #80]	; (8002050 <SysTick_Handler+0xaa4>)
 8001ffe:	f003 fb94 	bl	800572a <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <SysTick_Handler+0xaac>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8002008:	e003      	b.n	8002012 <SysTick_Handler+0xa66>
		wf._ticks=0;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <SysTick_Handler+0xa98>)
 800200c:	2200      	movs	r2, #0
 800200e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000294c 	.word	0x2000294c
 800201c:	080108b4 	.word	0x080108b4
 8002020:	20002954 	.word	0x20002954
 8002024:	080108c8 	.word	0x080108c8
 8002028:	080108dc 	.word	0x080108dc
 800202c:	2000034c 	.word	0x2000034c
 8002030:	20003a0a 	.word	0x20003a0a
 8002034:	20004048 	.word	0x20004048
 8002038:	2000404c 	.word	0x2000404c
 800203c:	20004044 	.word	0x20004044
 8002040:	20004050 	.word	0x20004050
 8002044:	20000b58 	.word	0x20000b58
 8002048:	2000403c 	.word	0x2000403c
 800204c:	20003a0b 	.word	0x20003a0b
 8002050:	2000027c 	.word	0x2000027c
 8002054:	2000401c 	.word	0x2000401c
 8002058:	20003a08 	.word	0x20003a08

0800205c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <HAL_UART_ErrorCallback+0x98>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d11c      	bne.n	80020a8 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]

			 wf._debug_count9++;
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_UART_ErrorCallback+0x9c>)
 8002078:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 800207c:	3301      	adds	r3, #1
 800207e:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <HAL_UART_ErrorCallback+0x9c>)
 8002080:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	613b      	str	r3, [r7, #16]

		 HAL_UART_DeInit(ERRUART);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f003 fa42 	bl	800551e <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 800209a:	f7ff f965 	bl	8001368 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800209e:	2201      	movs	r2, #1
 80020a0:	4916      	ldr	r1, [pc, #88]	; (80020fc <HAL_UART_ErrorCallback+0xa0>)
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f003 fb41 	bl	800572a <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_UART_ErrorCallback+0xa4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11c      	bne.n	80020ec <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]

			 wf._debug_count9++;
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_UART_ErrorCallback+0x9c>)
 80020bc:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <HAL_UART_ErrorCallback+0x9c>)
 80020c4:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60bb      	str	r3, [r7, #8]

		 HAL_UART_DeInit(ERRUART);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f003 fa20 	bl	800551e <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80020de:	f7ff f96d 	bl	80013bc <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80020e2:	2201      	movs	r2, #1
 80020e4:	4905      	ldr	r1, [pc, #20]	; (80020fc <HAL_UART_ErrorCallback+0xa0>)
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f003 fb1f 	bl	800572a <HAL_UART_Receive_IT>
	}
}
 80020ec:	bf00      	nop
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40011000 	.word	0x40011000
 80020f8:	20000b58 	.word	0x20000b58
 80020fc:	2000401c 	.word	0x2000401c
 8002100:	40004400 	.word	0x40004400

08002104 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2c      	ldr	r2, [pc, #176]	; (80021c4 <HAL_UART_RxCpltCallback+0xc0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d123      	bne.n	800215e <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <HAL_UART_RxCpltCallback+0xc4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <HAL_UART_RxCpltCallback+0xc8>)
 800211c:	7811      	ldrb	r1, [r2, #0]
 800211e:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <HAL_UART_RxCpltCallback+0xcc>)
 8002120:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_UART_RxCpltCallback+0xc4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <HAL_UART_RxCpltCallback+0xc4>)
 800212a:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_UART_RxCpltCallback+0xc4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002134:	db03      	blt.n	800213e <HAL_UART_RxCpltCallback+0x3a>
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_UART_RxCpltCallback+0xc4>)
 8002138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800213c:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 800213e:	2100      	movs	r1, #0
 8002140:	4824      	ldr	r0, [pc, #144]	; (80021d4 <HAL_UART_RxCpltCallback+0xd0>)
 8002142:	f002 f9f3 	bl	800452c <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8002146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800214a:	2201      	movs	r2, #1
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <HAL_UART_RxCpltCallback+0xd4>)
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8002154:	2201      	movs	r2, #1
 8002156:	491d      	ldr	r1, [pc, #116]	; (80021cc <HAL_UART_RxCpltCallback+0xc8>)
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f003 fae6 	bl	800572a <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <HAL_UART_RxCpltCallback+0xd8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d128      	bne.n	80021ba <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_UART_RxCpltCallback+0xdc>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_UART_RxCpltCallback+0xe0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2d1      	uxtb	r1, r2
 8002172:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_UART_RxCpltCallback+0xe4>)
 8002174:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_UART_RxCpltCallback+0xe0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_UART_RxCpltCallback+0xe0>)
 800217e:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_UART_RxCpltCallback+0xe0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002188:	db03      	blt.n	8002192 <HAL_UART_RxCpltCallback+0x8e>
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_UART_RxCpltCallback+0xe0>)
 800218c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002190:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8002192:	2201      	movs	r2, #1
 8002194:	2102      	movs	r1, #2
 8002196:	4815      	ldr	r0, [pc, #84]	; (80021ec <HAL_UART_RxCpltCallback+0xe8>)
 8002198:	f001 f99e 	bl	80034d8 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 800219c:	2100      	movs	r1, #0
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <HAL_UART_RxCpltCallback+0xec>)
 80021a0:	f002 f9c4 	bl	800452c <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_UART_RxCpltCallback+0xf0>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_UART_RxCpltCallback+0xf4>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 80021b0:	2201      	movs	r2, #1
 80021b2:	490b      	ldr	r1, [pc, #44]	; (80021e0 <HAL_UART_RxCpltCallback+0xdc>)
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f003 fab8 	bl	800572a <HAL_UART_Receive_IT>
		 }
 }
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40011000 	.word	0x40011000
 80021c8:	20004054 	.word	0x20004054
 80021cc:	2000401c 	.word	0x2000401c
 80021d0:	20003a18 	.word	0x20003a18
 80021d4:	200001ec 	.word	0x200001ec
 80021d8:	20003a08 	.word	0x20003a08
 80021dc:	40004400 	.word	0x40004400
 80021e0:	20004020 	.word	0x20004020
 80021e4:	20004058 	.word	0x20004058
 80021e8:	20003c18 	.word	0x20003c18
 80021ec:	40020000 	.word	0x40020000
 80021f0:	20000234 	.word	0x20000234
 80021f4:	40000400 	.word	0x40000400
 80021f8:	20003a09 	.word	0x20003a09

080021fc <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af02      	add	r7, sp, #8
 8002202:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d12d      	bne.n	800226a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800220e:	2100      	movs	r1, #0
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f002 fa89 	bl	8004728 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 800221c:	4b38      	ldr	r3, [pc, #224]	; (8002300 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a38      	ldr	r2, [pc, #224]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002228:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 800222a:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002238:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2301      	movs	r3, #1
 8002242:	4932      	ldr	r1, [pc, #200]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002244:	4833      	ldr	r0, [pc, #204]	; (8002314 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002246:	f00c fefd 	bl	800f044 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 800224a:	2201      	movs	r2, #1
 800224c:	4932      	ldr	r1, [pc, #200]	; (8002318 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 800224e:	4833      	ldr	r0, [pc, #204]	; (800231c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8002250:	f003 fa6b 	bl	800572a <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002254:	4b32      	ldr	r3, [pc, #200]	; (8002320 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8002256:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 800225e:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	482b      	ldr	r0, [pc, #172]	; (8002314 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002266:	f7ff f985 	bl	8001574 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d13f      	bne.n	80022f4 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002274:	2100      	movs	r1, #0
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f002 fa56 	bl	8004728 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2102      	movs	r1, #2
 8002280:	4829      	ldr	r0, [pc, #164]	; (8002328 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8002282:	f001 f929 	bl	80034d8 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a28      	ldr	r2, [pc, #160]	; (8002338 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002298:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80022a0:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2301      	movs	r3, #1
 80022b2:	4922      	ldr	r1, [pc, #136]	; (800233c <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80022b4:	4822      	ldr	r0, [pc, #136]	; (8002340 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 80022b6:	f00c fec5 	bl	800f044 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a21      	ldr	r2, [pc, #132]	; (8002344 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80022c0:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80022c4:	2201      	movs	r2, #1
 80022c6:	4920      	ldr	r1, [pc, #128]	; (8002348 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80022c8:	4820      	ldr	r0, [pc, #128]	; (800234c <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80022ca:	f003 fa2e 	bl	800572a <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80022d0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10d      	bne.n	80022f4 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 80022d8:	2117      	movs	r1, #23
 80022da:	481d      	ldr	r0, [pc, #116]	; (8002350 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80022dc:	f7ff f94a 	bl	8001574 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	4815      	ldr	r0, [pc, #84]	; (800233c <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80022e8:	f7ff f944 	bl	8001574 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 80022ec:	2102      	movs	r1, #2
 80022ee:	4819      	ldr	r0, [pc, #100]	; (8002354 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80022f0:	f7ff f940 	bl	8001574 <ITM0_Write>
				 }
		}
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20003a0c 	.word	0x20003a0c
 8002300:	20003a08 	.word	0x20003a08
 8002304:	20004054 	.word	0x20004054
 8002308:	20004028 	.word	0x20004028
 800230c:	20003a18 	.word	0x20003a18
 8002310:	20004018 	.word	0x20004018
 8002314:	20003e18 	.word	0x20003e18
 8002318:	2000401c 	.word	0x2000401c
 800231c:	2000027c 	.word	0x2000027c
 8002320:	20000b58 	.word	0x20000b58
 8002324:	40000400 	.word	0x40000400
 8002328:	40020000 	.word	0x40020000
 800232c:	20003a0d 	.word	0x20003a0d
 8002330:	20003a09 	.word	0x20003a09
 8002334:	20004058 	.word	0x20004058
 8002338:	2000402c 	.word	0x2000402c
 800233c:	20003c18 	.word	0x20003c18
 8002340:	200003a6 	.word	0x200003a6
 8002344:	20000350 	.word	0x20000350
 8002348:	20004020 	.word	0x20004020
 800234c:	200002c0 	.word	0x200002c0
 8002350:	080108f0 	.word	0x080108f0
 8002354:	08010908 	.word	0x08010908

08002358 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <ESP8266_HW_Reset+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <ESP8266_HW_Reset+0x44>)
 800236a:	f001 f8b5 	bl	80034d8 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 800236e:	2115      	movs	r1, #21
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <ESP8266_HW_Reset+0x48>)
 8002372:	f7ff f8ff 	bl	8001574 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 8002376:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800237a:	f000 fc4b 	bl	8002c14 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 800237e:	210f      	movs	r1, #15
 8002380:	4808      	ldr	r0, [pc, #32]	; (80023a4 <ESP8266_HW_Reset+0x4c>)
 8002382:	f7ff f8f7 	bl	8001574 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 8002386:	2201      	movs	r2, #1
 8002388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <ESP8266_HW_Reset+0x44>)
 800238e:	f001 f8a3 	bl	80034d8 <HAL_GPIO_WritePin>
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20003a05 	.word	0x20003a05
 800239c:	40020000 	.word	0x40020000
 80023a0:	0801071c 	.word	0x0801071c
 80023a4:	0801090c 	.word	0x0801090c

080023a8 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af06      	add	r7, sp, #24
 80023ae:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 80023b0:	2364      	movs	r3, #100	; 0x64
 80023b2:	220c      	movs	r2, #12
 80023b4:	4945      	ldr	r1, [pc, #276]	; (80024cc <ESP8266_HW_Init+0x124>)
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f003 f8e0 	bl	800557c <HAL_UART_Transmit>
		  HAL_Delay(500);
 80023bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023c0:	f000 fc28 	bl	8002c14 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80023c4:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <ESP8266_HW_Init+0x128>)
 80023c6:	2205      	movs	r2, #5
 80023c8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <ESP8266_HW_Init+0x12c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a3f      	ldr	r2, [pc, #252]	; (80024d0 <ESP8266_HW_Init+0x128>)
 80023d2:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80023d6:	e00e      	b.n	80023f6 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80023d8:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <ESP8266_HW_Init+0x12c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a3c      	ldr	r2, [pc, #240]	; (80024d0 <ESP8266_HW_Init+0x128>)
 80023de:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <ESP8266_HW_Init+0x130>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f241 3287 	movw	r2, #4999	; 0x1387
 80023ea:	4293      	cmp	r3, r2
 80023ec:	dd03      	ble.n	80023f6 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80023ee:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <ESP8266_HW_Init+0x134>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
			  		 break;
 80023f4:	e014      	b.n	8002420 <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80023f6:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <ESP8266_HW_Init+0x138>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	9205      	str	r2, [sp, #20]
 80023fc:	9304      	str	r3, [sp, #16]
 80023fe:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <ESP8266_HW_Init+0x13c>)
 8002400:	9303      	str	r3, [sp, #12]
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <ESP8266_HW_Init+0x140>)
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	4b39      	ldr	r3, [pc, #228]	; (80024ec <ESP8266_HW_Init+0x144>)
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <ESP8266_HW_Init+0x148>)
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <ESP8266_HW_Init+0x14c>)
 8002410:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <ESP8266_HW_Init+0x150>)
 8002412:	493a      	ldr	r1, [pc, #232]	; (80024fc <ESP8266_HW_Init+0x154>)
 8002414:	483a      	ldr	r0, [pc, #232]	; (8002500 <ESP8266_HW_Init+0x158>)
 8002416:	f00c fa99 	bl	800e94c <FT_String_ND>
 800241a:	4603      	mov	r3, r0
 800241c:	2b01      	cmp	r3, #1
 800241e:	d1db      	bne.n	80023d8 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8002420:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <ESP8266_HW_Init+0x134>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d12b      	bne.n	8002480 <ESP8266_HW_Init+0xd8>
		  {
			  wf._n_fcomp=strlen("ready");
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <ESP8266_HW_Init+0x128>)
 800242a:	2205      	movs	r2, #5
 800242c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 8002430:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <ESP8266_HW_Init+0x12c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <ESP8266_HW_Init+0x128>)
 8002436:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 800243a:	e00a      	b.n	8002452 <ESP8266_HW_Init+0xaa>
			  {
				  wf._n_orig=UART_RX_items;
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <ESP8266_HW_Init+0x12c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <ESP8266_HW_Init+0x128>)
 8002442:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <ESP8266_HW_Init+0x130>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f241 3287 	movw	r2, #4999	; 0x1387
 800244e:	4293      	cmp	r3, r2
 8002450:	dc15      	bgt.n	800247e <ESP8266_HW_Init+0xd6>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <ESP8266_HW_Init+0x138>)
 8002454:	2200      	movs	r2, #0
 8002456:	9205      	str	r2, [sp, #20]
 8002458:	9304      	str	r3, [sp, #16]
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <ESP8266_HW_Init+0x13c>)
 800245c:	9303      	str	r3, [sp, #12]
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <ESP8266_HW_Init+0x140>)
 8002460:	9302      	str	r3, [sp, #8]
 8002462:	4b22      	ldr	r3, [pc, #136]	; (80024ec <ESP8266_HW_Init+0x144>)
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <ESP8266_HW_Init+0x148>)
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <ESP8266_HW_Init+0x14c>)
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <ESP8266_HW_Init+0x150>)
 800246e:	4923      	ldr	r1, [pc, #140]	; (80024fc <ESP8266_HW_Init+0x154>)
 8002470:	4823      	ldr	r0, [pc, #140]	; (8002500 <ESP8266_HW_Init+0x158>)
 8002472:	f00c fa6b 	bl	800e94c <FT_String_ND>
 8002476:	4603      	mov	r3, r0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d1df      	bne.n	800243c <ESP8266_HW_Init+0x94>
 800247c:	e000      	b.n	8002480 <ESP8266_HW_Init+0xd8>
					 {
					 break;
 800247e:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <ESP8266_HW_Init+0x130>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f241 3287 	movw	r2, #4999	; 0x1387
 8002488:	4293      	cmp	r3, r2
 800248a:	dc06      	bgt.n	800249a <ESP8266_HW_Init+0xf2>
		  {
			  ESP_REinit=10;
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <ESP8266_HW_Init+0x15c>)
 800248e:	220a      	movs	r2, #10
 8002490:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <ESP8266_HW_Init+0x130>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e008      	b.n	80024ac <ESP8266_HW_Init+0x104>
		  }
		  else
		  {
			  ESP_REinit++;
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <ESP8266_HW_Init+0x15c>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <ESP8266_HW_Init+0x15c>)
 80024a4:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <ESP8266_HW_Init+0x130>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <ESP8266_HW_Init+0x15c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	f67f af7d 	bls.w	80023b0 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <ESP8266_HW_Init+0x15c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b0a      	cmp	r3, #10
 80024bc:	d101      	bne.n	80024c2 <ESP8266_HW_Init+0x11a>
	  {
		  return(1);
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <ESP8266_HW_Init+0x11c>
	  }
	  else
	  {
		  return(0);
 80024c2:	2300      	movs	r3, #0
	  }
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	0801091c 	.word	0x0801091c
 80024d0:	20000b58 	.word	0x20000b58
 80024d4:	20004028 	.word	0x20004028
 80024d8:	20004030 	.word	0x20004030
 80024dc:	20003a06 	.word	0x20003a06
 80024e0:	200018a0 	.word	0x200018a0
 80024e4:	200015ec 	.word	0x200015ec
 80024e8:	20004040 	.word	0x20004040
 80024ec:	20001838 	.word	0x20001838
 80024f0:	200013ec 	.word	0x200013ec
 80024f4:	20001844 	.word	0x20001844
 80024f8:	0801092c 	.word	0x0801092c
 80024fc:	20001830 	.word	0x20001830
 8002500:	20003e18 	.word	0x20003e18
 8002504:	20003a05 	.word	0x20003a05

08002508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
}
 800250e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002510:	e7fe      	b.n	8002510 <Error_Handler+0x8>
	...

08002514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_MspInit+0x4c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <HAL_MspInit+0x4c>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002528:	6453      	str	r3, [r2, #68]	; 0x44
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_MspInit+0x4c>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_MspInit+0x4c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a08      	ldr	r2, [pc, #32]	; (8002560 <HAL_MspInit+0x4c>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_MspInit+0x4c>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <HAL_SPI_MspInit+0x84>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d12b      	bne.n	80025de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_SPI_MspInit+0x88>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	4a17      	ldr	r2, [pc, #92]	; (80025ec <HAL_SPI_MspInit+0x88>)
 8002590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002594:	6453      	str	r3, [r2, #68]	; 0x44
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_SPI_MspInit+0x88>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_SPI_MspInit+0x88>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <HAL_SPI_MspInit+0x88>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <HAL_SPI_MspInit+0x88>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025be:	23e0      	movs	r3, #224	; 0xe0
 80025c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ce:	2305      	movs	r3, #5
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	4805      	ldr	r0, [pc, #20]	; (80025f0 <HAL_SPI_MspInit+0x8c>)
 80025da:	f000 fd15 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025de:	bf00      	nop
 80025e0:	3728      	adds	r7, #40	; 0x28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40013000 	.word	0x40013000
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020000 	.word	0x40020000

080025f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d116      	bne.n	8002634 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a19      	ldr	r2, [pc, #100]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	201c      	movs	r0, #28
 8002628:	f000 fc17 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800262c:	201c      	movs	r0, #28
 800262e:	f000 fc30 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002632:	e01a      	b.n	800266a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_TIM_Base_MspInit+0x84>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d115      	bne.n	800266a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	201d      	movs	r0, #29
 8002660:	f000 fbfb 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002664:	201d      	movs	r0, #29
 8002666:	f000 fc14 	bl	8002e92 <HAL_NVIC_EnableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40000400 	.word	0x40000400

0800267c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08e      	sub	sp, #56	; 0x38
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a54      	ldr	r2, [pc, #336]	; (80027ec <HAL_UART_MspInit+0x170>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d135      	bne.n	800270a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_UART_MspInit+0x174>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_UART_MspInit+0x174>)
 80026a8:	f043 0310 	orr.w	r3, r3, #16
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_UART_MspInit+0x174>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <HAL_UART_MspInit+0x174>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a4b      	ldr	r2, [pc, #300]	; (80027f0 <HAL_UART_MspInit+0x174>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <HAL_UART_MspInit+0x174>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026e8:	2307      	movs	r3, #7
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	4619      	mov	r1, r3
 80026f2:	4840      	ldr	r0, [pc, #256]	; (80027f4 <HAL_UART_MspInit+0x178>)
 80026f4:	f000 fc88 	bl	8003008 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2100      	movs	r1, #0
 80026fc:	2025      	movs	r0, #37	; 0x25
 80026fe:	f000 fbac 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002702:	2025      	movs	r0, #37	; 0x25
 8002704:	f000 fbc5 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002708:	e06b      	b.n	80027e2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <HAL_UART_MspInit+0x17c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d134      	bne.n	800277e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <HAL_UART_MspInit+0x174>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	4a34      	ldr	r2, [pc, #208]	; (80027f0 <HAL_UART_MspInit+0x174>)
 800271e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002722:	6413      	str	r3, [r2, #64]	; 0x40
 8002724:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_UART_MspInit+0x174>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <HAL_UART_MspInit+0x174>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	4a2d      	ldr	r2, [pc, #180]	; (80027f0 <HAL_UART_MspInit+0x174>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6313      	str	r3, [r2, #48]	; 0x30
 8002740:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <HAL_UART_MspInit+0x174>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800274c:	230c      	movs	r3, #12
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800275c:	2307      	movs	r3, #7
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002764:	4619      	mov	r1, r3
 8002766:	4823      	ldr	r0, [pc, #140]	; (80027f4 <HAL_UART_MspInit+0x178>)
 8002768:	f000 fc4e 	bl	8003008 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	2026      	movs	r0, #38	; 0x26
 8002772:	f000 fb72 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002776:	2026      	movs	r0, #38	; 0x26
 8002778:	f000 fb8b 	bl	8002e92 <HAL_NVIC_EnableIRQ>
}
 800277c:	e031      	b.n	80027e2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_UART_MspInit+0x180>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d12c      	bne.n	80027e2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_UART_MspInit+0x174>)
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_UART_MspInit+0x174>)
 8002792:	f043 0320 	orr.w	r3, r3, #32
 8002796:	6453      	str	r3, [r2, #68]	; 0x44
 8002798:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_UART_MspInit+0x174>)
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_UART_MspInit+0x174>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_UART_MspInit+0x174>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6313      	str	r3, [r2, #48]	; 0x30
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_UART_MspInit+0x174>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027d2:	2308      	movs	r3, #8
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	; (80027f4 <HAL_UART_MspInit+0x178>)
 80027de:	f000 fc13 	bl	8003008 <HAL_GPIO_Init>
}
 80027e2:	bf00      	nop
 80027e4:	3738      	adds	r7, #56	; 0x38
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40011000 	.word	0x40011000
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000
 80027f8:	40004400 	.word	0x40004400
 80027fc:	40011400 	.word	0x40011400

08002800 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_UART_MspDeInit+0x80>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10e      	bne.n	8002830 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002812:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_UART_MspDeInit+0x84>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <HAL_UART_MspDeInit+0x84>)
 8002818:	f023 0310 	bic.w	r3, r3, #16
 800281c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800281e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002822:	4819      	ldr	r0, [pc, #100]	; (8002888 <HAL_UART_MspDeInit+0x88>)
 8002824:	f000 fd74 	bl	8003310 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002828:	2025      	movs	r0, #37	; 0x25
 800282a:	f000 fb40 	bl	8002eae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800282e:	e022      	b.n	8002876 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a15      	ldr	r2, [pc, #84]	; (800288c <HAL_UART_MspDeInit+0x8c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_UART_MspDeInit+0x84>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_UART_MspDeInit+0x84>)
 8002840:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002846:	210c      	movs	r1, #12
 8002848:	480f      	ldr	r0, [pc, #60]	; (8002888 <HAL_UART_MspDeInit+0x88>)
 800284a:	f000 fd61 	bl	8003310 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800284e:	2026      	movs	r0, #38	; 0x26
 8002850:	f000 fb2d 	bl	8002eae <HAL_NVIC_DisableIRQ>
}
 8002854:	e00f      	b.n	8002876 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <HAL_UART_MspDeInit+0x90>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d10a      	bne.n	8002876 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_UART_MspDeInit+0x84>)
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_UART_MspDeInit+0x84>)
 8002866:	f023 0320 	bic.w	r3, r3, #32
 800286a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800286c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <HAL_UART_MspDeInit+0x88>)
 8002872:	f000 fd4d 	bl	8003310 <HAL_GPIO_DeInit>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40011000 	.word	0x40011000
 8002884:	40023800 	.word	0x40023800
 8002888:	40020000 	.word	0x40020000
 800288c:	40004400 	.word	0x40004400
 8002890:	40011400 	.word	0x40011400

08002894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <NMI_Handler+0x4>

0800289a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289e:	e7fe      	b.n	800289e <HardFault_Handler+0x4>

080028a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <MemManage_Handler+0x4>

080028a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <BusFault_Handler+0x4>

080028ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <UsageFault_Handler+0x4>

080028b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <TIM2_IRQHandler+0x10>)
 80028e2:	f002 f82d 	bl	8004940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200001ec 	.word	0x200001ec

080028f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <TIM3_IRQHandler+0x10>)
 80028f6:	f002 f823 	bl	8004940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000234 	.word	0x20000234

08002904 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <USART1_IRQHandler+0x10>)
 800290a:	f002 ff3f 	bl	800578c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	2000027c 	.word	0x2000027c

08002918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <USART2_IRQHandler+0x10>)
 800291e:	f002 ff35 	bl	800578c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200002c0 	.word	0x200002c0

0800292c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
	return 1;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_kill>:

int _kill(int pid, int sig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002946:	f00c fe85 	bl	800f654 <__errno>
 800294a:	4603      	mov	r3, r0
 800294c:	2216      	movs	r2, #22
 800294e:	601a      	str	r2, [r3, #0]
	return -1;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_exit>:

void _exit (int status)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ffe7 	bl	800293c <_kill>
	while (1) {}		/* Make sure we hang here */
 800296e:	e7fe      	b.n	800296e <_exit+0x12>

08002970 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e00a      	b.n	8002998 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002982:	f3af 8000 	nop.w
 8002986:	4601      	mov	r1, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	60ba      	str	r2, [r7, #8]
 800298e:	b2ca      	uxtb	r2, r1
 8002990:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	dbf0      	blt.n	8002982 <_read+0x12>
	}

return len;
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e009      	b.n	80029d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	60ba      	str	r2, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	dbf1      	blt.n	80029bc <_write+0x12>
	}
	return len;
 80029d8:	687b      	ldr	r3, [r7, #4]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_close>:

int _close(int file)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
	return -1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <_isatty>:

int _isatty(int file)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	return 1;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <_sbrk+0x5c>)
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <_sbrk+0x60>)
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <_sbrk+0x64>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <_sbrk+0x68>)
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <_sbrk+0x64>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a7c:	f00c fdea 	bl	800f654 <__errno>
 8002a80:	4603      	mov	r3, r0
 8002a82:	220c      	movs	r2, #12
 8002a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e009      	b.n	8002aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <_sbrk+0x64>)
 8002a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20020000 	.word	0x20020000
 8002aac:	00000400 	.word	0x00000400
 8002ab0:	20004060 	.word	0x20004060
 8002ab4:	200041b8 	.word	0x200041b8

08002ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <SystemInit+0x20>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <SystemInit+0x20>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ae0:	480d      	ldr	r0, [pc, #52]	; (8002b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ae2:	490e      	ldr	r1, [pc, #56]	; (8002b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ae4:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae8:	e002      	b.n	8002af0 <LoopCopyDataInit>

08002aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aee:	3304      	adds	r3, #4

08002af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af4:	d3f9      	bcc.n	8002aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002af8:	4c0b      	ldr	r4, [pc, #44]	; (8002b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002afc:	e001      	b.n	8002b02 <LoopFillZerobss>

08002afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b00:	3204      	adds	r2, #4

08002b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b04:	d3fb      	bcc.n	8002afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b06:	f7ff ffd7 	bl	8002ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b0a:	f00c fda9 	bl	800f660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b0e:	f7fd fdc1 	bl	8000694 <main>
  bx  lr    
 8002b12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b1c:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002b20:	080111a8 	.word	0x080111a8
  ldr r2, =_sbss
 8002b24:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002b28:	200041b4 	.word	0x200041b4

08002b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <ADC_IRQHandler>
	...

08002b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0d      	ldr	r2, [pc, #52]	; (8002b70 <HAL_Init+0x40>)
 8002b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_Init+0x40>)
 8002b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b4c:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_Init+0x40>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <HAL_Init+0x40>)
 8002b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b58:	2003      	movs	r0, #3
 8002b5a:	f000 f973 	bl	8002e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b5e:	200f      	movs	r0, #15
 8002b60:	f000 f808 	bl	8002b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b64:	f7ff fcd6 	bl	8002514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c00 	.word	0x40023c00

08002b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_InitTick+0x54>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_InitTick+0x58>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	4619      	mov	r1, r3
 8002b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f999 	bl	8002eca <HAL_SYSTICK_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00e      	b.n	8002bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b0f      	cmp	r3, #15
 8002ba6:	d80a      	bhi.n	8002bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f000 f953 	bl	8002e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <HAL_InitTick+0x5c>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e000      	b.n	8002bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000084 	.word	0x20000084
 8002bcc:	2000008c 	.word	0x2000008c
 8002bd0:	20000088 	.word	0x20000088

08002bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_IncTick+0x20>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_IncTick+0x24>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_IncTick+0x24>)
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	2000008c 	.word	0x2000008c
 8002bf8:	20004064 	.word	0x20004064

08002bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_GetTick+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20004064 	.word	0x20004064

08002c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c1c:	f7ff ffee 	bl	8002bfc <HAL_GetTick>
 8002c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d005      	beq.n	8002c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_Delay+0x44>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c3a:	bf00      	nop
 8002c3c:	f7ff ffde 	bl	8002bfc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d8f7      	bhi.n	8002c3c <HAL_Delay+0x28>
  {
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000008c 	.word	0x2000008c

08002c5c <__NVIC_SetPriorityGrouping>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8e:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	60d3      	str	r3, [r2, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_GetPriorityGrouping>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <__NVIC_GetPriorityGrouping+0x18>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 0307 	and.w	r3, r3, #7
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_EnableIRQ>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db0b      	blt.n	8002cea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <__NVIC_EnableIRQ+0x38>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_DisableIRQ>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db12      	blt.n	8002d34 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	490a      	ldr	r1, [pc, #40]	; (8002d40 <__NVIC_DisableIRQ+0x44>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	3320      	adds	r3, #32
 8002d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d28:	f3bf 8f4f 	dsb	sy
}
 8002d2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d2e:	f3bf 8f6f 	isb	sy
}
 8002d32:	bf00      	nop
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_SetPriority>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	db0a      	blt.n	8002d6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	490c      	ldr	r1, [pc, #48]	; (8002d90 <__NVIC_SetPriority+0x4c>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	0112      	lsls	r2, r2, #4
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	440b      	add	r3, r1
 8002d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d6c:	e00a      	b.n	8002d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4908      	ldr	r1, [pc, #32]	; (8002d94 <__NVIC_SetPriority+0x50>)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	3b04      	subs	r3, #4
 8002d7c:	0112      	lsls	r2, r2, #4
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	761a      	strb	r2, [r3, #24]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <NVIC_EncodePriority>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	bf28      	it	cs
 8002db6:	2304      	movcs	r3, #4
 8002db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d902      	bls.n	8002dc8 <NVIC_EncodePriority+0x30>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3b03      	subs	r3, #3
 8002dc6:	e000      	b.n	8002dca <NVIC_EncodePriority+0x32>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	401a      	ands	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de0:	f04f 31ff 	mov.w	r1, #4294967295
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43d9      	mvns	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	4313      	orrs	r3, r2
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <SysTick_Config>:
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e10:	d301      	bcc.n	8002e16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e12:	2301      	movs	r3, #1
 8002e14:	e00f      	b.n	8002e36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e16:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <SysTick_Config+0x40>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1e:	210f      	movs	r1, #15
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295
 8002e24:	f7ff ff8e 	bl	8002d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <SysTick_Config+0x40>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <SysTick_Config+0x40>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff05 	bl	8002c5c <__NVIC_SetPriorityGrouping>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e6c:	f7ff ff1a 	bl	8002ca4 <__NVIC_GetPriorityGrouping>
 8002e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	6978      	ldr	r0, [r7, #20]
 8002e78:	f7ff ff8e 	bl	8002d98 <NVIC_EncodePriority>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff5d 	bl	8002d44 <__NVIC_SetPriority>
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff0d 	bl	8002cc0 <__NVIC_EnableIRQ>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff1d 	bl	8002cfc <__NVIC_DisableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ff94 	bl	8002e00 <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff fe84 	bl	8002bfc <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d008      	beq.n	8002f14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2280      	movs	r2, #128	; 0x80
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e052      	b.n	8002fba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0216 	bic.w	r2, r2, #22
 8002f22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <HAL_DMA_Abort+0x62>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0208 	bic.w	r2, r2, #8
 8002f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f64:	e013      	b.n	8002f8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f66:	f7ff fe49 	bl	8002bfc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d90c      	bls.n	8002f8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e015      	b.n	8002fba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e4      	bne.n	8002f66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	223f      	movs	r2, #63	; 0x3f
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e00c      	b.n	8002ffa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2205      	movs	r2, #5
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e159      	b.n	80032d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003024:	2201      	movs	r2, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	f040 8148 	bne.w	80032d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d005      	beq.n	800305a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003056:	2b02      	cmp	r3, #2
 8003058:	d130      	bne.n	80030bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003090:	2201      	movs	r2, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 0201 	and.w	r2, r3, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d017      	beq.n	80030f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d123      	bne.n	800314c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	08da      	lsrs	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3208      	adds	r2, #8
 800310c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	08da      	lsrs	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3208      	adds	r2, #8
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a2 	beq.w	80032d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <HAL_GPIO_Init+0x2e8>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_GPIO_Init+0x2e8>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <HAL_GPIO_Init+0x2e8>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031aa:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_GPIO_Init+0x2ec>)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a49      	ldr	r2, [pc, #292]	; (80032f8 <HAL_GPIO_Init+0x2f0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d019      	beq.n	800320a <HAL_GPIO_Init+0x202>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a48      	ldr	r2, [pc, #288]	; (80032fc <HAL_GPIO_Init+0x2f4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_GPIO_Init+0x1fe>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a47      	ldr	r2, [pc, #284]	; (8003300 <HAL_GPIO_Init+0x2f8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_GPIO_Init+0x1fa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a46      	ldr	r2, [pc, #280]	; (8003304 <HAL_GPIO_Init+0x2fc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <HAL_GPIO_Init+0x1f6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a45      	ldr	r2, [pc, #276]	; (8003308 <HAL_GPIO_Init+0x300>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_GPIO_Init+0x1f2>
 80031f6:	2304      	movs	r3, #4
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x204>
 80031fa:	2307      	movs	r3, #7
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x204>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x204>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x204>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x204>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321c:	4935      	ldr	r1, [pc, #212]	; (80032f4 <HAL_GPIO_Init+0x2ec>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_GPIO_Init+0x304>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324e:	4a2f      	ldr	r2, [pc, #188]	; (800330c <HAL_GPIO_Init+0x304>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003254:	4b2d      	ldr	r3, [pc, #180]	; (800330c <HAL_GPIO_Init+0x304>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003278:	4a24      	ldr	r2, [pc, #144]	; (800330c <HAL_GPIO_Init+0x304>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_GPIO_Init+0x304>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_GPIO_Init+0x304>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a8:	4b18      	ldr	r3, [pc, #96]	; (800330c <HAL_GPIO_Init+0x304>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032cc:	4a0f      	ldr	r2, [pc, #60]	; (800330c <HAL_GPIO_Init+0x304>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f aea2 	bls.w	8003024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	; 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40013c00 	.word	0x40013c00

08003310 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	e0bb      	b.n	80034a4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800332c:	2201      	movs	r2, #1
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	429a      	cmp	r2, r3
 8003344:	f040 80ab 	bne.w	800349e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003348:	4a5c      	ldr	r2, [pc, #368]	; (80034bc <HAL_GPIO_DeInit+0x1ac>)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3302      	adds	r3, #2
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003354:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	220f      	movs	r2, #15
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	4013      	ands	r3, r2
 8003368:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a54      	ldr	r2, [pc, #336]	; (80034c0 <HAL_GPIO_DeInit+0x1b0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d019      	beq.n	80033a6 <HAL_GPIO_DeInit+0x96>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a53      	ldr	r2, [pc, #332]	; (80034c4 <HAL_GPIO_DeInit+0x1b4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_GPIO_DeInit+0x92>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_GPIO_DeInit+0x1b8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00d      	beq.n	800339e <HAL_GPIO_DeInit+0x8e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a51      	ldr	r2, [pc, #324]	; (80034cc <HAL_GPIO_DeInit+0x1bc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <HAL_GPIO_DeInit+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a50      	ldr	r2, [pc, #320]	; (80034d0 <HAL_GPIO_DeInit+0x1c0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_GPIO_DeInit+0x86>
 8003392:	2304      	movs	r3, #4
 8003394:	e008      	b.n	80033a8 <HAL_GPIO_DeInit+0x98>
 8003396:	2307      	movs	r3, #7
 8003398:	e006      	b.n	80033a8 <HAL_GPIO_DeInit+0x98>
 800339a:	2303      	movs	r3, #3
 800339c:	e004      	b.n	80033a8 <HAL_GPIO_DeInit+0x98>
 800339e:	2302      	movs	r3, #2
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_DeInit+0x98>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_GPIO_DeInit+0x98>
 80033a6:	2300      	movs	r3, #0
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	f002 0203 	and.w	r2, r2, #3
 80033ae:	0092      	lsls	r2, r2, #2
 80033b0:	4093      	lsls	r3, r2
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d132      	bne.n	800341e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033b8:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <HAL_GPIO_DeInit+0x1c4>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43db      	mvns	r3, r3
 80033c0:	4944      	ldr	r1, [pc, #272]	; (80034d4 <HAL_GPIO_DeInit+0x1c4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80033c6:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_GPIO_DeInit+0x1c4>)
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	4941      	ldr	r1, [pc, #260]	; (80034d4 <HAL_GPIO_DeInit+0x1c4>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80033d4:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_GPIO_DeInit+0x1c4>)
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	493d      	ldr	r1, [pc, #244]	; (80034d4 <HAL_GPIO_DeInit+0x1c4>)
 80033de:	4013      	ands	r3, r2
 80033e0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80033e2:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <HAL_GPIO_DeInit+0x1c4>)
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	493a      	ldr	r1, [pc, #232]	; (80034d4 <HAL_GPIO_DeInit+0x1c4>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	220f      	movs	r2, #15
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003400:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_GPIO_DeInit+0x1ac>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	43da      	mvns	r2, r3
 8003410:	482a      	ldr	r0, [pc, #168]	; (80034bc <HAL_GPIO_DeInit+0x1ac>)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	400a      	ands	r2, r1
 8003418:	3302      	adds	r3, #2
 800341a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2103      	movs	r1, #3
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	401a      	ands	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	08da      	lsrs	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3208      	adds	r2, #8
 800343c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	220f      	movs	r2, #15
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	08d2      	lsrs	r2, r2, #3
 8003454:	4019      	ands	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3208      	adds	r2, #8
 800345a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2103      	movs	r1, #3
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	401a      	ands	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	2101      	movs	r1, #1
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	401a      	ands	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2103      	movs	r1, #3
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	401a      	ands	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3301      	adds	r3, #1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f af40 	bls.w	800332c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40013800 	.word	0x40013800
 80034c0:	40020000 	.word	0x40020000
 80034c4:	40020400 	.word	0x40020400
 80034c8:	40020800 	.word	0x40020800
 80034cc:	40020c00 	.word	0x40020c00
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40013c00 	.word	0x40013c00

080034d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034f4:	e003      	b.n	80034fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	041a      	lsls	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	619a      	str	r2, [r3, #24]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800351c:	887a      	ldrh	r2, [r7, #2]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4013      	ands	r3, r2
 8003522:	041a      	lsls	r2, r3, #16
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43d9      	mvns	r1, r3
 8003528:	887b      	ldrh	r3, [r7, #2]
 800352a:	400b      	ands	r3, r1
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	619a      	str	r2, [r3, #24]
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e267      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d075      	beq.n	800364a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355e:	4b88      	ldr	r3, [pc, #544]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b04      	cmp	r3, #4
 8003568:	d00c      	beq.n	8003584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356a:	4b85      	ldr	r3, [pc, #532]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003572:	2b08      	cmp	r3, #8
 8003574:	d112      	bne.n	800359c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003576:	4b82      	ldr	r3, [pc, #520]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003582:	d10b      	bne.n	800359c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	4b7e      	ldr	r3, [pc, #504]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05b      	beq.n	8003648 <HAL_RCC_OscConfig+0x108>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d157      	bne.n	8003648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e242      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x74>
 80035a6:	4b76      	ldr	r3, [pc, #472]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a75      	ldr	r2, [pc, #468]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e01d      	b.n	80035f0 <HAL_RCC_OscConfig+0xb0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x98>
 80035be:	4b70      	ldr	r3, [pc, #448]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6f      	ldr	r2, [pc, #444]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b6d      	ldr	r3, [pc, #436]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6c      	ldr	r2, [pc, #432]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0xb0>
 80035d8:	4b69      	ldr	r3, [pc, #420]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a68      	ldr	r2, [pc, #416]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b66      	ldr	r3, [pc, #408]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a65      	ldr	r2, [pc, #404]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7ff fb00 	bl	8002bfc <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7ff fafc 	bl	8002bfc <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e207      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0xc0>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7ff faec 	bl	8002bfc <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003628:	f7ff fae8 	bl	8002bfc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1f3      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	4b51      	ldr	r3, [pc, #324]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0xe8>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d063      	beq.n	800371e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003656:	4b4a      	ldr	r3, [pc, #296]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003662:	4b47      	ldr	r3, [pc, #284]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366a:	2b08      	cmp	r3, #8
 800366c:	d11c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366e:	4b44      	ldr	r3, [pc, #272]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	4b41      	ldr	r3, [pc, #260]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_RCC_OscConfig+0x152>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e1c7      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4937      	ldr	r1, [pc, #220]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a6:	e03a      	b.n	800371e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b0:	4b34      	ldr	r3, [pc, #208]	; (8003784 <HAL_RCC_OscConfig+0x244>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7ff faa1 	bl	8002bfc <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036be:	f7ff fa9d 	bl	8002bfc <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1a8      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	4b2b      	ldr	r3, [pc, #172]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4925      	ldr	r1, [pc, #148]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e015      	b.n	800371e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f2:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_RCC_OscConfig+0x244>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7ff fa80 	bl	8002bfc <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003700:	f7ff fa7c 	bl	8002bfc <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e187      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d036      	beq.n	8003798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_RCC_OscConfig+0x248>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7ff fa60 	bl	8002bfc <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003740:	f7ff fa5c 	bl	8002bfc <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e167      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_OscConfig+0x240>)
 8003754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x200>
 800375e:	e01b      	b.n	8003798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_OscConfig+0x248>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7ff fa49 	bl	8002bfc <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	e00e      	b.n	800378c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800376e:	f7ff fa45 	bl	8002bfc <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d907      	bls.n	800378c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e150      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
 8003780:	40023800 	.word	0x40023800
 8003784:	42470000 	.word	0x42470000
 8003788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	4b88      	ldr	r3, [pc, #544]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 800378e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ea      	bne.n	800376e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8097 	beq.w	80038d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037aa:	4b81      	ldr	r3, [pc, #516]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	4b7d      	ldr	r3, [pc, #500]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	4a7c      	ldr	r2, [pc, #496]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	; 0x40
 80037c6:	4b7a      	ldr	r3, [pc, #488]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	4b77      	ldr	r3, [pc, #476]	; (80039b4 <HAL_RCC_OscConfig+0x474>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e2:	4b74      	ldr	r3, [pc, #464]	; (80039b4 <HAL_RCC_OscConfig+0x474>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a73      	ldr	r2, [pc, #460]	; (80039b4 <HAL_RCC_OscConfig+0x474>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ee:	f7ff fa05 	bl	8002bfc <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7ff fa01 	bl	8002bfc <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e10c      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b6a      	ldr	r3, [pc, #424]	; (80039b4 <HAL_RCC_OscConfig+0x474>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x2ea>
 800381c:	4b64      	ldr	r3, [pc, #400]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	4a63      	ldr	r2, [pc, #396]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	; 0x70
 8003828:	e01c      	b.n	8003864 <HAL_RCC_OscConfig+0x324>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b05      	cmp	r3, #5
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x30c>
 8003832:	4b5f      	ldr	r3, [pc, #380]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	4a5e      	ldr	r2, [pc, #376]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6713      	str	r3, [r2, #112]	; 0x70
 800383e:	4b5c      	ldr	r3, [pc, #368]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4a5b      	ldr	r2, [pc, #364]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6713      	str	r3, [r2, #112]	; 0x70
 800384a:	e00b      	b.n	8003864 <HAL_RCC_OscConfig+0x324>
 800384c:	4b58      	ldr	r3, [pc, #352]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	4a57      	ldr	r2, [pc, #348]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	; 0x70
 8003858:	4b55      	ldr	r3, [pc, #340]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a54      	ldr	r2, [pc, #336]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 800385e:	f023 0304 	bic.w	r3, r3, #4
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7ff f9c6 	bl	8002bfc <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7ff f9c2 	bl	8002bfc <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0cb      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ee      	beq.n	8003874 <HAL_RCC_OscConfig+0x334>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003898:	f7ff f9b0 	bl	8002bfc <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a0:	f7ff f9ac 	bl	8002bfc <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0b5      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b6:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ee      	bne.n	80038a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c8:	4b39      	ldr	r3, [pc, #228]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	4a38      	ldr	r2, [pc, #224]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80a1 	beq.w	8003a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038de:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d05c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d141      	bne.n	8003976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <HAL_RCC_OscConfig+0x478>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7ff f980 	bl	8002bfc <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003900:	f7ff f97c 	bl	8002bfc <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e087      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	491b      	ldr	r1, [pc, #108]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_RCC_OscConfig+0x478>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7ff f955 	bl	8002bfc <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003956:	f7ff f951 	bl	8002bfc <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e05c      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x416>
 8003974:	e054      	b.n	8003a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <HAL_RCC_OscConfig+0x478>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7ff f93e 	bl	8002bfc <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003984:	f7ff f93a 	bl	8002bfc <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e045      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x444>
 80039a2:	e03d      	b.n	8003a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e038      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40007000 	.word	0x40007000
 80039b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039bc:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCC_OscConfig+0x4ec>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d028      	beq.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d121      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d11a      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039ec:	4013      	ands	r3, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	3b01      	subs	r3, #1
 8003a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800

08003a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0cc      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4b68      	ldr	r3, [pc, #416]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d90c      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0b8      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a84:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a58      	ldr	r2, [pc, #352]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a52      	ldr	r2, [pc, #328]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b50      	ldr	r3, [pc, #320]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	494d      	ldr	r1, [pc, #308]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d044      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d119      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aee:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e067      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 0203 	bic.w	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4934      	ldr	r1, [pc, #208]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b20:	f7ff f86c 	bl	8002bfc <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b28:	f7ff f868 	bl	8002bfc <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e04f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 020c 	and.w	r2, r3, #12
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1eb      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b50:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d20c      	bcs.n	8003b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e032      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b84:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4916      	ldr	r1, [pc, #88]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	490e      	ldr	r1, [pc, #56]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bb6:	f000 f821 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	490a      	ldr	r1, [pc, #40]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	5ccb      	ldrb	r3, [r1, r3]
 8003bca:	fa22 f303 	lsr.w	r3, r2, r3
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe ffcc 	bl	8002b74 <HAL_InitTick>

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023c00 	.word	0x40023c00
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	08010f78 	.word	0x08010f78
 8003bf4:	20000084 	.word	0x20000084
 8003bf8:	20000088 	.word	0x20000088

08003bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c00:	b090      	sub	sp, #64	; 0x40
 8003c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
 8003c08:	2300      	movs	r3, #0
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c14:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d00d      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x40>
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	f200 80a1 	bhi.w	8003d68 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x34>
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c2e:	e09b      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c34:	e09b      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c36:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c3a:	e098      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c3c:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c46:	4b4d      	ldr	r3, [pc, #308]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c52:	4b4a      	ldr	r3, [pc, #296]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	2200      	movs	r2, #0
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c64:	2100      	movs	r1, #0
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c68:	fb03 f201 	mul.w	r2, r3, r1
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	fb00 f303 	mul.w	r3, r0, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	4a43      	ldr	r2, [pc, #268]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c76:	fba0 1202 	umull	r1, r2, r0, r2
 8003c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c7c:	460a      	mov	r2, r1
 8003c7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c82:	4413      	add	r3, r2
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c88:	2200      	movs	r2, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	61fa      	str	r2, [r7, #28]
 8003c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c96:	f7fc fb0b 	bl	80002b0 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca2:	e053      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca4:	4b35      	ldr	r3, [pc, #212]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	099b      	lsrs	r3, r3, #6
 8003caa:	2200      	movs	r2, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	617a      	str	r2, [r7, #20]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cb6:	f04f 0b00 	mov.w	fp, #0
 8003cba:	4652      	mov	r2, sl
 8003cbc:	465b      	mov	r3, fp
 8003cbe:	f04f 0000 	mov.w	r0, #0
 8003cc2:	f04f 0100 	mov.w	r1, #0
 8003cc6:	0159      	lsls	r1, r3, #5
 8003cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ccc:	0150      	lsls	r0, r2, #5
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	ebb2 080a 	subs.w	r8, r2, sl
 8003cd6:	eb63 090b 	sbc.w	r9, r3, fp
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ce6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cee:	ebb2 0408 	subs.w	r4, r2, r8
 8003cf2:	eb63 0509 	sbc.w	r5, r3, r9
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	00eb      	lsls	r3, r5, #3
 8003d00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d04:	00e2      	lsls	r2, r4, #3
 8003d06:	4614      	mov	r4, r2
 8003d08:	461d      	mov	r5, r3
 8003d0a:	eb14 030a 	adds.w	r3, r4, sl
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	eb45 030b 	adc.w	r3, r5, fp
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d22:	4629      	mov	r1, r5
 8003d24:	028b      	lsls	r3, r1, #10
 8003d26:	4621      	mov	r1, r4
 8003d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	028a      	lsls	r2, r1, #10
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d36:	2200      	movs	r2, #0
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	60fa      	str	r2, [r7, #12]
 8003d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d40:	f7fc fab6 	bl	80002b0 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3740      	adds	r7, #64	; 0x40
 8003d74:	46bd      	mov	sp, r7
 8003d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	00f42400 	.word	0x00f42400
 8003d84:	017d7840 	.word	0x017d7840

08003d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000084 	.word	0x20000084

08003da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da4:	f7ff fff0 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0a9b      	lsrs	r3, r3, #10
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	08010f88 	.word	0x08010f88

08003dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dcc:	f7ff ffdc 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0b5b      	lsrs	r3, r3, #13
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4903      	ldr	r1, [pc, #12]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40023800 	.word	0x40023800
 8003dec:	08010f88 	.word	0x08010f88

08003df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07b      	b.n	8003efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d108      	bne.n	8003e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e12:	d009      	beq.n	8003e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	61da      	str	r2, [r3, #28]
 8003e1a:	e005      	b.n	8003e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fe fb8e 	bl	8002564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	ea42 0103 	orr.w	r1, r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	f003 0104 	and.w	r1, r3, #4
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f003 0210 	and.w	r2, r3, #16
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b08c      	sub	sp, #48	; 0x30
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f10:	2301      	movs	r3, #1
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x26>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e18a      	b.n	800423e <HAL_SPI_TransmitReceive+0x33c>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f30:	f7fe fe64 	bl	8002bfc <HAL_GetTick>
 8003f34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d00f      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0x70>
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f58:	d107      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d103      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x68>
 8003f62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d003      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f70:	e15b      	b.n	800422a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x82>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x82>
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d103      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f8a:	e14e      	b.n	800422a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d003      	beq.n	8003fa0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2205      	movs	r2, #5
 8003f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	887a      	ldrh	r2, [r7, #2]
 8003fb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	887a      	ldrh	r2, [r7, #2]
 8003fc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d007      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffc:	d178      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_SPI_TransmitReceive+0x10a>
 8004006:	8b7b      	ldrh	r3, [r7, #26]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d166      	bne.n	80040da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	1c9a      	adds	r2, r3, #2
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004030:	e053      	b.n	80040da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b02      	cmp	r3, #2
 800403e:	d11b      	bne.n	8004078 <HAL_SPI_TransmitReceive+0x176>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x176>
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d113      	bne.n	8004078 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b01      	cmp	r3, #1
 8004084:	d119      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x1b8>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d014      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	b292      	uxth	r2, r2
 800409c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040b6:	2301      	movs	r3, #1
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040ba:	f7fe fd9f 	bl	8002bfc <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d807      	bhi.n	80040da <HAL_SPI_TransmitReceive+0x1d8>
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d003      	beq.n	80040da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040d8:	e0a7      	b.n	800422a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1a6      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x130>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1a1      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x130>
 80040ee:	e07c      	b.n	80041ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_SPI_TransmitReceive+0x1fc>
 80040f8:	8b7b      	ldrh	r3, [r7, #26]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d16b      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004124:	e057      	b.n	80041d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d11c      	bne.n	800416e <HAL_SPI_TransmitReceive+0x26c>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d017      	beq.n	800416e <HAL_SPI_TransmitReceive+0x26c>
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d114      	bne.n	800416e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	7812      	ldrb	r2, [r2, #0]
 8004150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d119      	bne.n	80041b0 <HAL_SPI_TransmitReceive+0x2ae>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d014      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041ac:	2301      	movs	r3, #1
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041b0:	f7fe fd24 	bl	8002bfc <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041bc:	429a      	cmp	r2, r3
 80041be:	d803      	bhi.n	80041c8 <HAL_SPI_TransmitReceive+0x2c6>
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d102      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x2cc>
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041d4:	e029      	b.n	800422a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1a2      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x224>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d19d      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f8b2 	bl	8004358 <SPI_EndRxTxTransaction>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004206:	e010      	b.n	800422a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	e000      	b.n	800422a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004228:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800423a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800423e:	4618      	mov	r0, r3
 8004240:	3730      	adds	r7, #48	; 0x30
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004258:	f7fe fcd0 	bl	8002bfc <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	4413      	add	r3, r2
 8004266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004268:	f7fe fcc8 	bl	8002bfc <HAL_GetTick>
 800426c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800426e:	4b39      	ldr	r3, [pc, #228]	; (8004354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	015b      	lsls	r3, r3, #5
 8004274:	0d1b      	lsrs	r3, r3, #20
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800427e:	e054      	b.n	800432a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d050      	beq.n	800432a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004288:	f7fe fcb8 	bl	8002bfc <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	429a      	cmp	r2, r3
 8004296:	d902      	bls.n	800429e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d13d      	bne.n	800431a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d111      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c0:	d004      	beq.n	80042cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ca:	d107      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e4:	d10f      	bne.n	8004306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e017      	b.n	800434a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3b01      	subs	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d19b      	bne.n	8004280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000084 	.word	0x20000084

08004358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004364:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <SPI_EndRxTxTransaction+0x7c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1b      	ldr	r2, [pc, #108]	; (80043d8 <SPI_EndRxTxTransaction+0x80>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0d5b      	lsrs	r3, r3, #21
 8004370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004374:	fb02 f303 	mul.w	r3, r2, r3
 8004378:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004382:	d112      	bne.n	80043aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2200      	movs	r2, #0
 800438c:	2180      	movs	r1, #128	; 0x80
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff ff5a 	bl	8004248 <SPI_WaitFlagStateUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00f      	b.n	80043ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b80      	cmp	r3, #128	; 0x80
 80043c2:	d0f2      	beq.n	80043aa <SPI_EndRxTxTransaction+0x52>
 80043c4:	e000      	b.n	80043c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80043c6:	bf00      	nop
  }

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000084 	.word	0x20000084
 80043d8:	165e9f81 	.word	0x165e9f81

080043dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e041      	b.n	8004472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fe f8f6 	bl	80025f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f000 fce4 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e041      	b.n	8004510 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f839 	bl	8004518 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f000 fc95 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <HAL_TIM_OC_Start_IT+0x28>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e022      	b.n	800459a <HAL_TIM_OC_Start_IT+0x6e>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b04      	cmp	r3, #4
 8004558:	d109      	bne.n	800456e <HAL_TIM_OC_Start_IT+0x42>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	bf14      	ite	ne
 8004566:	2301      	movne	r3, #1
 8004568:	2300      	moveq	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e015      	b.n	800459a <HAL_TIM_OC_Start_IT+0x6e>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d109      	bne.n	8004588 <HAL_TIM_OC_Start_IT+0x5c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	bf14      	ite	ne
 8004580:	2301      	movne	r3, #1
 8004582:	2300      	moveq	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e008      	b.n	800459a <HAL_TIM_OC_Start_IT+0x6e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e0b3      	b.n	800470a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_OC_Start_IT+0x86>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b0:	e013      	b.n	80045da <HAL_TIM_OC_Start_IT+0xae>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_OC_Start_IT+0x96>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	e00b      	b.n	80045da <HAL_TIM_OC_Start_IT+0xae>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_OC_Start_IT+0xa6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d0:	e003      	b.n	80045da <HAL_TIM_OC_Start_IT+0xae>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2202      	movs	r2, #2
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d841      	bhi.n	8004664 <HAL_TIM_OC_Start_IT+0x138>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <HAL_TIM_OC_Start_IT+0xbc>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	0800461d 	.word	0x0800461d
 80045ec:	08004665 	.word	0x08004665
 80045f0:	08004665 	.word	0x08004665
 80045f4:	08004665 	.word	0x08004665
 80045f8:	0800462f 	.word	0x0800462f
 80045fc:	08004665 	.word	0x08004665
 8004600:	08004665 	.word	0x08004665
 8004604:	08004665 	.word	0x08004665
 8004608:	08004641 	.word	0x08004641
 800460c:	08004665 	.word	0x08004665
 8004610:	08004665 	.word	0x08004665
 8004614:	08004665 	.word	0x08004665
 8004618:	08004653 	.word	0x08004653
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0202 	orr.w	r2, r2, #2
 800462a:	60da      	str	r2, [r3, #12]
      break;
 800462c:	e01d      	b.n	800466a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0204 	orr.w	r2, r2, #4
 800463c:	60da      	str	r2, [r3, #12]
      break;
 800463e:	e014      	b.n	800466a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0208 	orr.w	r2, r2, #8
 800464e:	60da      	str	r2, [r3, #12]
      break;
 8004650:	e00b      	b.n	800466a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0210 	orr.w	r2, r2, #16
 8004660:	60da      	str	r2, [r3, #12]
      break;
 8004662:	e002      	b.n	800466a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      break;
 8004668:	bf00      	nop
  }

  if (status == HAL_OK)
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d14b      	bne.n	8004708 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2201      	movs	r2, #1
 8004676:	6839      	ldr	r1, [r7, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fe5b 	bl	8005334 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a24      	ldr	r2, [pc, #144]	; (8004714 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d107      	bne.n	8004698 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004696:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1d      	ldr	r2, [pc, #116]	; (8004714 <HAL_TIM_OC_Start_IT+0x1e8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d018      	beq.n	80046d4 <HAL_TIM_OC_Start_IT+0x1a8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d013      	beq.n	80046d4 <HAL_TIM_OC_Start_IT+0x1a8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_TIM_OC_Start_IT+0x1ec>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00e      	beq.n	80046d4 <HAL_TIM_OC_Start_IT+0x1a8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_TIM_OC_Start_IT+0x1f0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_TIM_OC_Start_IT+0x1a8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a16      	ldr	r2, [pc, #88]	; (8004720 <HAL_TIM_OC_Start_IT+0x1f4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_TIM_OC_Start_IT+0x1a8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a15      	ldr	r2, [pc, #84]	; (8004724 <HAL_TIM_OC_Start_IT+0x1f8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d111      	bne.n	80046f8 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d010      	beq.n	8004708 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	e007      	b.n	8004708 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40014000 	.word	0x40014000

08004728 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b0c      	cmp	r3, #12
 800473a:	d841      	bhi.n	80047c0 <HAL_TIM_OC_Stop_IT+0x98>
 800473c:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <HAL_TIM_OC_Stop_IT+0x1c>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004779 	.word	0x08004779
 8004748:	080047c1 	.word	0x080047c1
 800474c:	080047c1 	.word	0x080047c1
 8004750:	080047c1 	.word	0x080047c1
 8004754:	0800478b 	.word	0x0800478b
 8004758:	080047c1 	.word	0x080047c1
 800475c:	080047c1 	.word	0x080047c1
 8004760:	080047c1 	.word	0x080047c1
 8004764:	0800479d 	.word	0x0800479d
 8004768:	080047c1 	.word	0x080047c1
 800476c:	080047c1 	.word	0x080047c1
 8004770:	080047c1 	.word	0x080047c1
 8004774:	080047af 	.word	0x080047af
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0202 	bic.w	r2, r2, #2
 8004786:	60da      	str	r2, [r3, #12]
      break;
 8004788:	e01d      	b.n	80047c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0204 	bic.w	r2, r2, #4
 8004798:	60da      	str	r2, [r3, #12]
      break;
 800479a:	e014      	b.n	80047c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0208 	bic.w	r2, r2, #8
 80047aa:	60da      	str	r2, [r3, #12]
      break;
 80047ac:	e00b      	b.n	80047c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0210 	bic.w	r2, r2, #16
 80047bc:	60da      	str	r2, [r3, #12]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d157      	bne.n	800487c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2200      	movs	r2, #0
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fdad 	bl	8005334 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <HAL_TIM_OC_Stop_IT+0x160>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d117      	bne.n	8004814 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10f      	bne.n	8004814 <HAL_TIM_OC_Stop_IT+0xec>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	f240 4344 	movw	r3, #1092	; 0x444
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d107      	bne.n	8004814 <HAL_TIM_OC_Stop_IT+0xec>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004812:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a1a      	ldr	r2, [r3, #32]
 800481a:	f241 1311 	movw	r3, #4369	; 0x1111
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10f      	bne.n	8004844 <HAL_TIM_OC_Stop_IT+0x11c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6a1a      	ldr	r2, [r3, #32]
 800482a:	f240 4344 	movw	r3, #1092	; 0x444
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d107      	bne.n	8004844 <HAL_TIM_OC_Stop_IT+0x11c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <HAL_TIM_OC_Stop_IT+0x12c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004852:	e013      	b.n	800487c <HAL_TIM_OC_Stop_IT+0x154>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d104      	bne.n	8004864 <HAL_TIM_OC_Stop_IT+0x13c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004862:	e00b      	b.n	800487c <HAL_TIM_OC_Stop_IT+0x154>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d104      	bne.n	8004874 <HAL_TIM_OC_Stop_IT+0x14c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004872:	e003      	b.n	800487c <HAL_TIM_OC_Stop_IT+0x154>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000

0800488c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e041      	b.n	8004924 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f839 	bl	800492c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 fa8b 	bl	8004de8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0208 	bic.w	r2, r2, #8
 80048e0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	d122      	bne.n	800499c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b02      	cmp	r3, #2
 8004962:	d11b      	bne.n	800499c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0202 	mvn.w	r2, #2
 800496c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa11 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fd fc36 	bl	80021fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fa14 	bl	8004dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d122      	bne.n	80049f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d11b      	bne.n	80049f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0204 	mvn.w	r2, #4
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9e7 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 80049dc:	e005      	b.n	80049ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd fc0c 	bl	80021fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f9ea 	bl	8004dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d122      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d11b      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0208 	mvn.w	r2, #8
 8004a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2204      	movs	r2, #4
 8004a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9bd 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 8004a30:	e005      	b.n	8004a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fd fbe2 	bl	80021fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f9c0 	bl	8004dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d122      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d11b      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0210 	mvn.w	r2, #16
 8004a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f993 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 8004a84:	e005      	b.n	8004a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd fbb8 	bl	80021fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f996 	bl	8004dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d10e      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d107      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0201 	mvn.w	r2, #1
 8004abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f969 	bl	8004d96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	2b80      	cmp	r3, #128	; 0x80
 8004ad0:	d10e      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d107      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fcc0 	bl	8005470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b40      	cmp	r3, #64	; 0x40
 8004afc:	d10e      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d107      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f95b 	bl	8004dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d10e      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d107      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0220 	mvn.w	r2, #32
 8004b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fc8a 	bl	800545c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e048      	b.n	8004c00 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b0c      	cmp	r3, #12
 8004b7a:	d839      	bhi.n	8004bf0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004bb9 	.word	0x08004bb9
 8004b88:	08004bf1 	.word	0x08004bf1
 8004b8c:	08004bf1 	.word	0x08004bf1
 8004b90:	08004bf1 	.word	0x08004bf1
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bf1 	.word	0x08004bf1
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004bf1 	.word	0x08004bf1
 8004ba4:	08004bd5 	.word	0x08004bd5
 8004ba8:	08004bf1 	.word	0x08004bf1
 8004bac:	08004bf1 	.word	0x08004bf1
 8004bb0:	08004bf1 	.word	0x08004bf1
 8004bb4:	08004be3 	.word	0x08004be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f992 	bl	8004ee8 <TIM_OC1_SetConfig>
      break;
 8004bc4:	e017      	b.n	8004bf6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 f9f1 	bl	8004fb4 <TIM_OC2_SetConfig>
      break;
 8004bd2:	e010      	b.n	8004bf6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fa56 	bl	800508c <TIM_OC3_SetConfig>
      break;
 8004be0:	e009      	b.n	8004bf6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fab9 	bl	8005160 <TIM_OC4_SetConfig>
      break;
 8004bee:	e002      	b.n	8004bf6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIM_ConfigClockSource+0x1c>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0b4      	b.n	8004d8e <HAL_TIM_ConfigClockSource+0x186>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5c:	d03e      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0xd4>
 8004c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c62:	f200 8087 	bhi.w	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	f000 8086 	beq.w	8004d7a <HAL_TIM_ConfigClockSource+0x172>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	d87f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b70      	cmp	r3, #112	; 0x70
 8004c76:	d01a      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0xa6>
 8004c78:	2b70      	cmp	r3, #112	; 0x70
 8004c7a:	d87b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b60      	cmp	r3, #96	; 0x60
 8004c7e:	d050      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x11a>
 8004c80:	2b60      	cmp	r3, #96	; 0x60
 8004c82:	d877      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b50      	cmp	r3, #80	; 0x50
 8004c86:	d03c      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0xfa>
 8004c88:	2b50      	cmp	r3, #80	; 0x50
 8004c8a:	d873      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d058      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x13a>
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d86f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b30      	cmp	r3, #48	; 0x30
 8004c96:	d064      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d86b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d060      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d867      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05c      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d05a      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004cac:	e062      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6899      	ldr	r1, [r3, #8]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f000 fb19 	bl	80052f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	609a      	str	r2, [r3, #8]
      break;
 8004cda:	e04f      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f000 fb02 	bl	80052f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cfe:	609a      	str	r2, [r3, #8]
      break;
 8004d00:	e03c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 fa76 	bl	8005200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2150      	movs	r1, #80	; 0x50
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 facf 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 8004d20:	e02c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 fa95 	bl	800525e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2160      	movs	r1, #96	; 0x60
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fabf 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 8004d40:	e01c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f000 fa56 	bl	8005200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2140      	movs	r1, #64	; 0x40
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 faaf 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 8004d60:	e00c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f000 faa6 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 8004d72:	e003      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
      break;
 8004d78:	e000      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a34      	ldr	r2, [pc, #208]	; (8004ecc <TIM_Base_SetConfig+0xe4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00f      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e06:	d00b      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a31      	ldr	r2, [pc, #196]	; (8004ed0 <TIM_Base_SetConfig+0xe8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a30      	ldr	r2, [pc, #192]	; (8004ed4 <TIM_Base_SetConfig+0xec>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <TIM_Base_SetConfig+0xf0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d108      	bne.n	8004e32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <TIM_Base_SetConfig+0xe4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01b      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e40:	d017      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <TIM_Base_SetConfig+0xe8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <TIM_Base_SetConfig+0xec>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00f      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a20      	ldr	r2, [pc, #128]	; (8004ed8 <TIM_Base_SetConfig+0xf0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	; (8004edc <TIM_Base_SetConfig+0xf4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <TIM_Base_SetConfig+0xf8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d003      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <TIM_Base_SetConfig+0xfc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d108      	bne.n	8004e84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a08      	ldr	r2, [pc, #32]	; (8004ecc <TIM_Base_SetConfig+0xe4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d103      	bne.n	8004eb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	615a      	str	r2, [r3, #20]
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800

08004ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 0302 	bic.w	r3, r3, #2
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a1c      	ldr	r2, [pc, #112]	; (8004fb0 <TIM_OC1_SetConfig+0xc8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d10c      	bne.n	8004f5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0308 	bic.w	r3, r3, #8
 8004f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 0304 	bic.w	r3, r3, #4
 8004f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <TIM_OC1_SetConfig+0xc8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d111      	bne.n	8004f8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	621a      	str	r2, [r3, #32]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	40010000 	.word	0x40010000

08004fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0210 	bic.w	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 0320 	bic.w	r3, r3, #32
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <TIM_OC2_SetConfig+0xd4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d10d      	bne.n	8005030 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <TIM_OC2_SetConfig+0xd4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d113      	bne.n	8005060 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800503e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000

0800508c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1d      	ldr	r2, [pc, #116]	; (800515c <TIM_OC3_SetConfig+0xd0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d10d      	bne.n	8005106 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a14      	ldr	r2, [pc, #80]	; (800515c <TIM_OC3_SetConfig+0xd0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d113      	bne.n	8005136 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40010000 	.word	0x40010000

08005160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	031b      	lsls	r3, r3, #12
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a10      	ldr	r2, [pc, #64]	; (80051fc <TIM_OC4_SetConfig+0x9c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d109      	bne.n	80051d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	019b      	lsls	r3, r3, #6
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000

08005200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0201 	bic.w	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800522a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 030a 	bic.w	r3, r3, #10
 800523c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525e:	b480      	push	{r7}
 8005260:	b087      	sub	sp, #28
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0210 	bic.w	r2, r3, #16
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	031b      	lsls	r3, r3, #12
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800529a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	f043 0307 	orr.w	r3, r3, #7
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	609a      	str	r2, [r3, #8]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800530e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	021a      	lsls	r2, r3, #8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	431a      	orrs	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4313      	orrs	r3, r2
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2201      	movs	r2, #1
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1a      	ldr	r2, [r3, #32]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	43db      	mvns	r3, r3
 8005356:	401a      	ands	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	fa01 f303 	lsl.w	r3, r1, r3
 800536c:	431a      	orrs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005394:	2302      	movs	r3, #2
 8005396:	e050      	b.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d018      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d013      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a18      	ldr	r2, [pc, #96]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00e      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a16      	ldr	r2, [pc, #88]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d009      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a15      	ldr	r2, [pc, #84]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a13      	ldr	r2, [pc, #76]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10c      	bne.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4313      	orrs	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40014000 	.word	0x40014000

0800545c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e03f      	b.n	8005516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fd f8e6 	bl	800267c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2224      	movs	r2, #36	; 0x24
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fe49 	bl	8006160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695a      	ldr	r2, [r3, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e021      	b.n	8005574 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2224      	movs	r2, #36	; 0x24
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005546:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fd f959 	bl	8002800 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b20      	cmp	r3, #32
 800559a:	d17c      	bne.n	8005696 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_UART_Transmit+0x2c>
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e075      	b.n	8005698 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_UART_Transmit+0x3e>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e06e      	b.n	8005698 <HAL_UART_Transmit+0x11c>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2221      	movs	r2, #33	; 0x21
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055d0:	f7fd fb14 	bl	8002bfc <HAL_GetTick>
 80055d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	88fa      	ldrh	r2, [r7, #6]
 80055da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	88fa      	ldrh	r2, [r7, #6]
 80055e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	d108      	bne.n	80055fe <HAL_UART_Transmit+0x82>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e003      	b.n	8005606 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800560e:	e02a      	b.n	8005666 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2200      	movs	r2, #0
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 fb5a 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e036      	b.n	8005698 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800563e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	3302      	adds	r3, #2
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	e007      	b.n	8005658 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	781a      	ldrb	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3301      	adds	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1cf      	bne.n	8005610 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2200      	movs	r2, #0
 8005678:	2140      	movs	r1, #64	; 0x40
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fb2a 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e006      	b.n	8005698 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e000      	b.n	8005698 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005696:	2302      	movs	r3, #2
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d130      	bne.n	800571c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_UART_Transmit_IT+0x26>
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e029      	b.n	800571e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Transmit_IT+0x38>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e022      	b.n	800571e <HAL_UART_Transmit_IT+0x7e>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2221      	movs	r2, #33	; 0x21
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005716:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e000      	b.n	800571e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	4613      	mov	r3, r2
 8005736:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b20      	cmp	r3, #32
 8005742:	d11d      	bne.n	8005780 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_UART_Receive_IT+0x26>
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e016      	b.n	8005782 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_UART_Receive_IT+0x38>
 800575e:	2302      	movs	r3, #2
 8005760:	e00f      	b.n	8005782 <HAL_UART_Receive_IT+0x58>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	461a      	mov	r2, r3
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fb1a 	bl	8005db0 <UART_Start_Receive_IT>
 800577c:	4603      	mov	r3, r0
 800577e:	e000      	b.n	8005782 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
  }
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b0ba      	sub	sp, #232	; 0xe8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80057ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10f      	bne.n	80057f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <HAL_UART_IRQHandler+0x66>
 80057de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fbfd 	bl	8005fea <UART_Receive_IT>
      return;
 80057f0:	e256      	b.n	8005ca0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80de 	beq.w	80059b8 <HAL_UART_IRQHandler+0x22c>
 80057fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d106      	bne.n	8005816 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800580c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80d1 	beq.w	80059b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <HAL_UART_IRQHandler+0xae>
 8005822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f043 0201 	orr.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <HAL_UART_IRQHandler+0xd2>
 8005846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f043 0202 	orr.w	r2, r3, #2
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_UART_IRQHandler+0xf6>
 800586a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f043 0204 	orr.w	r2, r3, #4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d011      	beq.n	80058b2 <HAL_UART_IRQHandler+0x126>
 800588e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d105      	bne.n	80058a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800589a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f043 0208 	orr.w	r2, r3, #8
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 81ed 	beq.w	8005c96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d008      	beq.n	80058da <HAL_UART_IRQHandler+0x14e>
 80058c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fb88 	bl	8005fea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <HAL_UART_IRQHandler+0x17a>
 80058fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d04f      	beq.n	80059a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fa90 	bl	8005e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d141      	bne.n	800599e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3314      	adds	r3, #20
 8005942:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005946:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800594a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005952:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800595e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1d9      	bne.n	800591a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	2b00      	cmp	r3, #0
 800596c:	d013      	beq.n	8005996 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	4a7d      	ldr	r2, [pc, #500]	; (8005b68 <HAL_UART_IRQHandler+0x3dc>)
 8005974:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	4618      	mov	r0, r3
 800597c:	f7fd fb21 	bl	8002fc2 <HAL_DMA_Abort_IT>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d016      	beq.n	80059b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005990:	4610      	mov	r0, r2
 8005992:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005994:	e00e      	b.n	80059b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fb60 	bl	800205c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599c:	e00a      	b.n	80059b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fc fb5c 	bl	800205c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	e006      	b.n	80059b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fc fb58 	bl	800205c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059b2:	e170      	b.n	8005c96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b4:	bf00      	nop
    return;
 80059b6:	e16e      	b.n	8005c96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f040 814a 	bne.w	8005c56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8143 	beq.w	8005c56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 813c 	beq.w	8005c56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	f040 80b4 	bne.w	8005b6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 8140 	beq.w	8005c9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a22:	429a      	cmp	r2, r3
 8005a24:	f080 8139 	bcs.w	8005c9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3a:	f000 8088 	beq.w	8005b4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	330c      	adds	r3, #12
 8005a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1d9      	bne.n	8005a3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3314      	adds	r3, #20
 8005a90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005aae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ab6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e1      	bne.n	8005a8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3314      	adds	r3, #20
 8005acc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3314      	adds	r3, #20
 8005ae6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005aea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005aec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005af0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e3      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1e:	f023 0310 	bic.w	r3, r3, #16
 8005b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b30:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e3      	bne.n	8005b0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fd f9ca 	bl	8002ee2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f8ac 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b64:	e099      	b.n	8005c9a <HAL_UART_IRQHandler+0x50e>
 8005b66:	bf00      	nop
 8005b68:	08005ef3 	.word	0x08005ef3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 808b 	beq.w	8005c9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8086 	beq.w	8005c9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	330c      	adds	r3, #12
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005bb6:	647a      	str	r2, [r7, #68]	; 0x44
 8005bb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e3      	bne.n	8005b92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3314      	adds	r3, #20
 8005bea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bee:	633a      	str	r2, [r7, #48]	; 0x30
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e3      	bne.n	8005bca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0310 	bic.w	r3, r3, #16
 8005c26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	330c      	adds	r3, #12
 8005c30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c34:	61fa      	str	r2, [r7, #28]
 8005c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	69b9      	ldr	r1, [r7, #24]
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	617b      	str	r3, [r7, #20]
   return(result);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e3      	bne.n	8005c10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f834 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c54:	e023      	b.n	8005c9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <HAL_UART_IRQHandler+0x4ea>
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f953 	bl	8005f1a <UART_Transmit_IT>
    return;
 8005c74:	e014      	b.n	8005ca0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00e      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x514>
 8005c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f993 	bl	8005fba <UART_EndTransmit_IT>
    return;
 8005c94:	e004      	b.n	8005ca0 <HAL_UART_IRQHandler+0x514>
    return;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <HAL_UART_IRQHandler+0x514>
      return;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <HAL_UART_IRQHandler+0x514>
      return;
 8005c9e:	bf00      	nop
  }
}
 8005ca0:	37e8      	adds	r7, #232	; 0xe8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop

08005ca8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b090      	sub	sp, #64	; 0x40
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce4:	e050      	b.n	8005d88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d04c      	beq.n	8005d88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf4:	f7fc ff82 	bl	8002bfc <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d241      	bcs.n	8005d88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d24:	637a      	str	r2, [r7, #52]	; 0x34
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3314      	adds	r3, #20
 8005d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	613b      	str	r3, [r7, #16]
   return(result);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f023 0301 	bic.w	r3, r3, #1
 8005d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d58:	623a      	str	r2, [r7, #32]
 8005d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	69f9      	ldr	r1, [r7, #28]
 8005d5e:	6a3a      	ldr	r2, [r7, #32]
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e5      	bne.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e00f      	b.n	8005da8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4013      	ands	r3, r2
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d09f      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3740      	adds	r7, #64	; 0x40
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	88fa      	ldrh	r2, [r7, #6]
 8005dc8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	88fa      	ldrh	r2, [r7, #6]
 8005dce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2222      	movs	r2, #34	; 0x22
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dfc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0220 	orr.w	r2, r2, #32
 8005e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b095      	sub	sp, #84	; 0x54
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e54:	643a      	str	r2, [r7, #64]	; 0x40
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e5      	bne.n	8005e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3314      	adds	r3, #20
 8005e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e5      	bne.n	8005e68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d119      	bne.n	8005ed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f023 0310 	bic.w	r3, r3, #16
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec4:	61ba      	str	r2, [r7, #24]
 8005ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e5      	bne.n	8005ea4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ee6:	bf00      	nop
 8005ee8:	3754      	adds	r7, #84	; 0x54
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7fc f8a5 	bl	800205c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b21      	cmp	r3, #33	; 0x21
 8005f2c:	d13e      	bne.n	8005fac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f36:	d114      	bne.n	8005f62 <UART_Transmit_IT+0x48>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d110      	bne.n	8005f62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	1c9a      	adds	r2, r3, #2
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]
 8005f60:	e008      	b.n	8005f74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	1c59      	adds	r1, r3, #1
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6211      	str	r1, [r2, #32]
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4619      	mov	r1, r3
 8005f82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10f      	bne.n	8005fa8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fe64 	bl	8005ca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b08c      	sub	sp, #48	; 0x30
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b22      	cmp	r3, #34	; 0x22
 8005ffc:	f040 80ab 	bne.w	8006156 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006008:	d117      	bne.n	800603a <UART_Receive_IT+0x50>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d113      	bne.n	800603a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	b29b      	uxth	r3, r3
 8006024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006028:	b29a      	uxth	r2, r3
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
 8006038:	e026      	b.n	8006088 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006040:	2300      	movs	r3, #0
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604c:	d007      	beq.n	800605e <UART_Receive_IT+0x74>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <UART_Receive_IT+0x82>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e008      	b.n	800607e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006078:	b2da      	uxtb	r2, r3
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29b      	uxth	r3, r3
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4619      	mov	r1, r3
 8006096:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006098:	2b00      	cmp	r3, #0
 800609a:	d15a      	bne.n	8006152 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0220 	bic.w	r2, r2, #32
 80060aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0201 	bic.w	r2, r2, #1
 80060ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d135      	bne.n	8006148 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	613b      	str	r3, [r7, #16]
   return(result);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f023 0310 	bic.w	r3, r3, #16
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006102:	623a      	str	r2, [r7, #32]
 8006104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	69f9      	ldr	r1, [r7, #28]
 8006108:	6a3a      	ldr	r2, [r7, #32]
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b10      	cmp	r3, #16
 8006122:	d10a      	bne.n	800613a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fdbb 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
 8006146:	e002      	b.n	800614e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fb ffdb 	bl	8002104 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e002      	b.n	8006158 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e000      	b.n	8006158 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006156:	2302      	movs	r3, #2
  }
}
 8006158:	4618      	mov	r0, r3
 800615a:	3730      	adds	r7, #48	; 0x30
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006164:	b0c0      	sub	sp, #256	; 0x100
 8006166:	af00      	add	r7, sp, #0
 8006168:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617c:	68d9      	ldr	r1, [r3, #12]
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	ea40 0301 	orr.w	r3, r0, r1
 8006188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	431a      	orrs	r2, r3
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	431a      	orrs	r2, r3
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061b8:	f021 010c 	bic.w	r1, r1, #12
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061c6:	430b      	orrs	r3, r1
 80061c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061da:	6999      	ldr	r1, [r3, #24]
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	ea40 0301 	orr.w	r3, r0, r1
 80061e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b8f      	ldr	r3, [pc, #572]	; (800642c <UART_SetConfig+0x2cc>)
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d005      	beq.n	8006200 <UART_SetConfig+0xa0>
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b8d      	ldr	r3, [pc, #564]	; (8006430 <UART_SetConfig+0x2d0>)
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d104      	bne.n	800620a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006200:	f7fd fde2 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 8006204:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006208:	e003      	b.n	8006212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800620a:	f7fd fdc9 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 800620e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621c:	f040 810c 	bne.w	8006438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006224:	2200      	movs	r2, #0
 8006226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800622a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800622e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006232:	4622      	mov	r2, r4
 8006234:	462b      	mov	r3, r5
 8006236:	1891      	adds	r1, r2, r2
 8006238:	65b9      	str	r1, [r7, #88]	; 0x58
 800623a:	415b      	adcs	r3, r3
 800623c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800623e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006242:	4621      	mov	r1, r4
 8006244:	eb12 0801 	adds.w	r8, r2, r1
 8006248:	4629      	mov	r1, r5
 800624a:	eb43 0901 	adc.w	r9, r3, r1
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800625a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800625e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006262:	4690      	mov	r8, r2
 8006264:	4699      	mov	r9, r3
 8006266:	4623      	mov	r3, r4
 8006268:	eb18 0303 	adds.w	r3, r8, r3
 800626c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006270:	462b      	mov	r3, r5
 8006272:	eb49 0303 	adc.w	r3, r9, r3
 8006276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800627a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006286:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800628a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800628e:	460b      	mov	r3, r1
 8006290:	18db      	adds	r3, r3, r3
 8006292:	653b      	str	r3, [r7, #80]	; 0x50
 8006294:	4613      	mov	r3, r2
 8006296:	eb42 0303 	adc.w	r3, r2, r3
 800629a:	657b      	str	r3, [r7, #84]	; 0x54
 800629c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062a4:	f7fa f804 	bl	80002b0 <__aeabi_uldivmod>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4b61      	ldr	r3, [pc, #388]	; (8006434 <UART_SetConfig+0x2d4>)
 80062ae:	fba3 2302 	umull	r2, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	011c      	lsls	r4, r3, #4
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	1891      	adds	r1, r2, r2
 80062ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80062d0:	415b      	adcs	r3, r3
 80062d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062d8:	4641      	mov	r1, r8
 80062da:	eb12 0a01 	adds.w	sl, r2, r1
 80062de:	4649      	mov	r1, r9
 80062e0:	eb43 0b01 	adc.w	fp, r3, r1
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062f8:	4692      	mov	sl, r2
 80062fa:	469b      	mov	fp, r3
 80062fc:	4643      	mov	r3, r8
 80062fe:	eb1a 0303 	adds.w	r3, sl, r3
 8006302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006306:	464b      	mov	r3, r9
 8006308:	eb4b 0303 	adc.w	r3, fp, r3
 800630c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800631c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006324:	460b      	mov	r3, r1
 8006326:	18db      	adds	r3, r3, r3
 8006328:	643b      	str	r3, [r7, #64]	; 0x40
 800632a:	4613      	mov	r3, r2
 800632c:	eb42 0303 	adc.w	r3, r2, r3
 8006330:	647b      	str	r3, [r7, #68]	; 0x44
 8006332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800633a:	f7f9 ffb9 	bl	80002b0 <__aeabi_uldivmod>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4611      	mov	r1, r2
 8006344:	4b3b      	ldr	r3, [pc, #236]	; (8006434 <UART_SetConfig+0x2d4>)
 8006346:	fba3 2301 	umull	r2, r3, r3, r1
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	2264      	movs	r2, #100	; 0x64
 800634e:	fb02 f303 	mul.w	r3, r2, r3
 8006352:	1acb      	subs	r3, r1, r3
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800635a:	4b36      	ldr	r3, [pc, #216]	; (8006434 <UART_SetConfig+0x2d4>)
 800635c:	fba3 2302 	umull	r2, r3, r3, r2
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006368:	441c      	add	r4, r3
 800636a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800636e:	2200      	movs	r2, #0
 8006370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006374:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800637c:	4642      	mov	r2, r8
 800637e:	464b      	mov	r3, r9
 8006380:	1891      	adds	r1, r2, r2
 8006382:	63b9      	str	r1, [r7, #56]	; 0x38
 8006384:	415b      	adcs	r3, r3
 8006386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800638c:	4641      	mov	r1, r8
 800638e:	1851      	adds	r1, r2, r1
 8006390:	6339      	str	r1, [r7, #48]	; 0x30
 8006392:	4649      	mov	r1, r9
 8006394:	414b      	adcs	r3, r1
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063a4:	4659      	mov	r1, fp
 80063a6:	00cb      	lsls	r3, r1, #3
 80063a8:	4651      	mov	r1, sl
 80063aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ae:	4651      	mov	r1, sl
 80063b0:	00ca      	lsls	r2, r1, #3
 80063b2:	4610      	mov	r0, r2
 80063b4:	4619      	mov	r1, r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	4642      	mov	r2, r8
 80063ba:	189b      	adds	r3, r3, r2
 80063bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063c0:	464b      	mov	r3, r9
 80063c2:	460a      	mov	r2, r1
 80063c4:	eb42 0303 	adc.w	r3, r2, r3
 80063c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063e0:	460b      	mov	r3, r1
 80063e2:	18db      	adds	r3, r3, r3
 80063e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063e6:	4613      	mov	r3, r2
 80063e8:	eb42 0303 	adc.w	r3, r2, r3
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063f6:	f7f9 ff5b 	bl	80002b0 <__aeabi_uldivmod>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <UART_SetConfig+0x2d4>)
 8006400:	fba3 1302 	umull	r1, r3, r3, r2
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	2164      	movs	r1, #100	; 0x64
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	3332      	adds	r3, #50	; 0x32
 8006412:	4a08      	ldr	r2, [pc, #32]	; (8006434 <UART_SetConfig+0x2d4>)
 8006414:	fba2 2303 	umull	r2, r3, r2, r3
 8006418:	095b      	lsrs	r3, r3, #5
 800641a:	f003 0207 	and.w	r2, r3, #7
 800641e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4422      	add	r2, r4
 8006426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006428:	e106      	b.n	8006638 <UART_SetConfig+0x4d8>
 800642a:	bf00      	nop
 800642c:	40011000 	.word	0x40011000
 8006430:	40011400 	.word	0x40011400
 8006434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643c:	2200      	movs	r2, #0
 800643e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006442:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800644a:	4642      	mov	r2, r8
 800644c:	464b      	mov	r3, r9
 800644e:	1891      	adds	r1, r2, r2
 8006450:	6239      	str	r1, [r7, #32]
 8006452:	415b      	adcs	r3, r3
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
 8006456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800645a:	4641      	mov	r1, r8
 800645c:	1854      	adds	r4, r2, r1
 800645e:	4649      	mov	r1, r9
 8006460:	eb43 0501 	adc.w	r5, r3, r1
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	00eb      	lsls	r3, r5, #3
 800646e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006472:	00e2      	lsls	r2, r4, #3
 8006474:	4614      	mov	r4, r2
 8006476:	461d      	mov	r5, r3
 8006478:	4643      	mov	r3, r8
 800647a:	18e3      	adds	r3, r4, r3
 800647c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006480:	464b      	mov	r3, r9
 8006482:	eb45 0303 	adc.w	r3, r5, r3
 8006486:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006496:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064a6:	4629      	mov	r1, r5
 80064a8:	008b      	lsls	r3, r1, #2
 80064aa:	4621      	mov	r1, r4
 80064ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064b0:	4621      	mov	r1, r4
 80064b2:	008a      	lsls	r2, r1, #2
 80064b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064b8:	f7f9 fefa 	bl	80002b0 <__aeabi_uldivmod>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4b60      	ldr	r3, [pc, #384]	; (8006644 <UART_SetConfig+0x4e4>)
 80064c2:	fba3 2302 	umull	r2, r3, r3, r2
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	011c      	lsls	r4, r3, #4
 80064ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	61b9      	str	r1, [r7, #24]
 80064e4:	415b      	adcs	r3, r3
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064ec:	4641      	mov	r1, r8
 80064ee:	1851      	adds	r1, r2, r1
 80064f0:	6139      	str	r1, [r7, #16]
 80064f2:	4649      	mov	r1, r9
 80064f4:	414b      	adcs	r3, r1
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006504:	4659      	mov	r1, fp
 8006506:	00cb      	lsls	r3, r1, #3
 8006508:	4651      	mov	r1, sl
 800650a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650e:	4651      	mov	r1, sl
 8006510:	00ca      	lsls	r2, r1, #3
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	4603      	mov	r3, r0
 8006518:	4642      	mov	r2, r8
 800651a:	189b      	adds	r3, r3, r2
 800651c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006520:	464b      	mov	r3, r9
 8006522:	460a      	mov	r2, r1
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	67bb      	str	r3, [r7, #120]	; 0x78
 8006536:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006544:	4649      	mov	r1, r9
 8006546:	008b      	lsls	r3, r1, #2
 8006548:	4641      	mov	r1, r8
 800654a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654e:	4641      	mov	r1, r8
 8006550:	008a      	lsls	r2, r1, #2
 8006552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006556:	f7f9 feab 	bl	80002b0 <__aeabi_uldivmod>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4611      	mov	r1, r2
 8006560:	4b38      	ldr	r3, [pc, #224]	; (8006644 <UART_SetConfig+0x4e4>)
 8006562:	fba3 2301 	umull	r2, r3, r3, r1
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	2264      	movs	r2, #100	; 0x64
 800656a:	fb02 f303 	mul.w	r3, r2, r3
 800656e:	1acb      	subs	r3, r1, r3
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	3332      	adds	r3, #50	; 0x32
 8006574:	4a33      	ldr	r2, [pc, #204]	; (8006644 <UART_SetConfig+0x4e4>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006580:	441c      	add	r4, r3
 8006582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006586:	2200      	movs	r2, #0
 8006588:	673b      	str	r3, [r7, #112]	; 0x70
 800658a:	677a      	str	r2, [r7, #116]	; 0x74
 800658c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006590:	4642      	mov	r2, r8
 8006592:	464b      	mov	r3, r9
 8006594:	1891      	adds	r1, r2, r2
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	415b      	adcs	r3, r3
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065a0:	4641      	mov	r1, r8
 80065a2:	1851      	adds	r1, r2, r1
 80065a4:	6039      	str	r1, [r7, #0]
 80065a6:	4649      	mov	r1, r9
 80065a8:	414b      	adcs	r3, r1
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065b8:	4659      	mov	r1, fp
 80065ba:	00cb      	lsls	r3, r1, #3
 80065bc:	4651      	mov	r1, sl
 80065be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065c2:	4651      	mov	r1, sl
 80065c4:	00ca      	lsls	r2, r1, #3
 80065c6:	4610      	mov	r0, r2
 80065c8:	4619      	mov	r1, r3
 80065ca:	4603      	mov	r3, r0
 80065cc:	4642      	mov	r2, r8
 80065ce:	189b      	adds	r3, r3, r2
 80065d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80065d2:	464b      	mov	r3, r9
 80065d4:	460a      	mov	r2, r1
 80065d6:	eb42 0303 	adc.w	r3, r2, r3
 80065da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	663b      	str	r3, [r7, #96]	; 0x60
 80065e6:	667a      	str	r2, [r7, #100]	; 0x64
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065f4:	4649      	mov	r1, r9
 80065f6:	008b      	lsls	r3, r1, #2
 80065f8:	4641      	mov	r1, r8
 80065fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065fe:	4641      	mov	r1, r8
 8006600:	008a      	lsls	r2, r1, #2
 8006602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006606:	f7f9 fe53 	bl	80002b0 <__aeabi_uldivmod>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <UART_SetConfig+0x4e4>)
 8006610:	fba3 1302 	umull	r1, r3, r3, r2
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	2164      	movs	r1, #100	; 0x64
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	3332      	adds	r3, #50	; 0x32
 8006622:	4a08      	ldr	r2, [pc, #32]	; (8006644 <UART_SetConfig+0x4e4>)
 8006624:	fba2 2303 	umull	r2, r3, r2, r3
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	f003 020f 	and.w	r2, r3, #15
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4422      	add	r2, r4
 8006636:	609a      	str	r2, [r3, #8]
}
 8006638:	bf00      	nop
 800663a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800663e:	46bd      	mov	sp, r7
 8006640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006644:	51eb851f 	.word	0x51eb851f

08006648 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <MUX>:
void MUX(struct WIFI *a)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2204      	movs	r2, #4
 80066d8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <IPDef>:
void IPDef(struct WIFI *a)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2205      	movs	r2, #5
 8006704:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2206      	movs	r2, #6
 800675c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2208      	movs	r2, #8
 8006788:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2209      	movs	r2, #9
 80067b4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2207      	movs	r2, #7
 80067e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698e:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 80069a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069a2:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80069a6:	af06      	add	r7, sp, #24
 80069a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069b0:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80069b8:	2300      	movs	r3, #0
 80069ba:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80069be:	2300      	movs	r3, #0
 80069c0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80069c4:	2300      	movs	r3, #0
 80069c6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80069ca:	2300      	movs	r3, #0
 80069cc:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 80069d0:	2320      	movs	r3, #32
 80069d2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 80069d6:	2322      	movs	r3, #34	; 0x22
 80069d8:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 80069dc:	4b7c      	ldr	r3, [pc, #496]	; (8006bd0 <AT_ESP8266_ND+0x230>)
 80069de:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 80069e2:	4a7c      	ldr	r2, [pc, #496]	; (8006bd4 <AT_ESP8266_ND+0x234>)
 80069e4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	4611      	mov	r1, r2
 80069ec:	8019      	strh	r1, [r3, #0]
 80069ee:	3302      	adds	r3, #2
 80069f0:	0c12      	lsrs	r2, r2, #16
 80069f2:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80069f4:	f642 4322 	movw	r3, #11298	; 0x2c22
 80069f8:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80069fc:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006a00:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006a20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7f9 fbe0 	bl	80001f4 <strlen>
 8006a34:	4603      	mov	r3, r0
 8006a36:	461a      	mov	r2, r3
 8006a38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006a46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006a56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7f9 fbc5 	bl	80001f4 <strlen>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2206      	movs	r2, #6
 8006a88:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006a8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ac4:	603b      	str	r3, [r7, #0]
 8006ac6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006aca:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ace:	6812      	ldr	r2, [r2, #0]
 8006ad0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ad4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ad8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006adc:	6809      	ldr	r1, [r1, #0]
 8006ade:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ae2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ae6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006aea:	6800      	ldr	r0, [r0, #0]
 8006aec:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006af0:	2300      	movs	r3, #0
 8006af2:	9305      	str	r3, [sp, #20]
 8006af4:	9004      	str	r0, [sp, #16]
 8006af6:	9103      	str	r1, [sp, #12]
 8006af8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006afc:	9102      	str	r1, [sp, #8]
 8006afe:	9201      	str	r2, [sp, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	4633      	mov	r3, r6
 8006b06:	4a34      	ldr	r2, [pc, #208]	; (8006bd8 <AT_ESP8266_ND+0x238>)
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f007 ff1e 	bl	800e94c <FT_String_ND>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	f040 8140 	bne.w	8006d98 <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2206      	movs	r2, #6
 8006b24:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d150      	bne.n	8006bdc <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006b3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006b48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006b56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006b64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b78:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b7c:	6812      	ldr	r2, [r2, #0]
 8006b7e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b82:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b86:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b8a:	6809      	ldr	r1, [r1, #0]
 8006b8c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b90:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b94:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b98:	6800      	ldr	r0, [r0, #0]
 8006b9a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006b9e:	2304      	movs	r3, #4
 8006ba0:	9305      	str	r3, [sp, #20]
 8006ba2:	9004      	str	r0, [sp, #16]
 8006ba4:	9103      	str	r1, [sp, #12]
 8006ba6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006baa:	9102      	str	r1, [sp, #8]
 8006bac:	9201      	str	r2, [sp, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4633      	mov	r3, r6
 8006bb4:	4a08      	ldr	r2, [pc, #32]	; (8006bd8 <AT_ESP8266_ND+0x238>)
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f007 fec7 	bl	800e94c <FT_String_ND>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006bce:	e04f      	b.n	8006c70 <AT_ESP8266_ND+0x2d0>
 8006bd0:	00222c22 	.word	0x00222c22
 8006bd4:	08010b34 	.word	0x08010b34
 8006bd8:	0801095c 	.word	0x0801095c
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c14:	603b      	str	r3, [r7, #0]
 8006c16:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c1a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c24:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c28:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c2c:	6809      	ldr	r1, [r1, #0]
 8006c2e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c32:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c36:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006c40:	2305      	movs	r3, #5
 8006c42:	9305      	str	r3, [sp, #20]
 8006c44:	9004      	str	r0, [sp, #16]
 8006c46:	9103      	str	r1, [sp, #12]
 8006c48:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c4c:	9102      	str	r1, [sp, #8]
 8006c4e:	9201      	str	r2, [sp, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	4633      	mov	r3, r6
 8006c56:	4ad2      	ldr	r2, [pc, #840]	; (8006fa0 <AT_ESP8266_ND+0x600>)
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f007 fe76 	bl	800e94c <FT_String_ND>
 8006c60:	4602      	mov	r2, r0
 8006c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006c70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d15a      	bne.n	8006d38 <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 8006c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2263      	movs	r2, #99	; 0x63
 8006c8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006c92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006cd8:	2341      	movs	r3, #65	; 0x41
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f008 f9b1 	bl	800f044 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006cf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006cfe:	2341      	movs	r3, #65	; 0x41
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	2300      	movs	r3, #0
 8006d04:	2205      	movs	r2, #5
 8006d06:	f008 f99d 	bl	800f044 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006d28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006d38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d126      	bne.n	8006d98 <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 8006d4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2237      	movs	r2, #55	; 0x37
 8006d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006d5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006d6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006d88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2204      	movs	r2, #4
 8006da4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006db6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006dc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006dd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006de6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006df0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006df4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006df8:	6809      	ldr	r1, [r1, #0]
 8006dfa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006dfe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e02:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e06:	6800      	ldr	r0, [r0, #0]
 8006e08:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	9305      	str	r3, [sp, #20]
 8006e10:	9004      	str	r0, [sp, #16]
 8006e12:	9103      	str	r1, [sp, #12]
 8006e14:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e18:	9102      	str	r1, [sp, #8]
 8006e1a:	9201      	str	r2, [sp, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	4633      	mov	r3, r6
 8006e22:	4a60      	ldr	r2, [pc, #384]	; (8006fa4 <AT_ESP8266_ND+0x604>)
 8006e24:	4629      	mov	r1, r5
 8006e26:	4620      	mov	r0, r4
 8006e28:	f007 fd90 	bl	800e94c <FT_String_ND>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	f040 83b4 	bne.w	800759c <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 8006e34:	2301      	movs	r3, #1
 8006e36:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2206      	movs	r2, #6
 8006e46:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006e58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006e66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e88:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e92:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e96:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e9a:	6809      	ldr	r1, [r1, #0]
 8006e9c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ea0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ea4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ea8:	6800      	ldr	r0, [r0, #0]
 8006eaa:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006eae:	2300      	movs	r3, #0
 8006eb0:	9305      	str	r3, [sp, #20]
 8006eb2:	9004      	str	r0, [sp, #16]
 8006eb4:	9103      	str	r1, [sp, #12]
 8006eb6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006eba:	9102      	str	r1, [sp, #8]
 8006ebc:	9201      	str	r2, [sp, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	4633      	mov	r3, r6
 8006ec4:	4a38      	ldr	r2, [pc, #224]	; (8006fa8 <AT_ESP8266_ND+0x608>)
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f007 fd3f 	bl	800e94c <FT_String_ND>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d113      	bne.n	8006efc <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006ed4:	2313      	movs	r3, #19
 8006ed6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006ef8:	f001 bae1 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006efc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2208      	movs	r2, #8
 8006f08:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006f0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006f36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f44:	603b      	str	r3, [r7, #0]
 8006f46:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f4a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f54:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f58:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f5c:	6809      	ldr	r1, [r1, #0]
 8006f5e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f62:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f66:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f70:	2300      	movs	r3, #0
 8006f72:	9305      	str	r3, [sp, #20]
 8006f74:	9004      	str	r0, [sp, #16]
 8006f76:	9103      	str	r1, [sp, #12]
 8006f78:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f7c:	9102      	str	r1, [sp, #8]
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	4633      	mov	r3, r6
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <AT_ESP8266_ND+0x60c>)
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f007 fcde 	bl	800e94c <FT_String_ND>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d10c      	bne.n	8006fb0 <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8006f96:	230d      	movs	r3, #13
 8006f98:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f9c:	f001 ba8f 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
 8006fa0:	0801095c 	.word	0x0801095c
 8006fa4:	08010964 	.word	0x08010964
 8006fa8:	0801096c 	.word	0x0801096c
 8006fac:	08010974 	.word	0x08010974
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006fb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	220a      	movs	r2, #10
 8006fbc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006fc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006fdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fe0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006fea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ff8:	603b      	str	r3, [r7, #0]
 8006ffa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ffe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007008:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800700c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007010:	6809      	ldr	r1, [r1, #0]
 8007012:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007016:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800701a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800701e:	6800      	ldr	r0, [r0, #0]
 8007020:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007024:	2300      	movs	r3, #0
 8007026:	9305      	str	r3, [sp, #20]
 8007028:	9004      	str	r0, [sp, #16]
 800702a:	9103      	str	r1, [sp, #12]
 800702c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007030:	9102      	str	r1, [sp, #8]
 8007032:	9201      	str	r2, [sp, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4633      	mov	r3, r6
 800703a:	4aaa      	ldr	r2, [pc, #680]	; (80072e4 <AT_ESP8266_ND+0x944>)
 800703c:	4629      	mov	r1, r5
 800703e:	4620      	mov	r0, r4
 8007040:	f007 fc84 	bl	800e94c <FT_String_ND>
 8007044:	4603      	mov	r3, r0
 8007046:	2b01      	cmp	r3, #1
 8007048:	d104      	bne.n	8007054 <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 800704a:	231c      	movs	r3, #28
 800704c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007050:	f001 ba35 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8007054:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007058:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	220f      	movs	r2, #15
 8007060:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800708e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800709c:	603b      	str	r3, [r7, #0]
 800709e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070a2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070a6:	6812      	ldr	r2, [r2, #0]
 80070a8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070ac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070b0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070b4:	6809      	ldr	r1, [r1, #0]
 80070b6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070ba:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070be:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070c2:	6800      	ldr	r0, [r0, #0]
 80070c4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80070c8:	2300      	movs	r3, #0
 80070ca:	9305      	str	r3, [sp, #20]
 80070cc:	9004      	str	r0, [sp, #16]
 80070ce:	9103      	str	r1, [sp, #12]
 80070d0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070d4:	9102      	str	r1, [sp, #8]
 80070d6:	9201      	str	r2, [sp, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	4633      	mov	r3, r6
 80070de:	4a82      	ldr	r2, [pc, #520]	; (80072e8 <AT_ESP8266_ND+0x948>)
 80070e0:	4629      	mov	r1, r5
 80070e2:	4620      	mov	r0, r4
 80070e4:	f007 fc32 	bl	800e94c <FT_String_ND>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d104      	bne.n	80070f8 <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 80070ee:	2317      	movs	r3, #23
 80070f0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070f4:	f001 b9e3 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 80070f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2203      	movs	r2, #3
 8007104:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007108:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800710c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007116:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800711a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007128:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007132:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007136:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007146:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007150:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007154:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007158:	6809      	ldr	r1, [r1, #0]
 800715a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800715e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007162:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007166:	6800      	ldr	r0, [r0, #0]
 8007168:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800716c:	2300      	movs	r3, #0
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	9004      	str	r0, [sp, #16]
 8007172:	9103      	str	r1, [sp, #12]
 8007174:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007178:	9102      	str	r1, [sp, #8]
 800717a:	9201      	str	r2, [sp, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4633      	mov	r3, r6
 8007182:	4a5a      	ldr	r2, [pc, #360]	; (80072ec <AT_ESP8266_ND+0x94c>)
 8007184:	4629      	mov	r1, r5
 8007186:	4620      	mov	r0, r4
 8007188:	f007 fbe0 	bl	800e94c <FT_String_ND>
 800718c:	4603      	mov	r3, r0
 800718e:	2b01      	cmp	r3, #1
 8007190:	d104      	bne.n	800719c <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 8007192:	2314      	movs	r3, #20
 8007194:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007198:	f001 b991 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 800719c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	220c      	movs	r2, #12
 80071a8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80071ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80071ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80071c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80071d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071fc:	6809      	ldr	r1, [r1, #0]
 80071fe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007202:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007206:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007210:	2300      	movs	r3, #0
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	9004      	str	r0, [sp, #16]
 8007216:	9103      	str	r1, [sp, #12]
 8007218:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800721c:	9102      	str	r1, [sp, #8]
 800721e:	9201      	str	r2, [sp, #4]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	4633      	mov	r3, r6
 8007226:	4a32      	ldr	r2, [pc, #200]	; (80072f0 <AT_ESP8266_ND+0x950>)
 8007228:	4629      	mov	r1, r5
 800722a:	4620      	mov	r0, r4
 800722c:	f007 fb8e 	bl	800e94c <FT_String_ND>
 8007230:	4603      	mov	r3, r0
 8007232:	2b01      	cmp	r3, #1
 8007234:	d104      	bne.n	8007240 <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 8007236:	2315      	movs	r3, #21
 8007238:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800723c:	f001 b93f 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	220b      	movs	r2, #11
 800724c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800725e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800726c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007270:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800727a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800727e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007288:	603b      	str	r3, [r7, #0]
 800728a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800728e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007298:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800729c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072a0:	6809      	ldr	r1, [r1, #0]
 80072a2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072a6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072aa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072ae:	6800      	ldr	r0, [r0, #0]
 80072b0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80072b4:	2300      	movs	r3, #0
 80072b6:	9305      	str	r3, [sp, #20]
 80072b8:	9004      	str	r0, [sp, #16]
 80072ba:	9103      	str	r1, [sp, #12]
 80072bc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072c0:	9102      	str	r1, [sp, #8]
 80072c2:	9201      	str	r2, [sp, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	4633      	mov	r3, r6
 80072ca:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <AT_ESP8266_ND+0x954>)
 80072cc:	4629      	mov	r1, r5
 80072ce:	4620      	mov	r0, r4
 80072d0:	f007 fb3c 	bl	800e94c <FT_String_ND>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d10e      	bne.n	80072f8 <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 80072da:	2309      	movs	r3, #9
 80072dc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072e0:	f001 b8ed 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
 80072e4:	08010980 	.word	0x08010980
 80072e8:	0801098c 	.word	0x0801098c
 80072ec:	0801099c 	.word	0x0801099c
 80072f0:	080109a0 	.word	0x080109a0
 80072f4:	080109b0 	.word	0x080109b0
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80072f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	220b      	movs	r2, #11
 8007304:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007308:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800730c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007328:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007332:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007336:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007340:	603b      	str	r3, [r7, #0]
 8007342:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007346:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007350:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007354:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007358:	6809      	ldr	r1, [r1, #0]
 800735a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800735e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007362:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007366:	6800      	ldr	r0, [r0, #0]
 8007368:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800736c:	2300      	movs	r3, #0
 800736e:	9305      	str	r3, [sp, #20]
 8007370:	9004      	str	r0, [sp, #16]
 8007372:	9103      	str	r1, [sp, #12]
 8007374:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007378:	9102      	str	r1, [sp, #8]
 800737a:	9201      	str	r2, [sp, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	4633      	mov	r3, r6
 8007382:	4a82      	ldr	r2, [pc, #520]	; (800758c <AT_ESP8266_ND+0xbec>)
 8007384:	4629      	mov	r1, r5
 8007386:	4620      	mov	r0, r4
 8007388:	f007 fae0 	bl	800e94c <FT_String_ND>
 800738c:	4603      	mov	r3, r0
 800738e:	2b01      	cmp	r3, #1
 8007390:	d104      	bne.n	800739c <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 8007392:	2307      	movs	r3, #7
 8007394:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007398:	f001 b891 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 800739c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	220b      	movs	r2, #11
 80073a8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80073ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80073ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80073c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80073d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073fc:	6809      	ldr	r1, [r1, #0]
 80073fe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007402:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007406:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800740a:	6800      	ldr	r0, [r0, #0]
 800740c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007410:	2300      	movs	r3, #0
 8007412:	9305      	str	r3, [sp, #20]
 8007414:	9004      	str	r0, [sp, #16]
 8007416:	9103      	str	r1, [sp, #12]
 8007418:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800741c:	9102      	str	r1, [sp, #8]
 800741e:	9201      	str	r2, [sp, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	4633      	mov	r3, r6
 8007426:	4a5a      	ldr	r2, [pc, #360]	; (8007590 <AT_ESP8266_ND+0xbf0>)
 8007428:	4629      	mov	r1, r5
 800742a:	4620      	mov	r0, r4
 800742c:	f007 fa8e 	bl	800e94c <FT_String_ND>
 8007430:	4603      	mov	r3, r0
 8007432:	2b01      	cmp	r3, #1
 8007434:	d104      	bne.n	8007440 <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 8007436:	2308      	movs	r3, #8
 8007438:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800743c:	f001 b83f 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8007440:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007444:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	220a      	movs	r2, #10
 800744c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007450:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007454:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800745e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007462:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800746c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800747a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800747e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800748e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007498:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800749c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074a0:	6809      	ldr	r1, [r1, #0]
 80074a2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074a6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074aa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074ae:	6800      	ldr	r0, [r0, #0]
 80074b0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80074b4:	2300      	movs	r3, #0
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	9004      	str	r0, [sp, #16]
 80074ba:	9103      	str	r1, [sp, #12]
 80074bc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074c0:	9102      	str	r1, [sp, #8]
 80074c2:	9201      	str	r2, [sp, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	4633      	mov	r3, r6
 80074ca:	4a32      	ldr	r2, [pc, #200]	; (8007594 <AT_ESP8266_ND+0xbf4>)
 80074cc:	4629      	mov	r1, r5
 80074ce:	4620      	mov	r0, r4
 80074d0:	f007 fa3c 	bl	800e94c <FT_String_ND>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d104      	bne.n	80074e4 <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 80074da:	231b      	movs	r3, #27
 80074dc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074e0:	f000 bfed 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 80074e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2207      	movs	r2, #7
 80074f0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80074f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007502:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007506:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800751e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007522:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007532:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800753c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007540:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007544:	6809      	ldr	r1, [r1, #0]
 8007546:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800754a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800754e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007552:	6800      	ldr	r0, [r0, #0]
 8007554:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007558:	2300      	movs	r3, #0
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	9004      	str	r0, [sp, #16]
 800755e:	9103      	str	r1, [sp, #12]
 8007560:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007564:	9102      	str	r1, [sp, #8]
 8007566:	9201      	str	r2, [sp, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	4633      	mov	r3, r6
 800756e:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <AT_ESP8266_ND+0xbf8>)
 8007570:	4629      	mov	r1, r5
 8007572:	4620      	mov	r0, r4
 8007574:	f007 f9ea 	bl	800e94c <FT_String_ND>
 8007578:	4603      	mov	r3, r0
 800757a:	2b01      	cmp	r3, #1
 800757c:	f040 879f 	bne.w	80084be <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 8007580:	230f      	movs	r3, #15
 8007582:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007586:	f000 bf9a 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
 800758a:	bf00      	nop
 800758c:	080109bc 	.word	0x080109bc
 8007590:	080109c8 	.word	0x080109c8
 8007594:	080109d4 	.word	0x080109d4
 8007598:	080109e0 	.word	0x080109e0
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 800759c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2207      	movs	r2, #7
 80075a8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80075ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80075ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80075c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80075d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075e4:	603b      	str	r3, [r7, #0]
 80075e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075fc:	6809      	ldr	r1, [r1, #0]
 80075fe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007602:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007606:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800760a:	6800      	ldr	r0, [r0, #0]
 800760c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007610:	2300      	movs	r3, #0
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	9004      	str	r0, [sp, #16]
 8007616:	9103      	str	r1, [sp, #12]
 8007618:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800761c:	9102      	str	r1, [sp, #8]
 800761e:	9201      	str	r2, [sp, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4633      	mov	r3, r6
 8007626:	4aaa      	ldr	r2, [pc, #680]	; (80078d0 <AT_ESP8266_ND+0xf30>)
 8007628:	4629      	mov	r1, r5
 800762a:	4620      	mov	r0, r4
 800762c:	f007 f98e 	bl	800e94c <FT_String_ND>
 8007630:	4603      	mov	r3, r0
 8007632:	2b01      	cmp	r3, #1
 8007634:	f040 839d 	bne.w	8007d72 <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 8007638:	2302      	movs	r3, #2
 800763a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 800763e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007642:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2208      	movs	r2, #8
 800764a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 800764e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007652:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800765c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007660:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800766a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800766e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800767c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800768c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007696:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800769a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800769e:	6809      	ldr	r1, [r1, #0]
 80076a0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076a4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80076a8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80076b2:	2300      	movs	r3, #0
 80076b4:	9305      	str	r3, [sp, #20]
 80076b6:	9004      	str	r0, [sp, #16]
 80076b8:	9103      	str	r1, [sp, #12]
 80076ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076be:	9102      	str	r1, [sp, #8]
 80076c0:	9201      	str	r2, [sp, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	4633      	mov	r3, r6
 80076c8:	4a82      	ldr	r2, [pc, #520]	; (80078d4 <AT_ESP8266_ND+0xf34>)
 80076ca:	4629      	mov	r1, r5
 80076cc:	4620      	mov	r0, r4
 80076ce:	f007 f93d 	bl	800e94c <FT_String_ND>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d104      	bne.n	80076e2 <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 80076d8:	2306      	movs	r3, #6
 80076da:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076de:	f000 beee 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80076e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2215      	movs	r2, #21
 80076ee:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80076f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007700:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007704:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800770e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007712:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800771c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007730:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800773a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800773e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007742:	6809      	ldr	r1, [r1, #0]
 8007744:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007748:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800774c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007750:	6800      	ldr	r0, [r0, #0]
 8007752:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007756:	2300      	movs	r3, #0
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	9004      	str	r0, [sp, #16]
 800775c:	9103      	str	r1, [sp, #12]
 800775e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007762:	9102      	str	r1, [sp, #8]
 8007764:	9201      	str	r2, [sp, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	4633      	mov	r3, r6
 800776c:	4a5a      	ldr	r2, [pc, #360]	; (80078d8 <AT_ESP8266_ND+0xf38>)
 800776e:	4629      	mov	r1, r5
 8007770:	4620      	mov	r0, r4
 8007772:	f007 f8eb 	bl	800e94c <FT_String_ND>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d104      	bne.n	8007786 <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 800777c:	230e      	movs	r3, #14
 800777e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007782:	f000 be9c 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800778a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	220c      	movs	r2, #12
 8007792:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800779a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80077a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80077b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80077c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077d8:	6812      	ldr	r2, [r2, #0]
 80077da:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077e6:	6809      	ldr	r1, [r1, #0]
 80077e8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077ec:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80077f0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80077f4:	6800      	ldr	r0, [r0, #0]
 80077f6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80077fa:	2300      	movs	r3, #0
 80077fc:	9305      	str	r3, [sp, #20]
 80077fe:	9004      	str	r0, [sp, #16]
 8007800:	9103      	str	r1, [sp, #12]
 8007802:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007806:	9102      	str	r1, [sp, #8]
 8007808:	9201      	str	r2, [sp, #4]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	4633      	mov	r3, r6
 8007810:	4a32      	ldr	r2, [pc, #200]	; (80078dc <AT_ESP8266_ND+0xf3c>)
 8007812:	4629      	mov	r1, r5
 8007814:	4620      	mov	r0, r4
 8007816:	f007 f899 	bl	800e94c <FT_String_ND>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d104      	bne.n	800782a <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 8007820:	2316      	movs	r3, #22
 8007822:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007826:	f000 be4a 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 800782a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800782e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	220b      	movs	r2, #11
 8007836:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 800783a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800783e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800784c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007856:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007878:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007882:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007886:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800788a:	6809      	ldr	r1, [r1, #0]
 800788c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007890:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007894:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007898:	6800      	ldr	r0, [r0, #0]
 800789a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800789e:	2300      	movs	r3, #0
 80078a0:	9305      	str	r3, [sp, #20]
 80078a2:	9004      	str	r0, [sp, #16]
 80078a4:	9103      	str	r1, [sp, #12]
 80078a6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078aa:	9102      	str	r1, [sp, #8]
 80078ac:	9201      	str	r2, [sp, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	4633      	mov	r3, r6
 80078b4:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <AT_ESP8266_ND+0xf40>)
 80078b6:	4629      	mov	r1, r5
 80078b8:	4620      	mov	r0, r4
 80078ba:	f007 f847 	bl	800e94c <FT_String_ND>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d10f      	bne.n	80078e4 <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 80078c4:	231a      	movs	r3, #26
 80078c6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078ca:	f000 bdf8 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
 80078ce:	bf00      	nop
 80078d0:	080109e8 	.word	0x080109e8
 80078d4:	080109f0 	.word	0x080109f0
 80078d8:	080109fc 	.word	0x080109fc
 80078dc:	080109a0 	.word	0x080109a0
 80078e0:	080109b0 	.word	0x080109b0
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80078e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2211      	movs	r2, #17
 80078f0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80078f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800791e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007922:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800792c:	603b      	str	r3, [r7, #0]
 800792e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007932:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007936:	6812      	ldr	r2, [r2, #0]
 8007938:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800793c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007940:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007944:	6809      	ldr	r1, [r1, #0]
 8007946:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800794a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800794e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007952:	6800      	ldr	r0, [r0, #0]
 8007954:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007958:	2300      	movs	r3, #0
 800795a:	9305      	str	r3, [sp, #20]
 800795c:	9004      	str	r0, [sp, #16]
 800795e:	9103      	str	r1, [sp, #12]
 8007960:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007964:	9102      	str	r1, [sp, #8]
 8007966:	9201      	str	r2, [sp, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	4633      	mov	r3, r6
 800796e:	4aaa      	ldr	r2, [pc, #680]	; (8007c18 <AT_ESP8266_ND+0x1278>)
 8007970:	4629      	mov	r1, r5
 8007972:	4620      	mov	r0, r4
 8007974:	f006 ffea 	bl	800e94c <FT_String_ND>
 8007978:	4603      	mov	r3, r0
 800797a:	2b01      	cmp	r3, #1
 800797c:	d104      	bne.n	8007988 <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 800797e:	2311      	movs	r3, #17
 8007980:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007984:	f000 bd9b 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8007988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800798c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	220a      	movs	r2, #10
 8007994:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800799c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80079a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80079b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80079c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079d0:	603b      	str	r3, [r7, #0]
 80079d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079e8:	6809      	ldr	r1, [r1, #0]
 80079ea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079ee:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80079f2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80079f6:	6800      	ldr	r0, [r0, #0]
 80079f8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80079fc:	2300      	movs	r3, #0
 80079fe:	9305      	str	r3, [sp, #20]
 8007a00:	9004      	str	r0, [sp, #16]
 8007a02:	9103      	str	r1, [sp, #12]
 8007a04:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a08:	9102      	str	r1, [sp, #8]
 8007a0a:	9201      	str	r2, [sp, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4633      	mov	r3, r6
 8007a12:	4a82      	ldr	r2, [pc, #520]	; (8007c1c <AT_ESP8266_ND+0x127c>)
 8007a14:	4629      	mov	r1, r5
 8007a16:	4620      	mov	r0, r4
 8007a18:	f006 ff98 	bl	800e94c <FT_String_ND>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d104      	bne.n	8007a2c <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 8007a22:	231d      	movs	r3, #29
 8007a24:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a28:	f000 bd49 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007a2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	220b      	movs	r2, #11
 8007a38:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007a3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a74:	603b      	str	r3, [r7, #0]
 8007a76:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a7a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a84:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a88:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a8c:	6809      	ldr	r1, [r1, #0]
 8007a8e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a92:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a96:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a9a:	6800      	ldr	r0, [r0, #0]
 8007a9c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9305      	str	r3, [sp, #20]
 8007aa4:	9004      	str	r0, [sp, #16]
 8007aa6:	9103      	str	r1, [sp, #12]
 8007aa8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007aac:	9102      	str	r1, [sp, #8]
 8007aae:	9201      	str	r2, [sp, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	4633      	mov	r3, r6
 8007ab6:	4a5a      	ldr	r2, [pc, #360]	; (8007c20 <AT_ESP8266_ND+0x1280>)
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4620      	mov	r0, r4
 8007abc:	f006 ff46 	bl	800e94c <FT_String_ND>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d104      	bne.n	8007ad0 <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 8007ac6:	231e      	movs	r3, #30
 8007ac8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007acc:	f000 bcf7 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	220b      	movs	r2, #11
 8007adc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007afc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007b0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b18:	603b      	str	r3, [r7, #0]
 8007b1a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b1e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b22:	6812      	ldr	r2, [r2, #0]
 8007b24:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b28:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b2c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b30:	6809      	ldr	r1, [r1, #0]
 8007b32:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b36:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b3a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b3e:	6800      	ldr	r0, [r0, #0]
 8007b40:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b44:	2300      	movs	r3, #0
 8007b46:	9305      	str	r3, [sp, #20]
 8007b48:	9004      	str	r0, [sp, #16]
 8007b4a:	9103      	str	r1, [sp, #12]
 8007b4c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b50:	9102      	str	r1, [sp, #8]
 8007b52:	9201      	str	r2, [sp, #4]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	4633      	mov	r3, r6
 8007b5a:	4a32      	ldr	r2, [pc, #200]	; (8007c24 <AT_ESP8266_ND+0x1284>)
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f006 fef4 	bl	800e94c <FT_String_ND>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d104      	bne.n	8007b74 <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 8007b6a:	231f      	movs	r3, #31
 8007b6c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b70:	f000 bca5 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2208      	movs	r2, #8
 8007b80:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007b92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007ba0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ba4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007bbc:	603b      	str	r3, [r7, #0]
 8007bbe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bc2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bc6:	6812      	ldr	r2, [r2, #0]
 8007bc8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007bcc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007bd0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bd4:	6809      	ldr	r1, [r1, #0]
 8007bd6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bda:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007bde:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007be2:	6800      	ldr	r0, [r0, #0]
 8007be4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007be8:	2300      	movs	r3, #0
 8007bea:	9305      	str	r3, [sp, #20]
 8007bec:	9004      	str	r0, [sp, #16]
 8007bee:	9103      	str	r1, [sp, #12]
 8007bf0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bf4:	9102      	str	r1, [sp, #8]
 8007bf6:	9201      	str	r2, [sp, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4633      	mov	r3, r6
 8007bfe:	4a0a      	ldr	r2, [pc, #40]	; (8007c28 <AT_ESP8266_ND+0x1288>)
 8007c00:	4629      	mov	r1, r5
 8007c02:	4620      	mov	r0, r4
 8007c04:	f006 fea2 	bl	800e94c <FT_String_ND>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d10e      	bne.n	8007c2c <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 8007c0e:	2320      	movs	r3, #32
 8007c10:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c14:	f000 bc53 	b.w	80084be <AT_ESP8266_ND+0x1b1e>
 8007c18:	08010a14 	.word	0x08010a14
 8007c1c:	08010980 	.word	0x08010980
 8007c20:	080109bc 	.word	0x080109bc
 8007c24:	080109c8 	.word	0x080109c8
 8007c28:	08010a28 	.word	0x08010a28
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	220a      	movs	r2, #10
 8007c38:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007c4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007c58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007c66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c74:	603b      	str	r3, [r7, #0]
 8007c76:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c7a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c7e:	6812      	ldr	r2, [r2, #0]
 8007c80:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c84:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c88:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c8c:	6809      	ldr	r1, [r1, #0]
 8007c8e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c92:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c96:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9305      	str	r3, [sp, #20]
 8007ca4:	9004      	str	r0, [sp, #16]
 8007ca6:	9103      	str	r1, [sp, #12]
 8007ca8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cac:	9102      	str	r1, [sp, #8]
 8007cae:	9201      	str	r2, [sp, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	4633      	mov	r3, r6
 8007cb6:	4ab7      	ldr	r2, [pc, #732]	; (8007f94 <AT_ESP8266_ND+0x15f4>)
 8007cb8:	4629      	mov	r1, r5
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f006 fe46 	bl	800e94c <FT_String_ND>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d103      	bne.n	8007cce <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 8007cc6:	2321      	movs	r3, #33	; 0x21
 8007cc8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ccc:	e3f7      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007cce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2205      	movs	r2, #5
 8007cda:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007cde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007cec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007cfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d1c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d26:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d2a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d2e:	6809      	ldr	r1, [r1, #0]
 8007d30:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d34:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d38:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007d42:	2300      	movs	r3, #0
 8007d44:	9305      	str	r3, [sp, #20]
 8007d46:	9004      	str	r0, [sp, #16]
 8007d48:	9103      	str	r1, [sp, #12]
 8007d4a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d4e:	9102      	str	r1, [sp, #8]
 8007d50:	9201      	str	r2, [sp, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	4633      	mov	r3, r6
 8007d58:	4a8f      	ldr	r2, [pc, #572]	; (8007f98 <AT_ESP8266_ND+0x15f8>)
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f006 fdf5 	bl	800e94c <FT_String_ND>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	f040 83aa 	bne.w	80084be <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007d6a:	2322      	movs	r3, #34	; 0x22
 8007d6c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d70:	e3a5      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007d72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	220f      	movs	r2, #15
 8007d7e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007d82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007d90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007d9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007da2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007dac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007dc0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007dca:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007dce:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007dd2:	6809      	ldr	r1, [r1, #0]
 8007dd4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007dd8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007ddc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007de0:	6800      	ldr	r0, [r0, #0]
 8007de2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007de6:	2300      	movs	r3, #0
 8007de8:	9305      	str	r3, [sp, #20]
 8007dea:	9004      	str	r0, [sp, #16]
 8007dec:	9103      	str	r1, [sp, #12]
 8007dee:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007df2:	9102      	str	r1, [sp, #8]
 8007df4:	9201      	str	r2, [sp, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	4633      	mov	r3, r6
 8007dfc:	4a67      	ldr	r2, [pc, #412]	; (8007f9c <AT_ESP8266_ND+0x15fc>)
 8007dfe:	4629      	mov	r1, r5
 8007e00:	4620      	mov	r0, r4
 8007e02:	f006 fda3 	bl	800e94c <FT_String_ND>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d112      	bne.n	8007e32 <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 8007e0c:	230a      	movs	r3, #10
 8007e0e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007e30:	e345      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2209      	movs	r2, #9
 8007e3e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007e6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e80:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e84:	6812      	ldr	r2, [r2, #0]
 8007e86:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e8a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e8e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e92:	6809      	ldr	r1, [r1, #0]
 8007e94:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e98:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007e9c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ea0:	6800      	ldr	r0, [r0, #0]
 8007ea2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9305      	str	r3, [sp, #20]
 8007eaa:	9004      	str	r0, [sp, #16]
 8007eac:	9103      	str	r1, [sp, #12]
 8007eae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007eb2:	9102      	str	r1, [sp, #8]
 8007eb4:	9201      	str	r2, [sp, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	4633      	mov	r3, r6
 8007ebc:	4a38      	ldr	r2, [pc, #224]	; (8007fa0 <AT_ESP8266_ND+0x1600>)
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f006 fd43 	bl	800e94c <FT_String_ND>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d112      	bne.n	8007ef2 <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 8007ecc:	2319      	movs	r3, #25
 8007ece:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007ed2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007ef0:	e2e5      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2208      	movs	r2, #8
 8007efe:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007f02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007f10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007f1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f40:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f4a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f4e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f52:	6809      	ldr	r1, [r1, #0]
 8007f54:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f58:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f5c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f60:	6800      	ldr	r0, [r0, #0]
 8007f62:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f66:	2300      	movs	r3, #0
 8007f68:	9305      	str	r3, [sp, #20]
 8007f6a:	9004      	str	r0, [sp, #16]
 8007f6c:	9103      	str	r1, [sp, #12]
 8007f6e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f72:	9102      	str	r1, [sp, #8]
 8007f74:	9201      	str	r2, [sp, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	4633      	mov	r3, r6
 8007f7c:	4a09      	ldr	r2, [pc, #36]	; (8007fa4 <AT_ESP8266_ND+0x1604>)
 8007f7e:	4629      	mov	r1, r5
 8007f80:	4620      	mov	r0, r4
 8007f82:	f006 fce3 	bl	800e94c <FT_String_ND>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d10d      	bne.n	8007fa8 <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8007f8c:	2310      	movs	r3, #16
 8007f8e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f92:	e294      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
 8007f94:	080109d4 	.word	0x080109d4
 8007f98:	08010a34 	.word	0x08010a34
 8007f9c:	08010a3c 	.word	0x08010a3c
 8007fa0:	08010a4c 	.word	0x08010a4c
 8007fa4:	080109f0 	.word	0x080109f0
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007fa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007fb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007fc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f203 4694 	addw	r6, r3, #1172	; 0x494
 8007fd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 8007fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ff4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ff8:	6812      	ldr	r2, [r2, #0]
 8007ffa:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ffe:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008002:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008006:	6809      	ldr	r1, [r1, #0]
 8008008:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800800c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008010:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008014:	6800      	ldr	r0, [r0, #0]
 8008016:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800801a:	2300      	movs	r3, #0
 800801c:	9305      	str	r3, [sp, #20]
 800801e:	9004      	str	r0, [sp, #16]
 8008020:	9103      	str	r1, [sp, #12]
 8008022:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008026:	9102      	str	r1, [sp, #8]
 8008028:	9201      	str	r2, [sp, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4663      	mov	r3, ip
 8008030:	4632      	mov	r2, r6
 8008032:	4629      	mov	r1, r5
 8008034:	4620      	mov	r0, r4
 8008036:	f006 fc89 	bl	800e94c <FT_String_ND>
 800803a:	4603      	mov	r3, r0
 800803c:	2b01      	cmp	r3, #1
 800803e:	d112      	bne.n	8008066 <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8008040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008044:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 8235 	beq.w	80084be <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8008054:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008058:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8008064:	e22b      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8008066:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800806a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	220d      	movs	r2, #13
 8008072:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8008076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800807a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008084:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008088:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008092:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008096:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80080a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80080b4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80080b8:	6812      	ldr	r2, [r2, #0]
 80080ba:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80080be:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80080c2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80080c6:	6809      	ldr	r1, [r1, #0]
 80080c8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80080cc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80080d0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80080d4:	6800      	ldr	r0, [r0, #0]
 80080d6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80080da:	2300      	movs	r3, #0
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	9004      	str	r0, [sp, #16]
 80080e0:	9103      	str	r1, [sp, #12]
 80080e2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80080e6:	9102      	str	r1, [sp, #8]
 80080e8:	9201      	str	r2, [sp, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	4633      	mov	r3, r6
 80080f0:	4ac5      	ldr	r2, [pc, #788]	; (8008408 <AT_ESP8266_ND+0x1a68>)
 80080f2:	4629      	mov	r1, r5
 80080f4:	4620      	mov	r0, r4
 80080f6:	f006 fc29 	bl	800e94c <FT_String_ND>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d112      	bne.n	8008126 <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8008100:	2312      	movs	r3, #18
 8008102:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8008106:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800810a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800811a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8008124:	e1cb      	b.n	80084be <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8008126:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800812a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	220d      	movs	r2, #13
 8008132:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8008136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800813a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008144:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008148:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008152:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008156:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008160:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008164:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008174:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008178:	6812      	ldr	r2, [r2, #0]
 800817a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800817e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008182:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008186:	6809      	ldr	r1, [r1, #0]
 8008188:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800818c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008190:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008194:	6800      	ldr	r0, [r0, #0]
 8008196:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800819a:	2300      	movs	r3, #0
 800819c:	9305      	str	r3, [sp, #20]
 800819e:	9004      	str	r0, [sp, #16]
 80081a0:	9103      	str	r1, [sp, #12]
 80081a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80081a6:	9102      	str	r1, [sp, #8]
 80081a8:	9201      	str	r2, [sp, #4]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	4633      	mov	r3, r6
 80081b0:	4a96      	ldr	r2, [pc, #600]	; (800840c <AT_ESP8266_ND+0x1a6c>)
 80081b2:	4629      	mov	r1, r5
 80081b4:	4620      	mov	r0, r4
 80081b6:	f006 fbc9 	bl	800e94c <FT_String_ND>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d112      	bne.n	80081e6 <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 80081c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 80081de:	230c      	movs	r3, #12
 80081e0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80081e4:	e16b      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 80081e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	220e      	movs	r2, #14
 80081f2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 80081f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008204:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008208:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008212:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008216:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008224:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008234:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008238:	6812      	ldr	r2, [r2, #0]
 800823a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800823e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008242:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008246:	6809      	ldr	r1, [r1, #0]
 8008248:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800824c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008250:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008254:	6800      	ldr	r0, [r0, #0]
 8008256:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800825a:	2300      	movs	r3, #0
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	9004      	str	r0, [sp, #16]
 8008260:	9103      	str	r1, [sp, #12]
 8008262:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008266:	9102      	str	r1, [sp, #8]
 8008268:	9201      	str	r2, [sp, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	4633      	mov	r3, r6
 8008270:	4a67      	ldr	r2, [pc, #412]	; (8008410 <AT_ESP8266_ND+0x1a70>)
 8008272:	4629      	mov	r1, r5
 8008274:	4620      	mov	r0, r4
 8008276:	f006 fb69 	bl	800e94c <FT_String_ND>
 800827a:	4603      	mov	r3, r0
 800827c:	2b01      	cmp	r3, #1
 800827e:	d112      	bne.n	80082a6 <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 8008280:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008284:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 800829e:	230b      	movs	r3, #11
 80082a0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80082a4:	e10b      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 80082a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	220a      	movs	r2, #10
 80082b2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80082b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80082c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80082d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80082e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80082f4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80082fe:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008302:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008306:	6809      	ldr	r1, [r1, #0]
 8008308:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800830c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008310:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008314:	6800      	ldr	r0, [r0, #0]
 8008316:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800831a:	2300      	movs	r3, #0
 800831c:	9305      	str	r3, [sp, #20]
 800831e:	9004      	str	r0, [sp, #16]
 8008320:	9103      	str	r1, [sp, #12]
 8008322:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008326:	9102      	str	r1, [sp, #8]
 8008328:	9201      	str	r2, [sp, #4]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	4633      	mov	r3, r6
 8008330:	4a38      	ldr	r2, [pc, #224]	; (8008414 <AT_ESP8266_ND+0x1a74>)
 8008332:	4629      	mov	r1, r5
 8008334:	4620      	mov	r0, r4
 8008336:	f006 fb09 	bl	800e94c <FT_String_ND>
 800833a:	4603      	mov	r3, r0
 800833c:	2b01      	cmp	r3, #1
 800833e:	d112      	bne.n	8008366 <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 8008340:	2318      	movs	r3, #24
 8008342:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8008346:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800834a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800835a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8008364:	e0ab      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008366:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800836a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2208      	movs	r2, #8
 8008372:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008376:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800837a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008384:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008388:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80083a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80083b4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80083b8:	6812      	ldr	r2, [r2, #0]
 80083ba:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80083be:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80083c2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80083c6:	6809      	ldr	r1, [r1, #0]
 80083c8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80083cc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80083d0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80083d4:	6800      	ldr	r0, [r0, #0]
 80083d6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80083da:	2300      	movs	r3, #0
 80083dc:	9305      	str	r3, [sp, #20]
 80083de:	9004      	str	r0, [sp, #16]
 80083e0:	9103      	str	r1, [sp, #12]
 80083e2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80083e6:	9102      	str	r1, [sp, #8]
 80083e8:	9201      	str	r2, [sp, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	4633      	mov	r3, r6
 80083f0:	4a09      	ldr	r2, [pc, #36]	; (8008418 <AT_ESP8266_ND+0x1a78>)
 80083f2:	4629      	mov	r1, r5
 80083f4:	4620      	mov	r0, r4
 80083f6:	f006 faa9 	bl	800e94c <FT_String_ND>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d10d      	bne.n	800841c <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 8008400:	2303      	movs	r3, #3
 8008402:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008406:	e05a      	b.n	80084be <AT_ESP8266_ND+0x1b1e>
 8008408:	08010a58 	.word	0x08010a58
 800840c:	08010a68 	.word	0x08010a68
 8008410:	08010a78 	.word	0x08010a78
 8008414:	08010a88 	.word	0x08010a88
 8008418:	08010a94 	.word	0x08010a94
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 800841c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008420:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2209      	movs	r2, #9
 8008428:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800842c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008430:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800843a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800843e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800844c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800845a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800846a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008474:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008478:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800847c:	6809      	ldr	r1, [r1, #0]
 800847e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008482:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008486:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800848a:	6800      	ldr	r0, [r0, #0]
 800848c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008490:	2300      	movs	r3, #0
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	9004      	str	r0, [sp, #16]
 8008496:	9103      	str	r1, [sp, #12]
 8008498:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800849c:	9102      	str	r1, [sp, #8]
 800849e:	9201      	str	r2, [sp, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4633      	mov	r3, r6
 80084a6:	4a78      	ldr	r2, [pc, #480]	; (8008688 <AT_ESP8266_ND+0x1ce8>)
 80084a8:	4629      	mov	r1, r5
 80084aa:	4620      	mov	r0, r4
 80084ac:	f006 fa4e 	bl	800e94c <FT_String_ND>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d103      	bne.n	80084be <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 80084b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084ba:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 80084be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80084cc:	3b01      	subs	r3, #1
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	f201 84c7 	bhi.w	8009e62 <AT_ESP8266_ND+0x34c2>
 80084d4:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <AT_ESP8266_ND+0x1b3c>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	08008501 	.word	0x08008501
 80084e0:	08008691 	.word	0x08008691
 80084e4:	08008913 	.word	0x08008913
 80084e8:	08008a91 	.word	0x08008a91
 80084ec:	08008c69 	.word	0x08008c69
 80084f0:	08008f3d 	.word	0x08008f3d
 80084f4:	080091f5 	.word	0x080091f5
 80084f8:	0800970d 	.word	0x0800970d
 80084fc:	080098e3 	.word	0x080098e3
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008504:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800851e:	2b01      	cmp	r3, #1
 8008520:	d14f      	bne.n	80085c2 <AT_ESP8266_ND+0x1c22>
 8008522:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008526:	2b01      	cmp	r3, #1
 8008528:	d04b      	beq.n	80085c2 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 800852a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800852e:	2b02      	cmp	r3, #2
 8008530:	d047      	beq.n	80085c2 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 8008532:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008536:	2b04      	cmp	r3, #4
 8008538:	d043      	beq.n	80085c2 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 800853a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800853e:	2b13      	cmp	r3, #19
 8008540:	d03f      	beq.n	80085c2 <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 8008542:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008546:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2200      	movs	r2, #0
 800854e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008552:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008556:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2201      	movs	r2, #1
 800855e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8008562:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008566:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008570:	4620      	mov	r0, r4
 8008572:	f7f7 fe3f 	bl	80001f4 <strlen>
 8008576:	4603      	mov	r3, r0
 8008578:	4423      	add	r3, r4
 800857a:	4a44      	ldr	r2, [pc, #272]	; (800868c <AT_ESP8266_ND+0x1cec>)
 800857c:	461c      	mov	r4, r3
 800857e:	4613      	mov	r3, r2
 8008580:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008582:	6020      	str	r0, [r4, #0]
 8008584:	6061      	str	r1, [r4, #4]
 8008586:	60a2      	str	r2, [r4, #8]
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800858c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008590:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800859a:	4618      	mov	r0, r3
 800859c:	f7f7 fe2a 	bl	80001f4 <strlen>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 80085b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2264      	movs	r2, #100	; 0x64
 80085be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 80085c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80085e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d11b      	bne.n	800862a <AT_ESP8266_ND+0x1c8a>
 80085f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d023      	beq.n	8008642 <AT_ESP8266_ND+0x1ca2>
 80085fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085fe:	2b1c      	cmp	r3, #28
 8008600:	d01f      	beq.n	8008642 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 8008602:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008606:	2b02      	cmp	r3, #2
 8008608:	d01b      	beq.n	8008642 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 800860a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800860e:	2b04      	cmp	r3, #4
 8008610:	d017      	beq.n	8008642 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 8008612:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008616:	2b0b      	cmp	r3, #11
 8008618:	d013      	beq.n	8008642 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 800861a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800861e:	2b0c      	cmp	r3, #12
 8008620:	d00f      	beq.n	8008642 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 8008622:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008626:	2b13      	cmp	r3, #19
 8008628:	d00b      	beq.n	8008642 <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 800862a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800862e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008638:	f241 3288 	movw	r2, #5000	; 0x1388
 800863c:	4293      	cmp	r3, r2
 800863e:	f341 841a 	ble.w	8009e76 <AT_ESP8266_ND+0x34d6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008646:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008654:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008658:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2200      	movs	r2, #0
 8008660:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2200      	movs	r2, #0
 8008670:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008684:	f001 bbf7 	b.w	8009e76 <AT_ESP8266_ND+0x34d6>
 8008688:	08010aa0 	.word	0x08010aa0
 800868c:	08010aac 	.word	0x08010aac
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008690:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008694:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80086a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	f040 80c8 	bne.w	8008844 <AT_ESP8266_ND+0x1ea4>
 80086b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	f000 80c3 	beq.w	8008844 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 80086be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	f000 80be 	beq.w	8008844 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 80086c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	f000 80b9 	beq.w	8008844 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 80086d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	f000 80b4 	beq.w	8008844 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 80086dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086e0:	2b0a      	cmp	r3, #10
 80086e2:	f000 80af 	beq.w	8008844 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 80086e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ea:	2b0b      	cmp	r3, #11
 80086ec:	f000 80aa 	beq.w	8008844 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 80086f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086f4:	2b0c      	cmp	r3, #12
 80086f6:	f000 80a5 	beq.w	8008844 <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 80086fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800870a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800870e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2201      	movs	r2, #1
 8008716:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 800871a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800871e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008728:	4620      	mov	r0, r4
 800872a:	f7f7 fd63 	bl	80001f4 <strlen>
 800872e:	4603      	mov	r3, r0
 8008730:	4423      	add	r3, r4
 8008732:	49d5      	ldr	r1, [pc, #852]	; (8008a88 <AT_ESP8266_ND+0x20e8>)
 8008734:	461a      	mov	r2, r3
 8008736:	460b      	mov	r3, r1
 8008738:	cb03      	ldmia	r3!, {r0, r1}
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	6051      	str	r1, [r2, #4]
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 8008742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008746:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008750:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008754:	2201      	movs	r2, #1
 8008756:	4618      	mov	r0, r3
 8008758:	f006 fec7 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 800875c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800876a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800876e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	1d9d      	adds	r5, r3, #6
 8008776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800877a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3306      	adds	r3, #6
 8008782:	4618      	mov	r0, r3
 8008784:	f7f7 fd36 	bl	80001f4 <strlen>
 8008788:	4603      	mov	r3, r0
 800878a:	461a      	mov	r2, r3
 800878c:	4629      	mov	r1, r5
 800878e:	4620      	mov	r0, r4
 8008790:	f006 feab 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008794:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008798:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087a2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7f7 fd24 	bl	80001f4 <strlen>
 80087ac:	4602      	mov	r2, r0
 80087ae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80087b2:	4619      	mov	r1, r3
 80087b4:	4620      	mov	r0, r4
 80087b6:	f006 fe98 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 80087ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80087d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3326      	adds	r3, #38	; 0x26
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7f7 fd06 	bl	80001f4 <strlen>
 80087e8:	4603      	mov	r3, r0
 80087ea:	461a      	mov	r2, r3
 80087ec:	4629      	mov	r1, r5
 80087ee:	4620      	mov	r0, r4
 80087f0:	f006 fe7b 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 80087f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008802:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008806:	2203      	movs	r2, #3
 8008808:	4618      	mov	r0, r3
 800880a:	f006 fe6e 	bl	800f4ea <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800880e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800881c:	4618      	mov	r0, r3
 800881e:	f7f7 fce9 	bl	80001f4 <strlen>
 8008822:	4603      	mov	r3, r0
 8008824:	461a      	mov	r2, r3
 8008826:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800882a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008834:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008838:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	22c8      	movs	r2, #200	; 0xc8
 8008840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8008844:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008848:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008858:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8008862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d11b      	bne.n	80088ac <AT_ESP8266_ND+0x1f0c>
 8008874:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008878:	2b01      	cmp	r3, #1
 800887a:	d023      	beq.n	80088c4 <AT_ESP8266_ND+0x1f24>
 800887c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008880:	2b02      	cmp	r3, #2
 8008882:	d01f      	beq.n	80088c4 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 8008884:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008888:	2b03      	cmp	r3, #3
 800888a:	d01b      	beq.n	80088c4 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 800888c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008890:	2b04      	cmp	r3, #4
 8008892:	d017      	beq.n	80088c4 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 8008894:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008898:	2b0a      	cmp	r3, #10
 800889a:	d013      	beq.n	80088c4 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 800889c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088a0:	2b0b      	cmp	r3, #11
 80088a2:	d00f      	beq.n	80088c4 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 80088a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088a8:	2b0c      	cmp	r3, #12
 80088aa:	d00b      	beq.n	80088c4 <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 80088ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80088ba:	f644 6220 	movw	r2, #20000	; 0x4e20
 80088be:	4293      	cmp	r3, r2
 80088c0:	f341 82db 	ble.w	8009e7a <AT_ESP8266_ND+0x34da>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80088c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80088d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 80088d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088da:	2b0a      	cmp	r3, #10
 80088dc:	d00f      	beq.n	80088fe <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 80088de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 80088ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 80088fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008902:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2200      	movs	r2, #0
 800890a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 800890e:	f001 bab4 	b.w	8009e7a <AT_ESP8266_ND+0x34da>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008916:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008930:	2b01      	cmp	r3, #1
 8008932:	d14d      	bne.n	80089d0 <AT_ESP8266_ND+0x2030>
 8008934:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008938:	2b04      	cmp	r3, #4
 800893a:	d049      	beq.n	80089d0 <AT_ESP8266_ND+0x2030>
 800893c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008940:	2b0a      	cmp	r3, #10
 8008942:	d045      	beq.n	80089d0 <AT_ESP8266_ND+0x2030>
 8008944:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008948:	2b0d      	cmp	r3, #13
 800894a:	d041      	beq.n	80089d0 <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 800894c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008950:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800895c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2201      	movs	r2, #1
 8008968:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 800896c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008970:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800897a:	4620      	mov	r0, r4
 800897c:	f7f7 fc3a 	bl	80001f4 <strlen>
 8008980:	4603      	mov	r3, r0
 8008982:	4423      	add	r3, r4
 8008984:	4941      	ldr	r1, [pc, #260]	; (8008a8c <AT_ESP8266_ND+0x20ec>)
 8008986:	461a      	mov	r2, r3
 8008988:	460b      	mov	r3, r1
 800898a:	cb03      	ldmia	r3!, {r0, r1}
 800898c:	6010      	str	r0, [r2, #0]
 800898e:	6051      	str	r1, [r2, #4]
 8008990:	8819      	ldrh	r1, [r3, #0]
 8008992:	789b      	ldrb	r3, [r3, #2]
 8008994:	8111      	strh	r1, [r2, #8]
 8008996:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800899c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7f7 fc24 	bl	80001f4 <strlen>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80089be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80089cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80089d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80089ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d113      	bne.n	8008a28 <AT_ESP8266_ND+0x2088>
 8008a00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a04:	2b0a      	cmp	r3, #10
 8008a06:	d01b      	beq.n	8008a40 <AT_ESP8266_ND+0x20a0>
 8008a08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a0c:	2b0b      	cmp	r3, #11
 8008a0e:	d017      	beq.n	8008a40 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 8008a10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a14:	2b0c      	cmp	r3, #12
 8008a16:	d013      	beq.n	8008a40 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 8008a18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d00f      	beq.n	8008a40 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 8008a20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a24:	2b0d      	cmp	r3, #13
 8008a26:	d00b      	beq.n	8008a40 <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	f341 821f 	ble.w	8009e7e <AT_ESP8266_ND+0x34de>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008a40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008a52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008a62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008a72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008a82:	f001 b9fc 	b.w	8009e7e <AT_ESP8266_ND+0x34de>
 8008a86:	bf00      	nop
 8008a88:	08010abc 	.word	0x08010abc
 8008a8c:	08010ac8 	.word	0x08010ac8
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008aa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d16b      	bne.n	8008b8a <AT_ESP8266_ND+0x21ea>
 8008ab2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d067      	beq.n	8008b8a <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 8008aba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d063      	beq.n	8008b8a <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 8008ac2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d05f      	beq.n	8008b8a <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 8008aca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ace:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008ada:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ade:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008aea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d115      	bne.n	8008b28 <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008afc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7f7 fb72 	bl	80001f4 <strlen>
 8008b10:	4603      	mov	r3, r0
 8008b12:	4423      	add	r3, r4
 8008b14:	4a52      	ldr	r2, [pc, #328]	; (8008c60 <AT_ESP8266_ND+0x22c0>)
 8008b16:	461c      	mov	r4, r3
 8008b18:	4613      	mov	r3, r2
 8008b1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b1c:	6020      	str	r0, [r4, #0]
 8008b1e:	6061      	str	r1, [r4, #4]
 8008b20:	60a2      	str	r2, [r4, #8]
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	e014      	b.n	8008b52 <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b36:	4620      	mov	r0, r4
 8008b38:	f7f7 fb5c 	bl	80001f4 <strlen>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	4423      	add	r3, r4
 8008b40:	4a48      	ldr	r2, [pc, #288]	; (8008c64 <AT_ESP8266_ND+0x22c4>)
 8008b42:	461c      	mov	r4, r3
 8008b44:	4613      	mov	r3, r2
 8008b46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b48:	6020      	str	r0, [r4, #0]
 8008b4a:	6061      	str	r1, [r4, #4]
 8008b4c:	60a2      	str	r2, [r4, #8]
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008b52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7f7 fb47 	bl	80001f4 <strlen>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008b78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008b8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d123      	bne.n	8008c02 <AT_ESP8266_ND+0x2262>
 8008bba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d02b      	beq.n	8008c1a <AT_ESP8266_ND+0x227a>
 8008bc2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bc6:	2b0b      	cmp	r3, #11
 8008bc8:	d027      	beq.n	8008c1a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 8008bca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bce:	2b0c      	cmp	r3, #12
 8008bd0:	d023      	beq.n	8008c1a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 8008bd2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d01f      	beq.n	8008c1a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 8008bda:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d01b      	beq.n	8008c1a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 8008be2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008be6:	2b07      	cmp	r3, #7
 8008be8:	d017      	beq.n	8008c1a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008bea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	d013      	beq.n	8008c1a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 8008bf2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bf6:	2b1e      	cmp	r3, #30
 8008bf8:	d00f      	beq.n	8008c1a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008bfa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bfe:	2b1f      	cmp	r3, #31
 8008c00:	d00b      	beq.n	8008c1a <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008c02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c14:	4293      	cmp	r3, r2
 8008c16:	f341 8134 	ble.w	8009e82 <AT_ESP8266_ND+0x34e2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008c3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008c4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008c5c:	f001 b911 	b.w	8009e82 <AT_ESP8266_ND+0x34e2>
 8008c60:	08010ad4 	.word	0x08010ad4
 8008c64:	08010ae4 	.word	0x08010ae4
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008c78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	f040 80f3 	bne.w	8008e72 <AT_ESP8266_ND+0x24d2>
 8008c8c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	f000 80ee 	beq.w	8008e72 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 8008c96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	f000 80e9 	beq.w	8008e72 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 8008ca0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	f000 80e4 	beq.w	8008e72 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 8008caa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cae:	2b21      	cmp	r3, #33	; 0x21
 8008cb0:	f000 80df 	beq.w	8008e72 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 8008cb4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cb8:	2b1b      	cmp	r3, #27
 8008cba:	f000 80da 	beq.w	8008e72 <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 8008cbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008cce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008cde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008cec:	4620      	mov	r0, r4
 8008cee:	f7f7 fa81 	bl	80001f4 <strlen>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	4423      	add	r3, r4
 8008cf6:	4990      	ldr	r1, [pc, #576]	; (8008f38 <AT_ESP8266_ND+0x2598>)
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	cb03      	ldmia	r3!, {r0, r1}
 8008cfe:	6010      	str	r0, [r2, #0]
 8008d00:	6051      	str	r1, [r2, #4]
 8008d02:	8819      	ldrh	r1, [r3, #0]
 8008d04:	789b      	ldrb	r3, [r3, #2]
 8008d06:	8111      	strh	r1, [r2, #8]
 8008d08:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d18:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f006 fbe3 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008d24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	334c      	adds	r3, #76	; 0x4c
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7f7 fa51 	bl	80001f4 <strlen>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	4629      	mov	r1, r5
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f006 fbc6 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,separador,3);
 8008d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d6c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008d70:	2203      	movs	r2, #3
 8008d72:	4618      	mov	r0, r3
 8008d74:	f006 fbb9 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008d78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3362      	adds	r3, #98	; 0x62
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7f7 fa27 	bl	80001f4 <strlen>
 8008da6:	4603      	mov	r3, r0
 8008da8:	461a      	mov	r2, r3
 8008daa:	4629      	mov	r1, r5
 8008dac:	4620      	mov	r0, r4
 8008dae:	f006 fb9c 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,separador,3);
 8008db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008dc0:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f006 fb8f 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008dda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3372      	adds	r3, #114	; 0x72
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7f7 f9fd 	bl	80001f4 <strlen>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	4629      	mov	r1, r5
 8008e00:	4620      	mov	r0, r4
 8008e02:	f006 fb72 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e14:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008e18:	2201      	movs	r2, #1
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f006 fb65 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008e20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e2e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008e32:	2202      	movs	r2, #2
 8008e34:	4618      	mov	r0, r3
 8008e36:	f006 fb58 	bl	800f4ea <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7f7 f9d3 	bl	80001f4 <strlen>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	461a      	mov	r2, r3
 8008e52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008e60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008e72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008e90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d11b      	bne.n	8008eda <AT_ESP8266_ND+0x253a>
 8008ea2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d023      	beq.n	8008ef2 <AT_ESP8266_ND+0x2552>
 8008eaa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008eae:	2b0b      	cmp	r3, #11
 8008eb0:	d01f      	beq.n	8008ef2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 8008eb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008eb6:	2b0c      	cmp	r3, #12
 8008eb8:	d01b      	beq.n	8008ef2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 8008eba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d017      	beq.n	8008ef2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 8008ec2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d013      	beq.n	8008ef2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 8008eca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ece:	2b21      	cmp	r3, #33	; 0x21
 8008ed0:	d00f      	beq.n	8008ef2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 8008ed2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ed6:	2b1b      	cmp	r3, #27
 8008ed8:	d00b      	beq.n	8008ef2 <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eec:	4293      	cmp	r3, r2
 8008eee:	f340 87ca 	ble.w	8009e86 <AT_ESP8266_ND+0x34e6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008f14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008f34:	f000 bfa7 	b.w	8009e86 <AT_ESP8266_ND+0x34e6>
 8008f38:	080109d4 	.word	0x080109d4
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008f3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008f4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	f040 80e2 	bne.w	8009124 <AT_ESP8266_ND+0x2784>
 8008f60:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f64:	2b0b      	cmp	r3, #11
 8008f66:	f000 80dd 	beq.w	8009124 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8008f6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f6e:	2b0c      	cmp	r3, #12
 8008f70:	f000 80d8 	beq.w	8009124 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008f74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f78:	2b0e      	cmp	r3, #14
 8008f7a:	f000 80d3 	beq.w	8009124 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 8008f7e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f82:	2b0f      	cmp	r3, #15
 8008f84:	f000 80ce 	beq.w	8009124 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8008f88:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f8c:	2b10      	cmp	r3, #16
 8008f8e:	f000 80c9 	beq.w	8009124 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 8008f92:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	f000 80c4 	beq.w	8009124 <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8008f9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008fbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7f7 f912 	bl	80001f4 <strlen>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	4423      	add	r3, r4
 8008fd4:	4aa1      	ldr	r2, [pc, #644]	; (800925c <AT_ESP8266_ND+0x28bc>)
 8008fd6:	461c      	mov	r4, r3
 8008fd8:	4613      	mov	r3, r2
 8008fda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008fdc:	6020      	str	r0, [r4, #0]
 8008fde:	6061      	str	r1, [r4, #4]
 8008fe0:	60a2      	str	r2, [r4, #8]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008fe6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ff4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f006 fa75 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8009000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800900e:	4620      	mov	r0, r4
 8009010:	f7f7 f8f0 	bl	80001f4 <strlen>
 8009014:	4603      	mov	r3, r0
 8009016:	4423      	add	r3, r4
 8009018:	4a91      	ldr	r2, [pc, #580]	; (8009260 <AT_ESP8266_ND+0x28c0>)
 800901a:	6810      	ldr	r0, [r2, #0]
 800901c:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 800901e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009022:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800902c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8009030:	2203      	movs	r2, #3
 8009032:	4618      	mov	r0, r3
 8009034:	f006 fa59 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8009038:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800903c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009046:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8009054:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009058:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3336      	adds	r3, #54	; 0x36
 8009060:	4618      	mov	r0, r3
 8009062:	f7f7 f8c7 	bl	80001f4 <strlen>
 8009066:	4603      	mov	r3, r0
 8009068:	461a      	mov	r2, r3
 800906a:	4629      	mov	r1, r5
 800906c:	4620      	mov	r0, r4
 800906e:	f006 fa3c 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,separador2,2);
 8009072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009080:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8009084:	2202      	movs	r2, #2
 8009086:	4618      	mov	r0, r3
 8009088:	f006 fa2f 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 800908c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800909a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800909e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80090a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3346      	adds	r3, #70	; 0x46
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7f7 f89d 	bl	80001f4 <strlen>
 80090ba:	4603      	mov	r3, r0
 80090bc:	461a      	mov	r2, r3
 80090be:	4629      	mov	r1, r5
 80090c0:	4620      	mov	r0, r4
 80090c2:	f006 fa12 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80090c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80090d4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80090d8:	4618      	mov	r0, r3
 80090da:	f7f7 f88b 	bl	80001f4 <strlen>
 80090de:	4602      	mov	r2, r0
 80090e0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80090e4:	4619      	mov	r1, r3
 80090e6:	4620      	mov	r0, r4
 80090e8:	f006 f9ff 	bl	800f4ea <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80090ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f7 f87a 	bl	80001f4 <strlen>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8009112:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009116:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8009124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009128:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009138:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8009142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009146:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d120      	bne.n	8009196 <AT_ESP8266_ND+0x27f6>
 8009154:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009158:	2b0a      	cmp	r3, #10
 800915a:	d028      	beq.n	80091ae <AT_ESP8266_ND+0x280e>
 800915c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009160:	2b0b      	cmp	r3, #11
 8009162:	d024      	beq.n	80091ae <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_wifi_gotip)
 8009164:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009168:	2b0c      	cmp	r3, #12
 800916a:	d020      	beq.n	80091ae <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 800916c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009170:	2b0e      	cmp	r3, #14
 8009172:	d01c      	beq.n	80091ae <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_conectado)
 8009174:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009178:	2b0f      	cmp	r3, #15
 800917a:	d018      	beq.n	80091ae <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_desconectado)
 800917c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009180:	2b10      	cmp	r3, #16
 8009182:	d014      	beq.n	80091ae <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_error)
 8009184:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009188:	2b02      	cmp	r3, #2
 800918a:	d010      	beq.n	80091ae <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_busy_p)))
 800918c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009194:	d00b      	beq.n	80091ae <AT_ESP8266_ND+0x280e>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009196:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80091a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a8:	4293      	cmp	r3, r2
 80091aa:	f340 866e 	ble.w	8009e8a <AT_ESP8266_ND+0x34ea>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80091ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80091bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80091c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80091d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80091e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80091f0:	f000 be4b 	b.w	8009e8a <AT_ESP8266_ND+0x34ea>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 80091f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	2200      	movs	r2, #0
 8009202:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8009204:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009208:	2b10      	cmp	r3, #16
 800920a:	d003      	beq.n	8009214 <AT_ESP8266_ND+0x2874>
 800920c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009210:	2b0a      	cmp	r3, #10
 8009212:	d127      	bne.n	8009264 <AT_ESP8266_ND+0x28c4>
				{
					a->_estado=AT_decode;
 8009214:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009218:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800922a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009236:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800923a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2200      	movs	r2, #0
 8009242:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2200      	movs	r2, #0
 8009252:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009256:	f000 be1a 	b.w	8009e8e <AT_ESP8266_ND+0x34ee>
 800925a:	bf00      	nop
 800925c:	08010af4 	.word	0x08010af4
 8009260:	08010b04 	.word	0x08010b04
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009264:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009268:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009272:	2b01      	cmp	r3, #1
 8009274:	f040 80d1 	bne.w	800941a <AT_ESP8266_ND+0x2a7a>
 8009278:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800927c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 80c7 	bne.w	800941a <AT_ESP8266_ND+0x2a7a>
										a->_ejecucion=1;
 800928c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2201      	movs	r2, #1
 8009298:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 800929c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2218      	movs	r2, #24
 80092a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80092ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80092bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80092da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80092ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80092fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009308:	4620      	mov	r0, r4
 800930a:	f7f6 ff73 	bl	80001f4 <strlen>
 800930e:	4603      	mov	r3, r0
 8009310:	4423      	add	r3, r4
 8009312:	4abe      	ldr	r2, [pc, #760]	; (800960c <AT_ESP8266_ND+0x2c6c>)
 8009314:	461c      	mov	r4, r3
 8009316:	4613      	mov	r3, r2
 8009318:	cb07      	ldmia	r3!, {r0, r1, r2}
 800931a:	6020      	str	r0, [r4, #0]
 800931c:	6061      	str	r1, [r4, #4]
 800931e:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009320:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009324:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800932e:	f107 0214 	add.w	r2, r7, #20
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f005 fe51 	bl	800efdc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 800933a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800933e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009348:	f107 0314 	add.w	r3, r7, #20
 800934c:	4618      	mov	r0, r3
 800934e:	f7f6 ff51 	bl	80001f4 <strlen>
 8009352:	4602      	mov	r2, r0
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	4619      	mov	r1, r3
 800935a:	4620      	mov	r0, r4
 800935c:	f006 f8c5 	bl	800f4ea <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009360:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009364:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 800936e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009372:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800937c:	4619      	mov	r1, r3
 800937e:	4610      	mov	r0, r2
 8009380:	f006 f994 	bl	800f6ac <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009384:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009388:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009392:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009396:	2202      	movs	r2, #2
 8009398:	4618      	mov	r0, r3
 800939a:	f006 f8a6 	bl	800f4ea <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800939e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7f6 ff21 	bl	80001f4 <strlen>
 80093b2:	4603      	mov	r3, r0
 80093b4:	461a      	mov	r2, r3
 80093b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80093c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80093d2:	4620      	mov	r0, r4
 80093d4:	f7f6 ff0e 	bl	80001f4 <strlen>
 80093d8:	4603      	mov	r3, r0
 80093da:	4423      	add	r3, r4
 80093dc:	4a8c      	ldr	r2, [pc, #560]	; (8009610 <AT_ESP8266_ND+0x2c70>)
 80093de:	461c      	mov	r4, r3
 80093e0:	4613      	mov	r3, r2
 80093e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80093e4:	6020      	str	r0, [r4, #0]
 80093e6:	6061      	str	r1, [r4, #4]
 80093e8:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80093ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8009408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800940c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 800941a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800941e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8009438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800943c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009446:	2b00      	cmp	r3, #0
 8009448:	f040 80a6 	bne.w	8009598 <AT_ESP8266_ND+0x2bf8>
 800944c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009450:	2b13      	cmp	r3, #19
 8009452:	f000 80a1 	beq.w	8009598 <AT_ESP8266_ND+0x2bf8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8009456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800945a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009464:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009468:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009472:	4619      	mov	r1, r3
 8009474:	4610      	mov	r0, r2
 8009476:	f7f6 feb3 	bl	80001e0 <strcmp>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01b      	beq.n	80094b8 <AT_ESP8266_ND+0x2b18>
 8009480:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009484:	2b01      	cmp	r3, #1
 8009486:	d017      	beq.n	80094b8 <AT_ESP8266_ND+0x2b18>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8009488:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800948c:	2b14      	cmp	r3, #20
 800948e:	d013      	beq.n	80094b8 <AT_ESP8266_ND+0x2b18>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009494:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800949e:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a2:	4293      	cmp	r3, r2
 80094a4:	dd78      	ble.n	8009598 <AT_ESP8266_ND+0x2bf8>
 80094a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d16f      	bne.n	8009598 <AT_ESP8266_ND+0x2bf8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 80094b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80094c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ca:	4293      	cmp	r3, r2
 80094cc:	dd0e      	ble.n	80094ec <AT_ESP8266_ND+0x2b4c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80094ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80094ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009500:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800950a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800950e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800951e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009528:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800952c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2201      	movs	r2, #1
 8009534:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009538:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800953c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800954a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009554:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009558:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009562:	2361      	movs	r3, #97	; 0x61
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	2301      	movs	r3, #1
 8009568:	f005 fd6c 	bl	800f044 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800956c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800957a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800957e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009588:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800958c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2200      	movs	r2, #0
 8009594:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009598:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800959c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80095aa:	f040 8470 	bne.w	8009e8e <AT_ESP8266_ND+0x34ee>
 80095ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095b2:	2b13      	cmp	r3, #19
 80095b4:	d02e      	beq.n	8009614 <AT_ESP8266_ND+0x2c74>
 80095b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80095c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c8:	4293      	cmp	r3, r2
 80095ca:	dc23      	bgt.n	8009614 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_disconnect)
 80095cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095d0:	2b0a      	cmp	r3, #10
 80095d2:	d01f      	beq.n	8009614 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_connected)
 80095d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095d8:	2b0b      	cmp	r3, #11
 80095da:	d01b      	beq.n	8009614 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_gotip)
 80095dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095e0:	2b0c      	cmp	r3, #12
 80095e2:	d017      	beq.n	8009614 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_desconectado)
 80095e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095e8:	2b10      	cmp	r3, #16
 80095ea:	d013      	beq.n	8009614 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_snd_err)
 80095ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095f0:	2b11      	cmp	r3, #17
 80095f2:	d00f      	beq.n	8009614 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_enviado_error)
 80095f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095f8:	2b12      	cmp	r3, #18
 80095fa:	d00b      	beq.n	8009614 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_busy_p)))
 80095fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009604:	f040 8443 	bne.w	8009e8e <AT_ESP8266_ND+0x34ee>
 8009608:	e004      	b.n	8009614 <AT_ESP8266_ND+0x2c74>
 800960a:	bf00      	nop
 800960c:	08010b08 	.word	0x08010b08
 8009610:	08010b14 	.word	0x08010b14
									a->_debug_count5++;
 8009614:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009618:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009628:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009632:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009636:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009640:	f241 3288 	movw	r2, #5000	; 0x1388
 8009644:	4293      	cmp	r3, r2
 8009646:	dd25      	ble.n	8009694 <AT_ESP8266_ND+0x2cf4>
										a->_debug_count8++;
 8009648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800965c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800966a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800967a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2200      	movs	r2, #0
 8009690:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009694:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009698:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	dd10      	ble.n	80096c8 <AT_ESP8266_ND+0x2d28>
 80096a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096aa:	2b10      	cmp	r3, #16
 80096ac:	d00c      	beq.n	80096c8 <AT_ESP8266_ND+0x2d28>
 80096ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096b2:	2b0a      	cmp	r3, #10
 80096b4:	d008      	beq.n	80096c8 <AT_ESP8266_ND+0x2d28>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 80096b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	220f      	movs	r2, #15
 80096c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80096c6:	e008      	b.n	80096da <AT_ESP8266_ND+0x2d3a>
										a->_estado=AT_decode;	//Devuelvo el estado
 80096c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80096d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80096da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80096ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80096fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2200      	movs	r2, #0
 8009706:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 800970a:	e3c0      	b.n	8009e8e <AT_ESP8266_ND+0x34ee>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800970c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009710:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 800971c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800972a:	2b01      	cmp	r3, #1
 800972c:	d16f      	bne.n	800980e <AT_ESP8266_ND+0x2e6e>
						{
						a->_pasos=0;
 800972e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009732:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800973e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009742:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2201      	movs	r2, #1
 800974a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 800974e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800975c:	4620      	mov	r0, r4
 800975e:	f7f6 fd49 	bl	80001f4 <strlen>
 8009762:	4603      	mov	r3, r0
 8009764:	4423      	add	r3, r4
 8009766:	4a78      	ldr	r2, [pc, #480]	; (8009948 <AT_ESP8266_ND+0x2fa8>)
 8009768:	461c      	mov	r4, r3
 800976a:	4615      	mov	r5, r2
 800976c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800976e:	6020      	str	r0, [r4, #0]
 8009770:	6061      	str	r1, [r4, #4]
 8009772:	60a2      	str	r2, [r4, #8]
 8009774:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800977a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009784:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009788:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8009792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009796:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	335c      	adds	r3, #92	; 0x5c
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f6 fd28 	bl	80001f4 <strlen>
 80097a4:	4603      	mov	r3, r0
 80097a6:	461a      	mov	r2, r3
 80097a8:	4629      	mov	r1, r5
 80097aa:	4620      	mov	r0, r4
 80097ac:	f005 fe9d 	bl	800f4ea <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80097b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80097be:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7f6 fd16 	bl	80001f4 <strlen>
 80097c8:	4602      	mov	r2, r0
 80097ca:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80097ce:	4619      	mov	r1, r3
 80097d0:	4620      	mov	r0, r4
 80097d2:	f005 fe8a 	bl	800f4ea <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80097d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7f6 fd05 	bl	80001f4 <strlen>
 80097ea:	4603      	mov	r3, r0
 80097ec:	461a      	mov	r2, r3
 80097ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 80097fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009800:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f44f 7248 	mov.w	r2, #800	; 0x320
 800980a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800980e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009822:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800982c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009830:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800983a:	2b00      	cmp	r3, #0
 800983c:	d123      	bne.n	8009886 <AT_ESP8266_ND+0x2ee6>
 800983e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009842:	2b0a      	cmp	r3, #10
 8009844:	d02b      	beq.n	800989e <AT_ESP8266_ND+0x2efe>
 8009846:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800984a:	2b0b      	cmp	r3, #11
 800984c:	d027      	beq.n	800989e <AT_ESP8266_ND+0x2efe>
 800984e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009852:	2b0c      	cmp	r3, #12
 8009854:	d023      	beq.n	800989e <AT_ESP8266_ND+0x2efe>
 8009856:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800985a:	2b0e      	cmp	r3, #14
 800985c:	d01f      	beq.n	800989e <AT_ESP8266_ND+0x2efe>
 800985e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009862:	2b0f      	cmp	r3, #15
 8009864:	d01b      	beq.n	800989e <AT_ESP8266_ND+0x2efe>
 8009866:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800986a:	2b10      	cmp	r3, #16
 800986c:	d017      	beq.n	800989e <AT_ESP8266_ND+0x2efe>
 800986e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009872:	2b15      	cmp	r3, #21
 8009874:	d013      	beq.n	800989e <AT_ESP8266_ND+0x2efe>
 8009876:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800987a:	2b16      	cmp	r3, #22
 800987c:	d00f      	beq.n	800989e <AT_ESP8266_ND+0x2efe>
 800987e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009882:	2b17      	cmp	r3, #23
 8009884:	d00b      	beq.n	800989e <AT_ESP8266_ND+0x2efe>
 8009886:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800988a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009894:	f241 3288 	movw	r2, #5000	; 0x1388
 8009898:	4293      	cmp	r3, r2
 800989a:	f340 82fa 	ble.w	8009e92 <AT_ESP8266_ND+0x34f2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800989e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80098ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80098b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80098c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80098d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2200      	movs	r2, #0
 80098dc:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 80098e0:	e2d7      	b.n	8009e92 <AT_ESP8266_ND+0x34f2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80098e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098e6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	2200      	movs	r2, #0
 80098f0:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 80098f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098f6:	2b10      	cmp	r3, #16
 80098f8:	d003      	beq.n	8009902 <AT_ESP8266_ND+0x2f62>
 80098fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098fe:	2b0a      	cmp	r3, #10
 8009900:	d124      	bne.n	800994c <AT_ESP8266_ND+0x2fac>
				{
					a->_estado=AT_decode;
 8009902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009914:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009918:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009924:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009928:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2200      	movs	r2, #0
 8009940:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009944:	e2a7      	b.n	8009e96 <AT_ESP8266_ND+0x34f6>
 8009946:	bf00      	nop
 8009948:	08010b20 	.word	0x08010b20
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 800994c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009950:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800995a:	2b01      	cmp	r3, #1
 800995c:	f040 8102 	bne.w	8009b64 <AT_ESP8266_ND+0x31c4>
 8009960:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009964:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800996e:	2b00      	cmp	r3, #0
 8009970:	f040 80f8 	bne.w	8009b64 <AT_ESP8266_ND+0x31c4>
										a->_ejecucion=1;
 8009974:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009978:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2201      	movs	r2, #1
 8009980:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009984:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009988:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2218      	movs	r2, #24
 8009990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009994:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80099a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80099c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80099d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80099e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80099f0:	4620      	mov	r0, r4
 80099f2:	f7f6 fbff 	bl	80001f4 <strlen>
 80099f6:	4603      	mov	r3, r0
 80099f8:	4423      	add	r3, r4
 80099fa:	4a83      	ldr	r2, [pc, #524]	; (8009c08 <AT_ESP8266_ND+0x3268>)
 80099fc:	461c      	mov	r4, r3
 80099fe:	4613      	mov	r3, r2
 8009a00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a02:	6020      	str	r0, [r4, #0]
 8009a04:	6061      	str	r1, [r4, #4]
 8009a06:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8009a16:	f107 020c 	add.w	r2, r7, #12
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f005 fadd 	bl	800efdc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009a30:	f107 030c 	add.w	r3, r7, #12
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7f6 fbdd 	bl	80001f4 <strlen>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	f107 030c 	add.w	r3, r7, #12
 8009a40:	4619      	mov	r1, r3
 8009a42:	4620      	mov	r0, r4
 8009a44:	f005 fd51 	bl	800f4ea <strncat>
										strncat(a->_uart2snd,",",1);
 8009a48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7f6 fbcc 	bl	80001f4 <strlen>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	4423      	add	r3, r4
 8009a60:	496a      	ldr	r1, [pc, #424]	; (8009c0c <AT_ESP8266_ND+0x326c>)
 8009a62:	461a      	mov	r2, r3
 8009a64:	460b      	mov	r3, r1
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009a6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009a78:	f107 020c 	add.w	r2, r7, #12
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f005 faac 	bl	800efdc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009a92:	f107 030c 	add.w	r3, r7, #12
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7f6 fbac 	bl	80001f4 <strlen>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	f107 030c 	add.w	r3, r7, #12
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f005 fd20 	bl	800f4ea <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009aaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009abc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4610      	mov	r0, r2
 8009aca:	f005 fdef 	bl	800f6ac <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009ace:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ad2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009adc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f005 fd01 	bl	800f4ea <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009ae8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f6 fb7c 	bl	80001f4 <strlen>
 8009afc:	4603      	mov	r3, r0
 8009afe:	461a      	mov	r2, r3
 8009b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f7f6 fb69 	bl	80001f4 <strlen>
 8009b22:	4603      	mov	r3, r0
 8009b24:	4423      	add	r3, r4
 8009b26:	4a3a      	ldr	r2, [pc, #232]	; (8009c10 <AT_ESP8266_ND+0x3270>)
 8009b28:	461c      	mov	r4, r3
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b2e:	6020      	str	r0, [r4, #0]
 8009b30:	6061      	str	r1, [r4, #4]
 8009b32:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009b52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009b64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f040 80b8 	bne.w	8009d06 <AT_ESP8266_ND+0x3366>
 8009b96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b9a:	2b13      	cmp	r3, #19
 8009b9c:	f000 80b3 	beq.w	8009d06 <AT_ESP8266_ND+0x3366>
 8009ba0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ba4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	f7f6 fb0e 	bl	80001e0 <strcmp>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d024      	beq.n	8009c14 <AT_ESP8266_ND+0x3274>
 8009bca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d020      	beq.n	8009c14 <AT_ESP8266_ND+0x3274>
 8009bd2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009bd6:	2b14      	cmp	r3, #20
 8009bd8:	d01c      	beq.n	8009c14 <AT_ESP8266_ND+0x3274>
 8009bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bec:	4293      	cmp	r3, r2
 8009bee:	f340 808a 	ble.w	8009d06 <AT_ESP8266_ND+0x3366>
 8009bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	f040 8080 	bne.w	8009d06 <AT_ESP8266_ND+0x3366>
 8009c06:	e005      	b.n	8009c14 <AT_ESP8266_ND+0x3274>
 8009c08:	08010b08 	.word	0x08010b08
 8009c0c:	08010b30 	.word	0x08010b30
 8009c10:	08010b14 	.word	0x08010b14
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c26:	4293      	cmp	r3, r2
 8009c28:	dd17      	ble.n	8009c5a <AT_ESP8266_ND+0x32ba>
 8009c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d10e      	bne.n	8009c5a <AT_ESP8266_ND+0x32ba>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009c3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009c5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009c78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009c96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009ca6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009caa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009cb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009cc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009cd0:	2361      	movs	r3, #97	; 0x61
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f005 f9b5 	bl	800f044 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009cda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009ce8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009cf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009d06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d14:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009d18:	f040 80bd 	bne.w	8009e96 <AT_ESP8266_ND+0x34f6>
 8009d1c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d20:	2b13      	cmp	r3, #19
 8009d22:	d02b      	beq.n	8009d7c <AT_ESP8266_ND+0x33dc>
 8009d24:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d28:	2b0b      	cmp	r3, #11
 8009d2a:	d027      	beq.n	8009d7c <AT_ESP8266_ND+0x33dc>
 8009d2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d30:	2b0c      	cmp	r3, #12
 8009d32:	d023      	beq.n	8009d7c <AT_ESP8266_ND+0x33dc>
 8009d34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d46:	4293      	cmp	r3, r2
 8009d48:	dc18      	bgt.n	8009d7c <AT_ESP8266_ND+0x33dc>
 8009d4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d4e:	2b0a      	cmp	r3, #10
 8009d50:	d014      	beq.n	8009d7c <AT_ESP8266_ND+0x33dc>
 8009d52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d56:	2b10      	cmp	r3, #16
 8009d58:	d010      	beq.n	8009d7c <AT_ESP8266_ND+0x33dc>
 8009d5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d5e:	2b11      	cmp	r3, #17
 8009d60:	d00c      	beq.n	8009d7c <AT_ESP8266_ND+0x33dc>
 8009d62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d66:	2b12      	cmp	r3, #18
 8009d68:	d008      	beq.n	8009d7c <AT_ESP8266_ND+0x33dc>
 8009d6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d6e:	2b16      	cmp	r3, #22
 8009d70:	d004      	beq.n	8009d7c <AT_ESP8266_ND+0x33dc>
 8009d72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d76:	2b19      	cmp	r3, #25
 8009d78:	f040 808d 	bne.w	8009e96 <AT_ESP8266_ND+0x34f6>
									a->_debug_count5++;
 8009d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dac:	4293      	cmp	r3, r2
 8009dae:	dd25      	ble.n	8009dfc <AT_ESP8266_ND+0x345c>
										a->_debug_count8++;
 8009db0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009db4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009dfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	dd07      	ble.n	8009e1e <AT_ESP8266_ND+0x347e>
 8009e0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e12:	2b10      	cmp	r3, #16
 8009e14:	d003      	beq.n	8009e1e <AT_ESP8266_ND+0x347e>
 8009e16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e1a:	2b0a      	cmp	r3, #10
 8009e1c:	d108      	bne.n	8009e30 <AT_ESP8266_ND+0x3490>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009e40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009e60:	e019      	b.n	8009e96 <AT_ESP8266_ND+0x34f6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009e74:	e010      	b.n	8009e98 <AT_ESP8266_ND+0x34f8>
			break;
 8009e76:	bf00      	nop
 8009e78:	e00e      	b.n	8009e98 <AT_ESP8266_ND+0x34f8>
			break;
 8009e7a:	bf00      	nop
 8009e7c:	e00c      	b.n	8009e98 <AT_ESP8266_ND+0x34f8>
			break;
 8009e7e:	bf00      	nop
 8009e80:	e00a      	b.n	8009e98 <AT_ESP8266_ND+0x34f8>
			break;
 8009e82:	bf00      	nop
 8009e84:	e008      	b.n	8009e98 <AT_ESP8266_ND+0x34f8>
			break;
 8009e86:	bf00      	nop
 8009e88:	e006      	b.n	8009e98 <AT_ESP8266_ND+0x34f8>
			break;
 8009e8a:	bf00      	nop
 8009e8c:	e004      	b.n	8009e98 <AT_ESP8266_ND+0x34f8>
			break;
 8009e8e:	bf00      	nop
 8009e90:	e002      	b.n	8009e98 <AT_ESP8266_ND+0x34f8>
			break;
 8009e92:	bf00      	nop
 8009e94:	e000      	b.n	8009e98 <AT_ESP8266_ND+0x34f8>
			break;
 8009e96:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009e98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009ea8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009eac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009eb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ebc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ed0 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ee2:	f240 328d 	movw	r2, #909	; 0x38d
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	f001 83d6 	beq.w	800b698 <WiFi_Conn_ND+0x17c8>
 8009eec:	f240 328d 	movw	r2, #909	; 0x38d
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	f301 8466 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009ef6:	f240 3289 	movw	r2, #905	; 0x389
 8009efa:	4293      	cmp	r3, r2
 8009efc:	f001 8348 	beq.w	800b590 <WiFi_Conn_ND+0x16c0>
 8009f00:	f240 3289 	movw	r2, #905	; 0x389
 8009f04:	4293      	cmp	r3, r2
 8009f06:	f301 845c 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009f0a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009f0e:	f001 8237 	beq.w	800b380 <WiFi_Conn_ND+0x14b0>
 8009f12:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009f16:	f301 8454 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009f1a:	f240 3229 	movw	r2, #809	; 0x329
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	f301 844f 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009f24:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009f28:	f280 80a5 	bge.w	800a076 <WiFi_Conn_ND+0x1a6>
 8009f2c:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009f30:	4293      	cmp	r3, r2
 8009f32:	f000 8789 	beq.w	800ae48 <WiFi_Conn_ND+0xf78>
 8009f36:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	f301 8441 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009f40:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009f44:	4293      	cmp	r3, r2
 8009f46:	f000 870f 	beq.w	800ad68 <WiFi_Conn_ND+0xe98>
 8009f4a:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	f301 8437 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009f54:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009f58:	f000 863e 	beq.w	800abd8 <WiFi_Conn_ND+0xd08>
 8009f5c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009f60:	f301 842f 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009f64:	f240 2261 	movw	r2, #609	; 0x261
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	f000 85c4 	beq.w	800aaf6 <WiFi_Conn_ND+0xc26>
 8009f6e:	f240 2261 	movw	r2, #609	; 0x261
 8009f72:	4293      	cmp	r3, r2
 8009f74:	f301 8425 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009f78:	f240 225d 	movw	r2, #605	; 0x25d
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	f000 8564 	beq.w	800aa4a <WiFi_Conn_ND+0xb7a>
 8009f82:	f240 225d 	movw	r2, #605	; 0x25d
 8009f86:	4293      	cmp	r3, r2
 8009f88:	f301 841b 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009f8c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009f90:	f000 84e2 	beq.w	800a958 <WiFi_Conn_ND+0xa88>
 8009f94:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009f98:	f301 8413 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009f9c:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	f000 847d 	beq.w	800a8a0 <WiFi_Conn_ND+0x9d0>
 8009fa6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009faa:	f281 840a 	bge.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009fae:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	f000 8438 	beq.w	800a828 <WiFi_Conn_ND+0x958>
 8009fb8:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009fbc:	f281 8401 	bge.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009fc0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009fc4:	f000 83c3 	beq.w	800a74e <WiFi_Conn_ND+0x87e>
 8009fc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009fcc:	f301 83f9 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009fd0:	f240 1299 	movw	r2, #409	; 0x199
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	f000 8369 	beq.w	800a6ac <WiFi_Conn_ND+0x7dc>
 8009fda:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009fde:	f281 83f0 	bge.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009fe2:	f240 1295 	movw	r2, #405	; 0x195
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	f000 8329 	beq.w	800a63e <WiFi_Conn_ND+0x76e>
 8009fec:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009ff0:	f281 83e7 	bge.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 8009ff4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ff8:	f000 82a0 	beq.w	800a53c <WiFi_Conn_ND+0x66c>
 8009ffc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a000:	f301 83df 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a004:	f240 1235 	movw	r2, #309	; 0x135
 800a008:	4293      	cmp	r3, r2
 800a00a:	f000 8271 	beq.w	800a4f0 <WiFi_Conn_ND+0x620>
 800a00e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800a012:	f281 83d6 	bge.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a016:	f240 1231 	movw	r2, #305	; 0x131
 800a01a:	4293      	cmp	r3, r2
 800a01c:	f000 8263 	beq.w	800a4e6 <WiFi_Conn_ND+0x616>
 800a020:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a024:	f281 83cd 	bge.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a028:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a02c:	f000 8207 	beq.w	800a43e <WiFi_Conn_ND+0x56e>
 800a030:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a034:	f301 83c5 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a038:	2bd1      	cmp	r3, #209	; 0xd1
 800a03a:	f000 81a0 	beq.w	800a37e <WiFi_Conn_ND+0x4ae>
 800a03e:	2bd1      	cmp	r3, #209	; 0xd1
 800a040:	f301 83bf 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a044:	2bcd      	cmp	r3, #205	; 0xcd
 800a046:	f000 8170 	beq.w	800a32a <WiFi_Conn_ND+0x45a>
 800a04a:	2bcd      	cmp	r3, #205	; 0xcd
 800a04c:	f301 83b9 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a050:	2bc8      	cmp	r3, #200	; 0xc8
 800a052:	f000 80f1 	beq.w	800a238 <WiFi_Conn_ND+0x368>
 800a056:	2bc8      	cmp	r3, #200	; 0xc8
 800a058:	f301 83b3 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a05c:	2b6d      	cmp	r3, #109	; 0x6d
 800a05e:	f000 80b3 	beq.w	800a1c8 <WiFi_Conn_ND+0x2f8>
 800a062:	2b6d      	cmp	r3, #109	; 0x6d
 800a064:	f301 83ad 	bgt.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a068:	2b64      	cmp	r3, #100	; 0x64
 800a06a:	d021      	beq.n	800a0b0 <WiFi_Conn_ND+0x1e0>
 800a06c:	2b69      	cmp	r3, #105	; 0x69
 800a06e:	f000 8096 	beq.w	800a19e <WiFi_Conn_ND+0x2ce>
 800a072:	f001 bba6 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a076:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800a07a:	2b09      	cmp	r3, #9
 800a07c:	f201 83a1 	bhi.w	800b7c2 <WiFi_Conn_ND+0x18f2>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <WiFi_Conn_ND+0x1b8>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800af55 	.word	0x0800af55
 800a08c:	0800b7c3 	.word	0x0800b7c3
 800a090:	0800b7c3 	.word	0x0800b7c3
 800a094:	0800b7c3 	.word	0x0800b7c3
 800a098:	0800b7c3 	.word	0x0800b7c3
 800a09c:	0800b023 	.word	0x0800b023
 800a0a0:	0800b0c3 	.word	0x0800b0c3
 800a0a4:	0800b163 	.word	0x0800b163
 800a0a8:	0800b203 	.word	0x0800b203
 800a0ac:	0800b2a3 	.word	0x0800b2a3
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b6:	2b64      	cmp	r3, #100	; 0x64
 800a0b8:	d046      	beq.n	800a148 <WiFi_Conn_ND+0x278>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d041      	beq.n	800a148 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ca:	2b1c      	cmp	r3, #28
 800a0cc:	d03c      	beq.n	800a148 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d037      	beq.n	800a148 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d032      	beq.n	800a148 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e8:	2b13      	cmp	r3, #19
 800a0ea:	d02d      	beq.n	800a148 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7fc fac1 	bl	8006674 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d14e      	bne.n	800a19a <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7fc fc4f 	bl	80069a0 <AT_ESP8266_ND>
 800a102:	4602      	mov	r2, r0
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d109      	bne.n	800a130 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a128:	4619      	mov	r1, r3
 800a12a:	4610      	mov	r0, r2
 800a12c:	f7f7 fa22 	bl	8001574 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	2364      	movs	r3, #100	; 0x64
 800a140:	68b8      	ldr	r0, [r7, #8]
 800a142:	f7fb fa1b 	bl	800557c <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a146:	e028      	b.n	800a19a <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d004      	beq.n	800a15c <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a158:	2b1c      	cmp	r3, #28
 800a15a:	d103      	bne.n	800a164 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	226d      	movs	r2, #109	; 0x6d
 800a160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d00f      	beq.n	800a18e <WiFi_Conn_ND+0x2be>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a174:	2b04      	cmp	r3, #4
 800a176:	d00a      	beq.n	800a18e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a17e:	2b0b      	cmp	r3, #11
 800a180:	d005      	beq.n	800a18e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a188:	2b0c      	cmp	r3, #12
 800a18a:	f041 82eb 	bne.w	800b764 <WiFi_Conn_ND+0x1894>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2269      	movs	r2, #105	; 0x69
 800a192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a196:	f001 bae5 	b.w	800b764 <WiFi_Conn_ND+0x1894>
 800a19a:	f001 bae3 	b.w	800b764 <WiFi_Conn_ND+0x1894>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7fc fa68 	bl	8006674 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2264      	movs	r2, #100	; 0x64
 800a1a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a1c4:	f001 bafd 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00c      	beq.n	800a1ec <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7fc fa7a 	bl	80066cc <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a1ea:	e00e      	b.n	800a20a <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7fc fa57 	bl	80066a0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	22c8      	movs	r2, #200	; 0xc8
 800a1f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a210:	2b04      	cmp	r3, #4
 800a212:	f041 82a9 	bne.w	800b768 <WiFi_Conn_ND+0x1898>
					{
						Cambiar_CWMODE(b);
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7fc fa2c 	bl	8006674 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2264      	movs	r2, #100	; 0x64
 800a220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a234:	f001 ba98 	b.w	800b768 <WiFi_Conn_ND+0x1898>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a23e:	2bc8      	cmp	r3, #200	; 0xc8
 800a240:	d04f      	beq.n	800a2e2 <WiFi_Conn_ND+0x412>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d04a      	beq.n	800a2e2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a252:	2b02      	cmp	r3, #2
 800a254:	d045      	beq.n	800a2e2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d040      	beq.n	800a2e2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a266:	2b04      	cmp	r3, #4
 800a268:	d03b      	beq.n	800a2e2 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a270:	2b0a      	cmp	r3, #10
 800a272:	d036      	beq.n	800a2e2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27a:	2b0b      	cmp	r3, #11
 800a27c:	d031      	beq.n	800a2e2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a284:	2b0c      	cmp	r3, #12
 800a286:	d02c      	beq.n	800a2e2 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7fc fa09 	bl	80066a0 <ConectarWIFI>
						if(b->_enviaruart==1)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a294:	2b01      	cmp	r3, #1
 800a296:	d124      	bne.n	800a2e2 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f7fc fb81 	bl	80069a0 <AT_ESP8266_ND>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d109      	bne.n	800a2cc <WiFi_Conn_ND+0x3fc>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7f7 f954 	bl	8001574 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	2364      	movs	r3, #100	; 0x64
 800a2dc:	68b8      	ldr	r0, [r7, #8]
 800a2de:	f7fb f94d 	bl	800557c <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d004      	beq.n	800a2f6 <WiFi_Conn_ND+0x426>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f2:	2b0c      	cmp	r3, #12
 800a2f4:	d103      	bne.n	800a2fe <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	22d1      	movs	r2, #209	; 0xd1
 800a2fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a304:	2b02      	cmp	r3, #2
 800a306:	d00a      	beq.n	800a31e <WiFi_Conn_ND+0x44e>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d005      	beq.n	800a31e <WiFi_Conn_ND+0x44e>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a318:	2b20      	cmp	r3, #32
 800a31a:	f041 8227 	bne.w	800b76c <WiFi_Conn_ND+0x189c>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	22cd      	movs	r2, #205	; 0xcd
 800a322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a326:	f001 ba21 	b.w	800b76c <WiFi_Conn_ND+0x189c>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a32a:	f241 3088 	movw	r0, #5000	; 0x1388
 800a32e:	f7f8 fc71 	bl	8002c14 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7fc f9b4 	bl	80066a0 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	22c8      	movs	r2, #200	; 0xc8
 800a33c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a356:	2b04      	cmp	r3, #4
 800a358:	f041 820a 	bne.w	800b770 <WiFi_Conn_ND+0x18a0>
					{
						Cambiar_CWMODE(b);
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7fc f989 	bl	8006674 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2264      	movs	r2, #100	; 0x64
 800a366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a37a:	f001 b9f9 	b.w	800b770 <WiFi_Conn_ND+0x18a0>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d108      	bne.n	800a3a2 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f240 3229 	movw	r2, #809	; 0x329
 800a396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a8:	2b0a      	cmp	r3, #10
 800a3aa:	d004      	beq.n	800a3b6 <WiFi_Conn_ND+0x4e6>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b2:	2b0d      	cmp	r3, #13
 800a3b4:	d10a      	bne.n	800a3cc <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7fc f972 	bl	80066a0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	22c8      	movs	r2, #200	; 0xc8
 800a3c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d2:	2b04      	cmp	r3, #4
 800a3d4:	d10e      	bne.n	800a3f4 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7fc f94c 	bl	8006674 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2264      	movs	r2, #100	; 0x64
 800a3e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d011      	beq.n	800a422 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f7fc f9bc 	bl	800677c <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a40a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a41e:	f001 b9d0 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f7fc f952 	bl	80066cc <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a42e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a43a:	f001 b9c2 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a444:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a448:	d03b      	beq.n	800a4c2 <WiFi_Conn_ND+0x5f2>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a450:	2b04      	cmp	r3, #4
 800a452:	d036      	beq.n	800a4c2 <WiFi_Conn_ND+0x5f2>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a45a:	2b0a      	cmp	r3, #10
 800a45c:	d031      	beq.n	800a4c2 <WiFi_Conn_ND+0x5f2>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a464:	2b0d      	cmp	r3, #13
 800a466:	d02c      	beq.n	800a4c2 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7fc f95b 	bl	8006724 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a474:	2b01      	cmp	r3, #1
 800a476:	d124      	bne.n	800a4c2 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f7fc fa91 	bl	80069a0 <AT_ESP8266_ND>
 800a47e:	4602      	mov	r2, r0
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a494:	2b01      	cmp	r3, #1
 800a496:	d109      	bne.n	800a4ac <WiFi_Conn_ND+0x5dc>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7f7 f864 	bl	8001574 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	2364      	movs	r3, #100	; 0x64
 800a4bc:	68b8      	ldr	r0, [r7, #8]
 800a4be:	f7fb f85d 	bl	800557c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c8:	2b0a      	cmp	r3, #10
 800a4ca:	d005      	beq.n	800a4d8 <WiFi_Conn_ND+0x608>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d2:	2b0d      	cmp	r3, #13
 800a4d4:	f041 814e 	bne.w	800b774 <WiFi_Conn_ND+0x18a4>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f240 1235 	movw	r2, #309	; 0x135
 800a4de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a4e2:	f001 b947 	b.w	800b774 <WiFi_Conn_ND+0x18a4>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f7fc f8ae 	bl	8006648 <NOP>
			}
			break;
 800a4ec:	f001 b969 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f7fc f8d1 	bl	80066a0 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	22c8      	movs	r2, #200	; 0xc8
 800a502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a514:	2b04      	cmp	r3, #4
 800a516:	f041 812f 	bne.w	800b778 <WiFi_Conn_ND+0x18a8>
					{
						Cambiar_CWMODE(b);
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7fc f8aa 	bl	8006674 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2264      	movs	r2, #100	; 0x64
 800a524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a538:	f001 b91e 	b.w	800b778 <WiFi_Conn_ND+0x18a8>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a542:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a546:	d04f      	beq.n	800a5e8 <WiFi_Conn_ND+0x718>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d04a      	beq.n	800a5e8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d045      	beq.n	800a5e8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a562:	2b02      	cmp	r3, #2
 800a564:	d040      	beq.n	800a5e8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56c:	2b07      	cmp	r3, #7
 800a56e:	d03b      	beq.n	800a5e8 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a576:	2b08      	cmp	r3, #8
 800a578:	d036      	beq.n	800a5e8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a580:	2b1e      	cmp	r3, #30
 800a582:	d031      	beq.n	800a5e8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58a:	2b1f      	cmp	r3, #31
 800a58c:	d02c      	beq.n	800a5e8 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7fc f89c 	bl	80066cc <MUX>
						if(b->_enviaruart==1)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d124      	bne.n	800a5e8 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f7fc f9fe 	bl	80069a0 <AT_ESP8266_ND>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d109      	bne.n	800a5d2 <WiFi_Conn_ND+0x702>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	f7f6 ffd1 	bl	8001574 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	2364      	movs	r3, #100	; 0x64
 800a5e2:	68b8      	ldr	r0, [r7, #8]
 800a5e4:	f7fa ffca 	bl	800557c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d009      	beq.n	800a606 <WiFi_Conn_ND+0x736>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f8:	2b07      	cmp	r3, #7
 800a5fa:	d004      	beq.n	800a606 <WiFi_Conn_ND+0x736>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a602:	2b08      	cmp	r3, #8
 800a604:	d104      	bne.n	800a610 <WiFi_Conn_ND+0x740>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f240 1299 	movw	r2, #409	; 0x199
 800a60c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a616:	2b02      	cmp	r3, #2
 800a618:	d00a      	beq.n	800a630 <WiFi_Conn_ND+0x760>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a620:	2b1e      	cmp	r3, #30
 800a622:	d005      	beq.n	800a630 <WiFi_Conn_ND+0x760>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a62a:	2b1f      	cmp	r3, #31
 800a62c:	f041 80a6 	bne.w	800b77c <WiFi_Conn_ND+0x18ac>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f240 1295 	movw	r2, #405	; 0x195
 800a636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a63a:	f001 b89f 	b.w	800b77c <WiFi_Conn_ND+0x18ac>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f7fc f802 	bl	8006648 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d112      	bne.n	800a674 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f7fc f810 	bl	8006674 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2264      	movs	r2, #100	; 0x64
 800a658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67a:	2b0a      	cmp	r3, #10
 800a67c:	d005      	beq.n	800a68a <WiFi_Conn_ND+0x7ba>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a684:	2b0d      	cmp	r3, #13
 800a686:	f041 807b 	bne.w	800b780 <WiFi_Conn_ND+0x18b0>
				{
					ConectarWIFI(b);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f7fc f808 	bl	80066a0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	22c8      	movs	r2, #200	; 0xc8
 800a694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a6a8:	f001 b86a 	b.w	800b780 <WiFi_Conn_ND+0x18b0>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f7fb ffcb 	bl	8006648 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c0:	2b04      	cmp	r3, #4
 800a6c2:	d10e      	bne.n	800a6e2 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f7fb ffd5 	bl	8006674 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2264      	movs	r2, #100	; 0x64
 800a6ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e8:	2b0a      	cmp	r3, #10
 800a6ea:	d004      	beq.n	800a6f6 <WiFi_Conn_ND+0x826>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f2:	2b0d      	cmp	r3, #13
 800a6f4:	d10a      	bne.n	800a70c <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7fb ffd2 	bl	80066a0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	22c8      	movs	r2, #200	; 0xc8
 800a700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10d      	bne.n	800a732 <WiFi_Conn_ND+0x862>
					{
						IPDef(b);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7fb ffee 	bl	80066f8 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a72e:	f001 b848 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
						IPDef(b);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7fb ffe0 	bl	80066f8 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a74a:	f001 b83a 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a754:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a758:	d045      	beq.n	800a7e6 <WiFi_Conn_ND+0x916>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a760:	2b04      	cmp	r3, #4
 800a762:	d040      	beq.n	800a7e6 <WiFi_Conn_ND+0x916>
									&&(b->_estado!=at_ok)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d03b      	beq.n	800a7e6 <WiFi_Conn_ND+0x916>
									&&(b->_estado!=at_error)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a774:	2b02      	cmp	r3, #2
 800a776:	d036      	beq.n	800a7e6 <WiFi_Conn_ND+0x916>
									&&(b->_estado!=at_def_ip_ok)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77e:	2b1b      	cmp	r3, #27
 800a780:	d031      	beq.n	800a7e6 <WiFi_Conn_ND+0x916>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a788:	2b21      	cmp	r3, #33	; 0x21
 800a78a:	d02c      	beq.n	800a7e6 <WiFi_Conn_ND+0x916>
				{
						IPDef(b);
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7fb ffb3 	bl	80066f8 <IPDef>
						if(b->_enviaruart==1)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d124      	bne.n	800a7e6 <WiFi_Conn_ND+0x916>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7fc f8ff 	bl	80069a0 <AT_ESP8266_ND>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d109      	bne.n	800a7d0 <WiFi_Conn_ND+0x900>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4610      	mov	r0, r2
 800a7cc:	f7f6 fed2 	bl	8001574 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	2364      	movs	r3, #100	; 0x64
 800a7e0:	68b8      	ldr	r0, [r7, #8]
 800a7e2:	f7fa fecb 	bl	800557c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d004      	beq.n	800a7fa <WiFi_Conn_ND+0x92a>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f6:	2b1b      	cmp	r3, #27
 800a7f8:	d104      	bne.n	800a804 <WiFi_Conn_ND+0x934>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d005      	beq.n	800a81a <WiFi_Conn_ND+0x94a>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a814:	2b21      	cmp	r3, #33	; 0x21
 800a816:	f040 87b5 	bne.w	800b784 <WiFi_Conn_ND+0x18b4>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a824:	f000 bfae 	b.w	800b784 <WiFi_Conn_ND+0x18b4>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f7fb ff0d 	bl	8006648 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a834:	2b04      	cmp	r3, #4
 800a836:	d004      	beq.n	800a842 <WiFi_Conn_ND+0x972>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d112      	bne.n	800a868 <WiFi_Conn_ND+0x998>
				{
					Cambiar_CWMODE(b);
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7fb ff16 	bl	8006674 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2264      	movs	r2, #100	; 0x64
 800a84c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86e:	2b0a      	cmp	r3, #10
 800a870:	d005      	beq.n	800a87e <WiFi_Conn_ND+0x9ae>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a878:	2b0d      	cmp	r3, #13
 800a87a:	f040 8785 	bne.w	800b788 <WiFi_Conn_ND+0x18b8>
				{
					ConectarWIFI(b);
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f7fb ff0e 	bl	80066a0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	22c8      	movs	r2, #200	; 0xc8
 800a888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a89c:	f000 bf74 	b.w	800b788 <WiFi_Conn_ND+0x18b8>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7fb fed1 	bl	8006648 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d112      	bne.n	800a8d6 <WiFi_Conn_ND+0xa06>
					{
						Cambiar_CWMODE(b);
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f7fb fedf 	bl	8006674 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2264      	movs	r2, #100	; 0x64
 800a8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8dc:	2b0a      	cmp	r3, #10
 800a8de:	d004      	beq.n	800a8ea <WiFi_Conn_ND+0xa1a>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e6:	2b0d      	cmp	r3, #13
 800a8e8:	d10e      	bne.n	800a908 <WiFi_Conn_ND+0xa38>
					{
						ConectarWIFI(b);
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7fb fed8 	bl	80066a0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	22c8      	movs	r2, #200	; 0xc8
 800a8f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d111      	bne.n	800a936 <WiFi_Conn_ND+0xa66>
					{
						ConectarTCP(b);
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f7fb ff1c 	bl	8006750 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a91e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a932:	f000 bf46 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
						ConectarWIFI(b);//
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f7fb feb2 	bl	80066a0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	22c8      	movs	r2, #200	; 0xc8
 800a940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a954:	f000 bf35 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a962:	d04a      	beq.n	800a9fa <WiFi_Conn_ND+0xb2a>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d045      	beq.n	800a9fa <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_ok)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a974:	2b01      	cmp	r3, #1
 800a976:	d040      	beq.n	800a9fa <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_wifi_disconnect)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97e:	2b0a      	cmp	r3, #10
 800a980:	d03b      	beq.n	800a9fa <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a988:	2b0e      	cmp	r3, #14
 800a98a:	d036      	beq.n	800a9fa <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_tcp_conectado)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a992:	2b0f      	cmp	r3, #15
 800a994:	d031      	beq.n	800a9fa <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99c:	2b10      	cmp	r3, #16
 800a99e:	d02c      	beq.n	800a9fa <WiFi_Conn_ND+0xb2a>
				{
					ConectarTCP(b);
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7fb fed5 	bl	8006750 <ConectarTCP>
						if(b->_enviaruart==1)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d124      	bne.n	800a9fa <WiFi_Conn_ND+0xb2a>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f7fb fff5 	bl	80069a0 <AT_ESP8266_ND>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d109      	bne.n	800a9e4 <WiFi_Conn_ND+0xb14>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4610      	mov	r0, r2
 800a9e0:	f7f6 fdc8 	bl	8001574 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	2364      	movs	r3, #100	; 0x64
 800a9f4:	68b8      	ldr	r0, [r7, #8]
 800a9f6:	f7fa fdc1 	bl	800557c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d009      	beq.n	800aa18 <WiFi_Conn_ND+0xb48>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa0a:	2b0e      	cmp	r3, #14
 800aa0c:	d004      	beq.n	800aa18 <WiFi_Conn_ND+0xb48>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa14:	2b0f      	cmp	r3, #15
 800aa16:	d106      	bne.n	800aa26 <WiFi_Conn_ND+0xb56>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f240 2261 	movw	r2, #609	; 0x261
 800aa1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800aa22:	f000 beb3 	b.w	800b78c <WiFi_Conn_ND+0x18bc>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d005      	beq.n	800aa3c <WiFi_Conn_ND+0xb6c>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa36:	2b10      	cmp	r3, #16
 800aa38:	f040 86a8 	bne.w	800b78c <WiFi_Conn_ND+0x18bc>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f240 225d 	movw	r2, #605	; 0x25d
 800aa42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800aa46:	f000 bea1 	b.w	800b78c <WiFi_Conn_ND+0x18bc>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7fb fdfc 	bl	8006648 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa56:	2b04      	cmp	r3, #4
 800aa58:	d112      	bne.n	800aa80 <WiFi_Conn_ND+0xbb0>
				{
					Cambiar_CWMODE(b);
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f7fb fe0a 	bl	8006674 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2264      	movs	r2, #100	; 0x64
 800aa64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa86:	2b0a      	cmp	r3, #10
 800aa88:	d004      	beq.n	800aa94 <WiFi_Conn_ND+0xbc4>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa90:	2b0d      	cmp	r3, #13
 800aa92:	d10e      	bne.n	800aab2 <WiFi_Conn_ND+0xbe2>
				{
					ConectarWIFI(b);
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7fb fe03 	bl	80066a0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	22c8      	movs	r2, #200	; 0xc8
 800aa9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d00a      	beq.n	800aad2 <WiFi_Conn_ND+0xc02>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac2:	2b10      	cmp	r3, #16
 800aac4:	d005      	beq.n	800aad2 <WiFi_Conn_ND+0xc02>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aacc:	2b0e      	cmp	r3, #14
 800aace:	f040 865f 	bne.w	800b790 <WiFi_Conn_ND+0x18c0>
				{
					ConectarTCP(b);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7fb fe3c 	bl	8006750 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800aaf2:	f000 be4d 	b.w	800b790 <WiFi_Conn_ND+0x18c0>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7fb fda6 	bl	8006648 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab02:	2b04      	cmp	r3, #4
 800ab04:	d112      	bne.n	800ab2c <WiFi_Conn_ND+0xc5c>
					{
						Cambiar_CWMODE(b);
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7fb fdb4 	bl	8006674 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2264      	movs	r2, #100	; 0x64
 800ab10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab32:	2b0a      	cmp	r3, #10
 800ab34:	d004      	beq.n	800ab40 <WiFi_Conn_ND+0xc70>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab3c:	2b0d      	cmp	r3, #13
 800ab3e:	d10e      	bne.n	800ab5e <WiFi_Conn_ND+0xc8e>
					{
						ConectarWIFI(b);
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f7fb fdad 	bl	80066a0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	22c8      	movs	r2, #200	; 0xc8
 800ab4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d004      	beq.n	800ab72 <WiFi_Conn_ND+0xca2>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6e:	2b10      	cmp	r3, #16
 800ab70:	d10f      	bne.n	800ab92 <WiFi_Conn_ND+0xcc2>
					{
						ConectarTCP(b);
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7fb fdec 	bl	8006750 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab98:	2b0e      	cmp	r3, #14
 800ab9a:	d005      	beq.n	800aba8 <WiFi_Conn_ND+0xcd8>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba2:	2b0f      	cmp	r3, #15
 800aba4:	f040 85f6 	bne.w	800b794 <WiFi_Conn_ND+0x18c4>
					{
						if(b->_automatizacion >= WF_SEND )
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800abae:	2b02      	cmp	r3, #2
 800abb0:	f240 85f0 	bls.w	800b794 <WiFi_Conn_ND+0x18c4>
						{
							EnviarDatos(b);
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f7fb fe0d 	bl	80067d4 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800abc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800abd4:	f000 bdde 	b.w	800b794 <WiFi_Conn_ND+0x18c4>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abde:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800abe2:	d054      	beq.n	800ac8e <WiFi_Conn_ND+0xdbe>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abea:	2b02      	cmp	r3, #2
 800abec:	d04f      	beq.n	800ac8e <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_wifi_disconnect)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf4:	2b0a      	cmp	r3, #10
 800abf6:	d04a      	beq.n	800ac8e <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_tcp_desconectado)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abfe:	2b10      	cmp	r3, #16
 800ac00:	d045      	beq.n	800ac8e <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_tcp_snd_err)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac08:	2b11      	cmp	r3, #17
 800ac0a:	d040      	beq.n	800ac8e <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_tcp_ok_to_send)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac12:	2b14      	cmp	r3, #20
 800ac14:	d03b      	beq.n	800ac8e <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac1c:	2b12      	cmp	r3, #18
 800ac1e:	d036      	beq.n	800ac8e <WiFi_Conn_ND+0xdbe>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d907      	bls.n	800ac3a <WiFi_Conn_ND+0xd6a>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <WiFi_Conn_ND+0xd6a>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f7fb fdcd 	bl	80067d4 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d124      	bne.n	800ac8e <WiFi_Conn_ND+0xdbe>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f7fb feab 	bl	80069a0 <AT_ESP8266_ND>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d109      	bne.n	800ac78 <WiFi_Conn_ND+0xda8>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac70:	4619      	mov	r1, r3
 800ac72:	4610      	mov	r0, r2
 800ac74:	f7f6 fc7e 	bl	8001574 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	2364      	movs	r3, #100	; 0x64
 800ac88:	68b8      	ldr	r0, [r7, #8]
 800ac8a:	f7fa fc77 	bl	800557c <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac94:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ac98:	d13b      	bne.n	800ad12 <WiFi_Conn_ND+0xe42>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d136      	bne.n	800ad12 <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_error)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d031      	beq.n	800ad12 <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_wifi_disconnect)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb4:	2b0a      	cmp	r3, #10
 800acb6:	d02c      	beq.n	800ad12 <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_tcp_desconectado)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acbe:	2b10      	cmp	r3, #16
 800acc0:	d027      	beq.n	800ad12 <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_tcp_snd_err)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc8:	2b11      	cmp	r3, #17
 800acca:	d022      	beq.n	800ad12 <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_tcp_enviado_error))
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd2:	2b12      	cmp	r3, #18
 800acd4:	d01d      	beq.n	800ad12 <WiFi_Conn_ND+0xe42>
							{
								b->_enviaruart=0;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d109      	bne.n	800acfc <WiFi_Conn_ND+0xe2c>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800acf4:	4619      	mov	r1, r3
 800acf6:	4610      	mov	r0, r2
 800acf8:	f7f6 fc3c 	bl	8001574 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	2364      	movs	r3, #100	; 0x64
 800ad0c:	68b8      	ldr	r0, [r7, #8]
 800ad0e:	f7fa fc35 	bl	800557c <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad18:	2b13      	cmp	r3, #19
 800ad1a:	d104      	bne.n	800ad26 <WiFi_Conn_ND+0xe56>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f240 22c5 	movw	r2, #709	; 0x2c5
 800ad22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d014      	beq.n	800ad5a <WiFi_Conn_ND+0xe8a>
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad36:	2b0a      	cmp	r3, #10
 800ad38:	d00f      	beq.n	800ad5a <WiFi_Conn_ND+0xe8a>
										 ||(b->_estado==at_tcp_desconectado)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad40:	2b10      	cmp	r3, #16
 800ad42:	d00a      	beq.n	800ad5a <WiFi_Conn_ND+0xe8a>
										 ||(b->_estado==at_tcp_snd_err)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4a:	2b11      	cmp	r3, #17
 800ad4c:	d005      	beq.n	800ad5a <WiFi_Conn_ND+0xe8a>
										 ||(b->_estado==at_tcp_enviado_error))
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad54:	2b12      	cmp	r3, #18
 800ad56:	f040 851f 	bne.w	800b798 <WiFi_Conn_ND+0x18c8>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f240 22c1 	movw	r2, #705	; 0x2c1
 800ad60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800ad64:	f000 bd18 	b.w	800b798 <WiFi_Conn_ND+0x18c8>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7fb fc6d 	bl	8006648 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad74:	2b04      	cmp	r3, #4
 800ad76:	d112      	bne.n	800ad9e <WiFi_Conn_ND+0xece>
				{
					Cambiar_CWMODE(b);
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f7fb fc7b 	bl	8006674 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2264      	movs	r2, #100	; 0x64
 800ad82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada4:	2b0a      	cmp	r3, #10
 800ada6:	d004      	beq.n	800adb2 <WiFi_Conn_ND+0xee2>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adae:	2b0d      	cmp	r3, #13
 800adb0:	d10e      	bne.n	800add0 <WiFi_Conn_ND+0xf00>
				{
					ConectarWIFI(b);
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7fb fc74 	bl	80066a0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	22c8      	movs	r2, #200	; 0xc8
 800adbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add6:	2b0c      	cmp	r3, #12
 800add8:	d10f      	bne.n	800adfa <WiFi_Conn_ND+0xf2a>
				{
					ConectarTCP(b);
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f7fb fcb8 	bl	8006750 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ade6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d00f      	beq.n	800ae24 <WiFi_Conn_ND+0xf54>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0a:	2b10      	cmp	r3, #16
 800ae0c:	d00a      	beq.n	800ae24 <WiFi_Conn_ND+0xf54>
										 ||(b->_estado==at_tcp_snd_err)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae14:	2b11      	cmp	r3, #17
 800ae16:	d005      	beq.n	800ae24 <WiFi_Conn_ND+0xf54>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae1e:	2b12      	cmp	r3, #18
 800ae20:	f040 84bc 	bne.w	800b79c <WiFi_Conn_ND+0x18cc>
				{
					ConectarTCP(b);
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f7fb fc93 	bl	8006750 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800ae44:	f000 bcaa 	b.w	800b79c <WiFi_Conn_ND+0x18cc>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f7fb fbfd 	bl	8006648 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d112      	bne.n	800ae7e <WiFi_Conn_ND+0xfae>
					{
						Cambiar_CWMODE(b);
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f7fb fc0b 	bl	8006674 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2264      	movs	r2, #100	; 0x64
 800ae62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae84:	2b0a      	cmp	r3, #10
 800ae86:	d004      	beq.n	800ae92 <WiFi_Conn_ND+0xfc2>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8e:	2b0d      	cmp	r3, #13
 800ae90:	d10e      	bne.n	800aeb0 <WiFi_Conn_ND+0xfe0>
					{
						ConectarWIFI(b);
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f7fb fc04 	bl	80066a0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	22c8      	movs	r2, #200	; 0xc8
 800ae9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d00e      	beq.n	800aed8 <WiFi_Conn_ND+0x1008>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec0:	2b0b      	cmp	r3, #11
 800aec2:	d009      	beq.n	800aed8 <WiFi_Conn_ND+0x1008>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeca:	2b0c      	cmp	r3, #12
 800aecc:	d004      	beq.n	800aed8 <WiFi_Conn_ND+0x1008>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed4:	2b10      	cmp	r3, #16
 800aed6:	d10f      	bne.n	800aef8 <WiFi_Conn_ND+0x1028>
					{
						ConectarTCP(b);
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f7fb fc39 	bl	8006750 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800aef8:	20c8      	movs	r0, #200	; 0xc8
 800aefa:	f7f7 fe8b 	bl	8002c14 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af04:	2b02      	cmp	r3, #2
 800af06:	d916      	bls.n	800af36 <WiFi_Conn_ND+0x1066>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d011      	beq.n	800af36 <WiFi_Conn_ND+0x1066>
					{
							EnviarDatos(b);
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7fb fc5e 	bl	80067d4 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800af1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800af32:	f000 bc46 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
							b->_estado_conexion=TCP_CONN_OK;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f240 2261 	movw	r2, #609	; 0x261
 800af3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800af50:	f000 bc37 	b.w	800b7c2 <WiFi_Conn_ND+0x18f2>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af5a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800af5e:	d045      	beq.n	800afec <WiFi_Conn_ND+0x111c>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af66:	2b02      	cmp	r3, #2
 800af68:	d040      	beq.n	800afec <WiFi_Conn_ND+0x111c>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af70:	2b0a      	cmp	r3, #10
 800af72:	d03b      	beq.n	800afec <WiFi_Conn_ND+0x111c>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7a:	2b15      	cmp	r3, #21
 800af7c:	d036      	beq.n	800afec <WiFi_Conn_ND+0x111c>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af84:	2b16      	cmp	r3, #22
 800af86:	d031      	beq.n	800afec <WiFi_Conn_ND+0x111c>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af8e:	2b17      	cmp	r3, #23
 800af90:	d02c      	beq.n	800afec <WiFi_Conn_ND+0x111c>
							{
								CrearServidorTCP(b);
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7fb fbf2 	bl	800677c <CrearServidorTCP>
									if(b->_enviaruart==1)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d124      	bne.n	800afec <WiFi_Conn_ND+0x111c>
										{
											b->_estado=AT_ESP8266_ND(b);
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f7fb fcfc 	bl	80069a0 <AT_ESP8266_ND>
 800afa8:	4602      	mov	r2, r0
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d109      	bne.n	800afd6 <WiFi_Conn_ND+0x1106>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800afce:	4619      	mov	r1, r3
 800afd0:	4610      	mov	r0, r2
 800afd2:	f7f6 facf 	bl	8001574 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	2364      	movs	r3, #100	; 0x64
 800afe6:	68b8      	ldr	r0, [r7, #8]
 800afe8:	f7fa fac8 	bl	800557c <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff2:	2b15      	cmp	r3, #21
 800aff4:	d004      	beq.n	800b000 <WiFi_Conn_ND+0x1130>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800affc:	2b17      	cmp	r3, #23
 800affe:	d104      	bne.n	800b00a <WiFi_Conn_ND+0x113a>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f240 3229 	movw	r2, #809	; 0x329
 800b006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b010:	2b16      	cmp	r3, #22
 800b012:	f040 83c5 	bne.w	800b7a0 <WiFi_Conn_ND+0x18d0>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f240 3225 	movw	r2, #805	; 0x325
 800b01c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800b020:	e3be      	b.n	800b7a0 <WiFi_Conn_ND+0x18d0>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f7fb fb10 	bl	8006648 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d112      	bne.n	800b058 <WiFi_Conn_ND+0x1188>
							{
								Cambiar_CWMODE(b);
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f7fb fb1e 	bl	8006674 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2264      	movs	r2, #100	; 0x64
 800b03c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05e:	2b0a      	cmp	r3, #10
 800b060:	d004      	beq.n	800b06c <WiFi_Conn_ND+0x119c>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b068:	2b0d      	cmp	r3, #13
 800b06a:	d10e      	bne.n	800b08a <WiFi_Conn_ND+0x11ba>
							{
								ConectarWIFI(b);
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7fb fb17 	bl	80066a0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	22c8      	movs	r2, #200	; 0xc8
 800b076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b090:	2b02      	cmp	r3, #2
 800b092:	d005      	beq.n	800b0a0 <WiFi_Conn_ND+0x11d0>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b09a:	2b10      	cmp	r3, #16
 800b09c:	f040 8382 	bne.w	800b7a4 <WiFi_Conn_ND+0x18d4>
							{
								ConectarTCP(b);
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7fb fb55 	bl	8006750 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b0ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800b0c0:	e370      	b.n	800b7a4 <WiFi_Conn_ND+0x18d4>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7fb fac0 	bl	8006648 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	d112      	bne.n	800b0f8 <WiFi_Conn_ND+0x1228>
							{
								Cambiar_CWMODE(b);
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f7fb face 	bl	8006674 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2264      	movs	r2, #100	; 0x64
 800b0dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fe:	2b0a      	cmp	r3, #10
 800b100:	d004      	beq.n	800b10c <WiFi_Conn_ND+0x123c>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b108:	2b0d      	cmp	r3, #13
 800b10a:	d10e      	bne.n	800b12a <WiFi_Conn_ND+0x125a>
							{
								ConectarWIFI(b);
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f7fb fac7 	bl	80066a0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	22c8      	movs	r2, #200	; 0xc8
 800b116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b130:	2b02      	cmp	r3, #2
 800b132:	d005      	beq.n	800b140 <WiFi_Conn_ND+0x1270>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b13a:	2b10      	cmp	r3, #16
 800b13c:	f040 8334 	bne.w	800b7a8 <WiFi_Conn_ND+0x18d8>
							{
								ConectarTCP(b);
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f7fb fb05 	bl	8006750 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b14c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b160:	e322      	b.n	800b7a8 <WiFi_Conn_ND+0x18d8>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f7fb fa70 	bl	8006648 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16e:	2b04      	cmp	r3, #4
 800b170:	d112      	bne.n	800b198 <WiFi_Conn_ND+0x12c8>
							{
								Cambiar_CWMODE(b);
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f7fb fa7e 	bl	8006674 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2264      	movs	r2, #100	; 0x64
 800b17c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19e:	2b0a      	cmp	r3, #10
 800b1a0:	d004      	beq.n	800b1ac <WiFi_Conn_ND+0x12dc>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a8:	2b0d      	cmp	r3, #13
 800b1aa:	d10e      	bne.n	800b1ca <WiFi_Conn_ND+0x12fa>
							{
								ConectarWIFI(b);
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f7fb fa77 	bl	80066a0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	22c8      	movs	r2, #200	; 0xc8
 800b1b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d005      	beq.n	800b1e0 <WiFi_Conn_ND+0x1310>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1da:	2b10      	cmp	r3, #16
 800b1dc:	f040 82e6 	bne.w	800b7ac <WiFi_Conn_ND+0x18dc>
							{
								ConectarTCP(b);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7fb fab5 	bl	8006750 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b1ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b200:	e2d4      	b.n	800b7ac <WiFi_Conn_ND+0x18dc>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f7fb fa20 	bl	8006648 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d112      	bne.n	800b238 <WiFi_Conn_ND+0x1368>
							{
								Cambiar_CWMODE(b);
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7fb fa2e 	bl	8006674 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2264      	movs	r2, #100	; 0x64
 800b21c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b23e:	2b0a      	cmp	r3, #10
 800b240:	d004      	beq.n	800b24c <WiFi_Conn_ND+0x137c>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b248:	2b0d      	cmp	r3, #13
 800b24a:	d10e      	bne.n	800b26a <WiFi_Conn_ND+0x139a>
							{
								ConectarWIFI(b);
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f7fb fa27 	bl	80066a0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	22c8      	movs	r2, #200	; 0xc8
 800b256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b270:	2b02      	cmp	r3, #2
 800b272:	d005      	beq.n	800b280 <WiFi_Conn_ND+0x13b0>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b27a:	2b10      	cmp	r3, #16
 800b27c:	f040 8298 	bne.w	800b7b0 <WiFi_Conn_ND+0x18e0>
							{
								ConectarTCP(b);
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f7fb fa65 	bl	8006750 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b28c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b2a0:	e286      	b.n	800b7b0 <WiFi_Conn_ND+0x18e0>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f7fb f9d0 	bl	8006648 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d112      	bne.n	800b2e0 <WiFi_Conn_ND+0x1410>
								{
									Cambiar_CWMODE(b);
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7fb f9da 	bl	8006674 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2264      	movs	r2, #100	; 0x64
 800b2c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e6:	2b0a      	cmp	r3, #10
 800b2e8:	d004      	beq.n	800b2f4 <WiFi_Conn_ND+0x1424>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2f0:	2b0d      	cmp	r3, #13
 800b2f2:	d10e      	bne.n	800b312 <WiFi_Conn_ND+0x1442>
								{
									ConectarWIFI(b);
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7fb f9d3 	bl	80066a0 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	22c8      	movs	r2, #200	; 0xc8
 800b2fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d004      	beq.n	800b326 <WiFi_Conn_ND+0x1456>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b322:	2b10      	cmp	r3, #16
 800b324:	d10f      	bne.n	800b346 <WiFi_Conn_ND+0x1476>
								{
									ConectarTCP(b);
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7fb fa12 	bl	8006750 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	f040 8231 	bne.w	800b7b4 <WiFi_Conn_ND+0x18e4>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f000 822b 	beq.w	800b7b4 <WiFi_Conn_ND+0x18e4>
								{
									EnviarDatosSRVR(b);
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f7fb fa22 	bl	80067a8 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b37e:	e219      	b.n	800b7b4 <WiFi_Conn_ND+0x18e4>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b386:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b38a:	d063      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b392:	2b02      	cmp	r3, #2
 800b394:	d05e      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_wifi_disconnect)&&
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b39c:	2b0a      	cmp	r3, #10
 800b39e:	d059      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_wifi_connected)&&
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b3a6:	2b0b      	cmp	r3, #11
 800b3a8:	d054      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_wifi_gotip)&&
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b3b0:	2b0c      	cmp	r3, #12
 800b3b2:	d04f      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_tcp_desconectado)&&
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b3ba:	2b10      	cmp	r3, #16
 800b3bc:	d04a      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_tcp_snd_err)&&
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b3c4:	2b11      	cmp	r3, #17
 800b3c6:	d045      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b3ce:	2b12      	cmp	r3, #18
 800b3d0:	d040      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b3d8:	2b13      	cmp	r3, #19
 800b3da:	d03b      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b3e2:	2b16      	cmp	r3, #22
 800b3e4:	d036      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ec:	2b19      	cmp	r3, #25
 800b3ee:	d031      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d02c      	beq.n	800b454 <WiFi_Conn_ND+0x1584>
								{
								EnviarDatosSRVR(b);
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f7fb f9d4 	bl	80067a8 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b406:	2b01      	cmp	r3, #1
 800b408:	d124      	bne.n	800b454 <WiFi_Conn_ND+0x1584>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7fb fac8 	bl	80069a0 <AT_ESP8266_ND>
 800b410:	4602      	mov	r2, r0
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b426:	2b01      	cmp	r3, #1
 800b428:	d109      	bne.n	800b43e <WiFi_Conn_ND+0x156e>
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f7f6 f89b 	bl	8001574 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	2364      	movs	r3, #100	; 0x64
 800b44e:	68b8      	ldr	r0, [r7, #8]
 800b450:	f7fa f894 	bl	800557c <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b45a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b45e:	d154      	bne.n	800b50a <WiFi_Conn_ND+0x163a>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b466:	2b01      	cmp	r3, #1
 800b468:	d14f      	bne.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_error)&&
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b470:	2b02      	cmp	r3, #2
 800b472:	d04a      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_wifi_disconnect)&&
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b47a:	2b0a      	cmp	r3, #10
 800b47c:	d045      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_wifi_connected)&&
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b484:	2b0b      	cmp	r3, #11
 800b486:	d040      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_wifi_gotip)&&
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b48e:	2b0c      	cmp	r3, #12
 800b490:	d03b      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_tcp_desconectado)&&
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b498:	2b10      	cmp	r3, #16
 800b49a:	d036      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_tcp_snd_err)&&
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b4a2:	2b11      	cmp	r3, #17
 800b4a4:	d031      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b4ac:	2b12      	cmp	r3, #18
 800b4ae:	d02c      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b4b6:	2b13      	cmp	r3, #19
 800b4b8:	d027      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b4c0:	2b16      	cmp	r3, #22
 800b4c2:	d022      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ca:	2b19      	cmp	r3, #25
 800b4cc:	d01d      	beq.n	800b50a <WiFi_Conn_ND+0x163a>
										{
											b->_enviaruart=0;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d109      	bne.n	800b4f4 <WiFi_Conn_ND+0x1624>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	f7f6 f840 	bl	8001574 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b500:	b29a      	uxth	r2, r3
 800b502:	2364      	movs	r3, #100	; 0x64
 800b504:	68b8      	ldr	r0, [r7, #8]
 800b506:	f7fa f839 	bl	800557c <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b510:	2b13      	cmp	r3, #19
 800b512:	d104      	bne.n	800b51e <WiFi_Conn_ND+0x164e>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f240 328d 	movw	r2, #909	; 0x38d
 800b51a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b524:	2b02      	cmp	r3, #2
 800b526:	d02d      	beq.n	800b584 <WiFi_Conn_ND+0x16b4>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b52e:	2b04      	cmp	r3, #4
 800b530:	d028      	beq.n	800b584 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b538:	2b0a      	cmp	r3, #10
 800b53a:	d023      	beq.n	800b584 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b542:	2b0b      	cmp	r3, #11
 800b544:	d01e      	beq.n	800b584 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b54c:	2b0c      	cmp	r3, #12
 800b54e:	d019      	beq.n	800b584 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b556:	2b10      	cmp	r3, #16
 800b558:	d014      	beq.n	800b584 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b560:	2b11      	cmp	r3, #17
 800b562:	d00f      	beq.n	800b584 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b56a:	2b12      	cmp	r3, #18
 800b56c:	d00a      	beq.n	800b584 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b574:	2b16      	cmp	r3, #22
 800b576:	d005      	beq.n	800b584 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b57e:	2b19      	cmp	r3, #25
 800b580:	f040 811a 	bne.w	800b7b8 <WiFi_Conn_ND+0x18e8>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f240 3289 	movw	r2, #905	; 0x389
 800b58a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b58e:	e113      	b.n	800b7b8 <WiFi_Conn_ND+0x18e8>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7fb f859 	bl	8006648 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b59c:	2b04      	cmp	r3, #4
 800b59e:	d009      	beq.n	800b5b4 <WiFi_Conn_ND+0x16e4>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5a6:	2b0b      	cmp	r3, #11
 800b5a8:	d004      	beq.n	800b5b4 <WiFi_Conn_ND+0x16e4>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5b0:	2b0c      	cmp	r3, #12
 800b5b2:	d112      	bne.n	800b5da <WiFi_Conn_ND+0x170a>
							{
								Cambiar_CWMODE(b);
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f7fb f85d 	bl	8006674 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2264      	movs	r2, #100	; 0x64
 800b5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e0:	2b0a      	cmp	r3, #10
 800b5e2:	d004      	beq.n	800b5ee <WiFi_Conn_ND+0x171e>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ea:	2b0d      	cmp	r3, #13
 800b5ec:	d10e      	bne.n	800b60c <WiFi_Conn_ND+0x173c>
							{
								ConectarWIFI(b);
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7fb f856 	bl	80066a0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	22c8      	movs	r2, #200	; 0xc8
 800b5f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b612:	2b16      	cmp	r3, #22
 800b614:	d10c      	bne.n	800b630 <WiFi_Conn_ND+0x1760>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f240 3225 	movw	r2, #805	; 0x325
 800b61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b636:	2b18      	cmp	r3, #24
 800b638:	d10c      	bne.n	800b654 <WiFi_Conn_ND+0x1784>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f240 3229 	movw	r2, #809	; 0x329
 800b640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b65a:	2b19      	cmp	r3, #25
 800b65c:	d008      	beq.n	800b670 <WiFi_Conn_ND+0x17a0>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b664:	2b11      	cmp	r3, #17
 800b666:	d003      	beq.n	800b670 <WiFi_Conn_ND+0x17a0>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2212      	movs	r2, #18
 800b66c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b676:	2b01      	cmp	r3, #1
 800b678:	f040 80a0 	bne.w	800b7bc <WiFi_Conn_ND+0x18ec>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b696:	e091      	b.n	800b7bc <WiFi_Conn_ND+0x18ec>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f7fa ffd5 	bl	8006648 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	d009      	beq.n	800b6bc <WiFi_Conn_ND+0x17ec>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ae:	2b0b      	cmp	r3, #11
 800b6b0:	d004      	beq.n	800b6bc <WiFi_Conn_ND+0x17ec>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6b8:	2b0c      	cmp	r3, #12
 800b6ba:	d112      	bne.n	800b6e2 <WiFi_Conn_ND+0x1812>
								{
									Cambiar_CWMODE(b);
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7fa ffd9 	bl	8006674 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2264      	movs	r2, #100	; 0x64
 800b6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6e8:	2b0a      	cmp	r3, #10
 800b6ea:	d004      	beq.n	800b6f6 <WiFi_Conn_ND+0x1826>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6f2:	2b0d      	cmp	r3, #13
 800b6f4:	d10e      	bne.n	800b714 <WiFi_Conn_ND+0x1844>
								{
									ConectarWIFI(b);
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f7fa ffd2 	bl	80066a0 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	22c8      	movs	r2, #200	; 0xc8
 800b700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d004      	beq.n	800b728 <WiFi_Conn_ND+0x1858>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b724:	2b01      	cmp	r3, #1
 800b726:	d14b      	bne.n	800b7c0 <WiFi_Conn_ND+0x18f0>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d046      	beq.n	800b7c0 <WiFi_Conn_ND+0x18f0>
								{
									EnviarDatosSRVR(b);
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7fb f838 	bl	80067a8 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b762:	e02d      	b.n	800b7c0 <WiFi_Conn_ND+0x18f0>
			break;
 800b764:	bf00      	nop
 800b766:	e02c      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b768:	bf00      	nop
 800b76a:	e02a      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b76c:	bf00      	nop
 800b76e:	e028      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b770:	bf00      	nop
 800b772:	e026      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b774:	bf00      	nop
 800b776:	e024      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b778:	bf00      	nop
 800b77a:	e022      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b77c:	bf00      	nop
 800b77e:	e020      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b780:	bf00      	nop
 800b782:	e01e      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b784:	bf00      	nop
 800b786:	e01c      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b788:	bf00      	nop
 800b78a:	e01a      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b78c:	bf00      	nop
 800b78e:	e018      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b790:	bf00      	nop
 800b792:	e016      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b794:	bf00      	nop
 800b796:	e014      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b798:	bf00      	nop
 800b79a:	e012      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
			break;
 800b79c:	bf00      	nop
 800b79e:	e010      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
						break;
 800b7a0:	bf00      	nop
 800b7a2:	e00e      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
						break;
 800b7a4:	bf00      	nop
 800b7a6:	e00c      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
						break;
 800b7a8:	bf00      	nop
 800b7aa:	e00a      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
						break;
 800b7ac:	bf00      	nop
 800b7ae:	e008      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
						break;
 800b7b0:	bf00      	nop
 800b7b2:	e006      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
						break;
 800b7b4:	bf00      	nop
 800b7b6:	e004      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
						break;
 800b7b8:	bf00      	nop
 800b7ba:	e002      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
						break;
 800b7bc:	bf00      	nop
 800b7be:	e000      	b.n	800b7c2 <WiFi_Conn_ND+0x18f2>
						break;
 800b7c0:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <httpPOST>:

char deviceId[]={',','"','d','e','v','I','d','"',':','\0'};


httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b7d0:	b5b0      	push	{r4, r5, r7, lr}
 800b7d2:	b0a8      	sub	sp, #160	; 0xa0
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b7de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b7e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b7ee:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b7f2:	f7f4 fcff 	bl	80001f4 <strlen>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7fe:	4413      	add	r3, r2
 800b800:	4aed      	ldr	r2, [pc, #948]	; (800bbb8 <httpPOST+0x3e8>)
 800b802:	6810      	ldr	r0, [r2, #0]
 800b804:	6018      	str	r0, [r3, #0]
 800b806:	8892      	ldrh	r2, [r2, #4]
 800b808:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7f4 fcf2 	bl	80001f4 <strlen>
 800b810:	4603      	mov	r3, r0
 800b812:	461a      	mov	r2, r3
 800b814:	68f9      	ldr	r1, [r7, #12]
 800b816:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b81a:	f003 fe66 	bl	800f4ea <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b81e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b822:	f7f4 fce7 	bl	80001f4 <strlen>
 800b826:	4603      	mov	r3, r0
 800b828:	461a      	mov	r2, r3
 800b82a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b82e:	4413      	add	r3, r2
 800b830:	49e2      	ldr	r1, [pc, #904]	; (800bbbc <httpPOST+0x3ec>)
 800b832:	461a      	mov	r2, r3
 800b834:	460b      	mov	r3, r1
 800b836:	cb03      	ldmia	r3!, {r0, r1}
 800b838:	6010      	str	r0, [r2, #0]
 800b83a:	6051      	str	r1, [r2, #4]
 800b83c:	8819      	ldrh	r1, [r3, #0]
 800b83e:	789b      	ldrb	r3, [r3, #2]
 800b840:	8111      	strh	r1, [r2, #8]
 800b842:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b844:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b848:	f7f4 fcd4 	bl	80001f4 <strlen>
 800b84c:	4603      	mov	r3, r0
 800b84e:	461a      	mov	r2, r3
 800b850:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b854:	4413      	add	r3, r2
 800b856:	4ada      	ldr	r2, [pc, #872]	; (800bbc0 <httpPOST+0x3f0>)
 800b858:	8811      	ldrh	r1, [r2, #0]
 800b85a:	7892      	ldrb	r2, [r2, #2]
 800b85c:	8019      	strh	r1, [r3, #0]
 800b85e:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b860:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b864:	f7f4 fcc6 	bl	80001f4 <strlen>
 800b868:	4603      	mov	r3, r0
 800b86a:	461a      	mov	r2, r3
 800b86c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b870:	4413      	add	r3, r2
 800b872:	4ad4      	ldr	r2, [pc, #848]	; (800bbc4 <httpPOST+0x3f4>)
 800b874:	6810      	ldr	r0, [r2, #0]
 800b876:	6018      	str	r0, [r3, #0]
 800b878:	8891      	ldrh	r1, [r2, #4]
 800b87a:	7992      	ldrb	r2, [r2, #6]
 800b87c:	8099      	strh	r1, [r3, #4]
 800b87e:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b880:	68b8      	ldr	r0, [r7, #8]
 800b882:	f7f4 fcb7 	bl	80001f4 <strlen>
 800b886:	4603      	mov	r3, r0
 800b888:	461a      	mov	r2, r3
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b890:	f003 fe2b 	bl	800f4ea <strncat>
	strncat(post,":",1);
 800b894:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b898:	f7f4 fcac 	bl	80001f4 <strlen>
 800b89c:	4603      	mov	r3, r0
 800b89e:	461a      	mov	r2, r3
 800b8a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b8a4:	4413      	add	r3, r2
 800b8a6:	49c8      	ldr	r1, [pc, #800]	; (800bbc8 <httpPOST+0x3f8>)
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7f4 fc9f 	bl	80001f4 <strlen>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b8c0:	f003 fe13 	bl	800f4ea <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b8c4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b8c8:	f7f4 fc94 	bl	80001f4 <strlen>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b8d4:	4413      	add	r3, r2
 800b8d6:	4aba      	ldr	r2, [pc, #744]	; (800bbc0 <httpPOST+0x3f0>)
 800b8d8:	8811      	ldrh	r1, [r2, #0]
 800b8da:	7892      	ldrb	r2, [r2, #2]
 800b8dc:	8019      	strh	r1, [r3, #0]
 800b8de:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b8e0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b8e4:	f7f4 fc86 	bl	80001f4 <strlen>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b8f0:	4413      	add	r3, r2
 800b8f2:	4ab6      	ldr	r2, [pc, #728]	; (800bbcc <httpPOST+0x3fc>)
 800b8f4:	461d      	mov	r5, r3
 800b8f6:	4614      	mov	r4, r2
 800b8f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8fa:	6028      	str	r0, [r5, #0]
 800b8fc:	6069      	str	r1, [r5, #4]
 800b8fe:	60aa      	str	r2, [r5, #8]
 800b900:	60eb      	str	r3, [r5, #12]
 800b902:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b904:	6128      	str	r0, [r5, #16]
 800b906:	6169      	str	r1, [r5, #20]
 800b908:	61aa      	str	r2, [r5, #24]
 800b90a:	8823      	ldrh	r3, [r4, #0]
 800b90c:	78a2      	ldrb	r2, [r4, #2]
 800b90e:	83ab      	strh	r3, [r5, #28]
 800b910:	4613      	mov	r3, r2
 800b912:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b914:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b918:	f7f4 fc6c 	bl	80001f4 <strlen>
 800b91c:	4603      	mov	r3, r0
 800b91e:	461a      	mov	r2, r3
 800b920:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b924:	4413      	add	r3, r2
 800b926:	4aa6      	ldr	r2, [pc, #664]	; (800bbc0 <httpPOST+0x3f0>)
 800b928:	8811      	ldrh	r1, [r2, #0]
 800b92a:	7892      	ldrb	r2, [r2, #2]
 800b92c:	8019      	strh	r1, [r3, #0]
 800b92e:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b930:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b934:	f7f4 fc5e 	bl	80001f4 <strlen>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b940:	4413      	add	r3, r2
 800b942:	4aa3      	ldr	r2, [pc, #652]	; (800bbd0 <httpPOST+0x400>)
 800b944:	461c      	mov	r4, r3
 800b946:	4615      	mov	r5, r2
 800b948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b94a:	6020      	str	r0, [r4, #0]
 800b94c:	6061      	str	r1, [r4, #4]
 800b94e:	60a2      	str	r2, [r4, #8]
 800b950:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b952:	2300      	movs	r3, #0
 800b954:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800b958:	887b      	ldrh	r3, [r7, #2]
 800b95a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b95e:	4611      	mov	r1, r2
 800b960:	4618      	mov	r0, r3
 800b962:	f003 fb3b 	bl	800efdc <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800b966:	2300      	movs	r3, #0
 800b968:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800b96c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800b970:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800b974:	4611      	mov	r1, r2
 800b976:	4618      	mov	r0, r3
 800b978:	f003 fb30 	bl	800efdc <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800b97c:	2300      	movs	r3, #0
 800b97e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800b982:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b986:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b98a:	4611      	mov	r1, r2
 800b98c:	4618      	mov	r0, r3
 800b98e:	f003 fb25 	bl	800efdc <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800b992:	2300      	movs	r3, #0
 800b994:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800b998:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800b99c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f003 fb1a 	bl	800efdc <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800b9ae:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800b9b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f003 fb0f 	bl	800efdc <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800b9c4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800b9c8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f003 fb04 	bl	800efdc <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800b9da:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800b9de:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f003 faf9 	bl	800efdc <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800b9f0:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800b9f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f003 faee 	bl	800efdc <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800ba00:	2300      	movs	r3, #0
 800ba02:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800ba06:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800ba0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ba0e:	4611      	mov	r1, r2
 800ba10:	4618      	mov	r0, r3
 800ba12:	f003 fae3 	bl	800efdc <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800ba16:	2300      	movs	r3, #0
 800ba18:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800ba1c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800ba20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ba24:	4611      	mov	r1, r2
 800ba26:	4618      	mov	r0, r3
 800ba28:	f003 fad8 	bl	800efdc <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800ba32:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800ba36:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f003 facd 	bl	800efdc <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800ba42:	2300      	movs	r3, #0
 800ba44:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800ba48:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800ba4c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ba50:	4611      	mov	r1, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f003 fac2 	bl	800efdc <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800ba5e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800ba62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ba66:	4611      	mov	r1, r2
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f003 fab7 	bl	800efdc <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800ba74:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800ba78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f003 faac 	bl	800efdc <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800ba84:	2300      	movs	r3, #0
 800ba86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800ba8a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800ba8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ba92:	4611      	mov	r1, r2
 800ba94:	4618      	mov	r0, r3
 800ba96:	f003 faa1 	bl	800efdc <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800baa0:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800baa4:	f107 0220 	add.w	r2, r7, #32
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f003 fa96 	bl	800efdc <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800bab0:	2300      	movs	r3, #0
 800bab2:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800bab4:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800bab8:	f107 0218 	add.w	r2, r7, #24
 800babc:	4611      	mov	r1, r2
 800babe:	4618      	mov	r0, r3
 800bac0:	f003 fa8c 	bl	800efdc <INTOA>

	strncat(body,dd1,strlen(dd1));
 800bac4:	4843      	ldr	r0, [pc, #268]	; (800bbd4 <httpPOST+0x404>)
 800bac6:	f7f4 fb95 	bl	80001f4 <strlen>
 800baca:	4603      	mov	r3, r0
 800bacc:	461a      	mov	r2, r3
 800bace:	4941      	ldr	r1, [pc, #260]	; (800bbd4 <httpPOST+0x404>)
 800bad0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bad4:	f003 fd09 	bl	800f4ea <strncat>
	strncat(body,_d1,strlen(_d1));
 800bad8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800badc:	4618      	mov	r0, r3
 800bade:	f7f4 fb89 	bl	80001f4 <strlen>
 800bae2:	4602      	mov	r2, r0
 800bae4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bae8:	4619      	mov	r1, r3
 800baea:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800baee:	f003 fcfc 	bl	800f4ea <strncat>

	strncat(body,dd2,strlen(dd2));
 800baf2:	4839      	ldr	r0, [pc, #228]	; (800bbd8 <httpPOST+0x408>)
 800baf4:	f7f4 fb7e 	bl	80001f4 <strlen>
 800baf8:	4603      	mov	r3, r0
 800bafa:	461a      	mov	r2, r3
 800bafc:	4936      	ldr	r1, [pc, #216]	; (800bbd8 <httpPOST+0x408>)
 800bafe:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb02:	f003 fcf2 	bl	800f4ea <strncat>
	strncat(body,_d2,strlen(_d2));
 800bb06:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f4 fb72 	bl	80001f4 <strlen>
 800bb10:	4602      	mov	r2, r0
 800bb12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bb16:	4619      	mov	r1, r3
 800bb18:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb1c:	f003 fce5 	bl	800f4ea <strncat>

	strncat(body,dd3,strlen(dd3));
 800bb20:	482e      	ldr	r0, [pc, #184]	; (800bbdc <httpPOST+0x40c>)
 800bb22:	f7f4 fb67 	bl	80001f4 <strlen>
 800bb26:	4603      	mov	r3, r0
 800bb28:	461a      	mov	r2, r3
 800bb2a:	492c      	ldr	r1, [pc, #176]	; (800bbdc <httpPOST+0x40c>)
 800bb2c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb30:	f003 fcdb 	bl	800f4ea <strncat>
	strncat(body,_d3,strlen(_d3));
 800bb34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7f4 fb5b 	bl	80001f4 <strlen>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bb44:	4619      	mov	r1, r3
 800bb46:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb4a:	f003 fcce 	bl	800f4ea <strncat>

	strncat(body,dd4,strlen(dd4));
 800bb4e:	4824      	ldr	r0, [pc, #144]	; (800bbe0 <httpPOST+0x410>)
 800bb50:	f7f4 fb50 	bl	80001f4 <strlen>
 800bb54:	4603      	mov	r3, r0
 800bb56:	461a      	mov	r2, r3
 800bb58:	4921      	ldr	r1, [pc, #132]	; (800bbe0 <httpPOST+0x410>)
 800bb5a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb5e:	f003 fcc4 	bl	800f4ea <strncat>
	strncat(body,_d4,strlen(_d4));
 800bb62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7f4 fb44 	bl	80001f4 <strlen>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bb72:	4619      	mov	r1, r3
 800bb74:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb78:	f003 fcb7 	bl	800f4ea <strncat>

	strncat(body,dd5,strlen(dd5));
 800bb7c:	4819      	ldr	r0, [pc, #100]	; (800bbe4 <httpPOST+0x414>)
 800bb7e:	f7f4 fb39 	bl	80001f4 <strlen>
 800bb82:	4603      	mov	r3, r0
 800bb84:	461a      	mov	r2, r3
 800bb86:	4917      	ldr	r1, [pc, #92]	; (800bbe4 <httpPOST+0x414>)
 800bb88:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb8c:	f003 fcad 	bl	800f4ea <strncat>
	strncat(body,_d5,strlen(_d5));
 800bb90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7f4 fb2d 	bl	80001f4 <strlen>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bba0:	4619      	mov	r1, r3
 800bba2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bba6:	f003 fca0 	bl	800f4ea <strncat>

	strncat(body,dd6,strlen(dd6));
 800bbaa:	480f      	ldr	r0, [pc, #60]	; (800bbe8 <httpPOST+0x418>)
 800bbac:	f7f4 fb22 	bl	80001f4 <strlen>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	e01a      	b.n	800bbec <httpPOST+0x41c>
 800bbb6:	bf00      	nop
 800bbb8:	08010b48 	.word	0x08010b48
 800bbbc:	08010b50 	.word	0x08010b50
 800bbc0:	08010b5c 	.word	0x08010b5c
 800bbc4:	08010b60 	.word	0x08010b60
 800bbc8:	08010b68 	.word	0x08010b68
 800bbcc:	08010b6c 	.word	0x08010b6c
 800bbd0:	08010b8c 	.word	0x08010b8c
 800bbd4:	20000090 	.word	0x20000090
 800bbd8:	20000098 	.word	0x20000098
 800bbdc:	200000a0 	.word	0x200000a0
 800bbe0:	200000a8 	.word	0x200000a8
 800bbe4:	200000b0 	.word	0x200000b0
 800bbe8:	200000b8 	.word	0x200000b8
 800bbec:	49af      	ldr	r1, [pc, #700]	; (800beac <httpPOST+0x6dc>)
 800bbee:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbf2:	f003 fc7a 	bl	800f4ea <strncat>
	strncat(body,_d6,strlen(_d6));
 800bbf6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7f4 fafa 	bl	80001f4 <strlen>
 800bc00:	4602      	mov	r2, r0
 800bc02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bc06:	4619      	mov	r1, r3
 800bc08:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc0c:	f003 fc6d 	bl	800f4ea <strncat>

	strncat(body,dd7,strlen(dd7));
 800bc10:	48a7      	ldr	r0, [pc, #668]	; (800beb0 <httpPOST+0x6e0>)
 800bc12:	f7f4 faef 	bl	80001f4 <strlen>
 800bc16:	4603      	mov	r3, r0
 800bc18:	461a      	mov	r2, r3
 800bc1a:	49a5      	ldr	r1, [pc, #660]	; (800beb0 <httpPOST+0x6e0>)
 800bc1c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc20:	f003 fc63 	bl	800f4ea <strncat>
	strncat(body,_d7,strlen(_d7));
 800bc24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7f4 fae3 	bl	80001f4 <strlen>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bc34:	4619      	mov	r1, r3
 800bc36:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc3a:	f003 fc56 	bl	800f4ea <strncat>

	strncat(body,dd8,strlen(dd8));
 800bc3e:	489d      	ldr	r0, [pc, #628]	; (800beb4 <httpPOST+0x6e4>)
 800bc40:	f7f4 fad8 	bl	80001f4 <strlen>
 800bc44:	4603      	mov	r3, r0
 800bc46:	461a      	mov	r2, r3
 800bc48:	499a      	ldr	r1, [pc, #616]	; (800beb4 <httpPOST+0x6e4>)
 800bc4a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc4e:	f003 fc4c 	bl	800f4ea <strncat>
	strncat(body,_d8,strlen(_d8));
 800bc52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7f4 facc 	bl	80001f4 <strlen>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bc62:	4619      	mov	r1, r3
 800bc64:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc68:	f003 fc3f 	bl	800f4ea <strncat>

	strncat(body,dd9,strlen(dd9));
 800bc6c:	4892      	ldr	r0, [pc, #584]	; (800beb8 <httpPOST+0x6e8>)
 800bc6e:	f7f4 fac1 	bl	80001f4 <strlen>
 800bc72:	4603      	mov	r3, r0
 800bc74:	461a      	mov	r2, r3
 800bc76:	4990      	ldr	r1, [pc, #576]	; (800beb8 <httpPOST+0x6e8>)
 800bc78:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc7c:	f003 fc35 	bl	800f4ea <strncat>
	strncat(body,_d9,strlen(_d9));
 800bc80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7f4 fab5 	bl	80001f4 <strlen>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc90:	4619      	mov	r1, r3
 800bc92:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc96:	f003 fc28 	bl	800f4ea <strncat>

	strncat(body,dd10,strlen(dd10));
 800bc9a:	4888      	ldr	r0, [pc, #544]	; (800bebc <httpPOST+0x6ec>)
 800bc9c:	f7f4 faaa 	bl	80001f4 <strlen>
 800bca0:	4603      	mov	r3, r0
 800bca2:	461a      	mov	r2, r3
 800bca4:	4985      	ldr	r1, [pc, #532]	; (800bebc <httpPOST+0x6ec>)
 800bca6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcaa:	f003 fc1e 	bl	800f4ea <strncat>
	strncat(body,_d10,strlen(_d10));
 800bcae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7f4 fa9e 	bl	80001f4 <strlen>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcc4:	f003 fc11 	bl	800f4ea <strncat>

	strncat(body,dd11,strlen(dd11));
 800bcc8:	487d      	ldr	r0, [pc, #500]	; (800bec0 <httpPOST+0x6f0>)
 800bcca:	f7f4 fa93 	bl	80001f4 <strlen>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	497b      	ldr	r1, [pc, #492]	; (800bec0 <httpPOST+0x6f0>)
 800bcd4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcd8:	f003 fc07 	bl	800f4ea <strncat>
	strncat(body,_d11,strlen(_d11));
 800bcdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7f4 fa87 	bl	80001f4 <strlen>
 800bce6:	4602      	mov	r2, r0
 800bce8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bcec:	4619      	mov	r1, r3
 800bcee:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcf2:	f003 fbfa 	bl	800f4ea <strncat>

	strncat(body,dd12,strlen(dd12));
 800bcf6:	4873      	ldr	r0, [pc, #460]	; (800bec4 <httpPOST+0x6f4>)
 800bcf8:	f7f4 fa7c 	bl	80001f4 <strlen>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	461a      	mov	r2, r3
 800bd00:	4970      	ldr	r1, [pc, #448]	; (800bec4 <httpPOST+0x6f4>)
 800bd02:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd06:	f003 fbf0 	bl	800f4ea <strncat>
	strncat(body,_d12,strlen(_d12));
 800bd0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7f4 fa70 	bl	80001f4 <strlen>
 800bd14:	4602      	mov	r2, r0
 800bd16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd20:	f003 fbe3 	bl	800f4ea <strncat>

	strncat(body,dd13,strlen(dd13));
 800bd24:	4868      	ldr	r0, [pc, #416]	; (800bec8 <httpPOST+0x6f8>)
 800bd26:	f7f4 fa65 	bl	80001f4 <strlen>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4966      	ldr	r1, [pc, #408]	; (800bec8 <httpPOST+0x6f8>)
 800bd30:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd34:	f003 fbd9 	bl	800f4ea <strncat>
	strncat(body,_d13,strlen(_d13));
 800bd38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7f4 fa59 	bl	80001f4 <strlen>
 800bd42:	4602      	mov	r2, r0
 800bd44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd4e:	f003 fbcc 	bl	800f4ea <strncat>

	strncat(body,dd14,strlen(dd14));
 800bd52:	485e      	ldr	r0, [pc, #376]	; (800becc <httpPOST+0x6fc>)
 800bd54:	f7f4 fa4e 	bl	80001f4 <strlen>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	495b      	ldr	r1, [pc, #364]	; (800becc <httpPOST+0x6fc>)
 800bd5e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd62:	f003 fbc2 	bl	800f4ea <strncat>
	strncat(body,_d14,strlen(_d14));
 800bd66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7f4 fa42 	bl	80001f4 <strlen>
 800bd70:	4602      	mov	r2, r0
 800bd72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd76:	4619      	mov	r1, r3
 800bd78:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd7c:	f003 fbb5 	bl	800f4ea <strncat>

	strncat(body,dd15,strlen(dd15));
 800bd80:	4853      	ldr	r0, [pc, #332]	; (800bed0 <httpPOST+0x700>)
 800bd82:	f7f4 fa37 	bl	80001f4 <strlen>
 800bd86:	4603      	mov	r3, r0
 800bd88:	461a      	mov	r2, r3
 800bd8a:	4951      	ldr	r1, [pc, #324]	; (800bed0 <httpPOST+0x700>)
 800bd8c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd90:	f003 fbab 	bl	800f4ea <strncat>
	strncat(body,_d15,strlen(_d15));
 800bd94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7f4 fa2b 	bl	80001f4 <strlen>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bda4:	4619      	mov	r1, r3
 800bda6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdaa:	f003 fb9e 	bl	800f4ea <strncat>

	strncat(body,dd16,strlen(dd16));
 800bdae:	4849      	ldr	r0, [pc, #292]	; (800bed4 <httpPOST+0x704>)
 800bdb0:	f7f4 fa20 	bl	80001f4 <strlen>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	4946      	ldr	r1, [pc, #280]	; (800bed4 <httpPOST+0x704>)
 800bdba:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdbe:	f003 fb94 	bl	800f4ea <strncat>
	strncat(body,_d16,strlen(_d16));
 800bdc2:	f107 0320 	add.w	r3, r7, #32
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7f4 fa14 	bl	80001f4 <strlen>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	f107 0320 	add.w	r3, r7, #32
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdd8:	f003 fb87 	bl	800f4ea <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800bddc:	483e      	ldr	r0, [pc, #248]	; (800bed8 <httpPOST+0x708>)
 800bdde:	f7f4 fa09 	bl	80001f4 <strlen>
 800bde2:	4603      	mov	r3, r0
 800bde4:	461a      	mov	r2, r3
 800bde6:	493c      	ldr	r1, [pc, #240]	; (800bed8 <httpPOST+0x708>)
 800bde8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdec:	f003 fb7d 	bl	800f4ea <strncat>
	strncat(body,_devId,strlen(_devId));
 800bdf0:	f107 0318 	add.w	r3, r7, #24
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7f4 f9fd 	bl	80001f4 <strlen>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	f107 0318 	add.w	r3, r7, #24
 800be00:	4619      	mov	r1, r3
 800be02:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be06:	f003 fb70 	bl	800f4ea <strncat>

	strncat(body,"}",strlen("}"));
 800be0a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be0e:	f7f4 f9f1 	bl	80001f4 <strlen>
 800be12:	4603      	mov	r3, r0
 800be14:	461a      	mov	r2, r3
 800be16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be1a:	4413      	add	r3, r2
 800be1c:	492f      	ldr	r1, [pc, #188]	; (800bedc <httpPOST+0x70c>)
 800be1e:	461a      	mov	r2, r3
 800be20:	460b      	mov	r3, r1
 800be22:	881b      	ldrh	r3, [r3, #0]
 800be24:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800be26:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be2a:	f7f4 f9e3 	bl	80001f4 <strlen>
 800be2e:	4602      	mov	r2, r0
 800be30:	f107 0310 	add.w	r3, r7, #16
 800be34:	4619      	mov	r1, r3
 800be36:	4610      	mov	r0, r2
 800be38:	f003 f8d0 	bl	800efdc <INTOA>
	strncat(post,length,strlen(length));
 800be3c:	f107 0310 	add.w	r3, r7, #16
 800be40:	4618      	mov	r0, r3
 800be42:	f7f4 f9d7 	bl	80001f4 <strlen>
 800be46:	4602      	mov	r2, r0
 800be48:	f107 0310 	add.w	r3, r7, #16
 800be4c:	4619      	mov	r1, r3
 800be4e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800be52:	f003 fb4a 	bl	800f4ea <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800be56:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800be5a:	f7f4 f9cb 	bl	80001f4 <strlen>
 800be5e:	4603      	mov	r3, r0
 800be60:	461a      	mov	r2, r3
 800be62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be66:	4413      	add	r3, r2
 800be68:	4a1d      	ldr	r2, [pc, #116]	; (800bee0 <httpPOST+0x710>)
 800be6a:	6810      	ldr	r0, [r2, #0]
 800be6c:	6018      	str	r0, [r3, #0]
 800be6e:	7912      	ldrb	r2, [r2, #4]
 800be70:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800be72:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be76:	f7f4 f9bd 	bl	80001f4 <strlen>
 800be7a:	4602      	mov	r2, r0
 800be7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800be80:	429a      	cmp	r2, r3
 800be82:	d20d      	bcs.n	800bea0 <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800be84:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be88:	f7f4 f9b4 	bl	80001f4 <strlen>
 800be8c:	4603      	mov	r3, r0
 800be8e:	461a      	mov	r2, r3
 800be90:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800be94:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800be98:	f003 fb27 	bl	800f4ea <strncat>
		return 1 ;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e000      	b.n	800bea2 <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800bea0:	2300      	movs	r3, #0
		}
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	37a0      	adds	r7, #160	; 0xa0
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bdb0      	pop	{r4, r5, r7, pc}
 800beaa:	bf00      	nop
 800beac:	200000b8 	.word	0x200000b8
 800beb0:	200000c0 	.word	0x200000c0
 800beb4:	200000c8 	.word	0x200000c8
 800beb8:	200000d0 	.word	0x200000d0
 800bebc:	200000d8 	.word	0x200000d8
 800bec0:	200000e0 	.word	0x200000e0
 800bec4:	200000e8 	.word	0x200000e8
 800bec8:	200000f0 	.word	0x200000f0
 800becc:	200000f8 	.word	0x200000f8
 800bed0:	20000100 	.word	0x20000100
 800bed4:	20000108 	.word	0x20000108
 800bed8:	20000110 	.word	0x20000110
 800bedc:	08010b9c 	.word	0x08010b9c
 800bee0:	08010ba0 	.word	0x08010ba0

0800bee4 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800bee4:	b5b0      	push	{r4, r5, r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bef4:	2bf1      	cmp	r3, #241	; 0xf1
 800bef6:	dd01      	ble.n	800befc <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800bef8:	2301      	movs	r3, #1
 800befa:	e099      	b.n	800c030 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800befc:	2300      	movs	r3, #0
 800befe:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bf06:	f107 0108 	add.w	r1, r7, #8
 800bf0a:	220a      	movs	r2, #10
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f003 f900 	bl	800f112 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bf20:	4620      	mov	r0, r4
 800bf22:	f7f4 f967 	bl	80001f4 <strlen>
 800bf26:	4603      	mov	r3, r0
 800bf28:	4423      	add	r3, r4
 800bf2a:	4943      	ldr	r1, [pc, #268]	; (800c038 <LoRa_Send+0x154>)
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	460b      	mov	r3, r1
 800bf30:	cb03      	ldmia	r3!, {r0, r1}
 800bf32:	6010      	str	r0, [r2, #0]
 800bf34:	6051      	str	r1, [r2, #4]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f103 0516 	add.w	r5, r3, #22
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	3316      	adds	r3, #22
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7f4 f952 	bl	80001f4 <strlen>
 800bf50:	4603      	mov	r3, r0
 800bf52:	461a      	mov	r2, r3
 800bf54:	4629      	mov	r1, r5
 800bf56:	4620      	mov	r0, r4
 800bf58:	f003 fac7 	bl	800f4ea <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bf62:	4620      	mov	r0, r4
 800bf64:	f7f4 f946 	bl	80001f4 <strlen>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	4423      	add	r3, r4
 800bf6c:	4933      	ldr	r1, [pc, #204]	; (800c03c <LoRa_Send+0x158>)
 800bf6e:	461a      	mov	r2, r3
 800bf70:	460b      	mov	r3, r1
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bf7c:	f107 0308 	add.w	r3, r7, #8
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7f4 f937 	bl	80001f4 <strlen>
 800bf86:	4602      	mov	r2, r0
 800bf88:	f107 0308 	add.w	r3, r7, #8
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f003 faab 	bl	800f4ea <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f7f4 f92a 	bl	80001f4 <strlen>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	4423      	add	r3, r4
 800bfa4:	4925      	ldr	r1, [pc, #148]	; (800c03c <LoRa_Send+0x158>)
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7f4 f91d 	bl	80001f4 <strlen>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bfc4:	697a      	ldr	r2, [r7, #20]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bfce:	e012      	b.n	800bff6 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800bfda:	7819      	ldrb	r1, [r3, #0]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bfe6:	460a      	mov	r2, r1
 800bfe8:	701a      	strb	r2, [r3, #0]
			la++;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	3301      	adds	r3, #1
 800bfee:	617b      	str	r3, [r7, #20]
			lc++;
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	3301      	adds	r3, #1
 800bff4:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	dbe8      	blt.n	800bfd0 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	617a      	str	r2, [r7, #20]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	4413      	add	r3, r2
 800c008:	220d      	movs	r2, #13
 800c00a:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	617a      	str	r2, [r7, #20]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	4413      	add	r3, r2
 800c018:	220a      	movs	r2, #10
 800c01a:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	b292      	uxth	r2, r2
 800c028:	4619      	mov	r1, r3
 800c02a:	6838      	ldr	r0, [r7, #0]
 800c02c:	f7f9 fb38 	bl	80056a0 <HAL_UART_Transmit_IT>
	}

}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bdb0      	pop	{r4, r5, r7, pc}
 800c038:	08010ba8 	.word	0x08010ba8
 800c03c:	08010bb4 	.word	0x08010bb4

0800c040 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800c06a:	bf00      	nop
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
	...

0800c078 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fa25 	bl	800c4d0 <Lora_idSTR>
 800c086:	4603      	mov	r3, r0
 800c088:	2b10      	cmp	r3, #16
 800c08a:	f200 820c 	bhi.w	800c4a6 <LoRa_decode+0x42e>
 800c08e:	a201      	add	r2, pc, #4	; (adr r2, 800c094 <LoRa_decode+0x1c>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0d9 	.word	0x0800c0d9
 800c098:	0800c1b1 	.word	0x0800c1b1
 800c09c:	0800c3e5 	.word	0x0800c3e5
 800c0a0:	0800c3ef 	.word	0x0800c3ef
 800c0a4:	0800c3f9 	.word	0x0800c3f9
 800c0a8:	0800c403 	.word	0x0800c403
 800c0ac:	0800c40d 	.word	0x0800c40d
 800c0b0:	0800c417 	.word	0x0800c417
 800c0b4:	0800c421 	.word	0x0800c421
 800c0b8:	0800c42b 	.word	0x0800c42b
 800c0bc:	0800c435 	.word	0x0800c435
 800c0c0:	0800c475 	.word	0x0800c475
 800c0c4:	0800c47f 	.word	0x0800c47f
 800c0c8:	0800c493 	.word	0x0800c493
 800c0cc:	0800c489 	.word	0x0800c489
 800c0d0:	0800c3db 	.word	0x0800c3db
 800c0d4:	0800c49d 	.word	0x0800c49d
	{
		case _OK:
		{
			switch(b->estado)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	2b13      	cmp	r3, #19
 800c0e2:	d860      	bhi.n	800c1a6 <LoRa_decode+0x12e>
 800c0e4:	a201      	add	r2, pc, #4	; (adr r2, 800c0ec <LoRa_decode+0x74>)
 800c0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ea:	bf00      	nop
 800c0ec:	0800c13d 	.word	0x0800c13d
 800c0f0:	0800c1a7 	.word	0x0800c1a7
 800c0f4:	0800c1a7 	.word	0x0800c1a7
 800c0f8:	0800c1a7 	.word	0x0800c1a7
 800c0fc:	0800c1a7 	.word	0x0800c1a7
 800c100:	0800c1a7 	.word	0x0800c1a7
 800c104:	0800c147 	.word	0x0800c147
 800c108:	0800c151 	.word	0x0800c151
 800c10c:	0800c1a7 	.word	0x0800c1a7
 800c110:	0800c15b 	.word	0x0800c15b
 800c114:	0800c1a7 	.word	0x0800c1a7
 800c118:	0800c165 	.word	0x0800c165
 800c11c:	0800c1a7 	.word	0x0800c1a7
 800c120:	0800c16f 	.word	0x0800c16f
 800c124:	0800c1a7 	.word	0x0800c1a7
 800c128:	0800c179 	.word	0x0800c179
 800c12c:	0800c1a7 	.word	0x0800c1a7
 800c130:	0800c183 	.word	0x0800c183
 800c134:	0800c1a7 	.word	0x0800c1a7
 800c138:	0800c18d 	.word	0x0800c18d
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c144:	e02f      	b.n	800c1a6 <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2206      	movs	r2, #6
 800c14a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c14e:	e02a      	b.n	800c1a6 <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2209      	movs	r2, #9
 800c154:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c158:	e025      	b.n	800c1a6 <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	220b      	movs	r2, #11
 800c15e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c162:	e020      	b.n	800c1a6 <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	220d      	movs	r2, #13
 800c168:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c16c:	e01b      	b.n	800c1a6 <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	220f      	movs	r2, #15
 800c172:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c176:	e016      	b.n	800c1a6 <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2211      	movs	r2, #17
 800c17c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c180:	e011      	b.n	800c1a6 <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2213      	movs	r2, #19
 800c186:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c18a:	e00c      	b.n	800c1a6 <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2215      	movs	r2, #21
 800c190:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800c19c:	2111      	movs	r1, #17
 800c19e:	48a8      	ldr	r0, [pc, #672]	; (800c440 <LoRa_decode+0x3c8>)
 800c1a0:	f7f5 f9e8 	bl	8001574 <ITM0_Write>
					}
					break;
 800c1a4:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800c1a6:	210c      	movs	r1, #12
 800c1a8:	48a6      	ldr	r0, [pc, #664]	; (800c444 <LoRa_decode+0x3cc>)
 800c1aa:	f7f5 f9e3 	bl	8001574 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800c1ae:	e17f      	b.n	800c4b0 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800c1b0:	210d      	movs	r1, #13
 800c1b2:	48a5      	ldr	r0, [pc, #660]	; (800c448 <LoRa_decode+0x3d0>)
 800c1b4:	f7f5 f9de 	bl	8001574 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	221a      	movs	r2, #26
 800c1bc:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	617b      	str	r3, [r7, #20]
					int j=0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800c1d4:	e002      	b.n	800c1dc <LoRa_decode+0x164>
					{ i++;}
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	3356      	adds	r3, #86	; 0x56
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	2b3d      	cmp	r3, #61	; 0x3d
 800c1e8:	d1f5      	bne.n	800c1d6 <LoRa_decode+0x15e>
					i++;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c1f0:	e017      	b.n	800c222 <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	3356      	adds	r3, #86	; 0x56
 800c1fa:	7819      	ldrb	r1, [r3, #0]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	4413      	add	r3, r2
 800c202:	3306      	adds	r3, #6
 800c204:	460a      	mov	r2, r1
 800c206:	701a      	strb	r2, [r3, #0]
						i++;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	3301      	adds	r3, #1
 800c20c:	617b      	str	r3, [r7, #20]
						j++;
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	3301      	adds	r3, #1
 800c212:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2b06      	cmp	r3, #6
 800c218:	dd03      	ble.n	800c222 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fbca 	bl	800c9b4 <Lora_rx_del>
							break;
 800c220:	e006      	b.n	800c230 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	4413      	add	r3, r2
 800c228:	3356      	adds	r3, #86	; 0x56
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b2c      	cmp	r3, #44	; 0x2c
 800c22e:	d1e0      	bne.n	800c1f2 <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	4413      	add	r3, r2
 800c236:	3306      	adds	r3, #6
 800c238:	2200      	movs	r2, #0
 800c23a:	701a      	strb	r2, [r3, #0]
					j=0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	613b      	str	r3, [r7, #16]
					i++;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	3301      	adds	r3, #1
 800c244:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c246:	e017      	b.n	800c278 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	4413      	add	r3, r2
 800c24e:	3356      	adds	r3, #86	; 0x56
 800c250:	7819      	ldrb	r1, [r3, #0]
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	4413      	add	r3, r2
 800c258:	330c      	adds	r3, #12
 800c25a:	460a      	mov	r2, r1
 800c25c:	701a      	strb	r2, [r3, #0]
						i++;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	3301      	adds	r3, #1
 800c262:	617b      	str	r3, [r7, #20]
						j++;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	3301      	adds	r3, #1
 800c268:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2b04      	cmp	r3, #4
 800c26e:	dd03      	ble.n	800c278 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fb9f 	bl	800c9b4 <Lora_rx_del>
							break;
 800c276:	e006      	b.n	800c286 <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	4413      	add	r3, r2
 800c27e:	3356      	adds	r3, #86	; 0x56
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b2c      	cmp	r3, #44	; 0x2c
 800c284:	d1e0      	bne.n	800c248 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	4413      	add	r3, r2
 800c28c:	330c      	adds	r3, #12
 800c28e:	2200      	movs	r2, #0
 800c290:	701a      	strb	r2, [r3, #0]
					j=0;
 800c292:	2300      	movs	r3, #0
 800c294:	613b      	str	r3, [r7, #16]
					i++;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	3301      	adds	r3, #1
 800c29a:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	330c      	adds	r3, #12
 800c2a0:	210a      	movs	r1, #10
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f002 ff19 	bl	800f0da <atoi>
 800c2a8:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800c2aa:	e019      	b.n	800c2e0 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	3356      	adds	r3, #86	; 0x56
 800c2b4:	7819      	ldrb	r1, [r3, #0]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c2c0:	460a      	mov	r2, r1
 800c2c2:	701a      	strb	r2, [r3, #0]
						j++;
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	613b      	str	r3, [r7, #16]
						i++;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	dd03      	ble.n	800c2e0 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fb6b 	bl	800c9b4 <Lora_rx_del>
							break;
 800c2de:	e006      	b.n	800c2ee <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	3356      	adds	r3, #86	; 0x56
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	2b2c      	cmp	r3, #44	; 0x2c
 800c2ec:	d1de      	bne.n	800c2ac <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	613b      	str	r3, [r7, #16]
					i++;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c300:	e017      	b.n	800c332 <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	4413      	add	r3, r2
 800c308:	3356      	adds	r3, #86	; 0x56
 800c30a:	7819      	ldrb	r1, [r3, #0]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	4413      	add	r3, r2
 800c312:	3310      	adds	r3, #16
 800c314:	460a      	mov	r2, r1
 800c316:	701a      	strb	r2, [r3, #0]
						i++;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	3301      	adds	r3, #1
 800c31c:	617b      	str	r3, [r7, #20]
						j++;
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	3301      	adds	r3, #1
 800c322:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	2b05      	cmp	r3, #5
 800c328:	dd03      	ble.n	800c332 <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fb42 	bl	800c9b4 <Lora_rx_del>
							break;
 800c330:	e006      	b.n	800c340 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	4413      	add	r3, r2
 800c338:	3356      	adds	r3, #86	; 0x56
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2b2c      	cmp	r3, #44	; 0x2c
 800c33e:	d1e0      	bne.n	800c302 <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3310      	adds	r3, #16
 800c344:	210a      	movs	r1, #10
 800c346:	4618      	mov	r0, r3
 800c348:	f002 fec7 	bl	800f0da <atoi>
 800c34c:	4602      	mov	r2, r0
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	4413      	add	r3, r2
 800c35a:	3310      	adds	r3, #16
 800c35c:	2200      	movs	r2, #0
 800c35e:	701a      	strb	r2, [r3, #0]
					j=0;
 800c360:	2300      	movs	r3, #0
 800c362:	613b      	str	r3, [r7, #16]
					i++;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	3301      	adds	r3, #1
 800c368:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800c36a:	e017      	b.n	800c39c <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	4413      	add	r3, r2
 800c372:	3356      	adds	r3, #86	; 0x56
 800c374:	7819      	ldrb	r1, [r3, #0]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	4413      	add	r3, r2
 800c37c:	3310      	adds	r3, #16
 800c37e:	460a      	mov	r2, r1
 800c380:	701a      	strb	r2, [r3, #0]
						i++;
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	3301      	adds	r3, #1
 800c386:	617b      	str	r3, [r7, #20]
						j++;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	3301      	adds	r3, #1
 800c38c:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	2b05      	cmp	r3, #5
 800c392:	dd03      	ble.n	800c39c <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fb0d 	bl	800c9b4 <Lora_rx_del>
							break;
 800c39a:	e006      	b.n	800c3aa <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	3356      	adds	r3, #86	; 0x56
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	2b0d      	cmp	r3, #13
 800c3a8:	d1e0      	bne.n	800c36c <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	3310      	adds	r3, #16
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	3310      	adds	r3, #16
 800c3ba:	210a      	movs	r1, #10
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f002 fe8c 	bl	800f0da <atoi>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800c3d8:	e06a      	b.n	800c4b0 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800c3da:	210d      	movs	r1, #13
 800c3dc:	481b      	ldr	r0, [pc, #108]	; (800c44c <LoRa_decode+0x3d4>)
 800c3de:	f7f5 f8c9 	bl	8001574 <ITM0_Write>
			break;
 800c3e2:	e065      	b.n	800c4b0 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800c3e4:	210f      	movs	r1, #15
 800c3e6:	481a      	ldr	r0, [pc, #104]	; (800c450 <LoRa_decode+0x3d8>)
 800c3e8:	f7f5 f8c4 	bl	8001574 <ITM0_Write>
			break;
 800c3ec:	e060      	b.n	800c4b0 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800c3ee:	210f      	movs	r1, #15
 800c3f0:	4818      	ldr	r0, [pc, #96]	; (800c454 <LoRa_decode+0x3dc>)
 800c3f2:	f7f5 f8bf 	bl	8001574 <ITM0_Write>
			break;
 800c3f6:	e05b      	b.n	800c4b0 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800c3f8:	210e      	movs	r1, #14
 800c3fa:	4817      	ldr	r0, [pc, #92]	; (800c458 <LoRa_decode+0x3e0>)
 800c3fc:	f7f5 f8ba 	bl	8001574 <ITM0_Write>
			break;
 800c400:	e056      	b.n	800c4b0 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800c402:	210d      	movs	r1, #13
 800c404:	4815      	ldr	r0, [pc, #84]	; (800c45c <LoRa_decode+0x3e4>)
 800c406:	f7f5 f8b5 	bl	8001574 <ITM0_Write>
			break;
 800c40a:	e051      	b.n	800c4b0 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800c40c:	2113      	movs	r1, #19
 800c40e:	4814      	ldr	r0, [pc, #80]	; (800c460 <LoRa_decode+0x3e8>)
 800c410:	f7f5 f8b0 	bl	8001574 <ITM0_Write>
			break;
 800c414:	e04c      	b.n	800c4b0 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800c416:	210e      	movs	r1, #14
 800c418:	4812      	ldr	r0, [pc, #72]	; (800c464 <LoRa_decode+0x3ec>)
 800c41a:	f7f5 f8ab 	bl	8001574 <ITM0_Write>
			break;
 800c41e:	e047      	b.n	800c4b0 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800c420:	2111      	movs	r1, #17
 800c422:	4811      	ldr	r0, [pc, #68]	; (800c468 <LoRa_decode+0x3f0>)
 800c424:	f7f5 f8a6 	bl	8001574 <ITM0_Write>
			break;
 800c428:	e042      	b.n	800c4b0 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800c42a:	2111      	movs	r1, #17
 800c42c:	480f      	ldr	r0, [pc, #60]	; (800c46c <LoRa_decode+0x3f4>)
 800c42e:	f7f5 f8a1 	bl	8001574 <ITM0_Write>
			break;
 800c432:	e03d      	b.n	800c4b0 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800c434:	210e      	movs	r1, #14
 800c436:	480e      	ldr	r0, [pc, #56]	; (800c470 <LoRa_decode+0x3f8>)
 800c438:	f7f5 f89c 	bl	8001574 <ITM0_Write>
			break;
 800c43c:	e038      	b.n	800c4b0 <LoRa_decode+0x438>
 800c43e:	bf00      	nop
 800c440:	08010be4 	.word	0x08010be4
 800c444:	08010bf8 	.word	0x08010bf8
 800c448:	08010c08 	.word	0x08010c08
 800c44c:	08010c18 	.word	0x08010c18
 800c450:	08010c28 	.word	0x08010c28
 800c454:	08010c38 	.word	0x08010c38
 800c458:	08010c48 	.word	0x08010c48
 800c45c:	08010c58 	.word	0x08010c58
 800c460:	08010c68 	.word	0x08010c68
 800c464:	08010c7c 	.word	0x08010c7c
 800c468:	08010c8c 	.word	0x08010c8c
 800c46c:	08010ca0 	.word	0x08010ca0
 800c470:	08010cb4 	.word	0x08010cb4
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800c474:	210f      	movs	r1, #15
 800c476:	4810      	ldr	r0, [pc, #64]	; (800c4b8 <LoRa_decode+0x440>)
 800c478:	f7f5 f87c 	bl	8001574 <ITM0_Write>
			break;
 800c47c:	e018      	b.n	800c4b0 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800c47e:	210e      	movs	r1, #14
 800c480:	480e      	ldr	r0, [pc, #56]	; (800c4bc <LoRa_decode+0x444>)
 800c482:	f7f5 f877 	bl	8001574 <ITM0_Write>
			break;
 800c486:	e013      	b.n	800c4b0 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800c488:	210d      	movs	r1, #13
 800c48a:	480d      	ldr	r0, [pc, #52]	; (800c4c0 <LoRa_decode+0x448>)
 800c48c:	f7f5 f872 	bl	8001574 <ITM0_Write>
			break;
 800c490:	e00e      	b.n	800c4b0 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800c492:	210d      	movs	r1, #13
 800c494:	480b      	ldr	r0, [pc, #44]	; (800c4c4 <LoRa_decode+0x44c>)
 800c496:	f7f5 f86d 	bl	8001574 <ITM0_Write>
			break;
 800c49a:	e009      	b.n	800c4b0 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800c49c:	2114      	movs	r1, #20
 800c49e:	480a      	ldr	r0, [pc, #40]	; (800c4c8 <LoRa_decode+0x450>)
 800c4a0:	f7f5 f868 	bl	8001574 <ITM0_Write>
			break;
 800c4a4:	e004      	b.n	800c4b0 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800c4a6:	2110      	movs	r1, #16
 800c4a8:	4808      	ldr	r0, [pc, #32]	; (800c4cc <LoRa_decode+0x454>)
 800c4aa:	f7f5 f863 	bl	8001574 <ITM0_Write>
			break;
 800c4ae:	bf00      	nop
	}
 }
 800c4b0:	bf00      	nop
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	08010cc4 	.word	0x08010cc4
 800c4bc:	08010cd4 	.word	0x08010cd4
 800c4c0:	08010ce4 	.word	0x08010ce4
 800c4c4:	08010cf4 	.word	0x08010cf4
 800c4c8:	08010d04 	.word	0x08010d04
 800c4cc:	08010d1c 	.word	0x08010d1c

0800c4d0 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b090      	sub	sp, #64	; 0x40
 800c4d4:	af06      	add	r7, sp, #24
 800c4d6:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800c4de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c4e2:	dd01      	ble.n	800c4e8 <Lora_idSTR+0x18>
 800c4e4:	2310      	movs	r3, #16
 800c4e6:	e257      	b.n	800c998 <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800c4ec:	2304      	movs	r3, #4
 800c4ee:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c4fc:	f107 021c 	add.w	r2, r7, #28
 800c500:	2300      	movs	r3, #0
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	f107 0320 	add.w	r3, r7, #32
 800c50e:	9303      	str	r3, [sp, #12]
 800c510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c514:	9302      	str	r3, [sp, #8]
 800c516:	f107 030c 	add.w	r3, r7, #12
 800c51a:	9301      	str	r3, [sp, #4]
 800c51c:	f107 0310 	add.w	r3, r7, #16
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	4613      	mov	r3, r2
 800c524:	4ab7      	ldr	r2, [pc, #732]	; (800c804 <Lora_idSTR+0x334>)
 800c526:	f002 fa11 	bl	800e94c <FT_String_ND>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d101      	bne.n	800c534 <Lora_idSTR+0x64>
 800c530:	2300      	movs	r3, #0
 800c532:	e231      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800c534:	2305      	movs	r3, #5
 800c536:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c544:	f107 021c 	add.w	r2, r7, #28
 800c548:	2300      	movs	r3, #0
 800c54a:	9305      	str	r3, [sp, #20]
 800c54c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c550:	9304      	str	r3, [sp, #16]
 800c552:	f107 0320 	add.w	r3, r7, #32
 800c556:	9303      	str	r3, [sp, #12]
 800c558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c55c:	9302      	str	r3, [sp, #8]
 800c55e:	f107 030c 	add.w	r3, r7, #12
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	f107 0310 	add.w	r3, r7, #16
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	4613      	mov	r3, r2
 800c56c:	4aa6      	ldr	r2, [pc, #664]	; (800c808 <Lora_idSTR+0x338>)
 800c56e:	f002 f9ed 	bl	800e94c <FT_String_ND>
 800c572:	4603      	mov	r3, r0
 800c574:	2b01      	cmp	r3, #1
 800c576:	d101      	bne.n	800c57c <Lora_idSTR+0xac>
 800c578:	2301      	movs	r3, #1
 800c57a:	e20d      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800c57c:	2305      	movs	r3, #5
 800c57e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c58c:	f107 021c 	add.w	r2, r7, #28
 800c590:	2300      	movs	r3, #0
 800c592:	9305      	str	r3, [sp, #20]
 800c594:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c598:	9304      	str	r3, [sp, #16]
 800c59a:	f107 0320 	add.w	r3, r7, #32
 800c59e:	9303      	str	r3, [sp, #12]
 800c5a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5a4:	9302      	str	r3, [sp, #8]
 800c5a6:	f107 030c 	add.w	r3, r7, #12
 800c5aa:	9301      	str	r3, [sp, #4]
 800c5ac:	f107 0310 	add.w	r3, r7, #16
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	4a95      	ldr	r2, [pc, #596]	; (800c80c <Lora_idSTR+0x33c>)
 800c5b6:	f002 f9c9 	bl	800e94c <FT_String_ND>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d101      	bne.n	800c5c4 <Lora_idSTR+0xf4>
 800c5c0:	230f      	movs	r3, #15
 800c5c2:	e1e9      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800c5c4:	2306      	movs	r3, #6
 800c5c6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5d4:	f107 021c 	add.w	r2, r7, #28
 800c5d8:	2300      	movs	r3, #0
 800c5da:	9305      	str	r3, [sp, #20]
 800c5dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5e0:	9304      	str	r3, [sp, #16]
 800c5e2:	f107 0320 	add.w	r3, r7, #32
 800c5e6:	9303      	str	r3, [sp, #12]
 800c5e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5ec:	9302      	str	r3, [sp, #8]
 800c5ee:	f107 030c 	add.w	r3, r7, #12
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	f107 0310 	add.w	r3, r7, #16
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	4a84      	ldr	r2, [pc, #528]	; (800c810 <Lora_idSTR+0x340>)
 800c5fe:	f002 f9a5 	bl	800e94c <FT_String_ND>
 800c602:	4603      	mov	r3, r0
 800c604:	2b01      	cmp	r3, #1
 800c606:	d101      	bne.n	800c60c <Lora_idSTR+0x13c>
 800c608:	2302      	movs	r3, #2
 800c60a:	e1c5      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800c60c:	2306      	movs	r3, #6
 800c60e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c61c:	f107 021c 	add.w	r2, r7, #28
 800c620:	2300      	movs	r3, #0
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c628:	9304      	str	r3, [sp, #16]
 800c62a:	f107 0320 	add.w	r3, r7, #32
 800c62e:	9303      	str	r3, [sp, #12]
 800c630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c634:	9302      	str	r3, [sp, #8]
 800c636:	f107 030c 	add.w	r3, r7, #12
 800c63a:	9301      	str	r3, [sp, #4]
 800c63c:	f107 0310 	add.w	r3, r7, #16
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	4613      	mov	r3, r2
 800c644:	4a73      	ldr	r2, [pc, #460]	; (800c814 <Lora_idSTR+0x344>)
 800c646:	f002 f981 	bl	800e94c <FT_String_ND>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d101      	bne.n	800c654 <Lora_idSTR+0x184>
 800c650:	2303      	movs	r3, #3
 800c652:	e1a1      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800c654:	2306      	movs	r3, #6
 800c656:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c664:	f107 021c 	add.w	r2, r7, #28
 800c668:	2300      	movs	r3, #0
 800c66a:	9305      	str	r3, [sp, #20]
 800c66c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	f107 0320 	add.w	r3, r7, #32
 800c676:	9303      	str	r3, [sp, #12]
 800c678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c67c:	9302      	str	r3, [sp, #8]
 800c67e:	f107 030c 	add.w	r3, r7, #12
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	f107 0310 	add.w	r3, r7, #16
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	4613      	mov	r3, r2
 800c68c:	4a62      	ldr	r2, [pc, #392]	; (800c818 <Lora_idSTR+0x348>)
 800c68e:	f002 f95d 	bl	800e94c <FT_String_ND>
 800c692:	4603      	mov	r3, r0
 800c694:	2b01      	cmp	r3, #1
 800c696:	d101      	bne.n	800c69c <Lora_idSTR+0x1cc>
 800c698:	2304      	movs	r3, #4
 800c69a:	e17d      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800c69c:	2305      	movs	r3, #5
 800c69e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c6ac:	f107 021c 	add.w	r2, r7, #28
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	9305      	str	r3, [sp, #20]
 800c6b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6b8:	9304      	str	r3, [sp, #16]
 800c6ba:	f107 0320 	add.w	r3, r7, #32
 800c6be:	9303      	str	r3, [sp, #12]
 800c6c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6c4:	9302      	str	r3, [sp, #8]
 800c6c6:	f107 030c 	add.w	r3, r7, #12
 800c6ca:	9301      	str	r3, [sp, #4]
 800c6cc:	f107 0310 	add.w	r3, r7, #16
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	4a51      	ldr	r2, [pc, #324]	; (800c81c <Lora_idSTR+0x34c>)
 800c6d6:	f002 f939 	bl	800e94c <FT_String_ND>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d101      	bne.n	800c6e4 <Lora_idSTR+0x214>
 800c6e0:	2305      	movs	r3, #5
 800c6e2:	e159      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800c6e4:	230b      	movs	r3, #11
 800c6e6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c6f4:	f107 021c 	add.w	r2, r7, #28
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	9305      	str	r3, [sp, #20]
 800c6fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c700:	9304      	str	r3, [sp, #16]
 800c702:	f107 0320 	add.w	r3, r7, #32
 800c706:	9303      	str	r3, [sp, #12]
 800c708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c70c:	9302      	str	r3, [sp, #8]
 800c70e:	f107 030c 	add.w	r3, r7, #12
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	f107 0310 	add.w	r3, r7, #16
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	4613      	mov	r3, r2
 800c71c:	4a40      	ldr	r2, [pc, #256]	; (800c820 <Lora_idSTR+0x350>)
 800c71e:	f002 f915 	bl	800e94c <FT_String_ND>
 800c722:	4603      	mov	r3, r0
 800c724:	2b01      	cmp	r3, #1
 800c726:	d101      	bne.n	800c72c <Lora_idSTR+0x25c>
 800c728:	2306      	movs	r3, #6
 800c72a:	e135      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800c72c:	2306      	movs	r3, #6
 800c72e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c73c:	f107 021c 	add.w	r2, r7, #28
 800c740:	2300      	movs	r3, #0
 800c742:	9305      	str	r3, [sp, #20]
 800c744:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	f107 0320 	add.w	r3, r7, #32
 800c74e:	9303      	str	r3, [sp, #12]
 800c750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c754:	9302      	str	r3, [sp, #8]
 800c756:	f107 030c 	add.w	r3, r7, #12
 800c75a:	9301      	str	r3, [sp, #4]
 800c75c:	f107 0310 	add.w	r3, r7, #16
 800c760:	9300      	str	r3, [sp, #0]
 800c762:	4613      	mov	r3, r2
 800c764:	4a2f      	ldr	r2, [pc, #188]	; (800c824 <Lora_idSTR+0x354>)
 800c766:	f002 f8f1 	bl	800e94c <FT_String_ND>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d101      	bne.n	800c774 <Lora_idSTR+0x2a4>
 800c770:	2307      	movs	r3, #7
 800c772:	e111      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800c774:	2309      	movs	r3, #9
 800c776:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c784:	f107 021c 	add.w	r2, r7, #28
 800c788:	2300      	movs	r3, #0
 800c78a:	9305      	str	r3, [sp, #20]
 800c78c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	f107 0320 	add.w	r3, r7, #32
 800c796:	9303      	str	r3, [sp, #12]
 800c798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c79c:	9302      	str	r3, [sp, #8]
 800c79e:	f107 030c 	add.w	r3, r7, #12
 800c7a2:	9301      	str	r3, [sp, #4]
 800c7a4:	f107 0310 	add.w	r3, r7, #16
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	4a1e      	ldr	r2, [pc, #120]	; (800c828 <Lora_idSTR+0x358>)
 800c7ae:	f002 f8cd 	bl	800e94c <FT_String_ND>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d101      	bne.n	800c7bc <Lora_idSTR+0x2ec>
 800c7b8:	2308      	movs	r3, #8
 800c7ba:	e0ed      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800c7bc:	2309      	movs	r3, #9
 800c7be:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c7cc:	f107 021c 	add.w	r2, r7, #28
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	9305      	str	r3, [sp, #20]
 800c7d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7d8:	9304      	str	r3, [sp, #16]
 800c7da:	f107 0320 	add.w	r3, r7, #32
 800c7de:	9303      	str	r3, [sp, #12]
 800c7e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7e4:	9302      	str	r3, [sp, #8]
 800c7e6:	f107 030c 	add.w	r3, r7, #12
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	f107 0310 	add.w	r3, r7, #16
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	4a0d      	ldr	r2, [pc, #52]	; (800c82c <Lora_idSTR+0x35c>)
 800c7f6:	f002 f8a9 	bl	800e94c <FT_String_ND>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d117      	bne.n	800c830 <Lora_idSTR+0x360>
 800c800:	2309      	movs	r3, #9
 800c802:	e0c9      	b.n	800c998 <Lora_idSTR+0x4c8>
 800c804:	08010d30 	.word	0x08010d30
 800c808:	08010d38 	.word	0x08010d38
 800c80c:	08010d40 	.word	0x08010d40
 800c810:	08010d48 	.word	0x08010d48
 800c814:	08010d50 	.word	0x08010d50
 800c818:	08010d58 	.word	0x08010d58
 800c81c:	08010d60 	.word	0x08010d60
 800c820:	08010d68 	.word	0x08010d68
 800c824:	08010d74 	.word	0x08010d74
 800c828:	08010d7c 	.word	0x08010d7c
 800c82c:	08010d88 	.word	0x08010d88
		i=strlen("+CPIN=");
 800c830:	2306      	movs	r3, #6
 800c832:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c840:	f107 021c 	add.w	r2, r7, #28
 800c844:	2300      	movs	r3, #0
 800c846:	9305      	str	r3, [sp, #20]
 800c848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c84c:	9304      	str	r3, [sp, #16]
 800c84e:	f107 0320 	add.w	r3, r7, #32
 800c852:	9303      	str	r3, [sp, #12]
 800c854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c858:	9302      	str	r3, [sp, #8]
 800c85a:	f107 030c 	add.w	r3, r7, #12
 800c85e:	9301      	str	r3, [sp, #4]
 800c860:	f107 0310 	add.w	r3, r7, #16
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	4613      	mov	r3, r2
 800c868:	4a4d      	ldr	r2, [pc, #308]	; (800c9a0 <Lora_idSTR+0x4d0>)
 800c86a:	f002 f86f 	bl	800e94c <FT_String_ND>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b01      	cmp	r3, #1
 800c872:	d101      	bne.n	800c878 <Lora_idSTR+0x3a8>
 800c874:	230a      	movs	r3, #10
 800c876:	e08f      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800c878:	2307      	movs	r3, #7
 800c87a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c888:	f107 021c 	add.w	r2, r7, #28
 800c88c:	2300      	movs	r3, #0
 800c88e:	9305      	str	r3, [sp, #20]
 800c890:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c894:	9304      	str	r3, [sp, #16]
 800c896:	f107 0320 	add.w	r3, r7, #32
 800c89a:	9303      	str	r3, [sp, #12]
 800c89c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8a0:	9302      	str	r3, [sp, #8]
 800c8a2:	f107 030c 	add.w	r3, r7, #12
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	f107 0310 	add.w	r3, r7, #16
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	4a3c      	ldr	r2, [pc, #240]	; (800c9a4 <Lora_idSTR+0x4d4>)
 800c8b2:	f002 f84b 	bl	800e94c <FT_String_ND>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d101      	bne.n	800c8c0 <Lora_idSTR+0x3f0>
 800c8bc:	230b      	movs	r3, #11
 800c8be:	e06b      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800c8c0:	2306      	movs	r3, #6
 800c8c2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c8d0:	f107 021c 	add.w	r2, r7, #28
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9305      	str	r3, [sp, #20]
 800c8d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8dc:	9304      	str	r3, [sp, #16]
 800c8de:	f107 0320 	add.w	r3, r7, #32
 800c8e2:	9303      	str	r3, [sp, #12]
 800c8e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8e8:	9302      	str	r3, [sp, #8]
 800c8ea:	f107 030c 	add.w	r3, r7, #12
 800c8ee:	9301      	str	r3, [sp, #4]
 800c8f0:	f107 0310 	add.w	r3, r7, #16
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	4a2b      	ldr	r2, [pc, #172]	; (800c9a8 <Lora_idSTR+0x4d8>)
 800c8fa:	f002 f827 	bl	800e94c <FT_String_ND>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b01      	cmp	r3, #1
 800c902:	d101      	bne.n	800c908 <Lora_idSTR+0x438>
 800c904:	230c      	movs	r3, #12
 800c906:	e047      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800c908:	2305      	movs	r3, #5
 800c90a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c918:	f107 021c 	add.w	r2, r7, #28
 800c91c:	2300      	movs	r3, #0
 800c91e:	9305      	str	r3, [sp, #20]
 800c920:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c924:	9304      	str	r3, [sp, #16]
 800c926:	f107 0320 	add.w	r3, r7, #32
 800c92a:	9303      	str	r3, [sp, #12]
 800c92c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c930:	9302      	str	r3, [sp, #8]
 800c932:	f107 030c 	add.w	r3, r7, #12
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	f107 0310 	add.w	r3, r7, #16
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	4613      	mov	r3, r2
 800c940:	4a1a      	ldr	r2, [pc, #104]	; (800c9ac <Lora_idSTR+0x4dc>)
 800c942:	f002 f803 	bl	800e94c <FT_String_ND>
 800c946:	4603      	mov	r3, r0
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d101      	bne.n	800c950 <Lora_idSTR+0x480>
 800c94c:	230e      	movs	r3, #14
 800c94e:	e023      	b.n	800c998 <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800c950:	2305      	movs	r3, #5
 800c952:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c960:	f107 021c 	add.w	r2, r7, #28
 800c964:	2300      	movs	r3, #0
 800c966:	9305      	str	r3, [sp, #20]
 800c968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	f107 0320 	add.w	r3, r7, #32
 800c972:	9303      	str	r3, [sp, #12]
 800c974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c978:	9302      	str	r3, [sp, #8]
 800c97a:	f107 030c 	add.w	r3, r7, #12
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	f107 0310 	add.w	r3, r7, #16
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	4613      	mov	r3, r2
 800c988:	4a09      	ldr	r2, [pc, #36]	; (800c9b0 <Lora_idSTR+0x4e0>)
 800c98a:	f001 ffdf 	bl	800e94c <FT_String_ND>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b01      	cmp	r3, #1
 800c992:	d101      	bne.n	800c998 <Lora_idSTR+0x4c8>
 800c994:	230d      	movs	r3, #13
 800c996:	e7ff      	b.n	800c998 <Lora_idSTR+0x4c8>
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3728      	adds	r7, #40	; 0x28
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	08010d94 	.word	0x08010d94
 800c9a4:	08010d9c 	.word	0x08010d9c
 800c9a8:	08010da4 	.word	0x08010da4
 800c9ac:	08010dac 	.word	0x08010dac
 800c9b0:	08010db4 	.word	0x08010db4

0800c9b4 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800c9da:	bf00      	nop
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr
	...

0800c9e8 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ca02:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2220      	movs	r2, #32
 800ca0e:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a1c      	ldr	r2, [pc, #112]	; (800ca88 <ModBUS_Config+0xa0>)
 800ca16:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2220      	movs	r2, #32
 800ca24:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a18      	ldr	r2, [pc, #96]	; (800ca8c <ModBUS_Config+0xa4>)
 800ca2c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2201      	movs	r2, #1
 800ca34:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2210      	movs	r2, #16
 800ca3a:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2201      	movs	r2, #1
 800ca42:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2210      	movs	r2, #16
 800ca48:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2220      	movs	r2, #32
 800ca56:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2220      	movs	r2, #32
 800ca6a:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2220      	movs	r2, #32
 800ca78:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr
 800ca88:	f0f0af5a 	.word	0xf0f0af5a
 800ca8c:	a5fa0f0f 	.word	0xa5fa0f0f

0800ca90 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3305      	adds	r3, #5
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	3306      	adds	r3, #6
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d10b      	bne.n	800cac0 <ModBUS_Check+0x30>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	3302      	adds	r3, #2
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	461a      	mov	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	3303      	adds	r3, #3
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	4413      	add	r3, r2
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d101      	bne.n	800cac0 <ModBUS_Check+0x30>
	{
		return(1);
 800cabc:	2301      	movs	r3, #1
 800cabe:	e000      	b.n	800cac2 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800cac0:	2300      	movs	r3, #0
	}
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	7c9b      	ldrb	r3, [r3, #18]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d11d      	bne.n	800cb20 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800caee:	429a      	cmp	r2, r3
 800caf0:	d116      	bne.n	800cb20 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d10f      	bne.n	800cb20 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d108      	bne.n	800cb20 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d101      	bne.n	800cb20 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e000      	b.n	800cb22 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800cb20:	2300      	movs	r3, #0
	}
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b085      	sub	sp, #20
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	460b      	mov	r3, r1
 800cb38:	70fb      	strb	r3, [r7, #3]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800cb48:	78fa      	ldrb	r2, [r7, #3]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d901      	bls.n	800cb52 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e015      	b.n	800cb7e <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800cb52:	78fb      	ldrb	r3, [r7, #3]
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	3301      	adds	r3, #1
 800cb58:	883a      	ldrh	r2, [r7, #0]
 800cb5a:	b2d1      	uxtb	r1, r2
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	4413      	add	r3, r2
 800cb60:	460a      	mov	r2, r1
 800cb62:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=b>>8;
 800cb66:	883b      	ldrh	r3, [r7, #0]
 800cb68:	0a1b      	lsrs	r3, r3, #8
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800cb6e:	78fb      	ldrb	r3, [r7, #3]
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	4413      	add	r3, r2
 800cb76:	7bfa      	ldrb	r2, [r7, #15]
 800cb78:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800cb7c:	2300      	movs	r3, #0
	}
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b085      	sub	sp, #20
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	460b      	mov	r3, r1
 800cb94:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800cba4:	78fa      	ldrb	r2, [r7, #3]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d901      	bls.n	800cbae <ModBUS_F03_Read+0x24>
	{
		return(1);
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e015      	b.n	800cbda <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800cbae:	78fb      	ldrb	r3, [r7, #3]
 800cbb0:	005b      	lsls	r3, r3, #1
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800cbba:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800cbbc:	89fb      	ldrh	r3, [r7, #14]
 800cbbe:	021b      	lsls	r3, r3, #8
 800cbc0:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800cbc2:	78fb      	ldrb	r3, [r7, #3]
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	4413      	add	r3, r2
 800cbcc:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	89fb      	ldrh	r3, [r7, #14]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800cbd8:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3714      	adds	r7, #20
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b083      	sub	sp, #12
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	460b      	mov	r3, r1
 800cbf0:	807b      	strh	r3, [r7, #2]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800cbf6:	887b      	ldrh	r3, [r7, #2]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	bf14      	ite	ne
 800cbfc:	2301      	movne	r3, #1
 800cbfe:	2300      	moveq	r3, #0
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	461a      	mov	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800cc0a:	887b      	ldrh	r3, [r7, #2]
 800cc0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc10:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800cc12:	887b      	ldrh	r3, [r7, #2]
 800cc14:	0a1b      	lsrs	r3, r3, #8
 800cc16:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800cc18:	887b      	ldrh	r3, [r7, #2]
 800cc1a:	f003 030f 	and.w	r3, r3, #15
 800cc1e:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2206      	movs	r2, #6
 800cc4c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	781a      	ldrb	r2, [r3, #0]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2203      	movs	r2, #3
 800cc5e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800cc62:	887b      	ldrh	r3, [r7, #2]
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	787a      	ldrb	r2, [r7, #1]
 800cc78:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	220c      	movs	r2, #12
 800cc80:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800cc84:	bf00      	nop
 800cc86:	4618      	mov	r0, r3
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
	...

0800cc94 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b09c      	sub	sp, #112	; 0x70
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	791b      	ldrb	r3, [r3, #4]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	f041 813f 	bne.w	800df24 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f103 0212 	add.w	r2, r3, #18
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	f7ff feeb 	bl	800ca90 <ModBUS_Check>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f001 812f 	beq.w	800df20 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	7e5b      	ldrb	r3, [r3, #25]
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	2b0f      	cmp	r3, #15
 800ccca:	f201 80f3 	bhi.w	800deb4 <ModBUS+0x1220>
 800ccce:	a201      	add	r2, pc, #4	; (adr r2, 800ccd4 <ModBUS+0x40>)
 800ccd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd4:	0800cd15 	.word	0x0800cd15
 800ccd8:	0800cf55 	.word	0x0800cf55
 800ccdc:	0800d195 	.word	0x0800d195
 800cce0:	0800d3cd 	.word	0x0800d3cd
 800cce4:	0800d605 	.word	0x0800d605
 800cce8:	0800d81b 	.word	0x0800d81b
 800ccec:	0800deb5 	.word	0x0800deb5
 800ccf0:	0800deb5 	.word	0x0800deb5
 800ccf4:	0800deb5 	.word	0x0800deb5
 800ccf8:	0800deb5 	.word	0x0800deb5
 800ccfc:	0800deb5 	.word	0x0800deb5
 800cd00:	0800deb5 	.word	0x0800deb5
 800cd04:	0800deb5 	.word	0x0800deb5
 800cd08:	0800deb5 	.word	0x0800deb5
 800cd0c:	0800d9d7 	.word	0x0800d9d7
 800cd10:	0800dc67 	.word	0x0800dc67

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	7d9a      	ldrb	r2, [r3, #22]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	7d5a      	ldrb	r2, [r3, #21]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	7d1a      	ldrb	r2, [r3, #20]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	7cda      	ldrb	r2, [r3, #19]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	7c9a      	ldrb	r2, [r3, #18]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	7a9b      	ldrb	r3, [r3, #10]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	f040 80e6 	bne.w	800cf20 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	7e9b      	ldrb	r3, [r3, #26]
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800cd66:	021b      	lsls	r3, r3, #8
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800cd76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	7edb      	ldrb	r3, [r3, #27]
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	7f1b      	ldrb	r3, [r3, #28]
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cdaa:	021b      	lsls	r3, r3, #8
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cdba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	7f5b      	ldrb	r3, [r3, #29]
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d87e      	bhi.n	800ceec <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cdfc:	4413      	add	r3, r2
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800ce04:	4293      	cmp	r3, r2
 800ce06:	dc57      	bgt.n	800ceb8 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	613b      	str	r3, [r7, #16]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	2300      	movs	r3, #0
 800ce12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce14:	2300      	movs	r3, #0
 800ce16:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800ce28:	40d3      	lsrs	r3, r2
 800ce2a:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800ce32:	08db      	lsrs	r3, r3, #3
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800ce3e:	f003 0307 	and.w	r3, r3, #7
 800ce42:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d102      	bne.n	800ce50 <ModBUS+0x1bc>
									{
										bytes=div;
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce4e:	e002      	b.n	800ce56 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	3301      	adds	r3, #1
 800ce54:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800ce56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800ce60:	e00e      	b.n	800ce80 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800ce62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce64:	3308      	adds	r3, #8
 800ce66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce68:	b2d1      	uxtb	r1, r2
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	460a      	mov	r2, r1
 800ce70:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800ce74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce76:	0a1b      	lsrs	r3, r3, #8
 800ce78:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800ce7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800ce80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	dced      	bgt.n	800ce62 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800ce9c:	3303      	adds	r3, #3
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ceac:	1d9a      	adds	r2, r3, #6
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ceb4:	f001 b8d4 	b.w	800e060 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2202      	movs	r2, #2
 800cebc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2281      	movs	r2, #129	; 0x81
 800cec4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2203      	movs	r2, #3
 800ced4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cede:	1d9a      	adds	r2, r3, #6
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cee6:	2302      	movs	r3, #2
 800cee8:	f001 b8ba 	b.w	800e060 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2203      	movs	r2, #3
 800cef0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2281      	movs	r2, #129	; 0x81
 800cef8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2203      	movs	r2, #3
 800cf08:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf12:	1d9a      	adds	r2, r3, #6
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	f001 b8a0 	b.w	800e060 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2281      	movs	r2, #129	; 0x81
 800cf2c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2203      	movs	r2, #3
 800cf3c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf46:	1d9a      	adds	r2, r3, #6
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cf4e:	2301      	movs	r3, #1
 800cf50:	f001 b886 	b.w	800e060 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	7d9a      	ldrb	r2, [r3, #22]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	7d5a      	ldrb	r2, [r3, #21]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	7d1a      	ldrb	r2, [r3, #20]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	7cda      	ldrb	r2, [r3, #19]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	7c9a      	ldrb	r2, [r3, #18]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	7adb      	ldrb	r3, [r3, #11]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	f040 80e6 	bne.w	800d160 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7e9b      	ldrb	r3, [r3, #26]
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800cfa6:	021b      	lsls	r3, r3, #8
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800cfb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	7edb      	ldrb	r3, [r3, #27]
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	7f1b      	ldrb	r3, [r3, #28]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800cfea:	021b      	lsls	r3, r3, #8
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800cffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cffe:	b29a      	uxth	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	7f5b      	ldrb	r3, [r3, #29]
 800d010:	b29b      	uxth	r3, r3
 800d012:	4313      	orrs	r3, r2
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800d028:	b29b      	uxth	r3, r3
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d87e      	bhi.n	800d12c <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d034:	461a      	mov	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d03c:	4413      	add	r3, r2
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800d044:	4293      	cmp	r3, r2
 800d046:	dc57      	bgt.n	800d0f8 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800d048:	2300      	movs	r3, #0
 800d04a:	623b      	str	r3, [r7, #32]
 800d04c:	2300      	movs	r3, #0
 800d04e:	61fb      	str	r3, [r7, #28]
 800d050:	2300      	movs	r3, #0
 800d052:	667b      	str	r3, [r7, #100]	; 0x64
 800d054:	2300      	movs	r3, #0
 800d056:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800d058:	2300      	movs	r3, #0
 800d05a:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800d068:	40d3      	lsrs	r3, r2
 800d06a:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d072:	08db      	lsrs	r3, r3, #3
 800d074:	b29b      	uxth	r3, r3
 800d076:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d07e:	f003 0307 	and.w	r3, r3, #7
 800d082:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d102      	bne.n	800d090 <ModBUS+0x3fc>
									{
										bytes=div;
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	667b      	str	r3, [r7, #100]	; 0x64
 800d08e:	e002      	b.n	800d096 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	3301      	adds	r3, #1
 800d094:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800d096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800d0a0:	e00e      	b.n	800d0c0 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800d0a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d0a8:	b2d1      	uxtb	r1, r2
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	460a      	mov	r2, r1
 800d0b0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800d0b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0b6:	0a1b      	lsrs	r3, r3, #8
 800d0b8:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800d0ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800d0c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	dced      	bgt.n	800d0a2 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d0dc:	3303      	adds	r3, #3
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d0ec:	1d9a      	adds	r2, r3, #6
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d0f4:	f000 bfb4 	b.w	800e060 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2282      	movs	r2, #130	; 0x82
 800d104:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2203      	movs	r2, #3
 800d114:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d11e:	1d9a      	adds	r2, r3, #6
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d126:	2302      	movs	r3, #2
 800d128:	f000 bf9a 	b.w	800e060 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2203      	movs	r2, #3
 800d130:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2282      	movs	r2, #130	; 0x82
 800d138:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2203      	movs	r2, #3
 800d148:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d152:	1d9a      	adds	r2, r3, #6
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d15a:	2303      	movs	r3, #3
 800d15c:	f000 bf80 	b.w	800e060 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2282      	movs	r2, #130	; 0x82
 800d16c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2203      	movs	r2, #3
 800d17c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d186:	1d9a      	adds	r2, r3, #6
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d18e:	2301      	movs	r3, #1
 800d190:	f000 bf66 	b.w	800e060 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	7d9a      	ldrb	r2, [r3, #22]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	7d5a      	ldrb	r2, [r3, #21]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	7d1a      	ldrb	r2, [r3, #20]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	7cda      	ldrb	r2, [r3, #19]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	7c9a      	ldrb	r2, [r3, #18]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	7b1b      	ldrb	r3, [r3, #12]
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	f040 80e2 	bne.w	800d398 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	7e9b      	ldrb	r3, [r3, #26]
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d1e6:	021b      	lsls	r3, r3, #8
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d1f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	7edb      	ldrb	r3, [r3, #27]
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	4313      	orrs	r3, r2
 800d210:	b29a      	uxth	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	7f1b      	ldrb	r3, [r3, #28]
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d22a:	021b      	lsls	r3, r3, #8
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d23a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d23e:	b29a      	uxth	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	7f5b      	ldrb	r3, [r3, #29]
 800d250:	b29b      	uxth	r3, r3
 800d252:	4313      	orrs	r3, r2
 800d254:	b29a      	uxth	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800d268:	b29b      	uxth	r3, r3
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d87a      	bhi.n	800d364 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d274:	461a      	mov	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d27c:	4413      	add	r3, r2
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800d284:	4293      	cmp	r3, r2
 800d286:	dc53      	bgt.n	800d330 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d288:	e029      	b.n	800d2de <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d290:	461a      	mov	r2, r3
 800d292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d294:	4413      	add	r3, r2
 800d296:	005a      	lsls	r2, r3, #1
 800d298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	3309      	adds	r3, #9
 800d29e:	6879      	ldr	r1, [r7, #4]
 800d2a0:	440a      	add	r2, r1
 800d2a2:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	460a      	mov	r2, r1
 800d2ac:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2ba:	4413      	add	r3, r2
 800d2bc:	005b      	lsls	r3, r3, #1
 800d2be:	1c5a      	adds	r2, r3, #1
 800d2c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2c2:	3305      	adds	r3, #5
 800d2c4:	005b      	lsls	r3, r3, #1
 800d2c6:	6879      	ldr	r1, [r7, #4]
 800d2c8:	440a      	add	r2, r1
 800d2ca:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	460a      	mov	r2, r1
 800d2d4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d2d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2da:	3301      	adds	r3, #1
 800d2dc:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	dbce      	blt.n	800d28a <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2203      	movs	r2, #3
 800d302:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d314:	3303      	adds	r3, #3
 800d316:	b2da      	uxtb	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d324:	1d9a      	adds	r2, r3, #6
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d32c:	f000 be98 	b.w	800e060 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2202      	movs	r2, #2
 800d334:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2283      	movs	r2, #131	; 0x83
 800d33c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2203      	movs	r2, #3
 800d34c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d356:	1d9a      	adds	r2, r3, #6
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d35e:	2302      	movs	r3, #2
 800d360:	f000 be7e 	b.w	800e060 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2203      	movs	r2, #3
 800d368:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2283      	movs	r2, #131	; 0x83
 800d370:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2203      	movs	r2, #3
 800d380:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d38a:	1d9a      	adds	r2, r3, #6
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d392:	2303      	movs	r3, #3
 800d394:	f000 be64 	b.w	800e060 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2283      	movs	r2, #131	; 0x83
 800d3a4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2203      	movs	r2, #3
 800d3b4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d3be:	1d9a      	adds	r2, r3, #6
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	f000 be4a 	b.w	800e060 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7d9a      	ldrb	r2, [r3, #22]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7d5a      	ldrb	r2, [r3, #21]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	7d1a      	ldrb	r2, [r3, #20]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	7cda      	ldrb	r2, [r3, #19]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7c9a      	ldrb	r2, [r3, #18]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	7b5b      	ldrb	r3, [r3, #13]
 800d406:	2b01      	cmp	r3, #1
 800d408:	f040 80e2 	bne.w	800d5d0 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7e9b      	ldrb	r3, [r3, #26]
 800d410:	b29a      	uxth	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d41e:	021b      	lsls	r3, r3, #8
 800d420:	b29a      	uxth	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d42e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d432:	b29a      	uxth	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	7edb      	ldrb	r3, [r3, #27]
 800d444:	b29b      	uxth	r3, r3
 800d446:	4313      	orrs	r3, r2
 800d448:	b29a      	uxth	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	7f1b      	ldrb	r3, [r3, #28]
 800d454:	b29a      	uxth	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d462:	021b      	lsls	r3, r3, #8
 800d464:	b29a      	uxth	r2, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d476:	b29a      	uxth	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	7f5b      	ldrb	r3, [r3, #29]
 800d488:	b29b      	uxth	r3, r3
 800d48a:	4313      	orrs	r3, r2
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d87a      	bhi.n	800d59c <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d4b4:	4413      	add	r3, r2
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	dc53      	bgt.n	800d568 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d4c0:	e029      	b.n	800d516 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4cc:	4413      	add	r3, r2
 800d4ce:	005a      	lsls	r2, r3, #1
 800d4d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	3309      	adds	r3, #9
 800d4d6:	6879      	ldr	r1, [r7, #4]
 800d4d8:	440a      	add	r2, r1
 800d4da:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	460a      	mov	r2, r1
 800d4e4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4f2:	4413      	add	r3, r2
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	1c5a      	adds	r2, r3, #1
 800d4f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4fa:	3305      	adds	r3, #5
 800d4fc:	005b      	lsls	r3, r3, #1
 800d4fe:	6879      	ldr	r1, [r7, #4]
 800d500:	440a      	add	r2, r1
 800d502:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	4413      	add	r3, r2
 800d50a:	460a      	mov	r2, r1
 800d50c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d512:	3301      	adds	r3, #1
 800d514:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d51c:	461a      	mov	r2, r3
 800d51e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d520:	4293      	cmp	r3, r2
 800d522:	dbce      	blt.n	800d4c2 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2204      	movs	r2, #4
 800d53a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2201      	movs	r2, #1
 800d542:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d54c:	3303      	adds	r3, #3
 800d54e:	b2da      	uxtb	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d55c:	1d9a      	adds	r2, r3, #6
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d564:	f000 bd7c 	b.w	800e060 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2202      	movs	r2, #2
 800d56c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2284      	movs	r2, #132	; 0x84
 800d574:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2203      	movs	r2, #3
 800d584:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d58e:	1d9a      	adds	r2, r3, #6
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d596:	2302      	movs	r3, #2
 800d598:	f000 bd62 	b.w	800e060 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2203      	movs	r2, #3
 800d5a0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2284      	movs	r2, #132	; 0x84
 800d5a8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2203      	movs	r2, #3
 800d5b8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d5c2:	1d9a      	adds	r2, r3, #6
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	f000 bd48 	b.w	800e060 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2284      	movs	r2, #132	; 0x84
 800d5dc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2203      	movs	r2, #3
 800d5ec:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d5f6:	1d9a      	adds	r2, r3, #6
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d5fe:	2301      	movs	r3, #1
 800d600:	f000 bd2e 	b.w	800e060 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	7d9a      	ldrb	r2, [r3, #22]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	7d5a      	ldrb	r2, [r3, #21]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	7d1a      	ldrb	r2, [r3, #20]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	7cda      	ldrb	r2, [r3, #19]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	7c9a      	ldrb	r2, [r3, #18]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800d636:	2300      	movs	r3, #0
 800d638:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	7b9b      	ldrb	r3, [r3, #14]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	f040 80d1 	bne.w	800d7e6 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	7e9b      	ldrb	r3, [r3, #26]
 800d648:	b29a      	uxth	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d656:	021b      	lsls	r3, r3, #8
 800d658:	b29a      	uxth	r2, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d66a:	b29a      	uxth	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7edb      	ldrb	r3, [r3, #27]
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	4313      	orrs	r3, r2
 800d680:	b29a      	uxth	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	7f1b      	ldrb	r3, [r3, #28]
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d69a:	021b      	lsls	r3, r3, #8
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d6aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	7f5b      	ldrb	r3, [r3, #29]
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	dd69      	ble.n	800d7b2 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d005      	beq.n	800d6f4 <ModBUS+0xa60>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d6ee:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d6f2:	d144      	bne.n	800d77e <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d6fa:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d6fe:	d10d      	bne.n	800d71c <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800d70c:	4611      	mov	r1, r2
 800d70e:	2201      	movs	r2, #1
 800d710:	408a      	lsls	r2, r1
 800d712:	431a      	orrs	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800d71a:	e003      	b.n	800d724 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	7f5a      	ldrb	r2, [r3, #29]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	7f1a      	ldrb	r2, [r3, #28]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	7eda      	ldrb	r2, [r3, #27]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	7e9a      	ldrb	r2, [r3, #26]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2205      	movs	r2, #5
 800d750:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d762:	3306      	adds	r3, #6
 800d764:	b2da      	uxtb	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d772:	1d9a      	adds	r2, r3, #6
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d77a:	f000 bc71 	b.w	800e060 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2202      	movs	r2, #2
 800d782:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2285      	movs	r2, #133	; 0x85
 800d78a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2201      	movs	r2, #1
 800d792:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2203      	movs	r2, #3
 800d79a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d7a4:	1d9a      	adds	r2, r3, #6
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	f000 bc57 	b.w	800e060 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2203      	movs	r2, #3
 800d7b6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2285      	movs	r2, #133	; 0x85
 800d7be:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2203      	movs	r2, #3
 800d7ce:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d7d8:	1d9a      	adds	r2, r3, #6
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	f000 bc3d 	b.w	800e060 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2285      	movs	r2, #133	; 0x85
 800d7f2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2203      	movs	r2, #3
 800d802:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d80c:	1d9a      	adds	r2, r3, #6
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800d814:	2301      	movs	r3, #1
 800d816:	f000 bc23 	b.w	800e060 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	7d9a      	ldrb	r2, [r3, #22]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	7d5a      	ldrb	r2, [r3, #21]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	7d1a      	ldrb	r2, [r3, #20]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	7cda      	ldrb	r2, [r3, #19]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	7c9a      	ldrb	r2, [r3, #18]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800d84c:	2300      	movs	r3, #0
 800d84e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d850:	2300      	movs	r3, #0
 800d852:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	7bdb      	ldrb	r3, [r3, #15]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	f040 80a3 	bne.w	800d9a4 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	7e9b      	ldrb	r3, [r3, #26]
 800d862:	b29a      	uxth	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d870:	021b      	lsls	r3, r3, #8
 800d872:	b29a      	uxth	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d880:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d884:	b29a      	uxth	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	7edb      	ldrb	r3, [r3, #27]
 800d896:	b29b      	uxth	r3, r3
 800d898:	4313      	orrs	r3, r2
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d8a8:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	7f1b      	ldrb	r3, [r3, #28]
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d8bc:	021b      	lsls	r3, r3, #8
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d8cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	7f5b      	ldrb	r3, [r3, #29]
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d838      	bhi.n	800d972 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d900:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	7f11      	ldrb	r1, [r2, #28]
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	4413      	add	r3, r2
 800d90a:	460a      	mov	r2, r1
 800d90c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d910:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d912:	3301      	adds	r3, #1
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	7f51      	ldrb	r1, [r2, #29]
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	4413      	add	r3, r2
 800d91c:	460a      	mov	r2, r1
 800d91e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	7f5a      	ldrb	r2, [r3, #29]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7f1a      	ldrb	r2, [r3, #28]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7eda      	ldrb	r2, [r3, #27]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	7e9a      	ldrb	r2, [r3, #26]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2206      	movs	r2, #6
 800d94e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2201      	movs	r2, #1
 800d956:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2206      	movs	r2, #6
 800d95e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d968:	1d9a      	adds	r2, r3, #6
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d970:	e376      	b.n	800e060 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2202      	movs	r2, #2
 800d976:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2286      	movs	r2, #134	; 0x86
 800d97e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2203      	movs	r2, #3
 800d98e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d998:	1d9a      	adds	r2, r3, #6
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	e35d      	b.n	800e060 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2286      	movs	r2, #134	; 0x86
 800d9b0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2203      	movs	r2, #3
 800d9c0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d9ca:	1d9a      	adds	r2, r3, #6
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e344      	b.n	800e060 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	7d9a      	ldrb	r2, [r3, #22]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7d5a      	ldrb	r2, [r3, #21]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	7d1a      	ldrb	r2, [r3, #20]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7cda      	ldrb	r2, [r3, #19]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	7c9a      	ldrb	r2, [r3, #18]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800da08:	2300      	movs	r3, #0
 800da0a:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	7c1b      	ldrb	r3, [r3, #16]
 800da10:	2b01      	cmp	r3, #1
 800da12:	f040 810f 	bne.w	800dc34 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7e9b      	ldrb	r3, [r3, #26]
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800da28:	021b      	lsls	r3, r3, #8
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800da38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	7edb      	ldrb	r3, [r3, #27]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	4313      	orrs	r3, r2
 800da52:	b29a      	uxth	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	7f1b      	ldrb	r3, [r3, #28]
 800da5e:	b29a      	uxth	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800da6c:	021b      	lsls	r3, r3, #8
 800da6e:	b29a      	uxth	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800da7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800da80:	b29a      	uxth	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	7f5b      	ldrb	r3, [r3, #29]
 800da92:	b29b      	uxth	r3, r3
 800da94:	4313      	orrs	r3, r2
 800da96:	b29a      	uxth	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800daaa:	b29b      	uxth	r3, r3
 800daac:	429a      	cmp	r2, r3
 800daae:	f200 80a8 	bhi.w	800dc02 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dab8:	461a      	mov	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800dac0:	4413      	add	r3, r2
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800dac8:	4293      	cmp	r3, r2
 800daca:	f300 8081 	bgt.w	800dbd0 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800dace:	2300      	movs	r3, #0
 800dad0:	657b      	str	r3, [r7, #84]	; 0x54
 800dad2:	2300      	movs	r3, #0
 800dad4:	653b      	str	r3, [r7, #80]	; 0x50
 800dad6:	2300      	movs	r3, #0
 800dad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dada:	2300      	movs	r3, #0
 800dadc:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	7f9b      	ldrb	r3, [r3, #30]
 800dae2:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800dae4:	e00e      	b.n	800db04 <ModBUS+0xe70>
									{
										data=data<<8;
 800dae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dae8:	021b      	lsls	r3, r3, #8
 800daea:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800daec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daee:	330c      	adds	r3, #12
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	4413      	add	r3, r2
 800daf4:	7c9b      	ldrb	r3, [r3, #18]
 800daf6:	461a      	mov	r2, r3
 800daf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dafa:	4313      	orrs	r3, r2
 800dafc:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800dafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db00:	3b01      	subs	r3, #1
 800db02:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800db04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1ed      	bne.n	800dae6 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800db10:	461a      	mov	r2, r3
 800db12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db14:	4093      	lsls	r3, r2
 800db16:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800db18:	e00f      	b.n	800db3a <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800db20:	461a      	mov	r2, r3
 800db22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db24:	4413      	add	r3, r2
 800db26:	2201      	movs	r2, #1
 800db28:	fa02 f303 	lsl.w	r3, r2, r3
 800db2c:	461a      	mov	r2, r3
 800db2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db30:	4313      	orrs	r3, r2
 800db32:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800db34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db36:	3301      	adds	r3, #1
 800db38:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800db40:	461a      	mov	r2, r3
 800db42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db44:	4293      	cmp	r3, r2
 800db46:	d3e8      	bcc.n	800db1a <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800db48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db4a:	43db      	mvns	r3, r3
 800db4c:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800db54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db56:	401a      	ands	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800db5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db60:	43db      	mvns	r3, r3
 800db62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db64:	4013      	ands	r3, r2
 800db66:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800db6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db70:	431a      	orrs	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	7f5a      	ldrb	r2, [r3, #29]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	7f1a      	ldrb	r2, [r3, #28]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	7eda      	ldrb	r2, [r3, #27]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	7e9a      	ldrb	r2, [r3, #26]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	220f      	movs	r2, #15
 800dba4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800dbb6:	3306      	adds	r3, #6
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dbc6:	1d9a      	adds	r2, r3, #6
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800dbce:	e247      	b.n	800e060 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2202      	movs	r2, #2
 800dbd4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	228f      	movs	r2, #143	; 0x8f
 800dbdc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2203      	movs	r2, #3
 800dbec:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dbf6:	1d9a      	adds	r2, r3, #6
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800dbfe:	2302      	movs	r3, #2
 800dc00:	e22e      	b.n	800e060 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2203      	movs	r2, #3
 800dc06:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	228f      	movs	r2, #143	; 0x8f
 800dc0e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2201      	movs	r2, #1
 800dc16:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2203      	movs	r2, #3
 800dc1e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dc28:	1d9a      	adds	r2, r3, #6
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800dc30:	2303      	movs	r3, #3
 800dc32:	e215      	b.n	800e060 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	228f      	movs	r2, #143	; 0x8f
 800dc40:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2203      	movs	r2, #3
 800dc50:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dc5a:	1d9a      	adds	r2, r3, #6
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800dc62:	2301      	movs	r3, #1
 800dc64:	e1fc      	b.n	800e060 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	7d9a      	ldrb	r2, [r3, #22]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	7d5a      	ldrb	r2, [r3, #21]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	7d1a      	ldrb	r2, [r3, #20]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	7cda      	ldrb	r2, [r3, #19]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	7c9a      	ldrb	r2, [r3, #18]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dc9e:	2300      	movs	r3, #0
 800dca0:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	7c5b      	ldrb	r3, [r3, #17]
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	f040 80eb 	bne.w	800de82 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	7e9b      	ldrb	r3, [r3, #26]
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dcbe:	021b      	lsls	r3, r3, #8
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dcce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	7edb      	ldrb	r3, [r3, #27]
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	4313      	orrs	r3, r2
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dcf6:	005b      	lsls	r3, r3, #1
 800dcf8:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	7f1b      	ldrb	r3, [r3, #28]
 800dcfe:	b29a      	uxth	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800dd0c:	021b      	lsls	r3, r3, #8
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800dd1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	7f5b      	ldrb	r3, [r3, #29]
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	4313      	orrs	r3, r2
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d87f      	bhi.n	800de50 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dd56:	461a      	mov	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800dd5e:	4413      	add	r3, r2
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800dd66:	4293      	cmp	r3, r2
 800dd68:	dc59      	bgt.n	800de1e <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800dd6a:	e029      	b.n	800ddc0 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800dd6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd70:	f103 020d 	add.w	r2, r3, #13
 800dd74:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800dd76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd7a:	440b      	add	r3, r1
 800dd7c:	6879      	ldr	r1, [r7, #4]
 800dd7e:	440a      	add	r2, r1
 800dd80:	7c91      	ldrb	r1, [r2, #18]
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	4413      	add	r3, r2
 800dd86:	460a      	mov	r2, r1
 800dd88:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800dd8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd90:	3301      	adds	r3, #1
 800dd92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800dd96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd9a:	f103 020d 	add.w	r2, r3, #13
 800dd9e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800dda0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dda4:	440b      	add	r3, r1
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	440a      	add	r2, r1
 800ddaa:	7c91      	ldrb	r1, [r2, #18]
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	4413      	add	r3, r2
 800ddb0:	460a      	mov	r2, r1
 800ddb2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800ddb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ddba:	3301      	adds	r3, #1
 800ddbc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	7f9b      	ldrb	r3, [r3, #30]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d3ce      	bcc.n	800dd6c <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	7f5a      	ldrb	r2, [r3, #29]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	7f1a      	ldrb	r2, [r3, #28]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	7eda      	ldrb	r2, [r3, #27]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	7e9a      	ldrb	r2, [r3, #26]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2210      	movs	r2, #16
 800ddfa:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2201      	movs	r2, #1
 800de02:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2206      	movs	r2, #6
 800de0a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800de14:	1d9a      	adds	r2, r3, #6
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800de1c:	e120      	b.n	800e060 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2202      	movs	r2, #2
 800de22:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2290      	movs	r2, #144	; 0x90
 800de2a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2201      	movs	r2, #1
 800de32:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2203      	movs	r2, #3
 800de3a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800de44:	1d9a      	adds	r2, r3, #6
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800de4c:	2302      	movs	r3, #2
 800de4e:	e107      	b.n	800e060 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2203      	movs	r2, #3
 800de54:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2290      	movs	r2, #144	; 0x90
 800de5c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2203      	movs	r2, #3
 800de6c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800de76:	1d9a      	adds	r2, r3, #6
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800de7e:	2303      	movs	r3, #3
 800de80:	e0ee      	b.n	800e060 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2201      	movs	r2, #1
 800de86:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2290      	movs	r2, #144	; 0x90
 800de8e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2201      	movs	r2, #1
 800de96:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2203      	movs	r2, #3
 800de9e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dea8:	1d9a      	adds	r2, r3, #6
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800deb0:	2301      	movs	r3, #1
 800deb2:	e0d5      	b.n	800e060 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	7e5b      	ldrb	r3, [r3, #25]
 800dec0:	3b80      	subs	r3, #128	; 0x80
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	7e1a      	ldrb	r2, [r3, #24]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2203      	movs	r2, #3
 800ded8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	7d9a      	ldrb	r2, [r3, #22]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	7d5a      	ldrb	r2, [r3, #21]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	7d1a      	ldrb	r2, [r3, #20]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7cda      	ldrb	r2, [r3, #19]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	7c9a      	ldrb	r2, [r3, #18]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800df14:	1d9a      	adds	r2, r3, #6
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800df1c:	2301      	movs	r3, #1
 800df1e:	e09f      	b.n	800e060 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800df20:	2301      	movs	r3, #1
 800df22:	e09d      	b.n	800e060 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	791b      	ldrb	r3, [r3, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f040 8099 	bne.w	800e060 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f103 0212 	add.w	r2, r3, #18
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df3a:	4619      	mov	r1, r3
 800df3c:	4610      	mov	r0, r2
 800df3e:	f7fe fda7 	bl	800ca90 <ModBUS_Check>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 808b 	beq.w	800e060 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f7fe fdbf 	bl	800cace <ModBUS_Check_tid>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d04f      	beq.n	800dff6 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	7e5b      	ldrb	r3, [r3, #25]
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d143      	bne.n	800dfe6 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800df62:	2300      	movs	r3, #0
 800df64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800df6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800df70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df72:	021b      	lsls	r3, r3, #8
 800df74:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df80:	4313      	orrs	r3, r2
 800df82:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800df8a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800df8e:	2300      	movs	r3, #0
 800df90:	643b      	str	r3, [r7, #64]	; 0x40
 800df92:	e022      	b.n	800dfda <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800df94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	f103 0209 	add.w	r2, r3, #9
 800df9c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800df9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfa0:	440b      	add	r3, r1
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	6879      	ldr	r1, [r7, #4]
 800dfa6:	440a      	add	r2, r1
 800dfa8:	7c91      	ldrb	r1, [r2, #18]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	4413      	add	r3, r2
 800dfae:	460a      	mov	r2, r1
 800dfb0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800dfb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfb6:	3305      	adds	r3, #5
 800dfb8:	005a      	lsls	r2, r3, #1
 800dfba:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dfbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfbe:	440b      	add	r3, r1
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	6879      	ldr	r1, [r7, #4]
 800dfc6:	440a      	add	r2, r1
 800dfc8:	7c91      	ldrb	r1, [r2, #18]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	4413      	add	r3, r2
 800dfce:	460a      	mov	r2, r1
 800dfd0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800dfd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	643b      	str	r3, [r7, #64]	; 0x40
 800dfda:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dfde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	dbd7      	blt.n	800df94 <ModBUS+0x1300>

						}


					}
					break;
 800dfe4:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	7ddb      	ldrb	r3, [r3, #23]
 800dfea:	461a      	mov	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	7e9b      	ldrb	r3, [r3, #26]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	63bb      	str	r3, [r7, #56]	; 0x38
 800dff4:	e034      	b.n	800e060 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	7e5b      	ldrb	r3, [r3, #25]
 800dffa:	3b81      	subs	r3, #129	; 0x81
 800dffc:	2b15      	cmp	r3, #21
 800dffe:	d82f      	bhi.n	800e060 <ModBUS+0x13cc>
 800e000:	a201      	add	r2, pc, #4	; (adr r2, 800e008 <ModBUS+0x1374>)
 800e002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e006:	bf00      	nop
 800e008:	0800e061 	.word	0x0800e061
 800e00c:	0800e061 	.word	0x0800e061
 800e010:	0800e061 	.word	0x0800e061
 800e014:	0800e061 	.word	0x0800e061
 800e018:	0800e061 	.word	0x0800e061
 800e01c:	0800e061 	.word	0x0800e061
 800e020:	0800e061 	.word	0x0800e061
 800e024:	0800e061 	.word	0x0800e061
 800e028:	0800e061 	.word	0x0800e061
 800e02c:	0800e061 	.word	0x0800e061
 800e030:	0800e061 	.word	0x0800e061
 800e034:	0800e061 	.word	0x0800e061
 800e038:	0800e061 	.word	0x0800e061
 800e03c:	0800e061 	.word	0x0800e061
 800e040:	0800e061 	.word	0x0800e061
 800e044:	0800e061 	.word	0x0800e061
 800e048:	0800e061 	.word	0x0800e061
 800e04c:	0800e061 	.word	0x0800e061
 800e050:	0800e061 	.word	0x0800e061
 800e054:	0800e061 	.word	0x0800e061
 800e058:	0800e061 	.word	0x0800e061
 800e05c:	0800e061 	.word	0x0800e061
			}
		}
	}


}
 800e060:	4618      	mov	r0, r3
 800e062:	3770      	adds	r7, #112	; 0x70
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af02      	add	r7, sp, #8
 800e06e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6858      	ldr	r0, [r3, #4]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	891b      	ldrh	r3, [r3, #8]
 800e078:	2200      	movs	r2, #0
 800e07a:	4619      	mov	r1, r3
 800e07c:	f7f5 fa2c 	bl	80034d8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6818      	ldr	r0, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f103 0114 	add.w	r1, r3, #20
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f103 0218 	add.w	r2, r3, #24
 800e090:	2364      	movs	r3, #100	; 0x64
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	2304      	movs	r3, #4
 800e096:	f7f5 ff34 	bl	8003f02 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6858      	ldr	r0, [r3, #4]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	891b      	ldrh	r3, [r3, #8]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	f7f5 fa17 	bl	80034d8 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	7edb      	ldrb	r3, [r3, #27]
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b086      	sub	sp, #24
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
 800e0be:	4608      	mov	r0, r1
 800e0c0:	4611      	mov	r1, r2
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	70fb      	strb	r3, [r7, #3]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	70bb      	strb	r3, [r7, #2]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	787a      	ldrb	r2, [r7, #1]
 800e0d8:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	78fa      	ldrb	r2, [r7, #3]
 800e0de:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	78ba      	ldrb	r2, [r7, #2]
 800e0e4:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800e0ec:	787b      	ldrb	r3, [r7, #1]
 800e0ee:	2bf0      	cmp	r3, #240	; 0xf0
 800e0f0:	d11d      	bne.n	800e12e <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	613b      	str	r3, [r7, #16]
 800e0f6:	e013      	b.n	800e120 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	6a3a      	ldr	r2, [r7, #32]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	781a      	ldrb	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7ff ffaf 	bl	800e068 <SPI_ETH>
 800e10a:	4603      	mov	r3, r0
 800e10c:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	7d9b      	ldrb	r3, [r3, #22]
 800e112:	3301      	adds	r3, #1
 800e114:	b2da      	uxtb	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	3301      	adds	r3, #1
 800e11e:	613b      	str	r3, [r7, #16]
 800e120:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e124:	693a      	ldr	r2, [r7, #16]
 800e126:	429a      	cmp	r2, r3
 800e128:	dbe6      	blt.n	800e0f8 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800e12a:	8afb      	ldrh	r3, [r7, #22]
 800e12c:	e037      	b.n	800e19e <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800e12e:	787b      	ldrb	r3, [r7, #1]
 800e130:	2b0f      	cmp	r3, #15
 800e132:	d134      	bne.n	800e19e <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800e13a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e13e:	2b02      	cmp	r3, #2
 800e140:	d120      	bne.n	800e184 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800e142:	2300      	movs	r3, #0
 800e144:	60fb      	str	r3, [r7, #12]
 800e146:	e016      	b.n	800e176 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7ff ff8d 	bl	800e068 <SPI_ETH>
 800e14e:	4603      	mov	r3, r0
 800e150:	b29a      	uxth	r2, r3
 800e152:	8afb      	ldrh	r3, [r7, #22]
 800e154:	4313      	orrs	r3, r2
 800e156:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	7d9b      	ldrb	r3, [r3, #22]
 800e15c:	3301      	adds	r3, #1
 800e15e:	b2da      	uxtb	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d102      	bne.n	800e170 <SPI_ETH_REG+0xba>
 800e16a:	8afb      	ldrh	r3, [r7, #22]
 800e16c:	021b      	lsls	r3, r3, #8
 800e16e:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	3301      	adds	r3, #1
 800e174:	60fb      	str	r3, [r7, #12]
 800e176:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e17a:	68fa      	ldr	r2, [r7, #12]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	dbe3      	blt.n	800e148 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800e180:	8afb      	ldrh	r3, [r7, #22]
 800e182:	e00c      	b.n	800e19e <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7ff ff6f 	bl	800e068 <SPI_ETH>
 800e18a:	4603      	mov	r3, r0
 800e18c:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	7d9b      	ldrb	r3, [r3, #22]
 800e192:	3301      	adds	r3, #1
 800e194:	b2da      	uxtb	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	759a      	strb	r2, [r3, #22]
			return(res);
 800e19a:	8afb      	ldrh	r3, [r7, #22]
 800e19c:	e7ff      	b.n	800e19e <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b086      	sub	sp, #24
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	807b      	strh	r3, [r7, #2]
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	22f0      	movs	r2, #240	; 0xf0
 800e1be:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800e1c0:	883b      	ldrh	r3, [r7, #0]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800e1c6:	883b      	ldrh	r3, [r7, #0]
 800e1c8:	0a1b      	lsrs	r3, r3, #8
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	613b      	str	r3, [r7, #16]
 800e1d4:	e01b      	b.n	800e20e <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800e1d6:	887b      	ldrh	r3, [r7, #2]
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800e1de:	887b      	ldrh	r3, [r7, #2]
 800e1e0:	0a1b      	lsrs	r3, r3, #8
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	755a      	strb	r2, [r3, #21]
		addr++;
 800e1ea:	887b      	ldrh	r3, [r7, #2]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800e1f0:	f107 020c 	add.w	r2, r7, #12
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	781a      	ldrb	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7ff ff32 	bl	800e068 <SPI_ETH>
 800e204:	4603      	mov	r3, r0
 800e206:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	3301      	adds	r3, #1
 800e20c:	613b      	str	r3, [r7, #16]
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	2b01      	cmp	r3, #1
 800e212:	dde0      	ble.n	800e1d6 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800e214:	8afb      	ldrh	r3, [r7, #22]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e21e:	b590      	push	{r4, r7, lr}
 800e220:	b087      	sub	sp, #28
 800e222:	af00      	add	r7, sp, #0
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	461a      	mov	r2, r3
 800e22a:	460b      	mov	r3, r1
 800e22c:	817b      	strh	r3, [r7, #10]
 800e22e:	4613      	mov	r3, r2
 800e230:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	220f      	movs	r2, #15
 800e236:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e238:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e23a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e23e:	d226      	bcs.n	800e28e <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800e246:	2300      	movs	r3, #0
 800e248:	617b      	str	r3, [r7, #20]
 800e24a:	e01a      	b.n	800e282 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800e24c:	897b      	ldrh	r3, [r7, #10]
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e254:	897b      	ldrh	r3, [r7, #10]
 800e256:	0a1b      	lsrs	r3, r3, #8
 800e258:	b29b      	uxth	r3, r3
 800e25a:	b2da      	uxtb	r2, r3
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800e260:	893a      	ldrh	r2, [r7, #8]
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	4413      	add	r3, r2
 800e266:	461a      	mov	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	189c      	adds	r4, r3, r2
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f7ff fefb 	bl	800e068 <SPI_ETH>
 800e272:	4603      	mov	r3, r0
 800e274:	7023      	strb	r3, [r4, #0]
				addr++;
 800e276:	897b      	ldrh	r3, [r7, #10]
 800e278:	3301      	adds	r3, #1
 800e27a:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	3301      	adds	r3, #1
 800e280:	617b      	str	r3, [r7, #20]
 800e282:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e284:	697a      	ldr	r2, [r7, #20]
 800e286:	429a      	cmp	r2, r3
 800e288:	dbe0      	blt.n	800e24c <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e28a:	2300      	movs	r3, #0
 800e28c:	e000      	b.n	800e290 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800e28e:	2301      	movs	r3, #1
	}
}
 800e290:	4618      	mov	r0, r3
 800e292:	371c      	adds	r7, #28
 800e294:	46bd      	mov	sp, r7
 800e296:	bd90      	pop	{r4, r7, pc}

0800e298 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	607a      	str	r2, [r7, #4]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	817b      	strh	r3, [r7, #10]
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	22f0      	movs	r2, #240	; 0xf0
 800e2b0:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e2b2:	8c3b      	ldrh	r3, [r7, #32]
 800e2b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2b8:	d223      	bcs.n	800e302 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	e01a      	b.n	800e2f6 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800e2c0:	897b      	ldrh	r3, [r7, #10]
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e2c8:	897b      	ldrh	r3, [r7, #10]
 800e2ca:	0a1b      	lsrs	r3, r3, #8
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800e2d4:	893a      	ldrh	r2, [r7, #8]
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	4413      	add	r3, r2
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	4413      	add	r3, r2
 800e2de:	7f1a      	ldrb	r2, [r3, #28]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f7ff febf 	bl	800e068 <SPI_ETH>
				addr++;
 800e2ea:	897b      	ldrh	r3, [r7, #10]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	617b      	str	r3, [r7, #20]
 800e2f6:	8c3b      	ldrh	r3, [r7, #32]
 800e2f8:	697a      	ldr	r2, [r7, #20]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	dbe0      	blt.n	800e2c0 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e2fe:	2300      	movs	r3, #0
 800e300:	e000      	b.n	800e304 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800e302:	2301      	movs	r3, #1
	}
}
 800e304:	4618      	mov	r0, r3
 800e306:	3718      	adds	r7, #24
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	460b      	mov	r3, r1
 800e316:	70fb      	strb	r3, [r7, #3]
 800e318:	4613      	mov	r3, r2
 800e31a:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	22f0      	movs	r2, #240	; 0xf0
 800e320:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800e322:	78fb      	ldrb	r3, [r7, #3]
 800e324:	3304      	adds	r3, #4
 800e326:	b2da      	uxtb	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	78ba      	ldrb	r2, [r7, #2]
 800e336:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f7ff fe95 	bl	800e068 <SPI_ETH>
}
 800e33e:	bf00      	nop
 800e340:	4618      	mov	r0, r3
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	460b      	mov	r3, r1
 800e352:	70fb      	strb	r3, [r7, #3]
 800e354:	4613      	mov	r3, r2
 800e356:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	22f0      	movs	r2, #240	; 0xf0
 800e35c:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800e35e:	78fb      	ldrb	r3, [r7, #3]
 800e360:	3304      	adds	r3, #4
 800e362:	b2da      	uxtb	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2200      	movs	r2, #0
 800e36c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	78ba      	ldrb	r2, [r7, #2]
 800e372:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7ff fe77 	bl	800e068 <SPI_ETH>
}
 800e37a:	bf00      	nop
 800e37c:	4618      	mov	r0, r3
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af02      	add	r7, sp, #8
 800e38a:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e392:	331c      	adds	r3, #28
 800e394:	2204      	movs	r2, #4
 800e396:	9201      	str	r2, [sp, #4]
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	23f0      	movs	r3, #240	; 0xf0
 800e39c:	2201      	movs	r2, #1
 800e39e:	2100      	movs	r1, #0
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7ff fe88 	bl	800e0b6 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800e3a6:	2119      	movs	r1, #25
 800e3a8:	482d      	ldr	r0, [pc, #180]	; (800e460 <eth_init+0xdc>)
 800e3aa:	f7f3 f8e3 	bl	8001574 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e3b4:	2204      	movs	r2, #4
 800e3b6:	9201      	str	r2, [sp, #4]
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	23f0      	movs	r3, #240	; 0xf0
 800e3bc:	2205      	movs	r2, #5
 800e3be:	2100      	movs	r1, #0
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7ff fe78 	bl	800e0b6 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800e3c6:	2116      	movs	r1, #22
 800e3c8:	4826      	ldr	r0, [pc, #152]	; (800e464 <eth_init+0xe0>)
 800e3ca:	f7f3 f8d3 	bl	8001574 <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e3d4:	3304      	adds	r3, #4
 800e3d6:	2206      	movs	r2, #6
 800e3d8:	9201      	str	r2, [sp, #4]
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	23f0      	movs	r3, #240	; 0xf0
 800e3de:	2209      	movs	r2, #9
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7ff fe67 	bl	800e0b6 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800e3e8:	2113      	movs	r1, #19
 800e3ea:	481f      	ldr	r0, [pc, #124]	; (800e468 <eth_init+0xe4>)
 800e3ec:	f7f3 f8c2 	bl	8001574 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e3f6:	330a      	adds	r3, #10
 800e3f8:	2204      	movs	r2, #4
 800e3fa:	9201      	str	r2, [sp, #4]
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	23f0      	movs	r3, #240	; 0xf0
 800e400:	220f      	movs	r2, #15
 800e402:	2100      	movs	r1, #0
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7ff fe56 	bl	800e0b6 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800e40a:	2112      	movs	r1, #18
 800e40c:	4817      	ldr	r0, [pc, #92]	; (800e46c <eth_init+0xe8>)
 800e40e:	f7f3 f8b1 	bl	8001574 <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e418:	330e      	adds	r3, #14
 800e41a:	2201      	movs	r2, #1
 800e41c:	9201      	str	r2, [sp, #4]
 800e41e:	9300      	str	r3, [sp, #0]
 800e420:	23f0      	movs	r3, #240	; 0xf0
 800e422:	221a      	movs	r2, #26
 800e424:	2100      	movs	r1, #0
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff fe45 	bl	800e0b6 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800e42c:	2128      	movs	r1, #40	; 0x28
 800e42e:	4810      	ldr	r0, [pc, #64]	; (800e470 <eth_init+0xec>)
 800e430:	f7f3 f8a0 	bl	8001574 <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e43a:	330f      	adds	r3, #15
 800e43c:	2201      	movs	r2, #1
 800e43e:	9201      	str	r2, [sp, #4]
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	23f0      	movs	r3, #240	; 0xf0
 800e444:	221b      	movs	r2, #27
 800e446:	2100      	movs	r1, #0
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7ff fe34 	bl	800e0b6 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800e44e:	2128      	movs	r1, #40	; 0x28
 800e450:	4808      	ldr	r0, [pc, #32]	; (800e474 <eth_init+0xf0>)
 800e452:	f7f3 f88f 	bl	8001574 <ITM0_Write>

}
 800e456:	bf00      	nop
 800e458:	4618      	mov	r0, r3
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	08010dbc 	.word	0x08010dbc
 800e464:	08010dd8 	.word	0x08010dd8
 800e468:	08010df4 	.word	0x08010df4
 800e46c:	08010e0c 	.word	0x08010e0c
 800e470:	08010e24 	.word	0x08010e24
 800e474:	08010e50 	.word	0x08010e50

0800e478 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af02      	add	r7, sp, #8
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	460b      	mov	r3, r1
 800e482:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	2201      	movs	r2, #1
 800e488:	4619      	mov	r1, r3
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f7ff ff5c 	bl	800e348 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800e490:	2119      	movs	r1, #25
 800e492:	4830      	ldr	r0, [pc, #192]	; (800e554 <eth_socket_init+0xdc>)
 800e494:	f7f3 f86e 	bl	8001574 <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e49e:	331a      	adds	r3, #26
 800e4a0:	2202      	movs	r2, #2
 800e4a2:	9201      	str	r2, [sp, #4]
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	23f0      	movs	r3, #240	; 0xf0
 800e4a8:	2204      	movs	r2, #4
 800e4aa:	2104      	movs	r1, #4
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f7ff fe02 	bl	800e0b6 <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800e4b2:	212c      	movs	r1, #44	; 0x2c
 800e4b4:	4828      	ldr	r0, [pc, #160]	; (800e558 <eth_socket_init+0xe0>)
 800e4b6:	f7f3 f85d 	bl	8001574 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e4c0:	331c      	adds	r3, #28
 800e4c2:	2204      	movs	r2, #4
 800e4c4:	9201      	str	r2, [sp, #4]
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	23f0      	movs	r3, #240	; 0xf0
 800e4ca:	220c      	movs	r2, #12
 800e4cc:	2104      	movs	r1, #4
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f7ff fdf1 	bl	800e0b6 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800e4d4:	212e      	movs	r1, #46	; 0x2e
 800e4d6:	4821      	ldr	r0, [pc, #132]	; (800e55c <eth_socket_init+0xe4>)
 800e4d8:	f7f3 f84c 	bl	8001574 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	9201      	str	r2, [sp, #4]
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	23f0      	movs	r3, #240	; 0xf0
 800e4ea:	2210      	movs	r2, #16
 800e4ec:	2104      	movs	r1, #4
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff fde1 	bl	800e0b6 <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800e4f4:	2120      	movs	r1, #32
 800e4f6:	481a      	ldr	r0, [pc, #104]	; (800e560 <eth_socket_init+0xe8>)
 800e4f8:	f7f3 f83c 	bl	8001574 <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800e4fc:	78fb      	ldrb	r3, [r7, #3]
 800e4fe:	2201      	movs	r2, #1
 800e500:	4619      	mov	r1, r3
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7ff ff02 	bl	800e30c <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800e508:	2119      	movs	r1, #25
 800e50a:	4816      	ldr	r0, [pc, #88]	; (800e564 <eth_socket_init+0xec>)
 800e50c:	f7f3 f832 	bl	8001574 <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e516:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d10a      	bne.n	800e534 <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800e51e:	78fb      	ldrb	r3, [r7, #3]
 800e520:	2202      	movs	r2, #2
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7ff fef1 	bl	800e30c <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800e52a:	211b      	movs	r1, #27
 800e52c:	480e      	ldr	r0, [pc, #56]	; (800e568 <eth_socket_init+0xf0>)
 800e52e:	f7f3 f821 	bl	8001574 <ITM0_Write>
 800e532:	e009      	b.n	800e548 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800e534:	78fb      	ldrb	r3, [r7, #3]
 800e536:	2204      	movs	r2, #4
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7ff fee6 	bl	800e30c <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800e540:	2115      	movs	r1, #21
 800e542:	480a      	ldr	r0, [pc, #40]	; (800e56c <eth_socket_init+0xf4>)
 800e544:	f7f3 f816 	bl	8001574 <ITM0_Write>
	 }
}
 800e548:	bf00      	nop
 800e54a:	4618      	mov	r0, r3
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	08010e7c 	.word	0x08010e7c
 800e558:	08010e98 	.word	0x08010e98
 800e55c:	08010ec8 	.word	0x08010ec8
 800e560:	08010ef8 	.word	0x08010ef8
 800e564:	08010f1c 	.word	0x08010f1c
 800e568:	08010f38 	.word	0x08010f38
 800e56c:	08010f54 	.word	0x08010f54

0800e570 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	460b      	mov	r3, r1
 800e57a:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	220f      	movs	r2, #15
 800e580:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800e582:	78fb      	ldrb	r3, [r7, #3]
 800e584:	3304      	adds	r3, #4
 800e586:	b2da      	uxtb	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2203      	movs	r2, #3
 800e590:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2200      	movs	r2, #0
 800e596:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f7ff fd65 	bl	800e068 <SPI_ETH>
	return(y->RX[3]);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	7edb      	ldrb	r3, [r3, #27]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b082      	sub	sp, #8
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	220f      	movs	r2, #15
 800e5ba:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e5bc:	78fb      	ldrb	r3, [r7, #3]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	b2da      	uxtb	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7ff fd48 	bl	800e068 <SPI_ETH>
	return(y->RX[3]);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	7edb      	ldrb	r3, [r3, #27]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b08c      	sub	sp, #48	; 0x30
 800e5e8:	af02      	add	r7, sp, #8
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	607a      	str	r2, [r7, #4]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	72fb      	strb	r3, [r7, #11]
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e600:	2300      	movs	r3, #0
 800e602:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e604:	2300      	movs	r3, #0
 800e606:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e608:	2300      	movs	r3, #0
 800e60a:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e60c:	2300      	movs	r3, #0
 800e60e:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e610:	2300      	movs	r3, #0
 800e612:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e614:	2300      	movs	r3, #0
 800e616:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e618:	2300      	movs	r3, #0
 800e61a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e61c:	2300      	movs	r3, #0
 800e61e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e620:	7afb      	ldrb	r3, [r7, #11]
 800e622:	2b03      	cmp	r3, #3
 800e624:	d83e      	bhi.n	800e6a4 <eth_rd_SOCKET_DATA+0xc0>
 800e626:	a201      	add	r2, pc, #4	; (adr r2, 800e62c <eth_rd_SOCKET_DATA+0x48>)
 800e628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e62c:	0800e63d 	.word	0x0800e63d
 800e630:	0800e657 	.word	0x0800e657
 800e634:	0800e671 	.word	0x0800e671
 800e638:	0800e68b 	.word	0x0800e68b
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e642:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e646:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e64e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e652:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e654:	e033      	b.n	800e6be <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e65c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e660:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e668:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e66c:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e66e:	e026      	b.n	800e6be <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e67a:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e682:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e686:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e688:	e019      	b.n	800e6be <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e690:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e694:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e69c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e6a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e6a2:	e00c      	b.n	800e6be <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6ae:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e6bc:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e6be:	7afb      	ldrb	r3, [r7, #11]
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	b2d9      	uxtb	r1, r3
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	9301      	str	r3, [sp, #4]
 800e6c8:	f107 0310 	add.w	r3, r7, #16
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	230f      	movs	r3, #15
 800e6d0:	2228      	movs	r2, #40	; 0x28
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f7ff fcef 	bl	800e0b6 <SPI_ETH_REG>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e6dc:	8b7a      	ldrh	r2, [r7, #26]
 800e6de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6e0:	4013      	ands	r3, r2
 800e6e2:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e6e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6e6:	8b3b      	ldrh	r3, [r7, #24]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e6ec:	8b3a      	ldrh	r2, [r7, #24]
 800e6ee:	893b      	ldrh	r3, [r7, #8]
 800e6f0:	441a      	add	r2, r3
 800e6f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	dd2c      	ble.n	800e754 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e6fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e6fc:	8b3b      	ldrh	r3, [r7, #24]
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	b29b      	uxth	r3, r3
 800e702:	3301      	adds	r3, #1
 800e704:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f103 021c 	add.w	r2, r3, #28
 800e70c:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e70e:	8af9      	ldrh	r1, [r7, #22]
 800e710:	8bfb      	ldrh	r3, [r7, #30]
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	4603      	mov	r3, r0
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f7ff fd81 	bl	800e21e <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e71c:	8bba      	ldrh	r2, [r7, #28]
 800e71e:	8bfb      	ldrh	r3, [r7, #30]
 800e720:	4413      	add	r3, r2
 800e722:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e724:	893a      	ldrh	r2, [r7, #8]
 800e726:	8bfb      	ldrh	r3, [r7, #30]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e72c:	8bfb      	ldrh	r3, [r7, #30]
 800e72e:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f103 021c 	add.w	r2, r3, #28
 800e736:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e738:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e73a:	8c3b      	ldrh	r3, [r7, #32]
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	4603      	mov	r3, r0
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f7ff fd6c 	bl	800e21e <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e746:	8b7a      	ldrh	r2, [r7, #26]
 800e748:	893b      	ldrh	r3, [r7, #8]
 800e74a:	4413      	add	r3, r2
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	801a      	strh	r2, [r3, #0]
 800e752:	e010      	b.n	800e776 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f103 021c 	add.w	r2, r3, #28
 800e75a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e75c:	8af9      	ldrh	r1, [r7, #22]
 800e75e:	893b      	ldrh	r3, [r7, #8]
 800e760:	9300      	str	r3, [sp, #0]
 800e762:	4603      	mov	r3, r0
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	f7ff fd5a 	bl	800e21e <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e76a:	8b7a      	ldrh	r2, [r7, #26]
 800e76c:	893b      	ldrh	r3, [r7, #8]
 800e76e:	4413      	add	r3, r2
 800e770:	b29a      	uxth	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	b29b      	uxth	r3, r3
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3728      	adds	r7, #40	; 0x28
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop

0800e784 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b08c      	sub	sp, #48	; 0x30
 800e788:	af02      	add	r7, sp, #8
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	607a      	str	r2, [r7, #4]
 800e78e:	461a      	mov	r2, r3
 800e790:	460b      	mov	r3, r1
 800e792:	72fb      	strb	r3, [r7, #11]
 800e794:	4613      	mov	r3, r2
 800e796:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e798:	2300      	movs	r3, #0
 800e79a:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e79c:	2300      	movs	r3, #0
 800e79e:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e7bc:	2300      	movs	r3, #0
 800e7be:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e7c4:	7afb      	ldrb	r3, [r7, #11]
 800e7c6:	2b03      	cmp	r3, #3
 800e7c8:	d83e      	bhi.n	800e848 <eth_wr_SOCKET_DATA+0xc4>
 800e7ca:	a201      	add	r2, pc, #4	; (adr r2, 800e7d0 <eth_wr_SOCKET_DATA+0x4c>)
 800e7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d0:	0800e7e1 	.word	0x0800e7e1
 800e7d4:	0800e7fb 	.word	0x0800e7fb
 800e7d8:	0800e815 	.word	0x0800e815
 800e7dc:	0800e82f 	.word	0x0800e82f
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e7ea:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e7f6:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e7f8:	e033      	b.n	800e862 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e804:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e80c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e810:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e812:	e026      	b.n	800e862 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e81a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e81e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e82a:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e82c:	e019      	b.n	800e862 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e834:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e838:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e844:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e846:	e00c      	b.n	800e862 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e84e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e852:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e85a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e85e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e860:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e862:	e00e      	b.n	800e882 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e864:	7afb      	ldrb	r3, [r7, #11]
 800e866:	3304      	adds	r3, #4
 800e868:	b2d9      	uxtb	r1, r3
 800e86a:	2302      	movs	r3, #2
 800e86c:	9301      	str	r3, [sp, #4]
 800e86e:	f107 0310 	add.w	r3, r7, #16
 800e872:	9300      	str	r3, [sp, #0]
 800e874:	230f      	movs	r3, #15
 800e876:	2220      	movs	r2, #32
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f7ff fc1c 	bl	800e0b6 <SPI_ETH_REG>
 800e87e:	4603      	mov	r3, r0
 800e880:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e882:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e884:	893b      	ldrh	r3, [r7, #8]
 800e886:	429a      	cmp	r2, r3
 800e888:	d3ec      	bcc.n	800e864 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e88a:	7afb      	ldrb	r3, [r7, #11]
 800e88c:	3304      	adds	r3, #4
 800e88e:	b2d9      	uxtb	r1, r3
 800e890:	2302      	movs	r3, #2
 800e892:	9301      	str	r3, [sp, #4]
 800e894:	f107 0310 	add.w	r3, r7, #16
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	230f      	movs	r3, #15
 800e89c:	2224      	movs	r2, #36	; 0x24
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f7ff fc09 	bl	800e0b6 <SPI_ETH_REG>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e8a8:	8b3a      	ldrh	r2, [r7, #24]
 800e8aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ac:	4013      	ands	r3, r2
 800e8ae:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e8b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e8b2:	8afb      	ldrh	r3, [r7, #22]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e8b8:	8afa      	ldrh	r2, [r7, #22]
 800e8ba:	893b      	ldrh	r3, [r7, #8]
 800e8bc:	441a      	add	r2, r3
 800e8be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	dd2c      	ble.n	800e920 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e8c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e8c8:	8afb      	ldrh	r3, [r7, #22]
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f103 021c 	add.w	r2, r3, #28
 800e8d8:	8c38      	ldrh	r0, [r7, #32]
 800e8da:	8ab9      	ldrh	r1, [r7, #20]
 800e8dc:	8bbb      	ldrh	r3, [r7, #28]
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f7ff fcd8 	bl	800e298 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e8e8:	8b7a      	ldrh	r2, [r7, #26]
 800e8ea:	8bbb      	ldrh	r3, [r7, #28]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e8f0:	893a      	ldrh	r2, [r7, #8]
 800e8f2:	8bbb      	ldrh	r3, [r7, #28]
 800e8f4:	1ad3      	subs	r3, r2, r3
 800e8f6:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e8f8:	8bbb      	ldrh	r3, [r7, #28]
 800e8fa:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f103 021c 	add.w	r2, r3, #28
 800e902:	8c38      	ldrh	r0, [r7, #32]
 800e904:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e906:	8bfb      	ldrh	r3, [r7, #30]
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	4603      	mov	r3, r0
 800e90c:	68f8      	ldr	r0, [r7, #12]
 800e90e:	f7ff fcc3 	bl	800e298 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e912:	8b3a      	ldrh	r2, [r7, #24]
 800e914:	893b      	ldrh	r3, [r7, #8]
 800e916:	4413      	add	r3, r2
 800e918:	b29a      	uxth	r2, r3
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	801a      	strh	r2, [r3, #0]
 800e91e:	e010      	b.n	800e942 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f103 021c 	add.w	r2, r3, #28
 800e926:	8c38      	ldrh	r0, [r7, #32]
 800e928:	8ab9      	ldrh	r1, [r7, #20]
 800e92a:	893b      	ldrh	r3, [r7, #8]
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	4603      	mov	r3, r0
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f7ff fcb1 	bl	800e298 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e936:	8b3a      	ldrh	r2, [r7, #24]
 800e938:	893b      	ldrh	r3, [r7, #8]
 800e93a:	4413      	add	r3, r2
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	801a      	strh	r2, [r3, #0]
					}

}
 800e942:	bf00      	nop
 800e944:	4618      	mov	r0, r3
 800e946:	3728      	adds	r7, #40	; 0x28
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b090      	sub	sp, #64	; 0x40
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
 800e958:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e95a:	2300      	movs	r3, #0
 800e95c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e95e:	2300      	movs	r3, #0
 800e960:	63bb      	str	r3, [r7, #56]	; 0x38
 800e962:	2300      	movs	r3, #0
 800e964:	637b      	str	r3, [r7, #52]	; 0x34
 800e966:	2300      	movs	r3, #0
 800e968:	633b      	str	r3, [r7, #48]	; 0x30
 800e96a:	2300      	movs	r3, #0
 800e96c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e96e:	2300      	movs	r3, #0
 800e970:	61fb      	str	r3, [r7, #28]
 800e972:	2300      	movs	r3, #0
 800e974:	61bb      	str	r3, [r7, #24]
 800e976:	2300      	movs	r3, #0
 800e978:	62bb      	str	r3, [r7, #40]	; 0x28
 800e97a:	2300      	movs	r3, #0
 800e97c:	627b      	str	r3, [r7, #36]	; 0x24
 800e97e:	2300      	movs	r3, #0
 800e980:	617b      	str	r3, [r7, #20]
 800e982:	2300      	movs	r3, #0
 800e984:	623b      	str	r3, [r7, #32]
 800e986:	2300      	movs	r3, #0
 800e988:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e996:	69fa      	ldr	r2, [r7, #28]
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	f2c0 8315 	blt.w	800efca <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e9a4:	e00c      	b.n	800e9c0 <FT_String_ND+0x74>
							{
								n++;
 800e9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e9ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	441a      	add	r2, r3
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	dd02      	ble.n	800e9c0 <FT_String_ND+0x74>
								{
									estado=0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	623b      	str	r3, [r7, #32]
									break;
 800e9be:	e009      	b.n	800e9d4 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	781a      	ldrb	r2, [r3, #0]
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	440b      	add	r3, r1
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d1e8      	bne.n	800e9a6 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9dc:	3301      	adds	r3, #1
 800e9de:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d108      	bne.n	800e9fa <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e9e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	1c5a      	adds	r2, r3, #1
 800e9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9f2:	601a      	str	r2, [r3, #0]
									estado=1;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	623b      	str	r3, [r7, #32]
									break;
 800e9f8:	e010      	b.n	800ea1c <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	dd02      	ble.n	800ea08 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800ea02:	2300      	movs	r3, #0
 800ea04:	623b      	str	r3, [r7, #32]
									 break;
 800ea06:	e009      	b.n	800ea1c <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800ea08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	781a      	ldrb	r2, [r3, #0]
 800ea10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea12:	6879      	ldr	r1, [r7, #4]
 800ea14:	440b      	add	r3, r1
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d0db      	beq.n	800e9d4 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	1e5a      	subs	r2, r3, #1
 800ea20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea22:	4413      	add	r3, r2
 800ea24:	69fa      	ldr	r2, [r7, #28]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	dd02      	ble.n	800ea30 <FT_String_ND+0xe4>
 800ea2a:	6a3b      	ldr	r3, [r7, #32]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d1b7      	bne.n	800e9a0 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800ea30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d101      	bne.n	800ea3a <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800ea36:	6a3b      	ldr	r3, [r7, #32]
 800ea38:	e2c8      	b.n	800efcc <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800ea3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d12c      	bne.n	800ea9a <FT_String_ND+0x14e>
 800ea40:	6a3b      	ldr	r3, [r7, #32]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d129      	bne.n	800ea9a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800ea46:	e014      	b.n	800ea72 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800ea48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	441a      	add	r2, r3
 800ea50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea52:	4413      	add	r3, r2
 800ea54:	3b01      	subs	r3, #1
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	441a      	add	r2, r3
 800ea5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea5c:	6819      	ldr	r1, [r3, #0]
 800ea5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea60:	440b      	add	r3, r1
 800ea62:	3b01      	subs	r3, #1
 800ea64:	68f9      	ldr	r1, [r7, #12]
 800ea66:	440b      	add	r3, r1
 800ea68:	7812      	ldrb	r2, [r2, #0]
 800ea6a:	701a      	strb	r2, [r3, #0]
										n3++;
 800ea6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea6e:	3301      	adds	r3, #1
 800ea70:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800ea72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea78:	441a      	add	r2, r3
 800ea7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7c:	4413      	add	r3, r2
 800ea7e:	69fa      	ldr	r2, [r7, #28]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	dae1      	bge.n	800ea48 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800ea84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea8a:	4413      	add	r3, r2
 800ea8c:	1e5a      	subs	r2, r3, #1
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	601a      	str	r2, [r3, #0]
							estado=3;
 800ea92:	2303      	movs	r3, #3
 800ea94:	623b      	str	r3, [r7, #32]
							return(estado);
 800ea96:	6a3b      	ldr	r3, [r7, #32]
 800ea98:	e298      	b.n	800efcc <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800ea9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	f040 80be 	bne.w	800ec1e <FT_String_ND+0x2d2>
 800eaa2:	6a3b      	ldr	r3, [r7, #32]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	f040 80ba 	bne.w	800ec1e <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eaaa:	e012      	b.n	800ead2 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eaac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	1ad2      	subs	r2, r2, r3
 800eab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab4:	4413      	add	r3, r2
 800eab6:	461a      	mov	r2, r3
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	441a      	add	r2, r3
 800eabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eac0:	440b      	add	r3, r1
 800eac2:	7812      	ldrb	r2, [r2, #0]
 800eac4:	701a      	strb	r2, [r3, #0]
								n4++;
 800eac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac8:	3301      	adds	r3, #1
 800eaca:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800eacc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ead0:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ead2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	1ad2      	subs	r2, r2, r3
 800ead8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eada:	4413      	add	r3, r2
 800eadc:	69fa      	ldr	r2, [r7, #28]
 800eade:	429a      	cmp	r2, r3
 800eae0:	dae4      	bge.n	800eaac <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800eae2:	499d      	ldr	r1, [pc, #628]	; (800ed58 <FT_String_ND+0x40c>)
 800eae4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eae6:	f000 fd13 	bl	800f510 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800eaea:	499c      	ldr	r1, [pc, #624]	; (800ed5c <FT_String_ND+0x410>)
 800eaec:	2000      	movs	r0, #0
 800eaee:	f000 fd0f 	bl	800f510 <strtok>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f000 faf0 	bl	800f0da <atoi>
 800eafa:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800eafc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eafe:	3b01      	subs	r3, #1
 800eb00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb02:	429a      	cmp	r2, r3
 800eb04:	db02      	blt.n	800eb0c <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800eb06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800eb0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb0e:	3306      	adds	r3, #6
 800eb10:	222c      	movs	r2, #44	; 0x2c
 800eb12:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb16:	2b09      	cmp	r3, #9
 800eb18:	dc0d      	bgt.n	800eb36 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800eb1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb1c:	3308      	adds	r3, #8
 800eb1e:	223a      	movs	r2, #58	; 0x3a
 800eb20:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800eb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb24:	3309      	adds	r3, #9
 800eb26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb28:	4413      	add	r3, r2
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800eb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb30:	3309      	adds	r3, #9
 800eb32:	627b      	str	r3, [r7, #36]	; 0x24
 800eb34:	e021      	b.n	800eb7a <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800eb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb38:	2b63      	cmp	r3, #99	; 0x63
 800eb3a:	dc0d      	bgt.n	800eb58 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800eb3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb3e:	3309      	adds	r3, #9
 800eb40:	223a      	movs	r2, #58	; 0x3a
 800eb42:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800eb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb46:	330a      	adds	r3, #10
 800eb48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb4a:	4413      	add	r3, r2
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800eb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb52:	330a      	adds	r3, #10
 800eb54:	627b      	str	r3, [r7, #36]	; 0x24
 800eb56:	e010      	b.n	800eb7a <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800eb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb5e:	da0c      	bge.n	800eb7a <FT_String_ND+0x22e>
														{
															c[10]=':';
 800eb60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb62:	330a      	adds	r3, #10
 800eb64:	223a      	movs	r2, #58	; 0x3a
 800eb66:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6a:	330b      	adds	r3, #11
 800eb6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb6e:	4413      	add	r3, r2
 800eb70:	2200      	movs	r2, #0
 800eb72:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800eb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb76:	330b      	adds	r3, #11
 800eb78:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800eb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb7e:	601a      	str	r2, [r3, #0]
							n4=0;
 800eb80:	2300      	movs	r3, #0
 800eb82:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb84:	e016      	b.n	800ebb4 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800eb86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	1ad2      	subs	r2, r2, r3
 800eb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8e:	441a      	add	r2, r3
 800eb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb92:	4413      	add	r3, r2
 800eb94:	461a      	mov	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	441a      	add	r2, r3
 800eb9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb9c:	69bb      	ldr	r3, [r7, #24]
 800eb9e:	1ac9      	subs	r1, r1, r3
 800eba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba2:	440b      	add	r3, r1
 800eba4:	4619      	mov	r1, r3
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	440b      	add	r3, r1
 800ebaa:	7812      	ldrb	r2, [r2, #0]
 800ebac:	701a      	strb	r2, [r3, #0]
								n4++;
 800ebae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ebb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	1ad2      	subs	r2, r2, r3
 800ebba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebbc:	441a      	add	r2, r3
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	4413      	add	r3, r2
 800ebc2:	69fa      	ldr	r2, [r7, #28]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	dade      	bge.n	800eb86 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800ebc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	441a      	add	r2, r3
 800ebce:	69bb      	ldr	r3, [r7, #24]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	1e5a      	subs	r2, r3, #1
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800ebd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebda:	69bb      	ldr	r3, [r7, #24]
 800ebdc:	1ad2      	subs	r2, r2, r3
 800ebde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe0:	441a      	add	r2, r3
 800ebe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe4:	4413      	add	r3, r2
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	4413      	add	r3, r2
 800ebec:	2200      	movs	r2, #0
 800ebee:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800ebf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	1ad2      	subs	r2, r2, r3
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	4413      	add	r3, r2
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	4413      	add	r3, r2
 800ec00:	2200      	movs	r2, #0
 800ec02:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800ec04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	1ad2      	subs	r2, r2, r3
 800ec0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0e:	440b      	add	r3, r1
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d102      	bne.n	800ec1a <FT_String_ND+0x2ce>
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2200      	movs	r2, #0
 800ec18:	701a      	strb	r2, [r3, #0]
							estado=3;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800ec1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec20:	2b03      	cmp	r3, #3
 800ec22:	d146      	bne.n	800ecb2 <FT_String_ND+0x366>
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d143      	bne.n	800ecb2 <FT_String_ND+0x366>
						{
						n3=0;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ec2e:	e00e      	b.n	800ec4e <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800ec30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec36:	4413      	add	r3, r2
 800ec38:	3b01      	subs	r3, #1
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	441a      	add	r2, r3
 800ec3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec42:	440b      	add	r3, r1
 800ec44:	7812      	ldrb	r2, [r2, #0]
 800ec46:	701a      	strb	r2, [r3, #0]
										n3++;
 800ec48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ec4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	dbec      	blt.n	800ec30 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ec5a:	e014      	b.n	800ec86 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800ec5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	441a      	add	r2, r3
 800ec64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec66:	4413      	add	r3, r2
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	441a      	add	r2, r3
 800ec6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec70:	6819      	ldr	r1, [r3, #0]
 800ec72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec74:	440b      	add	r3, r1
 800ec76:	3b01      	subs	r3, #1
 800ec78:	68f9      	ldr	r1, [r7, #12]
 800ec7a:	440b      	add	r3, r1
 800ec7c:	7812      	ldrb	r2, [r2, #0]
 800ec7e:	701a      	strb	r2, [r3, #0]
										n5++;
 800ec80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec82:	3301      	adds	r3, #1
 800ec84:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ec86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	69bb      	ldr	r3, [r7, #24]
 800ec8c:	441a      	add	r2, r3
 800ec8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec90:	441a      	add	r2, r3
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	dde0      	ble.n	800ec5c <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800ec9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca0:	4413      	add	r3, r2
 800eca2:	1e5a      	subs	r2, r3, #1
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800eca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecac:	601a      	str	r2, [r3, #0]
							estado=3;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800ecb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecb4:	2b04      	cmp	r3, #4
 800ecb6:	f040 80bd 	bne.w	800ee34 <FT_String_ND+0x4e8>
 800ecba:	6a3b      	ldr	r3, [r7, #32]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	f040 80b9 	bne.w	800ee34 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ecc2:	e012      	b.n	800ecea <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ecc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	1ad2      	subs	r2, r2, r3
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eccc:	4413      	add	r3, r2
 800ecce:	461a      	mov	r2, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	441a      	add	r2, r3
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ecd8:	440b      	add	r3, r1
 800ecda:	7812      	ldrb	r2, [r2, #0]
 800ecdc:	701a      	strb	r2, [r3, #0]
								n4++;
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	3301      	adds	r3, #1
 800ece2:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800ece4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ece6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ece8:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ecea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	1ad2      	subs	r2, r2, r3
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf2:	4413      	add	r3, r2
 800ecf4:	69fa      	ldr	r2, [r7, #28]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	dae4      	bge.n	800ecc4 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ecfa:	4917      	ldr	r1, [pc, #92]	; (800ed58 <FT_String_ND+0x40c>)
 800ecfc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ecfe:	f000 fc07 	bl	800f510 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ed02:	4916      	ldr	r1, [pc, #88]	; (800ed5c <FT_String_ND+0x410>)
 800ed04:	2000      	movs	r0, #0
 800ed06:	f000 fc03 	bl	800f510 <strtok>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f000 f9e4 	bl	800f0da <atoi>
 800ed12:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800ed14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed16:	3b01      	subs	r3, #1
 800ed18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	db02      	blt.n	800ed24 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800ed1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed20:	3b01      	subs	r3, #1
 800ed22:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ed24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed26:	3306      	adds	r3, #6
 800ed28:	222c      	movs	r2, #44	; 0x2c
 800ed2a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ed2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2e:	2b09      	cmp	r3, #9
 800ed30:	dc07      	bgt.n	800ed42 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800ed32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed34:	3308      	adds	r3, #8
 800ed36:	223a      	movs	r2, #58	; 0x3a
 800ed38:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	3309      	adds	r3, #9
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ed40:	e019      	b.n	800ed76 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800ed42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed44:	2b63      	cmp	r3, #99	; 0x63
 800ed46:	dc0b      	bgt.n	800ed60 <FT_String_ND+0x414>
														{
															c[9]=':';
 800ed48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed4a:	3309      	adds	r3, #9
 800ed4c:	223a      	movs	r2, #58	; 0x3a
 800ed4e:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800ed50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed52:	330a      	adds	r3, #10
 800ed54:	627b      	str	r3, [r7, #36]	; 0x24
 800ed56:	e00e      	b.n	800ed76 <FT_String_ND+0x42a>
 800ed58:	08010f6c 	.word	0x08010f6c
 800ed5c:	08010f70 	.word	0x08010f70
														}
														else
														{
														if (lngd < 1000)
 800ed60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed66:	da06      	bge.n	800ed76 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800ed68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed6a:	330a      	adds	r3, #10
 800ed6c:	223a      	movs	r2, #58	; 0x3a
 800ed6e:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800ed70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed72:	330b      	adds	r3, #11
 800ed74:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ed76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed7a:	601a      	str	r2, [r3, #0]
							n4=0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ed80:	e016      	b.n	800edb0 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ed82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	1ad2      	subs	r2, r2, r3
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	441a      	add	r2, r3
 800ed8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8e:	4413      	add	r3, r2
 800ed90:	461a      	mov	r2, r3
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	441a      	add	r2, r3
 800ed96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	1ac9      	subs	r1, r1, r3
 800ed9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9e:	440b      	add	r3, r1
 800eda0:	4619      	mov	r1, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	440b      	add	r3, r1
 800eda6:	7812      	ldrb	r2, [r2, #0]
 800eda8:	701a      	strb	r2, [r3, #0]
								n4++;
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	3301      	adds	r3, #1
 800edae:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800edb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	1ad2      	subs	r2, r2, r3
 800edb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb8:	441a      	add	r2, r3
 800edba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbc:	4413      	add	r3, r2
 800edbe:	69fa      	ldr	r2, [r7, #28]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	dade      	bge.n	800ed82 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800edc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc8:	441a      	add	r2, r3
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	1e5a      	subs	r2, r3, #1
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	601a      	str	r2, [r3, #0]
							n5=0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800edd8:	e00f      	b.n	800edfa <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800edda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edde:	1ad2      	subs	r2, r2, r3
 800ede0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede2:	4413      	add	r3, r2
 800ede4:	461a      	mov	r2, r3
 800ede6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ede8:	441a      	add	r2, r3
 800edea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800edee:	440b      	add	r3, r1
 800edf0:	7812      	ldrb	r2, [r2, #0]
 800edf2:	701a      	strb	r2, [r3, #0]
								n5++;
 800edf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf6:	3301      	adds	r3, #1
 800edf8:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800edfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfe:	1ad2      	subs	r2, r2, r3
 800ee00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee02:	441a      	add	r2, r3
 800ee04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	dbe6      	blt.n	800edda <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ee0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee10:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ee12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee18:	441a      	add	r2, r3
 800ee1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1c:	1ad2      	subs	r2, r2, r3
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4413      	add	r3, r2
 800ee24:	69fa      	ldr	r2, [r7, #28]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d102      	bne.n	800ee30 <FT_String_ND+0x4e4>
							{
								estado=4;
 800ee2a:	2304      	movs	r3, #4
 800ee2c:	623b      	str	r3, [r7, #32]
 800ee2e:	e001      	b.n	800ee34 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800ee30:	2305      	movs	r3, #5
 800ee32:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ee34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee36:	2b05      	cmp	r3, #5
 800ee38:	f040 80c5 	bne.w	800efc6 <FT_String_ND+0x67a>
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	f040 80c1 	bne.w	800efc6 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ee44:	e012      	b.n	800ee6c <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ee46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	1ad2      	subs	r2, r2, r3
 800ee4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4e:	4413      	add	r3, r2
 800ee50:	461a      	mov	r2, r3
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	441a      	add	r2, r3
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ee5a:	440b      	add	r3, r1
 800ee5c:	7812      	ldrb	r2, [r2, #0]
 800ee5e:	701a      	strb	r2, [r3, #0]
								n4++;
 800ee60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee62:	3301      	adds	r3, #1
 800ee64:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800ee66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee6a:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ee6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	1ad2      	subs	r2, r2, r3
 800ee72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee74:	4413      	add	r3, r2
 800ee76:	69fa      	ldr	r2, [r7, #28]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	dae4      	bge.n	800ee46 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ee7c:	4955      	ldr	r1, [pc, #340]	; (800efd4 <FT_String_ND+0x688>)
 800ee7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ee80:	f000 fb46 	bl	800f510 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ee84:	4954      	ldr	r1, [pc, #336]	; (800efd8 <FT_String_ND+0x68c>)
 800ee86:	2000      	movs	r0, #0
 800ee88:	f000 fb42 	bl	800f510 <strtok>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f000 f923 	bl	800f0da <atoi>
 800ee94:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ee96:	4950      	ldr	r1, [pc, #320]	; (800efd8 <FT_String_ND+0x68c>)
 800ee98:	2000      	movs	r0, #0
 800ee9a:	f000 fb39 	bl	800f510 <strtok>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 f91a 	bl	800f0da <atoi>
 800eea6:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800eea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	db02      	blt.n	800eeb8 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800eeb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800eeb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeba:	3306      	adds	r3, #6
 800eebc:	222c      	movs	r2, #44	; 0x2c
 800eebe:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec2:	2b09      	cmp	r3, #9
 800eec4:	dc07      	bgt.n	800eed6 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800eec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eec8:	330a      	adds	r3, #10
 800eeca:	223a      	movs	r2, #58	; 0x3a
 800eecc:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800eece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed0:	330b      	adds	r3, #11
 800eed2:	627b      	str	r3, [r7, #36]	; 0x24
 800eed4:	e015      	b.n	800ef02 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800eed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed8:	2b63      	cmp	r3, #99	; 0x63
 800eeda:	dc07      	bgt.n	800eeec <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800eedc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eede:	330b      	adds	r3, #11
 800eee0:	223a      	movs	r2, #58	; 0x3a
 800eee2:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	330c      	adds	r3, #12
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24
 800eeea:	e00a      	b.n	800ef02 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eef2:	da06      	bge.n	800ef02 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800eef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eef6:	330c      	adds	r3, #12
 800eef8:	223a      	movs	r2, #58	; 0x3a
 800eefa:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800eefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefe:	330d      	adds	r3, #13
 800ef00:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ef02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef06:	601a      	str	r2, [r3, #0]
							n4=0;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ef0c:	e016      	b.n	800ef3c <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ef0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	1ad2      	subs	r2, r2, r3
 800ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef16:	441a      	add	r2, r3
 800ef18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1a:	4413      	add	r3, r2
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	441a      	add	r2, r3
 800ef22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	1ac9      	subs	r1, r1, r3
 800ef28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2a:	440b      	add	r3, r1
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	440b      	add	r3, r1
 800ef32:	7812      	ldrb	r2, [r2, #0]
 800ef34:	701a      	strb	r2, [r3, #0]
								n4++;
 800ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef38:	3301      	adds	r3, #1
 800ef3a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ef3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	1ad2      	subs	r2, r2, r3
 800ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef44:	441a      	add	r2, r3
 800ef46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef48:	4413      	add	r3, r2
 800ef4a:	69fa      	ldr	r2, [r7, #28]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	dade      	bge.n	800ef0e <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ef50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef54:	441a      	add	r2, r3
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	1e5a      	subs	r2, r3, #1
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	601a      	str	r2, [r3, #0]
							n5=0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ef64:	e00f      	b.n	800ef86 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ef66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6a:	1ad2      	subs	r2, r2, r3
 800ef6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6e:	4413      	add	r3, r2
 800ef70:	461a      	mov	r2, r3
 800ef72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef74:	441a      	add	r2, r3
 800ef76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ef7a:	440b      	add	r3, r1
 800ef7c:	7812      	ldrb	r2, [r2, #0]
 800ef7e:	701a      	strb	r2, [r3, #0]
								n5++;
 800ef80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef82:	3301      	adds	r3, #1
 800ef84:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ef86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	1ad2      	subs	r2, r2, r3
 800ef8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8e:	441a      	add	r2, r3
 800ef90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	dbe6      	blt.n	800ef66 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ef98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef9c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ef9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa4:	441a      	add	r2, r3
 800efa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa8:	1ad2      	subs	r2, r2, r3
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4413      	add	r3, r2
 800efb0:	69fa      	ldr	r2, [r7, #28]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d105      	bne.n	800efc2 <FT_String_ND+0x676>
							{
								estado=4;
 800efb6:	2304      	movs	r3, #4
 800efb8:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800efba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efbc:	693a      	ldr	r2, [r7, #16]
 800efbe:	601a      	str	r2, [r3, #0]
 800efc0:	e001      	b.n	800efc6 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800efc2:	2305      	movs	r3, #5
 800efc4:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800efc6:	6a3b      	ldr	r3, [r7, #32]
 800efc8:	e000      	b.n	800efcc <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800efca:	2302      	movs	r3, #2
			}
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3740      	adds	r7, #64	; 0x40
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	08010f6c 	.word	0x08010f6c
 800efd8:	08010f70 	.word	0x08010f70

0800efdc <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b088      	sub	sp, #32
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800efe6:	2330      	movs	r3, #48	; 0x30
 800efe8:	60bb      	str	r3, [r7, #8]
 800efea:	f107 030c 	add.w	r3, r7, #12
 800efee:	2200      	movs	r2, #0
 800eff0:	601a      	str	r2, [r3, #0]
 800eff2:	605a      	str	r2, [r3, #4]
 800eff4:	609a      	str	r2, [r3, #8]
 800eff6:	60da      	str	r2, [r3, #12]
int i=0;	
 800eff8:	2300      	movs	r3, #0
 800effa:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800effc:	f107 0308 	add.w	r3, r7, #8
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	490f      	ldr	r1, [pc, #60]	; (800f040 <INTOA+0x64>)
 800f004:	4618      	mov	r0, r3
 800f006:	f000 fa05 	bl	800f414 <siprintf>
		while(i<=strlen(origbuff))
 800f00a:	e00b      	b.n	800f024 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	603a      	str	r2, [r7, #0]
 800f012:	f107 0108 	add.w	r1, r7, #8
 800f016:	69fa      	ldr	r2, [r7, #28]
 800f018:	440a      	add	r2, r1
 800f01a:	7812      	ldrb	r2, [r2, #0]
 800f01c:	701a      	strb	r2, [r3, #0]
		i++;
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	3301      	adds	r3, #1
 800f022:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800f024:	f107 0308 	add.w	r3, r7, #8
 800f028:	4618      	mov	r0, r3
 800f02a:	f7f1 f8e3 	bl	80001f4 <strlen>
 800f02e:	4602      	mov	r2, r0
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	429a      	cmp	r2, r3
 800f034:	d2ea      	bcs.n	800f00c <INTOA+0x30>
		}
		return(i);
 800f036:	69fb      	ldr	r3, [r7, #28]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3720      	adds	r7, #32
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	08010f74 	.word	0x08010f74

0800f044 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b088      	sub	sp, #32
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	603b      	str	r3, [r7, #0]
int x =0;
 800f052:	2300      	movs	r3, #0
 800f054:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800f056:	2300      	movs	r3, #0
 800f058:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800f05a:	f107 0310 	add.w	r3, r7, #16
 800f05e:	617b      	str	r3, [r7, #20]
if (c==0)
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d105      	bne.n	800f072 <CopiaVector+0x2e>
{
	x=strlen(b);
 800f066:	68b8      	ldr	r0, [r7, #8]
 800f068:	f7f1 f8c4 	bl	80001f4 <strlen>
 800f06c:	4603      	mov	r3, r0
 800f06e:	61bb      	str	r3, [r7, #24]
 800f070:	e02e      	b.n	800f0d0 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f07c:	dd01      	ble.n	800f082 <CopiaVector+0x3e>
			{
				return(1);
 800f07e:	2301      	movs	r3, #1
 800f080:	e027      	b.n	800f0d2 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800f082:	2300      	movs	r3, #0
 800f084:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f086:	e00a      	b.n	800f09e <CopiaVector+0x5a>
				{
					*a++=*b++;
 800f088:	68ba      	ldr	r2, [r7, #8]
 800f08a:	1c53      	adds	r3, r2, #1
 800f08c:	60bb      	str	r3, [r7, #8]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	1c59      	adds	r1, r3, #1
 800f092:	60f9      	str	r1, [r7, #12]
 800f094:	7812      	ldrb	r2, [r2, #0]
 800f096:	701a      	strb	r2, [r3, #0]
					p++;
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	3301      	adds	r3, #1
 800f09c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f09e:	69fa      	ldr	r2, [r7, #28]
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	dbf0      	blt.n	800f088 <CopiaVector+0x44>
				}


			if (d==1)
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d111      	bne.n	800f0d0 <CopiaVector+0x8c>
			{
			  p=c;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f0b0:	e008      	b.n	800f0c4 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	1c5a      	adds	r2, r3, #1
 800f0b6:	60fa      	str	r2, [r7, #12]
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	7812      	ldrb	r2, [r2, #0]
 800f0bc:	701a      	strb	r2, [r3, #0]
				  p++;
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	daf2      	bge.n	800f0b2 <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e000      	b.n	800f0d2 <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800f0d0:	2301      	movs	r3, #1
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3720      	adds	r7, #32
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <atoi>:
 800f0da:	220a      	movs	r2, #10
 800f0dc:	2100      	movs	r1, #0
 800f0de:	f000 b89d 	b.w	800f21c <strtol>

0800f0e2 <__itoa>:
 800f0e2:	1e93      	subs	r3, r2, #2
 800f0e4:	2b22      	cmp	r3, #34	; 0x22
 800f0e6:	b510      	push	{r4, lr}
 800f0e8:	460c      	mov	r4, r1
 800f0ea:	d904      	bls.n	800f0f6 <__itoa+0x14>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	700b      	strb	r3, [r1, #0]
 800f0f0:	461c      	mov	r4, r3
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	bd10      	pop	{r4, pc}
 800f0f6:	2a0a      	cmp	r2, #10
 800f0f8:	d109      	bne.n	800f10e <__itoa+0x2c>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	da07      	bge.n	800f10e <__itoa+0x2c>
 800f0fe:	232d      	movs	r3, #45	; 0x2d
 800f100:	700b      	strb	r3, [r1, #0]
 800f102:	4240      	negs	r0, r0
 800f104:	2101      	movs	r1, #1
 800f106:	4421      	add	r1, r4
 800f108:	f000 f892 	bl	800f230 <__utoa>
 800f10c:	e7f1      	b.n	800f0f2 <__itoa+0x10>
 800f10e:	2100      	movs	r1, #0
 800f110:	e7f9      	b.n	800f106 <__itoa+0x24>

0800f112 <itoa>:
 800f112:	f7ff bfe6 	b.w	800f0e2 <__itoa>
	...

0800f118 <_strtol_l.constprop.0>:
 800f118:	2b01      	cmp	r3, #1
 800f11a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f11e:	d001      	beq.n	800f124 <_strtol_l.constprop.0+0xc>
 800f120:	2b24      	cmp	r3, #36	; 0x24
 800f122:	d906      	bls.n	800f132 <_strtol_l.constprop.0+0x1a>
 800f124:	f000 fa96 	bl	800f654 <__errno>
 800f128:	2316      	movs	r3, #22
 800f12a:	6003      	str	r3, [r0, #0]
 800f12c:	2000      	movs	r0, #0
 800f12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f132:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f218 <_strtol_l.constprop.0+0x100>
 800f136:	460d      	mov	r5, r1
 800f138:	462e      	mov	r6, r5
 800f13a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f13e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f142:	f017 0708 	ands.w	r7, r7, #8
 800f146:	d1f7      	bne.n	800f138 <_strtol_l.constprop.0+0x20>
 800f148:	2c2d      	cmp	r4, #45	; 0x2d
 800f14a:	d132      	bne.n	800f1b2 <_strtol_l.constprop.0+0x9a>
 800f14c:	782c      	ldrb	r4, [r5, #0]
 800f14e:	2701      	movs	r7, #1
 800f150:	1cb5      	adds	r5, r6, #2
 800f152:	2b00      	cmp	r3, #0
 800f154:	d05b      	beq.n	800f20e <_strtol_l.constprop.0+0xf6>
 800f156:	2b10      	cmp	r3, #16
 800f158:	d109      	bne.n	800f16e <_strtol_l.constprop.0+0x56>
 800f15a:	2c30      	cmp	r4, #48	; 0x30
 800f15c:	d107      	bne.n	800f16e <_strtol_l.constprop.0+0x56>
 800f15e:	782c      	ldrb	r4, [r5, #0]
 800f160:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f164:	2c58      	cmp	r4, #88	; 0x58
 800f166:	d14d      	bne.n	800f204 <_strtol_l.constprop.0+0xec>
 800f168:	786c      	ldrb	r4, [r5, #1]
 800f16a:	2310      	movs	r3, #16
 800f16c:	3502      	adds	r5, #2
 800f16e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f172:	f108 38ff 	add.w	r8, r8, #4294967295
 800f176:	f04f 0e00 	mov.w	lr, #0
 800f17a:	fbb8 f9f3 	udiv	r9, r8, r3
 800f17e:	4676      	mov	r6, lr
 800f180:	fb03 8a19 	mls	sl, r3, r9, r8
 800f184:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f188:	f1bc 0f09 	cmp.w	ip, #9
 800f18c:	d816      	bhi.n	800f1bc <_strtol_l.constprop.0+0xa4>
 800f18e:	4664      	mov	r4, ip
 800f190:	42a3      	cmp	r3, r4
 800f192:	dd24      	ble.n	800f1de <_strtol_l.constprop.0+0xc6>
 800f194:	f1be 3fff 	cmp.w	lr, #4294967295
 800f198:	d008      	beq.n	800f1ac <_strtol_l.constprop.0+0x94>
 800f19a:	45b1      	cmp	r9, r6
 800f19c:	d31c      	bcc.n	800f1d8 <_strtol_l.constprop.0+0xc0>
 800f19e:	d101      	bne.n	800f1a4 <_strtol_l.constprop.0+0x8c>
 800f1a0:	45a2      	cmp	sl, r4
 800f1a2:	db19      	blt.n	800f1d8 <_strtol_l.constprop.0+0xc0>
 800f1a4:	fb06 4603 	mla	r6, r6, r3, r4
 800f1a8:	f04f 0e01 	mov.w	lr, #1
 800f1ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1b0:	e7e8      	b.n	800f184 <_strtol_l.constprop.0+0x6c>
 800f1b2:	2c2b      	cmp	r4, #43	; 0x2b
 800f1b4:	bf04      	itt	eq
 800f1b6:	782c      	ldrbeq	r4, [r5, #0]
 800f1b8:	1cb5      	addeq	r5, r6, #2
 800f1ba:	e7ca      	b.n	800f152 <_strtol_l.constprop.0+0x3a>
 800f1bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f1c0:	f1bc 0f19 	cmp.w	ip, #25
 800f1c4:	d801      	bhi.n	800f1ca <_strtol_l.constprop.0+0xb2>
 800f1c6:	3c37      	subs	r4, #55	; 0x37
 800f1c8:	e7e2      	b.n	800f190 <_strtol_l.constprop.0+0x78>
 800f1ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f1ce:	f1bc 0f19 	cmp.w	ip, #25
 800f1d2:	d804      	bhi.n	800f1de <_strtol_l.constprop.0+0xc6>
 800f1d4:	3c57      	subs	r4, #87	; 0x57
 800f1d6:	e7db      	b.n	800f190 <_strtol_l.constprop.0+0x78>
 800f1d8:	f04f 3eff 	mov.w	lr, #4294967295
 800f1dc:	e7e6      	b.n	800f1ac <_strtol_l.constprop.0+0x94>
 800f1de:	f1be 3fff 	cmp.w	lr, #4294967295
 800f1e2:	d105      	bne.n	800f1f0 <_strtol_l.constprop.0+0xd8>
 800f1e4:	2322      	movs	r3, #34	; 0x22
 800f1e6:	6003      	str	r3, [r0, #0]
 800f1e8:	4646      	mov	r6, r8
 800f1ea:	b942      	cbnz	r2, 800f1fe <_strtol_l.constprop.0+0xe6>
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	e79e      	b.n	800f12e <_strtol_l.constprop.0+0x16>
 800f1f0:	b107      	cbz	r7, 800f1f4 <_strtol_l.constprop.0+0xdc>
 800f1f2:	4276      	negs	r6, r6
 800f1f4:	2a00      	cmp	r2, #0
 800f1f6:	d0f9      	beq.n	800f1ec <_strtol_l.constprop.0+0xd4>
 800f1f8:	f1be 0f00 	cmp.w	lr, #0
 800f1fc:	d000      	beq.n	800f200 <_strtol_l.constprop.0+0xe8>
 800f1fe:	1e69      	subs	r1, r5, #1
 800f200:	6011      	str	r1, [r2, #0]
 800f202:	e7f3      	b.n	800f1ec <_strtol_l.constprop.0+0xd4>
 800f204:	2430      	movs	r4, #48	; 0x30
 800f206:	2b00      	cmp	r3, #0
 800f208:	d1b1      	bne.n	800f16e <_strtol_l.constprop.0+0x56>
 800f20a:	2308      	movs	r3, #8
 800f20c:	e7af      	b.n	800f16e <_strtol_l.constprop.0+0x56>
 800f20e:	2c30      	cmp	r4, #48	; 0x30
 800f210:	d0a5      	beq.n	800f15e <_strtol_l.constprop.0+0x46>
 800f212:	230a      	movs	r3, #10
 800f214:	e7ab      	b.n	800f16e <_strtol_l.constprop.0+0x56>
 800f216:	bf00      	nop
 800f218:	08010fb6 	.word	0x08010fb6

0800f21c <strtol>:
 800f21c:	4613      	mov	r3, r2
 800f21e:	460a      	mov	r2, r1
 800f220:	4601      	mov	r1, r0
 800f222:	4802      	ldr	r0, [pc, #8]	; (800f22c <strtol+0x10>)
 800f224:	6800      	ldr	r0, [r0, #0]
 800f226:	f7ff bf77 	b.w	800f118 <_strtol_l.constprop.0>
 800f22a:	bf00      	nop
 800f22c:	20000174 	.word	0x20000174

0800f230 <__utoa>:
 800f230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f232:	4c1f      	ldr	r4, [pc, #124]	; (800f2b0 <__utoa+0x80>)
 800f234:	b08b      	sub	sp, #44	; 0x2c
 800f236:	4605      	mov	r5, r0
 800f238:	460b      	mov	r3, r1
 800f23a:	466e      	mov	r6, sp
 800f23c:	f104 0c20 	add.w	ip, r4, #32
 800f240:	6820      	ldr	r0, [r4, #0]
 800f242:	6861      	ldr	r1, [r4, #4]
 800f244:	4637      	mov	r7, r6
 800f246:	c703      	stmia	r7!, {r0, r1}
 800f248:	3408      	adds	r4, #8
 800f24a:	4564      	cmp	r4, ip
 800f24c:	463e      	mov	r6, r7
 800f24e:	d1f7      	bne.n	800f240 <__utoa+0x10>
 800f250:	7921      	ldrb	r1, [r4, #4]
 800f252:	7139      	strb	r1, [r7, #4]
 800f254:	1e91      	subs	r1, r2, #2
 800f256:	6820      	ldr	r0, [r4, #0]
 800f258:	6038      	str	r0, [r7, #0]
 800f25a:	2922      	cmp	r1, #34	; 0x22
 800f25c:	f04f 0100 	mov.w	r1, #0
 800f260:	d904      	bls.n	800f26c <__utoa+0x3c>
 800f262:	7019      	strb	r1, [r3, #0]
 800f264:	460b      	mov	r3, r1
 800f266:	4618      	mov	r0, r3
 800f268:	b00b      	add	sp, #44	; 0x2c
 800f26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f26c:	1e58      	subs	r0, r3, #1
 800f26e:	4684      	mov	ip, r0
 800f270:	fbb5 f7f2 	udiv	r7, r5, r2
 800f274:	fb02 5617 	mls	r6, r2, r7, r5
 800f278:	3628      	adds	r6, #40	; 0x28
 800f27a:	446e      	add	r6, sp
 800f27c:	460c      	mov	r4, r1
 800f27e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f282:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f286:	462e      	mov	r6, r5
 800f288:	42b2      	cmp	r2, r6
 800f28a:	f101 0101 	add.w	r1, r1, #1
 800f28e:	463d      	mov	r5, r7
 800f290:	d9ee      	bls.n	800f270 <__utoa+0x40>
 800f292:	2200      	movs	r2, #0
 800f294:	545a      	strb	r2, [r3, r1]
 800f296:	1919      	adds	r1, r3, r4
 800f298:	1aa5      	subs	r5, r4, r2
 800f29a:	42aa      	cmp	r2, r5
 800f29c:	dae3      	bge.n	800f266 <__utoa+0x36>
 800f29e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f2a2:	780e      	ldrb	r6, [r1, #0]
 800f2a4:	7006      	strb	r6, [r0, #0]
 800f2a6:	3201      	adds	r2, #1
 800f2a8:	f801 5901 	strb.w	r5, [r1], #-1
 800f2ac:	e7f4      	b.n	800f298 <__utoa+0x68>
 800f2ae:	bf00      	nop
 800f2b0:	08010f90 	.word	0x08010f90

0800f2b4 <std>:
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	b510      	push	{r4, lr}
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	e9c0 3300 	strd	r3, r3, [r0]
 800f2be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2c2:	6083      	str	r3, [r0, #8]
 800f2c4:	8181      	strh	r1, [r0, #12]
 800f2c6:	6643      	str	r3, [r0, #100]	; 0x64
 800f2c8:	81c2      	strh	r2, [r0, #14]
 800f2ca:	6183      	str	r3, [r0, #24]
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	2208      	movs	r2, #8
 800f2d0:	305c      	adds	r0, #92	; 0x5c
 800f2d2:	f000 f902 	bl	800f4da <memset>
 800f2d6:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <std+0x38>)
 800f2d8:	6263      	str	r3, [r4, #36]	; 0x24
 800f2da:	4b05      	ldr	r3, [pc, #20]	; (800f2f0 <std+0x3c>)
 800f2dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2de:	4b05      	ldr	r3, [pc, #20]	; (800f2f4 <std+0x40>)
 800f2e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2e2:	4b05      	ldr	r3, [pc, #20]	; (800f2f8 <std+0x44>)
 800f2e4:	6224      	str	r4, [r4, #32]
 800f2e6:	6323      	str	r3, [r4, #48]	; 0x30
 800f2e8:	bd10      	pop	{r4, pc}
 800f2ea:	bf00      	nop
 800f2ec:	0800f455 	.word	0x0800f455
 800f2f0:	0800f477 	.word	0x0800f477
 800f2f4:	0800f4af 	.word	0x0800f4af
 800f2f8:	0800f4d3 	.word	0x0800f4d3

0800f2fc <stdio_exit_handler>:
 800f2fc:	4a02      	ldr	r2, [pc, #8]	; (800f308 <stdio_exit_handler+0xc>)
 800f2fe:	4903      	ldr	r1, [pc, #12]	; (800f30c <stdio_exit_handler+0x10>)
 800f300:	4803      	ldr	r0, [pc, #12]	; (800f310 <stdio_exit_handler+0x14>)
 800f302:	f000 b869 	b.w	800f3d8 <_fwalk_sglue>
 800f306:	bf00      	nop
 800f308:	2000011c 	.word	0x2000011c
 800f30c:	0800ffd5 	.word	0x0800ffd5
 800f310:	20000128 	.word	0x20000128

0800f314 <cleanup_stdio>:
 800f314:	6841      	ldr	r1, [r0, #4]
 800f316:	4b0c      	ldr	r3, [pc, #48]	; (800f348 <cleanup_stdio+0x34>)
 800f318:	4299      	cmp	r1, r3
 800f31a:	b510      	push	{r4, lr}
 800f31c:	4604      	mov	r4, r0
 800f31e:	d001      	beq.n	800f324 <cleanup_stdio+0x10>
 800f320:	f000 fe58 	bl	800ffd4 <_fflush_r>
 800f324:	68a1      	ldr	r1, [r4, #8]
 800f326:	4b09      	ldr	r3, [pc, #36]	; (800f34c <cleanup_stdio+0x38>)
 800f328:	4299      	cmp	r1, r3
 800f32a:	d002      	beq.n	800f332 <cleanup_stdio+0x1e>
 800f32c:	4620      	mov	r0, r4
 800f32e:	f000 fe51 	bl	800ffd4 <_fflush_r>
 800f332:	68e1      	ldr	r1, [r4, #12]
 800f334:	4b06      	ldr	r3, [pc, #24]	; (800f350 <cleanup_stdio+0x3c>)
 800f336:	4299      	cmp	r1, r3
 800f338:	d004      	beq.n	800f344 <cleanup_stdio+0x30>
 800f33a:	4620      	mov	r0, r4
 800f33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f340:	f000 be48 	b.w	800ffd4 <_fflush_r>
 800f344:	bd10      	pop	{r4, pc}
 800f346:	bf00      	nop
 800f348:	20004068 	.word	0x20004068
 800f34c:	200040d0 	.word	0x200040d0
 800f350:	20004138 	.word	0x20004138

0800f354 <global_stdio_init.part.0>:
 800f354:	b510      	push	{r4, lr}
 800f356:	4b0b      	ldr	r3, [pc, #44]	; (800f384 <global_stdio_init.part.0+0x30>)
 800f358:	4c0b      	ldr	r4, [pc, #44]	; (800f388 <global_stdio_init.part.0+0x34>)
 800f35a:	4a0c      	ldr	r2, [pc, #48]	; (800f38c <global_stdio_init.part.0+0x38>)
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	4620      	mov	r0, r4
 800f360:	2200      	movs	r2, #0
 800f362:	2104      	movs	r1, #4
 800f364:	f7ff ffa6 	bl	800f2b4 <std>
 800f368:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f36c:	2201      	movs	r2, #1
 800f36e:	2109      	movs	r1, #9
 800f370:	f7ff ffa0 	bl	800f2b4 <std>
 800f374:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f378:	2202      	movs	r2, #2
 800f37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f37e:	2112      	movs	r1, #18
 800f380:	f7ff bf98 	b.w	800f2b4 <std>
 800f384:	200041a0 	.word	0x200041a0
 800f388:	20004068 	.word	0x20004068
 800f38c:	0800f2fd 	.word	0x0800f2fd

0800f390 <__sfp_lock_acquire>:
 800f390:	4801      	ldr	r0, [pc, #4]	; (800f398 <__sfp_lock_acquire+0x8>)
 800f392:	f000 b989 	b.w	800f6a8 <__retarget_lock_acquire_recursive>
 800f396:	bf00      	nop
 800f398:	200041a9 	.word	0x200041a9

0800f39c <__sfp_lock_release>:
 800f39c:	4801      	ldr	r0, [pc, #4]	; (800f3a4 <__sfp_lock_release+0x8>)
 800f39e:	f000 b984 	b.w	800f6aa <__retarget_lock_release_recursive>
 800f3a2:	bf00      	nop
 800f3a4:	200041a9 	.word	0x200041a9

0800f3a8 <__sinit>:
 800f3a8:	b510      	push	{r4, lr}
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	f7ff fff0 	bl	800f390 <__sfp_lock_acquire>
 800f3b0:	6a23      	ldr	r3, [r4, #32]
 800f3b2:	b11b      	cbz	r3, 800f3bc <__sinit+0x14>
 800f3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3b8:	f7ff bff0 	b.w	800f39c <__sfp_lock_release>
 800f3bc:	4b04      	ldr	r3, [pc, #16]	; (800f3d0 <__sinit+0x28>)
 800f3be:	6223      	str	r3, [r4, #32]
 800f3c0:	4b04      	ldr	r3, [pc, #16]	; (800f3d4 <__sinit+0x2c>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d1f5      	bne.n	800f3b4 <__sinit+0xc>
 800f3c8:	f7ff ffc4 	bl	800f354 <global_stdio_init.part.0>
 800f3cc:	e7f2      	b.n	800f3b4 <__sinit+0xc>
 800f3ce:	bf00      	nop
 800f3d0:	0800f315 	.word	0x0800f315
 800f3d4:	200041a0 	.word	0x200041a0

0800f3d8 <_fwalk_sglue>:
 800f3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3dc:	4607      	mov	r7, r0
 800f3de:	4688      	mov	r8, r1
 800f3e0:	4614      	mov	r4, r2
 800f3e2:	2600      	movs	r6, #0
 800f3e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3e8:	f1b9 0901 	subs.w	r9, r9, #1
 800f3ec:	d505      	bpl.n	800f3fa <_fwalk_sglue+0x22>
 800f3ee:	6824      	ldr	r4, [r4, #0]
 800f3f0:	2c00      	cmp	r4, #0
 800f3f2:	d1f7      	bne.n	800f3e4 <_fwalk_sglue+0xc>
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3fa:	89ab      	ldrh	r3, [r5, #12]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d907      	bls.n	800f410 <_fwalk_sglue+0x38>
 800f400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f404:	3301      	adds	r3, #1
 800f406:	d003      	beq.n	800f410 <_fwalk_sglue+0x38>
 800f408:	4629      	mov	r1, r5
 800f40a:	4638      	mov	r0, r7
 800f40c:	47c0      	blx	r8
 800f40e:	4306      	orrs	r6, r0
 800f410:	3568      	adds	r5, #104	; 0x68
 800f412:	e7e9      	b.n	800f3e8 <_fwalk_sglue+0x10>

0800f414 <siprintf>:
 800f414:	b40e      	push	{r1, r2, r3}
 800f416:	b500      	push	{lr}
 800f418:	b09c      	sub	sp, #112	; 0x70
 800f41a:	ab1d      	add	r3, sp, #116	; 0x74
 800f41c:	9002      	str	r0, [sp, #8]
 800f41e:	9006      	str	r0, [sp, #24]
 800f420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f424:	4809      	ldr	r0, [pc, #36]	; (800f44c <siprintf+0x38>)
 800f426:	9107      	str	r1, [sp, #28]
 800f428:	9104      	str	r1, [sp, #16]
 800f42a:	4909      	ldr	r1, [pc, #36]	; (800f450 <siprintf+0x3c>)
 800f42c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f430:	9105      	str	r1, [sp, #20]
 800f432:	6800      	ldr	r0, [r0, #0]
 800f434:	9301      	str	r3, [sp, #4]
 800f436:	a902      	add	r1, sp, #8
 800f438:	f000 fab8 	bl	800f9ac <_svfiprintf_r>
 800f43c:	9b02      	ldr	r3, [sp, #8]
 800f43e:	2200      	movs	r2, #0
 800f440:	701a      	strb	r2, [r3, #0]
 800f442:	b01c      	add	sp, #112	; 0x70
 800f444:	f85d eb04 	ldr.w	lr, [sp], #4
 800f448:	b003      	add	sp, #12
 800f44a:	4770      	bx	lr
 800f44c:	20000174 	.word	0x20000174
 800f450:	ffff0208 	.word	0xffff0208

0800f454 <__sread>:
 800f454:	b510      	push	{r4, lr}
 800f456:	460c      	mov	r4, r1
 800f458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f45c:	f000 f8d6 	bl	800f60c <_read_r>
 800f460:	2800      	cmp	r0, #0
 800f462:	bfab      	itete	ge
 800f464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f466:	89a3      	ldrhlt	r3, [r4, #12]
 800f468:	181b      	addge	r3, r3, r0
 800f46a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f46e:	bfac      	ite	ge
 800f470:	6563      	strge	r3, [r4, #84]	; 0x54
 800f472:	81a3      	strhlt	r3, [r4, #12]
 800f474:	bd10      	pop	{r4, pc}

0800f476 <__swrite>:
 800f476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47a:	461f      	mov	r7, r3
 800f47c:	898b      	ldrh	r3, [r1, #12]
 800f47e:	05db      	lsls	r3, r3, #23
 800f480:	4605      	mov	r5, r0
 800f482:	460c      	mov	r4, r1
 800f484:	4616      	mov	r6, r2
 800f486:	d505      	bpl.n	800f494 <__swrite+0x1e>
 800f488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f48c:	2302      	movs	r3, #2
 800f48e:	2200      	movs	r2, #0
 800f490:	f000 f8aa 	bl	800f5e8 <_lseek_r>
 800f494:	89a3      	ldrh	r3, [r4, #12]
 800f496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f49a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f49e:	81a3      	strh	r3, [r4, #12]
 800f4a0:	4632      	mov	r2, r6
 800f4a2:	463b      	mov	r3, r7
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4aa:	f000 b8c1 	b.w	800f630 <_write_r>

0800f4ae <__sseek>:
 800f4ae:	b510      	push	{r4, lr}
 800f4b0:	460c      	mov	r4, r1
 800f4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4b6:	f000 f897 	bl	800f5e8 <_lseek_r>
 800f4ba:	1c43      	adds	r3, r0, #1
 800f4bc:	89a3      	ldrh	r3, [r4, #12]
 800f4be:	bf15      	itete	ne
 800f4c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4ca:	81a3      	strheq	r3, [r4, #12]
 800f4cc:	bf18      	it	ne
 800f4ce:	81a3      	strhne	r3, [r4, #12]
 800f4d0:	bd10      	pop	{r4, pc}

0800f4d2 <__sclose>:
 800f4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4d6:	f000 b877 	b.w	800f5c8 <_close_r>

0800f4da <memset>:
 800f4da:	4402      	add	r2, r0
 800f4dc:	4603      	mov	r3, r0
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d100      	bne.n	800f4e4 <memset+0xa>
 800f4e2:	4770      	bx	lr
 800f4e4:	f803 1b01 	strb.w	r1, [r3], #1
 800f4e8:	e7f9      	b.n	800f4de <memset+0x4>

0800f4ea <strncat>:
 800f4ea:	b530      	push	{r4, r5, lr}
 800f4ec:	4604      	mov	r4, r0
 800f4ee:	7825      	ldrb	r5, [r4, #0]
 800f4f0:	4623      	mov	r3, r4
 800f4f2:	3401      	adds	r4, #1
 800f4f4:	2d00      	cmp	r5, #0
 800f4f6:	d1fa      	bne.n	800f4ee <strncat+0x4>
 800f4f8:	3a01      	subs	r2, #1
 800f4fa:	d304      	bcc.n	800f506 <strncat+0x1c>
 800f4fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f500:	f803 4b01 	strb.w	r4, [r3], #1
 800f504:	b904      	cbnz	r4, 800f508 <strncat+0x1e>
 800f506:	bd30      	pop	{r4, r5, pc}
 800f508:	2a00      	cmp	r2, #0
 800f50a:	d1f5      	bne.n	800f4f8 <strncat+0xe>
 800f50c:	701a      	strb	r2, [r3, #0]
 800f50e:	e7f3      	b.n	800f4f8 <strncat+0xe>

0800f510 <strtok>:
 800f510:	4b16      	ldr	r3, [pc, #88]	; (800f56c <strtok+0x5c>)
 800f512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f514:	681e      	ldr	r6, [r3, #0]
 800f516:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f518:	4605      	mov	r5, r0
 800f51a:	b9fc      	cbnz	r4, 800f55c <strtok+0x4c>
 800f51c:	2050      	movs	r0, #80	; 0x50
 800f51e:	9101      	str	r1, [sp, #4]
 800f520:	f000 f936 	bl	800f790 <malloc>
 800f524:	9901      	ldr	r1, [sp, #4]
 800f526:	6470      	str	r0, [r6, #68]	; 0x44
 800f528:	4602      	mov	r2, r0
 800f52a:	b920      	cbnz	r0, 800f536 <strtok+0x26>
 800f52c:	4b10      	ldr	r3, [pc, #64]	; (800f570 <strtok+0x60>)
 800f52e:	4811      	ldr	r0, [pc, #68]	; (800f574 <strtok+0x64>)
 800f530:	215b      	movs	r1, #91	; 0x5b
 800f532:	f000 f8c3 	bl	800f6bc <__assert_func>
 800f536:	e9c0 4400 	strd	r4, r4, [r0]
 800f53a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f53e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f542:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f546:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f54a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f54e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f552:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f556:	6184      	str	r4, [r0, #24]
 800f558:	7704      	strb	r4, [r0, #28]
 800f55a:	6244      	str	r4, [r0, #36]	; 0x24
 800f55c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f55e:	2301      	movs	r3, #1
 800f560:	4628      	mov	r0, r5
 800f562:	b002      	add	sp, #8
 800f564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f568:	f000 b806 	b.w	800f578 <__strtok_r>
 800f56c:	20000174 	.word	0x20000174
 800f570:	080110b6 	.word	0x080110b6
 800f574:	080110cd 	.word	0x080110cd

0800f578 <__strtok_r>:
 800f578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f57a:	b908      	cbnz	r0, 800f580 <__strtok_r+0x8>
 800f57c:	6810      	ldr	r0, [r2, #0]
 800f57e:	b188      	cbz	r0, 800f5a4 <__strtok_r+0x2c>
 800f580:	4604      	mov	r4, r0
 800f582:	4620      	mov	r0, r4
 800f584:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f588:	460f      	mov	r7, r1
 800f58a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f58e:	b91e      	cbnz	r6, 800f598 <__strtok_r+0x20>
 800f590:	b965      	cbnz	r5, 800f5ac <__strtok_r+0x34>
 800f592:	6015      	str	r5, [r2, #0]
 800f594:	4628      	mov	r0, r5
 800f596:	e005      	b.n	800f5a4 <__strtok_r+0x2c>
 800f598:	42b5      	cmp	r5, r6
 800f59a:	d1f6      	bne.n	800f58a <__strtok_r+0x12>
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d1f0      	bne.n	800f582 <__strtok_r+0xa>
 800f5a0:	6014      	str	r4, [r2, #0]
 800f5a2:	7003      	strb	r3, [r0, #0]
 800f5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5a6:	461c      	mov	r4, r3
 800f5a8:	e00c      	b.n	800f5c4 <__strtok_r+0x4c>
 800f5aa:	b915      	cbnz	r5, 800f5b2 <__strtok_r+0x3a>
 800f5ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5b0:	460e      	mov	r6, r1
 800f5b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f5b6:	42ab      	cmp	r3, r5
 800f5b8:	d1f7      	bne.n	800f5aa <__strtok_r+0x32>
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d0f3      	beq.n	800f5a6 <__strtok_r+0x2e>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f5c4:	6014      	str	r4, [r2, #0]
 800f5c6:	e7ed      	b.n	800f5a4 <__strtok_r+0x2c>

0800f5c8 <_close_r>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	4d06      	ldr	r5, [pc, #24]	; (800f5e4 <_close_r+0x1c>)
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	4608      	mov	r0, r1
 800f5d2:	602b      	str	r3, [r5, #0]
 800f5d4:	f7f3 fa05 	bl	80029e2 <_close>
 800f5d8:	1c43      	adds	r3, r0, #1
 800f5da:	d102      	bne.n	800f5e2 <_close_r+0x1a>
 800f5dc:	682b      	ldr	r3, [r5, #0]
 800f5de:	b103      	cbz	r3, 800f5e2 <_close_r+0x1a>
 800f5e0:	6023      	str	r3, [r4, #0]
 800f5e2:	bd38      	pop	{r3, r4, r5, pc}
 800f5e4:	200041a4 	.word	0x200041a4

0800f5e8 <_lseek_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4d07      	ldr	r5, [pc, #28]	; (800f608 <_lseek_r+0x20>)
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	4608      	mov	r0, r1
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	602a      	str	r2, [r5, #0]
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	f7f3 fa1a 	bl	8002a30 <_lseek>
 800f5fc:	1c43      	adds	r3, r0, #1
 800f5fe:	d102      	bne.n	800f606 <_lseek_r+0x1e>
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	b103      	cbz	r3, 800f606 <_lseek_r+0x1e>
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	bd38      	pop	{r3, r4, r5, pc}
 800f608:	200041a4 	.word	0x200041a4

0800f60c <_read_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	4d07      	ldr	r5, [pc, #28]	; (800f62c <_read_r+0x20>)
 800f610:	4604      	mov	r4, r0
 800f612:	4608      	mov	r0, r1
 800f614:	4611      	mov	r1, r2
 800f616:	2200      	movs	r2, #0
 800f618:	602a      	str	r2, [r5, #0]
 800f61a:	461a      	mov	r2, r3
 800f61c:	f7f3 f9a8 	bl	8002970 <_read>
 800f620:	1c43      	adds	r3, r0, #1
 800f622:	d102      	bne.n	800f62a <_read_r+0x1e>
 800f624:	682b      	ldr	r3, [r5, #0]
 800f626:	b103      	cbz	r3, 800f62a <_read_r+0x1e>
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	bd38      	pop	{r3, r4, r5, pc}
 800f62c:	200041a4 	.word	0x200041a4

0800f630 <_write_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	4d07      	ldr	r5, [pc, #28]	; (800f650 <_write_r+0x20>)
 800f634:	4604      	mov	r4, r0
 800f636:	4608      	mov	r0, r1
 800f638:	4611      	mov	r1, r2
 800f63a:	2200      	movs	r2, #0
 800f63c:	602a      	str	r2, [r5, #0]
 800f63e:	461a      	mov	r2, r3
 800f640:	f7f3 f9b3 	bl	80029aa <_write>
 800f644:	1c43      	adds	r3, r0, #1
 800f646:	d102      	bne.n	800f64e <_write_r+0x1e>
 800f648:	682b      	ldr	r3, [r5, #0]
 800f64a:	b103      	cbz	r3, 800f64e <_write_r+0x1e>
 800f64c:	6023      	str	r3, [r4, #0]
 800f64e:	bd38      	pop	{r3, r4, r5, pc}
 800f650:	200041a4 	.word	0x200041a4

0800f654 <__errno>:
 800f654:	4b01      	ldr	r3, [pc, #4]	; (800f65c <__errno+0x8>)
 800f656:	6818      	ldr	r0, [r3, #0]
 800f658:	4770      	bx	lr
 800f65a:	bf00      	nop
 800f65c:	20000174 	.word	0x20000174

0800f660 <__libc_init_array>:
 800f660:	b570      	push	{r4, r5, r6, lr}
 800f662:	4d0d      	ldr	r5, [pc, #52]	; (800f698 <__libc_init_array+0x38>)
 800f664:	4c0d      	ldr	r4, [pc, #52]	; (800f69c <__libc_init_array+0x3c>)
 800f666:	1b64      	subs	r4, r4, r5
 800f668:	10a4      	asrs	r4, r4, #2
 800f66a:	2600      	movs	r6, #0
 800f66c:	42a6      	cmp	r6, r4
 800f66e:	d109      	bne.n	800f684 <__libc_init_array+0x24>
 800f670:	4d0b      	ldr	r5, [pc, #44]	; (800f6a0 <__libc_init_array+0x40>)
 800f672:	4c0c      	ldr	r4, [pc, #48]	; (800f6a4 <__libc_init_array+0x44>)
 800f674:	f001 f800 	bl	8010678 <_init>
 800f678:	1b64      	subs	r4, r4, r5
 800f67a:	10a4      	asrs	r4, r4, #2
 800f67c:	2600      	movs	r6, #0
 800f67e:	42a6      	cmp	r6, r4
 800f680:	d105      	bne.n	800f68e <__libc_init_array+0x2e>
 800f682:	bd70      	pop	{r4, r5, r6, pc}
 800f684:	f855 3b04 	ldr.w	r3, [r5], #4
 800f688:	4798      	blx	r3
 800f68a:	3601      	adds	r6, #1
 800f68c:	e7ee      	b.n	800f66c <__libc_init_array+0xc>
 800f68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f692:	4798      	blx	r3
 800f694:	3601      	adds	r6, #1
 800f696:	e7f2      	b.n	800f67e <__libc_init_array+0x1e>
 800f698:	080111a0 	.word	0x080111a0
 800f69c:	080111a0 	.word	0x080111a0
 800f6a0:	080111a0 	.word	0x080111a0
 800f6a4:	080111a4 	.word	0x080111a4

0800f6a8 <__retarget_lock_acquire_recursive>:
 800f6a8:	4770      	bx	lr

0800f6aa <__retarget_lock_release_recursive>:
 800f6aa:	4770      	bx	lr

0800f6ac <strcpy>:
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6b2:	f803 2b01 	strb.w	r2, [r3], #1
 800f6b6:	2a00      	cmp	r2, #0
 800f6b8:	d1f9      	bne.n	800f6ae <strcpy+0x2>
 800f6ba:	4770      	bx	lr

0800f6bc <__assert_func>:
 800f6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6be:	4614      	mov	r4, r2
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	4b09      	ldr	r3, [pc, #36]	; (800f6e8 <__assert_func+0x2c>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	68d8      	ldr	r0, [r3, #12]
 800f6ca:	b14c      	cbz	r4, 800f6e0 <__assert_func+0x24>
 800f6cc:	4b07      	ldr	r3, [pc, #28]	; (800f6ec <__assert_func+0x30>)
 800f6ce:	9100      	str	r1, [sp, #0]
 800f6d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6d4:	4906      	ldr	r1, [pc, #24]	; (800f6f0 <__assert_func+0x34>)
 800f6d6:	462b      	mov	r3, r5
 800f6d8:	f000 fca4 	bl	8010024 <fiprintf>
 800f6dc:	f000 fcec 	bl	80100b8 <abort>
 800f6e0:	4b04      	ldr	r3, [pc, #16]	; (800f6f4 <__assert_func+0x38>)
 800f6e2:	461c      	mov	r4, r3
 800f6e4:	e7f3      	b.n	800f6ce <__assert_func+0x12>
 800f6e6:	bf00      	nop
 800f6e8:	20000174 	.word	0x20000174
 800f6ec:	08011127 	.word	0x08011127
 800f6f0:	08011134 	.word	0x08011134
 800f6f4:	08011162 	.word	0x08011162

0800f6f8 <_free_r>:
 800f6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6fa:	2900      	cmp	r1, #0
 800f6fc:	d044      	beq.n	800f788 <_free_r+0x90>
 800f6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f702:	9001      	str	r0, [sp, #4]
 800f704:	2b00      	cmp	r3, #0
 800f706:	f1a1 0404 	sub.w	r4, r1, #4
 800f70a:	bfb8      	it	lt
 800f70c:	18e4      	addlt	r4, r4, r3
 800f70e:	f000 f8e7 	bl	800f8e0 <__malloc_lock>
 800f712:	4a1e      	ldr	r2, [pc, #120]	; (800f78c <_free_r+0x94>)
 800f714:	9801      	ldr	r0, [sp, #4]
 800f716:	6813      	ldr	r3, [r2, #0]
 800f718:	b933      	cbnz	r3, 800f728 <_free_r+0x30>
 800f71a:	6063      	str	r3, [r4, #4]
 800f71c:	6014      	str	r4, [r2, #0]
 800f71e:	b003      	add	sp, #12
 800f720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f724:	f000 b8e2 	b.w	800f8ec <__malloc_unlock>
 800f728:	42a3      	cmp	r3, r4
 800f72a:	d908      	bls.n	800f73e <_free_r+0x46>
 800f72c:	6825      	ldr	r5, [r4, #0]
 800f72e:	1961      	adds	r1, r4, r5
 800f730:	428b      	cmp	r3, r1
 800f732:	bf01      	itttt	eq
 800f734:	6819      	ldreq	r1, [r3, #0]
 800f736:	685b      	ldreq	r3, [r3, #4]
 800f738:	1949      	addeq	r1, r1, r5
 800f73a:	6021      	streq	r1, [r4, #0]
 800f73c:	e7ed      	b.n	800f71a <_free_r+0x22>
 800f73e:	461a      	mov	r2, r3
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	b10b      	cbz	r3, 800f748 <_free_r+0x50>
 800f744:	42a3      	cmp	r3, r4
 800f746:	d9fa      	bls.n	800f73e <_free_r+0x46>
 800f748:	6811      	ldr	r1, [r2, #0]
 800f74a:	1855      	adds	r5, r2, r1
 800f74c:	42a5      	cmp	r5, r4
 800f74e:	d10b      	bne.n	800f768 <_free_r+0x70>
 800f750:	6824      	ldr	r4, [r4, #0]
 800f752:	4421      	add	r1, r4
 800f754:	1854      	adds	r4, r2, r1
 800f756:	42a3      	cmp	r3, r4
 800f758:	6011      	str	r1, [r2, #0]
 800f75a:	d1e0      	bne.n	800f71e <_free_r+0x26>
 800f75c:	681c      	ldr	r4, [r3, #0]
 800f75e:	685b      	ldr	r3, [r3, #4]
 800f760:	6053      	str	r3, [r2, #4]
 800f762:	440c      	add	r4, r1
 800f764:	6014      	str	r4, [r2, #0]
 800f766:	e7da      	b.n	800f71e <_free_r+0x26>
 800f768:	d902      	bls.n	800f770 <_free_r+0x78>
 800f76a:	230c      	movs	r3, #12
 800f76c:	6003      	str	r3, [r0, #0]
 800f76e:	e7d6      	b.n	800f71e <_free_r+0x26>
 800f770:	6825      	ldr	r5, [r4, #0]
 800f772:	1961      	adds	r1, r4, r5
 800f774:	428b      	cmp	r3, r1
 800f776:	bf04      	itt	eq
 800f778:	6819      	ldreq	r1, [r3, #0]
 800f77a:	685b      	ldreq	r3, [r3, #4]
 800f77c:	6063      	str	r3, [r4, #4]
 800f77e:	bf04      	itt	eq
 800f780:	1949      	addeq	r1, r1, r5
 800f782:	6021      	streq	r1, [r4, #0]
 800f784:	6054      	str	r4, [r2, #4]
 800f786:	e7ca      	b.n	800f71e <_free_r+0x26>
 800f788:	b003      	add	sp, #12
 800f78a:	bd30      	pop	{r4, r5, pc}
 800f78c:	200041ac 	.word	0x200041ac

0800f790 <malloc>:
 800f790:	4b02      	ldr	r3, [pc, #8]	; (800f79c <malloc+0xc>)
 800f792:	4601      	mov	r1, r0
 800f794:	6818      	ldr	r0, [r3, #0]
 800f796:	f000 b823 	b.w	800f7e0 <_malloc_r>
 800f79a:	bf00      	nop
 800f79c:	20000174 	.word	0x20000174

0800f7a0 <sbrk_aligned>:
 800f7a0:	b570      	push	{r4, r5, r6, lr}
 800f7a2:	4e0e      	ldr	r6, [pc, #56]	; (800f7dc <sbrk_aligned+0x3c>)
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	6831      	ldr	r1, [r6, #0]
 800f7a8:	4605      	mov	r5, r0
 800f7aa:	b911      	cbnz	r1, 800f7b2 <sbrk_aligned+0x12>
 800f7ac:	f000 fc66 	bl	801007c <_sbrk_r>
 800f7b0:	6030      	str	r0, [r6, #0]
 800f7b2:	4621      	mov	r1, r4
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	f000 fc61 	bl	801007c <_sbrk_r>
 800f7ba:	1c43      	adds	r3, r0, #1
 800f7bc:	d00a      	beq.n	800f7d4 <sbrk_aligned+0x34>
 800f7be:	1cc4      	adds	r4, r0, #3
 800f7c0:	f024 0403 	bic.w	r4, r4, #3
 800f7c4:	42a0      	cmp	r0, r4
 800f7c6:	d007      	beq.n	800f7d8 <sbrk_aligned+0x38>
 800f7c8:	1a21      	subs	r1, r4, r0
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	f000 fc56 	bl	801007c <_sbrk_r>
 800f7d0:	3001      	adds	r0, #1
 800f7d2:	d101      	bne.n	800f7d8 <sbrk_aligned+0x38>
 800f7d4:	f04f 34ff 	mov.w	r4, #4294967295
 800f7d8:	4620      	mov	r0, r4
 800f7da:	bd70      	pop	{r4, r5, r6, pc}
 800f7dc:	200041b0 	.word	0x200041b0

0800f7e0 <_malloc_r>:
 800f7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7e4:	1ccd      	adds	r5, r1, #3
 800f7e6:	f025 0503 	bic.w	r5, r5, #3
 800f7ea:	3508      	adds	r5, #8
 800f7ec:	2d0c      	cmp	r5, #12
 800f7ee:	bf38      	it	cc
 800f7f0:	250c      	movcc	r5, #12
 800f7f2:	2d00      	cmp	r5, #0
 800f7f4:	4607      	mov	r7, r0
 800f7f6:	db01      	blt.n	800f7fc <_malloc_r+0x1c>
 800f7f8:	42a9      	cmp	r1, r5
 800f7fa:	d905      	bls.n	800f808 <_malloc_r+0x28>
 800f7fc:	230c      	movs	r3, #12
 800f7fe:	603b      	str	r3, [r7, #0]
 800f800:	2600      	movs	r6, #0
 800f802:	4630      	mov	r0, r6
 800f804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f808:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f8dc <_malloc_r+0xfc>
 800f80c:	f000 f868 	bl	800f8e0 <__malloc_lock>
 800f810:	f8d8 3000 	ldr.w	r3, [r8]
 800f814:	461c      	mov	r4, r3
 800f816:	bb5c      	cbnz	r4, 800f870 <_malloc_r+0x90>
 800f818:	4629      	mov	r1, r5
 800f81a:	4638      	mov	r0, r7
 800f81c:	f7ff ffc0 	bl	800f7a0 <sbrk_aligned>
 800f820:	1c43      	adds	r3, r0, #1
 800f822:	4604      	mov	r4, r0
 800f824:	d155      	bne.n	800f8d2 <_malloc_r+0xf2>
 800f826:	f8d8 4000 	ldr.w	r4, [r8]
 800f82a:	4626      	mov	r6, r4
 800f82c:	2e00      	cmp	r6, #0
 800f82e:	d145      	bne.n	800f8bc <_malloc_r+0xdc>
 800f830:	2c00      	cmp	r4, #0
 800f832:	d048      	beq.n	800f8c6 <_malloc_r+0xe6>
 800f834:	6823      	ldr	r3, [r4, #0]
 800f836:	4631      	mov	r1, r6
 800f838:	4638      	mov	r0, r7
 800f83a:	eb04 0903 	add.w	r9, r4, r3
 800f83e:	f000 fc1d 	bl	801007c <_sbrk_r>
 800f842:	4581      	cmp	r9, r0
 800f844:	d13f      	bne.n	800f8c6 <_malloc_r+0xe6>
 800f846:	6821      	ldr	r1, [r4, #0]
 800f848:	1a6d      	subs	r5, r5, r1
 800f84a:	4629      	mov	r1, r5
 800f84c:	4638      	mov	r0, r7
 800f84e:	f7ff ffa7 	bl	800f7a0 <sbrk_aligned>
 800f852:	3001      	adds	r0, #1
 800f854:	d037      	beq.n	800f8c6 <_malloc_r+0xe6>
 800f856:	6823      	ldr	r3, [r4, #0]
 800f858:	442b      	add	r3, r5
 800f85a:	6023      	str	r3, [r4, #0]
 800f85c:	f8d8 3000 	ldr.w	r3, [r8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d038      	beq.n	800f8d6 <_malloc_r+0xf6>
 800f864:	685a      	ldr	r2, [r3, #4]
 800f866:	42a2      	cmp	r2, r4
 800f868:	d12b      	bne.n	800f8c2 <_malloc_r+0xe2>
 800f86a:	2200      	movs	r2, #0
 800f86c:	605a      	str	r2, [r3, #4]
 800f86e:	e00f      	b.n	800f890 <_malloc_r+0xb0>
 800f870:	6822      	ldr	r2, [r4, #0]
 800f872:	1b52      	subs	r2, r2, r5
 800f874:	d41f      	bmi.n	800f8b6 <_malloc_r+0xd6>
 800f876:	2a0b      	cmp	r2, #11
 800f878:	d917      	bls.n	800f8aa <_malloc_r+0xca>
 800f87a:	1961      	adds	r1, r4, r5
 800f87c:	42a3      	cmp	r3, r4
 800f87e:	6025      	str	r5, [r4, #0]
 800f880:	bf18      	it	ne
 800f882:	6059      	strne	r1, [r3, #4]
 800f884:	6863      	ldr	r3, [r4, #4]
 800f886:	bf08      	it	eq
 800f888:	f8c8 1000 	streq.w	r1, [r8]
 800f88c:	5162      	str	r2, [r4, r5]
 800f88e:	604b      	str	r3, [r1, #4]
 800f890:	4638      	mov	r0, r7
 800f892:	f104 060b 	add.w	r6, r4, #11
 800f896:	f000 f829 	bl	800f8ec <__malloc_unlock>
 800f89a:	f026 0607 	bic.w	r6, r6, #7
 800f89e:	1d23      	adds	r3, r4, #4
 800f8a0:	1af2      	subs	r2, r6, r3
 800f8a2:	d0ae      	beq.n	800f802 <_malloc_r+0x22>
 800f8a4:	1b9b      	subs	r3, r3, r6
 800f8a6:	50a3      	str	r3, [r4, r2]
 800f8a8:	e7ab      	b.n	800f802 <_malloc_r+0x22>
 800f8aa:	42a3      	cmp	r3, r4
 800f8ac:	6862      	ldr	r2, [r4, #4]
 800f8ae:	d1dd      	bne.n	800f86c <_malloc_r+0x8c>
 800f8b0:	f8c8 2000 	str.w	r2, [r8]
 800f8b4:	e7ec      	b.n	800f890 <_malloc_r+0xb0>
 800f8b6:	4623      	mov	r3, r4
 800f8b8:	6864      	ldr	r4, [r4, #4]
 800f8ba:	e7ac      	b.n	800f816 <_malloc_r+0x36>
 800f8bc:	4634      	mov	r4, r6
 800f8be:	6876      	ldr	r6, [r6, #4]
 800f8c0:	e7b4      	b.n	800f82c <_malloc_r+0x4c>
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	e7cc      	b.n	800f860 <_malloc_r+0x80>
 800f8c6:	230c      	movs	r3, #12
 800f8c8:	603b      	str	r3, [r7, #0]
 800f8ca:	4638      	mov	r0, r7
 800f8cc:	f000 f80e 	bl	800f8ec <__malloc_unlock>
 800f8d0:	e797      	b.n	800f802 <_malloc_r+0x22>
 800f8d2:	6025      	str	r5, [r4, #0]
 800f8d4:	e7dc      	b.n	800f890 <_malloc_r+0xb0>
 800f8d6:	605b      	str	r3, [r3, #4]
 800f8d8:	deff      	udf	#255	; 0xff
 800f8da:	bf00      	nop
 800f8dc:	200041ac 	.word	0x200041ac

0800f8e0 <__malloc_lock>:
 800f8e0:	4801      	ldr	r0, [pc, #4]	; (800f8e8 <__malloc_lock+0x8>)
 800f8e2:	f7ff bee1 	b.w	800f6a8 <__retarget_lock_acquire_recursive>
 800f8e6:	bf00      	nop
 800f8e8:	200041a8 	.word	0x200041a8

0800f8ec <__malloc_unlock>:
 800f8ec:	4801      	ldr	r0, [pc, #4]	; (800f8f4 <__malloc_unlock+0x8>)
 800f8ee:	f7ff bedc 	b.w	800f6aa <__retarget_lock_release_recursive>
 800f8f2:	bf00      	nop
 800f8f4:	200041a8 	.word	0x200041a8

0800f8f8 <__ssputs_r>:
 800f8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8fc:	688e      	ldr	r6, [r1, #8]
 800f8fe:	461f      	mov	r7, r3
 800f900:	42be      	cmp	r6, r7
 800f902:	680b      	ldr	r3, [r1, #0]
 800f904:	4682      	mov	sl, r0
 800f906:	460c      	mov	r4, r1
 800f908:	4690      	mov	r8, r2
 800f90a:	d82c      	bhi.n	800f966 <__ssputs_r+0x6e>
 800f90c:	898a      	ldrh	r2, [r1, #12]
 800f90e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f912:	d026      	beq.n	800f962 <__ssputs_r+0x6a>
 800f914:	6965      	ldr	r5, [r4, #20]
 800f916:	6909      	ldr	r1, [r1, #16]
 800f918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f91c:	eba3 0901 	sub.w	r9, r3, r1
 800f920:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f924:	1c7b      	adds	r3, r7, #1
 800f926:	444b      	add	r3, r9
 800f928:	106d      	asrs	r5, r5, #1
 800f92a:	429d      	cmp	r5, r3
 800f92c:	bf38      	it	cc
 800f92e:	461d      	movcc	r5, r3
 800f930:	0553      	lsls	r3, r2, #21
 800f932:	d527      	bpl.n	800f984 <__ssputs_r+0x8c>
 800f934:	4629      	mov	r1, r5
 800f936:	f7ff ff53 	bl	800f7e0 <_malloc_r>
 800f93a:	4606      	mov	r6, r0
 800f93c:	b360      	cbz	r0, 800f998 <__ssputs_r+0xa0>
 800f93e:	6921      	ldr	r1, [r4, #16]
 800f940:	464a      	mov	r2, r9
 800f942:	f000 fbab 	bl	801009c <memcpy>
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f950:	81a3      	strh	r3, [r4, #12]
 800f952:	6126      	str	r6, [r4, #16]
 800f954:	6165      	str	r5, [r4, #20]
 800f956:	444e      	add	r6, r9
 800f958:	eba5 0509 	sub.w	r5, r5, r9
 800f95c:	6026      	str	r6, [r4, #0]
 800f95e:	60a5      	str	r5, [r4, #8]
 800f960:	463e      	mov	r6, r7
 800f962:	42be      	cmp	r6, r7
 800f964:	d900      	bls.n	800f968 <__ssputs_r+0x70>
 800f966:	463e      	mov	r6, r7
 800f968:	6820      	ldr	r0, [r4, #0]
 800f96a:	4632      	mov	r2, r6
 800f96c:	4641      	mov	r1, r8
 800f96e:	f000 fb6b 	bl	8010048 <memmove>
 800f972:	68a3      	ldr	r3, [r4, #8]
 800f974:	1b9b      	subs	r3, r3, r6
 800f976:	60a3      	str	r3, [r4, #8]
 800f978:	6823      	ldr	r3, [r4, #0]
 800f97a:	4433      	add	r3, r6
 800f97c:	6023      	str	r3, [r4, #0]
 800f97e:	2000      	movs	r0, #0
 800f980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f984:	462a      	mov	r2, r5
 800f986:	f000 fb9e 	bl	80100c6 <_realloc_r>
 800f98a:	4606      	mov	r6, r0
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d1e0      	bne.n	800f952 <__ssputs_r+0x5a>
 800f990:	6921      	ldr	r1, [r4, #16]
 800f992:	4650      	mov	r0, sl
 800f994:	f7ff feb0 	bl	800f6f8 <_free_r>
 800f998:	230c      	movs	r3, #12
 800f99a:	f8ca 3000 	str.w	r3, [sl]
 800f99e:	89a3      	ldrh	r3, [r4, #12]
 800f9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a4:	81a3      	strh	r3, [r4, #12]
 800f9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9aa:	e7e9      	b.n	800f980 <__ssputs_r+0x88>

0800f9ac <_svfiprintf_r>:
 800f9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b0:	4698      	mov	r8, r3
 800f9b2:	898b      	ldrh	r3, [r1, #12]
 800f9b4:	061b      	lsls	r3, r3, #24
 800f9b6:	b09d      	sub	sp, #116	; 0x74
 800f9b8:	4607      	mov	r7, r0
 800f9ba:	460d      	mov	r5, r1
 800f9bc:	4614      	mov	r4, r2
 800f9be:	d50e      	bpl.n	800f9de <_svfiprintf_r+0x32>
 800f9c0:	690b      	ldr	r3, [r1, #16]
 800f9c2:	b963      	cbnz	r3, 800f9de <_svfiprintf_r+0x32>
 800f9c4:	2140      	movs	r1, #64	; 0x40
 800f9c6:	f7ff ff0b 	bl	800f7e0 <_malloc_r>
 800f9ca:	6028      	str	r0, [r5, #0]
 800f9cc:	6128      	str	r0, [r5, #16]
 800f9ce:	b920      	cbnz	r0, 800f9da <_svfiprintf_r+0x2e>
 800f9d0:	230c      	movs	r3, #12
 800f9d2:	603b      	str	r3, [r7, #0]
 800f9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d8:	e0d0      	b.n	800fb7c <_svfiprintf_r+0x1d0>
 800f9da:	2340      	movs	r3, #64	; 0x40
 800f9dc:	616b      	str	r3, [r5, #20]
 800f9de:	2300      	movs	r3, #0
 800f9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f9e2:	2320      	movs	r3, #32
 800f9e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9ec:	2330      	movs	r3, #48	; 0x30
 800f9ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fb94 <_svfiprintf_r+0x1e8>
 800f9f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9f6:	f04f 0901 	mov.w	r9, #1
 800f9fa:	4623      	mov	r3, r4
 800f9fc:	469a      	mov	sl, r3
 800f9fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa02:	b10a      	cbz	r2, 800fa08 <_svfiprintf_r+0x5c>
 800fa04:	2a25      	cmp	r2, #37	; 0x25
 800fa06:	d1f9      	bne.n	800f9fc <_svfiprintf_r+0x50>
 800fa08:	ebba 0b04 	subs.w	fp, sl, r4
 800fa0c:	d00b      	beq.n	800fa26 <_svfiprintf_r+0x7a>
 800fa0e:	465b      	mov	r3, fp
 800fa10:	4622      	mov	r2, r4
 800fa12:	4629      	mov	r1, r5
 800fa14:	4638      	mov	r0, r7
 800fa16:	f7ff ff6f 	bl	800f8f8 <__ssputs_r>
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	f000 80a9 	beq.w	800fb72 <_svfiprintf_r+0x1c6>
 800fa20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa22:	445a      	add	r2, fp
 800fa24:	9209      	str	r2, [sp, #36]	; 0x24
 800fa26:	f89a 3000 	ldrb.w	r3, [sl]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 80a1 	beq.w	800fb72 <_svfiprintf_r+0x1c6>
 800fa30:	2300      	movs	r3, #0
 800fa32:	f04f 32ff 	mov.w	r2, #4294967295
 800fa36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa3a:	f10a 0a01 	add.w	sl, sl, #1
 800fa3e:	9304      	str	r3, [sp, #16]
 800fa40:	9307      	str	r3, [sp, #28]
 800fa42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa46:	931a      	str	r3, [sp, #104]	; 0x68
 800fa48:	4654      	mov	r4, sl
 800fa4a:	2205      	movs	r2, #5
 800fa4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa50:	4850      	ldr	r0, [pc, #320]	; (800fb94 <_svfiprintf_r+0x1e8>)
 800fa52:	f7f0 fbdd 	bl	8000210 <memchr>
 800fa56:	9a04      	ldr	r2, [sp, #16]
 800fa58:	b9d8      	cbnz	r0, 800fa92 <_svfiprintf_r+0xe6>
 800fa5a:	06d0      	lsls	r0, r2, #27
 800fa5c:	bf44      	itt	mi
 800fa5e:	2320      	movmi	r3, #32
 800fa60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa64:	0711      	lsls	r1, r2, #28
 800fa66:	bf44      	itt	mi
 800fa68:	232b      	movmi	r3, #43	; 0x2b
 800fa6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa6e:	f89a 3000 	ldrb.w	r3, [sl]
 800fa72:	2b2a      	cmp	r3, #42	; 0x2a
 800fa74:	d015      	beq.n	800faa2 <_svfiprintf_r+0xf6>
 800fa76:	9a07      	ldr	r2, [sp, #28]
 800fa78:	4654      	mov	r4, sl
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	f04f 0c0a 	mov.w	ip, #10
 800fa80:	4621      	mov	r1, r4
 800fa82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa86:	3b30      	subs	r3, #48	; 0x30
 800fa88:	2b09      	cmp	r3, #9
 800fa8a:	d94d      	bls.n	800fb28 <_svfiprintf_r+0x17c>
 800fa8c:	b1b0      	cbz	r0, 800fabc <_svfiprintf_r+0x110>
 800fa8e:	9207      	str	r2, [sp, #28]
 800fa90:	e014      	b.n	800fabc <_svfiprintf_r+0x110>
 800fa92:	eba0 0308 	sub.w	r3, r0, r8
 800fa96:	fa09 f303 	lsl.w	r3, r9, r3
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	9304      	str	r3, [sp, #16]
 800fa9e:	46a2      	mov	sl, r4
 800faa0:	e7d2      	b.n	800fa48 <_svfiprintf_r+0x9c>
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	1d19      	adds	r1, r3, #4
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	9103      	str	r1, [sp, #12]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	bfbb      	ittet	lt
 800faae:	425b      	neglt	r3, r3
 800fab0:	f042 0202 	orrlt.w	r2, r2, #2
 800fab4:	9307      	strge	r3, [sp, #28]
 800fab6:	9307      	strlt	r3, [sp, #28]
 800fab8:	bfb8      	it	lt
 800faba:	9204      	strlt	r2, [sp, #16]
 800fabc:	7823      	ldrb	r3, [r4, #0]
 800fabe:	2b2e      	cmp	r3, #46	; 0x2e
 800fac0:	d10c      	bne.n	800fadc <_svfiprintf_r+0x130>
 800fac2:	7863      	ldrb	r3, [r4, #1]
 800fac4:	2b2a      	cmp	r3, #42	; 0x2a
 800fac6:	d134      	bne.n	800fb32 <_svfiprintf_r+0x186>
 800fac8:	9b03      	ldr	r3, [sp, #12]
 800faca:	1d1a      	adds	r2, r3, #4
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	9203      	str	r2, [sp, #12]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	bfb8      	it	lt
 800fad4:	f04f 33ff 	movlt.w	r3, #4294967295
 800fad8:	3402      	adds	r4, #2
 800fada:	9305      	str	r3, [sp, #20]
 800fadc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fba4 <_svfiprintf_r+0x1f8>
 800fae0:	7821      	ldrb	r1, [r4, #0]
 800fae2:	2203      	movs	r2, #3
 800fae4:	4650      	mov	r0, sl
 800fae6:	f7f0 fb93 	bl	8000210 <memchr>
 800faea:	b138      	cbz	r0, 800fafc <_svfiprintf_r+0x150>
 800faec:	9b04      	ldr	r3, [sp, #16]
 800faee:	eba0 000a 	sub.w	r0, r0, sl
 800faf2:	2240      	movs	r2, #64	; 0x40
 800faf4:	4082      	lsls	r2, r0
 800faf6:	4313      	orrs	r3, r2
 800faf8:	3401      	adds	r4, #1
 800fafa:	9304      	str	r3, [sp, #16]
 800fafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb00:	4825      	ldr	r0, [pc, #148]	; (800fb98 <_svfiprintf_r+0x1ec>)
 800fb02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb06:	2206      	movs	r2, #6
 800fb08:	f7f0 fb82 	bl	8000210 <memchr>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d038      	beq.n	800fb82 <_svfiprintf_r+0x1d6>
 800fb10:	4b22      	ldr	r3, [pc, #136]	; (800fb9c <_svfiprintf_r+0x1f0>)
 800fb12:	bb1b      	cbnz	r3, 800fb5c <_svfiprintf_r+0x1b0>
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	3307      	adds	r3, #7
 800fb18:	f023 0307 	bic.w	r3, r3, #7
 800fb1c:	3308      	adds	r3, #8
 800fb1e:	9303      	str	r3, [sp, #12]
 800fb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb22:	4433      	add	r3, r6
 800fb24:	9309      	str	r3, [sp, #36]	; 0x24
 800fb26:	e768      	b.n	800f9fa <_svfiprintf_r+0x4e>
 800fb28:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb2c:	460c      	mov	r4, r1
 800fb2e:	2001      	movs	r0, #1
 800fb30:	e7a6      	b.n	800fa80 <_svfiprintf_r+0xd4>
 800fb32:	2300      	movs	r3, #0
 800fb34:	3401      	adds	r4, #1
 800fb36:	9305      	str	r3, [sp, #20]
 800fb38:	4619      	mov	r1, r3
 800fb3a:	f04f 0c0a 	mov.w	ip, #10
 800fb3e:	4620      	mov	r0, r4
 800fb40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb44:	3a30      	subs	r2, #48	; 0x30
 800fb46:	2a09      	cmp	r2, #9
 800fb48:	d903      	bls.n	800fb52 <_svfiprintf_r+0x1a6>
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d0c6      	beq.n	800fadc <_svfiprintf_r+0x130>
 800fb4e:	9105      	str	r1, [sp, #20]
 800fb50:	e7c4      	b.n	800fadc <_svfiprintf_r+0x130>
 800fb52:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb56:	4604      	mov	r4, r0
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e7f0      	b.n	800fb3e <_svfiprintf_r+0x192>
 800fb5c:	ab03      	add	r3, sp, #12
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	462a      	mov	r2, r5
 800fb62:	4b0f      	ldr	r3, [pc, #60]	; (800fba0 <_svfiprintf_r+0x1f4>)
 800fb64:	a904      	add	r1, sp, #16
 800fb66:	4638      	mov	r0, r7
 800fb68:	f3af 8000 	nop.w
 800fb6c:	1c42      	adds	r2, r0, #1
 800fb6e:	4606      	mov	r6, r0
 800fb70:	d1d6      	bne.n	800fb20 <_svfiprintf_r+0x174>
 800fb72:	89ab      	ldrh	r3, [r5, #12]
 800fb74:	065b      	lsls	r3, r3, #25
 800fb76:	f53f af2d 	bmi.w	800f9d4 <_svfiprintf_r+0x28>
 800fb7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb7c:	b01d      	add	sp, #116	; 0x74
 800fb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb82:	ab03      	add	r3, sp, #12
 800fb84:	9300      	str	r3, [sp, #0]
 800fb86:	462a      	mov	r2, r5
 800fb88:	4b05      	ldr	r3, [pc, #20]	; (800fba0 <_svfiprintf_r+0x1f4>)
 800fb8a:	a904      	add	r1, sp, #16
 800fb8c:	4638      	mov	r0, r7
 800fb8e:	f000 f879 	bl	800fc84 <_printf_i>
 800fb92:	e7eb      	b.n	800fb6c <_svfiprintf_r+0x1c0>
 800fb94:	08011163 	.word	0x08011163
 800fb98:	0801116d 	.word	0x0801116d
 800fb9c:	00000000 	.word	0x00000000
 800fba0:	0800f8f9 	.word	0x0800f8f9
 800fba4:	08011169 	.word	0x08011169

0800fba8 <_printf_common>:
 800fba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbac:	4616      	mov	r6, r2
 800fbae:	4699      	mov	r9, r3
 800fbb0:	688a      	ldr	r2, [r1, #8]
 800fbb2:	690b      	ldr	r3, [r1, #16]
 800fbb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	bfb8      	it	lt
 800fbbc:	4613      	movlt	r3, r2
 800fbbe:	6033      	str	r3, [r6, #0]
 800fbc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fbc4:	4607      	mov	r7, r0
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	b10a      	cbz	r2, 800fbce <_printf_common+0x26>
 800fbca:	3301      	adds	r3, #1
 800fbcc:	6033      	str	r3, [r6, #0]
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	0699      	lsls	r1, r3, #26
 800fbd2:	bf42      	ittt	mi
 800fbd4:	6833      	ldrmi	r3, [r6, #0]
 800fbd6:	3302      	addmi	r3, #2
 800fbd8:	6033      	strmi	r3, [r6, #0]
 800fbda:	6825      	ldr	r5, [r4, #0]
 800fbdc:	f015 0506 	ands.w	r5, r5, #6
 800fbe0:	d106      	bne.n	800fbf0 <_printf_common+0x48>
 800fbe2:	f104 0a19 	add.w	sl, r4, #25
 800fbe6:	68e3      	ldr	r3, [r4, #12]
 800fbe8:	6832      	ldr	r2, [r6, #0]
 800fbea:	1a9b      	subs	r3, r3, r2
 800fbec:	42ab      	cmp	r3, r5
 800fbee:	dc26      	bgt.n	800fc3e <_printf_common+0x96>
 800fbf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fbf4:	1e13      	subs	r3, r2, #0
 800fbf6:	6822      	ldr	r2, [r4, #0]
 800fbf8:	bf18      	it	ne
 800fbfa:	2301      	movne	r3, #1
 800fbfc:	0692      	lsls	r2, r2, #26
 800fbfe:	d42b      	bmi.n	800fc58 <_printf_common+0xb0>
 800fc00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc04:	4649      	mov	r1, r9
 800fc06:	4638      	mov	r0, r7
 800fc08:	47c0      	blx	r8
 800fc0a:	3001      	adds	r0, #1
 800fc0c:	d01e      	beq.n	800fc4c <_printf_common+0xa4>
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	6922      	ldr	r2, [r4, #16]
 800fc12:	f003 0306 	and.w	r3, r3, #6
 800fc16:	2b04      	cmp	r3, #4
 800fc18:	bf02      	ittt	eq
 800fc1a:	68e5      	ldreq	r5, [r4, #12]
 800fc1c:	6833      	ldreq	r3, [r6, #0]
 800fc1e:	1aed      	subeq	r5, r5, r3
 800fc20:	68a3      	ldr	r3, [r4, #8]
 800fc22:	bf0c      	ite	eq
 800fc24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc28:	2500      	movne	r5, #0
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	bfc4      	itt	gt
 800fc2e:	1a9b      	subgt	r3, r3, r2
 800fc30:	18ed      	addgt	r5, r5, r3
 800fc32:	2600      	movs	r6, #0
 800fc34:	341a      	adds	r4, #26
 800fc36:	42b5      	cmp	r5, r6
 800fc38:	d11a      	bne.n	800fc70 <_printf_common+0xc8>
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	e008      	b.n	800fc50 <_printf_common+0xa8>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	4652      	mov	r2, sl
 800fc42:	4649      	mov	r1, r9
 800fc44:	4638      	mov	r0, r7
 800fc46:	47c0      	blx	r8
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d103      	bne.n	800fc54 <_printf_common+0xac>
 800fc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc54:	3501      	adds	r5, #1
 800fc56:	e7c6      	b.n	800fbe6 <_printf_common+0x3e>
 800fc58:	18e1      	adds	r1, r4, r3
 800fc5a:	1c5a      	adds	r2, r3, #1
 800fc5c:	2030      	movs	r0, #48	; 0x30
 800fc5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc62:	4422      	add	r2, r4
 800fc64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc6c:	3302      	adds	r3, #2
 800fc6e:	e7c7      	b.n	800fc00 <_printf_common+0x58>
 800fc70:	2301      	movs	r3, #1
 800fc72:	4622      	mov	r2, r4
 800fc74:	4649      	mov	r1, r9
 800fc76:	4638      	mov	r0, r7
 800fc78:	47c0      	blx	r8
 800fc7a:	3001      	adds	r0, #1
 800fc7c:	d0e6      	beq.n	800fc4c <_printf_common+0xa4>
 800fc7e:	3601      	adds	r6, #1
 800fc80:	e7d9      	b.n	800fc36 <_printf_common+0x8e>
	...

0800fc84 <_printf_i>:
 800fc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc88:	7e0f      	ldrb	r7, [r1, #24]
 800fc8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc8c:	2f78      	cmp	r7, #120	; 0x78
 800fc8e:	4691      	mov	r9, r2
 800fc90:	4680      	mov	r8, r0
 800fc92:	460c      	mov	r4, r1
 800fc94:	469a      	mov	sl, r3
 800fc96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc9a:	d807      	bhi.n	800fcac <_printf_i+0x28>
 800fc9c:	2f62      	cmp	r7, #98	; 0x62
 800fc9e:	d80a      	bhi.n	800fcb6 <_printf_i+0x32>
 800fca0:	2f00      	cmp	r7, #0
 800fca2:	f000 80d4 	beq.w	800fe4e <_printf_i+0x1ca>
 800fca6:	2f58      	cmp	r7, #88	; 0x58
 800fca8:	f000 80c0 	beq.w	800fe2c <_printf_i+0x1a8>
 800fcac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fcb4:	e03a      	b.n	800fd2c <_printf_i+0xa8>
 800fcb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fcba:	2b15      	cmp	r3, #21
 800fcbc:	d8f6      	bhi.n	800fcac <_printf_i+0x28>
 800fcbe:	a101      	add	r1, pc, #4	; (adr r1, 800fcc4 <_printf_i+0x40>)
 800fcc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fcc4:	0800fd1d 	.word	0x0800fd1d
 800fcc8:	0800fd31 	.word	0x0800fd31
 800fccc:	0800fcad 	.word	0x0800fcad
 800fcd0:	0800fcad 	.word	0x0800fcad
 800fcd4:	0800fcad 	.word	0x0800fcad
 800fcd8:	0800fcad 	.word	0x0800fcad
 800fcdc:	0800fd31 	.word	0x0800fd31
 800fce0:	0800fcad 	.word	0x0800fcad
 800fce4:	0800fcad 	.word	0x0800fcad
 800fce8:	0800fcad 	.word	0x0800fcad
 800fcec:	0800fcad 	.word	0x0800fcad
 800fcf0:	0800fe35 	.word	0x0800fe35
 800fcf4:	0800fd5d 	.word	0x0800fd5d
 800fcf8:	0800fdef 	.word	0x0800fdef
 800fcfc:	0800fcad 	.word	0x0800fcad
 800fd00:	0800fcad 	.word	0x0800fcad
 800fd04:	0800fe57 	.word	0x0800fe57
 800fd08:	0800fcad 	.word	0x0800fcad
 800fd0c:	0800fd5d 	.word	0x0800fd5d
 800fd10:	0800fcad 	.word	0x0800fcad
 800fd14:	0800fcad 	.word	0x0800fcad
 800fd18:	0800fdf7 	.word	0x0800fdf7
 800fd1c:	682b      	ldr	r3, [r5, #0]
 800fd1e:	1d1a      	adds	r2, r3, #4
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	602a      	str	r2, [r5, #0]
 800fd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	e09f      	b.n	800fe70 <_printf_i+0x1ec>
 800fd30:	6820      	ldr	r0, [r4, #0]
 800fd32:	682b      	ldr	r3, [r5, #0]
 800fd34:	0607      	lsls	r7, r0, #24
 800fd36:	f103 0104 	add.w	r1, r3, #4
 800fd3a:	6029      	str	r1, [r5, #0]
 800fd3c:	d501      	bpl.n	800fd42 <_printf_i+0xbe>
 800fd3e:	681e      	ldr	r6, [r3, #0]
 800fd40:	e003      	b.n	800fd4a <_printf_i+0xc6>
 800fd42:	0646      	lsls	r6, r0, #25
 800fd44:	d5fb      	bpl.n	800fd3e <_printf_i+0xba>
 800fd46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fd4a:	2e00      	cmp	r6, #0
 800fd4c:	da03      	bge.n	800fd56 <_printf_i+0xd2>
 800fd4e:	232d      	movs	r3, #45	; 0x2d
 800fd50:	4276      	negs	r6, r6
 800fd52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd56:	485a      	ldr	r0, [pc, #360]	; (800fec0 <_printf_i+0x23c>)
 800fd58:	230a      	movs	r3, #10
 800fd5a:	e012      	b.n	800fd82 <_printf_i+0xfe>
 800fd5c:	682b      	ldr	r3, [r5, #0]
 800fd5e:	6820      	ldr	r0, [r4, #0]
 800fd60:	1d19      	adds	r1, r3, #4
 800fd62:	6029      	str	r1, [r5, #0]
 800fd64:	0605      	lsls	r5, r0, #24
 800fd66:	d501      	bpl.n	800fd6c <_printf_i+0xe8>
 800fd68:	681e      	ldr	r6, [r3, #0]
 800fd6a:	e002      	b.n	800fd72 <_printf_i+0xee>
 800fd6c:	0641      	lsls	r1, r0, #25
 800fd6e:	d5fb      	bpl.n	800fd68 <_printf_i+0xe4>
 800fd70:	881e      	ldrh	r6, [r3, #0]
 800fd72:	4853      	ldr	r0, [pc, #332]	; (800fec0 <_printf_i+0x23c>)
 800fd74:	2f6f      	cmp	r7, #111	; 0x6f
 800fd76:	bf0c      	ite	eq
 800fd78:	2308      	moveq	r3, #8
 800fd7a:	230a      	movne	r3, #10
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd82:	6865      	ldr	r5, [r4, #4]
 800fd84:	60a5      	str	r5, [r4, #8]
 800fd86:	2d00      	cmp	r5, #0
 800fd88:	bfa2      	ittt	ge
 800fd8a:	6821      	ldrge	r1, [r4, #0]
 800fd8c:	f021 0104 	bicge.w	r1, r1, #4
 800fd90:	6021      	strge	r1, [r4, #0]
 800fd92:	b90e      	cbnz	r6, 800fd98 <_printf_i+0x114>
 800fd94:	2d00      	cmp	r5, #0
 800fd96:	d04b      	beq.n	800fe30 <_printf_i+0x1ac>
 800fd98:	4615      	mov	r5, r2
 800fd9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd9e:	fb03 6711 	mls	r7, r3, r1, r6
 800fda2:	5dc7      	ldrb	r7, [r0, r7]
 800fda4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fda8:	4637      	mov	r7, r6
 800fdaa:	42bb      	cmp	r3, r7
 800fdac:	460e      	mov	r6, r1
 800fdae:	d9f4      	bls.n	800fd9a <_printf_i+0x116>
 800fdb0:	2b08      	cmp	r3, #8
 800fdb2:	d10b      	bne.n	800fdcc <_printf_i+0x148>
 800fdb4:	6823      	ldr	r3, [r4, #0]
 800fdb6:	07de      	lsls	r6, r3, #31
 800fdb8:	d508      	bpl.n	800fdcc <_printf_i+0x148>
 800fdba:	6923      	ldr	r3, [r4, #16]
 800fdbc:	6861      	ldr	r1, [r4, #4]
 800fdbe:	4299      	cmp	r1, r3
 800fdc0:	bfde      	ittt	le
 800fdc2:	2330      	movle	r3, #48	; 0x30
 800fdc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fdc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fdcc:	1b52      	subs	r2, r2, r5
 800fdce:	6122      	str	r2, [r4, #16]
 800fdd0:	f8cd a000 	str.w	sl, [sp]
 800fdd4:	464b      	mov	r3, r9
 800fdd6:	aa03      	add	r2, sp, #12
 800fdd8:	4621      	mov	r1, r4
 800fdda:	4640      	mov	r0, r8
 800fddc:	f7ff fee4 	bl	800fba8 <_printf_common>
 800fde0:	3001      	adds	r0, #1
 800fde2:	d14a      	bne.n	800fe7a <_printf_i+0x1f6>
 800fde4:	f04f 30ff 	mov.w	r0, #4294967295
 800fde8:	b004      	add	sp, #16
 800fdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdee:	6823      	ldr	r3, [r4, #0]
 800fdf0:	f043 0320 	orr.w	r3, r3, #32
 800fdf4:	6023      	str	r3, [r4, #0]
 800fdf6:	4833      	ldr	r0, [pc, #204]	; (800fec4 <_printf_i+0x240>)
 800fdf8:	2778      	movs	r7, #120	; 0x78
 800fdfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fdfe:	6823      	ldr	r3, [r4, #0]
 800fe00:	6829      	ldr	r1, [r5, #0]
 800fe02:	061f      	lsls	r7, r3, #24
 800fe04:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe08:	d402      	bmi.n	800fe10 <_printf_i+0x18c>
 800fe0a:	065f      	lsls	r7, r3, #25
 800fe0c:	bf48      	it	mi
 800fe0e:	b2b6      	uxthmi	r6, r6
 800fe10:	07df      	lsls	r7, r3, #31
 800fe12:	bf48      	it	mi
 800fe14:	f043 0320 	orrmi.w	r3, r3, #32
 800fe18:	6029      	str	r1, [r5, #0]
 800fe1a:	bf48      	it	mi
 800fe1c:	6023      	strmi	r3, [r4, #0]
 800fe1e:	b91e      	cbnz	r6, 800fe28 <_printf_i+0x1a4>
 800fe20:	6823      	ldr	r3, [r4, #0]
 800fe22:	f023 0320 	bic.w	r3, r3, #32
 800fe26:	6023      	str	r3, [r4, #0]
 800fe28:	2310      	movs	r3, #16
 800fe2a:	e7a7      	b.n	800fd7c <_printf_i+0xf8>
 800fe2c:	4824      	ldr	r0, [pc, #144]	; (800fec0 <_printf_i+0x23c>)
 800fe2e:	e7e4      	b.n	800fdfa <_printf_i+0x176>
 800fe30:	4615      	mov	r5, r2
 800fe32:	e7bd      	b.n	800fdb0 <_printf_i+0x12c>
 800fe34:	682b      	ldr	r3, [r5, #0]
 800fe36:	6826      	ldr	r6, [r4, #0]
 800fe38:	6961      	ldr	r1, [r4, #20]
 800fe3a:	1d18      	adds	r0, r3, #4
 800fe3c:	6028      	str	r0, [r5, #0]
 800fe3e:	0635      	lsls	r5, r6, #24
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	d501      	bpl.n	800fe48 <_printf_i+0x1c4>
 800fe44:	6019      	str	r1, [r3, #0]
 800fe46:	e002      	b.n	800fe4e <_printf_i+0x1ca>
 800fe48:	0670      	lsls	r0, r6, #25
 800fe4a:	d5fb      	bpl.n	800fe44 <_printf_i+0x1c0>
 800fe4c:	8019      	strh	r1, [r3, #0]
 800fe4e:	2300      	movs	r3, #0
 800fe50:	6123      	str	r3, [r4, #16]
 800fe52:	4615      	mov	r5, r2
 800fe54:	e7bc      	b.n	800fdd0 <_printf_i+0x14c>
 800fe56:	682b      	ldr	r3, [r5, #0]
 800fe58:	1d1a      	adds	r2, r3, #4
 800fe5a:	602a      	str	r2, [r5, #0]
 800fe5c:	681d      	ldr	r5, [r3, #0]
 800fe5e:	6862      	ldr	r2, [r4, #4]
 800fe60:	2100      	movs	r1, #0
 800fe62:	4628      	mov	r0, r5
 800fe64:	f7f0 f9d4 	bl	8000210 <memchr>
 800fe68:	b108      	cbz	r0, 800fe6e <_printf_i+0x1ea>
 800fe6a:	1b40      	subs	r0, r0, r5
 800fe6c:	6060      	str	r0, [r4, #4]
 800fe6e:	6863      	ldr	r3, [r4, #4]
 800fe70:	6123      	str	r3, [r4, #16]
 800fe72:	2300      	movs	r3, #0
 800fe74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe78:	e7aa      	b.n	800fdd0 <_printf_i+0x14c>
 800fe7a:	6923      	ldr	r3, [r4, #16]
 800fe7c:	462a      	mov	r2, r5
 800fe7e:	4649      	mov	r1, r9
 800fe80:	4640      	mov	r0, r8
 800fe82:	47d0      	blx	sl
 800fe84:	3001      	adds	r0, #1
 800fe86:	d0ad      	beq.n	800fde4 <_printf_i+0x160>
 800fe88:	6823      	ldr	r3, [r4, #0]
 800fe8a:	079b      	lsls	r3, r3, #30
 800fe8c:	d413      	bmi.n	800feb6 <_printf_i+0x232>
 800fe8e:	68e0      	ldr	r0, [r4, #12]
 800fe90:	9b03      	ldr	r3, [sp, #12]
 800fe92:	4298      	cmp	r0, r3
 800fe94:	bfb8      	it	lt
 800fe96:	4618      	movlt	r0, r3
 800fe98:	e7a6      	b.n	800fde8 <_printf_i+0x164>
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	4632      	mov	r2, r6
 800fe9e:	4649      	mov	r1, r9
 800fea0:	4640      	mov	r0, r8
 800fea2:	47d0      	blx	sl
 800fea4:	3001      	adds	r0, #1
 800fea6:	d09d      	beq.n	800fde4 <_printf_i+0x160>
 800fea8:	3501      	adds	r5, #1
 800feaa:	68e3      	ldr	r3, [r4, #12]
 800feac:	9903      	ldr	r1, [sp, #12]
 800feae:	1a5b      	subs	r3, r3, r1
 800feb0:	42ab      	cmp	r3, r5
 800feb2:	dcf2      	bgt.n	800fe9a <_printf_i+0x216>
 800feb4:	e7eb      	b.n	800fe8e <_printf_i+0x20a>
 800feb6:	2500      	movs	r5, #0
 800feb8:	f104 0619 	add.w	r6, r4, #25
 800febc:	e7f5      	b.n	800feaa <_printf_i+0x226>
 800febe:	bf00      	nop
 800fec0:	08011174 	.word	0x08011174
 800fec4:	08011185 	.word	0x08011185

0800fec8 <__sflush_r>:
 800fec8:	898a      	ldrh	r2, [r1, #12]
 800feca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fece:	4605      	mov	r5, r0
 800fed0:	0710      	lsls	r0, r2, #28
 800fed2:	460c      	mov	r4, r1
 800fed4:	d458      	bmi.n	800ff88 <__sflush_r+0xc0>
 800fed6:	684b      	ldr	r3, [r1, #4]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	dc05      	bgt.n	800fee8 <__sflush_r+0x20>
 800fedc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fede:	2b00      	cmp	r3, #0
 800fee0:	dc02      	bgt.n	800fee8 <__sflush_r+0x20>
 800fee2:	2000      	movs	r0, #0
 800fee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800feea:	2e00      	cmp	r6, #0
 800feec:	d0f9      	beq.n	800fee2 <__sflush_r+0x1a>
 800feee:	2300      	movs	r3, #0
 800fef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fef4:	682f      	ldr	r7, [r5, #0]
 800fef6:	6a21      	ldr	r1, [r4, #32]
 800fef8:	602b      	str	r3, [r5, #0]
 800fefa:	d032      	beq.n	800ff62 <__sflush_r+0x9a>
 800fefc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fefe:	89a3      	ldrh	r3, [r4, #12]
 800ff00:	075a      	lsls	r2, r3, #29
 800ff02:	d505      	bpl.n	800ff10 <__sflush_r+0x48>
 800ff04:	6863      	ldr	r3, [r4, #4]
 800ff06:	1ac0      	subs	r0, r0, r3
 800ff08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff0a:	b10b      	cbz	r3, 800ff10 <__sflush_r+0x48>
 800ff0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff0e:	1ac0      	subs	r0, r0, r3
 800ff10:	2300      	movs	r3, #0
 800ff12:	4602      	mov	r2, r0
 800ff14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff16:	6a21      	ldr	r1, [r4, #32]
 800ff18:	4628      	mov	r0, r5
 800ff1a:	47b0      	blx	r6
 800ff1c:	1c43      	adds	r3, r0, #1
 800ff1e:	89a3      	ldrh	r3, [r4, #12]
 800ff20:	d106      	bne.n	800ff30 <__sflush_r+0x68>
 800ff22:	6829      	ldr	r1, [r5, #0]
 800ff24:	291d      	cmp	r1, #29
 800ff26:	d82b      	bhi.n	800ff80 <__sflush_r+0xb8>
 800ff28:	4a29      	ldr	r2, [pc, #164]	; (800ffd0 <__sflush_r+0x108>)
 800ff2a:	410a      	asrs	r2, r1
 800ff2c:	07d6      	lsls	r6, r2, #31
 800ff2e:	d427      	bmi.n	800ff80 <__sflush_r+0xb8>
 800ff30:	2200      	movs	r2, #0
 800ff32:	6062      	str	r2, [r4, #4]
 800ff34:	04d9      	lsls	r1, r3, #19
 800ff36:	6922      	ldr	r2, [r4, #16]
 800ff38:	6022      	str	r2, [r4, #0]
 800ff3a:	d504      	bpl.n	800ff46 <__sflush_r+0x7e>
 800ff3c:	1c42      	adds	r2, r0, #1
 800ff3e:	d101      	bne.n	800ff44 <__sflush_r+0x7c>
 800ff40:	682b      	ldr	r3, [r5, #0]
 800ff42:	b903      	cbnz	r3, 800ff46 <__sflush_r+0x7e>
 800ff44:	6560      	str	r0, [r4, #84]	; 0x54
 800ff46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff48:	602f      	str	r7, [r5, #0]
 800ff4a:	2900      	cmp	r1, #0
 800ff4c:	d0c9      	beq.n	800fee2 <__sflush_r+0x1a>
 800ff4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff52:	4299      	cmp	r1, r3
 800ff54:	d002      	beq.n	800ff5c <__sflush_r+0x94>
 800ff56:	4628      	mov	r0, r5
 800ff58:	f7ff fbce 	bl	800f6f8 <_free_r>
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	6360      	str	r0, [r4, #52]	; 0x34
 800ff60:	e7c0      	b.n	800fee4 <__sflush_r+0x1c>
 800ff62:	2301      	movs	r3, #1
 800ff64:	4628      	mov	r0, r5
 800ff66:	47b0      	blx	r6
 800ff68:	1c41      	adds	r1, r0, #1
 800ff6a:	d1c8      	bne.n	800fefe <__sflush_r+0x36>
 800ff6c:	682b      	ldr	r3, [r5, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d0c5      	beq.n	800fefe <__sflush_r+0x36>
 800ff72:	2b1d      	cmp	r3, #29
 800ff74:	d001      	beq.n	800ff7a <__sflush_r+0xb2>
 800ff76:	2b16      	cmp	r3, #22
 800ff78:	d101      	bne.n	800ff7e <__sflush_r+0xb6>
 800ff7a:	602f      	str	r7, [r5, #0]
 800ff7c:	e7b1      	b.n	800fee2 <__sflush_r+0x1a>
 800ff7e:	89a3      	ldrh	r3, [r4, #12]
 800ff80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff84:	81a3      	strh	r3, [r4, #12]
 800ff86:	e7ad      	b.n	800fee4 <__sflush_r+0x1c>
 800ff88:	690f      	ldr	r7, [r1, #16]
 800ff8a:	2f00      	cmp	r7, #0
 800ff8c:	d0a9      	beq.n	800fee2 <__sflush_r+0x1a>
 800ff8e:	0793      	lsls	r3, r2, #30
 800ff90:	680e      	ldr	r6, [r1, #0]
 800ff92:	bf08      	it	eq
 800ff94:	694b      	ldreq	r3, [r1, #20]
 800ff96:	600f      	str	r7, [r1, #0]
 800ff98:	bf18      	it	ne
 800ff9a:	2300      	movne	r3, #0
 800ff9c:	eba6 0807 	sub.w	r8, r6, r7
 800ffa0:	608b      	str	r3, [r1, #8]
 800ffa2:	f1b8 0f00 	cmp.w	r8, #0
 800ffa6:	dd9c      	ble.n	800fee2 <__sflush_r+0x1a>
 800ffa8:	6a21      	ldr	r1, [r4, #32]
 800ffaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ffac:	4643      	mov	r3, r8
 800ffae:	463a      	mov	r2, r7
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	47b0      	blx	r6
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	dc06      	bgt.n	800ffc6 <__sflush_r+0xfe>
 800ffb8:	89a3      	ldrh	r3, [r4, #12]
 800ffba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffbe:	81a3      	strh	r3, [r4, #12]
 800ffc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc4:	e78e      	b.n	800fee4 <__sflush_r+0x1c>
 800ffc6:	4407      	add	r7, r0
 800ffc8:	eba8 0800 	sub.w	r8, r8, r0
 800ffcc:	e7e9      	b.n	800ffa2 <__sflush_r+0xda>
 800ffce:	bf00      	nop
 800ffd0:	dfbffffe 	.word	0xdfbffffe

0800ffd4 <_fflush_r>:
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	690b      	ldr	r3, [r1, #16]
 800ffd8:	4605      	mov	r5, r0
 800ffda:	460c      	mov	r4, r1
 800ffdc:	b913      	cbnz	r3, 800ffe4 <_fflush_r+0x10>
 800ffde:	2500      	movs	r5, #0
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	b118      	cbz	r0, 800ffee <_fflush_r+0x1a>
 800ffe6:	6a03      	ldr	r3, [r0, #32]
 800ffe8:	b90b      	cbnz	r3, 800ffee <_fflush_r+0x1a>
 800ffea:	f7ff f9dd 	bl	800f3a8 <__sinit>
 800ffee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d0f3      	beq.n	800ffde <_fflush_r+0xa>
 800fff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fff8:	07d0      	lsls	r0, r2, #31
 800fffa:	d404      	bmi.n	8010006 <_fflush_r+0x32>
 800fffc:	0599      	lsls	r1, r3, #22
 800fffe:	d402      	bmi.n	8010006 <_fflush_r+0x32>
 8010000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010002:	f7ff fb51 	bl	800f6a8 <__retarget_lock_acquire_recursive>
 8010006:	4628      	mov	r0, r5
 8010008:	4621      	mov	r1, r4
 801000a:	f7ff ff5d 	bl	800fec8 <__sflush_r>
 801000e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010010:	07da      	lsls	r2, r3, #31
 8010012:	4605      	mov	r5, r0
 8010014:	d4e4      	bmi.n	800ffe0 <_fflush_r+0xc>
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	059b      	lsls	r3, r3, #22
 801001a:	d4e1      	bmi.n	800ffe0 <_fflush_r+0xc>
 801001c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801001e:	f7ff fb44 	bl	800f6aa <__retarget_lock_release_recursive>
 8010022:	e7dd      	b.n	800ffe0 <_fflush_r+0xc>

08010024 <fiprintf>:
 8010024:	b40e      	push	{r1, r2, r3}
 8010026:	b503      	push	{r0, r1, lr}
 8010028:	4601      	mov	r1, r0
 801002a:	ab03      	add	r3, sp, #12
 801002c:	4805      	ldr	r0, [pc, #20]	; (8010044 <fiprintf+0x20>)
 801002e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010032:	6800      	ldr	r0, [r0, #0]
 8010034:	9301      	str	r3, [sp, #4]
 8010036:	f000 f89f 	bl	8010178 <_vfiprintf_r>
 801003a:	b002      	add	sp, #8
 801003c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010040:	b003      	add	sp, #12
 8010042:	4770      	bx	lr
 8010044:	20000174 	.word	0x20000174

08010048 <memmove>:
 8010048:	4288      	cmp	r0, r1
 801004a:	b510      	push	{r4, lr}
 801004c:	eb01 0402 	add.w	r4, r1, r2
 8010050:	d902      	bls.n	8010058 <memmove+0x10>
 8010052:	4284      	cmp	r4, r0
 8010054:	4623      	mov	r3, r4
 8010056:	d807      	bhi.n	8010068 <memmove+0x20>
 8010058:	1e43      	subs	r3, r0, #1
 801005a:	42a1      	cmp	r1, r4
 801005c:	d008      	beq.n	8010070 <memmove+0x28>
 801005e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010066:	e7f8      	b.n	801005a <memmove+0x12>
 8010068:	4402      	add	r2, r0
 801006a:	4601      	mov	r1, r0
 801006c:	428a      	cmp	r2, r1
 801006e:	d100      	bne.n	8010072 <memmove+0x2a>
 8010070:	bd10      	pop	{r4, pc}
 8010072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801007a:	e7f7      	b.n	801006c <memmove+0x24>

0801007c <_sbrk_r>:
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	4d06      	ldr	r5, [pc, #24]	; (8010098 <_sbrk_r+0x1c>)
 8010080:	2300      	movs	r3, #0
 8010082:	4604      	mov	r4, r0
 8010084:	4608      	mov	r0, r1
 8010086:	602b      	str	r3, [r5, #0]
 8010088:	f7f2 fce0 	bl	8002a4c <_sbrk>
 801008c:	1c43      	adds	r3, r0, #1
 801008e:	d102      	bne.n	8010096 <_sbrk_r+0x1a>
 8010090:	682b      	ldr	r3, [r5, #0]
 8010092:	b103      	cbz	r3, 8010096 <_sbrk_r+0x1a>
 8010094:	6023      	str	r3, [r4, #0]
 8010096:	bd38      	pop	{r3, r4, r5, pc}
 8010098:	200041a4 	.word	0x200041a4

0801009c <memcpy>:
 801009c:	440a      	add	r2, r1
 801009e:	4291      	cmp	r1, r2
 80100a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80100a4:	d100      	bne.n	80100a8 <memcpy+0xc>
 80100a6:	4770      	bx	lr
 80100a8:	b510      	push	{r4, lr}
 80100aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100b2:	4291      	cmp	r1, r2
 80100b4:	d1f9      	bne.n	80100aa <memcpy+0xe>
 80100b6:	bd10      	pop	{r4, pc}

080100b8 <abort>:
 80100b8:	b508      	push	{r3, lr}
 80100ba:	2006      	movs	r0, #6
 80100bc:	f000 fa34 	bl	8010528 <raise>
 80100c0:	2001      	movs	r0, #1
 80100c2:	f7f2 fc4b 	bl	800295c <_exit>

080100c6 <_realloc_r>:
 80100c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100ca:	4680      	mov	r8, r0
 80100cc:	4614      	mov	r4, r2
 80100ce:	460e      	mov	r6, r1
 80100d0:	b921      	cbnz	r1, 80100dc <_realloc_r+0x16>
 80100d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100d6:	4611      	mov	r1, r2
 80100d8:	f7ff bb82 	b.w	800f7e0 <_malloc_r>
 80100dc:	b92a      	cbnz	r2, 80100ea <_realloc_r+0x24>
 80100de:	f7ff fb0b 	bl	800f6f8 <_free_r>
 80100e2:	4625      	mov	r5, r4
 80100e4:	4628      	mov	r0, r5
 80100e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ea:	f000 fa39 	bl	8010560 <_malloc_usable_size_r>
 80100ee:	4284      	cmp	r4, r0
 80100f0:	4607      	mov	r7, r0
 80100f2:	d802      	bhi.n	80100fa <_realloc_r+0x34>
 80100f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80100f8:	d812      	bhi.n	8010120 <_realloc_r+0x5a>
 80100fa:	4621      	mov	r1, r4
 80100fc:	4640      	mov	r0, r8
 80100fe:	f7ff fb6f 	bl	800f7e0 <_malloc_r>
 8010102:	4605      	mov	r5, r0
 8010104:	2800      	cmp	r0, #0
 8010106:	d0ed      	beq.n	80100e4 <_realloc_r+0x1e>
 8010108:	42bc      	cmp	r4, r7
 801010a:	4622      	mov	r2, r4
 801010c:	4631      	mov	r1, r6
 801010e:	bf28      	it	cs
 8010110:	463a      	movcs	r2, r7
 8010112:	f7ff ffc3 	bl	801009c <memcpy>
 8010116:	4631      	mov	r1, r6
 8010118:	4640      	mov	r0, r8
 801011a:	f7ff faed 	bl	800f6f8 <_free_r>
 801011e:	e7e1      	b.n	80100e4 <_realloc_r+0x1e>
 8010120:	4635      	mov	r5, r6
 8010122:	e7df      	b.n	80100e4 <_realloc_r+0x1e>

08010124 <__sfputc_r>:
 8010124:	6893      	ldr	r3, [r2, #8]
 8010126:	3b01      	subs	r3, #1
 8010128:	2b00      	cmp	r3, #0
 801012a:	b410      	push	{r4}
 801012c:	6093      	str	r3, [r2, #8]
 801012e:	da08      	bge.n	8010142 <__sfputc_r+0x1e>
 8010130:	6994      	ldr	r4, [r2, #24]
 8010132:	42a3      	cmp	r3, r4
 8010134:	db01      	blt.n	801013a <__sfputc_r+0x16>
 8010136:	290a      	cmp	r1, #10
 8010138:	d103      	bne.n	8010142 <__sfputc_r+0x1e>
 801013a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801013e:	f000 b935 	b.w	80103ac <__swbuf_r>
 8010142:	6813      	ldr	r3, [r2, #0]
 8010144:	1c58      	adds	r0, r3, #1
 8010146:	6010      	str	r0, [r2, #0]
 8010148:	7019      	strb	r1, [r3, #0]
 801014a:	4608      	mov	r0, r1
 801014c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010150:	4770      	bx	lr

08010152 <__sfputs_r>:
 8010152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010154:	4606      	mov	r6, r0
 8010156:	460f      	mov	r7, r1
 8010158:	4614      	mov	r4, r2
 801015a:	18d5      	adds	r5, r2, r3
 801015c:	42ac      	cmp	r4, r5
 801015e:	d101      	bne.n	8010164 <__sfputs_r+0x12>
 8010160:	2000      	movs	r0, #0
 8010162:	e007      	b.n	8010174 <__sfputs_r+0x22>
 8010164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010168:	463a      	mov	r2, r7
 801016a:	4630      	mov	r0, r6
 801016c:	f7ff ffda 	bl	8010124 <__sfputc_r>
 8010170:	1c43      	adds	r3, r0, #1
 8010172:	d1f3      	bne.n	801015c <__sfputs_r+0xa>
 8010174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010178 <_vfiprintf_r>:
 8010178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017c:	460d      	mov	r5, r1
 801017e:	b09d      	sub	sp, #116	; 0x74
 8010180:	4614      	mov	r4, r2
 8010182:	4698      	mov	r8, r3
 8010184:	4606      	mov	r6, r0
 8010186:	b118      	cbz	r0, 8010190 <_vfiprintf_r+0x18>
 8010188:	6a03      	ldr	r3, [r0, #32]
 801018a:	b90b      	cbnz	r3, 8010190 <_vfiprintf_r+0x18>
 801018c:	f7ff f90c 	bl	800f3a8 <__sinit>
 8010190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010192:	07d9      	lsls	r1, r3, #31
 8010194:	d405      	bmi.n	80101a2 <_vfiprintf_r+0x2a>
 8010196:	89ab      	ldrh	r3, [r5, #12]
 8010198:	059a      	lsls	r2, r3, #22
 801019a:	d402      	bmi.n	80101a2 <_vfiprintf_r+0x2a>
 801019c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801019e:	f7ff fa83 	bl	800f6a8 <__retarget_lock_acquire_recursive>
 80101a2:	89ab      	ldrh	r3, [r5, #12]
 80101a4:	071b      	lsls	r3, r3, #28
 80101a6:	d501      	bpl.n	80101ac <_vfiprintf_r+0x34>
 80101a8:	692b      	ldr	r3, [r5, #16]
 80101aa:	b99b      	cbnz	r3, 80101d4 <_vfiprintf_r+0x5c>
 80101ac:	4629      	mov	r1, r5
 80101ae:	4630      	mov	r0, r6
 80101b0:	f000 f93a 	bl	8010428 <__swsetup_r>
 80101b4:	b170      	cbz	r0, 80101d4 <_vfiprintf_r+0x5c>
 80101b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101b8:	07dc      	lsls	r4, r3, #31
 80101ba:	d504      	bpl.n	80101c6 <_vfiprintf_r+0x4e>
 80101bc:	f04f 30ff 	mov.w	r0, #4294967295
 80101c0:	b01d      	add	sp, #116	; 0x74
 80101c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c6:	89ab      	ldrh	r3, [r5, #12]
 80101c8:	0598      	lsls	r0, r3, #22
 80101ca:	d4f7      	bmi.n	80101bc <_vfiprintf_r+0x44>
 80101cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101ce:	f7ff fa6c 	bl	800f6aa <__retarget_lock_release_recursive>
 80101d2:	e7f3      	b.n	80101bc <_vfiprintf_r+0x44>
 80101d4:	2300      	movs	r3, #0
 80101d6:	9309      	str	r3, [sp, #36]	; 0x24
 80101d8:	2320      	movs	r3, #32
 80101da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101de:	f8cd 800c 	str.w	r8, [sp, #12]
 80101e2:	2330      	movs	r3, #48	; 0x30
 80101e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010398 <_vfiprintf_r+0x220>
 80101e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101ec:	f04f 0901 	mov.w	r9, #1
 80101f0:	4623      	mov	r3, r4
 80101f2:	469a      	mov	sl, r3
 80101f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101f8:	b10a      	cbz	r2, 80101fe <_vfiprintf_r+0x86>
 80101fa:	2a25      	cmp	r2, #37	; 0x25
 80101fc:	d1f9      	bne.n	80101f2 <_vfiprintf_r+0x7a>
 80101fe:	ebba 0b04 	subs.w	fp, sl, r4
 8010202:	d00b      	beq.n	801021c <_vfiprintf_r+0xa4>
 8010204:	465b      	mov	r3, fp
 8010206:	4622      	mov	r2, r4
 8010208:	4629      	mov	r1, r5
 801020a:	4630      	mov	r0, r6
 801020c:	f7ff ffa1 	bl	8010152 <__sfputs_r>
 8010210:	3001      	adds	r0, #1
 8010212:	f000 80a9 	beq.w	8010368 <_vfiprintf_r+0x1f0>
 8010216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010218:	445a      	add	r2, fp
 801021a:	9209      	str	r2, [sp, #36]	; 0x24
 801021c:	f89a 3000 	ldrb.w	r3, [sl]
 8010220:	2b00      	cmp	r3, #0
 8010222:	f000 80a1 	beq.w	8010368 <_vfiprintf_r+0x1f0>
 8010226:	2300      	movs	r3, #0
 8010228:	f04f 32ff 	mov.w	r2, #4294967295
 801022c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010230:	f10a 0a01 	add.w	sl, sl, #1
 8010234:	9304      	str	r3, [sp, #16]
 8010236:	9307      	str	r3, [sp, #28]
 8010238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801023c:	931a      	str	r3, [sp, #104]	; 0x68
 801023e:	4654      	mov	r4, sl
 8010240:	2205      	movs	r2, #5
 8010242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010246:	4854      	ldr	r0, [pc, #336]	; (8010398 <_vfiprintf_r+0x220>)
 8010248:	f7ef ffe2 	bl	8000210 <memchr>
 801024c:	9a04      	ldr	r2, [sp, #16]
 801024e:	b9d8      	cbnz	r0, 8010288 <_vfiprintf_r+0x110>
 8010250:	06d1      	lsls	r1, r2, #27
 8010252:	bf44      	itt	mi
 8010254:	2320      	movmi	r3, #32
 8010256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801025a:	0713      	lsls	r3, r2, #28
 801025c:	bf44      	itt	mi
 801025e:	232b      	movmi	r3, #43	; 0x2b
 8010260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010264:	f89a 3000 	ldrb.w	r3, [sl]
 8010268:	2b2a      	cmp	r3, #42	; 0x2a
 801026a:	d015      	beq.n	8010298 <_vfiprintf_r+0x120>
 801026c:	9a07      	ldr	r2, [sp, #28]
 801026e:	4654      	mov	r4, sl
 8010270:	2000      	movs	r0, #0
 8010272:	f04f 0c0a 	mov.w	ip, #10
 8010276:	4621      	mov	r1, r4
 8010278:	f811 3b01 	ldrb.w	r3, [r1], #1
 801027c:	3b30      	subs	r3, #48	; 0x30
 801027e:	2b09      	cmp	r3, #9
 8010280:	d94d      	bls.n	801031e <_vfiprintf_r+0x1a6>
 8010282:	b1b0      	cbz	r0, 80102b2 <_vfiprintf_r+0x13a>
 8010284:	9207      	str	r2, [sp, #28]
 8010286:	e014      	b.n	80102b2 <_vfiprintf_r+0x13a>
 8010288:	eba0 0308 	sub.w	r3, r0, r8
 801028c:	fa09 f303 	lsl.w	r3, r9, r3
 8010290:	4313      	orrs	r3, r2
 8010292:	9304      	str	r3, [sp, #16]
 8010294:	46a2      	mov	sl, r4
 8010296:	e7d2      	b.n	801023e <_vfiprintf_r+0xc6>
 8010298:	9b03      	ldr	r3, [sp, #12]
 801029a:	1d19      	adds	r1, r3, #4
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	9103      	str	r1, [sp, #12]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	bfbb      	ittet	lt
 80102a4:	425b      	neglt	r3, r3
 80102a6:	f042 0202 	orrlt.w	r2, r2, #2
 80102aa:	9307      	strge	r3, [sp, #28]
 80102ac:	9307      	strlt	r3, [sp, #28]
 80102ae:	bfb8      	it	lt
 80102b0:	9204      	strlt	r2, [sp, #16]
 80102b2:	7823      	ldrb	r3, [r4, #0]
 80102b4:	2b2e      	cmp	r3, #46	; 0x2e
 80102b6:	d10c      	bne.n	80102d2 <_vfiprintf_r+0x15a>
 80102b8:	7863      	ldrb	r3, [r4, #1]
 80102ba:	2b2a      	cmp	r3, #42	; 0x2a
 80102bc:	d134      	bne.n	8010328 <_vfiprintf_r+0x1b0>
 80102be:	9b03      	ldr	r3, [sp, #12]
 80102c0:	1d1a      	adds	r2, r3, #4
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	9203      	str	r2, [sp, #12]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	bfb8      	it	lt
 80102ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80102ce:	3402      	adds	r4, #2
 80102d0:	9305      	str	r3, [sp, #20]
 80102d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80103a8 <_vfiprintf_r+0x230>
 80102d6:	7821      	ldrb	r1, [r4, #0]
 80102d8:	2203      	movs	r2, #3
 80102da:	4650      	mov	r0, sl
 80102dc:	f7ef ff98 	bl	8000210 <memchr>
 80102e0:	b138      	cbz	r0, 80102f2 <_vfiprintf_r+0x17a>
 80102e2:	9b04      	ldr	r3, [sp, #16]
 80102e4:	eba0 000a 	sub.w	r0, r0, sl
 80102e8:	2240      	movs	r2, #64	; 0x40
 80102ea:	4082      	lsls	r2, r0
 80102ec:	4313      	orrs	r3, r2
 80102ee:	3401      	adds	r4, #1
 80102f0:	9304      	str	r3, [sp, #16]
 80102f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102f6:	4829      	ldr	r0, [pc, #164]	; (801039c <_vfiprintf_r+0x224>)
 80102f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102fc:	2206      	movs	r2, #6
 80102fe:	f7ef ff87 	bl	8000210 <memchr>
 8010302:	2800      	cmp	r0, #0
 8010304:	d03f      	beq.n	8010386 <_vfiprintf_r+0x20e>
 8010306:	4b26      	ldr	r3, [pc, #152]	; (80103a0 <_vfiprintf_r+0x228>)
 8010308:	bb1b      	cbnz	r3, 8010352 <_vfiprintf_r+0x1da>
 801030a:	9b03      	ldr	r3, [sp, #12]
 801030c:	3307      	adds	r3, #7
 801030e:	f023 0307 	bic.w	r3, r3, #7
 8010312:	3308      	adds	r3, #8
 8010314:	9303      	str	r3, [sp, #12]
 8010316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010318:	443b      	add	r3, r7
 801031a:	9309      	str	r3, [sp, #36]	; 0x24
 801031c:	e768      	b.n	80101f0 <_vfiprintf_r+0x78>
 801031e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010322:	460c      	mov	r4, r1
 8010324:	2001      	movs	r0, #1
 8010326:	e7a6      	b.n	8010276 <_vfiprintf_r+0xfe>
 8010328:	2300      	movs	r3, #0
 801032a:	3401      	adds	r4, #1
 801032c:	9305      	str	r3, [sp, #20]
 801032e:	4619      	mov	r1, r3
 8010330:	f04f 0c0a 	mov.w	ip, #10
 8010334:	4620      	mov	r0, r4
 8010336:	f810 2b01 	ldrb.w	r2, [r0], #1
 801033a:	3a30      	subs	r2, #48	; 0x30
 801033c:	2a09      	cmp	r2, #9
 801033e:	d903      	bls.n	8010348 <_vfiprintf_r+0x1d0>
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0c6      	beq.n	80102d2 <_vfiprintf_r+0x15a>
 8010344:	9105      	str	r1, [sp, #20]
 8010346:	e7c4      	b.n	80102d2 <_vfiprintf_r+0x15a>
 8010348:	fb0c 2101 	mla	r1, ip, r1, r2
 801034c:	4604      	mov	r4, r0
 801034e:	2301      	movs	r3, #1
 8010350:	e7f0      	b.n	8010334 <_vfiprintf_r+0x1bc>
 8010352:	ab03      	add	r3, sp, #12
 8010354:	9300      	str	r3, [sp, #0]
 8010356:	462a      	mov	r2, r5
 8010358:	4b12      	ldr	r3, [pc, #72]	; (80103a4 <_vfiprintf_r+0x22c>)
 801035a:	a904      	add	r1, sp, #16
 801035c:	4630      	mov	r0, r6
 801035e:	f3af 8000 	nop.w
 8010362:	4607      	mov	r7, r0
 8010364:	1c78      	adds	r0, r7, #1
 8010366:	d1d6      	bne.n	8010316 <_vfiprintf_r+0x19e>
 8010368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801036a:	07d9      	lsls	r1, r3, #31
 801036c:	d405      	bmi.n	801037a <_vfiprintf_r+0x202>
 801036e:	89ab      	ldrh	r3, [r5, #12]
 8010370:	059a      	lsls	r2, r3, #22
 8010372:	d402      	bmi.n	801037a <_vfiprintf_r+0x202>
 8010374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010376:	f7ff f998 	bl	800f6aa <__retarget_lock_release_recursive>
 801037a:	89ab      	ldrh	r3, [r5, #12]
 801037c:	065b      	lsls	r3, r3, #25
 801037e:	f53f af1d 	bmi.w	80101bc <_vfiprintf_r+0x44>
 8010382:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010384:	e71c      	b.n	80101c0 <_vfiprintf_r+0x48>
 8010386:	ab03      	add	r3, sp, #12
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	462a      	mov	r2, r5
 801038c:	4b05      	ldr	r3, [pc, #20]	; (80103a4 <_vfiprintf_r+0x22c>)
 801038e:	a904      	add	r1, sp, #16
 8010390:	4630      	mov	r0, r6
 8010392:	f7ff fc77 	bl	800fc84 <_printf_i>
 8010396:	e7e4      	b.n	8010362 <_vfiprintf_r+0x1ea>
 8010398:	08011163 	.word	0x08011163
 801039c:	0801116d 	.word	0x0801116d
 80103a0:	00000000 	.word	0x00000000
 80103a4:	08010153 	.word	0x08010153
 80103a8:	08011169 	.word	0x08011169

080103ac <__swbuf_r>:
 80103ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ae:	460e      	mov	r6, r1
 80103b0:	4614      	mov	r4, r2
 80103b2:	4605      	mov	r5, r0
 80103b4:	b118      	cbz	r0, 80103be <__swbuf_r+0x12>
 80103b6:	6a03      	ldr	r3, [r0, #32]
 80103b8:	b90b      	cbnz	r3, 80103be <__swbuf_r+0x12>
 80103ba:	f7fe fff5 	bl	800f3a8 <__sinit>
 80103be:	69a3      	ldr	r3, [r4, #24]
 80103c0:	60a3      	str	r3, [r4, #8]
 80103c2:	89a3      	ldrh	r3, [r4, #12]
 80103c4:	071a      	lsls	r2, r3, #28
 80103c6:	d525      	bpl.n	8010414 <__swbuf_r+0x68>
 80103c8:	6923      	ldr	r3, [r4, #16]
 80103ca:	b31b      	cbz	r3, 8010414 <__swbuf_r+0x68>
 80103cc:	6823      	ldr	r3, [r4, #0]
 80103ce:	6922      	ldr	r2, [r4, #16]
 80103d0:	1a98      	subs	r0, r3, r2
 80103d2:	6963      	ldr	r3, [r4, #20]
 80103d4:	b2f6      	uxtb	r6, r6
 80103d6:	4283      	cmp	r3, r0
 80103d8:	4637      	mov	r7, r6
 80103da:	dc04      	bgt.n	80103e6 <__swbuf_r+0x3a>
 80103dc:	4621      	mov	r1, r4
 80103de:	4628      	mov	r0, r5
 80103e0:	f7ff fdf8 	bl	800ffd4 <_fflush_r>
 80103e4:	b9e0      	cbnz	r0, 8010420 <__swbuf_r+0x74>
 80103e6:	68a3      	ldr	r3, [r4, #8]
 80103e8:	3b01      	subs	r3, #1
 80103ea:	60a3      	str	r3, [r4, #8]
 80103ec:	6823      	ldr	r3, [r4, #0]
 80103ee:	1c5a      	adds	r2, r3, #1
 80103f0:	6022      	str	r2, [r4, #0]
 80103f2:	701e      	strb	r6, [r3, #0]
 80103f4:	6962      	ldr	r2, [r4, #20]
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d004      	beq.n	8010406 <__swbuf_r+0x5a>
 80103fc:	89a3      	ldrh	r3, [r4, #12]
 80103fe:	07db      	lsls	r3, r3, #31
 8010400:	d506      	bpl.n	8010410 <__swbuf_r+0x64>
 8010402:	2e0a      	cmp	r6, #10
 8010404:	d104      	bne.n	8010410 <__swbuf_r+0x64>
 8010406:	4621      	mov	r1, r4
 8010408:	4628      	mov	r0, r5
 801040a:	f7ff fde3 	bl	800ffd4 <_fflush_r>
 801040e:	b938      	cbnz	r0, 8010420 <__swbuf_r+0x74>
 8010410:	4638      	mov	r0, r7
 8010412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010414:	4621      	mov	r1, r4
 8010416:	4628      	mov	r0, r5
 8010418:	f000 f806 	bl	8010428 <__swsetup_r>
 801041c:	2800      	cmp	r0, #0
 801041e:	d0d5      	beq.n	80103cc <__swbuf_r+0x20>
 8010420:	f04f 37ff 	mov.w	r7, #4294967295
 8010424:	e7f4      	b.n	8010410 <__swbuf_r+0x64>
	...

08010428 <__swsetup_r>:
 8010428:	b538      	push	{r3, r4, r5, lr}
 801042a:	4b2a      	ldr	r3, [pc, #168]	; (80104d4 <__swsetup_r+0xac>)
 801042c:	4605      	mov	r5, r0
 801042e:	6818      	ldr	r0, [r3, #0]
 8010430:	460c      	mov	r4, r1
 8010432:	b118      	cbz	r0, 801043c <__swsetup_r+0x14>
 8010434:	6a03      	ldr	r3, [r0, #32]
 8010436:	b90b      	cbnz	r3, 801043c <__swsetup_r+0x14>
 8010438:	f7fe ffb6 	bl	800f3a8 <__sinit>
 801043c:	89a3      	ldrh	r3, [r4, #12]
 801043e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010442:	0718      	lsls	r0, r3, #28
 8010444:	d422      	bmi.n	801048c <__swsetup_r+0x64>
 8010446:	06d9      	lsls	r1, r3, #27
 8010448:	d407      	bmi.n	801045a <__swsetup_r+0x32>
 801044a:	2309      	movs	r3, #9
 801044c:	602b      	str	r3, [r5, #0]
 801044e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010452:	81a3      	strh	r3, [r4, #12]
 8010454:	f04f 30ff 	mov.w	r0, #4294967295
 8010458:	e034      	b.n	80104c4 <__swsetup_r+0x9c>
 801045a:	0758      	lsls	r0, r3, #29
 801045c:	d512      	bpl.n	8010484 <__swsetup_r+0x5c>
 801045e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010460:	b141      	cbz	r1, 8010474 <__swsetup_r+0x4c>
 8010462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010466:	4299      	cmp	r1, r3
 8010468:	d002      	beq.n	8010470 <__swsetup_r+0x48>
 801046a:	4628      	mov	r0, r5
 801046c:	f7ff f944 	bl	800f6f8 <_free_r>
 8010470:	2300      	movs	r3, #0
 8010472:	6363      	str	r3, [r4, #52]	; 0x34
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801047a:	81a3      	strh	r3, [r4, #12]
 801047c:	2300      	movs	r3, #0
 801047e:	6063      	str	r3, [r4, #4]
 8010480:	6923      	ldr	r3, [r4, #16]
 8010482:	6023      	str	r3, [r4, #0]
 8010484:	89a3      	ldrh	r3, [r4, #12]
 8010486:	f043 0308 	orr.w	r3, r3, #8
 801048a:	81a3      	strh	r3, [r4, #12]
 801048c:	6923      	ldr	r3, [r4, #16]
 801048e:	b94b      	cbnz	r3, 80104a4 <__swsetup_r+0x7c>
 8010490:	89a3      	ldrh	r3, [r4, #12]
 8010492:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801049a:	d003      	beq.n	80104a4 <__swsetup_r+0x7c>
 801049c:	4621      	mov	r1, r4
 801049e:	4628      	mov	r0, r5
 80104a0:	f000 f88c 	bl	80105bc <__smakebuf_r>
 80104a4:	89a0      	ldrh	r0, [r4, #12]
 80104a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104aa:	f010 0301 	ands.w	r3, r0, #1
 80104ae:	d00a      	beq.n	80104c6 <__swsetup_r+0x9e>
 80104b0:	2300      	movs	r3, #0
 80104b2:	60a3      	str	r3, [r4, #8]
 80104b4:	6963      	ldr	r3, [r4, #20]
 80104b6:	425b      	negs	r3, r3
 80104b8:	61a3      	str	r3, [r4, #24]
 80104ba:	6923      	ldr	r3, [r4, #16]
 80104bc:	b943      	cbnz	r3, 80104d0 <__swsetup_r+0xa8>
 80104be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80104c2:	d1c4      	bne.n	801044e <__swsetup_r+0x26>
 80104c4:	bd38      	pop	{r3, r4, r5, pc}
 80104c6:	0781      	lsls	r1, r0, #30
 80104c8:	bf58      	it	pl
 80104ca:	6963      	ldrpl	r3, [r4, #20]
 80104cc:	60a3      	str	r3, [r4, #8]
 80104ce:	e7f4      	b.n	80104ba <__swsetup_r+0x92>
 80104d0:	2000      	movs	r0, #0
 80104d2:	e7f7      	b.n	80104c4 <__swsetup_r+0x9c>
 80104d4:	20000174 	.word	0x20000174

080104d8 <_raise_r>:
 80104d8:	291f      	cmp	r1, #31
 80104da:	b538      	push	{r3, r4, r5, lr}
 80104dc:	4604      	mov	r4, r0
 80104de:	460d      	mov	r5, r1
 80104e0:	d904      	bls.n	80104ec <_raise_r+0x14>
 80104e2:	2316      	movs	r3, #22
 80104e4:	6003      	str	r3, [r0, #0]
 80104e6:	f04f 30ff 	mov.w	r0, #4294967295
 80104ea:	bd38      	pop	{r3, r4, r5, pc}
 80104ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80104ee:	b112      	cbz	r2, 80104f6 <_raise_r+0x1e>
 80104f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104f4:	b94b      	cbnz	r3, 801050a <_raise_r+0x32>
 80104f6:	4620      	mov	r0, r4
 80104f8:	f000 f830 	bl	801055c <_getpid_r>
 80104fc:	462a      	mov	r2, r5
 80104fe:	4601      	mov	r1, r0
 8010500:	4620      	mov	r0, r4
 8010502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010506:	f000 b817 	b.w	8010538 <_kill_r>
 801050a:	2b01      	cmp	r3, #1
 801050c:	d00a      	beq.n	8010524 <_raise_r+0x4c>
 801050e:	1c59      	adds	r1, r3, #1
 8010510:	d103      	bne.n	801051a <_raise_r+0x42>
 8010512:	2316      	movs	r3, #22
 8010514:	6003      	str	r3, [r0, #0]
 8010516:	2001      	movs	r0, #1
 8010518:	e7e7      	b.n	80104ea <_raise_r+0x12>
 801051a:	2400      	movs	r4, #0
 801051c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010520:	4628      	mov	r0, r5
 8010522:	4798      	blx	r3
 8010524:	2000      	movs	r0, #0
 8010526:	e7e0      	b.n	80104ea <_raise_r+0x12>

08010528 <raise>:
 8010528:	4b02      	ldr	r3, [pc, #8]	; (8010534 <raise+0xc>)
 801052a:	4601      	mov	r1, r0
 801052c:	6818      	ldr	r0, [r3, #0]
 801052e:	f7ff bfd3 	b.w	80104d8 <_raise_r>
 8010532:	bf00      	nop
 8010534:	20000174 	.word	0x20000174

08010538 <_kill_r>:
 8010538:	b538      	push	{r3, r4, r5, lr}
 801053a:	4d07      	ldr	r5, [pc, #28]	; (8010558 <_kill_r+0x20>)
 801053c:	2300      	movs	r3, #0
 801053e:	4604      	mov	r4, r0
 8010540:	4608      	mov	r0, r1
 8010542:	4611      	mov	r1, r2
 8010544:	602b      	str	r3, [r5, #0]
 8010546:	f7f2 f9f9 	bl	800293c <_kill>
 801054a:	1c43      	adds	r3, r0, #1
 801054c:	d102      	bne.n	8010554 <_kill_r+0x1c>
 801054e:	682b      	ldr	r3, [r5, #0]
 8010550:	b103      	cbz	r3, 8010554 <_kill_r+0x1c>
 8010552:	6023      	str	r3, [r4, #0]
 8010554:	bd38      	pop	{r3, r4, r5, pc}
 8010556:	bf00      	nop
 8010558:	200041a4 	.word	0x200041a4

0801055c <_getpid_r>:
 801055c:	f7f2 b9e6 	b.w	800292c <_getpid>

08010560 <_malloc_usable_size_r>:
 8010560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010564:	1f18      	subs	r0, r3, #4
 8010566:	2b00      	cmp	r3, #0
 8010568:	bfbc      	itt	lt
 801056a:	580b      	ldrlt	r3, [r1, r0]
 801056c:	18c0      	addlt	r0, r0, r3
 801056e:	4770      	bx	lr

08010570 <__swhatbuf_r>:
 8010570:	b570      	push	{r4, r5, r6, lr}
 8010572:	460c      	mov	r4, r1
 8010574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010578:	2900      	cmp	r1, #0
 801057a:	b096      	sub	sp, #88	; 0x58
 801057c:	4615      	mov	r5, r2
 801057e:	461e      	mov	r6, r3
 8010580:	da0d      	bge.n	801059e <__swhatbuf_r+0x2e>
 8010582:	89a3      	ldrh	r3, [r4, #12]
 8010584:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010588:	f04f 0100 	mov.w	r1, #0
 801058c:	bf0c      	ite	eq
 801058e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010592:	2340      	movne	r3, #64	; 0x40
 8010594:	2000      	movs	r0, #0
 8010596:	6031      	str	r1, [r6, #0]
 8010598:	602b      	str	r3, [r5, #0]
 801059a:	b016      	add	sp, #88	; 0x58
 801059c:	bd70      	pop	{r4, r5, r6, pc}
 801059e:	466a      	mov	r2, sp
 80105a0:	f000 f848 	bl	8010634 <_fstat_r>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	dbec      	blt.n	8010582 <__swhatbuf_r+0x12>
 80105a8:	9901      	ldr	r1, [sp, #4]
 80105aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80105ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80105b2:	4259      	negs	r1, r3
 80105b4:	4159      	adcs	r1, r3
 80105b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105ba:	e7eb      	b.n	8010594 <__swhatbuf_r+0x24>

080105bc <__smakebuf_r>:
 80105bc:	898b      	ldrh	r3, [r1, #12]
 80105be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105c0:	079d      	lsls	r5, r3, #30
 80105c2:	4606      	mov	r6, r0
 80105c4:	460c      	mov	r4, r1
 80105c6:	d507      	bpl.n	80105d8 <__smakebuf_r+0x1c>
 80105c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	6123      	str	r3, [r4, #16]
 80105d0:	2301      	movs	r3, #1
 80105d2:	6163      	str	r3, [r4, #20]
 80105d4:	b002      	add	sp, #8
 80105d6:	bd70      	pop	{r4, r5, r6, pc}
 80105d8:	ab01      	add	r3, sp, #4
 80105da:	466a      	mov	r2, sp
 80105dc:	f7ff ffc8 	bl	8010570 <__swhatbuf_r>
 80105e0:	9900      	ldr	r1, [sp, #0]
 80105e2:	4605      	mov	r5, r0
 80105e4:	4630      	mov	r0, r6
 80105e6:	f7ff f8fb 	bl	800f7e0 <_malloc_r>
 80105ea:	b948      	cbnz	r0, 8010600 <__smakebuf_r+0x44>
 80105ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105f0:	059a      	lsls	r2, r3, #22
 80105f2:	d4ef      	bmi.n	80105d4 <__smakebuf_r+0x18>
 80105f4:	f023 0303 	bic.w	r3, r3, #3
 80105f8:	f043 0302 	orr.w	r3, r3, #2
 80105fc:	81a3      	strh	r3, [r4, #12]
 80105fe:	e7e3      	b.n	80105c8 <__smakebuf_r+0xc>
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	6020      	str	r0, [r4, #0]
 8010604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010608:	81a3      	strh	r3, [r4, #12]
 801060a:	9b00      	ldr	r3, [sp, #0]
 801060c:	6163      	str	r3, [r4, #20]
 801060e:	9b01      	ldr	r3, [sp, #4]
 8010610:	6120      	str	r0, [r4, #16]
 8010612:	b15b      	cbz	r3, 801062c <__smakebuf_r+0x70>
 8010614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010618:	4630      	mov	r0, r6
 801061a:	f000 f81d 	bl	8010658 <_isatty_r>
 801061e:	b128      	cbz	r0, 801062c <__smakebuf_r+0x70>
 8010620:	89a3      	ldrh	r3, [r4, #12]
 8010622:	f023 0303 	bic.w	r3, r3, #3
 8010626:	f043 0301 	orr.w	r3, r3, #1
 801062a:	81a3      	strh	r3, [r4, #12]
 801062c:	89a3      	ldrh	r3, [r4, #12]
 801062e:	431d      	orrs	r5, r3
 8010630:	81a5      	strh	r5, [r4, #12]
 8010632:	e7cf      	b.n	80105d4 <__smakebuf_r+0x18>

08010634 <_fstat_r>:
 8010634:	b538      	push	{r3, r4, r5, lr}
 8010636:	4d07      	ldr	r5, [pc, #28]	; (8010654 <_fstat_r+0x20>)
 8010638:	2300      	movs	r3, #0
 801063a:	4604      	mov	r4, r0
 801063c:	4608      	mov	r0, r1
 801063e:	4611      	mov	r1, r2
 8010640:	602b      	str	r3, [r5, #0]
 8010642:	f7f2 f9da 	bl	80029fa <_fstat>
 8010646:	1c43      	adds	r3, r0, #1
 8010648:	d102      	bne.n	8010650 <_fstat_r+0x1c>
 801064a:	682b      	ldr	r3, [r5, #0]
 801064c:	b103      	cbz	r3, 8010650 <_fstat_r+0x1c>
 801064e:	6023      	str	r3, [r4, #0]
 8010650:	bd38      	pop	{r3, r4, r5, pc}
 8010652:	bf00      	nop
 8010654:	200041a4 	.word	0x200041a4

08010658 <_isatty_r>:
 8010658:	b538      	push	{r3, r4, r5, lr}
 801065a:	4d06      	ldr	r5, [pc, #24]	; (8010674 <_isatty_r+0x1c>)
 801065c:	2300      	movs	r3, #0
 801065e:	4604      	mov	r4, r0
 8010660:	4608      	mov	r0, r1
 8010662:	602b      	str	r3, [r5, #0]
 8010664:	f7f2 f9d9 	bl	8002a1a <_isatty>
 8010668:	1c43      	adds	r3, r0, #1
 801066a:	d102      	bne.n	8010672 <_isatty_r+0x1a>
 801066c:	682b      	ldr	r3, [r5, #0]
 801066e:	b103      	cbz	r3, 8010672 <_isatty_r+0x1a>
 8010670:	6023      	str	r3, [r4, #0]
 8010672:	bd38      	pop	{r3, r4, r5, pc}
 8010674:	200041a4 	.word	0x200041a4

08010678 <_init>:
 8010678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067a:	bf00      	nop
 801067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801067e:	bc08      	pop	{r3}
 8010680:	469e      	mov	lr, r3
 8010682:	4770      	bx	lr

08010684 <_fini>:
 8010684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010686:	bf00      	nop
 8010688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801068a:	bc08      	pop	{r3}
 801068c:	469e      	mov	lr, r3
 801068e:	4770      	bx	lr
