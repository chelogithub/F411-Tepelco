
F411-Tepelco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010590  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  08010730  08010730  00020730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011238  08011238  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  08011238  08011238  00021238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011240  08011240  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011240  08011240  00021240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011244  08011244  00021244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08011248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000403c  20000178  080113c0  00030178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041b4  080113c0  000341b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a80  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000309a  00000000  00000000  00045c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00048d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e41  00000000  00000000  00049ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001885c  00000000  00000000  0004ace1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000181e9  00000000  00000000  0006353d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a8e  00000000  00000000  0007b726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005684  00000000  00000000  0010f1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00114838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010718 	.word	0x08010718

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	08010718 	.word	0x08010718

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b09a      	sub	sp, #104	; 0x68
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=34,//ETH.SIPR[3]=6,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2222      	movs	r2, #34	; 0x22
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f005 ff75 	bl	80067c0 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008d6:	4943      	ldr	r1, [pc, #268]	; (80009e4 <main+0x350>)
 80008d8:	4843      	ldr	r0, [pc, #268]	; (80009e8 <main+0x354>)
 80008da:	f00e ff37 	bl	800f74c <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008de:	4943      	ldr	r1, [pc, #268]	; (80009ec <main+0x358>)
 80008e0:	4843      	ldr	r0, [pc, #268]	; (80009f0 <main+0x35c>)
 80008e2:	f00e ff33 	bl	800f74c <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008e6:	4943      	ldr	r1, [pc, #268]	; (80009f4 <main+0x360>)
 80008e8:	4843      	ldr	r0, [pc, #268]	; (80009f8 <main+0x364>)
 80008ea:	f00e ff2f 	bl	800f74c <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008ee:	4943      	ldr	r1, [pc, #268]	; (80009fc <main+0x368>)
 80008f0:	4843      	ldr	r0, [pc, #268]	; (8000a00 <main+0x36c>)
 80008f2:	f00e ff2b 	bl	800f74c <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008f6:	4943      	ldr	r1, [pc, #268]	; (8000a04 <main+0x370>)
 80008f8:	4843      	ldr	r0, [pc, #268]	; (8000a08 <main+0x374>)
 80008fa:	f00e ff27 	bl	800f74c <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80008fe:	4943      	ldr	r1, [pc, #268]	; (8000a0c <main+0x378>)
 8000900:	4843      	ldr	r0, [pc, #268]	; (8000a10 <main+0x37c>)
 8000902:	f00e ff23 	bl	800f74c <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000906:	4943      	ldr	r1, [pc, #268]	; (8000a14 <main+0x380>)
 8000908:	4843      	ldr	r0, [pc, #268]	; (8000a18 <main+0x384>)
 800090a:	f00e ff1f 	bl	800f74c <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800090e:	4943      	ldr	r1, [pc, #268]	; (8000a1c <main+0x388>)
 8000910:	4843      	ldr	r0, [pc, #268]	; (8000a20 <main+0x38c>)
 8000912:	f00e ff1b 	bl	800f74c <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <main+0x34c>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <main+0x34c>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000948:	2206      	movs	r2, #6
 800094a:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 8000950:	2201      	movs	r2, #1
 8000952:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000958:	2203      	movs	r2, #3
 800095a:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000978:	220a      	movs	r2, #10
 800097a:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000988:	2233      	movs	r2, #51	; 0x33
 800098a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000998:	2235      	movs	r2, #53	; 0x35
 800099a:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
		wf._DBG_EN=1;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <main+0x390>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <main+0x348>)
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <main+0x394>)
 80009d0:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009d2:	4b02      	ldr	r3, [pc, #8]	; (80009dc <main+0x348>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d8:	4b00      	ldr	r3, [pc, #0]	; (80009dc <main+0x348>)
 80009da:	e027      	b.n	8000a2c <main+0x398>
 80009dc:	20002954 	.word	0x20002954
 80009e0:	20000b58 	.word	0x20000b58
 80009e4:	20000024 	.word	0x20000024
 80009e8:	20000b5e 	.word	0x20000b5e
 80009ec:	2000002c 	.word	0x2000002c
 80009f0:	20000b7e 	.word	0x20000b7e
 80009f4:	20000038 	.word	0x20000038
 80009f8:	20000b8e 	.word	0x20000b8e
 80009fc:	20000048 	.word	0x20000048
 8000a00:	20000b9e 	.word	0x20000b9e
 8000a04:	20000050 	.word	0x20000050
 8000a08:	20000ba4 	.word	0x20000ba4
 8000a0c:	20000060 	.word	0x20000060
 8000a10:	20000bba 	.word	0x20000bba
 8000a14:	20000070 	.word	0x20000070
 8000a18:	20000bca 	.word	0x20000bca
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	20000bb4 	.word	0x20000bb4
 8000a24:	20003a04 	.word	0x20003a04
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	4a4f      	ldr	r2, [pc, #316]	; (8000b6c <main+0x4d8>)
 8000a2e:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a30:	484f      	ldr	r0, [pc, #316]	; (8000b70 <main+0x4dc>)
 8000a32:	f00c f829 	bl	800ca88 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a36:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <main+0x4dc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a3c:	484d      	ldr	r0, [pc, #308]	; (8000b74 <main+0x4e0>)
 8000a3e:	f00c f823 	bl	800ca88 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <main+0x4e0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a48:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4849      	ldr	r0, [pc, #292]	; (8000b74 <main+0x4e0>)
 8000a50:	f00c f8bd 	bl	800cbce <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f002 f84c 	bl	8002af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 fad2 	bl	8001000 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a5c:	4b46      	ldr	r3, [pc, #280]	; (8000b78 <main+0x4e4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a46      	ldr	r2, [pc, #280]	; (8000b7c <main+0x4e8>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	099b      	lsrs	r3, r3, #6
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fdc9 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 fcd9 	bl	8001424 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a72:	f000 fb2d 	bl	80010d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a76:	f000 fc57 	bl	8001328 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a7a:	f000 fc7f 	bl	800137c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a7e:	f000 fca7 	bl	80013d0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a82:	f000 fb5b 	bl	800113c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a86:	f000 fbd3 	bl	8001230 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	483c      	ldr	r0, [pc, #240]	; (8000b80 <main+0x4ec>)
 8000a90:	f002 fd02 	bl	8003498 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a94:	210e      	movs	r1, #14
 8000a96:	483b      	ldr	r0, [pc, #236]	; (8000b84 <main+0x4f0>)
 8000a98:	f000 fd4c 	bl	8001534 <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000a9c:	f001 fc3c 	bl	8002318 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aa0:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <main+0x4f4>)
 8000aa2:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <main+0x41e>
 8000aaa:	2113      	movs	r1, #19
 8000aac:	4837      	ldr	r0, [pc, #220]	; (8000b8c <main+0x4f8>)
 8000aae:	f000 fd41 	bl	8001534 <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4936      	ldr	r1, [pc, #216]	; (8000b90 <main+0x4fc>)
 8000ab6:	4837      	ldr	r0, [pc, #220]	; (8000b94 <main+0x500>)
 8000ab8:	f004 fe17 	bl	80056ea <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	4936      	ldr	r1, [pc, #216]	; (8000b98 <main+0x504>)
 8000ac0:	4836      	ldr	r0, [pc, #216]	; (8000b9c <main+0x508>)
 8000ac2:	f004 fe12 	bl	80056ea <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ac6:	4b36      	ldr	r3, [pc, #216]	; (8000ba0 <main+0x50c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <main+0x442>
 8000ace:	2112      	movs	r1, #18
 8000ad0:	4834      	ldr	r0, [pc, #208]	; (8000ba4 <main+0x510>)
 8000ad2:	f000 fd2f 	bl	8001534 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <main+0x514>)
 8000ad8:	22f0      	movs	r2, #240	; 0xf0
 8000ada:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000adc:	4b32      	ldr	r3, [pc, #200]	; (8000ba8 <main+0x514>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <main+0x514>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <main+0x514>)
 8000aea:	22c0      	movs	r2, #192	; 0xc0
 8000aec:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000aee:	482e      	ldr	r0, [pc, #184]	; (8000ba8 <main+0x514>)
 8000af0:	f00d fc98 	bl	800e424 <eth_init>

   	 eth_socket_init(&ETH,0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	482c      	ldr	r0, [pc, #176]	; (8000ba8 <main+0x514>)
 8000af8:	f00d fd0e 	bl	800e518 <eth_socket_init>

   SPI_READ_EN=1;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <main+0x518>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <main+0x514>)
 8000b04:	220f      	movs	r2, #15
 8000b06:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <main+0x514>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <main+0x514>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <main+0x514>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b1a:	481e      	ldr	r0, [pc, #120]	; (8000b94 <main+0x500>)
 8000b1c:	f001 fc24 	bl	8002368 <ESP8266_HW_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d10c      	bne.n	8000b40 <main+0x4ac>
     {
   	  ESP_HW_Init=1;
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <main+0x51c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <main+0x4f4>)
 8000b2e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d04c      	beq.n	8000bd0 <main+0x53c>
 8000b36:	2113      	movs	r1, #19
 8000b38:	481e      	ldr	r0, [pc, #120]	; (8000bb4 <main+0x520>)
 8000b3a:	f000 fcfb 	bl	8001534 <ITM0_Write>
 8000b3e:	e047      	b.n	8000bd0 <main+0x53c>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b40:	f001 fbea 	bl	8002318 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <main+0x500>)
 8000b46:	f001 fc0f 	bl	8002368 <ESP8266_HW_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d133      	bne.n	8000bb8 <main+0x524>
   	  {
   		  ESP_HW_Init=1;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <main+0x51c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <main+0x4f4>)
 8000b58:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d037      	beq.n	8000bd0 <main+0x53c>
 8000b60:	2113      	movs	r1, #19
 8000b62:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <main+0x520>)
 8000b64:	f000 fce6 	bl	8001534 <ITM0_Write>
 8000b68:	e032      	b.n	8000bd0 <main+0x53c>
 8000b6a:	bf00      	nop
 8000b6c:	20000194 	.word	0x20000194
 8000b70:	200018ac 	.word	0x200018ac
 8000b74:	20001efc 	.word	0x20001efc
 8000b78:	20000084 	.word	0x20000084
 8000b7c:	10624dd3 	.word	0x10624dd3
 8000b80:	40020000 	.word	0x40020000
 8000b84:	08010730 	.word	0x08010730
 8000b88:	20000b58 	.word	0x20000b58
 8000b8c:	08010740 	.word	0x08010740
 8000b90:	2000401c 	.word	0x2000401c
 8000b94:	2000027c 	.word	0x2000027c
 8000b98:	20004020 	.word	0x20004020
 8000b9c:	200002c0 	.word	0x200002c0
 8000ba0:	2000294c 	.word	0x2000294c
 8000ba4:	08010754 	.word	0x08010754
 8000ba8:	20002954 	.word	0x20002954
 8000bac:	20003a14 	.word	0x20003a14
 8000bb0:	20003a07 	.word	0x20003a07
 8000bb4:	08010768 	.word	0x08010768
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bb8:	4baa      	ldr	r3, [pc, #680]	; (8000e64 <main+0x7d0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bbe:	4baa      	ldr	r3, [pc, #680]	; (8000e68 <main+0x7d4>)
 8000bc0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <main+0x53c>
 8000bc8:	2115      	movs	r1, #21
 8000bca:	48a8      	ldr	r0, [pc, #672]	; (8000e6c <main+0x7d8>)
 8000bcc:	f000 fcb2 	bl	8001534 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd4:	f001 fffe 	bl	8002bd4 <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bd8:	4ba2      	ldr	r3, [pc, #648]	; (8000e64 <main+0x7d0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	f040 80a9 	bne.w	8000d34 <main+0x6a0>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000be2:	4ba3      	ldr	r3, [pc, #652]	; (8000e70 <main+0x7dc>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	f040 80a4 	bne.w	8000d34 <main+0x6a0>
 8000bec:	4b9e      	ldr	r3, [pc, #632]	; (8000e68 <main+0x7d4>)
 8000bee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 809e 	bne.w	8000d34 <main+0x6a0>
 8000bf8:	4b9b      	ldr	r3, [pc, #620]	; (8000e68 <main+0x7d4>)
 8000bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bfe:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c02:	f340 8097 	ble.w	8000d34 <main+0x6a0>
 8000c06:	4b9b      	ldr	r3, [pc, #620]	; (8000e74 <main+0x7e0>)
 8000c08:	7c9b      	ldrb	r3, [r3, #18]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8092 	beq.w	8000d34 <main+0x6a0>
	  			{	ETH.S0_data_available=0;
 8000c10:	4b98      	ldr	r3, [pc, #608]	; (8000e74 <main+0x7e0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c16:	4b98      	ldr	r3, [pc, #608]	; (8000e78 <main+0x7e4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c1c:	4b94      	ldr	r3, [pc, #592]	; (8000e70 <main+0x7dc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c22:	2100      	movs	r1, #0
 8000c24:	4895      	ldr	r0, [pc, #596]	; (8000e7c <main+0x7e8>)
 8000c26:	f00c f800 	bl	800cc2a <ModBUS_F03_Read>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4698      	mov	r8, r3
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4892      	ldr	r0, [pc, #584]	; (8000e7c <main+0x7e8>)
 8000c32:	f00b fffa 	bl	800cc2a <ModBUS_F03_Read>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461c      	mov	r4, r3
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	488f      	ldr	r0, [pc, #572]	; (8000e7c <main+0x7e8>)
 8000c3e:	f00b fff4 	bl	800cc2a <ModBUS_F03_Read>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461d      	mov	r5, r3
 8000c46:	2103      	movs	r1, #3
 8000c48:	488c      	ldr	r0, [pc, #560]	; (8000e7c <main+0x7e8>)
 8000c4a:	f00b ffee 	bl	800cc2a <ModBUS_F03_Read>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461e      	mov	r6, r3
 8000c52:	2104      	movs	r1, #4
 8000c54:	4889      	ldr	r0, [pc, #548]	; (8000e7c <main+0x7e8>)
 8000c56:	f00b ffe8 	bl	800cc2a <ModBUS_F03_Read>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	2105      	movs	r1, #5
 8000c60:	4886      	ldr	r0, [pc, #536]	; (8000e7c <main+0x7e8>)
 8000c62:	f00b ffe2 	bl	800cc2a <ModBUS_F03_Read>
 8000c66:	4603      	mov	r3, r0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	2106      	movs	r1, #6
 8000c6c:	4883      	ldr	r0, [pc, #524]	; (8000e7c <main+0x7e8>)
 8000c6e:	f00b ffdc 	bl	800cc2a <ModBUS_F03_Read>
 8000c72:	4603      	mov	r3, r0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	2107      	movs	r1, #7
 8000c78:	4880      	ldr	r0, [pc, #512]	; (8000e7c <main+0x7e8>)
 8000c7a:	f00b ffd6 	bl	800cc2a <ModBUS_F03_Read>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	2108      	movs	r1, #8
 8000c84:	487d      	ldr	r0, [pc, #500]	; (8000e7c <main+0x7e8>)
 8000c86:	f00b ffd0 	bl	800cc2a <ModBUS_F03_Read>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	2109      	movs	r1, #9
 8000c90:	487a      	ldr	r0, [pc, #488]	; (8000e7c <main+0x7e8>)
 8000c92:	f00b ffca 	bl	800cc2a <ModBUS_F03_Read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9e:	9312      	str	r3, [sp, #72]	; 0x48
 8000ca0:	4b77      	ldr	r3, [pc, #476]	; (8000e80 <main+0x7ec>)
 8000ca2:	9311      	str	r3, [sp, #68]	; 0x44
 8000ca4:	4b77      	ldr	r3, [pc, #476]	; (8000e84 <main+0x7f0>)
 8000ca6:	9310      	str	r3, [sp, #64]	; 0x40
 8000ca8:	2300      	movs	r3, #0
 8000caa:	930f      	str	r3, [sp, #60]	; 0x3c
 8000cac:	2300      	movs	r3, #0
 8000cae:	930e      	str	r3, [sp, #56]	; 0x38
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	930d      	str	r3, [sp, #52]	; 0x34
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8000cb8:	2300      	movs	r3, #0
 8000cba:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8000cc4:	9208      	str	r2, [sp, #32]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	9207      	str	r2, [sp, #28]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	9206      	str	r2, [sp, #24]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	9205      	str	r2, [sp, #20]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	9204      	str	r2, [sp, #16]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	9303      	str	r3, [sp, #12]
 8000cda:	9602      	str	r6, [sp, #8]
 8000cdc:	9501      	str	r5, [sp, #4]
 8000cde:	9400      	str	r4, [sp, #0]
 8000ce0:	4643      	mov	r3, r8
 8000ce2:	4a69      	ldr	r2, [pc, #420]	; (8000e88 <main+0x7f4>)
 8000ce4:	4969      	ldr	r1, [pc, #420]	; (8000e8c <main+0x7f8>)
 8000ce6:	486a      	ldr	r0, [pc, #424]	; (8000e90 <main+0x7fc>)
 8000ce8:	f00a fdc2 	bl	800b870 <httpPOST>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d020      	beq.n	8000d34 <main+0x6a0>
									0,
									0,TEPELCO,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000cf2:	4864      	ldr	r0, [pc, #400]	; (8000e84 <main+0x7f0>)
 8000cf4:	f7ff fa7e 	bl	80001f4 <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2341      	movs	r3, #65	; 0x41
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2300      	movs	r3, #0
 8000d02:	4960      	ldr	r1, [pc, #384]	; (8000e84 <main+0x7f0>)
 8000d04:	4863      	ldr	r0, [pc, #396]	; (8000e94 <main+0x800>)
 8000d06:	f00e f9ed 	bl	800f0e4 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d0a:	485e      	ldr	r0, [pc, #376]	; (8000e84 <main+0x7f0>)
 8000d0c:	f7ff fa72 	bl	80001f4 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b54      	ldr	r3, [pc, #336]	; (8000e68 <main+0x7d4>)
 8000d16:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d1a:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <main+0x7d4>)
 8000d1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d807      	bhi.n	8000d34 <main+0x6a0>
	  							{
	  								EnviarDatos(&wf);
 8000d24:	4850      	ldr	r0, [pc, #320]	; (8000e68 <main+0x7d4>)
 8000d26:	f005 fd35 	bl	8006794 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d2a:	4b4f      	ldr	r3, [pc, #316]	; (8000e68 <main+0x7d4>)
 8000d2c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d34:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <main+0x804>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d003      	beq.n	8000d44 <main+0x6b0>
 8000d3c:	4b57      	ldr	r3, [pc, #348]	; (8000e9c <main+0x808>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d175      	bne.n	8000e30 <main+0x79c>
	  		{
	  			if(FLAG_UART1==1)
 8000d44:	4b54      	ldr	r3, [pc, #336]	; (8000e98 <main+0x804>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d11c      	bne.n	8000d86 <main+0x6f2>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d4c:	4b54      	ldr	r3, [pc, #336]	; (8000ea0 <main+0x80c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <main+0x810>)
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	4954      	ldr	r1, [pc, #336]	; (8000ea8 <main+0x814>)
 8000d58:	4854      	ldr	r0, [pc, #336]	; (8000eac <main+0x818>)
 8000d5a:	f00e f9c3 	bl	800f0e4 <CopiaVector>
	  					FLAG_UART1=0;
 8000d5e:	4b4e      	ldr	r3, [pc, #312]	; (8000e98 <main+0x804>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000d64:	4b52      	ldr	r3, [pc, #328]	; (8000eb0 <main+0x81c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d102      	bne.n	8000d72 <main+0x6de>
	  						{
	  							error_rxdata=0;
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <main+0x81c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000d72:	4b4f      	ldr	r3, [pc, #316]	; (8000eb0 <main+0x81c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d105      	bne.n	8000d86 <main+0x6f2>
	  						{
	  							error_rxdata=5;
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <main+0x81c>)
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000d80:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <main+0x81c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000d86:	4b45      	ldr	r3, [pc, #276]	; (8000e9c <main+0x808>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d102      	bne.n	8000d94 <main+0x700>
	  					{
	  						FLAG_TIMEOUT=0;
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <main+0x808>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000d94:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <main+0x7d0>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d149      	bne.n	8000e30 <main+0x79c>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000d9c:	4b40      	ldr	r3, [pc, #256]	; (8000ea0 <main+0x80c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a31      	ldr	r2, [pc, #196]	; (8000e68 <main+0x7d4>)
 8000da2:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000da6:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <main+0x80c>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <main+0x810>)
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2301      	movs	r3, #1
 8000db0:	493d      	ldr	r1, [pc, #244]	; (8000ea8 <main+0x814>)
 8000db2:	483e      	ldr	r0, [pc, #248]	; (8000eac <main+0x818>)
 8000db4:	f00e f996 	bl	800f0e4 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000db8:	482b      	ldr	r0, [pc, #172]	; (8000e68 <main+0x7d4>)
 8000dba:	f005 fdd1 	bl	8006960 <AT_ESP8266_ND>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <main+0x820>)
 8000dc4:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <main+0x7d4>)
 8000dc8:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d12f      	bne.n	8000e30 <main+0x79c>
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <main+0x7d4>)
 8000dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dd6:	2b63      	cmp	r3, #99	; 0x63
 8000dd8:	d12a      	bne.n	8000e30 <main+0x79c>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dda:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <main+0x7d4>)
 8000ddc:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000de0:	2341      	movs	r3, #65	; 0x41
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2300      	movs	r3, #0
 8000de6:	4934      	ldr	r1, [pc, #208]	; (8000eb8 <main+0x824>)
 8000de8:	4834      	ldr	r0, [pc, #208]	; (8000ebc <main+0x828>)
 8000dea:	f00e f97b 	bl	800f0e4 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <main+0x7d4>)
 8000df0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <main+0x82c>)
 8000df6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000dfa:	4831      	ldr	r0, [pc, #196]	; (8000ec0 <main+0x82c>)
 8000dfc:	f00b ff9a 	bl	800cd34 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <main+0x82c>)
 8000e02:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e06:	2341      	movs	r3, #65	; 0x41
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	492d      	ldr	r1, [pc, #180]	; (8000ec4 <main+0x830>)
 8000e0e:	4821      	ldr	r0, [pc, #132]	; (8000e94 <main+0x800>)
 8000e10:	f00e f968 	bl	800f0e4 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <main+0x82c>)
 8000e16:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <main+0x7d4>)
 8000e1c:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <main+0x7d4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <main+0x7d4>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <main+0x834>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <main+0x7b0>
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <main+0x838>)
 8000e3a:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	f040 808e 	bne.w	8000f60 <main+0x8cc>
	  		{
	  			if(FLAG_UART2==1)
 8000e44:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <main+0x834>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d105      	bne.n	8000e58 <main+0x7c4>
	  				{
	  				FLAG_UART2=0;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <main+0x834>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000e52:	481e      	ldr	r0, [pc, #120]	; (8000ecc <main+0x838>)
 8000e54:	f00b f960 	bl	800c118 <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <main+0x838>)
 8000e5a:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d17e      	bne.n	8000f60 <main+0x8cc>
 8000e62:	e035      	b.n	8000ed0 <main+0x83c>
 8000e64:	20003a07 	.word	0x20003a07
 8000e68:	20000b58 	.word	0x20000b58
 8000e6c:	0801077c 	.word	0x0801077c
 8000e70:	2000294d 	.word	0x2000294d
 8000e74:	20002954 	.word	0x20002954
 8000e78:	20002950 	.word	0x20002950
 8000e7c:	200018ac 	.word	0x200018ac
 8000e80:	2000274c 	.word	0x2000274c
 8000e84:	2000254c 	.word	0x2000254c
 8000e88:	2000001c 	.word	0x2000001c
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000dec 	.word	0x20000dec
 8000e98:	20003a0c 	.word	0x20003a0c
 8000e9c:	20003a0b 	.word	0x20003a0b
 8000ea0:	20004028 	.word	0x20004028
 8000ea4:	20004018 	.word	0x20004018
 8000ea8:	20003e18 	.word	0x20003e18
 8000eac:	200011ec 	.word	0x200011ec
 8000eb0:	20003a0f 	.word	0x20003a0f
 8000eb4:	20003a0e 	.word	0x20003a0e
 8000eb8:	20000bec 	.word	0x20000bec
 8000ebc:	20001f0e 	.word	0x20001f0e
 8000ec0:	20001efc 	.word	0x20001efc
 8000ec4:	20002114 	.word	0x20002114
 8000ec8:	20003a0d 	.word	0x20003a0d
 8000ecc:	20000350 	.word	0x20000350
	  				{
	  					lr.tmr_dly_ON=0;
 8000ed0:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <main+0x930>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000ed8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000edc:	4839      	ldr	r0, [pc, #228]	; (8000fc4 <main+0x930>)
 8000ede:	f00b f8ff 	bl	800c0e0 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <main+0x930>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <main+0x930>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000ef0:	4835      	ldr	r0, [pc, #212]	; (8000fc8 <main+0x934>)
 8000ef2:	f7ff f97f 	bl	80001f4 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <main+0x934>)
 8000efc:	4413      	add	r3, r2
 8000efe:	4933      	ldr	r1, [pc, #204]	; (8000fcc <main+0x938>)
 8000f00:	461a      	mov	r2, r3
 8000f02:	460b      	mov	r3, r1
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000f08:	4831      	ldr	r0, [pc, #196]	; (8000fd0 <main+0x93c>)
 8000f0a:	f7ff f973 	bl	80001f4 <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <main+0x93c>)
 8000f14:	4413      	add	r3, r2
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <main+0x940>)
 8000f18:	4614      	mov	r4, r2
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	f104 0e20 	add.w	lr, r4, #32
 8000f20:	4665      	mov	r5, ip
 8000f22:	4626      	mov	r6, r4
 8000f24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f26:	6028      	str	r0, [r5, #0]
 8000f28:	6069      	str	r1, [r5, #4]
 8000f2a:	60aa      	str	r2, [r5, #8]
 8000f2c:	60eb      	str	r3, [r5, #12]
 8000f2e:	3410      	adds	r4, #16
 8000f30:	f10c 0c10 	add.w	ip, ip, #16
 8000f34:	4574      	cmp	r4, lr
 8000f36:	d1f3      	bne.n	8000f20 <main+0x88c>
 8000f38:	4663      	mov	r3, ip
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	6810      	ldr	r0, [r2, #0]
 8000f3e:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <main+0x930>)
 8000f42:	2223      	movs	r2, #35	; 0x23
 8000f44:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <main+0x930>)
 8000f4a:	2214      	movs	r2, #20
 8000f4c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8000f50:	4921      	ldr	r1, [pc, #132]	; (8000fd8 <main+0x944>)
 8000f52:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <main+0x930>)
 8000f54:	f00b f816 	bl	800bf84 <LoRa_Send>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <main+0x948>)
 8000f5e:	701a      	strb	r2, [r3, #0]
	  				}

	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <main+0x94c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d108      	bne.n	8000f7a <main+0x8e6>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000f68:	2201      	movs	r2, #1
 8000f6a:	491e      	ldr	r1, [pc, #120]	; (8000fe4 <main+0x950>)
 8000f6c:	481e      	ldr	r0, [pc, #120]	; (8000fe8 <main+0x954>)
 8000f6e:	f008 ff9f 	bl	8009eb0 <WiFi_Conn_ND>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <main+0x958>)
 8000f78:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <main+0x95c>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	f47f ae2a 	bne.w	8000bd8 <main+0x544>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8a:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <main+0x960>)
 8000f8c:	f002 fa84 	bl	8003498 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000f90:	2115      	movs	r1, #21
 8000f92:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <main+0x964>)
 8000f94:	f000 face 	bl	8001534 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000f98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f9c:	f001 fe1a 	bl	8002bd4 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <main+0x960>)
 8000fa8:	f002 fa76 	bl	8003498 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000fac:	2118      	movs	r1, #24
 8000fae:	4813      	ldr	r0, [pc, #76]	; (8000ffc <main+0x968>)
 8000fb0:	f000 fac0 	bl	8001534 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000fb4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fb8:	f001 fe0c 	bl	8002bd4 <HAL_Delay>
	  				esp_restart=0;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <main+0x95c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000fc2:	e609      	b.n	8000bd8 <main+0x544>
 8000fc4:	20000350 	.word	0x20000350
 8000fc8:	20000366 	.word	0x20000366
 8000fcc:	08010794 	.word	0x08010794
 8000fd0:	2000082c 	.word	0x2000082c
 8000fd4:	08010798 	.word	0x08010798
 8000fd8:	200002c0 	.word	0x200002c0
 8000fdc:	20000b54 	.word	0x20000b54
 8000fe0:	20003a07 	.word	0x20003a07
 8000fe4:	2000027c 	.word	0x2000027c
 8000fe8:	20000b58 	.word	0x20000b58
 8000fec:	20003a11 	.word	0x20003a11
 8000ff0:	20003a10 	.word	0x20003a10
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	080107bc 	.word	0x080107bc
 8000ffc:	080107d4 	.word	0x080107d4

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	2230      	movs	r2, #48	; 0x30
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00e fab3 	bl	800f57a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <SystemClock_Config+0xc8>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <SystemClock_Config+0xc8>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <SystemClock_Config+0xc8>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <SystemClock_Config+0xcc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a20      	ldr	r2, [pc, #128]	; (80010cc <SystemClock_Config+0xcc>)
 800104a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <SystemClock_Config+0xcc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800105c:	2301      	movs	r3, #1
 800105e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001070:	230c      	movs	r3, #12
 8001072:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001074:	2360      	movs	r3, #96	; 0x60
 8001076:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001078:	2302      	movs	r3, #2
 800107a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800107c:	2304      	movs	r3, #4
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fa3b 	bl	8003500 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001090:	f001 fa1a 	bl	80024c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001098:	2302      	movs	r3, #2
 800109a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2103      	movs	r1, #3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fc9d 	bl	80039f0 <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010bc:	f001 fa04 	bl	80024c8 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3750      	adds	r7, #80	; 0x50
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_SPI1_Init+0x64>)
 80010d6:	4a18      	ldr	r2, [pc, #96]	; (8001138 <MX_SPI1_Init+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_SPI1_Init+0x64>)
 80010dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_SPI1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_SPI1_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_SPI1_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_SPI1_Init+0x64>)
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001100:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_SPI1_Init+0x64>)
 8001104:	2210      	movs	r2, #16
 8001106:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_SPI1_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_SPI1_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_SPI1_Init+0x64>)
 800111c:	220a      	movs	r2, #10
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_SPI1_Init+0x64>)
 8001122:	f002 fe45 	bl	8003db0 <HAL_SPI_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800112c:	f001 f9cc 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000194 	.word	0x20000194
 8001138:	40013000 	.word	0x40013000

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b2f      	ldr	r3, [pc, #188]	; (800122c <MX_TIM2_Init+0xf0>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_TIM2_Init+0xf0>)
 8001176:	2264      	movs	r2, #100	; 0x64
 8001178:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b2c      	ldr	r3, [pc, #176]	; (800122c <MX_TIM2_Init+0xf0>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_TIM2_Init+0xf0>)
 8001182:	2264      	movs	r2, #100	; 0x64
 8001184:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <MX_TIM2_Init+0xf0>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <MX_TIM2_Init+0xf0>)
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001192:	4826      	ldr	r0, [pc, #152]	; (800122c <MX_TIM2_Init+0xf0>)
 8001194:	f003 f902 	bl	800439c <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800119e:	f001 f993 	bl	80024c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481f      	ldr	r0, [pc, #124]	; (800122c <MX_TIM2_Init+0xf0>)
 80011b0:	f003 fd0a 	bl	8004bc8 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011ba:	f001 f985 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011be:	481b      	ldr	r0, [pc, #108]	; (800122c <MX_TIM2_Init+0xf0>)
 80011c0:	f003 f93b 	bl	800443a <HAL_TIM_OC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011ca:	f001 f97d 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80011ce:	2108      	movs	r1, #8
 80011d0:	4816      	ldr	r0, [pc, #88]	; (800122c <MX_TIM2_Init+0xf0>)
 80011d2:	f003 fb3b 	bl	800484c <HAL_TIM_OnePulse_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80011dc:	f001 f974 	bl	80024c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4619      	mov	r1, r3
 80011ee:	480f      	ldr	r0, [pc, #60]	; (800122c <MX_TIM2_Init+0xf0>)
 80011f0:	f004 f8a6 	bl	8005340 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80011fa:	f001 f965 	bl	80024c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80011fe:	2320      	movs	r3, #32
 8001200:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_TIM2_Init+0xf0>)
 8001216:	f003 fc7b 	bl	8004b10 <HAL_TIM_OC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001220:	f001 f952 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3738      	adds	r7, #56	; 0x38
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001ec 	.word	0x200001ec

08001230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <MX_TIM3_Init+0xf0>)
 8001262:	4a30      	ldr	r2, [pc, #192]	; (8001324 <MX_TIM3_Init+0xf4>)
 8001264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <MX_TIM3_Init+0xf0>)
 8001268:	2264      	movs	r2, #100	; 0x64
 800126a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <MX_TIM3_Init+0xf0>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <MX_TIM3_Init+0xf0>)
 8001274:	2296      	movs	r2, #150	; 0x96
 8001276:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <MX_TIM3_Init+0xf0>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <MX_TIM3_Init+0xf0>)
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001284:	4826      	ldr	r0, [pc, #152]	; (8001320 <MX_TIM3_Init+0xf0>)
 8001286:	f003 f889 	bl	800439c <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001290:	f001 f91a 	bl	80024c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129e:	4619      	mov	r1, r3
 80012a0:	481f      	ldr	r0, [pc, #124]	; (8001320 <MX_TIM3_Init+0xf0>)
 80012a2:	f003 fc91 	bl	8004bc8 <HAL_TIM_ConfigClockSource>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80012ac:	f001 f90c 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <MX_TIM3_Init+0xf0>)
 80012b2:	f003 f8c2 	bl	800443a <HAL_TIM_OC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80012bc:	f001 f904 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80012c0:	2108      	movs	r1, #8
 80012c2:	4817      	ldr	r0, [pc, #92]	; (8001320 <MX_TIM3_Init+0xf0>)
 80012c4:	f003 fac2 	bl	800484c <HAL_TIM_OnePulse_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80012ce:	f001 f8fb 	bl	80024c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	4619      	mov	r1, r3
 80012e0:	480f      	ldr	r0, [pc, #60]	; (8001320 <MX_TIM3_Init+0xf0>)
 80012e2:	f004 f82d 	bl	8005340 <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80012ec:	f001 f8ec 	bl	80024c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012f0:	2320      	movs	r3, #32
 80012f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_TIM3_Init+0xf0>)
 8001308:	f003 fc02 	bl	8004b10 <HAL_TIM_OC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001312:	f001 f8d9 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3738      	adds	r7, #56	; 0x38
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000234 	.word	0x20000234
 8001324:	40000400 	.word	0x40000400

08001328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <MX_USART1_UART_Init+0x50>)
 8001330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001360:	f004 f870 	bl	8005444 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800136a:	f001 f8ad 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000027c 	.word	0x2000027c
 8001378:	40011000 	.word	0x40011000

0800137c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_USART2_UART_Init+0x50>)
 8001384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f004 f846 	bl	8005444 <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013be:	f001 f883 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200002c0 	.word	0x200002c0
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_USART6_UART_Init+0x4c>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <MX_USART6_UART_Init+0x50>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_USART6_UART_Init+0x4c>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_USART6_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_USART6_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_USART6_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_USART6_UART_Init+0x4c>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_USART6_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_USART6_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_USART6_UART_Init+0x4c>)
 8001408:	f004 f81c 	bl	8005444 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001412:	f001 f859 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000304 	.word	0x20000304
 8001420:	40011400 	.word	0x40011400

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <MX_GPIO_Init+0x104>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a39      	ldr	r2, [pc, #228]	; (8001528 <MX_GPIO_Init+0x104>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <MX_GPIO_Init+0x104>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <MX_GPIO_Init+0x104>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a32      	ldr	r2, [pc, #200]	; (8001528 <MX_GPIO_Init+0x104>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <MX_GPIO_Init+0x104>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_GPIO_Init+0x104>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a2b      	ldr	r2, [pc, #172]	; (8001528 <MX_GPIO_Init+0x104>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_GPIO_Init+0x104>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_GPIO_Init+0x104>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a24      	ldr	r2, [pc, #144]	; (8001528 <MX_GPIO_Init+0x104>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_GPIO_Init+0x104>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b0:	481e      	ldr	r0, [pc, #120]	; (800152c <MX_GPIO_Init+0x108>)
 80014b2:	f001 fff1 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2102      	movs	r1, #2
 80014ba:	481d      	ldr	r0, [pc, #116]	; (8001530 <MX_GPIO_Init+0x10c>)
 80014bc:	f001 ffec 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2110      	movs	r1, #16
 80014c4:	481a      	ldr	r0, [pc, #104]	; (8001530 <MX_GPIO_Init+0x10c>)
 80014c6:	f001 ffe7 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80014ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4812      	ldr	r0, [pc, #72]	; (800152c <MX_GPIO_Init+0x108>)
 80014e4:	f001 fd70 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 80014e8:	f240 1301 	movw	r3, #257	; 0x101
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_GPIO_Init+0x10c>)
 80014fe:	f001 fd63 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 8001502:	2312      	movs	r3, #18
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_GPIO_Init+0x10c>)
 800151a:	f001 fd55 	bl	8002fc8 <HAL_GPIO_Init>

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40020800 	.word	0x40020800
 8001530:	40020000 	.word	0x40020000

08001534 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e009      	b.n	8001558 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f879 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf1      	blt.n	8001544 <ITM0_Write+0x10>
  }
  return len;
 8001560:	683b      	ldr	r3, [r7, #0]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 8001572:	4b68      	ldr	r3, [pc, #416]	; (8001714 <SysTick_Handler+0x1a8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	4a66      	ldr	r2, [pc, #408]	; (8001714 <SysTick_Handler+0x1a8>)
 800157a:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 800157c:	4b66      	ldr	r3, [pc, #408]	; (8001718 <SysTick_Handler+0x1ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	4a65      	ldr	r2, [pc, #404]	; (8001718 <SysTick_Handler+0x1ac>)
 8001584:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 8001586:	4b65      	ldr	r3, [pc, #404]	; (800171c <SysTick_Handler+0x1b0>)
 8001588:	7a1b      	ldrb	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <SysTick_Handler+0x2c>
 800158e:	4b64      	ldr	r3, [pc, #400]	; (8001720 <SysTick_Handler+0x1b4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a62      	ldr	r2, [pc, #392]	; (8001720 <SysTick_Handler+0x1b4>)
 8001596:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001598:	4b60      	ldr	r3, [pc, #384]	; (800171c <SysTick_Handler+0x1b0>)
 800159a:	7a1b      	ldrb	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <SysTick_Handler+0x4e>
 80015a0:	4b5e      	ldr	r3, [pc, #376]	; (800171c <SysTick_Handler+0x1b0>)
 80015a2:	88db      	ldrh	r3, [r3, #6]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b5e      	ldr	r3, [pc, #376]	; (8001720 <SysTick_Handler+0x1b4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	da05      	bge.n	80015ba <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80015ae:	4b5b      	ldr	r3, [pc, #364]	; (800171c <SysTick_Handler+0x1b0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80015b4:	4b5a      	ldr	r3, [pc, #360]	; (8001720 <SysTick_Handler+0x1b4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80015ba:	4b5a      	ldr	r3, [pc, #360]	; (8001724 <SysTick_Handler+0x1b8>)
 80015bc:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d116      	bne.n	80015f2 <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80015c4:	4b57      	ldr	r3, [pc, #348]	; (8001724 <SysTick_Handler+0x1b8>)
 80015c6:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a55      	ldr	r2, [pc, #340]	; (8001724 <SysTick_Handler+0x1b8>)
 80015ce:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80015d2:	4b54      	ldr	r3, [pc, #336]	; (8001724 <SysTick_Handler+0x1b8>)
 80015d4:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 80015d8:	4b52      	ldr	r3, [pc, #328]	; (8001724 <SysTick_Handler+0x1b8>)
 80015da:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 80015de:	429a      	cmp	r2, r3
 80015e0:	dd07      	ble.n	80015f2 <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 80015e2:	4b50      	ldr	r3, [pc, #320]	; (8001724 <SysTick_Handler+0x1b8>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 80015ea:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <SysTick_Handler+0x1b8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80015f2:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <SysTick_Handler+0x1bc>)
 80015f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015f8:	f240 2261 	movw	r2, #609	; 0x261
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d005      	beq.n	800160c <SysTick_Handler+0xa0>
 8001600:	4b49      	ldr	r3, [pc, #292]	; (8001728 <SysTick_Handler+0x1bc>)
 8001602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001606:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800160a:	d109      	bne.n	8001620 <SysTick_Handler+0xb4>
 800160c:	4b46      	ldr	r3, [pc, #280]	; (8001728 <SysTick_Handler+0x1bc>)
 800160e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001612:	2b00      	cmp	r3, #0
 8001614:	d104      	bne.n	8001620 <SysTick_Handler+0xb4>
 8001616:	4b45      	ldr	r3, [pc, #276]	; (800172c <SysTick_Handler+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4a43      	ldr	r2, [pc, #268]	; (800172c <SysTick_Handler+0x1c0>)
 800161e:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 20000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 8001620:	4b42      	ldr	r3, [pc, #264]	; (800172c <SysTick_Handler+0x1c0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001628:	4293      	cmp	r3, r2
 800162a:	dd0c      	ble.n	8001646 <SysTick_Handler+0xda>
 800162c:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <SysTick_Handler+0x1bc>)
 800162e:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d007      	beq.n	8001646 <SysTick_Handler+0xda>
 8001636:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <SysTick_Handler+0x1bc>)
 8001638:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <SysTick_Handler+0xda>
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <SysTick_Handler+0x1c4>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <SysTick_Handler+0x1c8>)
 8001648:	7b9b      	ldrb	r3, [r3, #14]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10e      	bne.n	800166c <SysTick_Handler+0x100>
	{
		ETH.ETH_WDG++;
 800164e:	4b39      	ldr	r3, [pc, #228]	; (8001734 <SysTick_Handler+0x1c8>)
 8001650:	899b      	ldrh	r3, [r3, #12]
 8001652:	3301      	adds	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <SysTick_Handler+0x1c8>)
 8001658:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <SysTick_Handler+0x1c8>)
 800165c:	899b      	ldrh	r3, [r3, #12]
 800165e:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001662:	d303      	bcc.n	800166c <SysTick_Handler+0x100>
		{
			ETH.ETH_WDG=64000;
 8001664:	4b33      	ldr	r3, [pc, #204]	; (8001734 <SysTick_Handler+0x1c8>)
 8001666:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800166a:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <SysTick_Handler+0x1a8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	f040 841f 	bne.w	8001eb4 <SysTick_Handler+0x948>
  {
	  dbgn++;
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <SysTick_Handler+0x1cc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a2e      	ldr	r2, [pc, #184]	; (8001738 <SysTick_Handler+0x1cc>)
 800167e:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <SysTick_Handler+0x1a8>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <SysTick_Handler+0x1d0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	4a2b      	ldr	r2, [pc, #172]	; (800173c <SysTick_Handler+0x1d0>)
 800168e:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <SysTick_Handler+0x1d4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001698:	d102      	bne.n	80016a0 <SysTick_Handler+0x134>
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <SysTick_Handler+0x1d4>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <SysTick_Handler+0x1d8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d104      	bne.n	80016b2 <SysTick_Handler+0x146>
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <SysTick_Handler+0x1d4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a24      	ldr	r2, [pc, #144]	; (8001740 <SysTick_Handler+0x1d4>)
 80016b0:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <SysTick_Handler+0x1d4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d102      	bne.n	80016c0 <SysTick_Handler+0x154>
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <SysTick_Handler+0x1d8>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <SysTick_Handler+0x1d8>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d104      	bne.n	80016d2 <SysTick_Handler+0x166>
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <SysTick_Handler+0x1d4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <SysTick_Handler+0x1d4>)
 80016d0:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <SysTick_Handler+0x1d4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <SysTick_Handler+0x174>
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <SysTick_Handler+0x1d8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e4:	4818      	ldr	r0, [pc, #96]	; (8001748 <SysTick_Handler+0x1dc>)
 80016e6:	f001 fef0 	bl	80034ca <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <SysTick_Handler+0x1e0>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 83d0 	beq.w	8001e94 <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <SysTick_Handler+0x1e4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 83cf 	beq.w	8001e9c <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 80016fe:	2100      	movs	r1, #0
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <SysTick_Handler+0x1c8>)
 8001702:	f00c ff85 	bl	800e610 <eth_rd_SOCKET_STAT>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <SysTick_Handler+0x1c8>)
 800170c:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <SysTick_Handler+0x1c8>)
 8001710:	7b9b      	ldrb	r3, [r3, #14]
 8001712:	e01f      	b.n	8001754 <SysTick_Handler+0x1e8>
 8001714:	20000348 	.word	0x20000348
 8001718:	20004030 	.word	0x20004030
 800171c:	200018ac 	.word	0x200018ac
 8001720:	20004038 	.word	0x20004038
 8001724:	20000350 	.word	0x20000350
 8001728:	20000b58 	.word	0x20000b58
 800172c:	20002950 	.word	0x20002950
 8001730:	2000294d 	.word	0x2000294d
 8001734:	20002954 	.word	0x20002954
 8001738:	2000405c 	.word	0x2000405c
 800173c:	2000034c 	.word	0x2000034c
 8001740:	20004034 	.word	0x20004034
 8001744:	20003a12 	.word	0x20003a12
 8001748:	40020800 	.word	0x40020800
 800174c:	20003a04 	.word	0x20003a04
 8001750:	20003a14 	.word	0x20003a14
 8001754:	2b5f      	cmp	r3, #95	; 0x5f
 8001756:	f200 83a6 	bhi.w	8001ea6 <SysTick_Handler+0x93a>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <SysTick_Handler+0x1f4>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080018e1 	.word	0x080018e1
 8001764:	08001ea7 	.word	0x08001ea7
 8001768:	08001ea7 	.word	0x08001ea7
 800176c:	08001ea7 	.word	0x08001ea7
 8001770:	08001ea7 	.word	0x08001ea7
 8001774:	08001ea7 	.word	0x08001ea7
 8001778:	08001ea7 	.word	0x08001ea7
 800177c:	08001ea7 	.word	0x08001ea7
 8001780:	08001ea7 	.word	0x08001ea7
 8001784:	08001ea7 	.word	0x08001ea7
 8001788:	08001ea7 	.word	0x08001ea7
 800178c:	08001ea7 	.word	0x08001ea7
 8001790:	08001ea7 	.word	0x08001ea7
 8001794:	08001ea7 	.word	0x08001ea7
 8001798:	08001ea7 	.word	0x08001ea7
 800179c:	08001ea7 	.word	0x08001ea7
 80017a0:	08001ea7 	.word	0x08001ea7
 80017a4:	08001ea7 	.word	0x08001ea7
 80017a8:	08001ea7 	.word	0x08001ea7
 80017ac:	08001919 	.word	0x08001919
 80017b0:	0800196b 	.word	0x0800196b
 80017b4:	08001983 	.word	0x08001983
 80017b8:	0800199b 	.word	0x0800199b
 80017bc:	080019b3 	.word	0x080019b3
 80017c0:	08001d0f 	.word	0x08001d0f
 80017c4:	08001ea7 	.word	0x08001ea7
 80017c8:	08001d27 	.word	0x08001d27
 80017cc:	08001d3f 	.word	0x08001d3f
 80017d0:	08001d7d 	.word	0x08001d7d
 80017d4:	08001dbb 	.word	0x08001dbb
 80017d8:	08001ea7 	.word	0x08001ea7
 80017dc:	08001ea7 	.word	0x08001ea7
 80017e0:	08001ea7 	.word	0x08001ea7
 80017e4:	08001ea7 	.word	0x08001ea7
 80017e8:	08001dd3 	.word	0x08001dd3
 80017ec:	08001ea7 	.word	0x08001ea7
 80017f0:	08001ea7 	.word	0x08001ea7
 80017f4:	08001ea7 	.word	0x08001ea7
 80017f8:	08001ea7 	.word	0x08001ea7
 80017fc:	08001ea7 	.word	0x08001ea7
 8001800:	08001ea7 	.word	0x08001ea7
 8001804:	08001ea7 	.word	0x08001ea7
 8001808:	08001ea7 	.word	0x08001ea7
 800180c:	08001ea7 	.word	0x08001ea7
 8001810:	08001ea7 	.word	0x08001ea7
 8001814:	08001ea7 	.word	0x08001ea7
 8001818:	08001ea7 	.word	0x08001ea7
 800181c:	08001ea7 	.word	0x08001ea7
 8001820:	08001ea7 	.word	0x08001ea7
 8001824:	08001ea7 	.word	0x08001ea7
 8001828:	08001e4d 	.word	0x08001e4d
 800182c:	08001ea7 	.word	0x08001ea7
 8001830:	08001ea7 	.word	0x08001ea7
 8001834:	08001ea7 	.word	0x08001ea7
 8001838:	08001ea7 	.word	0x08001ea7
 800183c:	08001ea7 	.word	0x08001ea7
 8001840:	08001ea7 	.word	0x08001ea7
 8001844:	08001ea7 	.word	0x08001ea7
 8001848:	08001ea7 	.word	0x08001ea7
 800184c:	08001ea7 	.word	0x08001ea7
 8001850:	08001ea7 	.word	0x08001ea7
 8001854:	08001ea7 	.word	0x08001ea7
 8001858:	08001ea7 	.word	0x08001ea7
 800185c:	08001ea7 	.word	0x08001ea7
 8001860:	08001ea7 	.word	0x08001ea7
 8001864:	08001ea7 	.word	0x08001ea7
 8001868:	08001e65 	.word	0x08001e65
 800186c:	08001ea7 	.word	0x08001ea7
 8001870:	08001ea7 	.word	0x08001ea7
 8001874:	08001ea7 	.word	0x08001ea7
 8001878:	08001ea7 	.word	0x08001ea7
 800187c:	08001ea7 	.word	0x08001ea7
 8001880:	08001ea7 	.word	0x08001ea7
 8001884:	08001ea7 	.word	0x08001ea7
 8001888:	08001ea7 	.word	0x08001ea7
 800188c:	08001ea7 	.word	0x08001ea7
 8001890:	08001ea7 	.word	0x08001ea7
 8001894:	08001ea7 	.word	0x08001ea7
 8001898:	08001ea7 	.word	0x08001ea7
 800189c:	08001ea7 	.word	0x08001ea7
 80018a0:	08001ea7 	.word	0x08001ea7
 80018a4:	08001ea7 	.word	0x08001ea7
 80018a8:	08001ea7 	.word	0x08001ea7
 80018ac:	08001ea7 	.word	0x08001ea7
 80018b0:	08001ea7 	.word	0x08001ea7
 80018b4:	08001ea7 	.word	0x08001ea7
 80018b8:	08001ea7 	.word	0x08001ea7
 80018bc:	08001ea7 	.word	0x08001ea7
 80018c0:	08001ea7 	.word	0x08001ea7
 80018c4:	08001ea7 	.word	0x08001ea7
 80018c8:	08001ea7 	.word	0x08001ea7
 80018cc:	08001ea7 	.word	0x08001ea7
 80018d0:	08001ea7 	.word	0x08001ea7
 80018d4:	08001ea7 	.word	0x08001ea7
 80018d8:	08001ea7 	.word	0x08001ea7
 80018dc:	08001e7d 	.word	0x08001e7d
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80018e0:	4b82      	ldr	r3, [pc, #520]	; (8001aec <SysTick_Handler+0x580>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <SysTick_Handler+0x384>
 80018e8:	2113      	movs	r1, #19
 80018ea:	4881      	ldr	r0, [pc, #516]	; (8001af0 <SysTick_Handler+0x584>)
 80018ec:	f7ff fe22 	bl	8001534 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 80018f0:	2201      	movs	r2, #1
 80018f2:	2100      	movs	r1, #0
 80018f4:	487f      	ldr	r0, [pc, #508]	; (8001af4 <SysTick_Handler+0x588>)
 80018f6:	f00c fd59 	bl	800e3ac <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 80018fa:	4b7e      	ldr	r3, [pc, #504]	; (8001af4 <SysTick_Handler+0x588>)
 80018fc:	899b      	ldrh	r3, [r3, #12]
 80018fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8001902:	4293      	cmp	r3, r2
 8001904:	f240 82cc 	bls.w	8001ea0 <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 8001908:	487a      	ldr	r0, [pc, #488]	; (8001af4 <SysTick_Handler+0x588>)
 800190a:	f00c fd8b 	bl	800e424 <eth_init>

						 eth_socket_init(&ETH,0);
 800190e:	2100      	movs	r1, #0
 8001910:	4878      	ldr	r0, [pc, #480]	; (8001af4 <SysTick_Handler+0x588>)
 8001912:	f00c fe01 	bl	800e518 <eth_socket_init>
					 }

				 }
			 break;
 8001916:	e2c3      	b.n	8001ea0 <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001918:	4b76      	ldr	r3, [pc, #472]	; (8001af4 <SysTick_Handler+0x588>)
 800191a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001922:	2b01      	cmp	r3, #1
 8001924:	d110      	bne.n	8001948 <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001926:	4b71      	ldr	r3, [pc, #452]	; (8001aec <SysTick_Handler+0x580>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <SysTick_Handler+0x3ca>
 800192e:	2111      	movs	r1, #17
 8001930:	4871      	ldr	r0, [pc, #452]	; (8001af8 <SysTick_Handler+0x58c>)
 8001932:	f7ff fdff 	bl	8001534 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001936:	2202      	movs	r2, #2
 8001938:	2100      	movs	r1, #0
 800193a:	486e      	ldr	r0, [pc, #440]	; (8001af4 <SysTick_Handler+0x588>)
 800193c:	f00c fd36 	bl	800e3ac <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001940:	4b6c      	ldr	r3, [pc, #432]	; (8001af4 <SysTick_Handler+0x588>)
 8001942:	2200      	movs	r2, #0
 8001944:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001946:	e2ae      	b.n	8001ea6 <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001948:	2204      	movs	r2, #4
 800194a:	2100      	movs	r1, #0
 800194c:	4869      	ldr	r0, [pc, #420]	; (8001af4 <SysTick_Handler+0x588>)
 800194e:	f00c fd2d 	bl	800e3ac <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <SysTick_Handler+0x580>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <SysTick_Handler+0x3f6>
 800195a:	2115      	movs	r1, #21
 800195c:	4867      	ldr	r0, [pc, #412]	; (8001afc <SysTick_Handler+0x590>)
 800195e:	f7ff fde9 	bl	8001534 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001962:	4b64      	ldr	r3, [pc, #400]	; (8001af4 <SysTick_Handler+0x588>)
 8001964:	2200      	movs	r2, #0
 8001966:	819a      	strh	r2, [r3, #12]
			 break;
 8001968:	e29d      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 800196a:	4b60      	ldr	r3, [pc, #384]	; (8001aec <SysTick_Handler+0x580>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <SysTick_Handler+0x40e>
 8001972:	2113      	movs	r1, #19
 8001974:	4862      	ldr	r0, [pc, #392]	; (8001b00 <SysTick_Handler+0x594>)
 8001976:	f7ff fddd 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800197a:	4b5e      	ldr	r3, [pc, #376]	; (8001af4 <SysTick_Handler+0x588>)
 800197c:	2200      	movs	r2, #0
 800197e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001980:	e291      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001982:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <SysTick_Handler+0x580>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <SysTick_Handler+0x426>
 800198a:	2114      	movs	r1, #20
 800198c:	485d      	ldr	r0, [pc, #372]	; (8001b04 <SysTick_Handler+0x598>)
 800198e:	f7ff fdd1 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001992:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <SysTick_Handler+0x588>)
 8001994:	2200      	movs	r2, #0
 8001996:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001998:	e285      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 800199a:	4b54      	ldr	r3, [pc, #336]	; (8001aec <SysTick_Handler+0x580>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <SysTick_Handler+0x43e>
 80019a2:	2114      	movs	r1, #20
 80019a4:	4858      	ldr	r0, [pc, #352]	; (8001b08 <SysTick_Handler+0x59c>)
 80019a6:	f7ff fdc5 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019aa:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <SysTick_Handler+0x588>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019b0:	e279      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 80019b2:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <SysTick_Handler+0x580>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <SysTick_Handler+0x456>
 80019ba:	2118      	movs	r1, #24
 80019bc:	4853      	ldr	r0, [pc, #332]	; (8001b0c <SysTick_Handler+0x5a0>)
 80019be:	f7ff fdb9 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019c2:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <SysTick_Handler+0x588>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <SysTick_Handler+0x588>)
 80019ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	f040 80b0 	bne.w	8001b38 <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80019d8:	2302      	movs	r3, #2
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <SysTick_Handler+0x5a4>)
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	230f      	movs	r3, #15
 80019e2:	2226      	movs	r2, #38	; 0x26
 80019e4:	2104      	movs	r1, #4
 80019e6:	4843      	ldr	r0, [pc, #268]	; (8001af4 <SysTick_Handler+0x588>)
 80019e8:	f00c fbb5 	bl	800e156 <SPI_ETH_REG>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <SysTick_Handler+0x5a8>)
 80019f2:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80019f4:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <SysTick_Handler+0x5a8>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8253 	beq.w	8001ea4 <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80019fe:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <SysTick_Handler+0x5a8>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	4a45      	ldr	r2, [pc, #276]	; (8001b18 <SysTick_Handler+0x5ac>)
 8001a04:	2100      	movs	r1, #0
 8001a06:	483b      	ldr	r0, [pc, #236]	; (8001af4 <SysTick_Handler+0x588>)
 8001a08:	f00c fe3c 	bl	800e684 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001a0c:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <SysTick_Handler+0x5ac>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001a16:	4837      	ldr	r0, [pc, #220]	; (8001af4 <SysTick_Handler+0x588>)
 8001a18:	f00c fc15 	bl	800e246 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4834      	ldr	r0, [pc, #208]	; (8001af4 <SysTick_Handler+0x588>)
 8001a22:	f00c fcc3 	bl	800e3ac <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001a26:	bf00      	nop
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4832      	ldr	r0, [pc, #200]	; (8001af4 <SysTick_Handler+0x588>)
 8001a2c:	f00c fe0d 	bl	800e64a <eth_rd_SOCKET_CMD>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f8      	bne.n	8001a28 <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a36:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <SysTick_Handler+0x5a8>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	4936      	ldr	r1, [pc, #216]	; (8001b1c <SysTick_Handler+0x5b0>)
 8001a44:	4836      	ldr	r0, [pc, #216]	; (8001b20 <SysTick_Handler+0x5b4>)
 8001a46:	f00d fb4d 	bl	800f0e4 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <SysTick_Handler+0x5a8>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <SysTick_Handler+0x5b8>)
 8001a52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <SysTick_Handler+0x5a8>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <SysTick_Handler+0x4f8>
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <SysTick_Handler+0x588>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <SysTick_Handler+0x5b8>)
 8001a66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482c      	ldr	r0, [pc, #176]	; (8001b20 <SysTick_Handler+0x5b4>)
 8001a6e:	f00b f85f 	bl	800cb30 <ModBUS_Check>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00d      	beq.n	8001a94 <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a78:	482a      	ldr	r0, [pc, #168]	; (8001b24 <SysTick_Handler+0x5b8>)
 8001a7a:	f00b f95b 	bl	800cd34 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <SysTick_Handler+0x5b8>)
 8001a80:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001a84:	2300      	movs	r3, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	4927      	ldr	r1, [pc, #156]	; (8001b28 <SysTick_Handler+0x5bc>)
 8001a8c:	4823      	ldr	r0, [pc, #140]	; (8001b1c <SysTick_Handler+0x5b0>)
 8001a8e:	f00d fb29 	bl	800f0e4 <CopiaVector>
 8001a92:	e007      	b.n	8001aa4 <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <SysTick_Handler+0x580>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <SysTick_Handler+0x538>
 8001a9c:	2111      	movs	r1, #17
 8001a9e:	4823      	ldr	r0, [pc, #140]	; (8001b2c <SysTick_Handler+0x5c0>)
 8001aa0:	f7ff fd48 	bl	8001534 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <SysTick_Handler+0x5b8>)
 8001aa6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <SysTick_Handler+0x5c4>)
 8001aae:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <SysTick_Handler+0x5c4>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <SysTick_Handler+0x5c8>)
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	480e      	ldr	r0, [pc, #56]	; (8001af4 <SysTick_Handler+0x588>)
 8001aba:	f00c feb3 	bl	800e824 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <SysTick_Handler+0x5c8>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f240 4124 	movw	r1, #1060	; 0x424
 8001ac8:	480a      	ldr	r0, [pc, #40]	; (8001af4 <SysTick_Handler+0x588>)
 8001aca:	f00c fbbc 	bl	800e246 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001ace:	2220      	movs	r2, #32
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4808      	ldr	r0, [pc, #32]	; (8001af4 <SysTick_Handler+0x588>)
 8001ad4:	f00c fc6a 	bl	800e3ac <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001ad8:	bf00      	nop
 8001ada:	2100      	movs	r1, #0
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <SysTick_Handler+0x588>)
 8001ade:	f00c fdb4 	bl	800e64a <eth_rd_SOCKET_CMD>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f8      	bne.n	8001ada <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001ae8:	e1dc      	b.n	8001ea4 <SysTick_Handler+0x938>
 8001aea:	bf00      	nop
 8001aec:	2000294c 	.word	0x2000294c
 8001af0:	080107f0 	.word	0x080107f0
 8001af4:	20002954 	.word	0x20002954
 8001af8:	08010804 	.word	0x08010804
 8001afc:	08010818 	.word	0x08010818
 8001b00:	08010830 	.word	0x08010830
 8001b04:	08010844 	.word	0x08010844
 8001b08:	0801085c 	.word	0x0801085c
 8001b0c:	08010874 	.word	0x08010874
 8001b10:	200039c4 	.word	0x200039c4
 8001b14:	200039bc 	.word	0x200039bc
 8001b18:	200039c0 	.word	0x200039c0
 8001b1c:	20002970 	.word	0x20002970
 8001b20:	200018be 	.word	0x200018be
 8001b24:	200018ac 	.word	0x200018ac
 8001b28:	20001ac4 	.word	0x20001ac4
 8001b2c:	08010890 	.word	0x08010890
 8001b30:	200039c2 	.word	0x200039c2
 8001b34:	200039be 	.word	0x200039be
						if (mb_eth._w_answer==0)
 8001b38:	4bac      	ldr	r3, [pc, #688]	; (8001dec <SysTick_Handler+0x880>)
 8001b3a:	7a1b      	ldrb	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d167      	bne.n	8001c10 <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001b40:	4bab      	ldr	r3, [pc, #684]	; (8001df0 <SysTick_Handler+0x884>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001b46:	4baa      	ldr	r3, [pc, #680]	; (8001df0 <SysTick_Handler+0x884>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001b4c:	4ba8      	ldr	r3, [pc, #672]	; (8001df0 <SysTick_Handler+0x884>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001b52:	4ba7      	ldr	r3, [pc, #668]	; (8001df0 <SysTick_Handler+0x884>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001b58:	4ba5      	ldr	r3, [pc, #660]	; (8001df0 <SysTick_Handler+0x884>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001b60:	4ba3      	ldr	r3, [pc, #652]	; (8001df0 <SysTick_Handler+0x884>)
 8001b62:	2206      	movs	r2, #6
 8001b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001b68:	4ba1      	ldr	r3, [pc, #644]	; (8001df0 <SysTick_Handler+0x884>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001b70:	4b9f      	ldr	r3, [pc, #636]	; (8001df0 <SysTick_Handler+0x884>)
 8001b72:	2203      	movs	r2, #3
 8001b74:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001b78:	4b9d      	ldr	r3, [pc, #628]	; (8001df0 <SysTick_Handler+0x884>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001b80:	4b9b      	ldr	r3, [pc, #620]	; (8001df0 <SysTick_Handler+0x884>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001b88:	4b99      	ldr	r3, [pc, #612]	; (8001df0 <SysTick_Handler+0x884>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001b90:	4b97      	ldr	r3, [pc, #604]	; (8001df0 <SysTick_Handler+0x884>)
 8001b92:	220a      	movs	r2, #10
 8001b94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001b98:	4b96      	ldr	r3, [pc, #600]	; (8001df4 <SysTick_Handler+0x888>)
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4892      	ldr	r0, [pc, #584]	; (8001dec <SysTick_Handler+0x880>)
 8001ba4:	f00b f86f 	bl	800cc86 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2300      	movs	r3, #0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	4991      	ldr	r1, [pc, #580]	; (8001df8 <SysTick_Handler+0x88c>)
 8001bb2:	4892      	ldr	r0, [pc, #584]	; (8001dfc <SysTick_Handler+0x890>)
 8001bb4:	f00d fa96 	bl	800f0e4 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001bb8:	4b8e      	ldr	r3, [pc, #568]	; (8001df4 <SysTick_Handler+0x888>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	4a90      	ldr	r2, [pc, #576]	; (8001e00 <SysTick_Handler+0x894>)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	488b      	ldr	r0, [pc, #556]	; (8001df0 <SysTick_Handler+0x884>)
 8001bc2:	f00c fe2f 	bl	800e824 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001bc6:	4b8e      	ldr	r3, [pc, #568]	; (8001e00 <SysTick_Handler+0x894>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f240 4124 	movw	r1, #1060	; 0x424
 8001bd0:	4887      	ldr	r0, [pc, #540]	; (8001df0 <SysTick_Handler+0x884>)
 8001bd2:	f00c fb38 	bl	800e246 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4885      	ldr	r0, [pc, #532]	; (8001df0 <SysTick_Handler+0x884>)
 8001bdc:	f00c fbe6 	bl	800e3ac <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001be0:	bf00      	nop
 8001be2:	2100      	movs	r1, #0
 8001be4:	4882      	ldr	r0, [pc, #520]	; (8001df0 <SysTick_Handler+0x884>)
 8001be6:	f00c fd30 	bl	800e64a <eth_rd_SOCKET_CMD>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f8      	bne.n	8001be2 <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001bf0:	4b7e      	ldr	r3, [pc, #504]	; (8001dec <SysTick_Handler+0x880>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001bf6:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <SysTick_Handler+0x898>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001bfc:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <SysTick_Handler+0x89c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 814f 	beq.w	8001ea4 <SysTick_Handler+0x938>
 8001c06:	2117      	movs	r1, #23
 8001c08:	4880      	ldr	r0, [pc, #512]	; (8001e0c <SysTick_Handler+0x8a0>)
 8001c0a:	f7ff fc93 	bl	8001534 <ITM0_Write>
			 break;
 8001c0e:	e149      	b.n	8001ea4 <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001c10:	2302      	movs	r3, #2
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <SysTick_Handler+0x8a4>)
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	230f      	movs	r3, #15
 8001c1a:	2226      	movs	r2, #38	; 0x26
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	4874      	ldr	r0, [pc, #464]	; (8001df0 <SysTick_Handler+0x884>)
 8001c20:	f00c fa99 	bl	800e156 <SPI_ETH_REG>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b7a      	ldr	r3, [pc, #488]	; (8001e14 <SysTick_Handler+0x8a8>)
 8001c2a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001c2c:	4b79      	ldr	r3, [pc, #484]	; (8001e14 <SysTick_Handler+0x8a8>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8137 	beq.w	8001ea4 <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001c36:	4b77      	ldr	r3, [pc, #476]	; (8001e14 <SysTick_Handler+0x8a8>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	4a77      	ldr	r2, [pc, #476]	; (8001e18 <SysTick_Handler+0x8ac>)
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	486c      	ldr	r0, [pc, #432]	; (8001df0 <SysTick_Handler+0x884>)
 8001c40:	f00c fd20 	bl	800e684 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001c44:	4b74      	ldr	r3, [pc, #464]	; (8001e18 <SysTick_Handler+0x8ac>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001c4e:	4868      	ldr	r0, [pc, #416]	; (8001df0 <SysTick_Handler+0x884>)
 8001c50:	f00c faf9 	bl	800e246 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	2100      	movs	r1, #0
 8001c58:	4865      	ldr	r0, [pc, #404]	; (8001df0 <SysTick_Handler+0x884>)
 8001c5a:	f00c fba7 	bl	800e3ac <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c5e:	bf00      	nop
 8001c60:	2100      	movs	r1, #0
 8001c62:	4863      	ldr	r0, [pc, #396]	; (8001df0 <SysTick_Handler+0x884>)
 8001c64:	f00c fcf1 	bl	800e64a <eth_rd_SOCKET_CMD>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f8      	bne.n	8001c60 <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <SysTick_Handler+0x8a8>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4960      	ldr	r1, [pc, #384]	; (8001dfc <SysTick_Handler+0x890>)
 8001c7c:	4867      	ldr	r0, [pc, #412]	; (8001e1c <SysTick_Handler+0x8b0>)
 8001c7e:	f00d fa31 	bl	800f0e4 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001c82:	4b64      	ldr	r3, [pc, #400]	; (8001e14 <SysTick_Handler+0x8a8>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b58      	ldr	r3, [pc, #352]	; (8001dec <SysTick_Handler+0x880>)
 8001c8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001c8e:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <SysTick_Handler+0x8a8>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <SysTick_Handler+0x730>
 8001c96:	4b56      	ldr	r3, [pc, #344]	; (8001df0 <SysTick_Handler+0x884>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <SysTick_Handler+0x880>)
 8001c9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	485d      	ldr	r0, [pc, #372]	; (8001e1c <SysTick_Handler+0x8b0>)
 8001ca6:	f00a ff43 	bl	800cb30 <ModBUS_Check>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d024      	beq.n	8001cfa <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <SysTick_Handler+0x880>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <SysTick_Handler+0x898>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001cbc:	484b      	ldr	r0, [pc, #300]	; (8001dec <SysTick_Handler+0x880>)
 8001cbe:	f00b f839 	bl	800cd34 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <SysTick_Handler+0x880>)
 8001cc4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	4953      	ldr	r1, [pc, #332]	; (8001e1c <SysTick_Handler+0x8b0>)
 8001cd0:	4853      	ldr	r0, [pc, #332]	; (8001e20 <SysTick_Handler+0x8b4>)
 8001cd2:	f00d fa07 	bl	800f0e4 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	4951      	ldr	r1, [pc, #324]	; (8001e24 <SysTick_Handler+0x8b8>)
 8001ce0:	4851      	ldr	r0, [pc, #324]	; (8001e28 <SysTick_Handler+0x8bc>)
 8001ce2:	f00d f9ff 	bl	800f0e4 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <SysTick_Handler+0x89c>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80da 	beq.w	8001ea4 <SysTick_Handler+0x938>
 8001cf0:	2117      	movs	r1, #23
 8001cf2:	484e      	ldr	r0, [pc, #312]	; (8001e2c <SysTick_Handler+0x8c0>)
 8001cf4:	f7ff fc1e 	bl	8001534 <ITM0_Write>
			 break;
 8001cf8:	e0d4      	b.n	8001ea4 <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <SysTick_Handler+0x89c>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80d0 	beq.w	8001ea4 <SysTick_Handler+0x938>
 8001d04:	2111      	movs	r1, #17
 8001d06:	484a      	ldr	r0, [pc, #296]	; (8001e30 <SysTick_Handler+0x8c4>)
 8001d08:	f7ff fc14 	bl	8001534 <ITM0_Write>
			 break;
 8001d0c:	e0ca      	b.n	8001ea4 <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <SysTick_Handler+0x89c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <SysTick_Handler+0x7b2>
 8001d16:	2115      	movs	r1, #21
 8001d18:	4846      	ldr	r0, [pc, #280]	; (8001e34 <SysTick_Handler+0x8c8>)
 8001d1a:	f7ff fc0b 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <SysTick_Handler+0x884>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d24:	e0bf      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001d26:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <SysTick_Handler+0x89c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <SysTick_Handler+0x7ca>
 8001d2e:	2114      	movs	r1, #20
 8001d30:	4841      	ldr	r0, [pc, #260]	; (8001e38 <SysTick_Handler+0x8cc>)
 8001d32:	f7ff fbff 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <SysTick_Handler+0x884>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d3c:	e0b3      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001d3e:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <SysTick_Handler+0x89c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <SysTick_Handler+0x7e2>
 8001d46:	2116      	movs	r1, #22
 8001d48:	483c      	ldr	r0, [pc, #240]	; (8001e3c <SysTick_Handler+0x8d0>)
 8001d4a:	f7ff fbf3 	bl	8001534 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001d4e:	2208      	movs	r2, #8
 8001d50:	2100      	movs	r1, #0
 8001d52:	4827      	ldr	r0, [pc, #156]	; (8001df0 <SysTick_Handler+0x884>)
 8001d54:	f00c fb2a 	bl	800e3ac <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001d58:	bf00      	nop
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <SysTick_Handler+0x8a4>)
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	230f      	movs	r3, #15
 8001d64:	2201      	movs	r2, #1
 8001d66:	2104      	movs	r1, #4
 8001d68:	4821      	ldr	r0, [pc, #132]	; (8001df0 <SysTick_Handler+0x884>)
 8001d6a:	f00c f9f4 	bl	800e156 <SPI_ETH_REG>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f2      	bne.n	8001d5a <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <SysTick_Handler+0x884>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d7a:	e094      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <SysTick_Handler+0x89c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <SysTick_Handler+0x820>
 8001d84:	2117      	movs	r1, #23
 8001d86:	482e      	ldr	r0, [pc, #184]	; (8001e40 <SysTick_Handler+0x8d4>)
 8001d88:	f7ff fbd4 	bl	8001534 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4817      	ldr	r0, [pc, #92]	; (8001df0 <SysTick_Handler+0x884>)
 8001d92:	f00c fb0b 	bl	800e3ac <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001d96:	bf00      	nop
 8001d98:	2301      	movs	r3, #1
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <SysTick_Handler+0x8a4>)
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	230f      	movs	r3, #15
 8001da2:	2201      	movs	r2, #1
 8001da4:	2104      	movs	r1, #4
 8001da6:	4812      	ldr	r0, [pc, #72]	; (8001df0 <SysTick_Handler+0x884>)
 8001da8:	f00c f9d5 	bl	800e156 <SPI_ETH_REG>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f2      	bne.n	8001d98 <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <SysTick_Handler+0x884>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001db8:	e075      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <SysTick_Handler+0x89c>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <SysTick_Handler+0x85e>
 8001dc2:	2115      	movs	r1, #21
 8001dc4:	481f      	ldr	r0, [pc, #124]	; (8001e44 <SysTick_Handler+0x8d8>)
 8001dc6:	f7ff fbb5 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <SysTick_Handler+0x884>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001dd0:	e069      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <SysTick_Handler+0x89c>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <SysTick_Handler+0x876>
 8001dda:	2110      	movs	r1, #16
 8001ddc:	481a      	ldr	r0, [pc, #104]	; (8001e48 <SysTick_Handler+0x8dc>)
 8001dde:	f7ff fba9 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <SysTick_Handler+0x884>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001de8:	e05d      	b.n	8001ea6 <SysTick_Handler+0x93a>
 8001dea:	bf00      	nop
 8001dec:	200018ac 	.word	0x200018ac
 8001df0:	20002954 	.word	0x20002954
 8001df4:	200039c2 	.word	0x200039c2
 8001df8:	20001ac4 	.word	0x20001ac4
 8001dfc:	20002970 	.word	0x20002970
 8001e00:	200039be 	.word	0x200039be
 8001e04:	20004038 	.word	0x20004038
 8001e08:	2000294c 	.word	0x2000294c
 8001e0c:	080108a0 	.word	0x080108a0
 8001e10:	200039c4 	.word	0x200039c4
 8001e14:	200039bc 	.word	0x200039bc
 8001e18:	200039c0 	.word	0x200039c0
 8001e1c:	200018be 	.word	0x200018be
 8001e20:	20003170 	.word	0x20003170
 8001e24:	20001cd0 	.word	0x20001cd0
 8001e28:	20002320 	.word	0x20002320
 8001e2c:	080108b4 	.word	0x080108b4
 8001e30:	08010890 	.word	0x08010890
 8001e34:	080108c8 	.word	0x080108c8
 8001e38:	080108e0 	.word	0x080108e0
 8001e3c:	080108f8 	.word	0x080108f8
 8001e40:	08010910 	.word	0x08010910
 8001e44:	08010928 	.word	0x08010928
 8001e48:	08010940 	.word	0x08010940
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001e4c:	4b62      	ldr	r3, [pc, #392]	; (8001fd8 <SysTick_Handler+0xa6c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <SysTick_Handler+0x8f0>
 8001e54:	2112      	movs	r1, #18
 8001e56:	4861      	ldr	r0, [pc, #388]	; (8001fdc <SysTick_Handler+0xa70>)
 8001e58:	f7ff fb6c 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e5c:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <SysTick_Handler+0xa74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e62:	e020      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001e64:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <SysTick_Handler+0xa6c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <SysTick_Handler+0x908>
 8001e6c:	2113      	movs	r1, #19
 8001e6e:	485d      	ldr	r0, [pc, #372]	; (8001fe4 <SysTick_Handler+0xa78>)
 8001e70:	f7ff fb60 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e74:	4b5a      	ldr	r3, [pc, #360]	; (8001fe0 <SysTick_Handler+0xa74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e7a:	e014      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001e7c:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <SysTick_Handler+0xa6c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <SysTick_Handler+0x920>
 8001e84:	2111      	movs	r1, #17
 8001e86:	4858      	ldr	r0, [pc, #352]	; (8001fe8 <SysTick_Handler+0xa7c>)
 8001e88:	f7ff fb54 	bl	8001534 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e8c:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <SysTick_Handler+0xa74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e92:	e008      	b.n	8001ea6 <SysTick_Handler+0x93a>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001e94:	4852      	ldr	r0, [pc, #328]	; (8001fe0 <SysTick_Handler+0xa74>)
 8001e96:	f00c f937 	bl	800e108 <SPI_ETH>
 8001e9a:	e004      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 default:
 8001e9c:	bf00      	nop
 8001e9e:	e002      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 break;
 8001ea0:	bf00      	nop
 8001ea2:	e000      	b.n	8001ea6 <SysTick_Handler+0x93a>
			 break;
 8001ea4:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001ea6:	4b51      	ldr	r3, [pc, #324]	; (8001fec <SysTick_Handler+0xa80>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d102      	bne.n	8001eb4 <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001eae:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <SysTick_Handler+0xa80>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <SysTick_Handler+0xa84>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d104      	bne.n	8001ec6 <SysTick_Handler+0x95a>
 8001ebc:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <SysTick_Handler+0xa88>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4a4c      	ldr	r2, [pc, #304]	; (8001ff4 <SysTick_Handler+0xa88>)
 8001ec4:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001ec6:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <SysTick_Handler+0xa88>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	dd0f      	ble.n	8001eee <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001ece:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <SysTick_Handler+0xa88>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <SysTick_Handler+0xa8c>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001eda:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <SysTick_Handler+0xa84>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <SysTick_Handler+0xa90>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a46      	ldr	r2, [pc, #280]	; (8002000 <SysTick_Handler+0xa94>)
 8001ee6:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001ee8:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <SysTick_Handler+0xa90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eee:	f000 fe51 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001ef2:	4b44      	ldr	r3, [pc, #272]	; (8002004 <SysTick_Handler+0xa98>)
 8001ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d105      	bne.n	8001f08 <SysTick_Handler+0x99c>
	{
		ticks++;
 8001efc:	4b42      	ldr	r3, [pc, #264]	; (8002008 <SysTick_Handler+0xa9c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	4a41      	ldr	r2, [pc, #260]	; (8002008 <SysTick_Handler+0xa9c>)
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e002      	b.n	8001f0e <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8001f08:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <SysTick_Handler+0xa9c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <SysTick_Handler+0xa98>)
 8001f10:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d158      	bne.n	8001fca <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8001f18:	4b3c      	ldr	r3, [pc, #240]	; (800200c <SysTick_Handler+0xaa0>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d017      	beq.n	8001f50 <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001f20:	4b38      	ldr	r3, [pc, #224]	; (8002004 <SysTick_Handler+0xa98>)
 8001f22:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d006      	beq.n	8001f38 <SysTick_Handler+0x9cc>
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <SysTick_Handler+0xa98>)
 8001f2c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a34      	ldr	r2, [pc, #208]	; (8002004 <SysTick_Handler+0xa98>)
 8001f34:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <SysTick_Handler+0xa98>)
 8001f3a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d106      	bne.n	8001f50 <SysTick_Handler+0x9e4>
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <SysTick_Handler+0xa98>)
 8001f44:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <SysTick_Handler+0xa98>)
 8001f4c:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <SysTick_Handler+0xa98>)
 8001f52:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d018      	beq.n	8001f8c <SysTick_Handler+0xa20>
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <SysTick_Handler+0xa98>)
 8001f5c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001f60:	f241 527c 	movw	r2, #5500	; 0x157c
 8001f64:	4293      	cmp	r3, r2
 8001f66:	dd11      	ble.n	8001f8c <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <SysTick_Handler+0xaa0>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <SysTick_Handler+0xaa4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f242 020c 	movw	r2, #8204	; 0x200c
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d107      	bne.n	8001f8c <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4925      	ldr	r1, [pc, #148]	; (8002014 <SysTick_Handler+0xaa8>)
 8001f80:	4823      	ldr	r0, [pc, #140]	; (8002010 <SysTick_Handler+0xaa4>)
 8001f82:	f003 fbb2 	bl	80056ea <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <SysTick_Handler+0xaac>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
			}
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <SysTick_Handler+0xa98>)
 8001f8e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d11d      	bne.n	8001fd2 <SysTick_Handler+0xa66>
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <SysTick_Handler+0xa98>)
 8001f98:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001f9c:	f245 0214 	movw	r2, #20500	; 0x5014
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	dd16      	ble.n	8001fd2 <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <SysTick_Handler+0xaa0>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <SysTick_Handler+0xaa4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f242 020c 	movw	r2, #8204	; 0x200c
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d10c      	bne.n	8001fd2 <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4916      	ldr	r1, [pc, #88]	; (8002014 <SysTick_Handler+0xaa8>)
 8001fbc:	4814      	ldr	r0, [pc, #80]	; (8002010 <SysTick_Handler+0xaa4>)
 8001fbe:	f003 fb94 	bl	80056ea <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <SysTick_Handler+0xaac>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc8:	e003      	b.n	8001fd2 <SysTick_Handler+0xa66>
		wf._ticks=0;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <SysTick_Handler+0xa98>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000294c 	.word	0x2000294c
 8001fdc:	08010954 	.word	0x08010954
 8001fe0:	20002954 	.word	0x20002954
 8001fe4:	08010968 	.word	0x08010968
 8001fe8:	0801097c 	.word	0x0801097c
 8001fec:	2000034c 	.word	0x2000034c
 8001ff0:	20003a0a 	.word	0x20003a0a
 8001ff4:	20004048 	.word	0x20004048
 8001ff8:	2000404c 	.word	0x2000404c
 8001ffc:	20004044 	.word	0x20004044
 8002000:	20004050 	.word	0x20004050
 8002004:	20000b58 	.word	0x20000b58
 8002008:	2000403c 	.word	0x2000403c
 800200c:	20003a0b 	.word	0x20003a0b
 8002010:	2000027c 	.word	0x2000027c
 8002014:	2000401c 	.word	0x2000401c
 8002018:	20003a08 	.word	0x20003a08

0800201c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <HAL_UART_ErrorCallback+0x98>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d11c      	bne.n	8002068 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]

			 wf._debug_count9++;
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_UART_ErrorCallback+0x9c>)
 8002038:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 800203c:	3301      	adds	r3, #1
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <HAL_UART_ErrorCallback+0x9c>)
 8002040:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	613b      	str	r3, [r7, #16]

		 HAL_UART_DeInit(ERRUART);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f003 fa42 	bl	80054de <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 800205a:	f7ff f965 	bl	8001328 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800205e:	2201      	movs	r2, #1
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_UART_ErrorCallback+0xa0>)
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f003 fb41 	bl	80056ea <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_UART_ErrorCallback+0xa4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d11c      	bne.n	80020ac <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]

			 wf._debug_count9++;
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_UART_ErrorCallback+0x9c>)
 800207c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002080:	3301      	adds	r3, #1
 8002082:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <HAL_UART_ErrorCallback+0x9c>)
 8002084:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	60bb      	str	r3, [r7, #8]

		 HAL_UART_DeInit(ERRUART);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f003 fa20 	bl	80054de <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 800209e:	f7ff f96d 	bl	800137c <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80020a2:	2201      	movs	r2, #1
 80020a4:	4905      	ldr	r1, [pc, #20]	; (80020bc <HAL_UART_ErrorCallback+0xa0>)
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f003 fb1f 	bl	80056ea <HAL_UART_Receive_IT>
	}
}
 80020ac:	bf00      	nop
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40011000 	.word	0x40011000
 80020b8:	20000b58 	.word	0x20000b58
 80020bc:	2000401c 	.word	0x2000401c
 80020c0:	40004400 	.word	0x40004400

080020c4 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <HAL_UART_RxCpltCallback+0xc0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d123      	bne.n	800211e <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_UART_RxCpltCallback+0xc4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2c      	ldr	r2, [pc, #176]	; (800218c <HAL_UART_RxCpltCallback+0xc8>)
 80020dc:	7811      	ldrb	r1, [r2, #0]
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_UART_RxCpltCallback+0xcc>)
 80020e0:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_UART_RxCpltCallback+0xc4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	4a27      	ldr	r2, [pc, #156]	; (8002188 <HAL_UART_RxCpltCallback+0xc4>)
 80020ea:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_UART_RxCpltCallback+0xc4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f4:	db03      	blt.n	80020fe <HAL_UART_RxCpltCallback+0x3a>
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_UART_RxCpltCallback+0xc4>)
 80020f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fc:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80020fe:	2100      	movs	r1, #0
 8002100:	4824      	ldr	r0, [pc, #144]	; (8002194 <HAL_UART_RxCpltCallback+0xd0>)
 8002102:	f002 f9f3 	bl	80044ec <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8002106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210a:	2201      	movs	r2, #1
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_UART_RxCpltCallback+0xd4>)
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8002114:	2201      	movs	r2, #1
 8002116:	491d      	ldr	r1, [pc, #116]	; (800218c <HAL_UART_RxCpltCallback+0xc8>)
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f003 fae6 	bl	80056ea <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1e      	ldr	r2, [pc, #120]	; (800219c <HAL_UART_RxCpltCallback+0xd8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d128      	bne.n	800217a <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_UART_RxCpltCallback+0xdc>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_UART_RxCpltCallback+0xe0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b2d1      	uxtb	r1, r2
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_UART_RxCpltCallback+0xe4>)
 8002134:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_UART_RxCpltCallback+0xe0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_UART_RxCpltCallback+0xe0>)
 800213e:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_UART_RxCpltCallback+0xe0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002148:	db03      	blt.n	8002152 <HAL_UART_RxCpltCallback+0x8e>
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_UART_RxCpltCallback+0xe0>)
 800214c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002150:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8002152:	2201      	movs	r2, #1
 8002154:	2102      	movs	r1, #2
 8002156:	4815      	ldr	r0, [pc, #84]	; (80021ac <HAL_UART_RxCpltCallback+0xe8>)
 8002158:	f001 f99e 	bl	8003498 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 800215c:	2100      	movs	r1, #0
 800215e:	4814      	ldr	r0, [pc, #80]	; (80021b0 <HAL_UART_RxCpltCallback+0xec>)
 8002160:	f002 f9c4 	bl	80044ec <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_UART_RxCpltCallback+0xf0>)
 8002166:	2201      	movs	r2, #1
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_UART_RxCpltCallback+0xf4>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8002170:	2201      	movs	r2, #1
 8002172:	490b      	ldr	r1, [pc, #44]	; (80021a0 <HAL_UART_RxCpltCallback+0xdc>)
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f003 fab8 	bl	80056ea <HAL_UART_Receive_IT>
		 }
 }
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40011000 	.word	0x40011000
 8002188:	20004054 	.word	0x20004054
 800218c:	2000401c 	.word	0x2000401c
 8002190:	20003a18 	.word	0x20003a18
 8002194:	200001ec 	.word	0x200001ec
 8002198:	20003a08 	.word	0x20003a08
 800219c:	40004400 	.word	0x40004400
 80021a0:	20004020 	.word	0x20004020
 80021a4:	20004058 	.word	0x20004058
 80021a8:	20003c18 	.word	0x20003c18
 80021ac:	40020000 	.word	0x40020000
 80021b0:	20000234 	.word	0x20000234
 80021b4:	40000400 	.word	0x40000400
 80021b8:	20003a09 	.word	0x20003a09

080021bc <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021cc:	d12d      	bne.n	800222a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80021ce:	2100      	movs	r1, #0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f002 fa89 	bl	80046e8 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80021d6:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 80021dc:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80021e8:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 80021ea:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2301      	movs	r3, #1
 8002202:	4932      	ldr	r1, [pc, #200]	; (80022cc <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002204:	4833      	ldr	r0, [pc, #204]	; (80022d4 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002206:	f00c ff6d 	bl	800f0e4 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 800220a:	2201      	movs	r2, #1
 800220c:	4932      	ldr	r1, [pc, #200]	; (80022d8 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 800220e:	4833      	ldr	r0, [pc, #204]	; (80022dc <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8002210:	f003 fa6b 	bl	80056ea <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8002216:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	482b      	ldr	r0, [pc, #172]	; (80022d4 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002226:	f7ff f985 	bl	8001534 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d13f      	bne.n	80022b4 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002234:	2100      	movs	r1, #0
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f002 fa56 	bl	80046e8 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2102      	movs	r1, #2
 8002240:	4829      	ldr	r0, [pc, #164]	; (80022e8 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8002242:	f001 f929 	bl	8003498 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 8002246:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 800224c:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 8002252:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a28      	ldr	r2, [pc, #160]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002258:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	4922      	ldr	r1, [pc, #136]	; (80022fc <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002274:	4822      	ldr	r0, [pc, #136]	; (8002300 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8002276:	f00c ff35 	bl	800f0e4 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8002280:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002284:	2201      	movs	r2, #1
 8002286:	4920      	ldr	r1, [pc, #128]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8002288:	4820      	ldr	r0, [pc, #128]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 800228a:	f003 fa2e 	bl	80056ea <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8002290:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10d      	bne.n	80022b4 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8002298:	2117      	movs	r1, #23
 800229a:	481d      	ldr	r0, [pc, #116]	; (8002310 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 800229c:	f7ff f94a 	bl	8001534 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	4815      	ldr	r0, [pc, #84]	; (80022fc <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80022a8:	f7ff f944 	bl	8001534 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 80022ac:	2102      	movs	r1, #2
 80022ae:	4819      	ldr	r0, [pc, #100]	; (8002314 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80022b0:	f7ff f940 	bl	8001534 <ITM0_Write>
				 }
		}
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20003a0c 	.word	0x20003a0c
 80022c0:	20003a08 	.word	0x20003a08
 80022c4:	20004054 	.word	0x20004054
 80022c8:	20004028 	.word	0x20004028
 80022cc:	20003a18 	.word	0x20003a18
 80022d0:	20004018 	.word	0x20004018
 80022d4:	20003e18 	.word	0x20003e18
 80022d8:	2000401c 	.word	0x2000401c
 80022dc:	2000027c 	.word	0x2000027c
 80022e0:	20000b58 	.word	0x20000b58
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40020000 	.word	0x40020000
 80022ec:	20003a0d 	.word	0x20003a0d
 80022f0:	20003a09 	.word	0x20003a09
 80022f4:	20004058 	.word	0x20004058
 80022f8:	2000402c 	.word	0x2000402c
 80022fc:	20003c18 	.word	0x20003c18
 8002300:	200003a6 	.word	0x200003a6
 8002304:	20000350 	.word	0x20000350
 8002308:	20004020 	.word	0x20004020
 800230c:	200002c0 	.word	0x200002c0
 8002310:	08010990 	.word	0x08010990
 8002314:	080109a8 	.word	0x080109a8

08002318 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <ESP8266_HW_Reset+0x40>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002328:	480c      	ldr	r0, [pc, #48]	; (800235c <ESP8266_HW_Reset+0x44>)
 800232a:	f001 f8b5 	bl	8003498 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 800232e:	2115      	movs	r1, #21
 8002330:	480b      	ldr	r0, [pc, #44]	; (8002360 <ESP8266_HW_Reset+0x48>)
 8002332:	f7ff f8ff 	bl	8001534 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 8002336:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800233a:	f000 fc4b 	bl	8002bd4 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 800233e:	210f      	movs	r1, #15
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <ESP8266_HW_Reset+0x4c>)
 8002342:	f7ff f8f7 	bl	8001534 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 8002346:	2201      	movs	r2, #1
 8002348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <ESP8266_HW_Reset+0x44>)
 800234e:	f001 f8a3 	bl	8003498 <HAL_GPIO_WritePin>
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20003a05 	.word	0x20003a05
 800235c:	40020000 	.word	0x40020000
 8002360:	080107bc 	.word	0x080107bc
 8002364:	080109ac 	.word	0x080109ac

08002368 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af06      	add	r7, sp, #24
 800236e:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002370:	2364      	movs	r3, #100	; 0x64
 8002372:	220c      	movs	r2, #12
 8002374:	4945      	ldr	r1, [pc, #276]	; (800248c <ESP8266_HW_Init+0x124>)
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f003 f8e0 	bl	800553c <HAL_UART_Transmit>
		  HAL_Delay(500);
 800237c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002380:	f000 fc28 	bl	8002bd4 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 8002384:	4b42      	ldr	r3, [pc, #264]	; (8002490 <ESP8266_HW_Init+0x128>)
 8002386:	2205      	movs	r2, #5
 8002388:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 800238c:	4b41      	ldr	r3, [pc, #260]	; (8002494 <ESP8266_HW_Init+0x12c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3f      	ldr	r2, [pc, #252]	; (8002490 <ESP8266_HW_Init+0x128>)
 8002392:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8002396:	e00e      	b.n	80023b6 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8002398:	4b3e      	ldr	r3, [pc, #248]	; (8002494 <ESP8266_HW_Init+0x12c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3c      	ldr	r2, [pc, #240]	; (8002490 <ESP8266_HW_Init+0x128>)
 800239e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <ESP8266_HW_Init+0x130>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f241 3287 	movw	r2, #4999	; 0x1387
 80023aa:	4293      	cmp	r3, r2
 80023ac:	dd03      	ble.n	80023b6 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <ESP8266_HW_Init+0x134>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
			  		 break;
 80023b4:	e014      	b.n	80023e0 <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <ESP8266_HW_Init+0x138>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	9205      	str	r2, [sp, #20]
 80023bc:	9304      	str	r3, [sp, #16]
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <ESP8266_HW_Init+0x13c>)
 80023c0:	9303      	str	r3, [sp, #12]
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <ESP8266_HW_Init+0x140>)
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <ESP8266_HW_Init+0x144>)
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <ESP8266_HW_Init+0x148>)
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <ESP8266_HW_Init+0x14c>)
 80023d0:	4a39      	ldr	r2, [pc, #228]	; (80024b8 <ESP8266_HW_Init+0x150>)
 80023d2:	493a      	ldr	r1, [pc, #232]	; (80024bc <ESP8266_HW_Init+0x154>)
 80023d4:	483a      	ldr	r0, [pc, #232]	; (80024c0 <ESP8266_HW_Init+0x158>)
 80023d6:	f00c fb09 	bl	800e9ec <FT_String_ND>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d1db      	bne.n	8002398 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 80023e0:	4b2e      	ldr	r3, [pc, #184]	; (800249c <ESP8266_HW_Init+0x134>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d12b      	bne.n	8002440 <ESP8266_HW_Init+0xd8>
		  {
			  wf._n_fcomp=strlen("ready");
 80023e8:	4b29      	ldr	r3, [pc, #164]	; (8002490 <ESP8266_HW_Init+0x128>)
 80023ea:	2205      	movs	r2, #5
 80023ec:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <ESP8266_HW_Init+0x12c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a26      	ldr	r2, [pc, #152]	; (8002490 <ESP8266_HW_Init+0x128>)
 80023f6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80023fa:	e00a      	b.n	8002412 <ESP8266_HW_Init+0xaa>
			  {
				  wf._n_orig=UART_RX_items;
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <ESP8266_HW_Init+0x12c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a23      	ldr	r2, [pc, #140]	; (8002490 <ESP8266_HW_Init+0x128>)
 8002402:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <ESP8266_HW_Init+0x130>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f241 3287 	movw	r2, #4999	; 0x1387
 800240e:	4293      	cmp	r3, r2
 8002410:	dc15      	bgt.n	800243e <ESP8266_HW_Init+0xd6>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <ESP8266_HW_Init+0x138>)
 8002414:	2200      	movs	r2, #0
 8002416:	9205      	str	r2, [sp, #20]
 8002418:	9304      	str	r3, [sp, #16]
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <ESP8266_HW_Init+0x13c>)
 800241c:	9303      	str	r3, [sp, #12]
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <ESP8266_HW_Init+0x140>)
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <ESP8266_HW_Init+0x144>)
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <ESP8266_HW_Init+0x148>)
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <ESP8266_HW_Init+0x14c>)
 800242c:	4a22      	ldr	r2, [pc, #136]	; (80024b8 <ESP8266_HW_Init+0x150>)
 800242e:	4923      	ldr	r1, [pc, #140]	; (80024bc <ESP8266_HW_Init+0x154>)
 8002430:	4823      	ldr	r0, [pc, #140]	; (80024c0 <ESP8266_HW_Init+0x158>)
 8002432:	f00c fadb 	bl	800e9ec <FT_String_ND>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d1df      	bne.n	80023fc <ESP8266_HW_Init+0x94>
 800243c:	e000      	b.n	8002440 <ESP8266_HW_Init+0xd8>
					 {
					 break;
 800243e:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <ESP8266_HW_Init+0x130>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f241 3287 	movw	r2, #4999	; 0x1387
 8002448:	4293      	cmp	r3, r2
 800244a:	dc06      	bgt.n	800245a <ESP8266_HW_Init+0xf2>
		  {
			  ESP_REinit=10;
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <ESP8266_HW_Init+0x15c>)
 800244e:	220a      	movs	r2, #10
 8002450:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <ESP8266_HW_Init+0x130>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e008      	b.n	800246c <ESP8266_HW_Init+0x104>
		  }
		  else
		  {
			  ESP_REinit++;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <ESP8266_HW_Init+0x15c>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <ESP8266_HW_Init+0x15c>)
 8002464:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <ESP8266_HW_Init+0x130>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <ESP8266_HW_Init+0x15c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b05      	cmp	r3, #5
 8002472:	f67f af7d 	bls.w	8002370 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <ESP8266_HW_Init+0x15c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b0a      	cmp	r3, #10
 800247c:	d101      	bne.n	8002482 <ESP8266_HW_Init+0x11a>
	  {
		  return(1);
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <ESP8266_HW_Init+0x11c>
	  }
	  else
	  {
		  return(0);
 8002482:	2300      	movs	r3, #0
	  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	080109bc 	.word	0x080109bc
 8002490:	20000b58 	.word	0x20000b58
 8002494:	20004028 	.word	0x20004028
 8002498:	20004030 	.word	0x20004030
 800249c:	20003a06 	.word	0x20003a06
 80024a0:	200018a0 	.word	0x200018a0
 80024a4:	200015ec 	.word	0x200015ec
 80024a8:	20004040 	.word	0x20004040
 80024ac:	20001838 	.word	0x20001838
 80024b0:	200013ec 	.word	0x200013ec
 80024b4:	20001844 	.word	0x20001844
 80024b8:	080109cc 	.word	0x080109cc
 80024bc:	20001830 	.word	0x20001830
 80024c0:	20003e18 	.word	0x20003e18
 80024c4:	20003a05 	.word	0x20003a05

080024c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <Error_Handler+0x8>
	...

080024d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_MspInit+0x4c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <HAL_MspInit+0x4c>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_MspInit+0x4c>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_MspInit+0x4c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <HAL_MspInit+0x4c>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_MspInit+0x4c>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <HAL_SPI_MspInit+0x84>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d12b      	bne.n	800259e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_SPI_MspInit+0x88>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <HAL_SPI_MspInit+0x88>)
 8002550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_SPI_MspInit+0x88>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_SPI_MspInit+0x88>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_SPI_MspInit+0x88>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_SPI_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800257e:	23e0      	movs	r3, #224	; 0xe0
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258e:	2305      	movs	r3, #5
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <HAL_SPI_MspInit+0x8c>)
 800259a:	f000 fd15 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	; 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40013000 	.word	0x40013000
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020000 	.word	0x40020000

080025b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d116      	bne.n	80025f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_TIM_Base_MspInit+0x80>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_TIM_Base_MspInit+0x80>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_TIM_Base_MspInit+0x80>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	201c      	movs	r0, #28
 80025e8:	f000 fc17 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025ec:	201c      	movs	r0, #28
 80025ee:	f000 fc30 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025f2:	e01a      	b.n	800262a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_TIM_Base_MspInit+0x84>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d115      	bne.n	800262a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_TIM_Base_MspInit+0x80>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_TIM_Base_MspInit+0x80>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_TIM_Base_MspInit+0x80>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	201d      	movs	r0, #29
 8002620:	f000 fbfb 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002624:	201d      	movs	r0, #29
 8002626:	f000 fc14 	bl	8002e52 <HAL_NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800
 8002638:	40000400 	.word	0x40000400

0800263c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08e      	sub	sp, #56	; 0x38
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a54      	ldr	r2, [pc, #336]	; (80027ac <HAL_UART_MspInit+0x170>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d135      	bne.n	80026ca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_UART_MspInit+0x174>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_UART_MspInit+0x174>)
 8002668:	f043 0310 	orr.w	r3, r3, #16
 800266c:	6453      	str	r3, [r2, #68]	; 0x44
 800266e:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_UART_MspInit+0x174>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <HAL_UART_MspInit+0x174>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_UART_MspInit+0x174>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <HAL_UART_MspInit+0x174>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002696:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026a8:	2307      	movs	r3, #7
 80026aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b0:	4619      	mov	r1, r3
 80026b2:	4840      	ldr	r0, [pc, #256]	; (80027b4 <HAL_UART_MspInit+0x178>)
 80026b4:	f000 fc88 	bl	8002fc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	2025      	movs	r0, #37	; 0x25
 80026be:	f000 fbac 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026c2:	2025      	movs	r0, #37	; 0x25
 80026c4:	f000 fbc5 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80026c8:	e06b      	b.n	80027a2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <HAL_UART_MspInit+0x17c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d134      	bne.n	800273e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <HAL_UART_MspInit+0x174>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	4a34      	ldr	r2, [pc, #208]	; (80027b0 <HAL_UART_MspInit+0x174>)
 80026de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e2:	6413      	str	r3, [r2, #64]	; 0x40
 80026e4:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <HAL_UART_MspInit+0x174>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_UART_MspInit+0x174>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	4a2d      	ldr	r2, [pc, #180]	; (80027b0 <HAL_UART_MspInit+0x174>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_UART_MspInit+0x174>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800270c:	230c      	movs	r3, #12
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800271c:	2307      	movs	r3, #7
 800271e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002724:	4619      	mov	r1, r3
 8002726:	4823      	ldr	r0, [pc, #140]	; (80027b4 <HAL_UART_MspInit+0x178>)
 8002728:	f000 fc4e 	bl	8002fc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	2026      	movs	r0, #38	; 0x26
 8002732:	f000 fb72 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002736:	2026      	movs	r0, #38	; 0x26
 8002738:	f000 fb8b 	bl	8002e52 <HAL_NVIC_EnableIRQ>
}
 800273c:	e031      	b.n	80027a2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_UART_MspInit+0x180>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d12c      	bne.n	80027a2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_UART_MspInit+0x174>)
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_UART_MspInit+0x174>)
 8002752:	f043 0320 	orr.w	r3, r3, #32
 8002756:	6453      	str	r3, [r2, #68]	; 0x44
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_UART_MspInit+0x174>)
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_UART_MspInit+0x174>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_UART_MspInit+0x174>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6313      	str	r3, [r2, #48]	; 0x30
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_UART_MspInit+0x174>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002780:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002792:	2308      	movs	r3, #8
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <HAL_UART_MspInit+0x178>)
 800279e:	f000 fc13 	bl	8002fc8 <HAL_GPIO_Init>
}
 80027a2:	bf00      	nop
 80027a4:	3738      	adds	r7, #56	; 0x38
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40011000 	.word	0x40011000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40004400 	.word	0x40004400
 80027bc:	40011400 	.word	0x40011400

080027c0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_UART_MspDeInit+0x80>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10e      	bne.n	80027f0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_UART_MspDeInit+0x84>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_UART_MspDeInit+0x84>)
 80027d8:	f023 0310 	bic.w	r3, r3, #16
 80027dc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80027de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80027e2:	4819      	ldr	r0, [pc, #100]	; (8002848 <HAL_UART_MspDeInit+0x88>)
 80027e4:	f000 fd74 	bl	80032d0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80027e8:	2025      	movs	r0, #37	; 0x25
 80027ea:	f000 fb40 	bl	8002e6e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80027ee:	e022      	b.n	8002836 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a15      	ldr	r2, [pc, #84]	; (800284c <HAL_UART_MspDeInit+0x8c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10d      	bne.n	8002816 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_UART_MspDeInit+0x84>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a11      	ldr	r2, [pc, #68]	; (8002844 <HAL_UART_MspDeInit+0x84>)
 8002800:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002806:	210c      	movs	r1, #12
 8002808:	480f      	ldr	r0, [pc, #60]	; (8002848 <HAL_UART_MspDeInit+0x88>)
 800280a:	f000 fd61 	bl	80032d0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800280e:	2026      	movs	r0, #38	; 0x26
 8002810:	f000 fb2d 	bl	8002e6e <HAL_NVIC_DisableIRQ>
}
 8002814:	e00f      	b.n	8002836 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <HAL_UART_MspDeInit+0x90>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10a      	bne.n	8002836 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_UART_MspDeInit+0x84>)
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_UART_MspDeInit+0x84>)
 8002826:	f023 0320 	bic.w	r3, r3, #32
 800282a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800282c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <HAL_UART_MspDeInit+0x88>)
 8002832:	f000 fd4d 	bl	80032d0 <HAL_GPIO_DeInit>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40011000 	.word	0x40011000
 8002844:	40023800 	.word	0x40023800
 8002848:	40020000 	.word	0x40020000
 800284c:	40004400 	.word	0x40004400
 8002850:	40011400 	.word	0x40011400

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <NMI_Handler+0x4>

0800285a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <HardFault_Handler+0x4>

08002860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <MemManage_Handler+0x4>

08002866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286a:	e7fe      	b.n	800286a <BusFault_Handler+0x4>

0800286c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <UsageFault_Handler+0x4>

08002872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <TIM2_IRQHandler+0x10>)
 80028a2:	f002 f82d 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200001ec 	.word	0x200001ec

080028b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <TIM3_IRQHandler+0x10>)
 80028b6:	f002 f823 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000234 	.word	0x20000234

080028c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <USART1_IRQHandler+0x10>)
 80028ca:	f002 ff3f 	bl	800574c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000027c 	.word	0x2000027c

080028d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <USART2_IRQHandler+0x10>)
 80028de:	f002 ff35 	bl	800574c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200002c0 	.word	0x200002c0

080028ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
	return 1;
 80028f0:	2301      	movs	r3, #1
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <_kill>:

int _kill(int pid, int sig)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002906:	f00c fef5 	bl	800f6f4 <__errno>
 800290a:	4603      	mov	r3, r0
 800290c:	2216      	movs	r2, #22
 800290e:	601a      	str	r2, [r3, #0]
	return -1;
 8002910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <_exit>:

void _exit (int status)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ffe7 	bl	80028fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800292e:	e7fe      	b.n	800292e <_exit+0x12>

08002930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e00a      	b.n	8002958 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002942:	f3af 8000 	nop.w
 8002946:	4601      	mov	r1, r0
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	60ba      	str	r2, [r7, #8]
 800294e:	b2ca      	uxtb	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	dbf0      	blt.n	8002942 <_read+0x12>
	}

return len;
 8002960:	687b      	ldr	r3, [r7, #4]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e009      	b.n	8002990 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60ba      	str	r2, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbf1      	blt.n	800297c <_write+0x12>
	}
	return len;
 8002998:	687b      	ldr	r3, [r7, #4]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_close>:

int _close(int file)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
	return -1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ca:	605a      	str	r2, [r3, #4]
	return 0;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_isatty>:

int _isatty(int file)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
	return 1;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
	return 0;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <_sbrk+0x5c>)
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <_sbrk+0x60>)
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <_sbrk+0x64>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d102      	bne.n	8002a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <_sbrk+0x64>)
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <_sbrk+0x68>)
 8002a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d207      	bcs.n	8002a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a3c:	f00c fe5a 	bl	800f6f4 <__errno>
 8002a40:	4603      	mov	r3, r0
 8002a42:	220c      	movs	r2, #12
 8002a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	e009      	b.n	8002a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <_sbrk+0x64>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <_sbrk+0x64>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <_sbrk+0x64>)
 8002a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20020000 	.word	0x20020000
 8002a6c:	00000400 	.word	0x00000400
 8002a70:	20004060 	.word	0x20004060
 8002a74:	200041b8 	.word	0x200041b8

08002a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <SystemInit+0x20>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <SystemInit+0x20>)
 8002a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa0:	480d      	ldr	r0, [pc, #52]	; (8002ad8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aa2:	490e      	ldr	r1, [pc, #56]	; (8002adc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ab8:	4c0b      	ldr	r4, [pc, #44]	; (8002ae8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ac6:	f7ff ffd7 	bl	8002a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aca:	f00c fe19 	bl	800f700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ace:	f7fd fde1 	bl	8000694 <main>
  bx  lr    
 8002ad2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002adc:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002ae0:	08011248 	.word	0x08011248
  ldr r2, =_sbss
 8002ae4:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002ae8:	200041b4 	.word	0x200041b4

08002aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aec:	e7fe      	b.n	8002aec <ADC_IRQHandler>
	...

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_Init+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <HAL_Init+0x40>)
 8002afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_Init+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_Init+0x40>)
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_Init+0x40>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f000 f973 	bl	8002e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1e:	200f      	movs	r0, #15
 8002b20:	f000 f808 	bl	8002b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b24:	f7ff fcd6 	bl	80024d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_InitTick+0x54>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f999 	bl	8002e8a <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00e      	b.n	8002b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d80a      	bhi.n	8002b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f000 f953 	bl	8002e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <HAL_InitTick+0x5c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000084 	.word	0x20000084
 8002b8c:	2000008c 	.word	0x2000008c
 8002b90:	20000088 	.word	0x20000088

08002b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	2000008c 	.word	0x2000008c
 8002bb8:	20004064 	.word	0x20004064

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20004064 	.word	0x20004064

08002bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff ffee 	bl	8002bbc <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bfa:	bf00      	nop
 8002bfc:	f7ff ffde 	bl	8002bbc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000008c 	.word	0x2000008c

08002c1c <__NVIC_SetPriorityGrouping>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_GetPriorityGrouping>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4907      	ldr	r1, [pc, #28]	; (8002cb8 <__NVIC_EnableIRQ+0x38>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <__NVIC_DisableIRQ>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db12      	blt.n	8002cf4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	490a      	ldr	r1, [pc, #40]	; (8002d00 <__NVIC_DisableIRQ+0x44>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2001      	movs	r0, #1
 8002cde:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce2:	3320      	adds	r3, #32
 8002ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ce8:	f3bf 8f4f 	dsb	sy
}
 8002cec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cee:	f3bf 8f6f 	isb	sy
}
 8002cf2:	bf00      	nop
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_SetPriority>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db0a      	blt.n	8002d2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d2c:	e00a      	b.n	8002d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <__NVIC_SetPriority+0x50>)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	761a      	strb	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <NVIC_EncodePriority>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f1c3 0307 	rsb	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	bf28      	it	cs
 8002d76:	2304      	movcs	r3, #4
 8002d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <NVIC_EncodePriority+0x30>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3b03      	subs	r3, #3
 8002d86:	e000      	b.n	8002d8a <NVIC_EncodePriority+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	4313      	orrs	r3, r2
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <SysTick_Config>:
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd0:	d301      	bcc.n	8002dd6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00f      	b.n	8002df6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <SysTick_Config+0x40>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dde:	210f      	movs	r1, #15
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f7ff ff8e 	bl	8002d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <SysTick_Config+0x40>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <SysTick_Config+0x40>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	e000e010 	.word	0xe000e010

08002e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff05 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2c:	f7ff ff1a 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7ff ff8e 	bl	8002d58 <NVIC_EncodePriority>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff5d 	bl	8002d04 <__NVIC_SetPriority>
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff0d 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff1d 	bl	8002cbc <__NVIC_DisableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff94 	bl	8002dc0 <SysTick_Config>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7ff fe84 	bl	8002bbc <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d008      	beq.n	8002ed4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e052      	b.n	8002f7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0216 	bic.w	r2, r2, #22
 8002ee2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d103      	bne.n	8002f04 <HAL_DMA_Abort+0x62>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0208 	bic.w	r2, r2, #8
 8002f12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f24:	e013      	b.n	8002f4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f26:	f7ff fe49 	bl	8002bbc <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d90c      	bls.n	8002f4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e015      	b.n	8002f7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e4      	bne.n	8002f26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	223f      	movs	r2, #63	; 0x3f
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d004      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e00c      	b.n	8002fba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2205      	movs	r2, #5
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e159      	b.n	8003298 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	f040 8148 	bne.w	8003292 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d005      	beq.n	800301a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003016:	2b02      	cmp	r3, #2
 8003018:	d130      	bne.n	800307c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003050:	2201      	movs	r2, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 0201 	and.w	r2, r3, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b03      	cmp	r3, #3
 8003086:	d017      	beq.n	80030b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d123      	bne.n	800310c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	08da      	lsrs	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3208      	adds	r2, #8
 8003106:	69b9      	ldr	r1, [r7, #24]
 8003108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0203 	and.w	r2, r3, #3
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a2 	beq.w	8003292 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b57      	ldr	r3, [pc, #348]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a56      	ldr	r2, [pc, #344]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b54      	ldr	r3, [pc, #336]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800316a:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_GPIO_Init+0x2ec>)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <HAL_GPIO_Init+0x2f0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d019      	beq.n	80031ca <HAL_GPIO_Init+0x202>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a48      	ldr	r2, [pc, #288]	; (80032bc <HAL_GPIO_Init+0x2f4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_GPIO_Init+0x1fe>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a47      	ldr	r2, [pc, #284]	; (80032c0 <HAL_GPIO_Init+0x2f8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00d      	beq.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a46      	ldr	r2, [pc, #280]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <HAL_GPIO_Init+0x1f6>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a45      	ldr	r2, [pc, #276]	; (80032c8 <HAL_GPIO_Init+0x300>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_GPIO_Init+0x1f2>
 80031b6:	2304      	movs	r3, #4
 80031b8:	e008      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031ba:	2307      	movs	r3, #7
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031be:	2303      	movs	r3, #3
 80031c0:	e004      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e002      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031ca:	2300      	movs	r3, #0
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f002 0203 	and.w	r2, r2, #3
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	4093      	lsls	r3, r2
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031dc:	4935      	ldr	r1, [pc, #212]	; (80032b4 <HAL_GPIO_Init+0x2ec>)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ea:	4b38      	ldr	r3, [pc, #224]	; (80032cc <HAL_GPIO_Init+0x304>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003214:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003238:	4a24      	ldr	r2, [pc, #144]	; (80032cc <HAL_GPIO_Init+0x304>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003262:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <HAL_GPIO_Init+0x304>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800328c:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <HAL_GPIO_Init+0x304>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	f67f aea2 	bls.w	8002fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3724      	adds	r7, #36	; 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40013c00 	.word	0x40013c00

080032d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	e0bb      	b.n	8003464 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032ec:	2201      	movs	r2, #1
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	429a      	cmp	r2, r3
 8003304:	f040 80ab 	bne.w	800345e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003308:	4a5c      	ldr	r2, [pc, #368]	; (800347c <HAL_GPIO_DeInit+0x1ac>)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003314:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	220f      	movs	r2, #15
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a54      	ldr	r2, [pc, #336]	; (8003480 <HAL_GPIO_DeInit+0x1b0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d019      	beq.n	8003366 <HAL_GPIO_DeInit+0x96>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a53      	ldr	r2, [pc, #332]	; (8003484 <HAL_GPIO_DeInit+0x1b4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_GPIO_DeInit+0x92>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a52      	ldr	r2, [pc, #328]	; (8003488 <HAL_GPIO_DeInit+0x1b8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00d      	beq.n	800335e <HAL_GPIO_DeInit+0x8e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a51      	ldr	r2, [pc, #324]	; (800348c <HAL_GPIO_DeInit+0x1bc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <HAL_GPIO_DeInit+0x8a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a50      	ldr	r2, [pc, #320]	; (8003490 <HAL_GPIO_DeInit+0x1c0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_GPIO_DeInit+0x86>
 8003352:	2304      	movs	r3, #4
 8003354:	e008      	b.n	8003368 <HAL_GPIO_DeInit+0x98>
 8003356:	2307      	movs	r3, #7
 8003358:	e006      	b.n	8003368 <HAL_GPIO_DeInit+0x98>
 800335a:	2303      	movs	r3, #3
 800335c:	e004      	b.n	8003368 <HAL_GPIO_DeInit+0x98>
 800335e:	2302      	movs	r3, #2
 8003360:	e002      	b.n	8003368 <HAL_GPIO_DeInit+0x98>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_GPIO_DeInit+0x98>
 8003366:	2300      	movs	r3, #0
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	f002 0203 	and.w	r2, r2, #3
 800336e:	0092      	lsls	r2, r2, #2
 8003370:	4093      	lsls	r3, r2
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	d132      	bne.n	80033de <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003378:	4b46      	ldr	r3, [pc, #280]	; (8003494 <HAL_GPIO_DeInit+0x1c4>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43db      	mvns	r3, r3
 8003380:	4944      	ldr	r1, [pc, #272]	; (8003494 <HAL_GPIO_DeInit+0x1c4>)
 8003382:	4013      	ands	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003386:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_GPIO_DeInit+0x1c4>)
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	43db      	mvns	r3, r3
 800338e:	4941      	ldr	r1, [pc, #260]	; (8003494 <HAL_GPIO_DeInit+0x1c4>)
 8003390:	4013      	ands	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003394:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <HAL_GPIO_DeInit+0x1c4>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43db      	mvns	r3, r3
 800339c:	493d      	ldr	r1, [pc, #244]	; (8003494 <HAL_GPIO_DeInit+0x1c4>)
 800339e:	4013      	ands	r3, r2
 80033a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80033a2:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <HAL_GPIO_DeInit+0x1c4>)
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	493a      	ldr	r1, [pc, #232]	; (8003494 <HAL_GPIO_DeInit+0x1c4>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	220f      	movs	r2, #15
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80033c0:	4a2e      	ldr	r2, [pc, #184]	; (800347c <HAL_GPIO_DeInit+0x1ac>)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	089b      	lsrs	r3, r3, #2
 80033c6:	3302      	adds	r3, #2
 80033c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	43da      	mvns	r2, r3
 80033d0:	482a      	ldr	r0, [pc, #168]	; (800347c <HAL_GPIO_DeInit+0x1ac>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	400a      	ands	r2, r1
 80033d8:	3302      	adds	r3, #2
 80033da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2103      	movs	r1, #3
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	220f      	movs	r2, #15
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	08d2      	lsrs	r2, r2, #3
 8003414:	4019      	ands	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3208      	adds	r2, #8
 800341a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2103      	movs	r1, #3
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	401a      	ands	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	2101      	movs	r1, #1
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	401a      	ands	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2103      	movs	r1, #3
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	401a      	ands	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	3301      	adds	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b0f      	cmp	r3, #15
 8003468:	f67f af40 	bls.w	80032ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40013800 	.word	0x40013800
 8003480:	40020000 	.word	0x40020000
 8003484:	40020400 	.word	0x40020400
 8003488:	40020800 	.word	0x40020800
 800348c:	40020c00 	.word	0x40020c00
 8003490:	40021000 	.word	0x40021000
 8003494:	40013c00 	.word	0x40013c00

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b4:	e003      	b.n	80034be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	041a      	lsls	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	619a      	str	r2, [r3, #24]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034dc:	887a      	ldrh	r2, [r7, #2]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	041a      	lsls	r2, r3, #16
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	400b      	ands	r3, r1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	619a      	str	r2, [r3, #24]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e267      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d075      	beq.n	800360a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800351e:	4b88      	ldr	r3, [pc, #544]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b04      	cmp	r3, #4
 8003528:	d00c      	beq.n	8003544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352a:	4b85      	ldr	r3, [pc, #532]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003532:	2b08      	cmp	r3, #8
 8003534:	d112      	bne.n	800355c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4b82      	ldr	r3, [pc, #520]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003542:	d10b      	bne.n	800355c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003544:	4b7e      	ldr	r3, [pc, #504]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d05b      	beq.n	8003608 <HAL_RCC_OscConfig+0x108>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d157      	bne.n	8003608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e242      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d106      	bne.n	8003574 <HAL_RCC_OscConfig+0x74>
 8003566:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e01d      	b.n	80035b0 <HAL_RCC_OscConfig+0xb0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x98>
 800357e:	4b70      	ldr	r3, [pc, #448]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6f      	ldr	r2, [pc, #444]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b6d      	ldr	r3, [pc, #436]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6c      	ldr	r2, [pc, #432]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0xb0>
 8003598:	4b69      	ldr	r3, [pc, #420]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a68      	ldr	r2, [pc, #416]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b66      	ldr	r3, [pc, #408]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a65      	ldr	r2, [pc, #404]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80035aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7ff fb00 	bl	8002bbc <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c0:	f7ff fafc 	bl	8002bbc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e207      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0xc0>
 80035de:	e014      	b.n	800360a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7ff faec 	bl	8002bbc <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e8:	f7ff fae8 	bl	8002bbc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1f3      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	4b51      	ldr	r3, [pc, #324]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0xe8>
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d063      	beq.n	80036de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003616:	4b4a      	ldr	r3, [pc, #296]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b47      	ldr	r3, [pc, #284]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362a:	2b08      	cmp	r3, #8
 800362c:	d11c      	bne.n	8003668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b44      	ldr	r3, [pc, #272]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d116      	bne.n	8003668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_RCC_OscConfig+0x152>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e1c7      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4937      	ldr	r1, [pc, #220]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	e03a      	b.n	80036de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003670:	4b34      	ldr	r3, [pc, #208]	; (8003744 <HAL_RCC_OscConfig+0x244>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7ff faa1 	bl	8002bbc <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367e:	f7ff fa9d 	bl	8002bbc <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e1a8      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369c:	4b28      	ldr	r3, [pc, #160]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4925      	ldr	r1, [pc, #148]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]
 80036b0:	e015      	b.n	80036de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_OscConfig+0x244>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7ff fa80 	bl	8002bbc <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c0:	f7ff fa7c 	bl	8002bbc <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e187      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d036      	beq.n	8003758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_RCC_OscConfig+0x248>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7ff fa60 	bl	8002bbc <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003700:	f7ff fa5c 	bl	8002bbc <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e167      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x200>
 800371e:	e01b      	b.n	8003758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_OscConfig+0x248>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7ff fa49 	bl	8002bbc <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	e00e      	b.n	800374c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372e:	f7ff fa45 	bl	8002bbc <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d907      	bls.n	800374c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e150      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
 8003740:	40023800 	.word	0x40023800
 8003744:	42470000 	.word	0x42470000
 8003748:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800374e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ea      	bne.n	800372e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8097 	beq.w	8003894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b81      	ldr	r3, [pc, #516]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b7d      	ldr	r3, [pc, #500]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a7c      	ldr	r2, [pc, #496]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b7a      	ldr	r3, [pc, #488]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	4b77      	ldr	r3, [pc, #476]	; (8003974 <HAL_RCC_OscConfig+0x474>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d118      	bne.n	80037d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a2:	4b74      	ldr	r3, [pc, #464]	; (8003974 <HAL_RCC_OscConfig+0x474>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a73      	ldr	r2, [pc, #460]	; (8003974 <HAL_RCC_OscConfig+0x474>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ae:	f7ff fa05 	bl	8002bbc <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b6:	f7ff fa01 	bl	8002bbc <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e10c      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCC_OscConfig+0x474>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d106      	bne.n	80037ea <HAL_RCC_OscConfig+0x2ea>
 80037dc:	4b64      	ldr	r3, [pc, #400]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a63      	ldr	r2, [pc, #396]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
 80037e8:	e01c      	b.n	8003824 <HAL_RCC_OscConfig+0x324>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0x30c>
 80037f2:	4b5f      	ldr	r3, [pc, #380]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a5e      	ldr	r2, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	4b5c      	ldr	r3, [pc, #368]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a5b      	ldr	r2, [pc, #364]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	e00b      	b.n	8003824 <HAL_RCC_OscConfig+0x324>
 800380c:	4b58      	ldr	r3, [pc, #352]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a57      	ldr	r2, [pc, #348]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	4b55      	ldr	r3, [pc, #340]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	4a54      	ldr	r2, [pc, #336]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800381e:	f023 0304 	bic.w	r3, r3, #4
 8003822:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7ff f9c6 	bl	8002bbc <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7ff f9c2 	bl	8002bbc <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0cb      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384a:	4b49      	ldr	r3, [pc, #292]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ee      	beq.n	8003834 <HAL_RCC_OscConfig+0x334>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003858:	f7ff f9b0 	bl	8002bbc <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7ff f9ac 	bl	8002bbc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0b5      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003876:	4b3e      	ldr	r3, [pc, #248]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1ee      	bne.n	8003860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003888:	4b39      	ldr	r3, [pc, #228]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	4a38      	ldr	r2, [pc, #224]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003892:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80a1 	beq.w	80039e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800389e:	4b34      	ldr	r3, [pc, #208]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d05c      	beq.n	8003964 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d141      	bne.n	8003936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <HAL_RCC_OscConfig+0x478>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7ff f980 	bl	8002bbc <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c0:	f7ff f97c 	bl	8002bbc <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e087      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	4b27      	ldr	r3, [pc, #156]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	491b      	ldr	r1, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x478>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7ff f955 	bl	8002bbc <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003916:	f7ff f951 	bl	8002bbc <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e05c      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x416>
 8003934:	e054      	b.n	80039e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_OscConfig+0x478>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7ff f93e 	bl	8002bbc <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003944:	f7ff f93a 	bl	8002bbc <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e045      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x444>
 8003962:	e03d      	b.n	80039e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d107      	bne.n	800397c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e038      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
 8003970:	40023800 	.word	0x40023800
 8003974:	40007000 	.word	0x40007000
 8003978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x4ec>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d028      	beq.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d121      	bne.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d11a      	bne.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d111      	bne.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	085b      	lsrs	r3, r3, #1
 80039c4:	3b01      	subs	r3, #1
 80039c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0cc      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d90c      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b65      	ldr	r3, [pc, #404]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b63      	ldr	r3, [pc, #396]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0b8      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a58      	ldr	r2, [pc, #352]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a5c:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a52      	ldr	r2, [pc, #328]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	494d      	ldr	r1, [pc, #308]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d044      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d119      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e07f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aae:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e06f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e067      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4934      	ldr	r1, [pc, #208]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae0:	f7ff f86c 	bl	8002bbc <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae8:	f7ff f868 	bl	8002bbc <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e04f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 020c 	and.w	r2, r3, #12
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d1eb      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d20c      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e032      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4916      	ldr	r1, [pc, #88]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	490e      	ldr	r1, [pc, #56]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b76:	f000 f821 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	490a      	ldr	r1, [pc, #40]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b88:	5ccb      	ldrb	r3, [r1, r3]
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe ffcc 	bl	8002b34 <HAL_InitTick>

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023c00 	.word	0x40023c00
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	08011018 	.word	0x08011018
 8003bb4:	20000084 	.word	0x20000084
 8003bb8:	20000088 	.word	0x20000088

08003bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc0:	b090      	sub	sp, #64	; 0x40
 8003bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc8:	2300      	movs	r3, #0
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bcc:	2300      	movs	r3, #0
 8003bce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd4:	4b59      	ldr	r3, [pc, #356]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d00d      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x40>
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	f200 80a1 	bhi.w	8003d28 <HAL_RCC_GetSysClockFreq+0x16c>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bee:	e09b      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bf2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bf4:	e09b      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bf6:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bfa:	e098      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bfc:	4b4f      	ldr	r3, [pc, #316]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c06:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d028      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c12:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	2200      	movs	r2, #0
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c24:	2100      	movs	r1, #0
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c28:	fb03 f201 	mul.w	r2, r3, r1
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	fb00 f303 	mul.w	r3, r0, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	4a43      	ldr	r2, [pc, #268]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c36:	fba0 1202 	umull	r1, r2, r0, r2
 8003c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c3c:	460a      	mov	r2, r1
 8003c3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c42:	4413      	add	r3, r2
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c48:	2200      	movs	r2, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	61fa      	str	r2, [r7, #28]
 8003c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c56:	f7fc fb2b 	bl	80002b0 <__aeabi_uldivmod>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4613      	mov	r3, r2
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c62:	e053      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c64:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	617a      	str	r2, [r7, #20]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c76:	f04f 0b00 	mov.w	fp, #0
 8003c7a:	4652      	mov	r2, sl
 8003c7c:	465b      	mov	r3, fp
 8003c7e:	f04f 0000 	mov.w	r0, #0
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	0159      	lsls	r1, r3, #5
 8003c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c8c:	0150      	lsls	r0, r2, #5
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	ebb2 080a 	subs.w	r8, r2, sl
 8003c96:	eb63 090b 	sbc.w	r9, r3, fp
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ca6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003caa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cae:	ebb2 0408 	subs.w	r4, r2, r8
 8003cb2:	eb63 0509 	sbc.w	r5, r3, r9
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	00eb      	lsls	r3, r5, #3
 8003cc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cc4:	00e2      	lsls	r2, r4, #3
 8003cc6:	4614      	mov	r4, r2
 8003cc8:	461d      	mov	r5, r3
 8003cca:	eb14 030a 	adds.w	r3, r4, sl
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	eb45 030b 	adc.w	r3, r5, fp
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	028b      	lsls	r3, r1, #10
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cec:	4621      	mov	r1, r4
 8003cee:	028a      	lsls	r2, r1, #10
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	60fa      	str	r2, [r7, #12]
 8003cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d00:	f7fc fad6 	bl	80002b0 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	3301      	adds	r3, #1
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d26:	e002      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3740      	adds	r7, #64	; 0x40
 8003d34:	46bd      	mov	sp, r7
 8003d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	00f42400 	.word	0x00f42400
 8003d44:	017d7840 	.word	0x017d7840

08003d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000084 	.word	0x20000084

08003d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d64:	f7ff fff0 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0a9b      	lsrs	r3, r3, #10
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4903      	ldr	r1, [pc, #12]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08011028 	.word	0x08011028

08003d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d8c:	f7ff ffdc 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0b5b      	lsrs	r3, r3, #13
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4903      	ldr	r1, [pc, #12]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40023800 	.word	0x40023800
 8003dac:	08011028 	.word	0x08011028

08003db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e07b      	b.n	8003eba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d108      	bne.n	8003ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd2:	d009      	beq.n	8003de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	61da      	str	r2, [r3, #28]
 8003dda:	e005      	b.n	8003de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fe fb8e 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	ea42 0103 	orr.w	r1, r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	f003 0104 	and.w	r1, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0210 	and.w	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08c      	sub	sp, #48	; 0x30
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x26>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e18a      	b.n	80041fe <HAL_SPI_TransmitReceive+0x33c>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef0:	f7fe fe64 	bl	8002bbc <HAL_GetTick>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d00f      	beq.n	8003f32 <HAL_SPI_TransmitReceive+0x70>
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f18:	d107      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x68>
 8003f22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d003      	beq.n	8003f32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f30:	e15b      	b.n	80041ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x82>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x82>
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f4a:	e14e      	b.n	80041ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d003      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2205      	movs	r2, #5
 8003f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	887a      	ldrh	r2, [r7, #2]
 8003f76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	887a      	ldrh	r2, [r7, #2]
 8003f82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d007      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbc:	d178      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x10a>
 8003fc6:	8b7b      	ldrh	r3, [r7, #26]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d166      	bne.n	800409a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	1c9a      	adds	r2, r3, #2
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff0:	e053      	b.n	800409a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d11b      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x176>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x176>
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d113      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	881a      	ldrh	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	1c9a      	adds	r2, r3, #2
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d119      	bne.n	800407a <HAL_SPI_TransmitReceive+0x1b8>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d014      	beq.n	800407a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	b292      	uxth	r2, r2
 800405c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	1c9a      	adds	r2, r3, #2
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004076:	2301      	movs	r3, #1
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800407a:	f7fe fd9f 	bl	8002bbc <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004086:	429a      	cmp	r2, r3
 8004088:	d807      	bhi.n	800409a <HAL_SPI_TransmitReceive+0x1d8>
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d003      	beq.n	800409a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004098:	e0a7      	b.n	80041ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1a6      	bne.n	8003ff2 <HAL_SPI_TransmitReceive+0x130>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1a1      	bne.n	8003ff2 <HAL_SPI_TransmitReceive+0x130>
 80040ae:	e07c      	b.n	80041aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_SPI_TransmitReceive+0x1fc>
 80040b8:	8b7b      	ldrh	r3, [r7, #26]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d16b      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e4:	e057      	b.n	8004196 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d11c      	bne.n	800412e <HAL_SPI_TransmitReceive+0x26c>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d017      	beq.n	800412e <HAL_SPI_TransmitReceive+0x26c>
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d114      	bne.n	800412e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b01      	cmp	r3, #1
 800413a:	d119      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x2ae>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d014      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800416c:	2301      	movs	r3, #1
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004170:	f7fe fd24 	bl	8002bbc <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800417c:	429a      	cmp	r2, r3
 800417e:	d803      	bhi.n	8004188 <HAL_SPI_TransmitReceive+0x2c6>
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d102      	bne.n	800418e <HAL_SPI_TransmitReceive+0x2cc>
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004194:	e029      	b.n	80041ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1a2      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x224>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d19d      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f8b2 	bl	8004318 <SPI_EndRxTxTransaction>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041c6:	e010      	b.n	80041ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	e000      	b.n	80041ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80041e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3730      	adds	r7, #48	; 0x30
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004218:	f7fe fcd0 	bl	8002bbc <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	4413      	add	r3, r2
 8004226:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004228:	f7fe fcc8 	bl	8002bbc <HAL_GetTick>
 800422c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800422e:	4b39      	ldr	r3, [pc, #228]	; (8004314 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	015b      	lsls	r3, r3, #5
 8004234:	0d1b      	lsrs	r3, r3, #20
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	fb02 f303 	mul.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800423e:	e054      	b.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d050      	beq.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004248:	f7fe fcb8 	bl	8002bbc <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	429a      	cmp	r2, r3
 8004256:	d902      	bls.n	800425e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d13d      	bne.n	80042da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800426c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004276:	d111      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004280:	d004      	beq.n	800428c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428a:	d107      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a4:	d10f      	bne.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e017      	b.n	800430a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	429a      	cmp	r2, r3
 8004306:	d19b      	bne.n	8004240 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000084 	.word	0x20000084

08004318 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <SPI_EndRxTxTransaction+0x7c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <SPI_EndRxTxTransaction+0x80>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	0d5b      	lsrs	r3, r3, #21
 8004330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004342:	d112      	bne.n	800436a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	2180      	movs	r1, #128	; 0x80
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f7ff ff5a 	bl	8004208 <SPI_WaitFlagStateUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	f043 0220 	orr.w	r2, r3, #32
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e00f      	b.n	800438a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3b01      	subs	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d0f2      	beq.n	800436a <SPI_EndRxTxTransaction+0x52>
 8004384:	e000      	b.n	8004388 <SPI_EndRxTxTransaction+0x70>
        break;
 8004386:	bf00      	nop
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000084 	.word	0x20000084
 8004398:	165e9f81 	.word	0x165e9f81

0800439c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e041      	b.n	8004432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fe f8f6 	bl	80025b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f000 fce4 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e041      	b.n	80044d0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f839 	bl	80044d8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2202      	movs	r2, #2
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f000 fc95 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_TIM_OC_Start_IT+0x28>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e022      	b.n	800455a <HAL_TIM_OC_Start_IT+0x6e>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d109      	bne.n	800452e <HAL_TIM_OC_Start_IT+0x42>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b01      	cmp	r3, #1
 8004524:	bf14      	ite	ne
 8004526:	2301      	movne	r3, #1
 8004528:	2300      	moveq	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e015      	b.n	800455a <HAL_TIM_OC_Start_IT+0x6e>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d109      	bne.n	8004548 <HAL_TIM_OC_Start_IT+0x5c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e008      	b.n	800455a <HAL_TIM_OC_Start_IT+0x6e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0b3      	b.n	80046ca <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_TIM_OC_Start_IT+0x86>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004570:	e013      	b.n	800459a <HAL_TIM_OC_Start_IT+0xae>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d104      	bne.n	8004582 <HAL_TIM_OC_Start_IT+0x96>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004580:	e00b      	b.n	800459a <HAL_TIM_OC_Start_IT+0xae>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d104      	bne.n	8004592 <HAL_TIM_OC_Start_IT+0xa6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004590:	e003      	b.n	800459a <HAL_TIM_OC_Start_IT+0xae>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d841      	bhi.n	8004624 <HAL_TIM_OC_Start_IT+0x138>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_TIM_OC_Start_IT+0xbc>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	08004625 	.word	0x08004625
 80045b0:	08004625 	.word	0x08004625
 80045b4:	08004625 	.word	0x08004625
 80045b8:	080045ef 	.word	0x080045ef
 80045bc:	08004625 	.word	0x08004625
 80045c0:	08004625 	.word	0x08004625
 80045c4:	08004625 	.word	0x08004625
 80045c8:	08004601 	.word	0x08004601
 80045cc:	08004625 	.word	0x08004625
 80045d0:	08004625 	.word	0x08004625
 80045d4:	08004625 	.word	0x08004625
 80045d8:	08004613 	.word	0x08004613
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0202 	orr.w	r2, r2, #2
 80045ea:	60da      	str	r2, [r3, #12]
      break;
 80045ec:	e01d      	b.n	800462a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0204 	orr.w	r2, r2, #4
 80045fc:	60da      	str	r2, [r3, #12]
      break;
 80045fe:	e014      	b.n	800462a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0208 	orr.w	r2, r2, #8
 800460e:	60da      	str	r2, [r3, #12]
      break;
 8004610:	e00b      	b.n	800462a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0210 	orr.w	r2, r2, #16
 8004620:	60da      	str	r2, [r3, #12]
      break;
 8004622:	e002      	b.n	800462a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      break;
 8004628:	bf00      	nop
  }

  if (status == HAL_OK)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d14b      	bne.n	80046c8 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2201      	movs	r2, #1
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fe5b 	bl	80052f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a24      	ldr	r2, [pc, #144]	; (80046d4 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d107      	bne.n	8004658 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004656:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <HAL_TIM_OC_Start_IT+0x1e8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_TIM_OC_Start_IT+0x1a8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466a:	d013      	beq.n	8004694 <HAL_TIM_OC_Start_IT+0x1a8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_OC_Start_IT+0x1a8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_TIM_OC_Start_IT+0x1f0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_OC_Start_IT+0x1a8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_OC_Start_IT+0x1a8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d111      	bne.n	80046b8 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d010      	beq.n	80046c8 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e007      	b.n	80046c8 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40000c00 	.word	0x40000c00
 80046e4:	40014000 	.word	0x40014000

080046e8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d841      	bhi.n	8004780 <HAL_TIM_OC_Stop_IT+0x98>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <HAL_TIM_OC_Stop_IT+0x1c>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004739 	.word	0x08004739
 8004708:	08004781 	.word	0x08004781
 800470c:	08004781 	.word	0x08004781
 8004710:	08004781 	.word	0x08004781
 8004714:	0800474b 	.word	0x0800474b
 8004718:	08004781 	.word	0x08004781
 800471c:	08004781 	.word	0x08004781
 8004720:	08004781 	.word	0x08004781
 8004724:	0800475d 	.word	0x0800475d
 8004728:	08004781 	.word	0x08004781
 800472c:	08004781 	.word	0x08004781
 8004730:	08004781 	.word	0x08004781
 8004734:	0800476f 	.word	0x0800476f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0202 	bic.w	r2, r2, #2
 8004746:	60da      	str	r2, [r3, #12]
      break;
 8004748:	e01d      	b.n	8004786 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0204 	bic.w	r2, r2, #4
 8004758:	60da      	str	r2, [r3, #12]
      break;
 800475a:	e014      	b.n	8004786 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0208 	bic.w	r2, r2, #8
 800476a:	60da      	str	r2, [r3, #12]
      break;
 800476c:	e00b      	b.n	8004786 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0210 	bic.w	r2, r2, #16
 800477c:	60da      	str	r2, [r3, #12]
      break;
 800477e:	e002      	b.n	8004786 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	bf00      	nop
  }

  if (status == HAL_OK)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d157      	bne.n	800483c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2200      	movs	r2, #0
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fdad 	bl	80052f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <HAL_TIM_OC_Stop_IT+0x160>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d117      	bne.n	80047d4 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10f      	bne.n	80047d4 <HAL_TIM_OC_Stop_IT+0xec>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6a1a      	ldr	r2, [r3, #32]
 80047ba:	f240 4344 	movw	r3, #1092	; 0x444
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d107      	bne.n	80047d4 <HAL_TIM_OC_Stop_IT+0xec>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	f241 1311 	movw	r3, #4369	; 0x1111
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10f      	bne.n	8004804 <HAL_TIM_OC_Stop_IT+0x11c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	f240 4344 	movw	r3, #1092	; 0x444
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d107      	bne.n	8004804 <HAL_TIM_OC_Stop_IT+0x11c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <HAL_TIM_OC_Stop_IT+0x12c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004812:	e013      	b.n	800483c <HAL_TIM_OC_Stop_IT+0x154>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b04      	cmp	r3, #4
 8004818:	d104      	bne.n	8004824 <HAL_TIM_OC_Stop_IT+0x13c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004822:	e00b      	b.n	800483c <HAL_TIM_OC_Stop_IT+0x154>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b08      	cmp	r3, #8
 8004828:	d104      	bne.n	8004834 <HAL_TIM_OC_Stop_IT+0x14c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004832:	e003      	b.n	800483c <HAL_TIM_OC_Stop_IT+0x154>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000

0800484c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e041      	b.n	80048e4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f839 	bl	80048ec <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f000 fa8b 	bl	8004da8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0208 	bic.w	r2, r2, #8
 80048a0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0202 	mvn.w	r2, #2
 800492c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa11 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd fc36 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa14 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b04      	cmp	r3, #4
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0204 	mvn.w	r2, #4
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9e7 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fd fc0c 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f9ea 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0208 	mvn.w	r2, #8
 80049d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2204      	movs	r2, #4
 80049da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9bd 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fd fbe2 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f9c0 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0210 	mvn.w	r2, #16
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f993 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fd fbb8 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f996 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d10e      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d107      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0201 	mvn.w	r2, #1
 8004a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f969 	bl	8004d56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b80      	cmp	r3, #128	; 0x80
 8004a90:	d10e      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b80      	cmp	r3, #128	; 0x80
 8004a9e:	d107      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fcc0 	bl	8005430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d10e      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d107      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f95b 	bl	8004d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0220 	mvn.w	r2, #32
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fc8a 	bl	800541c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e048      	b.n	8004bc0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	d839      	bhi.n	8004bb0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004bb1 	.word	0x08004bb1
 8004b4c:	08004bb1 	.word	0x08004bb1
 8004b50:	08004bb1 	.word	0x08004bb1
 8004b54:	08004b87 	.word	0x08004b87
 8004b58:	08004bb1 	.word	0x08004bb1
 8004b5c:	08004bb1 	.word	0x08004bb1
 8004b60:	08004bb1 	.word	0x08004bb1
 8004b64:	08004b95 	.word	0x08004b95
 8004b68:	08004bb1 	.word	0x08004bb1
 8004b6c:	08004bb1 	.word	0x08004bb1
 8004b70:	08004bb1 	.word	0x08004bb1
 8004b74:	08004ba3 	.word	0x08004ba3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f992 	bl	8004ea8 <TIM_OC1_SetConfig>
      break;
 8004b84:	e017      	b.n	8004bb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f9f1 	bl	8004f74 <TIM_OC2_SetConfig>
      break;
 8004b92:	e010      	b.n	8004bb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fa56 	bl	800504c <TIM_OC3_SetConfig>
      break;
 8004ba0:	e009      	b.n	8004bb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fab9 	bl	8005120 <TIM_OC4_SetConfig>
      break;
 8004bae:	e002      	b.n	8004bb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_TIM_ConfigClockSource+0x1c>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e0b4      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x186>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1c:	d03e      	beq.n	8004c9c <HAL_TIM_ConfigClockSource+0xd4>
 8004c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c22:	f200 8087 	bhi.w	8004d34 <HAL_TIM_ConfigClockSource+0x16c>
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2a:	f000 8086 	beq.w	8004d3a <HAL_TIM_ConfigClockSource+0x172>
 8004c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c32:	d87f      	bhi.n	8004d34 <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b70      	cmp	r3, #112	; 0x70
 8004c36:	d01a      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0xa6>
 8004c38:	2b70      	cmp	r3, #112	; 0x70
 8004c3a:	d87b      	bhi.n	8004d34 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b60      	cmp	r3, #96	; 0x60
 8004c3e:	d050      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c40:	2b60      	cmp	r3, #96	; 0x60
 8004c42:	d877      	bhi.n	8004d34 <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b50      	cmp	r3, #80	; 0x50
 8004c46:	d03c      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c48:	2b50      	cmp	r3, #80	; 0x50
 8004c4a:	d873      	bhi.n	8004d34 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d058      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x13a>
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d86f      	bhi.n	8004d34 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b30      	cmp	r3, #48	; 0x30
 8004c56:	d064      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x15a>
 8004c58:	2b30      	cmp	r3, #48	; 0x30
 8004c5a:	d86b      	bhi.n	8004d34 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d060      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x15a>
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d867      	bhi.n	8004d34 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d05c      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x15a>
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d05a      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x15a>
 8004c6c:	e062      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6899      	ldr	r1, [r3, #8]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f000 fb19 	bl	80052b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	609a      	str	r2, [r3, #8]
      break;
 8004c9a:	e04f      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	6899      	ldr	r1, [r3, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f000 fb02 	bl	80052b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cbe:	609a      	str	r2, [r3, #8]
      break;
 8004cc0:	e03c      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f000 fa76 	bl	80051c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2150      	movs	r1, #80	; 0x50
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 facf 	bl	800527e <TIM_ITRx_SetConfig>
      break;
 8004ce0:	e02c      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fa95 	bl	800521e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2160      	movs	r1, #96	; 0x60
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fabf 	bl	800527e <TIM_ITRx_SetConfig>
      break;
 8004d00:	e01c      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 fa56 	bl	80051c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2140      	movs	r1, #64	; 0x40
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 faaf 	bl	800527e <TIM_ITRx_SetConfig>
      break;
 8004d20:	e00c      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f000 faa6 	bl	800527e <TIM_ITRx_SetConfig>
      break;
 8004d32:	e003      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
      break;
 8004d38:	e000      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a34      	ldr	r2, [pc, #208]	; (8004e8c <TIM_Base_SetConfig+0xe4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00f      	beq.n	8004de0 <TIM_Base_SetConfig+0x38>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc6:	d00b      	beq.n	8004de0 <TIM_Base_SetConfig+0x38>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a31      	ldr	r2, [pc, #196]	; (8004e90 <TIM_Base_SetConfig+0xe8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_Base_SetConfig+0x38>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a30      	ldr	r2, [pc, #192]	; (8004e94 <TIM_Base_SetConfig+0xec>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_Base_SetConfig+0x38>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a2f      	ldr	r2, [pc, #188]	; (8004e98 <TIM_Base_SetConfig+0xf0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d108      	bne.n	8004df2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <TIM_Base_SetConfig+0xe4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01b      	beq.n	8004e32 <TIM_Base_SetConfig+0x8a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e00:	d017      	beq.n	8004e32 <TIM_Base_SetConfig+0x8a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a22      	ldr	r2, [pc, #136]	; (8004e90 <TIM_Base_SetConfig+0xe8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <TIM_Base_SetConfig+0x8a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a21      	ldr	r2, [pc, #132]	; (8004e94 <TIM_Base_SetConfig+0xec>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00f      	beq.n	8004e32 <TIM_Base_SetConfig+0x8a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a20      	ldr	r2, [pc, #128]	; (8004e98 <TIM_Base_SetConfig+0xf0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <TIM_Base_SetConfig+0xf4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <TIM_Base_SetConfig+0xf8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <TIM_Base_SetConfig+0xfc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d108      	bne.n	8004e44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <TIM_Base_SetConfig+0xe4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d103      	bne.n	8004e78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	615a      	str	r2, [r3, #20]
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40010000 	.word	0x40010000
 8004e90:	40000400 	.word	0x40000400
 8004e94:	40000800 	.word	0x40000800
 8004e98:	40000c00 	.word	0x40000c00
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f023 0201 	bic.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f023 0302 	bic.w	r3, r3, #2
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <TIM_OC1_SetConfig+0xc8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10c      	bne.n	8004f1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0308 	bic.w	r3, r3, #8
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0304 	bic.w	r3, r3, #4
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a13      	ldr	r2, [pc, #76]	; (8004f70 <TIM_OC1_SetConfig+0xc8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d111      	bne.n	8004f4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	621a      	str	r2, [r3, #32]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	40010000 	.word	0x40010000

08004f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0210 	bic.w	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0320 	bic.w	r3, r3, #32
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <TIM_OC2_SetConfig+0xd4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d10d      	bne.n	8004ff0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a15      	ldr	r2, [pc, #84]	; (8005048 <TIM_OC2_SetConfig+0xd4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d113      	bne.n	8005020 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40010000 	.word	0x40010000

0800504c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <TIM_OC3_SetConfig+0xd0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10d      	bne.n	80050c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a14      	ldr	r2, [pc, #80]	; (800511c <TIM_OC3_SetConfig+0xd0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d113      	bne.n	80050f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40010000 	.word	0x40010000

08005120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800516a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	031b      	lsls	r3, r3, #12
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <TIM_OC4_SetConfig+0x9c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d109      	bne.n	8005194 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000

080051c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 030a 	bic.w	r3, r3, #10
 80051fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800521e:	b480      	push	{r7}
 8005220:	b087      	sub	sp, #28
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f023 0210 	bic.w	r2, r3, #16
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	031b      	lsls	r3, r3, #12
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800525a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	f043 0307 	orr.w	r3, r3, #7
 80052a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	609a      	str	r2, [r3, #8]
}
 80052a8:	bf00      	nop
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	021a      	lsls	r2, r3, #8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4313      	orrs	r3, r2
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	609a      	str	r2, [r3, #8]
}
 80052e8:	bf00      	nop
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	2201      	movs	r2, #1
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1a      	ldr	r2, [r3, #32]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	43db      	mvns	r3, r3
 8005316:	401a      	ands	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	fa01 f303 	lsl.w	r3, r1, r3
 800532c:	431a      	orrs	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005354:	2302      	movs	r3, #2
 8005356:	e050      	b.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d018      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a4:	d013      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a16      	ldr	r2, [pc, #88]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a15      	ldr	r2, [pc, #84]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a13      	ldr	r2, [pc, #76]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10c      	bne.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40010000 	.word	0x40010000
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40014000 	.word	0x40014000

0800541c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e03f      	b.n	80054d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fd f8e6 	bl	800263c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2224      	movs	r2, #36	; 0x24
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fe49 	bl	8006120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800549c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b082      	sub	sp, #8
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e021      	b.n	8005534 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	; 0x24
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005506:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fd f959 	bl	80027c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b20      	cmp	r3, #32
 800555a:	d17c      	bne.n	8005656 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_UART_Transmit+0x2c>
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e075      	b.n	8005658 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_UART_Transmit+0x3e>
 8005576:	2302      	movs	r3, #2
 8005578:	e06e      	b.n	8005658 <HAL_UART_Transmit+0x11c>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2221      	movs	r2, #33	; 0x21
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005590:	f7fd fb14 	bl	8002bbc <HAL_GetTick>
 8005594:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055aa:	d108      	bne.n	80055be <HAL_UART_Transmit+0x82>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	e003      	b.n	80055c6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055ce:	e02a      	b.n	8005626 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2200      	movs	r2, #0
 80055d8:	2180      	movs	r1, #128	; 0x80
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fb5a 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e036      	b.n	8005658 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10b      	bne.n	8005608 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055fe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	3302      	adds	r3, #2
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	e007      	b.n	8005618 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3301      	adds	r3, #1
 8005616:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1cf      	bne.n	80055d0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	2140      	movs	r1, #64	; 0x40
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fb2a 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e006      	b.n	8005658 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	e000      	b.n	8005658 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
  }
}
 8005658:	4618      	mov	r0, r3
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b20      	cmp	r3, #32
 8005678:	d130      	bne.n	80056dc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_UART_Transmit_IT+0x26>
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e029      	b.n	80056de <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_UART_Transmit_IT+0x38>
 8005694:	2302      	movs	r3, #2
 8005696:	e022      	b.n	80056de <HAL_UART_Transmit_IT+0x7e>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2221      	movs	r2, #33	; 0x21
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056d6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	4613      	mov	r3, r2
 80056f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b20      	cmp	r3, #32
 8005702:	d11d      	bne.n	8005740 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_UART_Receive_IT+0x26>
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e016      	b.n	8005742 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_UART_Receive_IT+0x38>
 800571e:	2302      	movs	r3, #2
 8005720:	e00f      	b.n	8005742 <HAL_UART_Receive_IT+0x58>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	461a      	mov	r2, r3
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fb1a 	bl	8005d70 <UART_Start_Receive_IT>
 800573c:	4603      	mov	r3, r0
 800573e:	e000      	b.n	8005742 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005740:	2302      	movs	r3, #2
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b0ba      	sub	sp, #232	; 0xe8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005772:	2300      	movs	r3, #0
 8005774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005778:	2300      	movs	r3, #0
 800577a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800578a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_UART_IRQHandler+0x66>
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fbfd 	bl	8005faa <UART_Receive_IT>
      return;
 80057b0:	e256      	b.n	8005c60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80de 	beq.w	8005978 <HAL_UART_IRQHandler+0x22c>
 80057bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80d1 	beq.w	8005978 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_UART_IRQHandler+0xae>
 80057e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <HAL_UART_IRQHandler+0xd2>
 8005806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f043 0202 	orr.w	r2, r3, #2
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <HAL_UART_IRQHandler+0xf6>
 800582a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f043 0204 	orr.w	r2, r3, #4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d011      	beq.n	8005872 <HAL_UART_IRQHandler+0x126>
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800585a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f043 0208 	orr.w	r2, r3, #8
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 81ed 	beq.w	8005c56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800587c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_UART_IRQHandler+0x14e>
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb88 	bl	8005faa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	bf0c      	ite	eq
 80058a8:	2301      	moveq	r3, #1
 80058aa:	2300      	movne	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <HAL_UART_IRQHandler+0x17a>
 80058be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d04f      	beq.n	8005966 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa90 	bl	8005dec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d141      	bne.n	800595e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3314      	adds	r3, #20
 80058e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3314      	adds	r3, #20
 8005902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800590a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800591e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1d9      	bne.n	80058da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	2b00      	cmp	r3, #0
 800592c:	d013      	beq.n	8005956 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	4a7d      	ldr	r2, [pc, #500]	; (8005b28 <HAL_UART_IRQHandler+0x3dc>)
 8005934:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	4618      	mov	r0, r3
 800593c:	f7fd fb21 	bl	8002f82 <HAL_DMA_Abort_IT>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d016      	beq.n	8005974 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005950:	4610      	mov	r0, r2
 8005952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	e00e      	b.n	8005974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fc fb60 	bl	800201c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595c:	e00a      	b.n	8005974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fc fb5c 	bl	800201c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	e006      	b.n	8005974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc fb58 	bl	800201c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005972:	e170      	b.n	8005c56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	bf00      	nop
    return;
 8005976:	e16e      	b.n	8005c56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	2b01      	cmp	r3, #1
 800597e:	f040 814a 	bne.w	8005c16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8143 	beq.w	8005c16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 813c 	beq.w	8005c16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	f040 80b4 	bne.w	8005b2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8140 	beq.w	8005c5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059e2:	429a      	cmp	r2, r3
 80059e4:	f080 8139 	bcs.w	8005c5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fa:	f000 8088 	beq.w	8005b0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1d9      	bne.n	80059fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3314      	adds	r3, #20
 8005a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3314      	adds	r3, #20
 8005a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e1      	bne.n	8005a4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3314      	adds	r3, #20
 8005a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e3      	bne.n	8005a86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005af0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005af2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e3      	bne.n	8005acc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fd f9ca 	bl	8002ea2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8ac 	bl	8005c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b24:	e099      	b.n	8005c5a <HAL_UART_IRQHandler+0x50e>
 8005b26:	bf00      	nop
 8005b28:	08005eb3 	.word	0x08005eb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 808b 	beq.w	8005c5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8086 	beq.w	8005c5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b76:	647a      	str	r2, [r7, #68]	; 0x44
 8005b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e3      	bne.n	8005b52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	623b      	str	r3, [r7, #32]
   return(result);
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bae:	633a      	str	r2, [r7, #48]	; 0x30
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e3      	bne.n	8005b8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0310 	bic.w	r3, r3, #16
 8005be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bf4:	61fa      	str	r2, [r7, #28]
 8005bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	69b9      	ldr	r1, [r7, #24]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	617b      	str	r3, [r7, #20]
   return(result);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e3      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f834 	bl	8005c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c14:	e023      	b.n	8005c5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <HAL_UART_IRQHandler+0x4ea>
 8005c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f953 	bl	8005eda <UART_Transmit_IT>
    return;
 8005c34:	e014      	b.n	8005c60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00e      	beq.n	8005c60 <HAL_UART_IRQHandler+0x514>
 8005c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f993 	bl	8005f7a <UART_EndTransmit_IT>
    return;
 8005c54:	e004      	b.n	8005c60 <HAL_UART_IRQHandler+0x514>
    return;
 8005c56:	bf00      	nop
 8005c58:	e002      	b.n	8005c60 <HAL_UART_IRQHandler+0x514>
      return;
 8005c5a:	bf00      	nop
 8005c5c:	e000      	b.n	8005c60 <HAL_UART_IRQHandler+0x514>
      return;
 8005c5e:	bf00      	nop
  }
}
 8005c60:	37e8      	adds	r7, #232	; 0xe8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop

08005c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b090      	sub	sp, #64	; 0x40
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca4:	e050      	b.n	8005d48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d04c      	beq.n	8005d48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cb4:	f7fc ff82 	bl	8002bbc <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d241      	bcs.n	8005d48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ce4:	637a      	str	r2, [r7, #52]	; 0x34
 8005ce6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e5      	bne.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3314      	adds	r3, #20
 8005cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	613b      	str	r3, [r7, #16]
   return(result);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d18:	623a      	str	r2, [r7, #32]
 8005d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	69f9      	ldr	r1, [r7, #28]
 8005d1e:	6a3a      	ldr	r2, [r7, #32]
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e5      	bne.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e00f      	b.n	8005d68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	4013      	ands	r3, r2
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	bf0c      	ite	eq
 8005d58:	2301      	moveq	r3, #1
 8005d5a:	2300      	movne	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d09f      	beq.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3740      	adds	r7, #64	; 0x40
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	88fa      	ldrh	r2, [r7, #6]
 8005d88:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	88fa      	ldrh	r2, [r7, #6]
 8005d8e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2222      	movs	r2, #34	; 0x22
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dbc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0220 	orr.w	r2, r2, #32
 8005ddc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b095      	sub	sp, #84	; 0x54
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e14:	643a      	str	r2, [r7, #64]	; 0x40
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e5      	bne.n	8005df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3314      	adds	r3, #20
 8005e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d119      	bne.n	8005e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f023 0310 	bic.w	r3, r3, #16
 8005e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e84:	61ba      	str	r2, [r7, #24]
 8005e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6979      	ldr	r1, [r7, #20]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	613b      	str	r3, [r7, #16]
   return(result);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e5      	bne.n	8005e64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ea6:	bf00      	nop
 8005ea8:	3754      	adds	r7, #84	; 0x54
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7fc f8a5 	bl	800201c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b21      	cmp	r3, #33	; 0x21
 8005eec:	d13e      	bne.n	8005f6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef6:	d114      	bne.n	8005f22 <UART_Transmit_IT+0x48>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d110      	bne.n	8005f22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	1c9a      	adds	r2, r3, #2
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	621a      	str	r2, [r3, #32]
 8005f20:	e008      	b.n	8005f34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6211      	str	r1, [r2, #32]
 8005f2c:	781a      	ldrb	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	4619      	mov	r1, r3
 8005f42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10f      	bne.n	8005f68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e000      	b.n	8005f6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
  }
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff fe64 	bl	8005c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b08c      	sub	sp, #48	; 0x30
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b22      	cmp	r3, #34	; 0x22
 8005fbc:	f040 80ab 	bne.w	8006116 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc8:	d117      	bne.n	8005ffa <UART_Receive_IT+0x50>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d113      	bne.n	8005ffa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	1c9a      	adds	r2, r3, #2
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ff8:	e026      	b.n	8006048 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600c:	d007      	beq.n	800601e <UART_Receive_IT+0x74>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <UART_Receive_IT+0x82>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	b2da      	uxtb	r2, r3
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	e008      	b.n	800603e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006038:	b2da      	uxtb	r2, r3
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29b      	uxth	r3, r3
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	4619      	mov	r1, r3
 8006056:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006058:	2b00      	cmp	r3, #0
 800605a:	d15a      	bne.n	8006112 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0220 	bic.w	r2, r2, #32
 800606a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800607a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	2b01      	cmp	r3, #1
 800609a:	d135      	bne.n	8006108 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	613b      	str	r3, [r7, #16]
   return(result);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f023 0310 	bic.w	r3, r3, #16
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c2:	623a      	str	r2, [r7, #32]
 80060c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	69f9      	ldr	r1, [r7, #28]
 80060c8:	6a3a      	ldr	r2, [r7, #32]
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e5      	bne.n	80060a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d10a      	bne.n	80060fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fdbb 	bl	8005c7c <HAL_UARTEx_RxEventCallback>
 8006106:	e002      	b.n	800610e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7fb ffdb 	bl	80020c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	e002      	b.n	8006118 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	e000      	b.n	8006118 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006116:	2302      	movs	r3, #2
  }
}
 8006118:	4618      	mov	r0, r3
 800611a:	3730      	adds	r7, #48	; 0x30
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006124:	b0c0      	sub	sp, #256	; 0x100
 8006126:	af00      	add	r7, sp, #0
 8006128:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	68d9      	ldr	r1, [r3, #12]
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	ea40 0301 	orr.w	r3, r0, r1
 8006148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	431a      	orrs	r2, r3
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	431a      	orrs	r2, r3
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006178:	f021 010c 	bic.w	r1, r1, #12
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006186:	430b      	orrs	r3, r1
 8006188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619a:	6999      	ldr	r1, [r3, #24]
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	ea40 0301 	orr.w	r3, r0, r1
 80061a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b8f      	ldr	r3, [pc, #572]	; (80063ec <UART_SetConfig+0x2cc>)
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d005      	beq.n	80061c0 <UART_SetConfig+0xa0>
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b8d      	ldr	r3, [pc, #564]	; (80063f0 <UART_SetConfig+0x2d0>)
 80061bc:	429a      	cmp	r2, r3
 80061be:	d104      	bne.n	80061ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061c0:	f7fd fde2 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
 80061c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061c8:	e003      	b.n	80061d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ca:	f7fd fdc9 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 80061ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061dc:	f040 810c 	bne.w	80063f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061f2:	4622      	mov	r2, r4
 80061f4:	462b      	mov	r3, r5
 80061f6:	1891      	adds	r1, r2, r2
 80061f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80061fa:	415b      	adcs	r3, r3
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006202:	4621      	mov	r1, r4
 8006204:	eb12 0801 	adds.w	r8, r2, r1
 8006208:	4629      	mov	r1, r5
 800620a:	eb43 0901 	adc.w	r9, r3, r1
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800621a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800621e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006222:	4690      	mov	r8, r2
 8006224:	4699      	mov	r9, r3
 8006226:	4623      	mov	r3, r4
 8006228:	eb18 0303 	adds.w	r3, r8, r3
 800622c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006230:	462b      	mov	r3, r5
 8006232:	eb49 0303 	adc.w	r3, r9, r3
 8006236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006246:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800624a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800624e:	460b      	mov	r3, r1
 8006250:	18db      	adds	r3, r3, r3
 8006252:	653b      	str	r3, [r7, #80]	; 0x50
 8006254:	4613      	mov	r3, r2
 8006256:	eb42 0303 	adc.w	r3, r2, r3
 800625a:	657b      	str	r3, [r7, #84]	; 0x54
 800625c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006260:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006264:	f7fa f824 	bl	80002b0 <__aeabi_uldivmod>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4b61      	ldr	r3, [pc, #388]	; (80063f4 <UART_SetConfig+0x2d4>)
 800626e:	fba3 2302 	umull	r2, r3, r3, r2
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	011c      	lsls	r4, r3, #4
 8006276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800627a:	2200      	movs	r2, #0
 800627c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006280:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006284:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006288:	4642      	mov	r2, r8
 800628a:	464b      	mov	r3, r9
 800628c:	1891      	adds	r1, r2, r2
 800628e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006290:	415b      	adcs	r3, r3
 8006292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006294:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006298:	4641      	mov	r1, r8
 800629a:	eb12 0a01 	adds.w	sl, r2, r1
 800629e:	4649      	mov	r1, r9
 80062a0:	eb43 0b01 	adc.w	fp, r3, r1
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062b8:	4692      	mov	sl, r2
 80062ba:	469b      	mov	fp, r3
 80062bc:	4643      	mov	r3, r8
 80062be:	eb1a 0303 	adds.w	r3, sl, r3
 80062c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062c6:	464b      	mov	r3, r9
 80062c8:	eb4b 0303 	adc.w	r3, fp, r3
 80062cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062e4:	460b      	mov	r3, r1
 80062e6:	18db      	adds	r3, r3, r3
 80062e8:	643b      	str	r3, [r7, #64]	; 0x40
 80062ea:	4613      	mov	r3, r2
 80062ec:	eb42 0303 	adc.w	r3, r2, r3
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
 80062f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062fa:	f7f9 ffd9 	bl	80002b0 <__aeabi_uldivmod>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4611      	mov	r1, r2
 8006304:	4b3b      	ldr	r3, [pc, #236]	; (80063f4 <UART_SetConfig+0x2d4>)
 8006306:	fba3 2301 	umull	r2, r3, r3, r1
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	2264      	movs	r2, #100	; 0x64
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	1acb      	subs	r3, r1, r3
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800631a:	4b36      	ldr	r3, [pc, #216]	; (80063f4 <UART_SetConfig+0x2d4>)
 800631c:	fba3 2302 	umull	r2, r3, r3, r2
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006328:	441c      	add	r4, r3
 800632a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800632e:	2200      	movs	r2, #0
 8006330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006334:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006338:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800633c:	4642      	mov	r2, r8
 800633e:	464b      	mov	r3, r9
 8006340:	1891      	adds	r1, r2, r2
 8006342:	63b9      	str	r1, [r7, #56]	; 0x38
 8006344:	415b      	adcs	r3, r3
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800634c:	4641      	mov	r1, r8
 800634e:	1851      	adds	r1, r2, r1
 8006350:	6339      	str	r1, [r7, #48]	; 0x30
 8006352:	4649      	mov	r1, r9
 8006354:	414b      	adcs	r3, r1
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006364:	4659      	mov	r1, fp
 8006366:	00cb      	lsls	r3, r1, #3
 8006368:	4651      	mov	r1, sl
 800636a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800636e:	4651      	mov	r1, sl
 8006370:	00ca      	lsls	r2, r1, #3
 8006372:	4610      	mov	r0, r2
 8006374:	4619      	mov	r1, r3
 8006376:	4603      	mov	r3, r0
 8006378:	4642      	mov	r2, r8
 800637a:	189b      	adds	r3, r3, r2
 800637c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006380:	464b      	mov	r3, r9
 8006382:	460a      	mov	r2, r1
 8006384:	eb42 0303 	adc.w	r3, r2, r3
 8006388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006398:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800639c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063a0:	460b      	mov	r3, r1
 80063a2:	18db      	adds	r3, r3, r3
 80063a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a6:	4613      	mov	r3, r2
 80063a8:	eb42 0303 	adc.w	r3, r2, r3
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063b6:	f7f9 ff7b 	bl	80002b0 <__aeabi_uldivmod>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <UART_SetConfig+0x2d4>)
 80063c0:	fba3 1302 	umull	r1, r3, r3, r2
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	2164      	movs	r1, #100	; 0x64
 80063c8:	fb01 f303 	mul.w	r3, r1, r3
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	3332      	adds	r3, #50	; 0x32
 80063d2:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <UART_SetConfig+0x2d4>)
 80063d4:	fba2 2303 	umull	r2, r3, r2, r3
 80063d8:	095b      	lsrs	r3, r3, #5
 80063da:	f003 0207 	and.w	r2, r3, #7
 80063de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4422      	add	r2, r4
 80063e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063e8:	e106      	b.n	80065f8 <UART_SetConfig+0x4d8>
 80063ea:	bf00      	nop
 80063ec:	40011000 	.word	0x40011000
 80063f0:	40011400 	.word	0x40011400
 80063f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006402:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006406:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800640a:	4642      	mov	r2, r8
 800640c:	464b      	mov	r3, r9
 800640e:	1891      	adds	r1, r2, r2
 8006410:	6239      	str	r1, [r7, #32]
 8006412:	415b      	adcs	r3, r3
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
 8006416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800641a:	4641      	mov	r1, r8
 800641c:	1854      	adds	r4, r2, r1
 800641e:	4649      	mov	r1, r9
 8006420:	eb43 0501 	adc.w	r5, r3, r1
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	00eb      	lsls	r3, r5, #3
 800642e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006432:	00e2      	lsls	r2, r4, #3
 8006434:	4614      	mov	r4, r2
 8006436:	461d      	mov	r5, r3
 8006438:	4643      	mov	r3, r8
 800643a:	18e3      	adds	r3, r4, r3
 800643c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006440:	464b      	mov	r3, r9
 8006442:	eb45 0303 	adc.w	r3, r5, r3
 8006446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006456:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006466:	4629      	mov	r1, r5
 8006468:	008b      	lsls	r3, r1, #2
 800646a:	4621      	mov	r1, r4
 800646c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006470:	4621      	mov	r1, r4
 8006472:	008a      	lsls	r2, r1, #2
 8006474:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006478:	f7f9 ff1a 	bl	80002b0 <__aeabi_uldivmod>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4b60      	ldr	r3, [pc, #384]	; (8006604 <UART_SetConfig+0x4e4>)
 8006482:	fba3 2302 	umull	r2, r3, r3, r2
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	011c      	lsls	r4, r3, #4
 800648a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800648e:	2200      	movs	r2, #0
 8006490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006494:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006498:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800649c:	4642      	mov	r2, r8
 800649e:	464b      	mov	r3, r9
 80064a0:	1891      	adds	r1, r2, r2
 80064a2:	61b9      	str	r1, [r7, #24]
 80064a4:	415b      	adcs	r3, r3
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064ac:	4641      	mov	r1, r8
 80064ae:	1851      	adds	r1, r2, r1
 80064b0:	6139      	str	r1, [r7, #16]
 80064b2:	4649      	mov	r1, r9
 80064b4:	414b      	adcs	r3, r1
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c4:	4659      	mov	r1, fp
 80064c6:	00cb      	lsls	r3, r1, #3
 80064c8:	4651      	mov	r1, sl
 80064ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ce:	4651      	mov	r1, sl
 80064d0:	00ca      	lsls	r2, r1, #3
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	4642      	mov	r2, r8
 80064da:	189b      	adds	r3, r3, r2
 80064dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064e0:	464b      	mov	r3, r9
 80064e2:	460a      	mov	r2, r1
 80064e4:	eb42 0303 	adc.w	r3, r2, r3
 80064e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80064f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006504:	4649      	mov	r1, r9
 8006506:	008b      	lsls	r3, r1, #2
 8006508:	4641      	mov	r1, r8
 800650a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800650e:	4641      	mov	r1, r8
 8006510:	008a      	lsls	r2, r1, #2
 8006512:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006516:	f7f9 fecb 	bl	80002b0 <__aeabi_uldivmod>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4611      	mov	r1, r2
 8006520:	4b38      	ldr	r3, [pc, #224]	; (8006604 <UART_SetConfig+0x4e4>)
 8006522:	fba3 2301 	umull	r2, r3, r3, r1
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	2264      	movs	r2, #100	; 0x64
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	1acb      	subs	r3, r1, r3
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	3332      	adds	r3, #50	; 0x32
 8006534:	4a33      	ldr	r2, [pc, #204]	; (8006604 <UART_SetConfig+0x4e4>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	095b      	lsrs	r3, r3, #5
 800653c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006540:	441c      	add	r4, r3
 8006542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006546:	2200      	movs	r2, #0
 8006548:	673b      	str	r3, [r7, #112]	; 0x70
 800654a:	677a      	str	r2, [r7, #116]	; 0x74
 800654c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006550:	4642      	mov	r2, r8
 8006552:	464b      	mov	r3, r9
 8006554:	1891      	adds	r1, r2, r2
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	415b      	adcs	r3, r3
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006560:	4641      	mov	r1, r8
 8006562:	1851      	adds	r1, r2, r1
 8006564:	6039      	str	r1, [r7, #0]
 8006566:	4649      	mov	r1, r9
 8006568:	414b      	adcs	r3, r1
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006578:	4659      	mov	r1, fp
 800657a:	00cb      	lsls	r3, r1, #3
 800657c:	4651      	mov	r1, sl
 800657e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006582:	4651      	mov	r1, sl
 8006584:	00ca      	lsls	r2, r1, #3
 8006586:	4610      	mov	r0, r2
 8006588:	4619      	mov	r1, r3
 800658a:	4603      	mov	r3, r0
 800658c:	4642      	mov	r2, r8
 800658e:	189b      	adds	r3, r3, r2
 8006590:	66bb      	str	r3, [r7, #104]	; 0x68
 8006592:	464b      	mov	r3, r9
 8006594:	460a      	mov	r2, r1
 8006596:	eb42 0303 	adc.w	r3, r2, r3
 800659a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	663b      	str	r3, [r7, #96]	; 0x60
 80065a6:	667a      	str	r2, [r7, #100]	; 0x64
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065b4:	4649      	mov	r1, r9
 80065b6:	008b      	lsls	r3, r1, #2
 80065b8:	4641      	mov	r1, r8
 80065ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065be:	4641      	mov	r1, r8
 80065c0:	008a      	lsls	r2, r1, #2
 80065c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065c6:	f7f9 fe73 	bl	80002b0 <__aeabi_uldivmod>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <UART_SetConfig+0x4e4>)
 80065d0:	fba3 1302 	umull	r1, r3, r3, r2
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	2164      	movs	r1, #100	; 0x64
 80065d8:	fb01 f303 	mul.w	r3, r1, r3
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	3332      	adds	r3, #50	; 0x32
 80065e2:	4a08      	ldr	r2, [pc, #32]	; (8006604 <UART_SetConfig+0x4e4>)
 80065e4:	fba2 2303 	umull	r2, r3, r2, r3
 80065e8:	095b      	lsrs	r3, r3, #5
 80065ea:	f003 020f 	and.w	r2, r3, #15
 80065ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4422      	add	r2, r4
 80065f6:	609a      	str	r2, [r3, #8]
}
 80065f8:	bf00      	nop
 80065fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065fe:	46bd      	mov	sp, r7
 8006600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006604:	51eb851f 	.word	0x51eb851f

08006608 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <MUX>:
void MUX(struct WIFI *a)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2204      	movs	r2, #4
 8006698:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <IPDef>:
void IPDef(struct WIFI *a)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2205      	movs	r2, #5
 80066c4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2206      	movs	r2, #6
 800671c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2208      	movs	r2, #8
 8006748:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2209      	movs	r2, #9
 8006774:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2207      	movs	r2, #7
 80067a0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694e:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
	...

08006960 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006962:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006966:	af06      	add	r7, sp, #24
 8006968:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800696c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006970:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006978:	2300      	movs	r3, #0
 800697a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800697e:	2300      	movs	r3, #0
 8006980:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006984:	2300      	movs	r3, #0
 8006986:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800698a:	2300      	movs	r3, #0
 800698c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006990:	2320      	movs	r3, #32
 8006992:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006996:	2322      	movs	r3, #34	; 0x22
 8006998:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 800699c:	4b7c      	ldr	r3, [pc, #496]	; (8006b90 <AT_ESP8266_ND+0x230>)
 800699e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 80069a2:	4a7c      	ldr	r2, [pc, #496]	; (8006b94 <AT_ESP8266_ND+0x234>)
 80069a4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	4611      	mov	r1, r2
 80069ac:	8019      	strh	r1, [r3, #0]
 80069ae:	3302      	adds	r3, #2
 80069b0:	0c12      	lsrs	r2, r2, #16
 80069b2:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80069b4:	f642 4322 	movw	r3, #11298	; 0x2c22
 80069b8:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80069bc:	f640 230d 	movw	r3, #2573	; 0xa0d
 80069c0:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80069ca:	2300      	movs	r3, #0
 80069cc:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80069d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80069e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7f9 fc00 	bl	80001f4 <strlen>
 80069f4:	4603      	mov	r3, r0
 80069f6:	461a      	mov	r2, r3
 80069f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006a06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006a16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7f9 fbe5 	bl	80001f4 <strlen>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006a3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2206      	movs	r2, #6
 8006a48:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006a4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006a5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a8a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a8e:	6812      	ldr	r2, [r2, #0]
 8006a90:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a94:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a98:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a9c:	6809      	ldr	r1, [r1, #0]
 8006a9e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006aa2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006aa6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006aaa:	6800      	ldr	r0, [r0, #0]
 8006aac:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9305      	str	r3, [sp, #20]
 8006ab4:	9004      	str	r0, [sp, #16]
 8006ab6:	9103      	str	r1, [sp, #12]
 8006ab8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006abc:	9102      	str	r1, [sp, #8]
 8006abe:	9201      	str	r2, [sp, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4633      	mov	r3, r6
 8006ac6:	4a34      	ldr	r2, [pc, #208]	; (8006b98 <AT_ESP8266_ND+0x238>)
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4620      	mov	r0, r4
 8006acc:	f007 ff8e 	bl	800e9ec <FT_String_ND>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	f040 8140 	bne.w	8006d58 <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006ad8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006adc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2206      	movs	r2, #6
 8006ae4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006ae8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d150      	bne.n	8006b9c <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006afa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006afe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006b08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b38:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b3c:	6812      	ldr	r2, [r2, #0]
 8006b3e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b42:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b46:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b4a:	6809      	ldr	r1, [r1, #0]
 8006b4c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b50:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b54:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b58:	6800      	ldr	r0, [r0, #0]
 8006b5a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006b5e:	2304      	movs	r3, #4
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	9004      	str	r0, [sp, #16]
 8006b64:	9103      	str	r1, [sp, #12]
 8006b66:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b6a:	9102      	str	r1, [sp, #8]
 8006b6c:	9201      	str	r2, [sp, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	4633      	mov	r3, r6
 8006b74:	4a08      	ldr	r2, [pc, #32]	; (8006b98 <AT_ESP8266_ND+0x238>)
 8006b76:	4629      	mov	r1, r5
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f007 ff37 	bl	800e9ec <FT_String_ND>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006b8e:	e04f      	b.n	8006c30 <AT_ESP8266_ND+0x2d0>
 8006b90:	00222c22 	.word	0x00222c22
 8006b94:	08010bd4 	.word	0x08010bd4
 8006b98:	080109fc 	.word	0x080109fc
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006bb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006bda:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006be4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006be8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006bec:	6809      	ldr	r1, [r1, #0]
 8006bee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006bf2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006bf6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006bfa:	6800      	ldr	r0, [r0, #0]
 8006bfc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006c00:	2305      	movs	r3, #5
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	9004      	str	r0, [sp, #16]
 8006c06:	9103      	str	r1, [sp, #12]
 8006c08:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c0c:	9102      	str	r1, [sp, #8]
 8006c0e:	9201      	str	r2, [sp, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	4633      	mov	r3, r6
 8006c16:	4ad2      	ldr	r2, [pc, #840]	; (8006f60 <AT_ESP8266_ND+0x600>)
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f007 fee6 	bl	800e9ec <FT_String_ND>
 8006c20:	4602      	mov	r2, r0
 8006c22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006c30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d15a      	bne.n	8006cf8 <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 8006c42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2263      	movs	r2, #99	; 0x63
 8006c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006c52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c98:	2341      	movs	r3, #65	; 0x41
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f008 fa21 	bl	800f0e4 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006ca2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006cb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006cbe:	2341      	movs	r3, #65	; 0x41
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2205      	movs	r2, #5
 8006cc6:	f008 fa0d 	bl	800f0e4 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006ce8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d126      	bne.n	8006d58 <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 8006d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2237      	movs	r2, #55	; 0x37
 8006d16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006d1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006d2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006d48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2204      	movs	r2, #4
 8006d64:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006d76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006da0:	603b      	str	r3, [r7, #0]
 8006da2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006da6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006db0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006db4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006db8:	6809      	ldr	r1, [r1, #0]
 8006dba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006dbe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006dc2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006dc6:	6800      	ldr	r0, [r0, #0]
 8006dc8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9305      	str	r3, [sp, #20]
 8006dd0:	9004      	str	r0, [sp, #16]
 8006dd2:	9103      	str	r1, [sp, #12]
 8006dd4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006dd8:	9102      	str	r1, [sp, #8]
 8006dda:	9201      	str	r2, [sp, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	4633      	mov	r3, r6
 8006de2:	4a60      	ldr	r2, [pc, #384]	; (8006f64 <AT_ESP8266_ND+0x604>)
 8006de4:	4629      	mov	r1, r5
 8006de6:	4620      	mov	r0, r4
 8006de8:	f007 fe00 	bl	800e9ec <FT_String_ND>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	f040 83b4 	bne.w	800755c <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 8006df4:	2301      	movs	r3, #1
 8006df6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006dfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2206      	movs	r2, #6
 8006e06:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006e0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006e18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006e26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006e34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e48:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e52:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e56:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e5a:	6809      	ldr	r1, [r1, #0]
 8006e5c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e60:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e64:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e68:	6800      	ldr	r0, [r0, #0]
 8006e6a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9305      	str	r3, [sp, #20]
 8006e72:	9004      	str	r0, [sp, #16]
 8006e74:	9103      	str	r1, [sp, #12]
 8006e76:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e7a:	9102      	str	r1, [sp, #8]
 8006e7c:	9201      	str	r2, [sp, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4633      	mov	r3, r6
 8006e84:	4a38      	ldr	r2, [pc, #224]	; (8006f68 <AT_ESP8266_ND+0x608>)
 8006e86:	4629      	mov	r1, r5
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f007 fdaf 	bl	800e9ec <FT_String_ND>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d113      	bne.n	8006ebc <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006e94:	2313      	movs	r3, #19
 8006e96:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006e9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006eb8:	f001 bae1 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2208      	movs	r2, #8
 8006ec8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006ef6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006efa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f04:	603b      	str	r3, [r7, #0]
 8006f06:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f0a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f14:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f18:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f1c:	6809      	ldr	r1, [r1, #0]
 8006f1e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f22:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f26:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f30:	2300      	movs	r3, #0
 8006f32:	9305      	str	r3, [sp, #20]
 8006f34:	9004      	str	r0, [sp, #16]
 8006f36:	9103      	str	r1, [sp, #12]
 8006f38:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f3c:	9102      	str	r1, [sp, #8]
 8006f3e:	9201      	str	r2, [sp, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	4633      	mov	r3, r6
 8006f46:	4a09      	ldr	r2, [pc, #36]	; (8006f6c <AT_ESP8266_ND+0x60c>)
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f007 fd4e 	bl	800e9ec <FT_String_ND>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d10c      	bne.n	8006f70 <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8006f56:	230d      	movs	r3, #13
 8006f58:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f5c:	f001 ba8f 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
 8006f60:	080109fc 	.word	0x080109fc
 8006f64:	08010a04 	.word	0x08010a04
 8006f68:	08010a0c 	.word	0x08010a0c
 8006f6c:	08010a14 	.word	0x08010a14
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	220a      	movs	r2, #10
 8006f7c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006faa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006fb8:	603b      	str	r3, [r7, #0]
 8006fba:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fbe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006fc8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fcc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fd0:	6809      	ldr	r1, [r1, #0]
 8006fd2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006fd6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006fda:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006fde:	6800      	ldr	r0, [r0, #0]
 8006fe0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	9305      	str	r3, [sp, #20]
 8006fe8:	9004      	str	r0, [sp, #16]
 8006fea:	9103      	str	r1, [sp, #12]
 8006fec:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ff0:	9102      	str	r1, [sp, #8]
 8006ff2:	9201      	str	r2, [sp, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	4633      	mov	r3, r6
 8006ffa:	4aaa      	ldr	r2, [pc, #680]	; (80072a4 <AT_ESP8266_ND+0x944>)
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	4620      	mov	r0, r4
 8007000:	f007 fcf4 	bl	800e9ec <FT_String_ND>
 8007004:	4603      	mov	r3, r0
 8007006:	2b01      	cmp	r3, #1
 8007008:	d104      	bne.n	8007014 <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 800700a:	231c      	movs	r3, #28
 800700c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007010:	f001 ba35 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8007014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	220f      	movs	r2, #15
 8007020:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007028:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007032:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007036:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007044:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800704e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007052:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800705c:	603b      	str	r3, [r7, #0]
 800705e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007062:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800706c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007070:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007074:	6809      	ldr	r1, [r1, #0]
 8007076:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800707a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800707e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007082:	6800      	ldr	r0, [r0, #0]
 8007084:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007088:	2300      	movs	r3, #0
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	9004      	str	r0, [sp, #16]
 800708e:	9103      	str	r1, [sp, #12]
 8007090:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007094:	9102      	str	r1, [sp, #8]
 8007096:	9201      	str	r2, [sp, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4633      	mov	r3, r6
 800709e:	4a82      	ldr	r2, [pc, #520]	; (80072a8 <AT_ESP8266_ND+0x948>)
 80070a0:	4629      	mov	r1, r5
 80070a2:	4620      	mov	r0, r4
 80070a4:	f007 fca2 	bl	800e9ec <FT_String_ND>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d104      	bne.n	80070b8 <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 80070ae:	2317      	movs	r3, #23
 80070b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070b4:	f001 b9e3 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 80070b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2203      	movs	r2, #3
 80070c4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80070c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80070d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80070e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80070f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007106:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007110:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007114:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007118:	6809      	ldr	r1, [r1, #0]
 800711a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800711e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007122:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007126:	6800      	ldr	r0, [r0, #0]
 8007128:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800712c:	2300      	movs	r3, #0
 800712e:	9305      	str	r3, [sp, #20]
 8007130:	9004      	str	r0, [sp, #16]
 8007132:	9103      	str	r1, [sp, #12]
 8007134:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007138:	9102      	str	r1, [sp, #8]
 800713a:	9201      	str	r2, [sp, #4]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	4633      	mov	r3, r6
 8007142:	4a5a      	ldr	r2, [pc, #360]	; (80072ac <AT_ESP8266_ND+0x94c>)
 8007144:	4629      	mov	r1, r5
 8007146:	4620      	mov	r0, r4
 8007148:	f007 fc50 	bl	800e9ec <FT_String_ND>
 800714c:	4603      	mov	r3, r0
 800714e:	2b01      	cmp	r3, #1
 8007150:	d104      	bne.n	800715c <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 8007152:	2314      	movs	r3, #20
 8007154:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007158:	f001 b991 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 800715c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	220c      	movs	r2, #12
 8007168:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800716c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007170:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800717a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800717e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800718c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007196:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800719a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071aa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071bc:	6809      	ldr	r1, [r1, #0]
 80071be:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071c2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80071c6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80071ca:	6800      	ldr	r0, [r0, #0]
 80071cc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80071d0:	2300      	movs	r3, #0
 80071d2:	9305      	str	r3, [sp, #20]
 80071d4:	9004      	str	r0, [sp, #16]
 80071d6:	9103      	str	r1, [sp, #12]
 80071d8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071dc:	9102      	str	r1, [sp, #8]
 80071de:	9201      	str	r2, [sp, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	4633      	mov	r3, r6
 80071e6:	4a32      	ldr	r2, [pc, #200]	; (80072b0 <AT_ESP8266_ND+0x950>)
 80071e8:	4629      	mov	r1, r5
 80071ea:	4620      	mov	r0, r4
 80071ec:	f007 fbfe 	bl	800e9ec <FT_String_ND>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d104      	bne.n	8007200 <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 80071f6:	2315      	movs	r3, #21
 80071f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071fc:	f001 b93f 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007200:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007204:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	220b      	movs	r2, #11
 800720c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007210:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007214:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800721e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007222:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800722c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007230:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800723a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800723e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800724e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007252:	6812      	ldr	r2, [r2, #0]
 8007254:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007258:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800725c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007260:	6809      	ldr	r1, [r1, #0]
 8007262:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007266:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800726a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800726e:	6800      	ldr	r0, [r0, #0]
 8007270:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007274:	2300      	movs	r3, #0
 8007276:	9305      	str	r3, [sp, #20]
 8007278:	9004      	str	r0, [sp, #16]
 800727a:	9103      	str	r1, [sp, #12]
 800727c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007280:	9102      	str	r1, [sp, #8]
 8007282:	9201      	str	r2, [sp, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	4633      	mov	r3, r6
 800728a:	4a0a      	ldr	r2, [pc, #40]	; (80072b4 <AT_ESP8266_ND+0x954>)
 800728c:	4629      	mov	r1, r5
 800728e:	4620      	mov	r0, r4
 8007290:	f007 fbac 	bl	800e9ec <FT_String_ND>
 8007294:	4603      	mov	r3, r0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10e      	bne.n	80072b8 <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 800729a:	2309      	movs	r3, #9
 800729c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072a0:	f001 b8ed 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
 80072a4:	08010a20 	.word	0x08010a20
 80072a8:	08010a2c 	.word	0x08010a2c
 80072ac:	08010a3c 	.word	0x08010a3c
 80072b0:	08010a40 	.word	0x08010a40
 80072b4:	08010a50 	.word	0x08010a50
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80072b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	220b      	movs	r2, #11
 80072c4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80072c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80072d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80072e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80072f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007300:	603b      	str	r3, [r7, #0]
 8007302:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007306:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800730a:	6812      	ldr	r2, [r2, #0]
 800730c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007310:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007314:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007318:	6809      	ldr	r1, [r1, #0]
 800731a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800731e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007322:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007326:	6800      	ldr	r0, [r0, #0]
 8007328:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800732c:	2300      	movs	r3, #0
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	9004      	str	r0, [sp, #16]
 8007332:	9103      	str	r1, [sp, #12]
 8007334:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007338:	9102      	str	r1, [sp, #8]
 800733a:	9201      	str	r2, [sp, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	4633      	mov	r3, r6
 8007342:	4a82      	ldr	r2, [pc, #520]	; (800754c <AT_ESP8266_ND+0xbec>)
 8007344:	4629      	mov	r1, r5
 8007346:	4620      	mov	r0, r4
 8007348:	f007 fb50 	bl	800e9ec <FT_String_ND>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d104      	bne.n	800735c <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 8007352:	2307      	movs	r3, #7
 8007354:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007358:	f001 b891 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 800735c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	220b      	movs	r2, #11
 8007368:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800736c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800737a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073aa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073bc:	6809      	ldr	r1, [r1, #0]
 80073be:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073c2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80073c6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80073d0:	2300      	movs	r3, #0
 80073d2:	9305      	str	r3, [sp, #20]
 80073d4:	9004      	str	r0, [sp, #16]
 80073d6:	9103      	str	r1, [sp, #12]
 80073d8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073dc:	9102      	str	r1, [sp, #8]
 80073de:	9201      	str	r2, [sp, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4633      	mov	r3, r6
 80073e6:	4a5a      	ldr	r2, [pc, #360]	; (8007550 <AT_ESP8266_ND+0xbf0>)
 80073e8:	4629      	mov	r1, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	f007 fafe 	bl	800e9ec <FT_String_ND>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d104      	bne.n	8007400 <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 80073f6:	2308      	movs	r3, #8
 80073f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073fc:	f001 b83f 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8007400:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007404:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	220a      	movs	r2, #10
 800740c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007414:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800741e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007422:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800742c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007430:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800743a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800743e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800744e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007452:	6812      	ldr	r2, [r2, #0]
 8007454:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007458:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800745c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007460:	6809      	ldr	r1, [r1, #0]
 8007462:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007466:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800746a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800746e:	6800      	ldr	r0, [r0, #0]
 8007470:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007474:	2300      	movs	r3, #0
 8007476:	9305      	str	r3, [sp, #20]
 8007478:	9004      	str	r0, [sp, #16]
 800747a:	9103      	str	r1, [sp, #12]
 800747c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007480:	9102      	str	r1, [sp, #8]
 8007482:	9201      	str	r2, [sp, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	4633      	mov	r3, r6
 800748a:	4a32      	ldr	r2, [pc, #200]	; (8007554 <AT_ESP8266_ND+0xbf4>)
 800748c:	4629      	mov	r1, r5
 800748e:	4620      	mov	r0, r4
 8007490:	f007 faac 	bl	800e9ec <FT_String_ND>
 8007494:	4603      	mov	r3, r0
 8007496:	2b01      	cmp	r3, #1
 8007498:	d104      	bne.n	80074a4 <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 800749a:	231b      	movs	r3, #27
 800749c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074a0:	f000 bfed 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 80074a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2207      	movs	r2, #7
 80074b0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80074b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80074c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80074d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80074de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074f2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074fc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007500:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007504:	6809      	ldr	r1, [r1, #0]
 8007506:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800750a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800750e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007512:	6800      	ldr	r0, [r0, #0]
 8007514:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007518:	2300      	movs	r3, #0
 800751a:	9305      	str	r3, [sp, #20]
 800751c:	9004      	str	r0, [sp, #16]
 800751e:	9103      	str	r1, [sp, #12]
 8007520:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007524:	9102      	str	r1, [sp, #8]
 8007526:	9201      	str	r2, [sp, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	4633      	mov	r3, r6
 800752e:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <AT_ESP8266_ND+0xbf8>)
 8007530:	4629      	mov	r1, r5
 8007532:	4620      	mov	r0, r4
 8007534:	f007 fa5a 	bl	800e9ec <FT_String_ND>
 8007538:	4603      	mov	r3, r0
 800753a:	2b01      	cmp	r3, #1
 800753c:	f040 879f 	bne.w	800847e <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 8007540:	230f      	movs	r3, #15
 8007542:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007546:	f000 bf9a 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
 800754a:	bf00      	nop
 800754c:	08010a5c 	.word	0x08010a5c
 8007550:	08010a68 	.word	0x08010a68
 8007554:	08010a74 	.word	0x08010a74
 8007558:	08010a80 	.word	0x08010a80
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 800755c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007560:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2207      	movs	r2, #7
 8007568:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800756c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800757a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800757e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007588:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800758c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007596:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800759a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075aa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075bc:	6809      	ldr	r1, [r1, #0]
 80075be:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075c2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80075c6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80075ca:	6800      	ldr	r0, [r0, #0]
 80075cc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80075d0:	2300      	movs	r3, #0
 80075d2:	9305      	str	r3, [sp, #20]
 80075d4:	9004      	str	r0, [sp, #16]
 80075d6:	9103      	str	r1, [sp, #12]
 80075d8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075dc:	9102      	str	r1, [sp, #8]
 80075de:	9201      	str	r2, [sp, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	4633      	mov	r3, r6
 80075e6:	4aaa      	ldr	r2, [pc, #680]	; (8007890 <AT_ESP8266_ND+0xf30>)
 80075e8:	4629      	mov	r1, r5
 80075ea:	4620      	mov	r0, r4
 80075ec:	f007 f9fe 	bl	800e9ec <FT_String_ND>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	f040 839d 	bne.w	8007d32 <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 80075f8:	2302      	movs	r3, #2
 80075fa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 80075fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007602:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2208      	movs	r2, #8
 800760a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 800760e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007612:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800761c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007620:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800762a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800762e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007638:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800763c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800764c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007650:	6812      	ldr	r2, [r2, #0]
 8007652:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007656:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800765a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800765e:	6809      	ldr	r1, [r1, #0]
 8007660:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007664:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007668:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800766c:	6800      	ldr	r0, [r0, #0]
 800766e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007672:	2300      	movs	r3, #0
 8007674:	9305      	str	r3, [sp, #20]
 8007676:	9004      	str	r0, [sp, #16]
 8007678:	9103      	str	r1, [sp, #12]
 800767a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800767e:	9102      	str	r1, [sp, #8]
 8007680:	9201      	str	r2, [sp, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4633      	mov	r3, r6
 8007688:	4a82      	ldr	r2, [pc, #520]	; (8007894 <AT_ESP8266_ND+0xf34>)
 800768a:	4629      	mov	r1, r5
 800768c:	4620      	mov	r0, r4
 800768e:	f007 f9ad 	bl	800e9ec <FT_String_ND>
 8007692:	4603      	mov	r3, r0
 8007694:	2b01      	cmp	r3, #1
 8007696:	d104      	bne.n	80076a2 <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 8007698:	2306      	movs	r3, #6
 800769a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800769e:	f000 beee 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80076a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2215      	movs	r2, #21
 80076ae:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80076b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80076c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80076ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80076dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076f0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076fa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076fe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007702:	6809      	ldr	r1, [r1, #0]
 8007704:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007708:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800770c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007710:	6800      	ldr	r0, [r0, #0]
 8007712:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007716:	2300      	movs	r3, #0
 8007718:	9305      	str	r3, [sp, #20]
 800771a:	9004      	str	r0, [sp, #16]
 800771c:	9103      	str	r1, [sp, #12]
 800771e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007722:	9102      	str	r1, [sp, #8]
 8007724:	9201      	str	r2, [sp, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	4633      	mov	r3, r6
 800772c:	4a5a      	ldr	r2, [pc, #360]	; (8007898 <AT_ESP8266_ND+0xf38>)
 800772e:	4629      	mov	r1, r5
 8007730:	4620      	mov	r0, r4
 8007732:	f007 f95b 	bl	800e9ec <FT_String_ND>
 8007736:	4603      	mov	r3, r0
 8007738:	2b01      	cmp	r3, #1
 800773a:	d104      	bne.n	8007746 <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 800773c:	230e      	movs	r3, #14
 800773e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007742:	f000 be9c 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800774a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	220c      	movs	r2, #12
 8007752:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007756:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800775a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007764:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007768:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007772:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007776:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007780:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007784:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007794:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007798:	6812      	ldr	r2, [r2, #0]
 800779a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800779e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077a2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077a6:	6809      	ldr	r1, [r1, #0]
 80077a8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077ac:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80077b0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80077b4:	6800      	ldr	r0, [r0, #0]
 80077b6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80077ba:	2300      	movs	r3, #0
 80077bc:	9305      	str	r3, [sp, #20]
 80077be:	9004      	str	r0, [sp, #16]
 80077c0:	9103      	str	r1, [sp, #12]
 80077c2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077c6:	9102      	str	r1, [sp, #8]
 80077c8:	9201      	str	r2, [sp, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	4633      	mov	r3, r6
 80077d0:	4a32      	ldr	r2, [pc, #200]	; (800789c <AT_ESP8266_ND+0xf3c>)
 80077d2:	4629      	mov	r1, r5
 80077d4:	4620      	mov	r0, r4
 80077d6:	f007 f909 	bl	800e9ec <FT_String_ND>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d104      	bne.n	80077ea <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 80077e0:	2316      	movs	r3, #22
 80077e2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077e6:	f000 be4a 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 80077ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	220b      	movs	r2, #11
 80077f6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80077fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800780c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007816:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800781a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007824:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007828:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007838:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007842:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007846:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800784a:	6809      	ldr	r1, [r1, #0]
 800784c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007850:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007854:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007858:	6800      	ldr	r0, [r0, #0]
 800785a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800785e:	2300      	movs	r3, #0
 8007860:	9305      	str	r3, [sp, #20]
 8007862:	9004      	str	r0, [sp, #16]
 8007864:	9103      	str	r1, [sp, #12]
 8007866:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800786a:	9102      	str	r1, [sp, #8]
 800786c:	9201      	str	r2, [sp, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	4633      	mov	r3, r6
 8007874:	4a0a      	ldr	r2, [pc, #40]	; (80078a0 <AT_ESP8266_ND+0xf40>)
 8007876:	4629      	mov	r1, r5
 8007878:	4620      	mov	r0, r4
 800787a:	f007 f8b7 	bl	800e9ec <FT_String_ND>
 800787e:	4603      	mov	r3, r0
 8007880:	2b01      	cmp	r3, #1
 8007882:	d10f      	bne.n	80078a4 <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 8007884:	231a      	movs	r3, #26
 8007886:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800788a:	f000 bdf8 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
 800788e:	bf00      	nop
 8007890:	08010a88 	.word	0x08010a88
 8007894:	08010a90 	.word	0x08010a90
 8007898:	08010a9c 	.word	0x08010a9c
 800789c:	08010a40 	.word	0x08010a40
 80078a0:	08010a50 	.word	0x08010a50
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80078a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2211      	movs	r2, #17
 80078b0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80078b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80078c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80078d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80078de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078f2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078f6:	6812      	ldr	r2, [r2, #0]
 80078f8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078fc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007900:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007904:	6809      	ldr	r1, [r1, #0]
 8007906:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800790a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800790e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007912:	6800      	ldr	r0, [r0, #0]
 8007914:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007918:	2300      	movs	r3, #0
 800791a:	9305      	str	r3, [sp, #20]
 800791c:	9004      	str	r0, [sp, #16]
 800791e:	9103      	str	r1, [sp, #12]
 8007920:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007924:	9102      	str	r1, [sp, #8]
 8007926:	9201      	str	r2, [sp, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	4633      	mov	r3, r6
 800792e:	4aaa      	ldr	r2, [pc, #680]	; (8007bd8 <AT_ESP8266_ND+0x1278>)
 8007930:	4629      	mov	r1, r5
 8007932:	4620      	mov	r0, r4
 8007934:	f007 f85a 	bl	800e9ec <FT_String_ND>
 8007938:	4603      	mov	r3, r0
 800793a:	2b01      	cmp	r3, #1
 800793c:	d104      	bne.n	8007948 <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 800793e:	2311      	movs	r3, #17
 8007940:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007944:	f000 bd9b 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8007948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800794c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	220a      	movs	r2, #10
 8007954:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800795c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007966:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800796a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007974:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007978:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007982:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007986:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007996:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800799a:	6812      	ldr	r2, [r2, #0]
 800799c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079a0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079a4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079a8:	6809      	ldr	r1, [r1, #0]
 80079aa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079ae:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80079b2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80079b6:	6800      	ldr	r0, [r0, #0]
 80079b8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80079bc:	2300      	movs	r3, #0
 80079be:	9305      	str	r3, [sp, #20]
 80079c0:	9004      	str	r0, [sp, #16]
 80079c2:	9103      	str	r1, [sp, #12]
 80079c4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079c8:	9102      	str	r1, [sp, #8]
 80079ca:	9201      	str	r2, [sp, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	4633      	mov	r3, r6
 80079d2:	4a82      	ldr	r2, [pc, #520]	; (8007bdc <AT_ESP8266_ND+0x127c>)
 80079d4:	4629      	mov	r1, r5
 80079d6:	4620      	mov	r0, r4
 80079d8:	f007 f808 	bl	800e9ec <FT_String_ND>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d104      	bne.n	80079ec <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 80079e2:	231d      	movs	r3, #29
 80079e4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079e8:	f000 bd49 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 80079ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	220b      	movs	r2, #11
 80079f8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80079fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a3a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a44:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a48:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a4c:	6809      	ldr	r1, [r1, #0]
 8007a4e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a52:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a56:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a5a:	6800      	ldr	r0, [r0, #0]
 8007a5c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007a60:	2300      	movs	r3, #0
 8007a62:	9305      	str	r3, [sp, #20]
 8007a64:	9004      	str	r0, [sp, #16]
 8007a66:	9103      	str	r1, [sp, #12]
 8007a68:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a6c:	9102      	str	r1, [sp, #8]
 8007a6e:	9201      	str	r2, [sp, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4633      	mov	r3, r6
 8007a76:	4a5a      	ldr	r2, [pc, #360]	; (8007be0 <AT_ESP8266_ND+0x1280>)
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f006 ffb6 	bl	800e9ec <FT_String_ND>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d104      	bne.n	8007a90 <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 8007a86:	231e      	movs	r3, #30
 8007a88:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a8c:	f000 bcf7 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	220b      	movs	r2, #11
 8007a9c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007aa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007aae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ab2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007aca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ace:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ad8:	603b      	str	r3, [r7, #0]
 8007ada:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ade:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ae8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007aec:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007af0:	6809      	ldr	r1, [r1, #0]
 8007af2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007af6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007afa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007afe:	6800      	ldr	r0, [r0, #0]
 8007b00:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b04:	2300      	movs	r3, #0
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	9004      	str	r0, [sp, #16]
 8007b0a:	9103      	str	r1, [sp, #12]
 8007b0c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b10:	9102      	str	r1, [sp, #8]
 8007b12:	9201      	str	r2, [sp, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4633      	mov	r3, r6
 8007b1a:	4a32      	ldr	r2, [pc, #200]	; (8007be4 <AT_ESP8266_ND+0x1284>)
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f006 ff64 	bl	800e9ec <FT_String_ND>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d104      	bne.n	8007b34 <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 8007b2a:	231f      	movs	r3, #31
 8007b2c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b30:	f000 bca5 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2208      	movs	r2, #8
 8007b40:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007b52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007b60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007b6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b82:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b86:	6812      	ldr	r2, [r2, #0]
 8007b88:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b8c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b90:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b94:	6809      	ldr	r1, [r1, #0]
 8007b96:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b9a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b9e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ba2:	6800      	ldr	r0, [r0, #0]
 8007ba4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9305      	str	r3, [sp, #20]
 8007bac:	9004      	str	r0, [sp, #16]
 8007bae:	9103      	str	r1, [sp, #12]
 8007bb0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bb4:	9102      	str	r1, [sp, #8]
 8007bb6:	9201      	str	r2, [sp, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	4633      	mov	r3, r6
 8007bbe:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <AT_ESP8266_ND+0x1288>)
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f006 ff12 	bl	800e9ec <FT_String_ND>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d10e      	bne.n	8007bec <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 8007bce:	2320      	movs	r3, #32
 8007bd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007bd4:	f000 bc53 	b.w	800847e <AT_ESP8266_ND+0x1b1e>
 8007bd8:	08010ab4 	.word	0x08010ab4
 8007bdc:	08010a20 	.word	0x08010a20
 8007be0:	08010a5c 	.word	0x08010a5c
 8007be4:	08010a68 	.word	0x08010a68
 8007be8:	08010ac8 	.word	0x08010ac8
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	220a      	movs	r2, #10
 8007bf8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007c0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007c18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c3a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c44:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c48:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c4c:	6809      	ldr	r1, [r1, #0]
 8007c4e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c52:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c56:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007c60:	2300      	movs	r3, #0
 8007c62:	9305      	str	r3, [sp, #20]
 8007c64:	9004      	str	r0, [sp, #16]
 8007c66:	9103      	str	r1, [sp, #12]
 8007c68:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c6c:	9102      	str	r1, [sp, #8]
 8007c6e:	9201      	str	r2, [sp, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	4633      	mov	r3, r6
 8007c76:	4ab7      	ldr	r2, [pc, #732]	; (8007f54 <AT_ESP8266_ND+0x15f4>)
 8007c78:	4629      	mov	r1, r5
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f006 feb6 	bl	800e9ec <FT_String_ND>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d103      	bne.n	8007c8e <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 8007c86:	2321      	movs	r3, #33	; 0x21
 8007c88:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c8c:	e3f7      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007c8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2205      	movs	r2, #5
 8007c9a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007cac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007cc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ccc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007cdc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ce0:	6812      	ldr	r2, [r2, #0]
 8007ce2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ce6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cee:	6809      	ldr	r1, [r1, #0]
 8007cf0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007cf4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007cf8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007cfc:	6800      	ldr	r0, [r0, #0]
 8007cfe:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007d02:	2300      	movs	r3, #0
 8007d04:	9305      	str	r3, [sp, #20]
 8007d06:	9004      	str	r0, [sp, #16]
 8007d08:	9103      	str	r1, [sp, #12]
 8007d0a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d0e:	9102      	str	r1, [sp, #8]
 8007d10:	9201      	str	r2, [sp, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	4633      	mov	r3, r6
 8007d18:	4a8f      	ldr	r2, [pc, #572]	; (8007f58 <AT_ESP8266_ND+0x15f8>)
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f006 fe65 	bl	800e9ec <FT_String_ND>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	f040 83aa 	bne.w	800847e <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007d2a:	2322      	movs	r3, #34	; 0x22
 8007d2c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d30:	e3a5      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007d32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	220f      	movs	r2, #15
 8007d3e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007d42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007d50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d80:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d84:	6812      	ldr	r2, [r2, #0]
 8007d86:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d8a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d8e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d92:	6809      	ldr	r1, [r1, #0]
 8007d94:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d98:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d9c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007da0:	6800      	ldr	r0, [r0, #0]
 8007da2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007da6:	2300      	movs	r3, #0
 8007da8:	9305      	str	r3, [sp, #20]
 8007daa:	9004      	str	r0, [sp, #16]
 8007dac:	9103      	str	r1, [sp, #12]
 8007dae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007db2:	9102      	str	r1, [sp, #8]
 8007db4:	9201      	str	r2, [sp, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4633      	mov	r3, r6
 8007dbc:	4a67      	ldr	r2, [pc, #412]	; (8007f5c <AT_ESP8266_ND+0x15fc>)
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f006 fe13 	bl	800e9ec <FT_String_ND>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d112      	bne.n	8007df2 <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 8007dcc:	230a      	movs	r3, #10
 8007dce:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007dd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007df0:	e345      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007df2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2209      	movs	r2, #9
 8007dfe:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007e2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e40:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e44:	6812      	ldr	r2, [r2, #0]
 8007e46:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e4a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e4e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e52:	6809      	ldr	r1, [r1, #0]
 8007e54:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e58:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007e5c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e60:	6800      	ldr	r0, [r0, #0]
 8007e62:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007e66:	2300      	movs	r3, #0
 8007e68:	9305      	str	r3, [sp, #20]
 8007e6a:	9004      	str	r0, [sp, #16]
 8007e6c:	9103      	str	r1, [sp, #12]
 8007e6e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e72:	9102      	str	r1, [sp, #8]
 8007e74:	9201      	str	r2, [sp, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	4633      	mov	r3, r6
 8007e7c:	4a38      	ldr	r2, [pc, #224]	; (8007f60 <AT_ESP8266_ND+0x1600>)
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4620      	mov	r0, r4
 8007e82:	f006 fdb3 	bl	800e9ec <FT_String_ND>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d112      	bne.n	8007eb2 <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 8007e8c:	2319      	movs	r3, #25
 8007e8e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007e92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007eb0:	e2e5      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2208      	movs	r2, #8
 8007ebe:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007ec2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ec6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007ed0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007ede:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007eec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007efa:	603b      	str	r3, [r7, #0]
 8007efc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f00:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f04:	6812      	ldr	r2, [r2, #0]
 8007f06:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f0a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f0e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f12:	6809      	ldr	r1, [r1, #0]
 8007f14:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f18:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f1c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f20:	6800      	ldr	r0, [r0, #0]
 8007f22:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f26:	2300      	movs	r3, #0
 8007f28:	9305      	str	r3, [sp, #20]
 8007f2a:	9004      	str	r0, [sp, #16]
 8007f2c:	9103      	str	r1, [sp, #12]
 8007f2e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f32:	9102      	str	r1, [sp, #8]
 8007f34:	9201      	str	r2, [sp, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4633      	mov	r3, r6
 8007f3c:	4a09      	ldr	r2, [pc, #36]	; (8007f64 <AT_ESP8266_ND+0x1604>)
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4620      	mov	r0, r4
 8007f42:	f006 fd53 	bl	800e9ec <FT_String_ND>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d10d      	bne.n	8007f68 <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f52:	e294      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
 8007f54:	08010a74 	.word	0x08010a74
 8007f58:	08010ad4 	.word	0x08010ad4
 8007f5c:	08010adc 	.word	0x08010adc
 8007f60:	08010aec 	.word	0x08010aec
 8007f64:	08010a90 	.word	0x08010a90
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007f68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007f76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007f84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f203 4694 	addw	r6, r3, #1172	; 0x494
 8007f92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 8007fa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007fb4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007fb8:	6812      	ldr	r2, [r2, #0]
 8007fba:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007fbe:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007fc2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fc6:	6809      	ldr	r1, [r1, #0]
 8007fc8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007fcc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007fd0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007fd4:	6800      	ldr	r0, [r0, #0]
 8007fd6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	9004      	str	r0, [sp, #16]
 8007fe0:	9103      	str	r1, [sp, #12]
 8007fe2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007fe6:	9102      	str	r1, [sp, #8]
 8007fe8:	9201      	str	r2, [sp, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	4663      	mov	r3, ip
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f006 fcf9 	bl	800e9ec <FT_String_ND>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d112      	bne.n	8008026 <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8008000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8235 	beq.w	800847e <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8008014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8008024:	e22b      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8008026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800802a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	220d      	movs	r2, #13
 8008032:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8008036:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800803a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008044:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008048:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008052:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008056:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008060:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008064:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008074:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008078:	6812      	ldr	r2, [r2, #0]
 800807a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800807e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008082:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008086:	6809      	ldr	r1, [r1, #0]
 8008088:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800808c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008090:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008094:	6800      	ldr	r0, [r0, #0]
 8008096:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800809a:	2300      	movs	r3, #0
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	9004      	str	r0, [sp, #16]
 80080a0:	9103      	str	r1, [sp, #12]
 80080a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80080a6:	9102      	str	r1, [sp, #8]
 80080a8:	9201      	str	r2, [sp, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	4633      	mov	r3, r6
 80080b0:	4ac5      	ldr	r2, [pc, #788]	; (80083c8 <AT_ESP8266_ND+0x1a68>)
 80080b2:	4629      	mov	r1, r5
 80080b4:	4620      	mov	r0, r4
 80080b6:	f006 fc99 	bl	800e9ec <FT_String_ND>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d112      	bne.n	80080e6 <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 80080c0:	2312      	movs	r3, #18
 80080c2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 80080c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 80080e4:	e1cb      	b.n	800847e <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 80080e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	220d      	movs	r2, #13
 80080f2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 80080f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008112:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008116:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008124:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008134:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008138:	6812      	ldr	r2, [r2, #0]
 800813a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800813e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008142:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008146:	6809      	ldr	r1, [r1, #0]
 8008148:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800814c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008150:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008154:	6800      	ldr	r0, [r0, #0]
 8008156:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800815a:	2300      	movs	r3, #0
 800815c:	9305      	str	r3, [sp, #20]
 800815e:	9004      	str	r0, [sp, #16]
 8008160:	9103      	str	r1, [sp, #12]
 8008162:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008166:	9102      	str	r1, [sp, #8]
 8008168:	9201      	str	r2, [sp, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	4633      	mov	r3, r6
 8008170:	4a96      	ldr	r2, [pc, #600]	; (80083cc <AT_ESP8266_ND+0x1a6c>)
 8008172:	4629      	mov	r1, r5
 8008174:	4620      	mov	r0, r4
 8008176:	f006 fc39 	bl	800e9ec <FT_String_ND>
 800817a:	4603      	mov	r3, r0
 800817c:	2b01      	cmp	r3, #1
 800817e:	d112      	bne.n	80081a6 <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 8008180:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008184:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008194:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 800819e:	230c      	movs	r3, #12
 80081a0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80081a4:	e16b      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 80081a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	220e      	movs	r2, #14
 80081b2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 80081b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80081c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80081d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80081e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80081f4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80081fe:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008202:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008206:	6809      	ldr	r1, [r1, #0]
 8008208:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800820c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008210:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008214:	6800      	ldr	r0, [r0, #0]
 8008216:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800821a:	2300      	movs	r3, #0
 800821c:	9305      	str	r3, [sp, #20]
 800821e:	9004      	str	r0, [sp, #16]
 8008220:	9103      	str	r1, [sp, #12]
 8008222:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008226:	9102      	str	r1, [sp, #8]
 8008228:	9201      	str	r2, [sp, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	4633      	mov	r3, r6
 8008230:	4a67      	ldr	r2, [pc, #412]	; (80083d0 <AT_ESP8266_ND+0x1a70>)
 8008232:	4629      	mov	r1, r5
 8008234:	4620      	mov	r0, r4
 8008236:	f006 fbd9 	bl	800e9ec <FT_String_ND>
 800823a:	4603      	mov	r3, r0
 800823c:	2b01      	cmp	r3, #1
 800823e:	d112      	bne.n	8008266 <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 8008240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 800825e:	230b      	movs	r3, #11
 8008260:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008264:	e10b      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8008266:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800826a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	220a      	movs	r2, #10
 8008272:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008276:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800827a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80082a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80082b4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80082be:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80082c2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80082c6:	6809      	ldr	r1, [r1, #0]
 80082c8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80082cc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80082d0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80082d4:	6800      	ldr	r0, [r0, #0]
 80082d6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80082da:	2300      	movs	r3, #0
 80082dc:	9305      	str	r3, [sp, #20]
 80082de:	9004      	str	r0, [sp, #16]
 80082e0:	9103      	str	r1, [sp, #12]
 80082e2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80082e6:	9102      	str	r1, [sp, #8]
 80082e8:	9201      	str	r2, [sp, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4633      	mov	r3, r6
 80082f0:	4a38      	ldr	r2, [pc, #224]	; (80083d4 <AT_ESP8266_ND+0x1a74>)
 80082f2:	4629      	mov	r1, r5
 80082f4:	4620      	mov	r0, r4
 80082f6:	f006 fb79 	bl	800e9ec <FT_String_ND>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d112      	bne.n	8008326 <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 8008300:	2318      	movs	r3, #24
 8008302:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8008306:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800830a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8008324:	e0ab      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008326:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800832a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2208      	movs	r2, #8
 8008332:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800833a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008344:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008348:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008360:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008364:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008374:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008378:	6812      	ldr	r2, [r2, #0]
 800837a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800837e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008382:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008386:	6809      	ldr	r1, [r1, #0]
 8008388:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800838c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008390:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008394:	6800      	ldr	r0, [r0, #0]
 8008396:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800839a:	2300      	movs	r3, #0
 800839c:	9305      	str	r3, [sp, #20]
 800839e:	9004      	str	r0, [sp, #16]
 80083a0:	9103      	str	r1, [sp, #12]
 80083a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80083a6:	9102      	str	r1, [sp, #8]
 80083a8:	9201      	str	r2, [sp, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	4633      	mov	r3, r6
 80083b0:	4a09      	ldr	r2, [pc, #36]	; (80083d8 <AT_ESP8266_ND+0x1a78>)
 80083b2:	4629      	mov	r1, r5
 80083b4:	4620      	mov	r0, r4
 80083b6:	f006 fb19 	bl	800e9ec <FT_String_ND>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d10d      	bne.n	80083dc <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 80083c0:	2303      	movs	r3, #3
 80083c2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80083c6:	e05a      	b.n	800847e <AT_ESP8266_ND+0x1b1e>
 80083c8:	08010af8 	.word	0x08010af8
 80083cc:	08010b08 	.word	0x08010b08
 80083d0:	08010b18 	.word	0x08010b18
 80083d4:	08010b28 	.word	0x08010b28
 80083d8:	08010b34 	.word	0x08010b34
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 80083dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2209      	movs	r2, #9
 80083e8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80083ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80083fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800840c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008416:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008424:	603b      	str	r3, [r7, #0]
 8008426:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800842a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008434:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008438:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800843c:	6809      	ldr	r1, [r1, #0]
 800843e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008442:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008446:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800844a:	6800      	ldr	r0, [r0, #0]
 800844c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008450:	2300      	movs	r3, #0
 8008452:	9305      	str	r3, [sp, #20]
 8008454:	9004      	str	r0, [sp, #16]
 8008456:	9103      	str	r1, [sp, #12]
 8008458:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800845c:	9102      	str	r1, [sp, #8]
 800845e:	9201      	str	r2, [sp, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	4633      	mov	r3, r6
 8008466:	4a78      	ldr	r2, [pc, #480]	; (8008648 <AT_ESP8266_ND+0x1ce8>)
 8008468:	4629      	mov	r1, r5
 800846a:	4620      	mov	r0, r4
 800846c:	f006 fabe 	bl	800e9ec <FT_String_ND>
 8008470:	4603      	mov	r3, r0
 8008472:	2b01      	cmp	r3, #1
 8008474:	d103      	bne.n	800847e <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 8008476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800847a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 800847e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800848c:	3b01      	subs	r3, #1
 800848e:	2b08      	cmp	r3, #8
 8008490:	f201 84d7 	bhi.w	8009e42 <AT_ESP8266_ND+0x34e2>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <AT_ESP8266_ND+0x1b3c>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	080084c1 	.word	0x080084c1
 80084a0:	08008651 	.word	0x08008651
 80084a4:	080088d3 	.word	0x080088d3
 80084a8:	08008a51 	.word	0x08008a51
 80084ac:	08008c29 	.word	0x08008c29
 80084b0:	08008efd 	.word	0x08008efd
 80084b4:	080091bd 	.word	0x080091bd
 80084b8:	080096e5 	.word	0x080096e5
 80084bc:	080098bb 	.word	0x080098bb
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80084c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80084d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d14f      	bne.n	8008582 <AT_ESP8266_ND+0x1c22>
 80084e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d04b      	beq.n	8008582 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 80084ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d047      	beq.n	8008582 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 80084f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d043      	beq.n	8008582 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 80084fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084fe:	2b13      	cmp	r3, #19
 8008500:	d03f      	beq.n	8008582 <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 8008502:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008506:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008516:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2201      	movs	r2, #1
 800851e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8008522:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008526:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008530:	4620      	mov	r0, r4
 8008532:	f7f7 fe5f 	bl	80001f4 <strlen>
 8008536:	4603      	mov	r3, r0
 8008538:	4423      	add	r3, r4
 800853a:	4a44      	ldr	r2, [pc, #272]	; (800864c <AT_ESP8266_ND+0x1cec>)
 800853c:	461c      	mov	r4, r3
 800853e:	4613      	mov	r3, r2
 8008540:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008542:	6020      	str	r0, [r4, #0]
 8008544:	6061      	str	r1, [r4, #4]
 8008546:	60a2      	str	r2, [r4, #8]
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800854c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008550:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800855a:	4618      	mov	r0, r3
 800855c:	f7f7 fe4a 	bl	80001f4 <strlen>
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008568:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8008572:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008576:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2264      	movs	r2, #100	; 0x64
 800857e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8008582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008586:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008596:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80085a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d11b      	bne.n	80085ea <AT_ESP8266_ND+0x1c8a>
 80085b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d023      	beq.n	8008602 <AT_ESP8266_ND+0x1ca2>
 80085ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085be:	2b1c      	cmp	r3, #28
 80085c0:	d01f      	beq.n	8008602 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 80085c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d01b      	beq.n	8008602 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 80085ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d017      	beq.n	8008602 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 80085d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085d6:	2b0b      	cmp	r3, #11
 80085d8:	d013      	beq.n	8008602 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 80085da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085de:	2b0c      	cmp	r3, #12
 80085e0:	d00f      	beq.n	8008602 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80085e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085e6:	2b13      	cmp	r3, #19
 80085e8:	d00b      	beq.n	8008602 <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80085ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80085f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085fc:	4293      	cmp	r3, r2
 80085fe:	f341 842a 	ble.w	8009e56 <AT_ESP8266_ND+0x34f6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008602:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008606:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008614:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008618:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2200      	movs	r2, #0
 8008620:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008624:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008628:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008634:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008638:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2200      	movs	r2, #0
 8008640:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008644:	f001 bc07 	b.w	8009e56 <AT_ESP8266_ND+0x34f6>
 8008648:	08010b40 	.word	0x08010b40
 800864c:	08010b4c 	.word	0x08010b4c
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008650:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008654:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008664:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800866e:	2b01      	cmp	r3, #1
 8008670:	f040 80c8 	bne.w	8008804 <AT_ESP8266_ND+0x1ea4>
 8008674:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008678:	2b01      	cmp	r3, #1
 800867a:	f000 80c3 	beq.w	8008804 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 800867e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008682:	2b02      	cmp	r3, #2
 8008684:	f000 80be 	beq.w	8008804 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 8008688:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800868c:	2b03      	cmp	r3, #3
 800868e:	f000 80b9 	beq.w	8008804 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 8008692:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008696:	2b04      	cmp	r3, #4
 8008698:	f000 80b4 	beq.w	8008804 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 800869c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086a0:	2b0a      	cmp	r3, #10
 80086a2:	f000 80af 	beq.w	8008804 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 80086a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086aa:	2b0b      	cmp	r3, #11
 80086ac:	f000 80aa 	beq.w	8008804 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 80086b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b4:	2b0c      	cmp	r3, #12
 80086b6:	f000 80a5 	beq.w	8008804 <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 80086ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80086ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80086da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086e8:	4620      	mov	r0, r4
 80086ea:	f7f7 fd83 	bl	80001f4 <strlen>
 80086ee:	4603      	mov	r3, r0
 80086f0:	4423      	add	r3, r4
 80086f2:	49d5      	ldr	r1, [pc, #852]	; (8008a48 <AT_ESP8266_ND+0x20e8>)
 80086f4:	461a      	mov	r2, r3
 80086f6:	460b      	mov	r3, r1
 80086f8:	cb03      	ldmia	r3!, {r0, r1}
 80086fa:	6010      	str	r0, [r2, #0]
 80086fc:	6051      	str	r1, [r2, #4]
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 8008702:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008706:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008710:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008714:	2201      	movs	r2, #1
 8008716:	4618      	mov	r0, r3
 8008718:	f006 ff37 	bl	800f58a <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 800871c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800872a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800872e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	1d9d      	adds	r5, r3, #6
 8008736:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800873a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3306      	adds	r3, #6
 8008742:	4618      	mov	r0, r3
 8008744:	f7f7 fd56 	bl	80001f4 <strlen>
 8008748:	4603      	mov	r3, r0
 800874a:	461a      	mov	r2, r3
 800874c:	4629      	mov	r1, r5
 800874e:	4620      	mov	r0, r4
 8008750:	f006 ff1b 	bl	800f58a <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008762:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008766:	4618      	mov	r0, r3
 8008768:	f7f7 fd44 	bl	80001f4 <strlen>
 800876c:	4602      	mov	r2, r0
 800876e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008772:	4619      	mov	r1, r3
 8008774:	4620      	mov	r0, r4
 8008776:	f006 ff08 	bl	800f58a <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800877a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800877e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800879a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3326      	adds	r3, #38	; 0x26
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7f7 fd26 	bl	80001f4 <strlen>
 80087a8:	4603      	mov	r3, r0
 80087aa:	461a      	mov	r2, r3
 80087ac:	4629      	mov	r1, r5
 80087ae:	4620      	mov	r0, r4
 80087b0:	f006 feeb 	bl	800f58a <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 80087b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80087c2:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80087c6:	2203      	movs	r2, #3
 80087c8:	4618      	mov	r0, r3
 80087ca:	f006 fede 	bl	800f58a <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80087ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80087dc:	4618      	mov	r0, r3
 80087de:	f7f7 fd09 	bl	80001f4 <strlen>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461a      	mov	r2, r3
 80087e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 80087f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	22c8      	movs	r2, #200	; 0xc8
 8008800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8008804:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008808:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008818:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8008822:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008826:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d11b      	bne.n	800886c <AT_ESP8266_ND+0x1f0c>
 8008834:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008838:	2b01      	cmp	r3, #1
 800883a:	d023      	beq.n	8008884 <AT_ESP8266_ND+0x1f24>
 800883c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008840:	2b02      	cmp	r3, #2
 8008842:	d01f      	beq.n	8008884 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 8008844:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008848:	2b03      	cmp	r3, #3
 800884a:	d01b      	beq.n	8008884 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 800884c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008850:	2b04      	cmp	r3, #4
 8008852:	d017      	beq.n	8008884 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 8008854:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008858:	2b0a      	cmp	r3, #10
 800885a:	d013      	beq.n	8008884 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 800885c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008860:	2b0b      	cmp	r3, #11
 8008862:	d00f      	beq.n	8008884 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 8008864:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008868:	2b0c      	cmp	r3, #12
 800886a:	d00b      	beq.n	8008884 <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 800886c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008870:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800887a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800887e:	4293      	cmp	r3, r2
 8008880:	f341 82eb 	ble.w	8009e5a <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008896:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800889a:	2b0a      	cmp	r3, #10
 800889c:	d00f      	beq.n	80088be <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 800889e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 80088ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 80088be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80088ce:	f001 bac4 	b.w	8009e5a <AT_ESP8266_ND+0x34fa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80088d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80088e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d14d      	bne.n	8008990 <AT_ESP8266_ND+0x2030>
 80088f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	d049      	beq.n	8008990 <AT_ESP8266_ND+0x2030>
 80088fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008900:	2b0a      	cmp	r3, #10
 8008902:	d045      	beq.n	8008990 <AT_ESP8266_ND+0x2030>
 8008904:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008908:	2b0d      	cmp	r3, #13
 800890a:	d041      	beq.n	8008990 <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 800890c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2200      	movs	r2, #0
 8008918:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800891c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008920:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2201      	movs	r2, #1
 8008928:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 800892c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800893a:	4620      	mov	r0, r4
 800893c:	f7f7 fc5a 	bl	80001f4 <strlen>
 8008940:	4603      	mov	r3, r0
 8008942:	4423      	add	r3, r4
 8008944:	4941      	ldr	r1, [pc, #260]	; (8008a4c <AT_ESP8266_ND+0x20ec>)
 8008946:	461a      	mov	r2, r3
 8008948:	460b      	mov	r3, r1
 800894a:	cb03      	ldmia	r3!, {r0, r1}
 800894c:	6010      	str	r0, [r2, #0]
 800894e:	6051      	str	r1, [r2, #4]
 8008950:	8819      	ldrh	r1, [r3, #0]
 8008952:	789b      	ldrb	r3, [r3, #2]
 8008954:	8111      	strh	r1, [r2, #8]
 8008956:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008966:	4618      	mov	r0, r3
 8008968:	f7f7 fc44 	bl	80001f4 <strlen>
 800896c:	4603      	mov	r3, r0
 800896e:	461a      	mov	r2, r3
 8008970:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008974:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 800897e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008982:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800898c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008990:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008994:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80089ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d113      	bne.n	80089e8 <AT_ESP8266_ND+0x2088>
 80089c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089c4:	2b0a      	cmp	r3, #10
 80089c6:	d01b      	beq.n	8008a00 <AT_ESP8266_ND+0x20a0>
 80089c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089cc:	2b0b      	cmp	r3, #11
 80089ce:	d017      	beq.n	8008a00 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 80089d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089d4:	2b0c      	cmp	r3, #12
 80089d6:	d013      	beq.n	8008a00 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 80089d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d00f      	beq.n	8008a00 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 80089e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089e4:	2b0d      	cmp	r3, #13
 80089e6:	d00b      	beq.n	8008a00 <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80089e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80089f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089fa:	4293      	cmp	r3, r2
 80089fc:	f341 822f 	ble.w	8009e5e <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008a00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008a12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008a32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008a42:	f001 ba0c 	b.w	8009e5e <AT_ESP8266_ND+0x34fe>
 8008a46:	bf00      	nop
 8008a48:	08010b5c 	.word	0x08010b5c
 8008a4c:	08010b68 	.word	0x08010b68
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d16b      	bne.n	8008b4a <AT_ESP8266_ND+0x21ea>
 8008a72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d067      	beq.n	8008b4a <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 8008a7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d063      	beq.n	8008b4a <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 8008a82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d05f      	beq.n	8008b4a <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 8008a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008aaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d115      	bne.n	8008ae8 <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008aca:	4620      	mov	r0, r4
 8008acc:	f7f7 fb92 	bl	80001f4 <strlen>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	4423      	add	r3, r4
 8008ad4:	4a52      	ldr	r2, [pc, #328]	; (8008c20 <AT_ESP8266_ND+0x22c0>)
 8008ad6:	461c      	mov	r4, r3
 8008ad8:	4613      	mov	r3, r2
 8008ada:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008adc:	6020      	str	r0, [r4, #0]
 8008ade:	6061      	str	r1, [r4, #4]
 8008ae0:	60a2      	str	r2, [r4, #8]
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	81a3      	strh	r3, [r4, #12]
 8008ae6:	e014      	b.n	8008b12 <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008ae8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7f7 fb7c 	bl	80001f4 <strlen>
 8008afc:	4603      	mov	r3, r0
 8008afe:	4423      	add	r3, r4
 8008b00:	4a48      	ldr	r2, [pc, #288]	; (8008c24 <AT_ESP8266_ND+0x22c4>)
 8008b02:	461c      	mov	r4, r3
 8008b04:	4613      	mov	r3, r2
 8008b06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b08:	6020      	str	r0, [r4, #0]
 8008b0a:	6061      	str	r1, [r4, #4]
 8008b0c:	60a2      	str	r2, [r4, #8]
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008b12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7f7 fb67 	bl	80001f4 <strlen>
 8008b26:	4603      	mov	r3, r0
 8008b28:	461a      	mov	r2, r3
 8008b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008b38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d123      	bne.n	8008bc2 <AT_ESP8266_ND+0x2262>
 8008b7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d02b      	beq.n	8008bda <AT_ESP8266_ND+0x227a>
 8008b82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b86:	2b0b      	cmp	r3, #11
 8008b88:	d027      	beq.n	8008bda <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 8008b8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b8e:	2b0c      	cmp	r3, #12
 8008b90:	d023      	beq.n	8008bda <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 8008b92:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d01f      	beq.n	8008bda <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 8008b9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d01b      	beq.n	8008bda <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 8008ba2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ba6:	2b07      	cmp	r3, #7
 8008ba8:	d017      	beq.n	8008bda <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008baa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bae:	2b08      	cmp	r3, #8
 8008bb0:	d013      	beq.n	8008bda <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 8008bb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bb6:	2b1e      	cmp	r3, #30
 8008bb8:	d00f      	beq.n	8008bda <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008bba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bbe:	2b1f      	cmp	r3, #31
 8008bc0:	d00b      	beq.n	8008bda <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	f341 8144 	ble.w	8009e62 <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008c1c:	f001 b921 	b.w	8009e62 <AT_ESP8266_ND+0x3502>
 8008c20:	08010b74 	.word	0x08010b74
 8008c24:	08010b84 	.word	0x08010b84
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008c28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008c38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	f040 80f3 	bne.w	8008e32 <AT_ESP8266_ND+0x24d2>
 8008c4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	f000 80ee 	beq.w	8008e32 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 8008c56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	f000 80e9 	beq.w	8008e32 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 8008c60:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	f000 80e4 	beq.w	8008e32 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 8008c6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c6e:	2b21      	cmp	r3, #33	; 0x21
 8008c70:	f000 80df 	beq.w	8008e32 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 8008c74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c78:	2b1b      	cmp	r3, #27
 8008c7a:	f000 80da 	beq.w	8008e32 <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 8008c7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008c8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008c9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008cac:	4620      	mov	r0, r4
 8008cae:	f7f7 faa1 	bl	80001f4 <strlen>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4423      	add	r3, r4
 8008cb6:	4990      	ldr	r1, [pc, #576]	; (8008ef8 <AT_ESP8266_ND+0x2598>)
 8008cb8:	461a      	mov	r2, r3
 8008cba:	460b      	mov	r3, r1
 8008cbc:	cb03      	ldmia	r3!, {r0, r1}
 8008cbe:	6010      	str	r0, [r2, #0]
 8008cc0:	6051      	str	r1, [r2, #4]
 8008cc2:	8819      	ldrh	r1, [r3, #0]
 8008cc4:	789b      	ldrb	r3, [r3, #2]
 8008cc6:	8111      	strh	r1, [r2, #8]
 8008cc8:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008cd8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008cdc:	2201      	movs	r2, #1
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f006 fc53 	bl	800f58a <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008cf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008d00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	334c      	adds	r3, #76	; 0x4c
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f7 fa71 	bl	80001f4 <strlen>
 8008d12:	4603      	mov	r3, r0
 8008d14:	461a      	mov	r2, r3
 8008d16:	4629      	mov	r1, r5
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f006 fc36 	bl	800f58a <strncat>
						strncat(a->_uart2snd,separador,3);
 8008d1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d2c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008d30:	2203      	movs	r2, #3
 8008d32:	4618      	mov	r0, r3
 8008d34:	f006 fc29 	bl	800f58a <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008d38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3362      	adds	r3, #98	; 0x62
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7f7 fa47 	bl	80001f4 <strlen>
 8008d66:	4603      	mov	r3, r0
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f006 fc0c 	bl	800f58a <strncat>
						strncat(a->_uart2snd,separador,3);
 8008d72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d80:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008d84:	2203      	movs	r2, #3
 8008d86:	4618      	mov	r0, r3
 8008d88:	f006 fbff 	bl	800f58a <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008d8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3372      	adds	r3, #114	; 0x72
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7f7 fa1d 	bl	80001f4 <strlen>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f006 fbe2 	bl	800f58a <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008dc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008dd4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008dd8:	2201      	movs	r2, #1
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f006 fbd5 	bl	800f58a <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008de0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008dee:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008df2:	2202      	movs	r2, #2
 8008df4:	4618      	mov	r0, r3
 8008df6:	f006 fbc8 	bl	800f58a <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008dfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7f7 f9f3 	bl	80001f4 <strlen>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	461a      	mov	r2, r3
 8008e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008e20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d11b      	bne.n	8008e9a <AT_ESP8266_ND+0x253a>
 8008e62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d023      	beq.n	8008eb2 <AT_ESP8266_ND+0x2552>
 8008e6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e6e:	2b0b      	cmp	r3, #11
 8008e70:	d01f      	beq.n	8008eb2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 8008e72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e76:	2b0c      	cmp	r3, #12
 8008e78:	d01b      	beq.n	8008eb2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 8008e7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d017      	beq.n	8008eb2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 8008e82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d013      	beq.n	8008eb2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 8008e8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e8e:	2b21      	cmp	r3, #33	; 0x21
 8008e90:	d00f      	beq.n	8008eb2 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 8008e92:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e96:	2b1b      	cmp	r3, #27
 8008e98:	d00b      	beq.n	8008eb2 <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008e9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eac:	4293      	cmp	r3, r2
 8008eae:	f340 87da 	ble.w	8009e66 <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008ec4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008ed4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008ee4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008ef4:	f000 bfb7 	b.w	8009e66 <AT_ESP8266_ND+0x3506>
 8008ef8:	08010a74 	.word	0x08010a74
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008efc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008f0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	f040 80e2 	bne.w	80090e4 <AT_ESP8266_ND+0x2784>
 8008f20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f24:	2b0b      	cmp	r3, #11
 8008f26:	f000 80dd 	beq.w	80090e4 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8008f2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f2e:	2b0c      	cmp	r3, #12
 8008f30:	f000 80d8 	beq.w	80090e4 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008f34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f38:	2b0e      	cmp	r3, #14
 8008f3a:	f000 80d3 	beq.w	80090e4 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 8008f3e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f42:	2b0f      	cmp	r3, #15
 8008f44:	f000 80ce 	beq.w	80090e4 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8008f48:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f4c:	2b10      	cmp	r3, #16
 8008f4e:	f000 80c9 	beq.w	80090e4 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 8008f52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	f000 80c4 	beq.w	80090e4 <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8008f5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008f6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008f7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f7f7 f932 	bl	80001f4 <strlen>
 8008f90:	4603      	mov	r3, r0
 8008f92:	4423      	add	r3, r4
 8008f94:	4aa5      	ldr	r2, [pc, #660]	; (800922c <AT_ESP8266_ND+0x28cc>)
 8008f96:	461c      	mov	r4, r3
 8008f98:	4613      	mov	r3, r2
 8008f9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f9c:	6020      	str	r0, [r4, #0]
 8008f9e:	6061      	str	r1, [r4, #4]
 8008fa0:	60a2      	str	r2, [r4, #8]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008fa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008faa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008fb4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008fb8:	2201      	movs	r2, #1
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f006 fae5 	bl	800f58a <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008fc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f7f7 f910 	bl	80001f4 <strlen>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	4423      	add	r3, r4
 8008fd8:	4a95      	ldr	r2, [pc, #596]	; (8009230 <AT_ESP8266_ND+0x28d0>)
 8008fda:	6810      	ldr	r0, [r2, #0]
 8008fdc:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008fde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008fec:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f006 fac9 	bl	800f58a <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008ff8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ffc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009006:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800900a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8009014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3336      	adds	r3, #54	; 0x36
 8009020:	4618      	mov	r0, r3
 8009022:	f7f7 f8e7 	bl	80001f4 <strlen>
 8009026:	4603      	mov	r3, r0
 8009028:	461a      	mov	r2, r3
 800902a:	4629      	mov	r1, r5
 800902c:	4620      	mov	r0, r4
 800902e:	f006 faac 	bl	800f58a <strncat>
						strncat(a->_uart2snd,separador2,2);
 8009032:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009036:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009040:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8009044:	2202      	movs	r2, #2
 8009046:	4618      	mov	r0, r3
 8009048:	f006 fa9f 	bl	800f58a <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 800904c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009050:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800905a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8009068:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3346      	adds	r3, #70	; 0x46
 8009074:	4618      	mov	r0, r3
 8009076:	f7f7 f8bd 	bl	80001f4 <strlen>
 800907a:	4603      	mov	r3, r0
 800907c:	461a      	mov	r2, r3
 800907e:	4629      	mov	r1, r5
 8009080:	4620      	mov	r0, r4
 8009082:	f006 fa82 	bl	800f58a <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009086:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800908a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009094:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009098:	4618      	mov	r0, r3
 800909a:	f7f7 f8ab 	bl	80001f4 <strlen>
 800909e:	4602      	mov	r2, r0
 80090a0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80090a4:	4619      	mov	r1, r3
 80090a6:	4620      	mov	r0, r4
 80090a8:	f006 fa6f 	bl	800f58a <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80090ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7f7 f89a 	bl	80001f4 <strlen>
 80090c0:	4603      	mov	r3, r0
 80090c2:	461a      	mov	r2, r3
 80090c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 80090d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80090e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 80090e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8009102:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009106:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d124      	bne.n	800915e <AT_ESP8266_ND+0x27fe>
 8009114:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009118:	2b0a      	cmp	r3, #10
 800911a:	d02c      	beq.n	8009176 <AT_ESP8266_ND+0x2816>
 800911c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009120:	2b0b      	cmp	r3, #11
 8009122:	d028      	beq.n	8009176 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_fail)
 8009124:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009128:	2b03      	cmp	r3, #3
 800912a:	d024      	beq.n	8009176 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_wifi_gotip)
 800912c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009130:	2b0c      	cmp	r3, #12
 8009132:	d020      	beq.n	8009176 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8009134:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009138:	2b0e      	cmp	r3, #14
 800913a:	d01c      	beq.n	8009176 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_conectado)
 800913c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009140:	2b0f      	cmp	r3, #15
 8009142:	d018      	beq.n	8009176 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_desconectado)
 8009144:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009148:	2b10      	cmp	r3, #16
 800914a:	d014      	beq.n	8009176 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_error)
 800914c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009150:	2b02      	cmp	r3, #2
 8009152:	d010      	beq.n	8009176 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_busy_p)))
 8009154:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009158:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800915c:	d00b      	beq.n	8009176 <AT_ESP8266_ND+0x2816>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800915e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009162:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800916c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009170:	4293      	cmp	r3, r2
 8009172:	f340 867a 	ble.w	8009e6a <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80091a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80091b8:	f000 be57 	b.w	8009e6a <AT_ESP8266_ND+0x350a>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 80091bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	2200      	movs	r2, #0
 80091ca:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 80091cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091d0:	2b10      	cmp	r3, #16
 80091d2:	d007      	beq.n	80091e4 <AT_ESP8266_ND+0x2884>
 80091d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091d8:	2b0a      	cmp	r3, #10
 80091da:	d003      	beq.n	80091e4 <AT_ESP8266_ND+0x2884>
 80091dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d127      	bne.n	8009234 <AT_ESP8266_ND+0x28d4>
				{
					a->_estado=AT_decode;
 80091e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80091f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80091f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800920a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2200      	movs	r2, #0
 8009212:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800921a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2200      	movs	r2, #0
 8009222:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009226:	f000 be22 	b.w	8009e6e <AT_ESP8266_ND+0x350e>
 800922a:	bf00      	nop
 800922c:	08010b94 	.word	0x08010b94
 8009230:	08010ba4 	.word	0x08010ba4
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009234:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009238:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009242:	2b01      	cmp	r3, #1
 8009244:	f040 80d1 	bne.w	80093ea <AT_ESP8266_ND+0x2a8a>
 8009248:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009256:	2b00      	cmp	r3, #0
 8009258:	f040 80c7 	bne.w	80093ea <AT_ESP8266_ND+0x2a8a>
										a->_ejecucion=1;
 800925c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009260:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2201      	movs	r2, #1
 8009268:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 800926c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009270:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2218      	movs	r2, #24
 8009278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800927c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009280:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 800928c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80092aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80092ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80092ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80092d8:	4620      	mov	r0, r4
 80092da:	f7f6 ff8b 	bl	80001f4 <strlen>
 80092de:	4603      	mov	r3, r0
 80092e0:	4423      	add	r3, r4
 80092e2:	4ac0      	ldr	r2, [pc, #768]	; (80095e4 <AT_ESP8266_ND+0x2c84>)
 80092e4:	461c      	mov	r4, r3
 80092e6:	4613      	mov	r3, r2
 80092e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80092ea:	6020      	str	r0, [r4, #0]
 80092ec:	6061      	str	r1, [r4, #4]
 80092ee:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80092f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 80092fe:	f107 0214 	add.w	r2, r7, #20
 8009302:	4611      	mov	r1, r2
 8009304:	4618      	mov	r0, r3
 8009306:	f005 feb9 	bl	800f07c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 800930a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800930e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009318:	f107 0314 	add.w	r3, r7, #20
 800931c:	4618      	mov	r0, r3
 800931e:	f7f6 ff69 	bl	80001f4 <strlen>
 8009322:	4602      	mov	r2, r0
 8009324:	f107 0314 	add.w	r3, r7, #20
 8009328:	4619      	mov	r1, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f006 f92d 	bl	800f58a <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009330:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009334:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 800933e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009342:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f006 f9fc 	bl	800f74c <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009354:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009358:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009362:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009366:	2202      	movs	r2, #2
 8009368:	4618      	mov	r0, r3
 800936a:	f006 f90e 	bl	800f58a <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800936e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009372:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800937c:	4618      	mov	r0, r3
 800937e:	f7f6 ff39 	bl	80001f4 <strlen>
 8009382:	4603      	mov	r3, r0
 8009384:	461a      	mov	r2, r3
 8009386:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800938a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009394:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009398:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80093a2:	4620      	mov	r0, r4
 80093a4:	f7f6 ff26 	bl	80001f4 <strlen>
 80093a8:	4603      	mov	r3, r0
 80093aa:	4423      	add	r3, r4
 80093ac:	4a8e      	ldr	r2, [pc, #568]	; (80095e8 <AT_ESP8266_ND+0x2c88>)
 80093ae:	461c      	mov	r4, r3
 80093b0:	4613      	mov	r3, r2
 80093b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80093b4:	6020      	str	r0, [r4, #0]
 80093b6:	6061      	str	r1, [r4, #4]
 80093b8:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80093ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 80093d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80093e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80093ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8009408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800940c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009416:	2b00      	cmp	r3, #0
 8009418:	f040 80a6 	bne.w	8009568 <AT_ESP8266_ND+0x2c08>
 800941c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009420:	2b13      	cmp	r3, #19
 8009422:	f000 80a1 	beq.w	8009568 <AT_ESP8266_ND+0x2c08>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8009426:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009434:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009438:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009442:	4619      	mov	r1, r3
 8009444:	4610      	mov	r0, r2
 8009446:	f7f6 fecb 	bl	80001e0 <strcmp>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01b      	beq.n	8009488 <AT_ESP8266_ND+0x2b28>
 8009450:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009454:	2b01      	cmp	r3, #1
 8009456:	d017      	beq.n	8009488 <AT_ESP8266_ND+0x2b28>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8009458:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800945c:	2b14      	cmp	r3, #20
 800945e:	d013      	beq.n	8009488 <AT_ESP8266_ND+0x2b28>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800946e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009472:	4293      	cmp	r3, r2
 8009474:	dd78      	ble.n	8009568 <AT_ESP8266_ND+0x2c08>
 8009476:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800947a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009484:	2b01      	cmp	r3, #1
 8009486:	d16f      	bne.n	8009568 <AT_ESP8266_ND+0x2c08>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009496:	f241 3288 	movw	r2, #5000	; 0x1388
 800949a:	4293      	cmp	r3, r2
 800949c:	dd0e      	ble.n	80094bc <AT_ESP8266_ND+0x2b5c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800949e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80094ac:	1c5a      	adds	r2, r3, #1
 80094ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80094bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 80094da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80094f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2201      	movs	r2, #1
 8009504:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800950c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009516:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800951a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009532:	2361      	movs	r3, #97	; 0x61
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	2301      	movs	r3, #1
 8009538:	f005 fdd4 	bl	800f0e4 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800953c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009540:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800954a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800954e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009558:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800955c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009568:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800956c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009576:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800957a:	f040 8478 	bne.w	8009e6e <AT_ESP8266_ND+0x350e>
 800957e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009582:	2b13      	cmp	r3, #19
 8009584:	d032      	beq.n	80095ec <AT_ESP8266_ND+0x2c8c>
 8009586:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800958a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009594:	f241 3288 	movw	r2, #5000	; 0x1388
 8009598:	4293      	cmp	r3, r2
 800959a:	dc27      	bgt.n	80095ec <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_disconnect)
 800959c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095a0:	2b0a      	cmp	r3, #10
 80095a2:	d023      	beq.n	80095ec <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_fail)
 80095a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d01f      	beq.n	80095ec <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_connected)
 80095ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095b0:	2b0b      	cmp	r3, #11
 80095b2:	d01b      	beq.n	80095ec <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_gotip)
 80095b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095b8:	2b0c      	cmp	r3, #12
 80095ba:	d017      	beq.n	80095ec <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_desconectado)
 80095bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095c0:	2b10      	cmp	r3, #16
 80095c2:	d013      	beq.n	80095ec <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_snd_err)
 80095c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095c8:	2b11      	cmp	r3, #17
 80095ca:	d00f      	beq.n	80095ec <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_enviado_error)
 80095cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095d0:	2b12      	cmp	r3, #18
 80095d2:	d00b      	beq.n	80095ec <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_busy_p)))
 80095d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095dc:	f040 8447 	bne.w	8009e6e <AT_ESP8266_ND+0x350e>
 80095e0:	e004      	b.n	80095ec <AT_ESP8266_ND+0x2c8c>
 80095e2:	bf00      	nop
 80095e4:	08010ba8 	.word	0x08010ba8
 80095e8:	08010bb4 	.word	0x08010bb4
									a->_debug_count5++;
 80095ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 800960a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800960e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009618:	f241 3288 	movw	r2, #5000	; 0x1388
 800961c:	4293      	cmp	r3, r2
 800961e:	dd25      	ble.n	800966c <AT_ESP8266_ND+0x2d0c>
										a->_debug_count8++;
 8009620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009624:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 800962e:	1c5a      	adds	r2, r3, #1
 8009630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009634:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 800963e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009642:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800964c:	1c5a      	adds	r2, r3, #1
 800964e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009652:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 800965c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009660:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 800966c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009670:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800967a:	2b02      	cmp	r3, #2
 800967c:	dd10      	ble.n	80096a0 <AT_ESP8266_ND+0x2d40>
 800967e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009682:	2b10      	cmp	r3, #16
 8009684:	d00c      	beq.n	80096a0 <AT_ESP8266_ND+0x2d40>
 8009686:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800968a:	2b0a      	cmp	r3, #10
 800968c:	d008      	beq.n	80096a0 <AT_ESP8266_ND+0x2d40>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800968e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009692:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	220f      	movs	r2, #15
 800969a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800969e:	e008      	b.n	80096b2 <AT_ESP8266_ND+0x2d52>
										a->_estado=AT_decode;	//Devuelvo el estado
 80096a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80096ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80096b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2200      	movs	r2, #0
 80096be:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80096c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80096d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2200      	movs	r2, #0
 80096de:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 80096e2:	e3c4      	b.n	8009e6e <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80096e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 80096f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009702:	2b01      	cmp	r3, #1
 8009704:	d16f      	bne.n	80097e6 <AT_ESP8266_ND+0x2e86>
						{
						a->_pasos=0;
 8009706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2200      	movs	r2, #0
 8009712:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8009716:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800971a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2201      	movs	r2, #1
 8009722:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 8009726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800972a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009734:	4620      	mov	r0, r4
 8009736:	f7f6 fd5d 	bl	80001f4 <strlen>
 800973a:	4603      	mov	r3, r0
 800973c:	4423      	add	r3, r4
 800973e:	4a7a      	ldr	r2, [pc, #488]	; (8009928 <AT_ESP8266_ND+0x2fc8>)
 8009740:	461c      	mov	r4, r3
 8009742:	4615      	mov	r5, r2
 8009744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009746:	6020      	str	r0, [r4, #0]
 8009748:	6061      	str	r1, [r4, #4]
 800974a:	60a2      	str	r2, [r4, #8]
 800974c:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 800974e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800975c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 800976a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800976e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	335c      	adds	r3, #92	; 0x5c
 8009776:	4618      	mov	r0, r3
 8009778:	f7f6 fd3c 	bl	80001f4 <strlen>
 800977c:	4603      	mov	r3, r0
 800977e:	461a      	mov	r2, r3
 8009780:	4629      	mov	r1, r5
 8009782:	4620      	mov	r0, r4
 8009784:	f005 ff01 	bl	800f58a <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800978c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009796:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800979a:	4618      	mov	r0, r3
 800979c:	f7f6 fd2a 	bl	80001f4 <strlen>
 80097a0:	4602      	mov	r2, r0
 80097a2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80097a6:	4619      	mov	r1, r3
 80097a8:	4620      	mov	r0, r4
 80097aa:	f005 feee 	bl	800f58a <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80097ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f6 fd19 	bl	80001f4 <strlen>
 80097c2:	4603      	mov	r3, r0
 80097c4:	461a      	mov	r2, r3
 80097c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 80097d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80097e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80097e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009804:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009808:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009812:	2b00      	cmp	r3, #0
 8009814:	d123      	bne.n	800985e <AT_ESP8266_ND+0x2efe>
 8009816:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800981a:	2b0a      	cmp	r3, #10
 800981c:	d02b      	beq.n	8009876 <AT_ESP8266_ND+0x2f16>
 800981e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009822:	2b0b      	cmp	r3, #11
 8009824:	d027      	beq.n	8009876 <AT_ESP8266_ND+0x2f16>
 8009826:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800982a:	2b0c      	cmp	r3, #12
 800982c:	d023      	beq.n	8009876 <AT_ESP8266_ND+0x2f16>
 800982e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009832:	2b0e      	cmp	r3, #14
 8009834:	d01f      	beq.n	8009876 <AT_ESP8266_ND+0x2f16>
 8009836:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800983a:	2b0f      	cmp	r3, #15
 800983c:	d01b      	beq.n	8009876 <AT_ESP8266_ND+0x2f16>
 800983e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009842:	2b10      	cmp	r3, #16
 8009844:	d017      	beq.n	8009876 <AT_ESP8266_ND+0x2f16>
 8009846:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800984a:	2b15      	cmp	r3, #21
 800984c:	d013      	beq.n	8009876 <AT_ESP8266_ND+0x2f16>
 800984e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009852:	2b16      	cmp	r3, #22
 8009854:	d00f      	beq.n	8009876 <AT_ESP8266_ND+0x2f16>
 8009856:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800985a:	2b17      	cmp	r3, #23
 800985c:	d00b      	beq.n	8009876 <AT_ESP8266_ND+0x2f16>
 800985e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009862:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800986c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009870:	4293      	cmp	r3, r2
 8009872:	f340 82fe 	ble.w	8009e72 <AT_ESP8266_ND+0x3512>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800987a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009888:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800988c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009898:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800989c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80098a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 80098b8:	e2db      	b.n	8009e72 <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80098ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098be:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	2200      	movs	r2, #0
 80098c8:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 80098ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098ce:	2b10      	cmp	r3, #16
 80098d0:	d007      	beq.n	80098e2 <AT_ESP8266_ND+0x2f82>
 80098d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098d6:	2b0a      	cmp	r3, #10
 80098d8:	d003      	beq.n	80098e2 <AT_ESP8266_ND+0x2f82>
 80098da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d124      	bne.n	800992c <AT_ESP8266_ND+0x2fcc>
				{
					a->_estado=AT_decode;
 80098e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80098f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80098f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2200      	movs	r2, #0
 8009910:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009914:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009918:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009924:	e2a7      	b.n	8009e76 <AT_ESP8266_ND+0x3516>
 8009926:	bf00      	nop
 8009928:	08010bc0 	.word	0x08010bc0
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 800992c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800993a:	2b01      	cmp	r3, #1
 800993c:	f040 8102 	bne.w	8009b44 <AT_ESP8266_ND+0x31e4>
 8009940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800994e:	2b00      	cmp	r3, #0
 8009950:	f040 80f8 	bne.w	8009b44 <AT_ESP8266_ND+0x31e4>
										a->_ejecucion=1;
 8009954:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009958:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2201      	movs	r2, #1
 8009960:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009964:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009968:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2218      	movs	r2, #24
 8009970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009974:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009978:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009984:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009988:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80099a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80099b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80099c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80099d0:	4620      	mov	r0, r4
 80099d2:	f7f6 fc0f 	bl	80001f4 <strlen>
 80099d6:	4603      	mov	r3, r0
 80099d8:	4423      	add	r3, r4
 80099da:	4a83      	ldr	r2, [pc, #524]	; (8009be8 <AT_ESP8266_ND+0x3288>)
 80099dc:	461c      	mov	r4, r3
 80099de:	4613      	mov	r3, r2
 80099e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80099e2:	6020      	str	r0, [r4, #0]
 80099e4:	6061      	str	r1, [r4, #4]
 80099e6:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80099e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 80099f6:	f107 020c 	add.w	r2, r7, #12
 80099fa:	4611      	mov	r1, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f005 fb3d 	bl	800f07c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009a02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009a10:	f107 030c 	add.w	r3, r7, #12
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f6 fbed 	bl	80001f4 <strlen>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	f107 030c 	add.w	r3, r7, #12
 8009a20:	4619      	mov	r1, r3
 8009a22:	4620      	mov	r0, r4
 8009a24:	f005 fdb1 	bl	800f58a <strncat>
										strncat(a->_uart2snd,",",1);
 8009a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7f6 fbdc 	bl	80001f4 <strlen>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	4423      	add	r3, r4
 8009a40:	496a      	ldr	r1, [pc, #424]	; (8009bec <AT_ESP8266_ND+0x328c>)
 8009a42:	461a      	mov	r2, r3
 8009a44:	460b      	mov	r3, r1
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009a4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009a58:	f107 020c 	add.w	r2, r7, #12
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f005 fb0c 	bl	800f07c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009a64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009a72:	f107 030c 	add.w	r3, r7, #12
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7f6 fbbc 	bl	80001f4 <strlen>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	f107 030c 	add.w	r3, r7, #12
 8009a82:	4619      	mov	r1, r3
 8009a84:	4620      	mov	r0, r4
 8009a86:	f005 fd80 	bl	800f58a <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f005 fe4f 	bl	800f74c <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009aae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ab2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009abc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f005 fd61 	bl	800f58a <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009ac8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009acc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7f6 fb8c 	bl	80001f4 <strlen>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009afc:	4620      	mov	r0, r4
 8009afe:	f7f6 fb79 	bl	80001f4 <strlen>
 8009b02:	4603      	mov	r3, r0
 8009b04:	4423      	add	r3, r4
 8009b06:	4a3a      	ldr	r2, [pc, #232]	; (8009bf0 <AT_ESP8266_ND+0x3290>)
 8009b08:	461c      	mov	r4, r3
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b0e:	6020      	str	r0, [r4, #0]
 8009b10:	6061      	str	r1, [r4, #4]
 8009b12:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009b14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009b32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009b62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f040 80b8 	bne.w	8009ce6 <AT_ESP8266_ND+0x3386>
 8009b76:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b7a:	2b13      	cmp	r3, #19
 8009b7c:	f000 80b3 	beq.w	8009ce6 <AT_ESP8266_ND+0x3386>
 8009b80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009b8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	f7f6 fb1e 	bl	80001e0 <strcmp>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d024      	beq.n	8009bf4 <AT_ESP8266_ND+0x3294>
 8009baa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d020      	beq.n	8009bf4 <AT_ESP8266_ND+0x3294>
 8009bb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009bb6:	2b14      	cmp	r3, #20
 8009bb8:	d01c      	beq.n	8009bf4 <AT_ESP8266_ND+0x3294>
 8009bba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	f340 808a 	ble.w	8009ce6 <AT_ESP8266_ND+0x3386>
 8009bd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	f040 8080 	bne.w	8009ce6 <AT_ESP8266_ND+0x3386>
 8009be6:	e005      	b.n	8009bf4 <AT_ESP8266_ND+0x3294>
 8009be8:	08010ba8 	.word	0x08010ba8
 8009bec:	08010bd0 	.word	0x08010bd0
 8009bf0:	08010bb4 	.word	0x08010bb4
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c06:	4293      	cmp	r3, r2
 8009c08:	dd17      	ble.n	8009c3a <AT_ESP8266_ND+0x32da>
 8009c0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d10e      	bne.n	8009c3a <AT_ESP8266_ND+0x32da>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009c48:	1c5a      	adds	r2, r3, #1
 8009c4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009c58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009c66:	1c5a      	adds	r2, r3, #1
 8009c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009ca2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ca6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009cb0:	2361      	movs	r3, #97	; 0x61
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f005 fa15 	bl	800f0e4 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009cc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ccc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009cd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009ce6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009cf8:	f040 80bd 	bne.w	8009e76 <AT_ESP8266_ND+0x3516>
 8009cfc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d00:	2b13      	cmp	r3, #19
 8009d02:	d02b      	beq.n	8009d5c <AT_ESP8266_ND+0x33fc>
 8009d04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d08:	2b0b      	cmp	r3, #11
 8009d0a:	d027      	beq.n	8009d5c <AT_ESP8266_ND+0x33fc>
 8009d0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d10:	2b0c      	cmp	r3, #12
 8009d12:	d023      	beq.n	8009d5c <AT_ESP8266_ND+0x33fc>
 8009d14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d26:	4293      	cmp	r3, r2
 8009d28:	dc18      	bgt.n	8009d5c <AT_ESP8266_ND+0x33fc>
 8009d2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d2e:	2b0a      	cmp	r3, #10
 8009d30:	d014      	beq.n	8009d5c <AT_ESP8266_ND+0x33fc>
 8009d32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d36:	2b10      	cmp	r3, #16
 8009d38:	d010      	beq.n	8009d5c <AT_ESP8266_ND+0x33fc>
 8009d3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d3e:	2b11      	cmp	r3, #17
 8009d40:	d00c      	beq.n	8009d5c <AT_ESP8266_ND+0x33fc>
 8009d42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d46:	2b12      	cmp	r3, #18
 8009d48:	d008      	beq.n	8009d5c <AT_ESP8266_ND+0x33fc>
 8009d4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d4e:	2b16      	cmp	r3, #22
 8009d50:	d004      	beq.n	8009d5c <AT_ESP8266_ND+0x33fc>
 8009d52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d56:	2b19      	cmp	r3, #25
 8009d58:	f040 808d 	bne.w	8009e76 <AT_ESP8266_ND+0x3516>
									a->_debug_count5++;
 8009d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	dd25      	ble.n	8009ddc <AT_ESP8266_ND+0x347c>
										a->_debug_count8++;
 8009d90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009da4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009dae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009db2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009ddc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009de0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	dd07      	ble.n	8009dfe <AT_ESP8266_ND+0x349e>
 8009dee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009df2:	2b10      	cmp	r3, #16
 8009df4:	d003      	beq.n	8009dfe <AT_ESP8266_ND+0x349e>
 8009df6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009dfa:	2b0a      	cmp	r3, #10
 8009dfc:	d108      	bne.n	8009e10 <AT_ESP8266_ND+0x34b0>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009dfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009e20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009e40:	e019      	b.n	8009e76 <AT_ESP8266_ND+0x3516>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009e54:	e010      	b.n	8009e78 <AT_ESP8266_ND+0x3518>
			break;
 8009e56:	bf00      	nop
 8009e58:	e00e      	b.n	8009e78 <AT_ESP8266_ND+0x3518>
			break;
 8009e5a:	bf00      	nop
 8009e5c:	e00c      	b.n	8009e78 <AT_ESP8266_ND+0x3518>
			break;
 8009e5e:	bf00      	nop
 8009e60:	e00a      	b.n	8009e78 <AT_ESP8266_ND+0x3518>
			break;
 8009e62:	bf00      	nop
 8009e64:	e008      	b.n	8009e78 <AT_ESP8266_ND+0x3518>
			break;
 8009e66:	bf00      	nop
 8009e68:	e006      	b.n	8009e78 <AT_ESP8266_ND+0x3518>
			break;
 8009e6a:	bf00      	nop
 8009e6c:	e004      	b.n	8009e78 <AT_ESP8266_ND+0x3518>
			break;
 8009e6e:	bf00      	nop
 8009e70:	e002      	b.n	8009e78 <AT_ESP8266_ND+0x3518>
			break;
 8009e72:	bf00      	nop
 8009e74:	e000      	b.n	8009e78 <AT_ESP8266_ND+0x3518>
			break;
 8009e76:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009e98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009eb0 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ec2:	f240 328d 	movw	r2, #909	; 0x38d
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	f001 8430 	beq.w	800b72c <WiFi_Conn_ND+0x187c>
 8009ecc:	f240 328d 	movw	r2, #909	; 0x38d
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	f301 84c5 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009ed6:	f240 3289 	movw	r2, #905	; 0x389
 8009eda:	4293      	cmp	r3, r2
 8009edc:	f001 839d 	beq.w	800b61a <WiFi_Conn_ND+0x176a>
 8009ee0:	f240 3289 	movw	r2, #905	; 0x389
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	f301 84bb 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009eea:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009eee:	f001 828c 	beq.w	800b40a <WiFi_Conn_ND+0x155a>
 8009ef2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009ef6:	f301 84b3 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009efa:	f240 3229 	movw	r2, #809	; 0x329
 8009efe:	4293      	cmp	r3, r2
 8009f00:	f301 84ae 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009f04:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009f08:	f280 80a5 	bge.w	800a056 <WiFi_Conn_ND+0x1a6>
 8009f0c:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009f10:	4293      	cmp	r3, r2
 8009f12:	f000 87c0 	beq.w	800ae96 <WiFi_Conn_ND+0xfe6>
 8009f16:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	f301 84a0 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009f20:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009f24:	4293      	cmp	r3, r2
 8009f26:	f000 8741 	beq.w	800adac <WiFi_Conn_ND+0xefc>
 8009f2a:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	f301 8496 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009f34:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009f38:	f000 866b 	beq.w	800ac12 <WiFi_Conn_ND+0xd62>
 8009f3c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009f40:	f301 848e 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009f44:	f240 2261 	movw	r2, #609	; 0x261
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	f000 85ec 	beq.w	800ab26 <WiFi_Conn_ND+0xc76>
 8009f4e:	f240 2261 	movw	r2, #609	; 0x261
 8009f52:	4293      	cmp	r3, r2
 8009f54:	f301 8484 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009f58:	f240 225d 	movw	r2, #605	; 0x25d
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	f000 8582 	beq.w	800aa66 <WiFi_Conn_ND+0xbb6>
 8009f62:	f240 225d 	movw	r2, #605	; 0x25d
 8009f66:	4293      	cmp	r3, r2
 8009f68:	f301 847a 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009f6c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009f70:	f000 8500 	beq.w	800a974 <WiFi_Conn_ND+0xac4>
 8009f74:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009f78:	f301 8472 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009f7c:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009f80:	4293      	cmp	r3, r2
 8009f82:	f000 8496 	beq.w	800a8b2 <WiFi_Conn_ND+0xa02>
 8009f86:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009f8a:	f281 8469 	bge.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009f8e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009f92:	4293      	cmp	r3, r2
 8009f94:	f000 844c 	beq.w	800a830 <WiFi_Conn_ND+0x980>
 8009f98:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009f9c:	f281 8460 	bge.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009fa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009fa4:	f000 83d7 	beq.w	800a756 <WiFi_Conn_ND+0x8a6>
 8009fa8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009fac:	f301 8458 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009fb0:	f240 1299 	movw	r2, #409	; 0x199
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	f000 8378 	beq.w	800a6aa <WiFi_Conn_ND+0x7fa>
 8009fba:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009fbe:	f281 844f 	bge.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009fc2:	f240 1295 	movw	r2, #405	; 0x195
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	f000 8333 	beq.w	800a632 <WiFi_Conn_ND+0x782>
 8009fcc:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009fd0:	f281 8446 	bge.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009fd4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009fd8:	f000 82aa 	beq.w	800a530 <WiFi_Conn_ND+0x680>
 8009fdc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009fe0:	f301 843e 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009fe4:	f240 1235 	movw	r2, #309	; 0x135
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	f000 827b 	beq.w	800a4e4 <WiFi_Conn_ND+0x634>
 8009fee:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009ff2:	f281 8435 	bge.w	800b860 <WiFi_Conn_ND+0x19b0>
 8009ff6:	f240 1231 	movw	r2, #305	; 0x131
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	f000 826d 	beq.w	800a4da <WiFi_Conn_ND+0x62a>
 800a000:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a004:	f281 842c 	bge.w	800b860 <WiFi_Conn_ND+0x19b0>
 800a008:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a00c:	f000 8211 	beq.w	800a432 <WiFi_Conn_ND+0x582>
 800a010:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a014:	f301 8424 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 800a018:	2bd1      	cmp	r3, #209	; 0xd1
 800a01a:	f000 81a5 	beq.w	800a368 <WiFi_Conn_ND+0x4b8>
 800a01e:	2bd1      	cmp	r3, #209	; 0xd1
 800a020:	f301 841e 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 800a024:	2bcd      	cmp	r3, #205	; 0xcd
 800a026:	f000 8175 	beq.w	800a314 <WiFi_Conn_ND+0x464>
 800a02a:	2bcd      	cmp	r3, #205	; 0xcd
 800a02c:	f301 8418 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 800a030:	2bc8      	cmp	r3, #200	; 0xc8
 800a032:	f000 80f1 	beq.w	800a218 <WiFi_Conn_ND+0x368>
 800a036:	2bc8      	cmp	r3, #200	; 0xc8
 800a038:	f301 8412 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 800a03c:	2b6d      	cmp	r3, #109	; 0x6d
 800a03e:	f000 80b3 	beq.w	800a1a8 <WiFi_Conn_ND+0x2f8>
 800a042:	2b6d      	cmp	r3, #109	; 0x6d
 800a044:	f301 840c 	bgt.w	800b860 <WiFi_Conn_ND+0x19b0>
 800a048:	2b64      	cmp	r3, #100	; 0x64
 800a04a:	d021      	beq.n	800a090 <WiFi_Conn_ND+0x1e0>
 800a04c:	2b69      	cmp	r3, #105	; 0x69
 800a04e:	f000 8096 	beq.w	800a17e <WiFi_Conn_ND+0x2ce>
 800a052:	f001 bc05 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
 800a056:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800a05a:	2b09      	cmp	r3, #9
 800a05c:	f201 8400 	bhi.w	800b860 <WiFi_Conn_ND+0x19b0>
 800a060:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <WiFi_Conn_ND+0x1b8>)
 800a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a066:	bf00      	nop
 800a068:	0800afad 	.word	0x0800afad
 800a06c:	0800b861 	.word	0x0800b861
 800a070:	0800b861 	.word	0x0800b861
 800a074:	0800b861 	.word	0x0800b861
 800a078:	0800b861 	.word	0x0800b861
 800a07c:	0800b07b 	.word	0x0800b07b
 800a080:	0800b125 	.word	0x0800b125
 800a084:	0800b1cf 	.word	0x0800b1cf
 800a088:	0800b279 	.word	0x0800b279
 800a08c:	0800b323 	.word	0x0800b323
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a096:	2b64      	cmp	r3, #100	; 0x64
 800a098:	d046      	beq.n	800a128 <WiFi_Conn_ND+0x278>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d041      	beq.n	800a128 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0aa:	2b1c      	cmp	r3, #28
 800a0ac:	d03c      	beq.n	800a128 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d037      	beq.n	800a128 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d032      	beq.n	800a128 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c8:	2b13      	cmp	r3, #19
 800a0ca:	d02d      	beq.n	800a128 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7fc fab1 	bl	8006634 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d14e      	bne.n	800a17a <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7fc fc3f 	bl	8006960 <AT_ESP8266_ND>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d109      	bne.n	800a110 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f7f7 fa12 	bl	8001534 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	2364      	movs	r3, #100	; 0x64
 800a120:	68b8      	ldr	r0, [r7, #8]
 800a122:	f7fb fa0b 	bl	800553c <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a126:	e028      	b.n	800a17a <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d004      	beq.n	800a13c <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a138:	2b1c      	cmp	r3, #28
 800a13a:	d103      	bne.n	800a144 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	226d      	movs	r2, #109	; 0x6d
 800a140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d00f      	beq.n	800a16e <WiFi_Conn_ND+0x2be>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a154:	2b04      	cmp	r3, #4
 800a156:	d00a      	beq.n	800a16e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15e:	2b0b      	cmp	r3, #11
 800a160:	d005      	beq.n	800a16e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a168:	2b0c      	cmp	r3, #12
 800a16a:	f041 834a 	bne.w	800b802 <WiFi_Conn_ND+0x1952>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2269      	movs	r2, #105	; 0x69
 800a172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a176:	f001 bb44 	b.w	800b802 <WiFi_Conn_ND+0x1952>
 800a17a:	f001 bb42 	b.w	800b802 <WiFi_Conn_ND+0x1952>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7fc fa58 	bl	8006634 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2264      	movs	r2, #100	; 0x64
 800a188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a1a4:	f001 bb5c 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00c      	beq.n	800a1cc <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7fc fa6a 	bl	800668c <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a1ca:	e00e      	b.n	800a1ea <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7fc fa47 	bl	8006660 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	22c8      	movs	r2, #200	; 0xc8
 800a1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	f041 8308 	bne.w	800b806 <WiFi_Conn_ND+0x1956>
					{
						Cambiar_CWMODE(b);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7fc fa1c 	bl	8006634 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2264      	movs	r2, #100	; 0x64
 800a200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a214:	f001 baf7 	b.w	800b806 <WiFi_Conn_ND+0x1956>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21e:	2bc8      	cmp	r3, #200	; 0xc8
 800a220:	d04f      	beq.n	800a2c2 <WiFi_Conn_ND+0x412>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d04a      	beq.n	800a2c2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a232:	2b02      	cmp	r3, #2
 800a234:	d045      	beq.n	800a2c2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a23c:	2b03      	cmp	r3, #3
 800a23e:	d040      	beq.n	800a2c2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a246:	2b04      	cmp	r3, #4
 800a248:	d03b      	beq.n	800a2c2 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a250:	2b0a      	cmp	r3, #10
 800a252:	d036      	beq.n	800a2c2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25a:	2b0b      	cmp	r3, #11
 800a25c:	d031      	beq.n	800a2c2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a264:	2b0c      	cmp	r3, #12
 800a266:	d02c      	beq.n	800a2c2 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7fc f9f9 	bl	8006660 <ConectarWIFI>
						if(b->_enviaruart==1)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a274:	2b01      	cmp	r3, #1
 800a276:	d124      	bne.n	800a2c2 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f7fc fb71 	bl	8006960 <AT_ESP8266_ND>
 800a27e:	4602      	mov	r2, r0
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a294:	2b01      	cmp	r3, #1
 800a296:	d109      	bne.n	800a2ac <WiFi_Conn_ND+0x3fc>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	f7f7 f944 	bl	8001534 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	2364      	movs	r3, #100	; 0x64
 800a2bc:	68b8      	ldr	r0, [r7, #8]
 800a2be:	f7fb f93d 	bl	800553c <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d004      	beq.n	800a2d6 <WiFi_Conn_ND+0x426>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d2:	2b0c      	cmp	r3, #12
 800a2d4:	d103      	bne.n	800a2de <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	22d1      	movs	r2, #209	; 0xd1
 800a2da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d00f      	beq.n	800a308 <WiFi_Conn_ND+0x458>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d00a      	beq.n	800a308 <WiFi_Conn_ND+0x458>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f8:	2b20      	cmp	r3, #32
 800a2fa:	d005      	beq.n	800a308 <WiFi_Conn_ND+0x458>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a302:	2b0a      	cmp	r3, #10
 800a304:	f041 8281 	bne.w	800b80a <WiFi_Conn_ND+0x195a>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	22cd      	movs	r2, #205	; 0xcd
 800a30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a310:	f001 ba7b 	b.w	800b80a <WiFi_Conn_ND+0x195a>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a314:	f241 3088 	movw	r0, #5000	; 0x1388
 800a318:	f7f8 fc5c 	bl	8002bd4 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f7fc f99f 	bl	8006660 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	22c8      	movs	r2, #200	; 0xc8
 800a326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a340:	2b04      	cmp	r3, #4
 800a342:	f041 8264 	bne.w	800b80e <WiFi_Conn_ND+0x195e>
					{
						Cambiar_CWMODE(b);
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f7fc f974 	bl	8006634 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2264      	movs	r2, #100	; 0x64
 800a350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a364:	f001 ba53 	b.w	800b80e <WiFi_Conn_ND+0x195e>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a376:	2b01      	cmp	r3, #1
 800a378:	d108      	bne.n	800a38c <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f240 3229 	movw	r2, #809	; 0x329
 800a380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a392:	2b0a      	cmp	r3, #10
 800a394:	d009      	beq.n	800a3aa <WiFi_Conn_ND+0x4fa>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39c:	2b0d      	cmp	r3, #13
 800a39e:	d004      	beq.n	800a3aa <WiFi_Conn_ND+0x4fa>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d10a      	bne.n	800a3c0 <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7fc f958 	bl	8006660 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	22c8      	movs	r2, #200	; 0xc8
 800a3b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d10e      	bne.n	800a3e8 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f7fc f932 	bl	8006634 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2264      	movs	r2, #100	; 0x64
 800a3d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d011      	beq.n	800a416 <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f7fc f9a2 	bl	800673c <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a3fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a412:	f001 ba25 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7fc f938 	bl	800668c <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a42e:	f001 ba17 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a438:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a43c:	d03b      	beq.n	800a4b6 <WiFi_Conn_ND+0x606>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a444:	2b04      	cmp	r3, #4
 800a446:	d036      	beq.n	800a4b6 <WiFi_Conn_ND+0x606>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44e:	2b0a      	cmp	r3, #10
 800a450:	d031      	beq.n	800a4b6 <WiFi_Conn_ND+0x606>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a458:	2b0d      	cmp	r3, #13
 800a45a:	d02c      	beq.n	800a4b6 <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f7fc f941 	bl	80066e4 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d124      	bne.n	800a4b6 <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f7fc fa77 	bl	8006960 <AT_ESP8266_ND>
 800a472:	4602      	mov	r2, r0
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d109      	bne.n	800a4a0 <WiFi_Conn_ND+0x5f0>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	f7f7 f84a 	bl	8001534 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	2364      	movs	r3, #100	; 0x64
 800a4b0:	68b8      	ldr	r0, [r7, #8]
 800a4b2:	f7fb f843 	bl	800553c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4bc:	2b0a      	cmp	r3, #10
 800a4be:	d005      	beq.n	800a4cc <WiFi_Conn_ND+0x61c>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c6:	2b0d      	cmp	r3, #13
 800a4c8:	f041 81a3 	bne.w	800b812 <WiFi_Conn_ND+0x1962>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f240 1235 	movw	r2, #309	; 0x135
 800a4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a4d6:	f001 b99c 	b.w	800b812 <WiFi_Conn_ND+0x1962>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7fc f894 	bl	8006608 <NOP>
			}
			break;
 800a4e0:	f001 b9be 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7fc f8b7 	bl	8006660 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	22c8      	movs	r2, #200	; 0xc8
 800a4f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a508:	2b04      	cmp	r3, #4
 800a50a:	f041 8184 	bne.w	800b816 <WiFi_Conn_ND+0x1966>
					{
						Cambiar_CWMODE(b);
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f7fc f890 	bl	8006634 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2264      	movs	r2, #100	; 0x64
 800a518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a52c:	f001 b973 	b.w	800b816 <WiFi_Conn_ND+0x1966>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a536:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a53a:	d04f      	beq.n	800a5dc <WiFi_Conn_ND+0x72c>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a542:	2b04      	cmp	r3, #4
 800a544:	d04a      	beq.n	800a5dc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d045      	beq.n	800a5dc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a556:	2b02      	cmp	r3, #2
 800a558:	d040      	beq.n	800a5dc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a560:	2b07      	cmp	r3, #7
 800a562:	d03b      	beq.n	800a5dc <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56a:	2b08      	cmp	r3, #8
 800a56c:	d036      	beq.n	800a5dc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a574:	2b1e      	cmp	r3, #30
 800a576:	d031      	beq.n	800a5dc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57e:	2b1f      	cmp	r3, #31
 800a580:	d02c      	beq.n	800a5dc <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7fc f882 	bl	800668c <MUX>
						if(b->_enviaruart==1)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d124      	bne.n	800a5dc <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7fc f9e4 	bl	8006960 <AT_ESP8266_ND>
 800a598:	4602      	mov	r2, r0
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d109      	bne.n	800a5c6 <WiFi_Conn_ND+0x716>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	f7f6 ffb7 	bl	8001534 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	2364      	movs	r3, #100	; 0x64
 800a5d6:	68b8      	ldr	r0, [r7, #8]
 800a5d8:	f7fa ffb0 	bl	800553c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d009      	beq.n	800a5fa <WiFi_Conn_ND+0x74a>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ec:	2b07      	cmp	r3, #7
 800a5ee:	d004      	beq.n	800a5fa <WiFi_Conn_ND+0x74a>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f6:	2b08      	cmp	r3, #8
 800a5f8:	d104      	bne.n	800a604 <WiFi_Conn_ND+0x754>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f240 1299 	movw	r2, #409	; 0x199
 800a600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d00a      	beq.n	800a624 <WiFi_Conn_ND+0x774>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a614:	2b1e      	cmp	r3, #30
 800a616:	d005      	beq.n	800a624 <WiFi_Conn_ND+0x774>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61e:	2b1f      	cmp	r3, #31
 800a620:	f041 80fb 	bne.w	800b81a <WiFi_Conn_ND+0x196a>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f240 1295 	movw	r2, #405	; 0x195
 800a62a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a62e:	f001 b8f4 	b.w	800b81a <WiFi_Conn_ND+0x196a>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f7fb ffe8 	bl	8006608 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63e:	2b04      	cmp	r3, #4
 800a640:	d112      	bne.n	800a668 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f7fb fff6 	bl	8006634 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2264      	movs	r2, #100	; 0x64
 800a64c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a66e:	2b0a      	cmp	r3, #10
 800a670:	d00a      	beq.n	800a688 <WiFi_Conn_ND+0x7d8>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a678:	2b0d      	cmp	r3, #13
 800a67a:	d005      	beq.n	800a688 <WiFi_Conn_ND+0x7d8>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a682:	2b03      	cmp	r3, #3
 800a684:	f041 80cb 	bne.w	800b81e <WiFi_Conn_ND+0x196e>
				{
					ConectarWIFI(b);
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f7fb ffe9 	bl	8006660 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	22c8      	movs	r2, #200	; 0xc8
 800a692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a6a6:	f001 b8ba 	b.w	800b81e <WiFi_Conn_ND+0x196e>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f7fb ffac 	bl	8006608 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6be:	2b04      	cmp	r3, #4
 800a6c0:	d10e      	bne.n	800a6e0 <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f7fb ffb6 	bl	8006634 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2264      	movs	r2, #100	; 0x64
 800a6cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e6:	2b0a      	cmp	r3, #10
 800a6e8:	d009      	beq.n	800a6fe <WiFi_Conn_ND+0x84e>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f0:	2b0d      	cmp	r3, #13
 800a6f2:	d004      	beq.n	800a6fe <WiFi_Conn_ND+0x84e>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d10a      	bne.n	800a714 <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7fb ffae 	bl	8006660 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	22c8      	movs	r2, #200	; 0xc8
 800a708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10d      	bne.n	800a73a <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7fb ffca 	bl	80066b8 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a736:	f001 b893 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
						IPDef(b);
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f7fb ffbc 	bl	80066b8 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a752:	f001 b885 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a760:	d045      	beq.n	800a7ee <WiFi_Conn_ND+0x93e>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a768:	2b04      	cmp	r3, #4
 800a76a:	d040      	beq.n	800a7ee <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a772:	2b01      	cmp	r3, #1
 800a774:	d03b      	beq.n	800a7ee <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d036      	beq.n	800a7ee <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a786:	2b1b      	cmp	r3, #27
 800a788:	d031      	beq.n	800a7ee <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a790:	2b21      	cmp	r3, #33	; 0x21
 800a792:	d02c      	beq.n	800a7ee <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7fb ff8f 	bl	80066b8 <IPDef>
						if(b->_enviaruart==1)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d124      	bne.n	800a7ee <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7fc f8db 	bl	8006960 <AT_ESP8266_ND>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d109      	bne.n	800a7d8 <WiFi_Conn_ND+0x928>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	f7f6 feae 	bl	8001534 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	2364      	movs	r3, #100	; 0x64
 800a7e8:	68b8      	ldr	r0, [r7, #8]
 800a7ea:	f7fa fea7 	bl	800553c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d004      	beq.n	800a802 <WiFi_Conn_ND+0x952>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fe:	2b1b      	cmp	r3, #27
 800a800:	d104      	bne.n	800a80c <WiFi_Conn_ND+0x95c>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a812:	2b02      	cmp	r3, #2
 800a814:	d005      	beq.n	800a822 <WiFi_Conn_ND+0x972>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81c:	2b21      	cmp	r3, #33	; 0x21
 800a81e:	f041 8000 	bne.w	800b822 <WiFi_Conn_ND+0x1972>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a82c:	f000 bff9 	b.w	800b822 <WiFi_Conn_ND+0x1972>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7fb fee9 	bl	8006608 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d004      	beq.n	800a84a <WiFi_Conn_ND+0x99a>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a846:	2b02      	cmp	r3, #2
 800a848:	d112      	bne.n	800a870 <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f7fb fef2 	bl	8006634 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2264      	movs	r2, #100	; 0x64
 800a854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a876:	2b0a      	cmp	r3, #10
 800a878:	d00a      	beq.n	800a890 <WiFi_Conn_ND+0x9e0>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a880:	2b0d      	cmp	r3, #13
 800a882:	d005      	beq.n	800a890 <WiFi_Conn_ND+0x9e0>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	f040 87cb 	bne.w	800b826 <WiFi_Conn_ND+0x1976>
				{
					ConectarWIFI(b);
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7fb fee5 	bl	8006660 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	22c8      	movs	r2, #200	; 0xc8
 800a89a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a8ae:	f000 bfba 	b.w	800b826 <WiFi_Conn_ND+0x1976>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7fb fea8 	bl	8006608 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	d112      	bne.n	800a8e8 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f7fb feb6 	bl	8006634 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2264      	movs	r2, #100	; 0x64
 800a8cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ee:	2b0a      	cmp	r3, #10
 800a8f0:	d009      	beq.n	800a906 <WiFi_Conn_ND+0xa56>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f8:	2b0d      	cmp	r3, #13
 800a8fa:	d004      	beq.n	800a906 <WiFi_Conn_ND+0xa56>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a902:	2b03      	cmp	r3, #3
 800a904:	d10e      	bne.n	800a924 <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f7fb feaa 	bl	8006660 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	22c8      	movs	r2, #200	; 0xc8
 800a910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d111      	bne.n	800a952 <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f7fb feee 	bl	8006710 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a93a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800a94e:	f000 bf87 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
						ConectarWIFI(b);//
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7fb fe84 	bl	8006660 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	22c8      	movs	r2, #200	; 0xc8
 800a95c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a970:	f000 bf76 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a97e:	d04a      	beq.n	800aa16 <WiFi_Conn_ND+0xb66>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a986:	2b02      	cmp	r3, #2
 800a988:	d045      	beq.n	800aa16 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a990:	2b01      	cmp	r3, #1
 800a992:	d040      	beq.n	800aa16 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99a:	2b0a      	cmp	r3, #10
 800a99c:	d03b      	beq.n	800aa16 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a4:	2b0e      	cmp	r3, #14
 800a9a6:	d036      	beq.n	800aa16 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ae:	2b0f      	cmp	r3, #15
 800a9b0:	d031      	beq.n	800aa16 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b8:	2b10      	cmp	r3, #16
 800a9ba:	d02c      	beq.n	800aa16 <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f7fb fea7 	bl	8006710 <ConectarTCP>
						if(b->_enviaruart==1)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d124      	bne.n	800aa16 <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7fb ffc7 	bl	8006960 <AT_ESP8266_ND>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d109      	bne.n	800aa00 <WiFi_Conn_ND+0xb50>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	f7f6 fd9a 	bl	8001534 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	2364      	movs	r3, #100	; 0x64
 800aa10:	68b8      	ldr	r0, [r7, #8]
 800aa12:	f7fa fd93 	bl	800553c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d009      	beq.n	800aa34 <WiFi_Conn_ND+0xb84>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa26:	2b0e      	cmp	r3, #14
 800aa28:	d004      	beq.n	800aa34 <WiFi_Conn_ND+0xb84>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa30:	2b0f      	cmp	r3, #15
 800aa32:	d106      	bne.n	800aa42 <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f240 2261 	movw	r2, #609	; 0x261
 800aa3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800aa3e:	f000 bef4 	b.w	800b82a <WiFi_Conn_ND+0x197a>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d005      	beq.n	800aa58 <WiFi_Conn_ND+0xba8>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa52:	2b10      	cmp	r3, #16
 800aa54:	f040 86e9 	bne.w	800b82a <WiFi_Conn_ND+0x197a>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f240 225d 	movw	r2, #605	; 0x25d
 800aa5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800aa62:	f000 bee2 	b.w	800b82a <WiFi_Conn_ND+0x197a>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f7fb fdce 	bl	8006608 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d112      	bne.n	800aa9c <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f7fb fddc 	bl	8006634 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2264      	movs	r2, #100	; 0x64
 800aa80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa2:	2b0a      	cmp	r3, #10
 800aaa4:	d013      	beq.n	800aace <WiFi_Conn_ND+0xc1e>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaac:	2b0d      	cmp	r3, #13
 800aaae:	d00e      	beq.n	800aace <WiFi_Conn_ND+0xc1e>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab6:	2b22      	cmp	r3, #34	; 0x22
 800aab8:	d009      	beq.n	800aace <WiFi_Conn_ND+0xc1e>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d004      	beq.n	800aace <WiFi_Conn_ND+0xc1e>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d10e      	bne.n	800aaec <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7fb fdc6 	bl	8006660 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	22c8      	movs	r2, #200	; 0xc8
 800aad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf2:	2b10      	cmp	r3, #16
 800aaf4:	d005      	beq.n	800ab02 <WiFi_Conn_ND+0xc52>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafc:	2b0e      	cmp	r3, #14
 800aafe:	f040 8696 	bne.w	800b82e <WiFi_Conn_ND+0x197e>
				{
					ConectarTCP(b);
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7fb fe04 	bl	8006710 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800ab22:	f000 be84 	b.w	800b82e <WiFi_Conn_ND+0x197e>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7fb fd6e 	bl	8006608 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d112      	bne.n	800ab5c <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7fb fd7c 	bl	8006634 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2264      	movs	r2, #100	; 0x64
 800ab40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab62:	2b0a      	cmp	r3, #10
 800ab64:	d009      	beq.n	800ab7a <WiFi_Conn_ND+0xcca>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6c:	2b0d      	cmp	r3, #13
 800ab6e:	d004      	beq.n	800ab7a <WiFi_Conn_ND+0xcca>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d10e      	bne.n	800ab98 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f7fb fd70 	bl	8006660 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	22c8      	movs	r2, #200	; 0xc8
 800ab84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d004      	beq.n	800abac <WiFi_Conn_ND+0xcfc>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba8:	2b10      	cmp	r3, #16
 800abaa:	d10f      	bne.n	800abcc <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f7fb fdaf 	bl	8006710 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800abb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd2:	2b0e      	cmp	r3, #14
 800abd4:	d005      	beq.n	800abe2 <WiFi_Conn_ND+0xd32>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abdc:	2b0f      	cmp	r3, #15
 800abde:	f040 8628 	bne.w	800b832 <WiFi_Conn_ND+0x1982>
					{
						if(b->_automatizacion >= WF_SEND )
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800abe8:	2b02      	cmp	r3, #2
 800abea:	f240 8622 	bls.w	800b832 <WiFi_Conn_ND+0x1982>
						{
							EnviarDatos(b);
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7fb fdd0 	bl	8006794 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800abfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800ac0e:	f000 be10 	b.w	800b832 <WiFi_Conn_ND+0x1982>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac18:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ac1c:	d054      	beq.n	800acc8 <WiFi_Conn_ND+0xe18>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d04f      	beq.n	800acc8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac2e:	2b0a      	cmp	r3, #10
 800ac30:	d04a      	beq.n	800acc8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac38:	2b10      	cmp	r3, #16
 800ac3a:	d045      	beq.n	800acc8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac42:	2b11      	cmp	r3, #17
 800ac44:	d040      	beq.n	800acc8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4c:	2b14      	cmp	r3, #20
 800ac4e:	d03b      	beq.n	800acc8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac56:	2b12      	cmp	r3, #18
 800ac58:	d036      	beq.n	800acc8 <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d907      	bls.n	800ac74 <WiFi_Conn_ND+0xdc4>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f7fb fd90 	bl	8006794 <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d124      	bne.n	800acc8 <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7fb fe6e 	bl	8006960 <AT_ESP8266_ND>
 800ac84:	4602      	mov	r2, r0
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d109      	bne.n	800acb2 <WiFi_Conn_ND+0xe02>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800acaa:	4619      	mov	r1, r3
 800acac:	4610      	mov	r0, r2
 800acae:	f7f6 fc41 	bl	8001534 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	2364      	movs	r3, #100	; 0x64
 800acc2:	68b8      	ldr	r0, [r7, #8]
 800acc4:	f7fa fc3a 	bl	800553c <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acce:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800acd2:	d13b      	bne.n	800ad4c <WiFi_Conn_ND+0xe9c>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d136      	bne.n	800ad4c <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_error)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d031      	beq.n	800ad4c <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_wifi_disconnect)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acee:	2b0a      	cmp	r3, #10
 800acf0:	d02c      	beq.n	800ad4c <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_desconectado)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf8:	2b10      	cmp	r3, #16
 800acfa:	d027      	beq.n	800ad4c <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_snd_err)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad02:	2b11      	cmp	r3, #17
 800ad04:	d022      	beq.n	800ad4c <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_enviado_error))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad0c:	2b12      	cmp	r3, #18
 800ad0e:	d01d      	beq.n	800ad4c <WiFi_Conn_ND+0xe9c>
							{
								b->_enviaruart=0;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d109      	bne.n	800ad36 <WiFi_Conn_ND+0xe86>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4610      	mov	r0, r2
 800ad32:	f7f6 fbff 	bl	8001534 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	2364      	movs	r3, #100	; 0x64
 800ad46:	68b8      	ldr	r0, [r7, #8]
 800ad48:	f7fa fbf8 	bl	800553c <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad52:	2b13      	cmp	r3, #19
 800ad54:	d104      	bne.n	800ad60 <WiFi_Conn_ND+0xeb0>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f240 22c5 	movw	r2, #709	; 0x2c5
 800ad5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d019      	beq.n	800ad9e <WiFi_Conn_ND+0xeee>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad70:	2b0a      	cmp	r3, #10
 800ad72:	d014      	beq.n	800ad9e <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_fail)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d00f      	beq.n	800ad9e <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_desconectado)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad84:	2b10      	cmp	r3, #16
 800ad86:	d00a      	beq.n	800ad9e <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_snd_err)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad8e:	2b11      	cmp	r3, #17
 800ad90:	d005      	beq.n	800ad9e <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_enviado_error))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad98:	2b12      	cmp	r3, #18
 800ad9a:	f040 854c 	bne.w	800b836 <WiFi_Conn_ND+0x1986>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f240 22c1 	movw	r2, #705	; 0x2c1
 800ada4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800ada8:	f000 bd45 	b.w	800b836 <WiFi_Conn_ND+0x1986>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f7fb fc2b 	bl	8006608 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d112      	bne.n	800ade2 <WiFi_Conn_ND+0xf32>
				{
					Cambiar_CWMODE(b);
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7fb fc39 	bl	8006634 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2264      	movs	r2, #100	; 0x64
 800adc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade8:	2b0a      	cmp	r3, #10
 800adea:	d009      	beq.n	800ae00 <WiFi_Conn_ND+0xf50>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf2:	2b0d      	cmp	r3, #13
 800adf4:	d004      	beq.n	800ae00 <WiFi_Conn_ND+0xf50>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d10e      	bne.n	800ae1e <WiFi_Conn_ND+0xf6e>
				{
					ConectarWIFI(b);
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f7fb fc2d 	bl	8006660 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	22c8      	movs	r2, #200	; 0xc8
 800ae0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae24:	2b0c      	cmp	r3, #12
 800ae26:	d10f      	bne.n	800ae48 <WiFi_Conn_ND+0xf98>
				{
					ConectarTCP(b);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f7fb fc71 	bl	8006710 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d00f      	beq.n	800ae72 <WiFi_Conn_ND+0xfc2>
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae58:	2b10      	cmp	r3, #16
 800ae5a:	d00a      	beq.n	800ae72 <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_snd_err)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae62:	2b11      	cmp	r3, #17
 800ae64:	d005      	beq.n	800ae72 <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae6c:	2b12      	cmp	r3, #18
 800ae6e:	f040 84e4 	bne.w	800b83a <WiFi_Conn_ND+0x198a>
				{
					ConectarTCP(b);
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7fb fc4c 	bl	8006710 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800ae92:	f000 bcd2 	b.w	800b83a <WiFi_Conn_ND+0x198a>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7fb fbb6 	bl	8006608 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea2:	2b04      	cmp	r3, #4
 800aea4:	d112      	bne.n	800aecc <WiFi_Conn_ND+0x101c>
					{
						Cambiar_CWMODE(b);
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7fb fbc4 	bl	8006634 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2264      	movs	r2, #100	; 0x64
 800aeb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed2:	2b0a      	cmp	r3, #10
 800aed4:	d009      	beq.n	800aeea <WiFi_Conn_ND+0x103a>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aedc:	2b0d      	cmp	r3, #13
 800aede:	d004      	beq.n	800aeea <WiFi_Conn_ND+0x103a>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d10e      	bne.n	800af08 <WiFi_Conn_ND+0x1058>
					{
						ConectarWIFI(b);
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7fb fbb8 	bl	8006660 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	22c8      	movs	r2, #200	; 0xc8
 800aef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d00e      	beq.n	800af30 <WiFi_Conn_ND+0x1080>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af18:	2b0b      	cmp	r3, #11
 800af1a:	d009      	beq.n	800af30 <WiFi_Conn_ND+0x1080>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af22:	2b0c      	cmp	r3, #12
 800af24:	d004      	beq.n	800af30 <WiFi_Conn_ND+0x1080>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af2c:	2b10      	cmp	r3, #16
 800af2e:	d10f      	bne.n	800af50 <WiFi_Conn_ND+0x10a0>
					{
						ConectarTCP(b);
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7fb fbed 	bl	8006710 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800af50:	20c8      	movs	r0, #200	; 0xc8
 800af52:	f7f7 fe3f 	bl	8002bd4 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d916      	bls.n	800af8e <WiFi_Conn_ND+0x10de>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af66:	2b00      	cmp	r3, #0
 800af68:	d011      	beq.n	800af8e <WiFi_Conn_ND+0x10de>
					{
							EnviarDatos(b);
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f7fb fc12 	bl	8006794 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800af76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800af8a:	f000 bc69 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
							b->_estado_conexion=TCP_CONN_OK;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f240 2261 	movw	r2, #609	; 0x261
 800af94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800afa8:	f000 bc5a 	b.w	800b860 <WiFi_Conn_ND+0x19b0>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afb2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800afb6:	d045      	beq.n	800b044 <WiFi_Conn_ND+0x1194>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d040      	beq.n	800b044 <WiFi_Conn_ND+0x1194>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc8:	2b0a      	cmp	r3, #10
 800afca:	d03b      	beq.n	800b044 <WiFi_Conn_ND+0x1194>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd2:	2b15      	cmp	r3, #21
 800afd4:	d036      	beq.n	800b044 <WiFi_Conn_ND+0x1194>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afdc:	2b16      	cmp	r3, #22
 800afde:	d031      	beq.n	800b044 <WiFi_Conn_ND+0x1194>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe6:	2b17      	cmp	r3, #23
 800afe8:	d02c      	beq.n	800b044 <WiFi_Conn_ND+0x1194>
							{
								CrearServidorTCP(b);
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f7fb fba6 	bl	800673c <CrearServidorTCP>
									if(b->_enviaruart==1)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d124      	bne.n	800b044 <WiFi_Conn_ND+0x1194>
										{
											b->_estado=AT_ESP8266_ND(b);
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f7fb fcb0 	bl	8006960 <AT_ESP8266_ND>
 800b000:	4602      	mov	r2, r0
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b016:	2b01      	cmp	r3, #1
 800b018:	d109      	bne.n	800b02e <WiFi_Conn_ND+0x117e>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	f7f6 fa83 	bl	8001534 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	2364      	movs	r3, #100	; 0x64
 800b03e:	68b8      	ldr	r0, [r7, #8]
 800b040:	f7fa fa7c 	bl	800553c <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04a:	2b15      	cmp	r3, #21
 800b04c:	d004      	beq.n	800b058 <WiFi_Conn_ND+0x11a8>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b054:	2b17      	cmp	r3, #23
 800b056:	d104      	bne.n	800b062 <WiFi_Conn_ND+0x11b2>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f240 3229 	movw	r2, #809	; 0x329
 800b05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b068:	2b16      	cmp	r3, #22
 800b06a:	f040 83e8 	bne.w	800b83e <WiFi_Conn_ND+0x198e>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f240 3225 	movw	r2, #805	; 0x325
 800b074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800b078:	e3e1      	b.n	800b83e <WiFi_Conn_ND+0x198e>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7fb fac4 	bl	8006608 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b086:	2b04      	cmp	r3, #4
 800b088:	d112      	bne.n	800b0b0 <WiFi_Conn_ND+0x1200>
							{
								Cambiar_CWMODE(b);
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f7fb fad2 	bl	8006634 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2264      	movs	r2, #100	; 0x64
 800b094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b6:	2b0a      	cmp	r3, #10
 800b0b8:	d009      	beq.n	800b0ce <WiFi_Conn_ND+0x121e>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c0:	2b0d      	cmp	r3, #13
 800b0c2:	d004      	beq.n	800b0ce <WiFi_Conn_ND+0x121e>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d10e      	bne.n	800b0ec <WiFi_Conn_ND+0x123c>
							{
								ConectarWIFI(b);
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f7fb fac6 	bl	8006660 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	22c8      	movs	r2, #200	; 0xc8
 800b0d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d005      	beq.n	800b102 <WiFi_Conn_ND+0x1252>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fc:	2b10      	cmp	r3, #16
 800b0fe:	f040 83a0 	bne.w	800b842 <WiFi_Conn_ND+0x1992>
							{
								ConectarTCP(b);
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7fb fb04 	bl	8006710 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b10e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800b122:	e38e      	b.n	800b842 <WiFi_Conn_ND+0x1992>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7fb fa6f 	bl	8006608 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b130:	2b04      	cmp	r3, #4
 800b132:	d112      	bne.n	800b15a <WiFi_Conn_ND+0x12aa>
							{
								Cambiar_CWMODE(b);
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7fb fa7d 	bl	8006634 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2264      	movs	r2, #100	; 0x64
 800b13e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b160:	2b0a      	cmp	r3, #10
 800b162:	d009      	beq.n	800b178 <WiFi_Conn_ND+0x12c8>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16a:	2b0d      	cmp	r3, #13
 800b16c:	d004      	beq.n	800b178 <WiFi_Conn_ND+0x12c8>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b174:	2b03      	cmp	r3, #3
 800b176:	d10e      	bne.n	800b196 <WiFi_Conn_ND+0x12e6>
							{
								ConectarWIFI(b);
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7fb fa71 	bl	8006660 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	22c8      	movs	r2, #200	; 0xc8
 800b182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d005      	beq.n	800b1ac <WiFi_Conn_ND+0x12fc>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a6:	2b10      	cmp	r3, #16
 800b1a8:	f040 834d 	bne.w	800b846 <WiFi_Conn_ND+0x1996>
							{
								ConectarTCP(b);
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f7fb faaf 	bl	8006710 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b1b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b1cc:	e33b      	b.n	800b846 <WiFi_Conn_ND+0x1996>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f7fb fa1a 	bl	8006608 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d112      	bne.n	800b204 <WiFi_Conn_ND+0x1354>
							{
								Cambiar_CWMODE(b);
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7fb fa28 	bl	8006634 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2264      	movs	r2, #100	; 0x64
 800b1e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b20a:	2b0a      	cmp	r3, #10
 800b20c:	d009      	beq.n	800b222 <WiFi_Conn_ND+0x1372>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b214:	2b0d      	cmp	r3, #13
 800b216:	d004      	beq.n	800b222 <WiFi_Conn_ND+0x1372>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d10e      	bne.n	800b240 <WiFi_Conn_ND+0x1390>
							{
								ConectarWIFI(b);
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f7fb fa1c 	bl	8006660 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	22c8      	movs	r2, #200	; 0xc8
 800b22c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b246:	2b02      	cmp	r3, #2
 800b248:	d005      	beq.n	800b256 <WiFi_Conn_ND+0x13a6>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b250:	2b10      	cmp	r3, #16
 800b252:	f040 82fa 	bne.w	800b84a <WiFi_Conn_ND+0x199a>
							{
								ConectarTCP(b);
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7fb fa5a 	bl	8006710 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b276:	e2e8      	b.n	800b84a <WiFi_Conn_ND+0x199a>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f7fb f9c5 	bl	8006608 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b284:	2b04      	cmp	r3, #4
 800b286:	d112      	bne.n	800b2ae <WiFi_Conn_ND+0x13fe>
							{
								Cambiar_CWMODE(b);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7fb f9d3 	bl	8006634 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2264      	movs	r2, #100	; 0x64
 800b292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b4:	2b0a      	cmp	r3, #10
 800b2b6:	d009      	beq.n	800b2cc <WiFi_Conn_ND+0x141c>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2be:	2b0d      	cmp	r3, #13
 800b2c0:	d004      	beq.n	800b2cc <WiFi_Conn_ND+0x141c>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d10e      	bne.n	800b2ea <WiFi_Conn_ND+0x143a>
							{
								ConectarWIFI(b);
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f7fb f9c7 	bl	8006660 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	22c8      	movs	r2, #200	; 0xc8
 800b2d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d005      	beq.n	800b300 <WiFi_Conn_ND+0x1450>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2fa:	2b10      	cmp	r3, #16
 800b2fc:	f040 82a7 	bne.w	800b84e <WiFi_Conn_ND+0x199e>
							{
								ConectarTCP(b);
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7fb fa05 	bl	8006710 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b320:	e295      	b.n	800b84e <WiFi_Conn_ND+0x199e>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f7fb f970 	bl	8006608 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b336:	2b04      	cmp	r3, #4
 800b338:	d112      	bne.n	800b360 <WiFi_Conn_ND+0x14b0>
								{
									Cambiar_CWMODE(b);
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7fb f97a 	bl	8006634 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2264      	movs	r2, #100	; 0x64
 800b344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b366:	2b0a      	cmp	r3, #10
 800b368:	d009      	beq.n	800b37e <WiFi_Conn_ND+0x14ce>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b370:	2b0d      	cmp	r3, #13
 800b372:	d004      	beq.n	800b37e <WiFi_Conn_ND+0x14ce>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	d10e      	bne.n	800b39c <WiFi_Conn_ND+0x14ec>
								{
									ConectarWIFI(b);
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f7fb f96e 	bl	8006660 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	22c8      	movs	r2, #200	; 0xc8
 800b388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d004      	beq.n	800b3b0 <WiFi_Conn_ND+0x1500>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ac:	2b10      	cmp	r3, #16
 800b3ae:	d10f      	bne.n	800b3d0 <WiFi_Conn_ND+0x1520>
								{
									ConectarTCP(b);
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f7fb f9ad 	bl	8006710 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b3bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	f040 823b 	bne.w	800b852 <WiFi_Conn_ND+0x19a2>
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 8235 	beq.w	800b852 <WiFi_Conn_ND+0x19a2>
								{
									EnviarDatosSRVR(b);
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7fb f9bd 	bl	8006768 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b3f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b408:	e223      	b.n	800b852 <WiFi_Conn_ND+0x19a2>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b410:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b414:	d063      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d05e      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b426:	2b0a      	cmp	r3, #10
 800b428:	d059      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_connected)&&
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b430:	2b0b      	cmp	r3, #11
 800b432:	d054      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_gotip)&&
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b43a:	2b0c      	cmp	r3, #12
 800b43c:	d04f      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b444:	2b10      	cmp	r3, #16
 800b446:	d04a      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b44e:	2b11      	cmp	r3, #17
 800b450:	d045      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b458:	2b12      	cmp	r3, #18
 800b45a:	d040      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b462:	2b13      	cmp	r3, #19
 800b464:	d03b      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b46c:	2b16      	cmp	r3, #22
 800b46e:	d036      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b476:	2b19      	cmp	r3, #25
 800b478:	d031      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b480:	2b00      	cmp	r3, #0
 800b482:	d02c      	beq.n	800b4de <WiFi_Conn_ND+0x162e>
								{
								EnviarDatosSRVR(b);
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f7fb f96f 	bl	8006768 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b490:	2b01      	cmp	r3, #1
 800b492:	d124      	bne.n	800b4de <WiFi_Conn_ND+0x162e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7fb fa63 	bl	8006960 <AT_ESP8266_ND>
 800b49a:	4602      	mov	r2, r0
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d109      	bne.n	800b4c8 <WiFi_Conn_ND+0x1618>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	f7f6 f836 	bl	8001534 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	2364      	movs	r3, #100	; 0x64
 800b4d8:	68b8      	ldr	r0, [r7, #8]
 800b4da:	f7fa f82f 	bl	800553c <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b4e8:	d154      	bne.n	800b594 <WiFi_Conn_ND+0x16e4>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d14f      	bne.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_error)&&
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d04a      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_disconnect)&&
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b504:	2b0a      	cmp	r3, #10
 800b506:	d045      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_connected)&&
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b50e:	2b0b      	cmp	r3, #11
 800b510:	d040      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_gotip)&&
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b518:	2b0c      	cmp	r3, #12
 800b51a:	d03b      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_desconectado)&&
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b522:	2b10      	cmp	r3, #16
 800b524:	d036      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_snd_err)&&
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b52c:	2b11      	cmp	r3, #17
 800b52e:	d031      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b536:	2b12      	cmp	r3, #18
 800b538:	d02c      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b540:	2b13      	cmp	r3, #19
 800b542:	d027      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b54a:	2b16      	cmp	r3, #22
 800b54c:	d022      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b554:	2b19      	cmp	r3, #25
 800b556:	d01d      	beq.n	800b594 <WiFi_Conn_ND+0x16e4>
										{
											b->_enviaruart=0;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b566:	2b01      	cmp	r3, #1
 800b568:	d109      	bne.n	800b57e <WiFi_Conn_ND+0x16ce>
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b576:	4619      	mov	r1, r3
 800b578:	4610      	mov	r0, r2
 800b57a:	f7f5 ffdb 	bl	8001534 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b58a:	b29a      	uxth	r2, r3
 800b58c:	2364      	movs	r3, #100	; 0x64
 800b58e:	68b8      	ldr	r0, [r7, #8]
 800b590:	f7f9 ffd4 	bl	800553c <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b59a:	2b13      	cmp	r3, #19
 800b59c:	d104      	bne.n	800b5a8 <WiFi_Conn_ND+0x16f8>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f240 328d 	movw	r2, #909	; 0x38d
 800b5a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d02d      	beq.n	800b60e <WiFi_Conn_ND+0x175e>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	d028      	beq.n	800b60e <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b5c2:	2b0a      	cmp	r3, #10
 800b5c4:	d023      	beq.n	800b60e <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5cc:	2b0b      	cmp	r3, #11
 800b5ce:	d01e      	beq.n	800b60e <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b5d6:	2b0c      	cmp	r3, #12
 800b5d8:	d019      	beq.n	800b60e <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e0:	2b10      	cmp	r3, #16
 800b5e2:	d014      	beq.n	800b60e <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b5ea:	2b11      	cmp	r3, #17
 800b5ec:	d00f      	beq.n	800b60e <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f4:	2b12      	cmp	r3, #18
 800b5f6:	d00a      	beq.n	800b60e <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b5fe:	2b16      	cmp	r3, #22
 800b600:	d005      	beq.n	800b60e <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b608:	2b19      	cmp	r3, #25
 800b60a:	f040 8124 	bne.w	800b856 <WiFi_Conn_ND+0x19a6>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f240 3289 	movw	r2, #905	; 0x389
 800b614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b618:	e11d      	b.n	800b856 <WiFi_Conn_ND+0x19a6>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7fa fff4 	bl	8006608 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b626:	2b04      	cmp	r3, #4
 800b628:	d009      	beq.n	800b63e <WiFi_Conn_ND+0x178e>
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b630:	2b0b      	cmp	r3, #11
 800b632:	d004      	beq.n	800b63e <WiFi_Conn_ND+0x178e>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b63a:	2b0c      	cmp	r3, #12
 800b63c:	d112      	bne.n	800b664 <WiFi_Conn_ND+0x17b4>
							{
								Cambiar_CWMODE(b);
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7fa fff8 	bl	8006634 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2264      	movs	r2, #100	; 0x64
 800b648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b66a:	2b0a      	cmp	r3, #10
 800b66c:	d009      	beq.n	800b682 <WiFi_Conn_ND+0x17d2>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b674:	2b0d      	cmp	r3, #13
 800b676:	d004      	beq.n	800b682 <WiFi_Conn_ND+0x17d2>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d10e      	bne.n	800b6a0 <WiFi_Conn_ND+0x17f0>
							{
								ConectarWIFI(b);
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f7fa ffec 	bl	8006660 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	22c8      	movs	r2, #200	; 0xc8
 800b68c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a6:	2b16      	cmp	r3, #22
 800b6a8:	d10c      	bne.n	800b6c4 <WiFi_Conn_ND+0x1814>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f240 3225 	movw	r2, #805	; 0x325
 800b6b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ca:	2b18      	cmp	r3, #24
 800b6cc:	d10c      	bne.n	800b6e8 <WiFi_Conn_ND+0x1838>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f240 3229 	movw	r2, #809	; 0x329
 800b6d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ee:	2b19      	cmp	r3, #25
 800b6f0:	d008      	beq.n	800b704 <WiFi_Conn_ND+0x1854>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6f8:	2b11      	cmp	r3, #17
 800b6fa:	d003      	beq.n	800b704 <WiFi_Conn_ND+0x1854>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2212      	movs	r2, #18
 800b700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	f040 80a5 	bne.w	800b85a <WiFi_Conn_ND+0x19aa>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b72a:	e096      	b.n	800b85a <WiFi_Conn_ND+0x19aa>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7fa ff6b 	bl	8006608 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b738:	2b04      	cmp	r3, #4
 800b73a:	d009      	beq.n	800b750 <WiFi_Conn_ND+0x18a0>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b742:	2b0b      	cmp	r3, #11
 800b744:	d004      	beq.n	800b750 <WiFi_Conn_ND+0x18a0>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b74c:	2b0c      	cmp	r3, #12
 800b74e:	d112      	bne.n	800b776 <WiFi_Conn_ND+0x18c6>
								{
									Cambiar_CWMODE(b);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7fa ff6f 	bl	8006634 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2264      	movs	r2, #100	; 0x64
 800b75a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b77c:	2b0a      	cmp	r3, #10
 800b77e:	d009      	beq.n	800b794 <WiFi_Conn_ND+0x18e4>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b786:	2b0d      	cmp	r3, #13
 800b788:	d004      	beq.n	800b794 <WiFi_Conn_ND+0x18e4>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b790:	2b03      	cmp	r3, #3
 800b792:	d10e      	bne.n	800b7b2 <WiFi_Conn_ND+0x1902>
								{
									ConectarWIFI(b);
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f7fa ff63 	bl	8006660 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	22c8      	movs	r2, #200	; 0xc8
 800b79e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d004      	beq.n	800b7c6 <WiFi_Conn_ND+0x1916>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d14b      	bne.n	800b85e <WiFi_Conn_ND+0x19ae>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d046      	beq.n	800b85e <WiFi_Conn_ND+0x19ae>
								{
									EnviarDatosSRVR(b);
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f7fa ffc9 	bl	8006768 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b7dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b800:	e02d      	b.n	800b85e <WiFi_Conn_ND+0x19ae>
			break;
 800b802:	bf00      	nop
 800b804:	e02c      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b806:	bf00      	nop
 800b808:	e02a      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b80a:	bf00      	nop
 800b80c:	e028      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b80e:	bf00      	nop
 800b810:	e026      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b812:	bf00      	nop
 800b814:	e024      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b816:	bf00      	nop
 800b818:	e022      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b81a:	bf00      	nop
 800b81c:	e020      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b81e:	bf00      	nop
 800b820:	e01e      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b822:	bf00      	nop
 800b824:	e01c      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b826:	bf00      	nop
 800b828:	e01a      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b82a:	bf00      	nop
 800b82c:	e018      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b82e:	bf00      	nop
 800b830:	e016      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b832:	bf00      	nop
 800b834:	e014      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b836:	bf00      	nop
 800b838:	e012      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
			break;
 800b83a:	bf00      	nop
 800b83c:	e010      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
						break;
 800b83e:	bf00      	nop
 800b840:	e00e      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
						break;
 800b842:	bf00      	nop
 800b844:	e00c      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
						break;
 800b846:	bf00      	nop
 800b848:	e00a      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
						break;
 800b84a:	bf00      	nop
 800b84c:	e008      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
						break;
 800b84e:	bf00      	nop
 800b850:	e006      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
						break;
 800b852:	bf00      	nop
 800b854:	e004      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
						break;
 800b856:	bf00      	nop
 800b858:	e002      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
						break;
 800b85a:	bf00      	nop
 800b85c:	e000      	b.n	800b860 <WiFi_Conn_ND+0x19b0>
						break;
 800b85e:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop

0800b870 <httpPOST>:

char deviceId[]={',','"','d','e','v','I','d','"',':','\0'};


httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b870:	b5b0      	push	{r4, r5, r7, lr}
 800b872:	b0a8      	sub	sp, #160	; 0xa0
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b87e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b882:	2200      	movs	r2, #0
 800b884:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b88a:	2200      	movs	r2, #0
 800b88c:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b88e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b892:	f7f4 fcaf 	bl	80001f4 <strlen>
 800b896:	4603      	mov	r3, r0
 800b898:	461a      	mov	r2, r3
 800b89a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b89e:	4413      	add	r3, r2
 800b8a0:	4aed      	ldr	r2, [pc, #948]	; (800bc58 <httpPOST+0x3e8>)
 800b8a2:	6810      	ldr	r0, [r2, #0]
 800b8a4:	6018      	str	r0, [r3, #0]
 800b8a6:	8892      	ldrh	r2, [r2, #4]
 800b8a8:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f7f4 fca2 	bl	80001f4 <strlen>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	68f9      	ldr	r1, [r7, #12]
 800b8b6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b8ba:	f003 fe66 	bl	800f58a <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b8be:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b8c2:	f7f4 fc97 	bl	80001f4 <strlen>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b8ce:	4413      	add	r3, r2
 800b8d0:	49e2      	ldr	r1, [pc, #904]	; (800bc5c <httpPOST+0x3ec>)
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	cb03      	ldmia	r3!, {r0, r1}
 800b8d8:	6010      	str	r0, [r2, #0]
 800b8da:	6051      	str	r1, [r2, #4]
 800b8dc:	8819      	ldrh	r1, [r3, #0]
 800b8de:	789b      	ldrb	r3, [r3, #2]
 800b8e0:	8111      	strh	r1, [r2, #8]
 800b8e2:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b8e4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b8e8:	f7f4 fc84 	bl	80001f4 <strlen>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b8f4:	4413      	add	r3, r2
 800b8f6:	4ada      	ldr	r2, [pc, #872]	; (800bc60 <httpPOST+0x3f0>)
 800b8f8:	8811      	ldrh	r1, [r2, #0]
 800b8fa:	7892      	ldrb	r2, [r2, #2]
 800b8fc:	8019      	strh	r1, [r3, #0]
 800b8fe:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b900:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b904:	f7f4 fc76 	bl	80001f4 <strlen>
 800b908:	4603      	mov	r3, r0
 800b90a:	461a      	mov	r2, r3
 800b90c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b910:	4413      	add	r3, r2
 800b912:	4ad4      	ldr	r2, [pc, #848]	; (800bc64 <httpPOST+0x3f4>)
 800b914:	6810      	ldr	r0, [r2, #0]
 800b916:	6018      	str	r0, [r3, #0]
 800b918:	8891      	ldrh	r1, [r2, #4]
 800b91a:	7992      	ldrb	r2, [r2, #6]
 800b91c:	8099      	strh	r1, [r3, #4]
 800b91e:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b920:	68b8      	ldr	r0, [r7, #8]
 800b922:	f7f4 fc67 	bl	80001f4 <strlen>
 800b926:	4603      	mov	r3, r0
 800b928:	461a      	mov	r2, r3
 800b92a:	68b9      	ldr	r1, [r7, #8]
 800b92c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b930:	f003 fe2b 	bl	800f58a <strncat>
	strncat(post,":",1);
 800b934:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b938:	f7f4 fc5c 	bl	80001f4 <strlen>
 800b93c:	4603      	mov	r3, r0
 800b93e:	461a      	mov	r2, r3
 800b940:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b944:	4413      	add	r3, r2
 800b946:	49c8      	ldr	r1, [pc, #800]	; (800bc68 <httpPOST+0x3f8>)
 800b948:	461a      	mov	r2, r3
 800b94a:	460b      	mov	r3, r1
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7f4 fc4f 	bl	80001f4 <strlen>
 800b956:	4603      	mov	r3, r0
 800b958:	461a      	mov	r2, r3
 800b95a:	6879      	ldr	r1, [r7, #4]
 800b95c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b960:	f003 fe13 	bl	800f58a <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b964:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b968:	f7f4 fc44 	bl	80001f4 <strlen>
 800b96c:	4603      	mov	r3, r0
 800b96e:	461a      	mov	r2, r3
 800b970:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b974:	4413      	add	r3, r2
 800b976:	4aba      	ldr	r2, [pc, #744]	; (800bc60 <httpPOST+0x3f0>)
 800b978:	8811      	ldrh	r1, [r2, #0]
 800b97a:	7892      	ldrb	r2, [r2, #2]
 800b97c:	8019      	strh	r1, [r3, #0]
 800b97e:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b980:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b984:	f7f4 fc36 	bl	80001f4 <strlen>
 800b988:	4603      	mov	r3, r0
 800b98a:	461a      	mov	r2, r3
 800b98c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b990:	4413      	add	r3, r2
 800b992:	4ab6      	ldr	r2, [pc, #728]	; (800bc6c <httpPOST+0x3fc>)
 800b994:	461d      	mov	r5, r3
 800b996:	4614      	mov	r4, r2
 800b998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b99a:	6028      	str	r0, [r5, #0]
 800b99c:	6069      	str	r1, [r5, #4]
 800b99e:	60aa      	str	r2, [r5, #8]
 800b9a0:	60eb      	str	r3, [r5, #12]
 800b9a2:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b9a4:	6128      	str	r0, [r5, #16]
 800b9a6:	6169      	str	r1, [r5, #20]
 800b9a8:	61aa      	str	r2, [r5, #24]
 800b9aa:	8823      	ldrh	r3, [r4, #0]
 800b9ac:	78a2      	ldrb	r2, [r4, #2]
 800b9ae:	83ab      	strh	r3, [r5, #28]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b9b4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b9b8:	f7f4 fc1c 	bl	80001f4 <strlen>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9c4:	4413      	add	r3, r2
 800b9c6:	4aa6      	ldr	r2, [pc, #664]	; (800bc60 <httpPOST+0x3f0>)
 800b9c8:	8811      	ldrh	r1, [r2, #0]
 800b9ca:	7892      	ldrb	r2, [r2, #2]
 800b9cc:	8019      	strh	r1, [r3, #0]
 800b9ce:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b9d0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b9d4:	f7f4 fc0e 	bl	80001f4 <strlen>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	461a      	mov	r2, r3
 800b9dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9e0:	4413      	add	r3, r2
 800b9e2:	4aa3      	ldr	r2, [pc, #652]	; (800bc70 <httpPOST+0x400>)
 800b9e4:	461c      	mov	r4, r3
 800b9e6:	4615      	mov	r5, r2
 800b9e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9ea:	6020      	str	r0, [r4, #0]
 800b9ec:	6061      	str	r1, [r4, #4]
 800b9ee:	60a2      	str	r2, [r4, #8]
 800b9f0:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800b9f8:	887b      	ldrh	r3, [r7, #2]
 800b9fa:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b9fe:	4611      	mov	r1, r2
 800ba00:	4618      	mov	r0, r3
 800ba02:	f003 fb3b 	bl	800f07c <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800ba06:	2300      	movs	r3, #0
 800ba08:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800ba0c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800ba10:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800ba14:	4611      	mov	r1, r2
 800ba16:	4618      	mov	r0, r3
 800ba18:	f003 fb30 	bl	800f07c <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800ba22:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800ba26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f003 fb25 	bl	800f07c <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800ba32:	2300      	movs	r3, #0
 800ba34:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800ba38:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800ba3c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800ba40:	4611      	mov	r1, r2
 800ba42:	4618      	mov	r0, r3
 800ba44:	f003 fb1a 	bl	800f07c <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800ba4e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800ba52:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ba56:	4611      	mov	r1, r2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f003 fb0f 	bl	800f07c <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800ba64:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800ba68:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f003 fb04 	bl	800f07c <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800ba74:	2300      	movs	r3, #0
 800ba76:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800ba7a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800ba7e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800ba82:	4611      	mov	r1, r2
 800ba84:	4618      	mov	r0, r3
 800ba86:	f003 faf9 	bl	800f07c <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800ba90:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800ba94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ba98:	4611      	mov	r1, r2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f003 faee 	bl	800f07c <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800baa0:	2300      	movs	r3, #0
 800baa2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800baa6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800baaa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800baae:	4611      	mov	r1, r2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f003 fae3 	bl	800f07c <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800bab6:	2300      	movs	r3, #0
 800bab8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800babc:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800bac0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bac4:	4611      	mov	r1, r2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f003 fad8 	bl	800f07c <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800bacc:	2300      	movs	r3, #0
 800bace:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800bad2:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800bad6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bada:	4611      	mov	r1, r2
 800badc:	4618      	mov	r0, r3
 800bade:	f003 facd 	bl	800f07c <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800bae2:	2300      	movs	r3, #0
 800bae4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800bae8:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800baec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800baf0:	4611      	mov	r1, r2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f003 fac2 	bl	800f07c <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800baf8:	2300      	movs	r3, #0
 800bafa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800bafe:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800bb02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800bb06:	4611      	mov	r1, r2
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f003 fab7 	bl	800f07c <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800bb14:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800bb18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f003 faac 	bl	800f07c <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800bb24:	2300      	movs	r3, #0
 800bb26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800bb2a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800bb2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bb32:	4611      	mov	r1, r2
 800bb34:	4618      	mov	r0, r3
 800bb36:	f003 faa1 	bl	800f07c <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800bb40:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800bb44:	f107 0220 	add.w	r2, r7, #32
 800bb48:	4611      	mov	r1, r2
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f003 fa96 	bl	800f07c <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800bb50:	2300      	movs	r3, #0
 800bb52:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800bb54:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800bb58:	f107 0218 	add.w	r2, r7, #24
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f003 fa8c 	bl	800f07c <INTOA>

	strncat(body,dd1,strlen(dd1));
 800bb64:	4843      	ldr	r0, [pc, #268]	; (800bc74 <httpPOST+0x404>)
 800bb66:	f7f4 fb45 	bl	80001f4 <strlen>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	4941      	ldr	r1, [pc, #260]	; (800bc74 <httpPOST+0x404>)
 800bb70:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb74:	f003 fd09 	bl	800f58a <strncat>
	strncat(body,_d1,strlen(_d1));
 800bb78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f4 fb39 	bl	80001f4 <strlen>
 800bb82:	4602      	mov	r2, r0
 800bb84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bb88:	4619      	mov	r1, r3
 800bb8a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb8e:	f003 fcfc 	bl	800f58a <strncat>

	strncat(body,dd2,strlen(dd2));
 800bb92:	4839      	ldr	r0, [pc, #228]	; (800bc78 <httpPOST+0x408>)
 800bb94:	f7f4 fb2e 	bl	80001f4 <strlen>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	4936      	ldr	r1, [pc, #216]	; (800bc78 <httpPOST+0x408>)
 800bb9e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bba2:	f003 fcf2 	bl	800f58a <strncat>
	strncat(body,_d2,strlen(_d2));
 800bba6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f4 fb22 	bl	80001f4 <strlen>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbbc:	f003 fce5 	bl	800f58a <strncat>

	strncat(body,dd3,strlen(dd3));
 800bbc0:	482e      	ldr	r0, [pc, #184]	; (800bc7c <httpPOST+0x40c>)
 800bbc2:	f7f4 fb17 	bl	80001f4 <strlen>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	461a      	mov	r2, r3
 800bbca:	492c      	ldr	r1, [pc, #176]	; (800bc7c <httpPOST+0x40c>)
 800bbcc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbd0:	f003 fcdb 	bl	800f58a <strncat>
	strncat(body,_d3,strlen(_d3));
 800bbd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f4 fb0b 	bl	80001f4 <strlen>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbea:	f003 fcce 	bl	800f58a <strncat>

	strncat(body,dd4,strlen(dd4));
 800bbee:	4824      	ldr	r0, [pc, #144]	; (800bc80 <httpPOST+0x410>)
 800bbf0:	f7f4 fb00 	bl	80001f4 <strlen>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	4921      	ldr	r1, [pc, #132]	; (800bc80 <httpPOST+0x410>)
 800bbfa:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbfe:	f003 fcc4 	bl	800f58a <strncat>
	strncat(body,_d4,strlen(_d4));
 800bc02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7f4 faf4 	bl	80001f4 <strlen>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bc12:	4619      	mov	r1, r3
 800bc14:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc18:	f003 fcb7 	bl	800f58a <strncat>

	strncat(body,dd5,strlen(dd5));
 800bc1c:	4819      	ldr	r0, [pc, #100]	; (800bc84 <httpPOST+0x414>)
 800bc1e:	f7f4 fae9 	bl	80001f4 <strlen>
 800bc22:	4603      	mov	r3, r0
 800bc24:	461a      	mov	r2, r3
 800bc26:	4917      	ldr	r1, [pc, #92]	; (800bc84 <httpPOST+0x414>)
 800bc28:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc2c:	f003 fcad 	bl	800f58a <strncat>
	strncat(body,_d5,strlen(_d5));
 800bc30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7f4 fadd 	bl	80001f4 <strlen>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bc40:	4619      	mov	r1, r3
 800bc42:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc46:	f003 fca0 	bl	800f58a <strncat>

	strncat(body,dd6,strlen(dd6));
 800bc4a:	480f      	ldr	r0, [pc, #60]	; (800bc88 <httpPOST+0x418>)
 800bc4c:	f7f4 fad2 	bl	80001f4 <strlen>
 800bc50:	4603      	mov	r3, r0
 800bc52:	461a      	mov	r2, r3
 800bc54:	e01a      	b.n	800bc8c <httpPOST+0x41c>
 800bc56:	bf00      	nop
 800bc58:	08010be8 	.word	0x08010be8
 800bc5c:	08010bf0 	.word	0x08010bf0
 800bc60:	08010bfc 	.word	0x08010bfc
 800bc64:	08010c00 	.word	0x08010c00
 800bc68:	08010c08 	.word	0x08010c08
 800bc6c:	08010c0c 	.word	0x08010c0c
 800bc70:	08010c2c 	.word	0x08010c2c
 800bc74:	20000090 	.word	0x20000090
 800bc78:	20000098 	.word	0x20000098
 800bc7c:	200000a0 	.word	0x200000a0
 800bc80:	200000a8 	.word	0x200000a8
 800bc84:	200000b0 	.word	0x200000b0
 800bc88:	200000b8 	.word	0x200000b8
 800bc8c:	49af      	ldr	r1, [pc, #700]	; (800bf4c <httpPOST+0x6dc>)
 800bc8e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc92:	f003 fc7a 	bl	800f58a <strncat>
	strncat(body,_d6,strlen(_d6));
 800bc96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7f4 faaa 	bl	80001f4 <strlen>
 800bca0:	4602      	mov	r2, r0
 800bca2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bca6:	4619      	mov	r1, r3
 800bca8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcac:	f003 fc6d 	bl	800f58a <strncat>

	strncat(body,dd7,strlen(dd7));
 800bcb0:	48a7      	ldr	r0, [pc, #668]	; (800bf50 <httpPOST+0x6e0>)
 800bcb2:	f7f4 fa9f 	bl	80001f4 <strlen>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	461a      	mov	r2, r3
 800bcba:	49a5      	ldr	r1, [pc, #660]	; (800bf50 <httpPOST+0x6e0>)
 800bcbc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcc0:	f003 fc63 	bl	800f58a <strncat>
	strncat(body,_d7,strlen(_d7));
 800bcc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7f4 fa93 	bl	80001f4 <strlen>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcda:	f003 fc56 	bl	800f58a <strncat>

	strncat(body,dd8,strlen(dd8));
 800bcde:	489d      	ldr	r0, [pc, #628]	; (800bf54 <httpPOST+0x6e4>)
 800bce0:	f7f4 fa88 	bl	80001f4 <strlen>
 800bce4:	4603      	mov	r3, r0
 800bce6:	461a      	mov	r2, r3
 800bce8:	499a      	ldr	r1, [pc, #616]	; (800bf54 <httpPOST+0x6e4>)
 800bcea:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcee:	f003 fc4c 	bl	800f58a <strncat>
	strncat(body,_d8,strlen(_d8));
 800bcf2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7f4 fa7c 	bl	80001f4 <strlen>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bd02:	4619      	mov	r1, r3
 800bd04:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd08:	f003 fc3f 	bl	800f58a <strncat>

	strncat(body,dd9,strlen(dd9));
 800bd0c:	4892      	ldr	r0, [pc, #584]	; (800bf58 <httpPOST+0x6e8>)
 800bd0e:	f7f4 fa71 	bl	80001f4 <strlen>
 800bd12:	4603      	mov	r3, r0
 800bd14:	461a      	mov	r2, r3
 800bd16:	4990      	ldr	r1, [pc, #576]	; (800bf58 <httpPOST+0x6e8>)
 800bd18:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd1c:	f003 fc35 	bl	800f58a <strncat>
	strncat(body,_d9,strlen(_d9));
 800bd20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7f4 fa65 	bl	80001f4 <strlen>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd30:	4619      	mov	r1, r3
 800bd32:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd36:	f003 fc28 	bl	800f58a <strncat>

	strncat(body,dd10,strlen(dd10));
 800bd3a:	4888      	ldr	r0, [pc, #544]	; (800bf5c <httpPOST+0x6ec>)
 800bd3c:	f7f4 fa5a 	bl	80001f4 <strlen>
 800bd40:	4603      	mov	r3, r0
 800bd42:	461a      	mov	r2, r3
 800bd44:	4985      	ldr	r1, [pc, #532]	; (800bf5c <httpPOST+0x6ec>)
 800bd46:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd4a:	f003 fc1e 	bl	800f58a <strncat>
	strncat(body,_d10,strlen(_d10));
 800bd4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7f4 fa4e 	bl	80001f4 <strlen>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd5e:	4619      	mov	r1, r3
 800bd60:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd64:	f003 fc11 	bl	800f58a <strncat>

	strncat(body,dd11,strlen(dd11));
 800bd68:	487d      	ldr	r0, [pc, #500]	; (800bf60 <httpPOST+0x6f0>)
 800bd6a:	f7f4 fa43 	bl	80001f4 <strlen>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	461a      	mov	r2, r3
 800bd72:	497b      	ldr	r1, [pc, #492]	; (800bf60 <httpPOST+0x6f0>)
 800bd74:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd78:	f003 fc07 	bl	800f58a <strncat>
	strncat(body,_d11,strlen(_d11));
 800bd7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7f4 fa37 	bl	80001f4 <strlen>
 800bd86:	4602      	mov	r2, r0
 800bd88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd92:	f003 fbfa 	bl	800f58a <strncat>

	strncat(body,dd12,strlen(dd12));
 800bd96:	4873      	ldr	r0, [pc, #460]	; (800bf64 <httpPOST+0x6f4>)
 800bd98:	f7f4 fa2c 	bl	80001f4 <strlen>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	461a      	mov	r2, r3
 800bda0:	4970      	ldr	r1, [pc, #448]	; (800bf64 <httpPOST+0x6f4>)
 800bda2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bda6:	f003 fbf0 	bl	800f58a <strncat>
	strncat(body,_d12,strlen(_d12));
 800bdaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7f4 fa20 	bl	80001f4 <strlen>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bdba:	4619      	mov	r1, r3
 800bdbc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdc0:	f003 fbe3 	bl	800f58a <strncat>

	strncat(body,dd13,strlen(dd13));
 800bdc4:	4868      	ldr	r0, [pc, #416]	; (800bf68 <httpPOST+0x6f8>)
 800bdc6:	f7f4 fa15 	bl	80001f4 <strlen>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	461a      	mov	r2, r3
 800bdce:	4966      	ldr	r1, [pc, #408]	; (800bf68 <httpPOST+0x6f8>)
 800bdd0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdd4:	f003 fbd9 	bl	800f58a <strncat>
	strncat(body,_d13,strlen(_d13));
 800bdd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7f4 fa09 	bl	80001f4 <strlen>
 800bde2:	4602      	mov	r2, r0
 800bde4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bde8:	4619      	mov	r1, r3
 800bdea:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdee:	f003 fbcc 	bl	800f58a <strncat>

	strncat(body,dd14,strlen(dd14));
 800bdf2:	485e      	ldr	r0, [pc, #376]	; (800bf6c <httpPOST+0x6fc>)
 800bdf4:	f7f4 f9fe 	bl	80001f4 <strlen>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	495b      	ldr	r1, [pc, #364]	; (800bf6c <httpPOST+0x6fc>)
 800bdfe:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be02:	f003 fbc2 	bl	800f58a <strncat>
	strncat(body,_d14,strlen(_d14));
 800be06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f4 f9f2 	bl	80001f4 <strlen>
 800be10:	4602      	mov	r2, r0
 800be12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be16:	4619      	mov	r1, r3
 800be18:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be1c:	f003 fbb5 	bl	800f58a <strncat>

	strncat(body,dd15,strlen(dd15));
 800be20:	4853      	ldr	r0, [pc, #332]	; (800bf70 <httpPOST+0x700>)
 800be22:	f7f4 f9e7 	bl	80001f4 <strlen>
 800be26:	4603      	mov	r3, r0
 800be28:	461a      	mov	r2, r3
 800be2a:	4951      	ldr	r1, [pc, #324]	; (800bf70 <httpPOST+0x700>)
 800be2c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be30:	f003 fbab 	bl	800f58a <strncat>
	strncat(body,_d15,strlen(_d15));
 800be34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f4 f9db 	bl	80001f4 <strlen>
 800be3e:	4602      	mov	r2, r0
 800be40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be44:	4619      	mov	r1, r3
 800be46:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be4a:	f003 fb9e 	bl	800f58a <strncat>

	strncat(body,dd16,strlen(dd16));
 800be4e:	4849      	ldr	r0, [pc, #292]	; (800bf74 <httpPOST+0x704>)
 800be50:	f7f4 f9d0 	bl	80001f4 <strlen>
 800be54:	4603      	mov	r3, r0
 800be56:	461a      	mov	r2, r3
 800be58:	4946      	ldr	r1, [pc, #280]	; (800bf74 <httpPOST+0x704>)
 800be5a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be5e:	f003 fb94 	bl	800f58a <strncat>
	strncat(body,_d16,strlen(_d16));
 800be62:	f107 0320 	add.w	r3, r7, #32
 800be66:	4618      	mov	r0, r3
 800be68:	f7f4 f9c4 	bl	80001f4 <strlen>
 800be6c:	4602      	mov	r2, r0
 800be6e:	f107 0320 	add.w	r3, r7, #32
 800be72:	4619      	mov	r1, r3
 800be74:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be78:	f003 fb87 	bl	800f58a <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800be7c:	483e      	ldr	r0, [pc, #248]	; (800bf78 <httpPOST+0x708>)
 800be7e:	f7f4 f9b9 	bl	80001f4 <strlen>
 800be82:	4603      	mov	r3, r0
 800be84:	461a      	mov	r2, r3
 800be86:	493c      	ldr	r1, [pc, #240]	; (800bf78 <httpPOST+0x708>)
 800be88:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be8c:	f003 fb7d 	bl	800f58a <strncat>
	strncat(body,_devId,strlen(_devId));
 800be90:	f107 0318 	add.w	r3, r7, #24
 800be94:	4618      	mov	r0, r3
 800be96:	f7f4 f9ad 	bl	80001f4 <strlen>
 800be9a:	4602      	mov	r2, r0
 800be9c:	f107 0318 	add.w	r3, r7, #24
 800bea0:	4619      	mov	r1, r3
 800bea2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bea6:	f003 fb70 	bl	800f58a <strncat>

	strncat(body,"}",strlen("}"));
 800beaa:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800beae:	f7f4 f9a1 	bl	80001f4 <strlen>
 800beb2:	4603      	mov	r3, r0
 800beb4:	461a      	mov	r2, r3
 800beb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beba:	4413      	add	r3, r2
 800bebc:	492f      	ldr	r1, [pc, #188]	; (800bf7c <httpPOST+0x70c>)
 800bebe:	461a      	mov	r2, r3
 800bec0:	460b      	mov	r3, r1
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800bec6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800beca:	f7f4 f993 	bl	80001f4 <strlen>
 800bece:	4602      	mov	r2, r0
 800bed0:	f107 0310 	add.w	r3, r7, #16
 800bed4:	4619      	mov	r1, r3
 800bed6:	4610      	mov	r0, r2
 800bed8:	f003 f8d0 	bl	800f07c <INTOA>
	strncat(post,length,strlen(length));
 800bedc:	f107 0310 	add.w	r3, r7, #16
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7f4 f987 	bl	80001f4 <strlen>
 800bee6:	4602      	mov	r2, r0
 800bee8:	f107 0310 	add.w	r3, r7, #16
 800beec:	4619      	mov	r1, r3
 800beee:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bef2:	f003 fb4a 	bl	800f58a <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800bef6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800befa:	f7f4 f97b 	bl	80001f4 <strlen>
 800befe:	4603      	mov	r3, r0
 800bf00:	461a      	mov	r2, r3
 800bf02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf06:	4413      	add	r3, r2
 800bf08:	4a1d      	ldr	r2, [pc, #116]	; (800bf80 <httpPOST+0x710>)
 800bf0a:	6810      	ldr	r0, [r2, #0]
 800bf0c:	6018      	str	r0, [r3, #0]
 800bf0e:	7912      	ldrb	r2, [r2, #4]
 800bf10:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800bf12:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf16:	f7f4 f96d 	bl	80001f4 <strlen>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d20d      	bcs.n	800bf40 <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800bf24:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf28:	f7f4 f964 	bl	80001f4 <strlen>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	461a      	mov	r2, r3
 800bf30:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800bf34:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bf38:	f003 fb27 	bl	800f58a <strncat>
		return 1 ;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e000      	b.n	800bf42 <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800bf40:	2300      	movs	r3, #0
		}
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	37a0      	adds	r7, #160	; 0xa0
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bdb0      	pop	{r4, r5, r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200000b8 	.word	0x200000b8
 800bf50:	200000c0 	.word	0x200000c0
 800bf54:	200000c8 	.word	0x200000c8
 800bf58:	200000d0 	.word	0x200000d0
 800bf5c:	200000d8 	.word	0x200000d8
 800bf60:	200000e0 	.word	0x200000e0
 800bf64:	200000e8 	.word	0x200000e8
 800bf68:	200000f0 	.word	0x200000f0
 800bf6c:	200000f8 	.word	0x200000f8
 800bf70:	20000100 	.word	0x20000100
 800bf74:	20000108 	.word	0x20000108
 800bf78:	20000110 	.word	0x20000110
 800bf7c:	08010c3c 	.word	0x08010c3c
 800bf80:	08010c40 	.word	0x08010c40

0800bf84 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800bf84:	b5b0      	push	{r4, r5, r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bf94:	2bf1      	cmp	r3, #241	; 0xf1
 800bf96:	dd01      	ble.n	800bf9c <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e099      	b.n	800c0d0 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bfa6:	f107 0108 	add.w	r1, r7, #8
 800bfaa:	220a      	movs	r2, #10
 800bfac:	4618      	mov	r0, r3
 800bfae:	f003 f900 	bl	800f1b2 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f7f4 f917 	bl	80001f4 <strlen>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	4423      	add	r3, r4
 800bfca:	4943      	ldr	r1, [pc, #268]	; (800c0d8 <LoRa_Send+0x154>)
 800bfcc:	461a      	mov	r2, r3
 800bfce:	460b      	mov	r3, r1
 800bfd0:	cb03      	ldmia	r3!, {r0, r1}
 800bfd2:	6010      	str	r0, [r2, #0]
 800bfd4:	6051      	str	r1, [r2, #4]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f103 0516 	add.w	r5, r3, #22
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	3316      	adds	r3, #22
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f4 f902 	bl	80001f4 <strlen>
 800bff0:	4603      	mov	r3, r0
 800bff2:	461a      	mov	r2, r3
 800bff4:	4629      	mov	r1, r5
 800bff6:	4620      	mov	r0, r4
 800bff8:	f003 fac7 	bl	800f58a <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c002:	4620      	mov	r0, r4
 800c004:	f7f4 f8f6 	bl	80001f4 <strlen>
 800c008:	4603      	mov	r3, r0
 800c00a:	4423      	add	r3, r4
 800c00c:	4933      	ldr	r1, [pc, #204]	; (800c0dc <LoRa_Send+0x158>)
 800c00e:	461a      	mov	r2, r3
 800c010:	460b      	mov	r3, r1
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c01c:	f107 0308 	add.w	r3, r7, #8
 800c020:	4618      	mov	r0, r3
 800c022:	f7f4 f8e7 	bl	80001f4 <strlen>
 800c026:	4602      	mov	r2, r0
 800c028:	f107 0308 	add.w	r3, r7, #8
 800c02c:	4619      	mov	r1, r3
 800c02e:	4620      	mov	r0, r4
 800c030:	f003 faab 	bl	800f58a <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c03a:	4620      	mov	r0, r4
 800c03c:	f7f4 f8da 	bl	80001f4 <strlen>
 800c040:	4603      	mov	r3, r0
 800c042:	4423      	add	r3, r4
 800c044:	4925      	ldr	r1, [pc, #148]	; (800c0dc <LoRa_Send+0x158>)
 800c046:	461a      	mov	r2, r3
 800c048:	460b      	mov	r3, r1
 800c04a:	881b      	ldrh	r3, [r3, #0]
 800c04c:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c054:	4618      	mov	r0, r3
 800c056:	f7f4 f8cd 	bl	80001f4 <strlen>
 800c05a:	4603      	mov	r3, r0
 800c05c:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	4413      	add	r3, r2
 800c068:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800c06e:	e012      	b.n	800c096 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	4413      	add	r3, r2
 800c076:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800c07a:	7819      	ldrb	r1, [r3, #0]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	4413      	add	r3, r2
 800c082:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c086:	460a      	mov	r2, r1
 800c088:	701a      	strb	r2, [r3, #0]
			la++;
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	3301      	adds	r3, #1
 800c08e:	617b      	str	r3, [r7, #20]
			lc++;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	3301      	adds	r3, #1
 800c094:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	dbe8      	blt.n	800c070 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	1c5a      	adds	r2, r3, #1
 800c0a2:	617a      	str	r2, [r7, #20]
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	220d      	movs	r2, #13
 800c0aa:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	1c5a      	adds	r2, r3, #1
 800c0b2:	617a      	str	r2, [r7, #20]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	220a      	movs	r2, #10
 800c0ba:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	b292      	uxth	r2, r2
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6838      	ldr	r0, [r7, #0]
 800c0cc:	f7f9 fac8 	bl	8005660 <HAL_UART_Transmit_IT>
	}

}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3718      	adds	r7, #24
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c0d8:	08010c48 	.word	0x08010c48
 800c0dc:	08010c54 	.word	0x08010c54

0800c0e0 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800c10a:	bf00      	nop
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
	...

0800c118 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fa25 	bl	800c570 <Lora_idSTR>
 800c126:	4603      	mov	r3, r0
 800c128:	2b10      	cmp	r3, #16
 800c12a:	f200 820c 	bhi.w	800c546 <LoRa_decode+0x42e>
 800c12e:	a201      	add	r2, pc, #4	; (adr r2, 800c134 <LoRa_decode+0x1c>)
 800c130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c134:	0800c179 	.word	0x0800c179
 800c138:	0800c251 	.word	0x0800c251
 800c13c:	0800c485 	.word	0x0800c485
 800c140:	0800c48f 	.word	0x0800c48f
 800c144:	0800c499 	.word	0x0800c499
 800c148:	0800c4a3 	.word	0x0800c4a3
 800c14c:	0800c4ad 	.word	0x0800c4ad
 800c150:	0800c4b7 	.word	0x0800c4b7
 800c154:	0800c4c1 	.word	0x0800c4c1
 800c158:	0800c4cb 	.word	0x0800c4cb
 800c15c:	0800c4d5 	.word	0x0800c4d5
 800c160:	0800c515 	.word	0x0800c515
 800c164:	0800c51f 	.word	0x0800c51f
 800c168:	0800c533 	.word	0x0800c533
 800c16c:	0800c529 	.word	0x0800c529
 800c170:	0800c47b 	.word	0x0800c47b
 800c174:	0800c53d 	.word	0x0800c53d
	{
		case _OK:
		{
			switch(b->estado)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800c17e:	3b01      	subs	r3, #1
 800c180:	2b13      	cmp	r3, #19
 800c182:	d860      	bhi.n	800c246 <LoRa_decode+0x12e>
 800c184:	a201      	add	r2, pc, #4	; (adr r2, 800c18c <LoRa_decode+0x74>)
 800c186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18a:	bf00      	nop
 800c18c:	0800c1dd 	.word	0x0800c1dd
 800c190:	0800c247 	.word	0x0800c247
 800c194:	0800c247 	.word	0x0800c247
 800c198:	0800c247 	.word	0x0800c247
 800c19c:	0800c247 	.word	0x0800c247
 800c1a0:	0800c247 	.word	0x0800c247
 800c1a4:	0800c1e7 	.word	0x0800c1e7
 800c1a8:	0800c1f1 	.word	0x0800c1f1
 800c1ac:	0800c247 	.word	0x0800c247
 800c1b0:	0800c1fb 	.word	0x0800c1fb
 800c1b4:	0800c247 	.word	0x0800c247
 800c1b8:	0800c205 	.word	0x0800c205
 800c1bc:	0800c247 	.word	0x0800c247
 800c1c0:	0800c20f 	.word	0x0800c20f
 800c1c4:	0800c247 	.word	0x0800c247
 800c1c8:	0800c219 	.word	0x0800c219
 800c1cc:	0800c247 	.word	0x0800c247
 800c1d0:	0800c223 	.word	0x0800c223
 800c1d4:	0800c247 	.word	0x0800c247
 800c1d8:	0800c22d 	.word	0x0800c22d
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c1e4:	e02f      	b.n	800c246 <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2206      	movs	r2, #6
 800c1ea:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c1ee:	e02a      	b.n	800c246 <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2209      	movs	r2, #9
 800c1f4:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c1f8:	e025      	b.n	800c246 <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	220b      	movs	r2, #11
 800c1fe:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c202:	e020      	b.n	800c246 <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	220d      	movs	r2, #13
 800c208:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c20c:	e01b      	b.n	800c246 <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	220f      	movs	r2, #15
 800c212:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c216:	e016      	b.n	800c246 <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2211      	movs	r2, #17
 800c21c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c220:	e011      	b.n	800c246 <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2213      	movs	r2, #19
 800c226:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c22a:	e00c      	b.n	800c246 <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2215      	movs	r2, #21
 800c230:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800c23c:	2111      	movs	r1, #17
 800c23e:	48a8      	ldr	r0, [pc, #672]	; (800c4e0 <LoRa_decode+0x3c8>)
 800c240:	f7f5 f978 	bl	8001534 <ITM0_Write>
					}
					break;
 800c244:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800c246:	210c      	movs	r1, #12
 800c248:	48a6      	ldr	r0, [pc, #664]	; (800c4e4 <LoRa_decode+0x3cc>)
 800c24a:	f7f5 f973 	bl	8001534 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800c24e:	e17f      	b.n	800c550 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800c250:	210d      	movs	r1, #13
 800c252:	48a5      	ldr	r0, [pc, #660]	; (800c4e8 <LoRa_decode+0x3d0>)
 800c254:	f7f5 f96e 	bl	8001534 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	221a      	movs	r2, #26
 800c25c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800c268:	2300      	movs	r3, #0
 800c26a:	617b      	str	r3, [r7, #20]
					int j=0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800c270:	2300      	movs	r3, #0
 800c272:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800c274:	e002      	b.n	800c27c <LoRa_decode+0x164>
					{ i++;}
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	3301      	adds	r3, #1
 800c27a:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	4413      	add	r3, r2
 800c282:	3356      	adds	r3, #86	; 0x56
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	2b3d      	cmp	r3, #61	; 0x3d
 800c288:	d1f5      	bne.n	800c276 <LoRa_decode+0x15e>
					i++;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	3301      	adds	r3, #1
 800c28e:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c290:	e017      	b.n	800c2c2 <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	4413      	add	r3, r2
 800c298:	3356      	adds	r3, #86	; 0x56
 800c29a:	7819      	ldrb	r1, [r3, #0]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	3306      	adds	r3, #6
 800c2a4:	460a      	mov	r2, r1
 800c2a6:	701a      	strb	r2, [r3, #0]
						i++;
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	617b      	str	r3, [r7, #20]
						j++;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	2b06      	cmp	r3, #6
 800c2b8:	dd03      	ble.n	800c2c2 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fbca 	bl	800ca54 <Lora_rx_del>
							break;
 800c2c0:	e006      	b.n	800c2d0 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	3356      	adds	r3, #86	; 0x56
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	2b2c      	cmp	r3, #44	; 0x2c
 800c2ce:	d1e0      	bne.n	800c292 <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	3306      	adds	r3, #6
 800c2d8:	2200      	movs	r2, #0
 800c2da:	701a      	strb	r2, [r3, #0]
					j=0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	613b      	str	r3, [r7, #16]
					i++;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c2e6:	e017      	b.n	800c318 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	3356      	adds	r3, #86	; 0x56
 800c2f0:	7819      	ldrb	r1, [r3, #0]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	4413      	add	r3, r2
 800c2f8:	330c      	adds	r3, #12
 800c2fa:	460a      	mov	r2, r1
 800c2fc:	701a      	strb	r2, [r3, #0]
						i++;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	3301      	adds	r3, #1
 800c302:	617b      	str	r3, [r7, #20]
						j++;
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	3301      	adds	r3, #1
 800c308:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	2b04      	cmp	r3, #4
 800c30e:	dd03      	ble.n	800c318 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fb9f 	bl	800ca54 <Lora_rx_del>
							break;
 800c316:	e006      	b.n	800c326 <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	4413      	add	r3, r2
 800c31e:	3356      	adds	r3, #86	; 0x56
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	2b2c      	cmp	r3, #44	; 0x2c
 800c324:	d1e0      	bne.n	800c2e8 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	4413      	add	r3, r2
 800c32c:	330c      	adds	r3, #12
 800c32e:	2200      	movs	r2, #0
 800c330:	701a      	strb	r2, [r3, #0]
					j=0;
 800c332:	2300      	movs	r3, #0
 800c334:	613b      	str	r3, [r7, #16]
					i++;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	3301      	adds	r3, #1
 800c33a:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	330c      	adds	r3, #12
 800c340:	210a      	movs	r1, #10
 800c342:	4618      	mov	r0, r3
 800c344:	f002 ff19 	bl	800f17a <atoi>
 800c348:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800c34a:	e019      	b.n	800c380 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	4413      	add	r3, r2
 800c352:	3356      	adds	r3, #86	; 0x56
 800c354:	7819      	ldrb	r1, [r3, #0]
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c360:	460a      	mov	r2, r1
 800c362:	701a      	strb	r2, [r3, #0]
						j++;
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	3301      	adds	r3, #1
 800c368:	613b      	str	r3, [r7, #16]
						i++;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	3301      	adds	r3, #1
 800c36e:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800c370:	693a      	ldr	r2, [r7, #16]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	429a      	cmp	r2, r3
 800c376:	dd03      	ble.n	800c380 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fb6b 	bl	800ca54 <Lora_rx_del>
							break;
 800c37e:	e006      	b.n	800c38e <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	4413      	add	r3, r2
 800c386:	3356      	adds	r3, #86	; 0x56
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	2b2c      	cmp	r3, #44	; 0x2c
 800c38c:	d1de      	bne.n	800c34c <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800c396:	2300      	movs	r3, #0
 800c398:	613b      	str	r3, [r7, #16]
					i++;
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	3301      	adds	r3, #1
 800c39e:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c3a0:	e017      	b.n	800c3d2 <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	3356      	adds	r3, #86	; 0x56
 800c3aa:	7819      	ldrb	r1, [r3, #0]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	3310      	adds	r3, #16
 800c3b4:	460a      	mov	r2, r1
 800c3b6:	701a      	strb	r2, [r3, #0]
						i++;
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	617b      	str	r3, [r7, #20]
						j++;
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	2b05      	cmp	r3, #5
 800c3c8:	dd03      	ble.n	800c3d2 <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fb42 	bl	800ca54 <Lora_rx_del>
							break;
 800c3d0:	e006      	b.n	800c3e0 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	3356      	adds	r3, #86	; 0x56
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	2b2c      	cmp	r3, #44	; 0x2c
 800c3de:	d1e0      	bne.n	800c3a2 <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3310      	adds	r3, #16
 800c3e4:	210a      	movs	r1, #10
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f002 fec7 	bl	800f17a <atoi>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	3310      	adds	r3, #16
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	701a      	strb	r2, [r3, #0]
					j=0;
 800c400:	2300      	movs	r3, #0
 800c402:	613b      	str	r3, [r7, #16]
					i++;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	3301      	adds	r3, #1
 800c408:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800c40a:	e017      	b.n	800c43c <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	4413      	add	r3, r2
 800c412:	3356      	adds	r3, #86	; 0x56
 800c414:	7819      	ldrb	r1, [r3, #0]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	4413      	add	r3, r2
 800c41c:	3310      	adds	r3, #16
 800c41e:	460a      	mov	r2, r1
 800c420:	701a      	strb	r2, [r3, #0]
						i++;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	3301      	adds	r3, #1
 800c426:	617b      	str	r3, [r7, #20]
						j++;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	3301      	adds	r3, #1
 800c42c:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	2b05      	cmp	r3, #5
 800c432:	dd03      	ble.n	800c43c <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fb0d 	bl	800ca54 <Lora_rx_del>
							break;
 800c43a:	e006      	b.n	800c44a <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	4413      	add	r3, r2
 800c442:	3356      	adds	r3, #86	; 0x56
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b0d      	cmp	r3, #13
 800c448:	d1e0      	bne.n	800c40c <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	4413      	add	r3, r2
 800c450:	3310      	adds	r3, #16
 800c452:	2200      	movs	r2, #0
 800c454:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3310      	adds	r3, #16
 800c45a:	210a      	movs	r1, #10
 800c45c:	4618      	mov	r0, r3
 800c45e:	f002 fe8c 	bl	800f17a <atoi>
 800c462:	4602      	mov	r2, r0
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800c478:	e06a      	b.n	800c550 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800c47a:	210d      	movs	r1, #13
 800c47c:	481b      	ldr	r0, [pc, #108]	; (800c4ec <LoRa_decode+0x3d4>)
 800c47e:	f7f5 f859 	bl	8001534 <ITM0_Write>
			break;
 800c482:	e065      	b.n	800c550 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800c484:	210f      	movs	r1, #15
 800c486:	481a      	ldr	r0, [pc, #104]	; (800c4f0 <LoRa_decode+0x3d8>)
 800c488:	f7f5 f854 	bl	8001534 <ITM0_Write>
			break;
 800c48c:	e060      	b.n	800c550 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800c48e:	210f      	movs	r1, #15
 800c490:	4818      	ldr	r0, [pc, #96]	; (800c4f4 <LoRa_decode+0x3dc>)
 800c492:	f7f5 f84f 	bl	8001534 <ITM0_Write>
			break;
 800c496:	e05b      	b.n	800c550 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800c498:	210e      	movs	r1, #14
 800c49a:	4817      	ldr	r0, [pc, #92]	; (800c4f8 <LoRa_decode+0x3e0>)
 800c49c:	f7f5 f84a 	bl	8001534 <ITM0_Write>
			break;
 800c4a0:	e056      	b.n	800c550 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800c4a2:	210d      	movs	r1, #13
 800c4a4:	4815      	ldr	r0, [pc, #84]	; (800c4fc <LoRa_decode+0x3e4>)
 800c4a6:	f7f5 f845 	bl	8001534 <ITM0_Write>
			break;
 800c4aa:	e051      	b.n	800c550 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800c4ac:	2113      	movs	r1, #19
 800c4ae:	4814      	ldr	r0, [pc, #80]	; (800c500 <LoRa_decode+0x3e8>)
 800c4b0:	f7f5 f840 	bl	8001534 <ITM0_Write>
			break;
 800c4b4:	e04c      	b.n	800c550 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800c4b6:	210e      	movs	r1, #14
 800c4b8:	4812      	ldr	r0, [pc, #72]	; (800c504 <LoRa_decode+0x3ec>)
 800c4ba:	f7f5 f83b 	bl	8001534 <ITM0_Write>
			break;
 800c4be:	e047      	b.n	800c550 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800c4c0:	2111      	movs	r1, #17
 800c4c2:	4811      	ldr	r0, [pc, #68]	; (800c508 <LoRa_decode+0x3f0>)
 800c4c4:	f7f5 f836 	bl	8001534 <ITM0_Write>
			break;
 800c4c8:	e042      	b.n	800c550 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800c4ca:	2111      	movs	r1, #17
 800c4cc:	480f      	ldr	r0, [pc, #60]	; (800c50c <LoRa_decode+0x3f4>)
 800c4ce:	f7f5 f831 	bl	8001534 <ITM0_Write>
			break;
 800c4d2:	e03d      	b.n	800c550 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800c4d4:	210e      	movs	r1, #14
 800c4d6:	480e      	ldr	r0, [pc, #56]	; (800c510 <LoRa_decode+0x3f8>)
 800c4d8:	f7f5 f82c 	bl	8001534 <ITM0_Write>
			break;
 800c4dc:	e038      	b.n	800c550 <LoRa_decode+0x438>
 800c4de:	bf00      	nop
 800c4e0:	08010c84 	.word	0x08010c84
 800c4e4:	08010c98 	.word	0x08010c98
 800c4e8:	08010ca8 	.word	0x08010ca8
 800c4ec:	08010cb8 	.word	0x08010cb8
 800c4f0:	08010cc8 	.word	0x08010cc8
 800c4f4:	08010cd8 	.word	0x08010cd8
 800c4f8:	08010ce8 	.word	0x08010ce8
 800c4fc:	08010cf8 	.word	0x08010cf8
 800c500:	08010d08 	.word	0x08010d08
 800c504:	08010d1c 	.word	0x08010d1c
 800c508:	08010d2c 	.word	0x08010d2c
 800c50c:	08010d40 	.word	0x08010d40
 800c510:	08010d54 	.word	0x08010d54
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800c514:	210f      	movs	r1, #15
 800c516:	4810      	ldr	r0, [pc, #64]	; (800c558 <LoRa_decode+0x440>)
 800c518:	f7f5 f80c 	bl	8001534 <ITM0_Write>
			break;
 800c51c:	e018      	b.n	800c550 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800c51e:	210e      	movs	r1, #14
 800c520:	480e      	ldr	r0, [pc, #56]	; (800c55c <LoRa_decode+0x444>)
 800c522:	f7f5 f807 	bl	8001534 <ITM0_Write>
			break;
 800c526:	e013      	b.n	800c550 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800c528:	210d      	movs	r1, #13
 800c52a:	480d      	ldr	r0, [pc, #52]	; (800c560 <LoRa_decode+0x448>)
 800c52c:	f7f5 f802 	bl	8001534 <ITM0_Write>
			break;
 800c530:	e00e      	b.n	800c550 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800c532:	210d      	movs	r1, #13
 800c534:	480b      	ldr	r0, [pc, #44]	; (800c564 <LoRa_decode+0x44c>)
 800c536:	f7f4 fffd 	bl	8001534 <ITM0_Write>
			break;
 800c53a:	e009      	b.n	800c550 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800c53c:	2114      	movs	r1, #20
 800c53e:	480a      	ldr	r0, [pc, #40]	; (800c568 <LoRa_decode+0x450>)
 800c540:	f7f4 fff8 	bl	8001534 <ITM0_Write>
			break;
 800c544:	e004      	b.n	800c550 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800c546:	2110      	movs	r1, #16
 800c548:	4808      	ldr	r0, [pc, #32]	; (800c56c <LoRa_decode+0x454>)
 800c54a:	f7f4 fff3 	bl	8001534 <ITM0_Write>
			break;
 800c54e:	bf00      	nop
	}
 }
 800c550:	bf00      	nop
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	08010d64 	.word	0x08010d64
 800c55c:	08010d74 	.word	0x08010d74
 800c560:	08010d84 	.word	0x08010d84
 800c564:	08010d94 	.word	0x08010d94
 800c568:	08010da4 	.word	0x08010da4
 800c56c:	08010dbc 	.word	0x08010dbc

0800c570 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800c570:	b580      	push	{r7, lr}
 800c572:	b090      	sub	sp, #64	; 0x40
 800c574:	af06      	add	r7, sp, #24
 800c576:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800c57e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c582:	dd01      	ble.n	800c588 <Lora_idSTR+0x18>
 800c584:	2310      	movs	r3, #16
 800c586:	e257      	b.n	800ca38 <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800c588:	2300      	movs	r3, #0
 800c58a:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800c58c:	2304      	movs	r3, #4
 800c58e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c59c:	f107 021c 	add.w	r2, r7, #28
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	9305      	str	r3, [sp, #20]
 800c5a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5a8:	9304      	str	r3, [sp, #16]
 800c5aa:	f107 0320 	add.w	r3, r7, #32
 800c5ae:	9303      	str	r3, [sp, #12]
 800c5b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5b4:	9302      	str	r3, [sp, #8]
 800c5b6:	f107 030c 	add.w	r3, r7, #12
 800c5ba:	9301      	str	r3, [sp, #4]
 800c5bc:	f107 0310 	add.w	r3, r7, #16
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	4ab7      	ldr	r2, [pc, #732]	; (800c8a4 <Lora_idSTR+0x334>)
 800c5c6:	f002 fa11 	bl	800e9ec <FT_String_ND>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d101      	bne.n	800c5d4 <Lora_idSTR+0x64>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e231      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800c5d4:	2305      	movs	r3, #5
 800c5d6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5e4:	f107 021c 	add.w	r2, r7, #28
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	9305      	str	r3, [sp, #20]
 800c5ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5f0:	9304      	str	r3, [sp, #16]
 800c5f2:	f107 0320 	add.w	r3, r7, #32
 800c5f6:	9303      	str	r3, [sp, #12]
 800c5f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5fc:	9302      	str	r3, [sp, #8]
 800c5fe:	f107 030c 	add.w	r3, r7, #12
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	f107 0310 	add.w	r3, r7, #16
 800c608:	9300      	str	r3, [sp, #0]
 800c60a:	4613      	mov	r3, r2
 800c60c:	4aa6      	ldr	r2, [pc, #664]	; (800c8a8 <Lora_idSTR+0x338>)
 800c60e:	f002 f9ed 	bl	800e9ec <FT_String_ND>
 800c612:	4603      	mov	r3, r0
 800c614:	2b01      	cmp	r3, #1
 800c616:	d101      	bne.n	800c61c <Lora_idSTR+0xac>
 800c618:	2301      	movs	r3, #1
 800c61a:	e20d      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800c61c:	2305      	movs	r3, #5
 800c61e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c62c:	f107 021c 	add.w	r2, r7, #28
 800c630:	2300      	movs	r3, #0
 800c632:	9305      	str	r3, [sp, #20]
 800c634:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c638:	9304      	str	r3, [sp, #16]
 800c63a:	f107 0320 	add.w	r3, r7, #32
 800c63e:	9303      	str	r3, [sp, #12]
 800c640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c644:	9302      	str	r3, [sp, #8]
 800c646:	f107 030c 	add.w	r3, r7, #12
 800c64a:	9301      	str	r3, [sp, #4]
 800c64c:	f107 0310 	add.w	r3, r7, #16
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	4613      	mov	r3, r2
 800c654:	4a95      	ldr	r2, [pc, #596]	; (800c8ac <Lora_idSTR+0x33c>)
 800c656:	f002 f9c9 	bl	800e9ec <FT_String_ND>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d101      	bne.n	800c664 <Lora_idSTR+0xf4>
 800c660:	230f      	movs	r3, #15
 800c662:	e1e9      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800c664:	2306      	movs	r3, #6
 800c666:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c674:	f107 021c 	add.w	r2, r7, #28
 800c678:	2300      	movs	r3, #0
 800c67a:	9305      	str	r3, [sp, #20]
 800c67c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c680:	9304      	str	r3, [sp, #16]
 800c682:	f107 0320 	add.w	r3, r7, #32
 800c686:	9303      	str	r3, [sp, #12]
 800c688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c68c:	9302      	str	r3, [sp, #8]
 800c68e:	f107 030c 	add.w	r3, r7, #12
 800c692:	9301      	str	r3, [sp, #4]
 800c694:	f107 0310 	add.w	r3, r7, #16
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	4613      	mov	r3, r2
 800c69c:	4a84      	ldr	r2, [pc, #528]	; (800c8b0 <Lora_idSTR+0x340>)
 800c69e:	f002 f9a5 	bl	800e9ec <FT_String_ND>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d101      	bne.n	800c6ac <Lora_idSTR+0x13c>
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	e1c5      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800c6ac:	2306      	movs	r3, #6
 800c6ae:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c6bc:	f107 021c 	add.w	r2, r7, #28
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	9305      	str	r3, [sp, #20]
 800c6c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6c8:	9304      	str	r3, [sp, #16]
 800c6ca:	f107 0320 	add.w	r3, r7, #32
 800c6ce:	9303      	str	r3, [sp, #12]
 800c6d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6d4:	9302      	str	r3, [sp, #8]
 800c6d6:	f107 030c 	add.w	r3, r7, #12
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	f107 0310 	add.w	r3, r7, #16
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	4a73      	ldr	r2, [pc, #460]	; (800c8b4 <Lora_idSTR+0x344>)
 800c6e6:	f002 f981 	bl	800e9ec <FT_String_ND>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d101      	bne.n	800c6f4 <Lora_idSTR+0x184>
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e1a1      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800c6f4:	2306      	movs	r3, #6
 800c6f6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c704:	f107 021c 	add.w	r2, r7, #28
 800c708:	2300      	movs	r3, #0
 800c70a:	9305      	str	r3, [sp, #20]
 800c70c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c710:	9304      	str	r3, [sp, #16]
 800c712:	f107 0320 	add.w	r3, r7, #32
 800c716:	9303      	str	r3, [sp, #12]
 800c718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c71c:	9302      	str	r3, [sp, #8]
 800c71e:	f107 030c 	add.w	r3, r7, #12
 800c722:	9301      	str	r3, [sp, #4]
 800c724:	f107 0310 	add.w	r3, r7, #16
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	4613      	mov	r3, r2
 800c72c:	4a62      	ldr	r2, [pc, #392]	; (800c8b8 <Lora_idSTR+0x348>)
 800c72e:	f002 f95d 	bl	800e9ec <FT_String_ND>
 800c732:	4603      	mov	r3, r0
 800c734:	2b01      	cmp	r3, #1
 800c736:	d101      	bne.n	800c73c <Lora_idSTR+0x1cc>
 800c738:	2304      	movs	r3, #4
 800c73a:	e17d      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800c73c:	2305      	movs	r3, #5
 800c73e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c74c:	f107 021c 	add.w	r2, r7, #28
 800c750:	2300      	movs	r3, #0
 800c752:	9305      	str	r3, [sp, #20]
 800c754:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c758:	9304      	str	r3, [sp, #16]
 800c75a:	f107 0320 	add.w	r3, r7, #32
 800c75e:	9303      	str	r3, [sp, #12]
 800c760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c764:	9302      	str	r3, [sp, #8]
 800c766:	f107 030c 	add.w	r3, r7, #12
 800c76a:	9301      	str	r3, [sp, #4]
 800c76c:	f107 0310 	add.w	r3, r7, #16
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	4613      	mov	r3, r2
 800c774:	4a51      	ldr	r2, [pc, #324]	; (800c8bc <Lora_idSTR+0x34c>)
 800c776:	f002 f939 	bl	800e9ec <FT_String_ND>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d101      	bne.n	800c784 <Lora_idSTR+0x214>
 800c780:	2305      	movs	r3, #5
 800c782:	e159      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800c784:	230b      	movs	r3, #11
 800c786:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c794:	f107 021c 	add.w	r2, r7, #28
 800c798:	2300      	movs	r3, #0
 800c79a:	9305      	str	r3, [sp, #20]
 800c79c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7a0:	9304      	str	r3, [sp, #16]
 800c7a2:	f107 0320 	add.w	r3, r7, #32
 800c7a6:	9303      	str	r3, [sp, #12]
 800c7a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ac:	9302      	str	r3, [sp, #8]
 800c7ae:	f107 030c 	add.w	r3, r7, #12
 800c7b2:	9301      	str	r3, [sp, #4]
 800c7b4:	f107 0310 	add.w	r3, r7, #16
 800c7b8:	9300      	str	r3, [sp, #0]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	4a40      	ldr	r2, [pc, #256]	; (800c8c0 <Lora_idSTR+0x350>)
 800c7be:	f002 f915 	bl	800e9ec <FT_String_ND>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d101      	bne.n	800c7cc <Lora_idSTR+0x25c>
 800c7c8:	2306      	movs	r3, #6
 800c7ca:	e135      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800c7cc:	2306      	movs	r3, #6
 800c7ce:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c7dc:	f107 021c 	add.w	r2, r7, #28
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	9305      	str	r3, [sp, #20]
 800c7e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7e8:	9304      	str	r3, [sp, #16]
 800c7ea:	f107 0320 	add.w	r3, r7, #32
 800c7ee:	9303      	str	r3, [sp, #12]
 800c7f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7f4:	9302      	str	r3, [sp, #8]
 800c7f6:	f107 030c 	add.w	r3, r7, #12
 800c7fa:	9301      	str	r3, [sp, #4]
 800c7fc:	f107 0310 	add.w	r3, r7, #16
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	4613      	mov	r3, r2
 800c804:	4a2f      	ldr	r2, [pc, #188]	; (800c8c4 <Lora_idSTR+0x354>)
 800c806:	f002 f8f1 	bl	800e9ec <FT_String_ND>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d101      	bne.n	800c814 <Lora_idSTR+0x2a4>
 800c810:	2307      	movs	r3, #7
 800c812:	e111      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800c814:	2309      	movs	r3, #9
 800c816:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c824:	f107 021c 	add.w	r2, r7, #28
 800c828:	2300      	movs	r3, #0
 800c82a:	9305      	str	r3, [sp, #20]
 800c82c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c830:	9304      	str	r3, [sp, #16]
 800c832:	f107 0320 	add.w	r3, r7, #32
 800c836:	9303      	str	r3, [sp, #12]
 800c838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c83c:	9302      	str	r3, [sp, #8]
 800c83e:	f107 030c 	add.w	r3, r7, #12
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	f107 0310 	add.w	r3, r7, #16
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	4613      	mov	r3, r2
 800c84c:	4a1e      	ldr	r2, [pc, #120]	; (800c8c8 <Lora_idSTR+0x358>)
 800c84e:	f002 f8cd 	bl	800e9ec <FT_String_ND>
 800c852:	4603      	mov	r3, r0
 800c854:	2b01      	cmp	r3, #1
 800c856:	d101      	bne.n	800c85c <Lora_idSTR+0x2ec>
 800c858:	2308      	movs	r3, #8
 800c85a:	e0ed      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800c85c:	2309      	movs	r3, #9
 800c85e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c86c:	f107 021c 	add.w	r2, r7, #28
 800c870:	2300      	movs	r3, #0
 800c872:	9305      	str	r3, [sp, #20]
 800c874:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c878:	9304      	str	r3, [sp, #16]
 800c87a:	f107 0320 	add.w	r3, r7, #32
 800c87e:	9303      	str	r3, [sp, #12]
 800c880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c884:	9302      	str	r3, [sp, #8]
 800c886:	f107 030c 	add.w	r3, r7, #12
 800c88a:	9301      	str	r3, [sp, #4]
 800c88c:	f107 0310 	add.w	r3, r7, #16
 800c890:	9300      	str	r3, [sp, #0]
 800c892:	4613      	mov	r3, r2
 800c894:	4a0d      	ldr	r2, [pc, #52]	; (800c8cc <Lora_idSTR+0x35c>)
 800c896:	f002 f8a9 	bl	800e9ec <FT_String_ND>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d117      	bne.n	800c8d0 <Lora_idSTR+0x360>
 800c8a0:	2309      	movs	r3, #9
 800c8a2:	e0c9      	b.n	800ca38 <Lora_idSTR+0x4c8>
 800c8a4:	08010dd0 	.word	0x08010dd0
 800c8a8:	08010dd8 	.word	0x08010dd8
 800c8ac:	08010de0 	.word	0x08010de0
 800c8b0:	08010de8 	.word	0x08010de8
 800c8b4:	08010df0 	.word	0x08010df0
 800c8b8:	08010df8 	.word	0x08010df8
 800c8bc:	08010e00 	.word	0x08010e00
 800c8c0:	08010e08 	.word	0x08010e08
 800c8c4:	08010e14 	.word	0x08010e14
 800c8c8:	08010e1c 	.word	0x08010e1c
 800c8cc:	08010e28 	.word	0x08010e28
		i=strlen("+CPIN=");
 800c8d0:	2306      	movs	r3, #6
 800c8d2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c8e0:	f107 021c 	add.w	r2, r7, #28
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	9305      	str	r3, [sp, #20]
 800c8e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8ec:	9304      	str	r3, [sp, #16]
 800c8ee:	f107 0320 	add.w	r3, r7, #32
 800c8f2:	9303      	str	r3, [sp, #12]
 800c8f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8f8:	9302      	str	r3, [sp, #8]
 800c8fa:	f107 030c 	add.w	r3, r7, #12
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	f107 0310 	add.w	r3, r7, #16
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	4613      	mov	r3, r2
 800c908:	4a4d      	ldr	r2, [pc, #308]	; (800ca40 <Lora_idSTR+0x4d0>)
 800c90a:	f002 f86f 	bl	800e9ec <FT_String_ND>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b01      	cmp	r3, #1
 800c912:	d101      	bne.n	800c918 <Lora_idSTR+0x3a8>
 800c914:	230a      	movs	r3, #10
 800c916:	e08f      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800c918:	2307      	movs	r3, #7
 800c91a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c928:	f107 021c 	add.w	r2, r7, #28
 800c92c:	2300      	movs	r3, #0
 800c92e:	9305      	str	r3, [sp, #20]
 800c930:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c934:	9304      	str	r3, [sp, #16]
 800c936:	f107 0320 	add.w	r3, r7, #32
 800c93a:	9303      	str	r3, [sp, #12]
 800c93c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c940:	9302      	str	r3, [sp, #8]
 800c942:	f107 030c 	add.w	r3, r7, #12
 800c946:	9301      	str	r3, [sp, #4]
 800c948:	f107 0310 	add.w	r3, r7, #16
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	4613      	mov	r3, r2
 800c950:	4a3c      	ldr	r2, [pc, #240]	; (800ca44 <Lora_idSTR+0x4d4>)
 800c952:	f002 f84b 	bl	800e9ec <FT_String_ND>
 800c956:	4603      	mov	r3, r0
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d101      	bne.n	800c960 <Lora_idSTR+0x3f0>
 800c95c:	230b      	movs	r3, #11
 800c95e:	e06b      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800c960:	2306      	movs	r3, #6
 800c962:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c970:	f107 021c 	add.w	r2, r7, #28
 800c974:	2300      	movs	r3, #0
 800c976:	9305      	str	r3, [sp, #20]
 800c978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c97c:	9304      	str	r3, [sp, #16]
 800c97e:	f107 0320 	add.w	r3, r7, #32
 800c982:	9303      	str	r3, [sp, #12]
 800c984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c988:	9302      	str	r3, [sp, #8]
 800c98a:	f107 030c 	add.w	r3, r7, #12
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	f107 0310 	add.w	r3, r7, #16
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4613      	mov	r3, r2
 800c998:	4a2b      	ldr	r2, [pc, #172]	; (800ca48 <Lora_idSTR+0x4d8>)
 800c99a:	f002 f827 	bl	800e9ec <FT_String_ND>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d101      	bne.n	800c9a8 <Lora_idSTR+0x438>
 800c9a4:	230c      	movs	r3, #12
 800c9a6:	e047      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800c9a8:	2305      	movs	r3, #5
 800c9aa:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c9b8:	f107 021c 	add.w	r2, r7, #28
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9305      	str	r3, [sp, #20]
 800c9c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9c4:	9304      	str	r3, [sp, #16]
 800c9c6:	f107 0320 	add.w	r3, r7, #32
 800c9ca:	9303      	str	r3, [sp, #12]
 800c9cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9d0:	9302      	str	r3, [sp, #8]
 800c9d2:	f107 030c 	add.w	r3, r7, #12
 800c9d6:	9301      	str	r3, [sp, #4]
 800c9d8:	f107 0310 	add.w	r3, r7, #16
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	4a1a      	ldr	r2, [pc, #104]	; (800ca4c <Lora_idSTR+0x4dc>)
 800c9e2:	f002 f803 	bl	800e9ec <FT_String_ND>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d101      	bne.n	800c9f0 <Lora_idSTR+0x480>
 800c9ec:	230e      	movs	r3, #14
 800c9ee:	e023      	b.n	800ca38 <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800c9f0:	2305      	movs	r3, #5
 800c9f2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800ca00:	f107 021c 	add.w	r2, r7, #28
 800ca04:	2300      	movs	r3, #0
 800ca06:	9305      	str	r3, [sp, #20]
 800ca08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca0c:	9304      	str	r3, [sp, #16]
 800ca0e:	f107 0320 	add.w	r3, r7, #32
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca18:	9302      	str	r3, [sp, #8]
 800ca1a:	f107 030c 	add.w	r3, r7, #12
 800ca1e:	9301      	str	r3, [sp, #4]
 800ca20:	f107 0310 	add.w	r3, r7, #16
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	4613      	mov	r3, r2
 800ca28:	4a09      	ldr	r2, [pc, #36]	; (800ca50 <Lora_idSTR+0x4e0>)
 800ca2a:	f001 ffdf 	bl	800e9ec <FT_String_ND>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d101      	bne.n	800ca38 <Lora_idSTR+0x4c8>
 800ca34:	230d      	movs	r3, #13
 800ca36:	e7ff      	b.n	800ca38 <Lora_idSTR+0x4c8>
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3728      	adds	r7, #40	; 0x28
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	08010e34 	.word	0x08010e34
 800ca44:	08010e3c 	.word	0x08010e3c
 800ca48:	08010e44 	.word	0x08010e44
 800ca4c:	08010e4c 	.word	0x08010e4c
 800ca50:	08010e54 	.word	0x08010e54

0800ca54 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800ca7a:	bf00      	nop
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
	...

0800ca88 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800caa2:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2220      	movs	r2, #32
 800caae:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4a1c      	ldr	r2, [pc, #112]	; (800cb28 <ModBUS_Config+0xa0>)
 800cab6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2220      	movs	r2, #32
 800cac4:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a18      	ldr	r2, [pc, #96]	; (800cb2c <ModBUS_Config+0xa4>)
 800cacc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2210      	movs	r2, #16
 800cada:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2210      	movs	r2, #16
 800cae8:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2201      	movs	r2, #1
 800cafe:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2220      	movs	r2, #32
 800cb0a:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2201      	movs	r2, #1
 800cb12:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2220      	movs	r2, #32
 800cb18:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	f0f0af5a 	.word	0xf0f0af5a
 800cb2c:	a5fa0f0f 	.word	0xa5fa0f0f

0800cb30 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3305      	adds	r3, #5
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	3306      	adds	r3, #6
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d10b      	bne.n	800cb60 <ModBUS_Check+0x30>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3302      	adds	r3, #2
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	3303      	adds	r3, #3
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	4413      	add	r3, r2
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d101      	bne.n	800cb60 <ModBUS_Check+0x30>
	{
		return(1);
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e000      	b.n	800cb62 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800cb60:	2300      	movs	r3, #0
	}
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr

0800cb6e <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800cb6e:	b480      	push	{r7}
 800cb70:	b083      	sub	sp, #12
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	7c9b      	ldrb	r3, [r3, #18]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d11d      	bne.n	800cbc0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d116      	bne.n	800cbc0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d10f      	bne.n	800cbc0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d108      	bne.n	800cbc0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d101      	bne.n	800cbc0 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e000      	b.n	800cbc2 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800cbc0:	2300      	movs	r3, #0
	}
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800cbce:	b480      	push	{r7}
 800cbd0:	b085      	sub	sp, #20
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	70fb      	strb	r3, [r7, #3]
 800cbda:	4613      	mov	r3, r2
 800cbdc:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800cbe8:	78fa      	ldrb	r2, [r7, #3]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d901      	bls.n	800cbf2 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e015      	b.n	800cc1e <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800cbf2:	78fb      	ldrb	r3, [r7, #3]
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	883a      	ldrh	r2, [r7, #0]
 800cbfa:	b2d1      	uxtb	r1, r2
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	4413      	add	r3, r2
 800cc00:	460a      	mov	r2, r1
 800cc02:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=b>>8;
 800cc06:	883b      	ldrh	r3, [r7, #0]
 800cc08:	0a1b      	lsrs	r3, r3, #8
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800cc0e:	78fb      	ldrb	r3, [r7, #3]
 800cc10:	005b      	lsls	r3, r3, #1
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	4413      	add	r3, r2
 800cc16:	7bfa      	ldrb	r2, [r7, #15]
 800cc18:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800cc1c:	2300      	movs	r3, #0
	}
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800cc2a:	b480      	push	{r7}
 800cc2c:	b085      	sub	sp, #20
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	460b      	mov	r3, r1
 800cc34:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800cc44:	78fa      	ldrb	r2, [r7, #3]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d901      	bls.n	800cc4e <ModBUS_F03_Read+0x24>
	{
		return(1);
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e015      	b.n	800cc7a <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800cc4e:	78fb      	ldrb	r3, [r7, #3]
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	4413      	add	r3, r2
 800cc56:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800cc5a:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800cc5c:	89fb      	ldrh	r3, [r7, #14]
 800cc5e:	021b      	lsls	r3, r3, #8
 800cc60:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800cc62:	78fb      	ldrb	r3, [r7, #3]
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	3301      	adds	r3, #1
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	89fb      	ldrh	r3, [r7, #14]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800cc78:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800cc86:	b480      	push	{r7}
 800cc88:	b083      	sub	sp, #12
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	460b      	mov	r3, r1
 800cc90:	807b      	strh	r3, [r7, #2]
 800cc92:	4613      	mov	r3, r2
 800cc94:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800cc96:	887b      	ldrh	r3, [r7, #2]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	bf14      	ite	ne
 800cc9c:	2301      	movne	r3, #1
 800cc9e:	2300      	moveq	r3, #0
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	461a      	mov	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800ccaa:	887b      	ldrh	r3, [r7, #2]
 800ccac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccb0:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800ccb2:	887b      	ldrh	r3, [r7, #2]
 800ccb4:	0a1b      	lsrs	r3, r3, #8
 800ccb6:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800ccb8:	887b      	ldrh	r3, [r7, #2]
 800ccba:	f003 030f 	and.w	r3, r3, #15
 800ccbe:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2206      	movs	r2, #6
 800ccec:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	781a      	ldrb	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2203      	movs	r2, #3
 800ccfe:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800cd02:	887b      	ldrh	r3, [r7, #2]
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	787a      	ldrb	r2, [r7, #1]
 800cd18:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	220c      	movs	r2, #12
 800cd20:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800cd24:	bf00      	nop
 800cd26:	4618      	mov	r0, r3
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
	...

0800cd34 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b09c      	sub	sp, #112	; 0x70
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	791b      	ldrb	r3, [r3, #4]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	f041 813f 	bne.w	800dfc4 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f103 0212 	add.w	r2, r3, #18
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd52:	4619      	mov	r1, r3
 800cd54:	4610      	mov	r0, r2
 800cd56:	f7ff feeb 	bl	800cb30 <ModBUS_Check>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f001 812f 	beq.w	800dfc0 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7e5b      	ldrb	r3, [r3, #25]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	2b0f      	cmp	r3, #15
 800cd6a:	f201 80f3 	bhi.w	800df54 <ModBUS+0x1220>
 800cd6e:	a201      	add	r2, pc, #4	; (adr r2, 800cd74 <ModBUS+0x40>)
 800cd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd74:	0800cdb5 	.word	0x0800cdb5
 800cd78:	0800cff5 	.word	0x0800cff5
 800cd7c:	0800d235 	.word	0x0800d235
 800cd80:	0800d46d 	.word	0x0800d46d
 800cd84:	0800d6a5 	.word	0x0800d6a5
 800cd88:	0800d8bb 	.word	0x0800d8bb
 800cd8c:	0800df55 	.word	0x0800df55
 800cd90:	0800df55 	.word	0x0800df55
 800cd94:	0800df55 	.word	0x0800df55
 800cd98:	0800df55 	.word	0x0800df55
 800cd9c:	0800df55 	.word	0x0800df55
 800cda0:	0800df55 	.word	0x0800df55
 800cda4:	0800df55 	.word	0x0800df55
 800cda8:	0800df55 	.word	0x0800df55
 800cdac:	0800da77 	.word	0x0800da77
 800cdb0:	0800dd07 	.word	0x0800dd07

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7d9a      	ldrb	r2, [r3, #22]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	7d5a      	ldrb	r2, [r3, #21]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	7d1a      	ldrb	r2, [r3, #20]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	7cda      	ldrb	r2, [r3, #19]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	7c9a      	ldrb	r2, [r3, #18]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	7a9b      	ldrb	r3, [r3, #10]
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	f040 80e6 	bne.w	800cfc0 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	7e9b      	ldrb	r3, [r3, #26]
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800ce06:	021b      	lsls	r3, r3, #8
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800ce16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	7edb      	ldrb	r3, [r3, #27]
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	7f1b      	ldrb	r3, [r3, #28]
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800ce4a:	021b      	lsls	r3, r3, #8
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800ce5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	7f5b      	ldrb	r3, [r3, #29]
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	4313      	orrs	r3, r2
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d87e      	bhi.n	800cf8c <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800ce94:	461a      	mov	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800ce9c:	4413      	add	r3, r2
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800cea4:	4293      	cmp	r3, r2
 800cea6:	dc57      	bgt.n	800cf58 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	613b      	str	r3, [r7, #16]
 800ceac:	2300      	movs	r3, #0
 800ceae:	60fb      	str	r3, [r7, #12]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800cec8:	40d3      	lsrs	r3, r2
 800ceca:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800ced2:	08db      	lsrs	r3, r3, #3
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cede:	f003 0307 	and.w	r3, r3, #7
 800cee2:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d102      	bne.n	800cef0 <ModBUS+0x1bc>
									{
										bytes=div;
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ceee:	e002      	b.n	800cef6 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	3301      	adds	r3, #1
 800cef4:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800cef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800cf00:	e00e      	b.n	800cf20 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cf02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf04:	3308      	adds	r3, #8
 800cf06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf08:	b2d1      	uxtb	r1, r2
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	460a      	mov	r2, r1
 800cf10:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800cf14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf16:	0a1b      	lsrs	r3, r3, #8
 800cf18:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800cf1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800cf20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	dced      	bgt.n	800cf02 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cf3c:	3303      	adds	r3, #3
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf4c:	1d9a      	adds	r2, r3, #6
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cf54:	f001 b8d4 	b.w	800e100 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2202      	movs	r2, #2
 800cf5c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2281      	movs	r2, #129	; 0x81
 800cf64:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2203      	movs	r2, #3
 800cf74:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf7e:	1d9a      	adds	r2, r3, #6
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cf86:	2302      	movs	r3, #2
 800cf88:	f001 b8ba 	b.w	800e100 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2203      	movs	r2, #3
 800cf90:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2281      	movs	r2, #129	; 0x81
 800cf98:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2203      	movs	r2, #3
 800cfa8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cfb2:	1d9a      	adds	r2, r3, #6
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cfba:	2303      	movs	r3, #3
 800cfbc:	f001 b8a0 	b.w	800e100 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2281      	movs	r2, #129	; 0x81
 800cfcc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2203      	movs	r2, #3
 800cfdc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cfe6:	1d9a      	adds	r2, r3, #6
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cfee:	2301      	movs	r3, #1
 800cff0:	f001 b886 	b.w	800e100 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	7d9a      	ldrb	r2, [r3, #22]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	7d5a      	ldrb	r2, [r3, #21]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	7d1a      	ldrb	r2, [r3, #20]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	7cda      	ldrb	r2, [r3, #19]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7c9a      	ldrb	r2, [r3, #18]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d026:	2300      	movs	r3, #0
 800d028:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7adb      	ldrb	r3, [r3, #11]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	f040 80e6 	bne.w	800d200 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	7e9b      	ldrb	r3, [r3, #26]
 800d038:	b29a      	uxth	r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d046:	021b      	lsls	r3, r3, #8
 800d048:	b29a      	uxth	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	7edb      	ldrb	r3, [r3, #27]
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	4313      	orrs	r3, r2
 800d070:	b29a      	uxth	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	7f1b      	ldrb	r3, [r3, #28]
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d08a:	021b      	lsls	r3, r3, #8
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d09a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	7f5b      	ldrb	r3, [r3, #29]
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d87e      	bhi.n	800d1cc <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d0dc:	4413      	add	r3, r2
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	dc57      	bgt.n	800d198 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	623b      	str	r3, [r7, #32]
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	61fb      	str	r3, [r7, #28]
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	667b      	str	r3, [r7, #100]	; 0x64
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800d108:	40d3      	lsrs	r3, r2
 800d10a:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d112:	08db      	lsrs	r3, r3, #3
 800d114:	b29b      	uxth	r3, r3
 800d116:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d11e:	f003 0307 	and.w	r3, r3, #7
 800d122:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d102      	bne.n	800d130 <ModBUS+0x3fc>
									{
										bytes=div;
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	667b      	str	r3, [r7, #100]	; 0x64
 800d12e:	e002      	b.n	800d136 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800d130:	6a3b      	ldr	r3, [r7, #32]
 800d132:	3301      	adds	r3, #1
 800d134:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800d136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800d140:	e00e      	b.n	800d160 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800d142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d144:	3308      	adds	r3, #8
 800d146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d148:	b2d1      	uxtb	r1, r2
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	4413      	add	r3, r2
 800d14e:	460a      	mov	r2, r1
 800d150:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800d154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d156:	0a1b      	lsrs	r3, r3, #8
 800d158:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800d15a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d15c:	3b01      	subs	r3, #1
 800d15e:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800d160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d162:	2b00      	cmp	r3, #0
 800d164:	dced      	bgt.n	800d142 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2202      	movs	r2, #2
 800d16a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d17c:	3303      	adds	r3, #3
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d18c:	1d9a      	adds	r2, r3, #6
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d194:	f000 bfb4 	b.w	800e100 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2202      	movs	r2, #2
 800d19c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2282      	movs	r2, #130	; 0x82
 800d1a4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2203      	movs	r2, #3
 800d1b4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d1be:	1d9a      	adds	r2, r3, #6
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	f000 bf9a 	b.w	800e100 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2203      	movs	r2, #3
 800d1d0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2282      	movs	r2, #130	; 0x82
 800d1d8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2203      	movs	r2, #3
 800d1e8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d1f2:	1d9a      	adds	r2, r3, #6
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	f000 bf80 	b.w	800e100 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2282      	movs	r2, #130	; 0x82
 800d20c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2203      	movs	r2, #3
 800d21c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d226:	1d9a      	adds	r2, r3, #6
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d22e:	2301      	movs	r3, #1
 800d230:	f000 bf66 	b.w	800e100 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7d9a      	ldrb	r2, [r3, #22]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	7d5a      	ldrb	r2, [r3, #21]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	7d1a      	ldrb	r2, [r3, #20]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	7cda      	ldrb	r2, [r3, #19]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	7c9a      	ldrb	r2, [r3, #18]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d266:	2300      	movs	r3, #0
 800d268:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7b1b      	ldrb	r3, [r3, #12]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	f040 80e2 	bne.w	800d438 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7e9b      	ldrb	r3, [r3, #26]
 800d278:	b29a      	uxth	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d286:	021b      	lsls	r3, r3, #8
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	7edb      	ldrb	r3, [r3, #27]
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	7f1b      	ldrb	r3, [r3, #28]
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d2ca:	021b      	lsls	r3, r3, #8
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d2da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	7f5b      	ldrb	r3, [r3, #29]
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800d308:	b29b      	uxth	r3, r3
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d87a      	bhi.n	800d404 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d314:	461a      	mov	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d31c:	4413      	add	r3, r2
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800d324:	4293      	cmp	r3, r2
 800d326:	dc53      	bgt.n	800d3d0 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d328:	e029      	b.n	800d37e <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d330:	461a      	mov	r2, r3
 800d332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d334:	4413      	add	r3, r2
 800d336:	005a      	lsls	r2, r3, #1
 800d338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d33a:	005b      	lsls	r3, r3, #1
 800d33c:	3309      	adds	r3, #9
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	440a      	add	r2, r1
 800d342:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	4413      	add	r3, r2
 800d34a:	460a      	mov	r2, r1
 800d34c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d356:	461a      	mov	r2, r3
 800d358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d35a:	4413      	add	r3, r2
 800d35c:	005b      	lsls	r3, r3, #1
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d362:	3305      	adds	r3, #5
 800d364:	005b      	lsls	r3, r3, #1
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	440a      	add	r2, r1
 800d36a:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	4413      	add	r3, r2
 800d372:	460a      	mov	r2, r1
 800d374:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d37a:	3301      	adds	r3, #1
 800d37c:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d384:	461a      	mov	r2, r3
 800d386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d388:	4293      	cmp	r3, r2
 800d38a:	dbce      	blt.n	800d32a <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d392:	b2db      	uxtb	r3, r3
 800d394:	005b      	lsls	r3, r3, #1
 800d396:	b2da      	uxtb	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2203      	movs	r2, #3
 800d3a2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d3b4:	3303      	adds	r3, #3
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d3c4:	1d9a      	adds	r2, r3, #6
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d3cc:	f000 be98 	b.w	800e100 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2202      	movs	r2, #2
 800d3d4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2283      	movs	r2, #131	; 0x83
 800d3dc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2203      	movs	r2, #3
 800d3ec:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d3f6:	1d9a      	adds	r2, r3, #6
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d3fe:	2302      	movs	r3, #2
 800d400:	f000 be7e 	b.w	800e100 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2203      	movs	r2, #3
 800d408:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2283      	movs	r2, #131	; 0x83
 800d410:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2201      	movs	r2, #1
 800d418:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2203      	movs	r2, #3
 800d420:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d42a:	1d9a      	adds	r2, r3, #6
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d432:	2303      	movs	r3, #3
 800d434:	f000 be64 	b.w	800e100 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2201      	movs	r2, #1
 800d43c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2283      	movs	r2, #131	; 0x83
 800d444:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2203      	movs	r2, #3
 800d454:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d45e:	1d9a      	adds	r2, r3, #6
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d466:	2301      	movs	r3, #1
 800d468:	f000 be4a 	b.w	800e100 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	7d9a      	ldrb	r2, [r3, #22]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	7d5a      	ldrb	r2, [r3, #21]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	7d1a      	ldrb	r2, [r3, #20]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	7cda      	ldrb	r2, [r3, #19]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	7c9a      	ldrb	r2, [r3, #18]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	7b5b      	ldrb	r3, [r3, #13]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	f040 80e2 	bne.w	800d670 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	7e9b      	ldrb	r3, [r3, #26]
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d4be:	021b      	lsls	r3, r3, #8
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d4ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	7edb      	ldrb	r3, [r3, #27]
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	7f1b      	ldrb	r3, [r3, #28]
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d502:	021b      	lsls	r3, r3, #8
 800d504:	b29a      	uxth	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d516:	b29a      	uxth	r2, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	7f5b      	ldrb	r3, [r3, #29]
 800d528:	b29b      	uxth	r3, r3
 800d52a:	4313      	orrs	r3, r2
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800d540:	b29b      	uxth	r3, r3
 800d542:	429a      	cmp	r2, r3
 800d544:	d87a      	bhi.n	800d63c <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d54c:	461a      	mov	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d554:	4413      	add	r3, r2
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800d55c:	4293      	cmp	r3, r2
 800d55e:	dc53      	bgt.n	800d608 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d560:	e029      	b.n	800d5b6 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d568:	461a      	mov	r2, r3
 800d56a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d56c:	4413      	add	r3, r2
 800d56e:	005a      	lsls	r2, r3, #1
 800d570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	3309      	adds	r3, #9
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	440a      	add	r2, r1
 800d57a:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	4413      	add	r3, r2
 800d582:	460a      	mov	r2, r1
 800d584:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d58e:	461a      	mov	r2, r3
 800d590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d592:	4413      	add	r3, r2
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	1c5a      	adds	r2, r3, #1
 800d598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d59a:	3305      	adds	r3, #5
 800d59c:	005b      	lsls	r3, r3, #1
 800d59e:	6879      	ldr	r1, [r7, #4]
 800d5a0:	440a      	add	r2, r1
 800d5a2:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	460a      	mov	r2, r1
 800d5ac:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d5b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d5bc:	461a      	mov	r2, r3
 800d5be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	dbce      	blt.n	800d562 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	005b      	lsls	r3, r3, #1
 800d5ce:	b2da      	uxtb	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2204      	movs	r2, #4
 800d5da:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d5ec:	3303      	adds	r3, #3
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d5fc:	1d9a      	adds	r2, r3, #6
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d604:	f000 bd7c 	b.w	800e100 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2284      	movs	r2, #132	; 0x84
 800d614:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2203      	movs	r2, #3
 800d624:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d62e:	1d9a      	adds	r2, r3, #6
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d636:	2302      	movs	r3, #2
 800d638:	f000 bd62 	b.w	800e100 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2203      	movs	r2, #3
 800d640:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2284      	movs	r2, #132	; 0x84
 800d648:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2201      	movs	r2, #1
 800d650:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2203      	movs	r2, #3
 800d658:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d662:	1d9a      	adds	r2, r3, #6
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d66a:	2303      	movs	r3, #3
 800d66c:	f000 bd48 	b.w	800e100 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2201      	movs	r2, #1
 800d674:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2284      	movs	r2, #132	; 0x84
 800d67c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2203      	movs	r2, #3
 800d68c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d696:	1d9a      	adds	r2, r3, #6
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d69e:	2301      	movs	r3, #1
 800d6a0:	f000 bd2e 	b.w	800e100 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	7d9a      	ldrb	r2, [r3, #22]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	7d5a      	ldrb	r2, [r3, #21]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	7d1a      	ldrb	r2, [r3, #20]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	7cda      	ldrb	r2, [r3, #19]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	7c9a      	ldrb	r2, [r3, #18]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7b9b      	ldrb	r3, [r3, #14]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	f040 80d1 	bne.w	800d886 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7e9b      	ldrb	r3, [r3, #26]
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d6f6:	021b      	lsls	r3, r3, #8
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	7edb      	ldrb	r3, [r3, #27]
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	4313      	orrs	r3, r2
 800d720:	b29a      	uxth	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	7f1b      	ldrb	r3, [r3, #28]
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d73a:	021b      	lsls	r3, r3, #8
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d74a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d74e:	b29a      	uxth	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	7f5b      	ldrb	r3, [r3, #29]
 800d760:	b29b      	uxth	r3, r3
 800d762:	4313      	orrs	r3, r2
 800d764:	b29a      	uxth	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800d772:	461a      	mov	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d77a:	429a      	cmp	r2, r3
 800d77c:	dd69      	ble.n	800d852 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d784:	2b00      	cmp	r3, #0
 800d786:	d005      	beq.n	800d794 <ModBUS+0xa60>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d78e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d792:	d144      	bne.n	800d81e <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d79a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d79e:	d10d      	bne.n	800d7bc <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	408a      	lsls	r2, r1
 800d7b2:	431a      	orrs	r2, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800d7ba:	e003      	b.n	800d7c4 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	7f5a      	ldrb	r2, [r3, #29]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	7f1a      	ldrb	r2, [r3, #28]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7eda      	ldrb	r2, [r3, #27]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	7e9a      	ldrb	r2, [r3, #26]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2205      	movs	r2, #5
 800d7f0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d802:	3306      	adds	r3, #6
 800d804:	b2da      	uxtb	r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d812:	1d9a      	adds	r2, r3, #6
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d81a:	f000 bc71 	b.w	800e100 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2202      	movs	r2, #2
 800d822:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2285      	movs	r2, #133	; 0x85
 800d82a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2203      	movs	r2, #3
 800d83a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d844:	1d9a      	adds	r2, r3, #6
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800d84c:	2302      	movs	r3, #2
 800d84e:	f000 bc57 	b.w	800e100 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2203      	movs	r2, #3
 800d856:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2285      	movs	r2, #133	; 0x85
 800d85e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2201      	movs	r2, #1
 800d866:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2203      	movs	r2, #3
 800d86e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d878:	1d9a      	adds	r2, r3, #6
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800d880:	2303      	movs	r3, #3
 800d882:	f000 bc3d 	b.w	800e100 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2285      	movs	r2, #133	; 0x85
 800d892:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2203      	movs	r2, #3
 800d8a2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d8ac:	1d9a      	adds	r2, r3, #6
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	f000 bc23 	b.w	800e100 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	7d9a      	ldrb	r2, [r3, #22]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7d5a      	ldrb	r2, [r3, #21]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	7d1a      	ldrb	r2, [r3, #20]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	7cda      	ldrb	r2, [r3, #19]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	7c9a      	ldrb	r2, [r3, #18]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	7bdb      	ldrb	r3, [r3, #15]
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	f040 80a3 	bne.w	800da44 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7e9b      	ldrb	r3, [r3, #26]
 800d902:	b29a      	uxth	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d910:	021b      	lsls	r3, r3, #8
 800d912:	b29a      	uxth	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d920:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d924:	b29a      	uxth	r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	7edb      	ldrb	r3, [r3, #27]
 800d936:	b29b      	uxth	r3, r3
 800d938:	4313      	orrs	r3, r2
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d948:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	7f1b      	ldrb	r3, [r3, #28]
 800d94e:	b29a      	uxth	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d95c:	021b      	lsls	r3, r3, #8
 800d95e:	b29a      	uxth	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d96c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d970:	b29a      	uxth	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	7f5b      	ldrb	r3, [r3, #29]
 800d982:	b29b      	uxth	r3, r3
 800d984:	4313      	orrs	r3, r2
 800d986:	b29a      	uxth	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d838      	bhi.n	800da12 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d9a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	7f11      	ldrb	r1, [r2, #28]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	460a      	mov	r2, r1
 800d9ac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d9b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	7f51      	ldrb	r1, [r2, #29]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	460a      	mov	r2, r1
 800d9be:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	7f5a      	ldrb	r2, [r3, #29]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	7f1a      	ldrb	r2, [r3, #28]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	7eda      	ldrb	r2, [r3, #27]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7e9a      	ldrb	r2, [r3, #26]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2206      	movs	r2, #6
 800d9ee:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2206      	movs	r2, #6
 800d9fe:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da08:	1d9a      	adds	r2, r3, #6
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800da10:	e376      	b.n	800e100 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2202      	movs	r2, #2
 800da16:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2286      	movs	r2, #134	; 0x86
 800da1e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2203      	movs	r2, #3
 800da2e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da38:	1d9a      	adds	r2, r3, #6
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800da40:	2302      	movs	r3, #2
 800da42:	e35d      	b.n	800e100 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2201      	movs	r2, #1
 800da48:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2286      	movs	r2, #134	; 0x86
 800da50:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2203      	movs	r2, #3
 800da60:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da6a:	1d9a      	adds	r2, r3, #6
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800da72:	2301      	movs	r3, #1
 800da74:	e344      	b.n	800e100 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	7d9a      	ldrb	r2, [r3, #22]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	7d5a      	ldrb	r2, [r3, #21]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	7d1a      	ldrb	r2, [r3, #20]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	7cda      	ldrb	r2, [r3, #19]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7c9a      	ldrb	r2, [r3, #18]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800daa8:	2300      	movs	r3, #0
 800daaa:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	7c1b      	ldrb	r3, [r3, #16]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	f040 810f 	bne.w	800dcd4 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	7e9b      	ldrb	r3, [r3, #26]
 800daba:	b29a      	uxth	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dac8:	021b      	lsls	r3, r3, #8
 800daca:	b29a      	uxth	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dad8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dadc:	b29a      	uxth	r2, r3
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	7edb      	ldrb	r3, [r3, #27]
 800daee:	b29b      	uxth	r3, r3
 800daf0:	4313      	orrs	r3, r2
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	7f1b      	ldrb	r3, [r3, #28]
 800dafe:	b29a      	uxth	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800db0c:	021b      	lsls	r3, r3, #8
 800db0e:	b29a      	uxth	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800db1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db20:	b29a      	uxth	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	7f5b      	ldrb	r3, [r3, #29]
 800db32:	b29b      	uxth	r3, r3
 800db34:	4313      	orrs	r3, r2
 800db36:	b29a      	uxth	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	429a      	cmp	r2, r3
 800db4e:	f200 80a8 	bhi.w	800dca2 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800db58:	461a      	mov	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800db60:	4413      	add	r3, r2
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800db68:	4293      	cmp	r3, r2
 800db6a:	f300 8081 	bgt.w	800dc70 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800db6e:	2300      	movs	r3, #0
 800db70:	657b      	str	r3, [r7, #84]	; 0x54
 800db72:	2300      	movs	r3, #0
 800db74:	653b      	str	r3, [r7, #80]	; 0x50
 800db76:	2300      	movs	r3, #0
 800db78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db7a:	2300      	movs	r3, #0
 800db7c:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	7f9b      	ldrb	r3, [r3, #30]
 800db82:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800db84:	e00e      	b.n	800dba4 <ModBUS+0xe70>
									{
										data=data<<8;
 800db86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db88:	021b      	lsls	r3, r3, #8
 800db8a:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800db8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db8e:	330c      	adds	r3, #12
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	4413      	add	r3, r2
 800db94:	7c9b      	ldrb	r3, [r3, #18]
 800db96:	461a      	mov	r2, r3
 800db98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db9a:	4313      	orrs	r3, r2
 800db9c:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800db9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba0:	3b01      	subs	r3, #1
 800dba2:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800dba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1ed      	bne.n	800db86 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbb4:	4093      	lsls	r3, r2
 800dbb6:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800dbb8:	e00f      	b.n	800dbda <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc4:	4413      	add	r3, r2
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbcc:	461a      	mov	r2, r3
 800dbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800dbd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d3e8      	bcc.n	800dbba <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800dbe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbea:	43db      	mvns	r3, r3
 800dbec:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800dbf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbf6:	401a      	ands	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800dbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc00:	43db      	mvns	r3, r3
 800dc02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc04:	4013      	ands	r3, r2
 800dc06:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800dc0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc10:	431a      	orrs	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	7f5a      	ldrb	r2, [r3, #29]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	7f1a      	ldrb	r2, [r3, #28]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	7eda      	ldrb	r2, [r3, #27]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	7e9a      	ldrb	r2, [r3, #26]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	220f      	movs	r2, #15
 800dc44:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800dc56:	3306      	adds	r3, #6
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dc66:	1d9a      	adds	r2, r3, #6
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800dc6e:	e247      	b.n	800e100 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2202      	movs	r2, #2
 800dc74:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	228f      	movs	r2, #143	; 0x8f
 800dc7c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2203      	movs	r2, #3
 800dc8c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dc96:	1d9a      	adds	r2, r3, #6
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800dc9e:	2302      	movs	r3, #2
 800dca0:	e22e      	b.n	800e100 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2203      	movs	r2, #3
 800dca6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	228f      	movs	r2, #143	; 0x8f
 800dcae:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2203      	movs	r2, #3
 800dcbe:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dcc8:	1d9a      	adds	r2, r3, #6
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	e215      	b.n	800e100 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	228f      	movs	r2, #143	; 0x8f
 800dce0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2203      	movs	r2, #3
 800dcf0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dcfa:	1d9a      	adds	r2, r3, #6
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800dd02:	2301      	movs	r3, #1
 800dd04:	e1fc      	b.n	800e100 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	7d9a      	ldrb	r2, [r3, #22]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	7d5a      	ldrb	r2, [r3, #21]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	7d1a      	ldrb	r2, [r3, #20]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	7cda      	ldrb	r2, [r3, #19]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	7c9a      	ldrb	r2, [r3, #18]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dd3e:	2300      	movs	r3, #0
 800dd40:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	7c5b      	ldrb	r3, [r3, #17]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	f040 80eb 	bne.w	800df22 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7e9b      	ldrb	r3, [r3, #26]
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dd5e:	021b      	lsls	r3, r3, #8
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dd6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	7edb      	ldrb	r3, [r3, #27]
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	4313      	orrs	r3, r2
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dd96:	005b      	lsls	r3, r3, #1
 800dd98:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	7f1b      	ldrb	r3, [r3, #28]
 800dd9e:	b29a      	uxth	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ddac:	021b      	lsls	r3, r3, #8
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ddbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	7f5b      	ldrb	r3, [r3, #29]
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	b29a      	uxth	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d87f      	bhi.n	800def0 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ddfe:	4413      	add	r3, r2
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800de06:	4293      	cmp	r3, r2
 800de08:	dc59      	bgt.n	800debe <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800de0a:	e029      	b.n	800de60 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800de0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de10:	f103 020d 	add.w	r2, r3, #13
 800de14:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800de16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de1a:	440b      	add	r3, r1
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	440a      	add	r2, r1
 800de20:	7c91      	ldrb	r1, [r2, #18]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	4413      	add	r3, r2
 800de26:	460a      	mov	r2, r1
 800de28:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800de2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de30:	3301      	adds	r3, #1
 800de32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800de36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de3a:	f103 020d 	add.w	r2, r3, #13
 800de3e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800de40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de44:	440b      	add	r3, r1
 800de46:	6879      	ldr	r1, [r7, #4]
 800de48:	440a      	add	r2, r1
 800de4a:	7c91      	ldrb	r1, [r2, #18]
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	4413      	add	r3, r2
 800de50:	460a      	mov	r2, r1
 800de52:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800de56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de5a:	3301      	adds	r3, #1
 800de5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	7f9b      	ldrb	r3, [r3, #30]
 800de64:	b29b      	uxth	r3, r3
 800de66:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d3ce      	bcc.n	800de0c <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	7f5a      	ldrb	r2, [r3, #29]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7f1a      	ldrb	r2, [r3, #28]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	7eda      	ldrb	r2, [r3, #27]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	7e9a      	ldrb	r2, [r3, #26]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2210      	movs	r2, #16
 800de9a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2206      	movs	r2, #6
 800deaa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800deb4:	1d9a      	adds	r2, r3, #6
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800debc:	e120      	b.n	800e100 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2202      	movs	r2, #2
 800dec2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2290      	movs	r2, #144	; 0x90
 800deca:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2201      	movs	r2, #1
 800ded2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2203      	movs	r2, #3
 800deda:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dee4:	1d9a      	adds	r2, r3, #6
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800deec:	2302      	movs	r3, #2
 800deee:	e107      	b.n	800e100 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2203      	movs	r2, #3
 800def4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2290      	movs	r2, #144	; 0x90
 800defc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2201      	movs	r2, #1
 800df04:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2203      	movs	r2, #3
 800df0c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800df16:	1d9a      	adds	r2, r3, #6
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800df1e:	2303      	movs	r3, #3
 800df20:	e0ee      	b.n	800e100 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2201      	movs	r2, #1
 800df26:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2290      	movs	r2, #144	; 0x90
 800df2e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2201      	movs	r2, #1
 800df36:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2203      	movs	r2, #3
 800df3e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800df48:	1d9a      	adds	r2, r3, #6
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800df50:	2301      	movs	r3, #1
 800df52:	e0d5      	b.n	800e100 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2201      	movs	r2, #1
 800df58:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	7e5b      	ldrb	r3, [r3, #25]
 800df60:	3b80      	subs	r3, #128	; 0x80
 800df62:	b2da      	uxtb	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	7e1a      	ldrb	r2, [r3, #24]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2203      	movs	r2, #3
 800df78:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	7d9a      	ldrb	r2, [r3, #22]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	7d5a      	ldrb	r2, [r3, #21]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7d1a      	ldrb	r2, [r3, #20]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	7cda      	ldrb	r2, [r3, #19]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	7c9a      	ldrb	r2, [r3, #18]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dfb4:	1d9a      	adds	r2, r3, #6
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e09f      	b.n	800e100 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e09d      	b.n	800e100 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	791b      	ldrb	r3, [r3, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f040 8099 	bne.w	800e100 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f103 0212 	add.w	r2, r3, #18
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dfda:	4619      	mov	r1, r3
 800dfdc:	4610      	mov	r0, r2
 800dfde:	f7fe fda7 	bl	800cb30 <ModBUS_Check>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 808b 	beq.w	800e100 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7fe fdbf 	bl	800cb6e <ModBUS_Check_tid>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d04f      	beq.n	800e096 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	7e5b      	ldrb	r3, [r3, #25]
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	d143      	bne.n	800e086 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800dffe:	2300      	movs	r3, #0
 800e000:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800e002:	2300      	movs	r3, #0
 800e004:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800e00e:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800e010:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e012:	021b      	lsls	r3, r3, #8
 800e014:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e020:	4313      	orrs	r3, r2
 800e022:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800e02a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800e02e:	2300      	movs	r3, #0
 800e030:	643b      	str	r3, [r7, #64]	; 0x40
 800e032:	e022      	b.n	800e07a <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800e034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	f103 0209 	add.w	r2, r3, #9
 800e03c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800e03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e040:	440b      	add	r3, r1
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	6879      	ldr	r1, [r7, #4]
 800e046:	440a      	add	r2, r1
 800e048:	7c91      	ldrb	r1, [r2, #18]
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	4413      	add	r3, r2
 800e04e:	460a      	mov	r2, r1
 800e050:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800e054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e056:	3305      	adds	r3, #5
 800e058:	005a      	lsls	r2, r3, #1
 800e05a:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800e05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e05e:	440b      	add	r3, r1
 800e060:	005b      	lsls	r3, r3, #1
 800e062:	3301      	adds	r3, #1
 800e064:	6879      	ldr	r1, [r7, #4]
 800e066:	440a      	add	r2, r1
 800e068:	7c91      	ldrb	r1, [r2, #18]
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	4413      	add	r3, r2
 800e06e:	460a      	mov	r2, r1
 800e070:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800e074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e076:	3301      	adds	r3, #1
 800e078:	643b      	str	r3, [r7, #64]	; 0x40
 800e07a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e07e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e080:	429a      	cmp	r2, r3
 800e082:	dbd7      	blt.n	800e034 <ModBUS+0x1300>

						}


					}
					break;
 800e084:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	7ddb      	ldrb	r3, [r3, #23]
 800e08a:	461a      	mov	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	7e9b      	ldrb	r3, [r3, #26]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	63bb      	str	r3, [r7, #56]	; 0x38
 800e094:	e034      	b.n	800e100 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	7e5b      	ldrb	r3, [r3, #25]
 800e09a:	3b81      	subs	r3, #129	; 0x81
 800e09c:	2b15      	cmp	r3, #21
 800e09e:	d82f      	bhi.n	800e100 <ModBUS+0x13cc>
 800e0a0:	a201      	add	r2, pc, #4	; (adr r2, 800e0a8 <ModBUS+0x1374>)
 800e0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a6:	bf00      	nop
 800e0a8:	0800e101 	.word	0x0800e101
 800e0ac:	0800e101 	.word	0x0800e101
 800e0b0:	0800e101 	.word	0x0800e101
 800e0b4:	0800e101 	.word	0x0800e101
 800e0b8:	0800e101 	.word	0x0800e101
 800e0bc:	0800e101 	.word	0x0800e101
 800e0c0:	0800e101 	.word	0x0800e101
 800e0c4:	0800e101 	.word	0x0800e101
 800e0c8:	0800e101 	.word	0x0800e101
 800e0cc:	0800e101 	.word	0x0800e101
 800e0d0:	0800e101 	.word	0x0800e101
 800e0d4:	0800e101 	.word	0x0800e101
 800e0d8:	0800e101 	.word	0x0800e101
 800e0dc:	0800e101 	.word	0x0800e101
 800e0e0:	0800e101 	.word	0x0800e101
 800e0e4:	0800e101 	.word	0x0800e101
 800e0e8:	0800e101 	.word	0x0800e101
 800e0ec:	0800e101 	.word	0x0800e101
 800e0f0:	0800e101 	.word	0x0800e101
 800e0f4:	0800e101 	.word	0x0800e101
 800e0f8:	0800e101 	.word	0x0800e101
 800e0fc:	0800e101 	.word	0x0800e101
			}
		}
	}


}
 800e100:	4618      	mov	r0, r3
 800e102:	3770      	adds	r7, #112	; 0x70
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af02      	add	r7, sp, #8
 800e10e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6858      	ldr	r0, [r3, #4]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	891b      	ldrh	r3, [r3, #8]
 800e118:	2200      	movs	r2, #0
 800e11a:	4619      	mov	r1, r3
 800e11c:	f7f5 f9bc 	bl	8003498 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6818      	ldr	r0, [r3, #0]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f103 0114 	add.w	r1, r3, #20
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f103 0218 	add.w	r2, r3, #24
 800e130:	2364      	movs	r3, #100	; 0x64
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	2304      	movs	r3, #4
 800e136:	f7f5 fec4 	bl	8003ec2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6858      	ldr	r0, [r3, #4]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	891b      	ldrh	r3, [r3, #8]
 800e142:	2201      	movs	r2, #1
 800e144:	4619      	mov	r1, r3
 800e146:	f7f5 f9a7 	bl	8003498 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	7edb      	ldrb	r3, [r3, #27]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b086      	sub	sp, #24
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	4608      	mov	r0, r1
 800e160:	4611      	mov	r1, r2
 800e162:	461a      	mov	r2, r3
 800e164:	4603      	mov	r3, r0
 800e166:	70fb      	strb	r3, [r7, #3]
 800e168:	460b      	mov	r3, r1
 800e16a:	70bb      	strb	r3, [r7, #2]
 800e16c:	4613      	mov	r3, r2
 800e16e:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800e170:	2300      	movs	r3, #0
 800e172:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	787a      	ldrb	r2, [r7, #1]
 800e178:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	78fa      	ldrb	r2, [r7, #3]
 800e17e:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	78ba      	ldrb	r2, [r7, #2]
 800e184:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2200      	movs	r2, #0
 800e18a:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800e18c:	787b      	ldrb	r3, [r7, #1]
 800e18e:	2bf0      	cmp	r3, #240	; 0xf0
 800e190:	d11d      	bne.n	800e1ce <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800e192:	2300      	movs	r3, #0
 800e194:	613b      	str	r3, [r7, #16]
 800e196:	e013      	b.n	800e1c0 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	6a3a      	ldr	r2, [r7, #32]
 800e19c:	4413      	add	r3, r2
 800e19e:	781a      	ldrb	r2, [r3, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f7ff ffaf 	bl	800e108 <SPI_ETH>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	7d9b      	ldrb	r3, [r3, #22]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	b2da      	uxtb	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	613b      	str	r3, [r7, #16]
 800e1c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1c4:	693a      	ldr	r2, [r7, #16]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	dbe6      	blt.n	800e198 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800e1ca:	8afb      	ldrh	r3, [r7, #22]
 800e1cc:	e037      	b.n	800e23e <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800e1ce:	787b      	ldrb	r3, [r7, #1]
 800e1d0:	2b0f      	cmp	r3, #15
 800e1d2:	d134      	bne.n	800e23e <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800e1da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	d120      	bne.n	800e224 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	60fb      	str	r3, [r7, #12]
 800e1e6:	e016      	b.n	800e216 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7ff ff8d 	bl	800e108 <SPI_ETH>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	8afb      	ldrh	r3, [r7, #22]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	7d9b      	ldrb	r3, [r3, #22]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d102      	bne.n	800e210 <SPI_ETH_REG+0xba>
 800e20a:	8afb      	ldrh	r3, [r7, #22]
 800e20c:	021b      	lsls	r3, r3, #8
 800e20e:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	3301      	adds	r3, #1
 800e214:	60fb      	str	r3, [r7, #12]
 800e216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	dbe3      	blt.n	800e1e8 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800e220:	8afb      	ldrh	r3, [r7, #22]
 800e222:	e00c      	b.n	800e23e <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff ff6f 	bl	800e108 <SPI_ETH>
 800e22a:	4603      	mov	r3, r0
 800e22c:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	7d9b      	ldrb	r3, [r3, #22]
 800e232:	3301      	adds	r3, #1
 800e234:	b2da      	uxtb	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	759a      	strb	r2, [r3, #22]
			return(res);
 800e23a:	8afb      	ldrh	r3, [r7, #22]
 800e23c:	e7ff      	b.n	800e23e <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3718      	adds	r7, #24
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b086      	sub	sp, #24
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	460b      	mov	r3, r1
 800e250:	807b      	strh	r3, [r7, #2]
 800e252:	4613      	mov	r3, r2
 800e254:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800e256:	2300      	movs	r3, #0
 800e258:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	22f0      	movs	r2, #240	; 0xf0
 800e25e:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800e260:	883b      	ldrh	r3, [r7, #0]
 800e262:	b2db      	uxtb	r3, r3
 800e264:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800e266:	883b      	ldrh	r3, [r7, #0]
 800e268:	0a1b      	lsrs	r3, r3, #8
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800e270:	2300      	movs	r3, #0
 800e272:	613b      	str	r3, [r7, #16]
 800e274:	e01b      	b.n	800e2ae <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800e276:	887b      	ldrh	r3, [r7, #2]
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800e27e:	887b      	ldrh	r3, [r7, #2]
 800e280:	0a1b      	lsrs	r3, r3, #8
 800e282:	b29b      	uxth	r3, r3
 800e284:	b2da      	uxtb	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	755a      	strb	r2, [r3, #21]
		addr++;
 800e28a:	887b      	ldrh	r3, [r7, #2]
 800e28c:	3301      	adds	r3, #1
 800e28e:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800e290:	f107 020c 	add.w	r2, r7, #12
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	4413      	add	r3, r2
 800e298:	781a      	ldrb	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7ff ff32 	bl	800e108 <SPI_ETH>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	613b      	str	r3, [r7, #16]
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	dde0      	ble.n	800e276 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800e2b4:	8afb      	ldrh	r3, [r7, #22]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3718      	adds	r7, #24
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e2be:	b590      	push	{r4, r7, lr}
 800e2c0:	b087      	sub	sp, #28
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	60f8      	str	r0, [r7, #12]
 800e2c6:	607a      	str	r2, [r7, #4]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	817b      	strh	r3, [r7, #10]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	220f      	movs	r2, #15
 800e2d6:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e2d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2de:	d226      	bcs.n	800e32e <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	617b      	str	r3, [r7, #20]
 800e2ea:	e01a      	b.n	800e322 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800e2ec:	897b      	ldrh	r3, [r7, #10]
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e2f4:	897b      	ldrh	r3, [r7, #10]
 800e2f6:	0a1b      	lsrs	r3, r3, #8
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800e300:	893a      	ldrh	r2, [r7, #8]
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	4413      	add	r3, r2
 800e306:	461a      	mov	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	189c      	adds	r4, r3, r2
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f7ff fefb 	bl	800e108 <SPI_ETH>
 800e312:	4603      	mov	r3, r0
 800e314:	7023      	strb	r3, [r4, #0]
				addr++;
 800e316:	897b      	ldrh	r3, [r7, #10]
 800e318:	3301      	adds	r3, #1
 800e31a:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	3301      	adds	r3, #1
 800e320:	617b      	str	r3, [r7, #20]
 800e322:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e324:	697a      	ldr	r2, [r7, #20]
 800e326:	429a      	cmp	r2, r3
 800e328:	dbe0      	blt.n	800e2ec <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e32a:	2300      	movs	r3, #0
 800e32c:	e000      	b.n	800e330 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800e32e:	2301      	movs	r3, #1
	}
}
 800e330:	4618      	mov	r0, r3
 800e332:	371c      	adds	r7, #28
 800e334:	46bd      	mov	sp, r7
 800e336:	bd90      	pop	{r4, r7, pc}

0800e338 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	607a      	str	r2, [r7, #4]
 800e342:	461a      	mov	r2, r3
 800e344:	460b      	mov	r3, r1
 800e346:	817b      	strh	r3, [r7, #10]
 800e348:	4613      	mov	r3, r2
 800e34a:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	22f0      	movs	r2, #240	; 0xf0
 800e350:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e352:	8c3b      	ldrh	r3, [r7, #32]
 800e354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e358:	d223      	bcs.n	800e3a2 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800e35a:	2300      	movs	r3, #0
 800e35c:	617b      	str	r3, [r7, #20]
 800e35e:	e01a      	b.n	800e396 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800e360:	897b      	ldrh	r3, [r7, #10]
 800e362:	b2da      	uxtb	r2, r3
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e368:	897b      	ldrh	r3, [r7, #10]
 800e36a:	0a1b      	lsrs	r3, r3, #8
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800e374:	893a      	ldrh	r2, [r7, #8]
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	4413      	add	r3, r2
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	4413      	add	r3, r2
 800e37e:	7f1a      	ldrb	r2, [r3, #28]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f7ff febf 	bl	800e108 <SPI_ETH>
				addr++;
 800e38a:	897b      	ldrh	r3, [r7, #10]
 800e38c:	3301      	adds	r3, #1
 800e38e:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	3301      	adds	r3, #1
 800e394:	617b      	str	r3, [r7, #20]
 800e396:	8c3b      	ldrh	r3, [r7, #32]
 800e398:	697a      	ldr	r2, [r7, #20]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	dbe0      	blt.n	800e360 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e39e:	2300      	movs	r3, #0
 800e3a0:	e000      	b.n	800e3a4 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800e3a2:	2301      	movs	r3, #1
	}
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	70fb      	strb	r3, [r7, #3]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	22f0      	movs	r2, #240	; 0xf0
 800e3c0:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800e3c2:	78fb      	ldrb	r3, [r7, #3]
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	78ba      	ldrb	r2, [r7, #2]
 800e3d6:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7ff fe95 	bl	800e108 <SPI_ETH>
}
 800e3de:	bf00      	nop
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	70fb      	strb	r3, [r7, #3]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	22f0      	movs	r2, #240	; 0xf0
 800e3fc:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800e3fe:	78fb      	ldrb	r3, [r7, #3]
 800e400:	3304      	adds	r3, #4
 800e402:	b2da      	uxtb	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	78ba      	ldrb	r2, [r7, #2]
 800e412:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff fe77 	bl	800e108 <SPI_ETH>
}
 800e41a:	bf00      	nop
 800e41c:	4618      	mov	r0, r3
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af02      	add	r7, sp, #8
 800e42a:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e432:	331c      	adds	r3, #28
 800e434:	2204      	movs	r2, #4
 800e436:	9201      	str	r2, [sp, #4]
 800e438:	9300      	str	r3, [sp, #0]
 800e43a:	23f0      	movs	r3, #240	; 0xf0
 800e43c:	2201      	movs	r2, #1
 800e43e:	2100      	movs	r1, #0
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f7ff fe88 	bl	800e156 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800e446:	2119      	movs	r1, #25
 800e448:	482d      	ldr	r0, [pc, #180]	; (800e500 <eth_init+0xdc>)
 800e44a:	f7f3 f873 	bl	8001534 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e454:	2204      	movs	r2, #4
 800e456:	9201      	str	r2, [sp, #4]
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	23f0      	movs	r3, #240	; 0xf0
 800e45c:	2205      	movs	r2, #5
 800e45e:	2100      	movs	r1, #0
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7ff fe78 	bl	800e156 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800e466:	2116      	movs	r1, #22
 800e468:	4826      	ldr	r0, [pc, #152]	; (800e504 <eth_init+0xe0>)
 800e46a:	f7f3 f863 	bl	8001534 <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e474:	3304      	adds	r3, #4
 800e476:	2206      	movs	r2, #6
 800e478:	9201      	str	r2, [sp, #4]
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	23f0      	movs	r3, #240	; 0xf0
 800e47e:	2209      	movs	r2, #9
 800e480:	2100      	movs	r1, #0
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff fe67 	bl	800e156 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800e488:	2113      	movs	r1, #19
 800e48a:	481f      	ldr	r0, [pc, #124]	; (800e508 <eth_init+0xe4>)
 800e48c:	f7f3 f852 	bl	8001534 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e496:	330a      	adds	r3, #10
 800e498:	2204      	movs	r2, #4
 800e49a:	9201      	str	r2, [sp, #4]
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	23f0      	movs	r3, #240	; 0xf0
 800e4a0:	220f      	movs	r2, #15
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f7ff fe56 	bl	800e156 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800e4aa:	2112      	movs	r1, #18
 800e4ac:	4817      	ldr	r0, [pc, #92]	; (800e50c <eth_init+0xe8>)
 800e4ae:	f7f3 f841 	bl	8001534 <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e4b8:	330e      	adds	r3, #14
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	9201      	str	r2, [sp, #4]
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	23f0      	movs	r3, #240	; 0xf0
 800e4c2:	221a      	movs	r2, #26
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f7ff fe45 	bl	800e156 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800e4cc:	2128      	movs	r1, #40	; 0x28
 800e4ce:	4810      	ldr	r0, [pc, #64]	; (800e510 <eth_init+0xec>)
 800e4d0:	f7f3 f830 	bl	8001534 <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e4da:	330f      	adds	r3, #15
 800e4dc:	2201      	movs	r2, #1
 800e4de:	9201      	str	r2, [sp, #4]
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	23f0      	movs	r3, #240	; 0xf0
 800e4e4:	221b      	movs	r2, #27
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7ff fe34 	bl	800e156 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800e4ee:	2128      	movs	r1, #40	; 0x28
 800e4f0:	4808      	ldr	r0, [pc, #32]	; (800e514 <eth_init+0xf0>)
 800e4f2:	f7f3 f81f 	bl	8001534 <ITM0_Write>

}
 800e4f6:	bf00      	nop
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	08010e5c 	.word	0x08010e5c
 800e504:	08010e78 	.word	0x08010e78
 800e508:	08010e94 	.word	0x08010e94
 800e50c:	08010eac 	.word	0x08010eac
 800e510:	08010ec4 	.word	0x08010ec4
 800e514:	08010ef0 	.word	0x08010ef0

0800e518 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af02      	add	r7, sp, #8
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800e524:	78fb      	ldrb	r3, [r7, #3]
 800e526:	2201      	movs	r2, #1
 800e528:	4619      	mov	r1, r3
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7ff ff5c 	bl	800e3e8 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800e530:	2119      	movs	r1, #25
 800e532:	4830      	ldr	r0, [pc, #192]	; (800e5f4 <eth_socket_init+0xdc>)
 800e534:	f7f2 fffe 	bl	8001534 <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e53e:	331a      	adds	r3, #26
 800e540:	2202      	movs	r2, #2
 800e542:	9201      	str	r2, [sp, #4]
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	23f0      	movs	r3, #240	; 0xf0
 800e548:	2204      	movs	r2, #4
 800e54a:	2104      	movs	r1, #4
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7ff fe02 	bl	800e156 <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800e552:	212c      	movs	r1, #44	; 0x2c
 800e554:	4828      	ldr	r0, [pc, #160]	; (800e5f8 <eth_socket_init+0xe0>)
 800e556:	f7f2 ffed 	bl	8001534 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e560:	331c      	adds	r3, #28
 800e562:	2204      	movs	r2, #4
 800e564:	9201      	str	r2, [sp, #4]
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	23f0      	movs	r3, #240	; 0xf0
 800e56a:	220c      	movs	r2, #12
 800e56c:	2104      	movs	r1, #4
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff fdf1 	bl	800e156 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800e574:	212e      	movs	r1, #46	; 0x2e
 800e576:	4821      	ldr	r0, [pc, #132]	; (800e5fc <eth_socket_init+0xe4>)
 800e578:	f7f2 ffdc 	bl	8001534 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e582:	2202      	movs	r2, #2
 800e584:	9201      	str	r2, [sp, #4]
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	23f0      	movs	r3, #240	; 0xf0
 800e58a:	2210      	movs	r2, #16
 800e58c:	2104      	movs	r1, #4
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7ff fde1 	bl	800e156 <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800e594:	2120      	movs	r1, #32
 800e596:	481a      	ldr	r0, [pc, #104]	; (800e600 <eth_socket_init+0xe8>)
 800e598:	f7f2 ffcc 	bl	8001534 <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800e59c:	78fb      	ldrb	r3, [r7, #3]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7ff ff02 	bl	800e3ac <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800e5a8:	2119      	movs	r1, #25
 800e5aa:	4816      	ldr	r0, [pc, #88]	; (800e604 <eth_socket_init+0xec>)
 800e5ac:	f7f2 ffc2 	bl	8001534 <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d10a      	bne.n	800e5d4 <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800e5be:	78fb      	ldrb	r3, [r7, #3]
 800e5c0:	2202      	movs	r2, #2
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff fef1 	bl	800e3ac <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800e5ca:	211b      	movs	r1, #27
 800e5cc:	480e      	ldr	r0, [pc, #56]	; (800e608 <eth_socket_init+0xf0>)
 800e5ce:	f7f2 ffb1 	bl	8001534 <ITM0_Write>
 800e5d2:	e009      	b.n	800e5e8 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800e5d4:	78fb      	ldrb	r3, [r7, #3]
 800e5d6:	2204      	movs	r2, #4
 800e5d8:	4619      	mov	r1, r3
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7ff fee6 	bl	800e3ac <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800e5e0:	2115      	movs	r1, #21
 800e5e2:	480a      	ldr	r0, [pc, #40]	; (800e60c <eth_socket_init+0xf4>)
 800e5e4:	f7f2 ffa6 	bl	8001534 <ITM0_Write>
	 }
}
 800e5e8:	bf00      	nop
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	08010f1c 	.word	0x08010f1c
 800e5f8:	08010f38 	.word	0x08010f38
 800e5fc:	08010f68 	.word	0x08010f68
 800e600:	08010f98 	.word	0x08010f98
 800e604:	08010fbc 	.word	0x08010fbc
 800e608:	08010fd8 	.word	0x08010fd8
 800e60c:	08010ff4 	.word	0x08010ff4

0800e610 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	460b      	mov	r3, r1
 800e61a:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	220f      	movs	r2, #15
 800e620:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800e622:	78fb      	ldrb	r3, [r7, #3]
 800e624:	3304      	adds	r3, #4
 800e626:	b2da      	uxtb	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2203      	movs	r2, #3
 800e630:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2200      	movs	r2, #0
 800e636:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7ff fd65 	bl	800e108 <SPI_ETH>
	return(y->RX[3]);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	7edb      	ldrb	r3, [r3, #27]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3708      	adds	r7, #8
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b082      	sub	sp, #8
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
 800e652:	460b      	mov	r3, r1
 800e654:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	220f      	movs	r2, #15
 800e65a:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e65c:	78fb      	ldrb	r3, [r7, #3]
 800e65e:	3304      	adds	r3, #4
 800e660:	b2da      	uxtb	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7ff fd48 	bl	800e108 <SPI_ETH>
	return(y->RX[3]);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	7edb      	ldrb	r3, [r3, #27]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b08c      	sub	sp, #48	; 0x30
 800e688:	af02      	add	r7, sp, #8
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	607a      	str	r2, [r7, #4]
 800e68e:	461a      	mov	r2, r3
 800e690:	460b      	mov	r3, r1
 800e692:	72fb      	strb	r3, [r7, #11]
 800e694:	4613      	mov	r3, r2
 800e696:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e698:	2300      	movs	r3, #0
 800e69a:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e69c:	2300      	movs	r3, #0
 800e69e:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e6c0:	7afb      	ldrb	r3, [r7, #11]
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d83e      	bhi.n	800e744 <eth_rd_SOCKET_DATA+0xc0>
 800e6c6:	a201      	add	r2, pc, #4	; (adr r2, 800e6cc <eth_rd_SOCKET_DATA+0x48>)
 800e6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6cc:	0800e6dd 	.word	0x0800e6dd
 800e6d0:	0800e6f7 	.word	0x0800e6f7
 800e6d4:	0800e711 	.word	0x0800e711
 800e6d8:	0800e72b 	.word	0x0800e72b
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6e6:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e6f4:	e033      	b.n	800e75e <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6fc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e700:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e708:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e70c:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e70e:	e026      	b.n	800e75e <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e71a:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e722:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e726:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e728:	e019      	b.n	800e75e <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e730:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e734:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e73c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e740:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e742:	e00c      	b.n	800e75e <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e74a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e74e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e75a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e75c:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e75e:	7afb      	ldrb	r3, [r7, #11]
 800e760:	3304      	adds	r3, #4
 800e762:	b2d9      	uxtb	r1, r3
 800e764:	2302      	movs	r3, #2
 800e766:	9301      	str	r3, [sp, #4]
 800e768:	f107 0310 	add.w	r3, r7, #16
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	230f      	movs	r3, #15
 800e770:	2228      	movs	r2, #40	; 0x28
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f7ff fcef 	bl	800e156 <SPI_ETH_REG>
 800e778:	4603      	mov	r3, r0
 800e77a:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e77c:	8b7a      	ldrh	r2, [r7, #26]
 800e77e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e780:	4013      	ands	r3, r2
 800e782:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e784:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e786:	8b3b      	ldrh	r3, [r7, #24]
 800e788:	4413      	add	r3, r2
 800e78a:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e78c:	8b3a      	ldrh	r2, [r7, #24]
 800e78e:	893b      	ldrh	r3, [r7, #8]
 800e790:	441a      	add	r2, r3
 800e792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e794:	3301      	adds	r3, #1
 800e796:	429a      	cmp	r2, r3
 800e798:	dd2c      	ble.n	800e7f4 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e79a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e79c:	8b3b      	ldrh	r3, [r7, #24]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f103 021c 	add.w	r2, r3, #28
 800e7ac:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e7ae:	8af9      	ldrh	r1, [r7, #22]
 800e7b0:	8bfb      	ldrh	r3, [r7, #30]
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f7ff fd81 	bl	800e2be <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e7bc:	8bba      	ldrh	r2, [r7, #28]
 800e7be:	8bfb      	ldrh	r3, [r7, #30]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e7c4:	893a      	ldrh	r2, [r7, #8]
 800e7c6:	8bfb      	ldrh	r3, [r7, #30]
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e7cc:	8bfb      	ldrh	r3, [r7, #30]
 800e7ce:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f103 021c 	add.w	r2, r3, #28
 800e7d6:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e7d8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e7da:	8c3b      	ldrh	r3, [r7, #32]
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	4603      	mov	r3, r0
 800e7e0:	68f8      	ldr	r0, [r7, #12]
 800e7e2:	f7ff fd6c 	bl	800e2be <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e7e6:	8b7a      	ldrh	r2, [r7, #26]
 800e7e8:	893b      	ldrh	r3, [r7, #8]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	801a      	strh	r2, [r3, #0]
 800e7f2:	e010      	b.n	800e816 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f103 021c 	add.w	r2, r3, #28
 800e7fa:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e7fc:	8af9      	ldrh	r1, [r7, #22]
 800e7fe:	893b      	ldrh	r3, [r7, #8]
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	4603      	mov	r3, r0
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f7ff fd5a 	bl	800e2be <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e80a:	8b7a      	ldrh	r2, [r7, #26]
 800e80c:	893b      	ldrh	r3, [r7, #8]
 800e80e:	4413      	add	r3, r2
 800e810:	b29a      	uxth	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	b29b      	uxth	r3, r3
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3728      	adds	r7, #40	; 0x28
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop

0800e824 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b08c      	sub	sp, #48	; 0x30
 800e828:	af02      	add	r7, sp, #8
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	607a      	str	r2, [r7, #4]
 800e82e:	461a      	mov	r2, r3
 800e830:	460b      	mov	r3, r1
 800e832:	72fb      	strb	r3, [r7, #11]
 800e834:	4613      	mov	r3, r2
 800e836:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e838:	2300      	movs	r3, #0
 800e83a:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e83c:	2300      	movs	r3, #0
 800e83e:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e840:	2300      	movs	r3, #0
 800e842:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e844:	2300      	movs	r3, #0
 800e846:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e848:	2300      	movs	r3, #0
 800e84a:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e84c:	2300      	movs	r3, #0
 800e84e:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e850:	2300      	movs	r3, #0
 800e852:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e854:	2300      	movs	r3, #0
 800e856:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e858:	2300      	movs	r3, #0
 800e85a:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e85c:	2300      	movs	r3, #0
 800e85e:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e860:	2300      	movs	r3, #0
 800e862:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e864:	7afb      	ldrb	r3, [r7, #11]
 800e866:	2b03      	cmp	r3, #3
 800e868:	d83e      	bhi.n	800e8e8 <eth_wr_SOCKET_DATA+0xc4>
 800e86a:	a201      	add	r2, pc, #4	; (adr r2, 800e870 <eth_wr_SOCKET_DATA+0x4c>)
 800e86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e870:	0800e881 	.word	0x0800e881
 800e874:	0800e89b 	.word	0x0800e89b
 800e878:	0800e8b5 	.word	0x0800e8b5
 800e87c:	0800e8cf 	.word	0x0800e8cf
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e886:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e88a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e892:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e896:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e898:	e033      	b.n	800e902 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e8b0:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e8b2:	e026      	b.n	800e902 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8be:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8ca:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e8cc:	e019      	b.n	800e902 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e8d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8e4:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e8e6:	e00c      	b.n	800e902 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e8f2:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e8fe:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e900:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e902:	e00e      	b.n	800e922 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e904:	7afb      	ldrb	r3, [r7, #11]
 800e906:	3304      	adds	r3, #4
 800e908:	b2d9      	uxtb	r1, r3
 800e90a:	2302      	movs	r3, #2
 800e90c:	9301      	str	r3, [sp, #4]
 800e90e:	f107 0310 	add.w	r3, r7, #16
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	230f      	movs	r3, #15
 800e916:	2220      	movs	r2, #32
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f7ff fc1c 	bl	800e156 <SPI_ETH_REG>
 800e91e:	4603      	mov	r3, r0
 800e920:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e922:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e924:	893b      	ldrh	r3, [r7, #8]
 800e926:	429a      	cmp	r2, r3
 800e928:	d3ec      	bcc.n	800e904 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e92a:	7afb      	ldrb	r3, [r7, #11]
 800e92c:	3304      	adds	r3, #4
 800e92e:	b2d9      	uxtb	r1, r3
 800e930:	2302      	movs	r3, #2
 800e932:	9301      	str	r3, [sp, #4]
 800e934:	f107 0310 	add.w	r3, r7, #16
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	230f      	movs	r3, #15
 800e93c:	2224      	movs	r2, #36	; 0x24
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f7ff fc09 	bl	800e156 <SPI_ETH_REG>
 800e944:	4603      	mov	r3, r0
 800e946:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e948:	8b3a      	ldrh	r2, [r7, #24]
 800e94a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e94c:	4013      	ands	r3, r2
 800e94e:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e950:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e952:	8afb      	ldrh	r3, [r7, #22]
 800e954:	4413      	add	r3, r2
 800e956:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e958:	8afa      	ldrh	r2, [r7, #22]
 800e95a:	893b      	ldrh	r3, [r7, #8]
 800e95c:	441a      	add	r2, r3
 800e95e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e960:	3301      	adds	r3, #1
 800e962:	429a      	cmp	r2, r3
 800e964:	dd2c      	ble.n	800e9c0 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e968:	8afb      	ldrh	r3, [r7, #22]
 800e96a:	1ad3      	subs	r3, r2, r3
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	3301      	adds	r3, #1
 800e970:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f103 021c 	add.w	r2, r3, #28
 800e978:	8c38      	ldrh	r0, [r7, #32]
 800e97a:	8ab9      	ldrh	r1, [r7, #20]
 800e97c:	8bbb      	ldrh	r3, [r7, #28]
 800e97e:	9300      	str	r3, [sp, #0]
 800e980:	4603      	mov	r3, r0
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f7ff fcd8 	bl	800e338 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e988:	8b7a      	ldrh	r2, [r7, #26]
 800e98a:	8bbb      	ldrh	r3, [r7, #28]
 800e98c:	4413      	add	r3, r2
 800e98e:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e990:	893a      	ldrh	r2, [r7, #8]
 800e992:	8bbb      	ldrh	r3, [r7, #28]
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e998:	8bbb      	ldrh	r3, [r7, #28]
 800e99a:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f103 021c 	add.w	r2, r3, #28
 800e9a2:	8c38      	ldrh	r0, [r7, #32]
 800e9a4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e9a6:	8bfb      	ldrh	r3, [r7, #30]
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7ff fcc3 	bl	800e338 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e9b2:	8b3a      	ldrh	r2, [r7, #24]
 800e9b4:	893b      	ldrh	r3, [r7, #8]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	b29a      	uxth	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	801a      	strh	r2, [r3, #0]
 800e9be:	e010      	b.n	800e9e2 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f103 021c 	add.w	r2, r3, #28
 800e9c6:	8c38      	ldrh	r0, [r7, #32]
 800e9c8:	8ab9      	ldrh	r1, [r7, #20]
 800e9ca:	893b      	ldrh	r3, [r7, #8]
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f7ff fcb1 	bl	800e338 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e9d6:	8b3a      	ldrh	r2, [r7, #24]
 800e9d8:	893b      	ldrh	r3, [r7, #8]
 800e9da:	4413      	add	r3, r2
 800e9dc:	b29a      	uxth	r2, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	801a      	strh	r2, [r3, #0]
					}

}
 800e9e2:	bf00      	nop
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3728      	adds	r7, #40	; 0x28
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b090      	sub	sp, #64	; 0x40
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	607a      	str	r2, [r7, #4]
 800e9f8:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9fe:	2300      	movs	r3, #0
 800ea00:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea02:	2300      	movs	r3, #0
 800ea04:	637b      	str	r3, [r7, #52]	; 0x34
 800ea06:	2300      	movs	r3, #0
 800ea08:	633b      	str	r3, [r7, #48]	; 0x30
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea0e:	2300      	movs	r3, #0
 800ea10:	61fb      	str	r3, [r7, #28]
 800ea12:	2300      	movs	r3, #0
 800ea14:	61bb      	str	r3, [r7, #24]
 800ea16:	2300      	movs	r3, #0
 800ea18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ea1e:	2300      	movs	r3, #0
 800ea20:	617b      	str	r3, [r7, #20]
 800ea22:	2300      	movs	r3, #0
 800ea24:	623b      	str	r3, [r7, #32]
 800ea26:	2300      	movs	r3, #0
 800ea28:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800ea36:	69fa      	ldr	r2, [r7, #28]
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	f2c0 8315 	blt.w	800f06a <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800ea40:	2300      	movs	r3, #0
 800ea42:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800ea44:	e00c      	b.n	800ea60 <FT_String_ND+0x74>
							{
								n++;
 800ea46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea48:	3301      	adds	r3, #1
 800ea4a:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800ea4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	441a      	add	r2, r3
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	3301      	adds	r3, #1
 800ea56:	429a      	cmp	r2, r3
 800ea58:	dd02      	ble.n	800ea60 <FT_String_ND+0x74>
								{
									estado=0;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	623b      	str	r3, [r7, #32]
									break;
 800ea5e:	e009      	b.n	800ea74 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800ea60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	4413      	add	r3, r2
 800ea66:	781a      	ldrb	r2, [r3, #0]
 800ea68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6a:	6879      	ldr	r1, [r7, #4]
 800ea6c:	440b      	add	r3, r1
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d1e8      	bne.n	800ea46 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800ea74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea76:	3301      	adds	r3, #1
 800ea78:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800ea7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800ea80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d108      	bne.n	800ea9a <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800ea88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	1ad3      	subs	r3, r2, r3
 800ea8e:	1c5a      	adds	r2, r3, #1
 800ea90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea92:	601a      	str	r2, [r3, #0]
									estado=1;
 800ea94:	2301      	movs	r3, #1
 800ea96:	623b      	str	r3, [r7, #32]
									break;
 800ea98:	e010      	b.n	800eabc <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800ea9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	dd02      	ble.n	800eaa8 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	623b      	str	r3, [r7, #32]
									 break;
 800eaa6:	e009      	b.n	800eabc <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800eaa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	4413      	add	r3, r2
 800eaae:	781a      	ldrb	r2, [r3, #0]
 800eab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab2:	6879      	ldr	r1, [r7, #4]
 800eab4:	440b      	add	r3, r1
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d0db      	beq.n	800ea74 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	1e5a      	subs	r2, r3, #1
 800eac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eac2:	4413      	add	r3, r2
 800eac4:	69fa      	ldr	r2, [r7, #28]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	dd02      	ble.n	800ead0 <FT_String_ND+0xe4>
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d1b7      	bne.n	800ea40 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800ead0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d101      	bne.n	800eada <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800ead6:	6a3b      	ldr	r3, [r7, #32]
 800ead8:	e2c8      	b.n	800f06c <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800eada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d12c      	bne.n	800eb3a <FT_String_ND+0x14e>
 800eae0:	6a3b      	ldr	r3, [r7, #32]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d129      	bne.n	800eb3a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800eae6:	e014      	b.n	800eb12 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800eae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	441a      	add	r2, r3
 800eaf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf2:	4413      	add	r3, r2
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	441a      	add	r2, r3
 800eafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eafc:	6819      	ldr	r1, [r3, #0]
 800eafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb00:	440b      	add	r3, r1
 800eb02:	3b01      	subs	r3, #1
 800eb04:	68f9      	ldr	r1, [r7, #12]
 800eb06:	440b      	add	r3, r1
 800eb08:	7812      	ldrb	r2, [r2, #0]
 800eb0a:	701a      	strb	r2, [r3, #0]
										n3++;
 800eb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0e:	3301      	adds	r3, #1
 800eb10:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800eb12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb18:	441a      	add	r2, r3
 800eb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb1c:	4413      	add	r3, r2
 800eb1e:	69fa      	ldr	r2, [r7, #28]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	dae1      	bge.n	800eae8 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800eb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb2a:	4413      	add	r3, r2
 800eb2c:	1e5a      	subs	r2, r3, #1
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	601a      	str	r2, [r3, #0]
							estado=3;
 800eb32:	2303      	movs	r3, #3
 800eb34:	623b      	str	r3, [r7, #32]
							return(estado);
 800eb36:	6a3b      	ldr	r3, [r7, #32]
 800eb38:	e298      	b.n	800f06c <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800eb3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb3c:	2b02      	cmp	r3, #2
 800eb3e:	f040 80be 	bne.w	800ecbe <FT_String_ND+0x2d2>
 800eb42:	6a3b      	ldr	r3, [r7, #32]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	f040 80ba 	bne.w	800ecbe <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eb4a:	e012      	b.n	800eb72 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eb4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	1ad2      	subs	r2, r2, r3
 800eb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb54:	4413      	add	r3, r2
 800eb56:	461a      	mov	r2, r3
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	441a      	add	r2, r3
 800eb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb60:	440b      	add	r3, r1
 800eb62:	7812      	ldrb	r2, [r2, #0]
 800eb64:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb68:	3301      	adds	r3, #1
 800eb6a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800eb6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb70:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eb72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	1ad2      	subs	r2, r2, r3
 800eb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7a:	4413      	add	r3, r2
 800eb7c:	69fa      	ldr	r2, [r7, #28]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	dae4      	bge.n	800eb4c <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800eb82:	499d      	ldr	r1, [pc, #628]	; (800edf8 <FT_String_ND+0x40c>)
 800eb84:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eb86:	f000 fd13 	bl	800f5b0 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800eb8a:	499c      	ldr	r1, [pc, #624]	; (800edfc <FT_String_ND+0x410>)
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	f000 fd0f 	bl	800f5b0 <strtok>
 800eb92:	4603      	mov	r3, r0
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 faf0 	bl	800f17a <atoi>
 800eb9a:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800eb9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eba2:	429a      	cmp	r2, r3
 800eba4:	db02      	blt.n	800ebac <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800eba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ebac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebae:	3306      	adds	r3, #6
 800ebb0:	222c      	movs	r2, #44	; 0x2c
 800ebb2:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ebb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb6:	2b09      	cmp	r3, #9
 800ebb8:	dc0d      	bgt.n	800ebd6 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800ebba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebbc:	3308      	adds	r3, #8
 800ebbe:	223a      	movs	r2, #58	; 0x3a
 800ebc0:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	3309      	adds	r3, #9
 800ebc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebc8:	4413      	add	r3, r2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800ebce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd0:	3309      	adds	r3, #9
 800ebd2:	627b      	str	r3, [r7, #36]	; 0x24
 800ebd4:	e021      	b.n	800ec1a <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800ebd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd8:	2b63      	cmp	r3, #99	; 0x63
 800ebda:	dc0d      	bgt.n	800ebf8 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800ebdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebde:	3309      	adds	r3, #9
 800ebe0:	223a      	movs	r2, #58	; 0x3a
 800ebe2:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800ebe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe6:	330a      	adds	r3, #10
 800ebe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebea:	4413      	add	r3, r2
 800ebec:	2200      	movs	r2, #0
 800ebee:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	330a      	adds	r3, #10
 800ebf4:	627b      	str	r3, [r7, #36]	; 0x24
 800ebf6:	e010      	b.n	800ec1a <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800ebf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ebfe:	da0c      	bge.n	800ec1a <FT_String_ND+0x22e>
														{
															c[10]=':';
 800ec00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec02:	330a      	adds	r3, #10
 800ec04:	223a      	movs	r2, #58	; 0x3a
 800ec06:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800ec08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0a:	330b      	adds	r3, #11
 800ec0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec0e:	4413      	add	r3, r2
 800ec10:	2200      	movs	r2, #0
 800ec12:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	330b      	adds	r3, #11
 800ec18:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800ec1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec1e:	601a      	str	r2, [r3, #0]
							n4=0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ec24:	e016      	b.n	800ec54 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ec26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	1ad2      	subs	r2, r2, r3
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2e:	441a      	add	r2, r3
 800ec30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec32:	4413      	add	r3, r2
 800ec34:	461a      	mov	r2, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	441a      	add	r2, r3
 800ec3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	1ac9      	subs	r1, r1, r3
 800ec40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec42:	440b      	add	r3, r1
 800ec44:	4619      	mov	r1, r3
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	440b      	add	r3, r1
 800ec4a:	7812      	ldrb	r2, [r2, #0]
 800ec4c:	701a      	strb	r2, [r3, #0]
								n4++;
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	3301      	adds	r3, #1
 800ec52:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ec54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	1ad2      	subs	r2, r2, r3
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5c:	441a      	add	r2, r3
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec60:	4413      	add	r3, r2
 800ec62:	69fa      	ldr	r2, [r7, #28]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	dade      	bge.n	800ec26 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800ec68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6c:	441a      	add	r2, r3
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	1e5a      	subs	r2, r3, #1
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800ec78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	1ad2      	subs	r2, r2, r3
 800ec7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec80:	441a      	add	r2, r3
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	4413      	add	r3, r2
 800ec86:	461a      	mov	r2, r3
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800ec90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	1ad2      	subs	r2, r2, r3
 800ec96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec98:	4413      	add	r3, r2
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	4413      	add	r3, r2
 800eca0:	2200      	movs	r2, #0
 800eca2:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800eca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	1ad2      	subs	r2, r2, r3
 800ecaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ecac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecae:	440b      	add	r3, r1
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d102      	bne.n	800ecba <FT_String_ND+0x2ce>
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	701a      	strb	r2, [r3, #0]
							estado=3;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800ecbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecc0:	2b03      	cmp	r3, #3
 800ecc2:	d146      	bne.n	800ed52 <FT_String_ND+0x366>
 800ecc4:	6a3b      	ldr	r3, [r7, #32]
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d143      	bne.n	800ed52 <FT_String_ND+0x366>
						{
						n3=0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ecce:	e00e      	b.n	800ecee <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800ecd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd6:	4413      	add	r3, r2
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	68fa      	ldr	r2, [r7, #12]
 800ecdc:	441a      	add	r2, r3
 800ecde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ece2:	440b      	add	r3, r1
 800ece4:	7812      	ldrb	r2, [r2, #0]
 800ece6:	701a      	strb	r2, [r3, #0]
										n3++;
 800ece8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecea:	3301      	adds	r3, #1
 800ecec:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ecee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	dbec      	blt.n	800ecd0 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ecfa:	e014      	b.n	800ed26 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800ecfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	441a      	add	r2, r3
 800ed04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed06:	4413      	add	r3, r2
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	441a      	add	r2, r3
 800ed0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed10:	6819      	ldr	r1, [r3, #0]
 800ed12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed14:	440b      	add	r3, r1
 800ed16:	3b01      	subs	r3, #1
 800ed18:	68f9      	ldr	r1, [r7, #12]
 800ed1a:	440b      	add	r3, r1
 800ed1c:	7812      	ldrb	r2, [r2, #0]
 800ed1e:	701a      	strb	r2, [r3, #0]
										n5++;
 800ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed22:	3301      	adds	r3, #1
 800ed24:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ed26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	441a      	add	r2, r3
 800ed2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed30:	441a      	add	r2, r3
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	dde0      	ble.n	800ecfc <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800ed3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed40:	4413      	add	r3, r2
 800ed42:	1e5a      	subs	r2, r3, #1
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800ed48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed4c:	601a      	str	r2, [r3, #0]
							estado=3;
 800ed4e:	2303      	movs	r3, #3
 800ed50:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800ed52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed54:	2b04      	cmp	r3, #4
 800ed56:	f040 80bd 	bne.w	800eed4 <FT_String_ND+0x4e8>
 800ed5a:	6a3b      	ldr	r3, [r7, #32]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	f040 80b9 	bne.w	800eed4 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ed62:	e012      	b.n	800ed8a <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ed64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	1ad2      	subs	r2, r2, r3
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	4413      	add	r3, r2
 800ed6e:	461a      	mov	r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	441a      	add	r2, r3
 800ed74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ed78:	440b      	add	r3, r1
 800ed7a:	7812      	ldrb	r2, [r2, #0]
 800ed7c:	701a      	strb	r2, [r3, #0]
								n4++;
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	3301      	adds	r3, #1
 800ed82:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800ed84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed88:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ed8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	1ad2      	subs	r2, r2, r3
 800ed90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed92:	4413      	add	r3, r2
 800ed94:	69fa      	ldr	r2, [r7, #28]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	dae4      	bge.n	800ed64 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ed9a:	4917      	ldr	r1, [pc, #92]	; (800edf8 <FT_String_ND+0x40c>)
 800ed9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ed9e:	f000 fc07 	bl	800f5b0 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800eda2:	4916      	ldr	r1, [pc, #88]	; (800edfc <FT_String_ND+0x410>)
 800eda4:	2000      	movs	r0, #0
 800eda6:	f000 fc03 	bl	800f5b0 <strtok>
 800edaa:	4603      	mov	r3, r0
 800edac:	4618      	mov	r0, r3
 800edae:	f000 f9e4 	bl	800f17a <atoi>
 800edb2:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800edb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edb6:	3b01      	subs	r3, #1
 800edb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edba:	429a      	cmp	r2, r3
 800edbc:	db02      	blt.n	800edc4 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800edbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edc0:	3b01      	subs	r3, #1
 800edc2:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800edc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edc6:	3306      	adds	r3, #6
 800edc8:	222c      	movs	r2, #44	; 0x2c
 800edca:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	2b09      	cmp	r3, #9
 800edd0:	dc07      	bgt.n	800ede2 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800edd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edd4:	3308      	adds	r3, #8
 800edd6:	223a      	movs	r2, #58	; 0x3a
 800edd8:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800edda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eddc:	3309      	adds	r3, #9
 800edde:	627b      	str	r3, [r7, #36]	; 0x24
 800ede0:	e019      	b.n	800ee16 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede4:	2b63      	cmp	r3, #99	; 0x63
 800ede6:	dc0b      	bgt.n	800ee00 <FT_String_ND+0x414>
														{
															c[9]=':';
 800ede8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edea:	3309      	adds	r3, #9
 800edec:	223a      	movs	r2, #58	; 0x3a
 800edee:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800edf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf2:	330a      	adds	r3, #10
 800edf4:	627b      	str	r3, [r7, #36]	; 0x24
 800edf6:	e00e      	b.n	800ee16 <FT_String_ND+0x42a>
 800edf8:	0801100c 	.word	0x0801100c
 800edfc:	08011010 	.word	0x08011010
														}
														else
														{
														if (lngd < 1000)
 800ee00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ee06:	da06      	bge.n	800ee16 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800ee08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee0a:	330a      	adds	r3, #10
 800ee0c:	223a      	movs	r2, #58	; 0x3a
 800ee0e:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	330b      	adds	r3, #11
 800ee14:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ee16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee1a:	601a      	str	r2, [r3, #0]
							n4=0;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ee20:	e016      	b.n	800ee50 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ee22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	1ad2      	subs	r2, r2, r3
 800ee28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2a:	441a      	add	r2, r3
 800ee2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2e:	4413      	add	r3, r2
 800ee30:	461a      	mov	r2, r3
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	441a      	add	r2, r3
 800ee36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	1ac9      	subs	r1, r1, r3
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3e:	440b      	add	r3, r1
 800ee40:	4619      	mov	r1, r3
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	440b      	add	r3, r1
 800ee46:	7812      	ldrb	r2, [r2, #0]
 800ee48:	701a      	strb	r2, [r3, #0]
								n4++;
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ee50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	1ad2      	subs	r2, r2, r3
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	441a      	add	r2, r3
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5c:	4413      	add	r3, r2
 800ee5e:	69fa      	ldr	r2, [r7, #28]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	dade      	bge.n	800ee22 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ee64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee68:	441a      	add	r2, r3
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	1e5a      	subs	r2, r3, #1
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	601a      	str	r2, [r3, #0]
							n5=0;
 800ee74:	2300      	movs	r3, #0
 800ee76:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ee78:	e00f      	b.n	800ee9a <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ee7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	1ad2      	subs	r2, r2, r3
 800ee80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee82:	4413      	add	r3, r2
 800ee84:	461a      	mov	r2, r3
 800ee86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee88:	441a      	add	r2, r3
 800ee8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ee8e:	440b      	add	r3, r1
 800ee90:	7812      	ldrb	r2, [r2, #0]
 800ee92:	701a      	strb	r2, [r3, #0]
								n5++;
 800ee94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee96:	3301      	adds	r3, #1
 800ee98:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ee9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9e:	1ad2      	subs	r2, r2, r3
 800eea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea2:	441a      	add	r2, r3
 800eea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	dbe6      	blt.n	800ee7a <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800eeac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eeb0:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800eeb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb8:	441a      	add	r2, r3
 800eeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebc:	1ad2      	subs	r2, r2, r3
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4413      	add	r3, r2
 800eec4:	69fa      	ldr	r2, [r7, #28]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d102      	bne.n	800eed0 <FT_String_ND+0x4e4>
							{
								estado=4;
 800eeca:	2304      	movs	r3, #4
 800eecc:	623b      	str	r3, [r7, #32]
 800eece:	e001      	b.n	800eed4 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800eed0:	2305      	movs	r3, #5
 800eed2:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800eed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eed6:	2b05      	cmp	r3, #5
 800eed8:	f040 80c5 	bne.w	800f066 <FT_String_ND+0x67a>
 800eedc:	6a3b      	ldr	r3, [r7, #32]
 800eede:	2b01      	cmp	r3, #1
 800eee0:	f040 80c1 	bne.w	800f066 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eee4:	e012      	b.n	800ef0c <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eee6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	1ad2      	subs	r2, r2, r3
 800eeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeee:	4413      	add	r3, r2
 800eef0:	461a      	mov	r2, r3
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	441a      	add	r2, r3
 800eef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eefa:	440b      	add	r3, r1
 800eefc:	7812      	ldrb	r2, [r2, #0]
 800eefe:	701a      	strb	r2, [r3, #0]
								n4++;
 800ef00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef02:	3301      	adds	r3, #1
 800ef04:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800ef06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef0a:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ef0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	1ad2      	subs	r2, r2, r3
 800ef12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef14:	4413      	add	r3, r2
 800ef16:	69fa      	ldr	r2, [r7, #28]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	dae4      	bge.n	800eee6 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ef1c:	4955      	ldr	r1, [pc, #340]	; (800f074 <FT_String_ND+0x688>)
 800ef1e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ef20:	f000 fb46 	bl	800f5b0 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ef24:	4954      	ldr	r1, [pc, #336]	; (800f078 <FT_String_ND+0x68c>)
 800ef26:	2000      	movs	r0, #0
 800ef28:	f000 fb42 	bl	800f5b0 <strtok>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f000 f923 	bl	800f17a <atoi>
 800ef34:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ef36:	4950      	ldr	r1, [pc, #320]	; (800f078 <FT_String_ND+0x68c>)
 800ef38:	2000      	movs	r0, #0
 800ef3a:	f000 fb39 	bl	800f5b0 <strtok>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	4618      	mov	r0, r3
 800ef42:	f000 f91a 	bl	800f17a <atoi>
 800ef46:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800ef48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	db02      	blt.n	800ef58 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800ef52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef54:	3b01      	subs	r3, #1
 800ef56:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ef58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef5a:	3306      	adds	r3, #6
 800ef5c:	222c      	movs	r2, #44	; 0x2c
 800ef5e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ef60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef62:	2b09      	cmp	r3, #9
 800ef64:	dc07      	bgt.n	800ef76 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800ef66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef68:	330a      	adds	r3, #10
 800ef6a:	223a      	movs	r2, #58	; 0x3a
 800ef6c:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef70:	330b      	adds	r3, #11
 800ef72:	627b      	str	r3, [r7, #36]	; 0x24
 800ef74:	e015      	b.n	800efa2 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800ef76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef78:	2b63      	cmp	r3, #99	; 0x63
 800ef7a:	dc07      	bgt.n	800ef8c <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800ef7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef7e:	330b      	adds	r3, #11
 800ef80:	223a      	movs	r2, #58	; 0x3a
 800ef82:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800ef84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef86:	330c      	adds	r3, #12
 800ef88:	627b      	str	r3, [r7, #36]	; 0x24
 800ef8a:	e00a      	b.n	800efa2 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800ef8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef92:	da06      	bge.n	800efa2 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800ef94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef96:	330c      	adds	r3, #12
 800ef98:	223a      	movs	r2, #58	; 0x3a
 800ef9a:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9e:	330d      	adds	r3, #13
 800efa0:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800efa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efa6:	601a      	str	r2, [r3, #0]
							n4=0;
 800efa8:	2300      	movs	r3, #0
 800efaa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800efac:	e016      	b.n	800efdc <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800efae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	1ad2      	subs	r2, r2, r3
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	441a      	add	r2, r3
 800efb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efba:	4413      	add	r3, r2
 800efbc:	461a      	mov	r2, r3
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	441a      	add	r2, r3
 800efc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	1ac9      	subs	r1, r1, r3
 800efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efca:	440b      	add	r3, r1
 800efcc:	4619      	mov	r1, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	440b      	add	r3, r1
 800efd2:	7812      	ldrb	r2, [r2, #0]
 800efd4:	701a      	strb	r2, [r3, #0]
								n4++;
 800efd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd8:	3301      	adds	r3, #1
 800efda:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800efdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	1ad2      	subs	r2, r2, r3
 800efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe4:	441a      	add	r2, r3
 800efe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe8:	4413      	add	r3, r2
 800efea:	69fa      	ldr	r2, [r7, #28]
 800efec:	429a      	cmp	r2, r3
 800efee:	dade      	bge.n	800efae <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff4:	441a      	add	r2, r3
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	1ad3      	subs	r3, r2, r3
 800effa:	1e5a      	subs	r2, r3, #1
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	601a      	str	r2, [r3, #0]
							n5=0;
 800f000:	2300      	movs	r3, #0
 800f002:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800f004:	e00f      	b.n	800f026 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800f006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00a:	1ad2      	subs	r2, r2, r3
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	4413      	add	r3, r2
 800f010:	461a      	mov	r2, r3
 800f012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f014:	441a      	add	r2, r3
 800f016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f018:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f01a:	440b      	add	r3, r1
 800f01c:	7812      	ldrb	r2, [r2, #0]
 800f01e:	701a      	strb	r2, [r3, #0]
								n5++;
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	3301      	adds	r3, #1
 800f024:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800f026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02a:	1ad2      	subs	r2, r2, r3
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	441a      	add	r2, r3
 800f030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	429a      	cmp	r2, r3
 800f036:	dbe6      	blt.n	800f006 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800f038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f03a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f03c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800f03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f044:	441a      	add	r2, r3
 800f046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f048:	1ad2      	subs	r2, r2, r3
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4413      	add	r3, r2
 800f050:	69fa      	ldr	r2, [r7, #28]
 800f052:	429a      	cmp	r2, r3
 800f054:	d105      	bne.n	800f062 <FT_String_ND+0x676>
							{
								estado=4;
 800f056:	2304      	movs	r3, #4
 800f058:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800f05a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f05c:	693a      	ldr	r2, [r7, #16]
 800f05e:	601a      	str	r2, [r3, #0]
 800f060:	e001      	b.n	800f066 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800f062:	2305      	movs	r3, #5
 800f064:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800f066:	6a3b      	ldr	r3, [r7, #32]
 800f068:	e000      	b.n	800f06c <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800f06a:	2302      	movs	r3, #2
			}
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3740      	adds	r7, #64	; 0x40
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	0801100c 	.word	0x0801100c
 800f078:	08011010 	.word	0x08011010

0800f07c <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b088      	sub	sp, #32
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800f086:	2330      	movs	r3, #48	; 0x30
 800f088:	60bb      	str	r3, [r7, #8]
 800f08a:	f107 030c 	add.w	r3, r7, #12
 800f08e:	2200      	movs	r2, #0
 800f090:	601a      	str	r2, [r3, #0]
 800f092:	605a      	str	r2, [r3, #4]
 800f094:	609a      	str	r2, [r3, #8]
 800f096:	60da      	str	r2, [r3, #12]
int i=0;	
 800f098:	2300      	movs	r3, #0
 800f09a:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800f09c:	f107 0308 	add.w	r3, r7, #8
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	490f      	ldr	r1, [pc, #60]	; (800f0e0 <INTOA+0x64>)
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f000 fa05 	bl	800f4b4 <siprintf>
		while(i<=strlen(origbuff))
 800f0aa:	e00b      	b.n	800f0c4 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	603a      	str	r2, [r7, #0]
 800f0b2:	f107 0108 	add.w	r1, r7, #8
 800f0b6:	69fa      	ldr	r2, [r7, #28]
 800f0b8:	440a      	add	r2, r1
 800f0ba:	7812      	ldrb	r2, [r2, #0]
 800f0bc:	701a      	strb	r2, [r3, #0]
		i++;
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800f0c4:	f107 0308 	add.w	r3, r7, #8
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7f1 f893 	bl	80001f4 <strlen>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d2ea      	bcs.n	800f0ac <INTOA+0x30>
		}
		return(i);
 800f0d6:	69fb      	ldr	r3, [r7, #28]
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3720      	adds	r7, #32
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	08011014 	.word	0x08011014

0800f0e4 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b088      	sub	sp, #32
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
 800f0f0:	603b      	str	r3, [r7, #0]
int x =0;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800f0fa:	f107 0310 	add.w	r3, r7, #16
 800f0fe:	617b      	str	r3, [r7, #20]
if (c==0)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d105      	bne.n	800f112 <CopiaVector+0x2e>
{
	x=strlen(b);
 800f106:	68b8      	ldr	r0, [r7, #8]
 800f108:	f7f1 f874 	bl	80001f4 <strlen>
 800f10c:	4603      	mov	r3, r0
 800f10e:	61bb      	str	r3, [r7, #24]
 800f110:	e02e      	b.n	800f170 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f11c:	dd01      	ble.n	800f122 <CopiaVector+0x3e>
			{
				return(1);
 800f11e:	2301      	movs	r3, #1
 800f120:	e027      	b.n	800f172 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800f122:	2300      	movs	r3, #0
 800f124:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f126:	e00a      	b.n	800f13e <CopiaVector+0x5a>
				{
					*a++=*b++;
 800f128:	68ba      	ldr	r2, [r7, #8]
 800f12a:	1c53      	adds	r3, r2, #1
 800f12c:	60bb      	str	r3, [r7, #8]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	1c59      	adds	r1, r3, #1
 800f132:	60f9      	str	r1, [r7, #12]
 800f134:	7812      	ldrb	r2, [r2, #0]
 800f136:	701a      	strb	r2, [r3, #0]
					p++;
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	3301      	adds	r3, #1
 800f13c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f13e:	69fa      	ldr	r2, [r7, #28]
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	429a      	cmp	r2, r3
 800f144:	dbf0      	blt.n	800f128 <CopiaVector+0x44>
				}


			if (d==1)
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d111      	bne.n	800f170 <CopiaVector+0x8c>
			{
			  p=c;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f150:	e008      	b.n	800f164 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	1c5a      	adds	r2, r3, #1
 800f156:	60fa      	str	r2, [r7, #12]
 800f158:	697a      	ldr	r2, [r7, #20]
 800f15a:	7812      	ldrb	r2, [r2, #0]
 800f15c:	701a      	strb	r2, [r3, #0]
				  p++;
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	3301      	adds	r3, #1
 800f162:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	429a      	cmp	r2, r3
 800f16a:	daf2      	bge.n	800f152 <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800f16c:	2300      	movs	r3, #0
 800f16e:	e000      	b.n	800f172 <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800f170:	2301      	movs	r3, #1
}
 800f172:	4618      	mov	r0, r3
 800f174:	3720      	adds	r7, #32
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}

0800f17a <atoi>:
 800f17a:	220a      	movs	r2, #10
 800f17c:	2100      	movs	r1, #0
 800f17e:	f000 b89d 	b.w	800f2bc <strtol>

0800f182 <__itoa>:
 800f182:	1e93      	subs	r3, r2, #2
 800f184:	2b22      	cmp	r3, #34	; 0x22
 800f186:	b510      	push	{r4, lr}
 800f188:	460c      	mov	r4, r1
 800f18a:	d904      	bls.n	800f196 <__itoa+0x14>
 800f18c:	2300      	movs	r3, #0
 800f18e:	700b      	strb	r3, [r1, #0]
 800f190:	461c      	mov	r4, r3
 800f192:	4620      	mov	r0, r4
 800f194:	bd10      	pop	{r4, pc}
 800f196:	2a0a      	cmp	r2, #10
 800f198:	d109      	bne.n	800f1ae <__itoa+0x2c>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	da07      	bge.n	800f1ae <__itoa+0x2c>
 800f19e:	232d      	movs	r3, #45	; 0x2d
 800f1a0:	700b      	strb	r3, [r1, #0]
 800f1a2:	4240      	negs	r0, r0
 800f1a4:	2101      	movs	r1, #1
 800f1a6:	4421      	add	r1, r4
 800f1a8:	f000 f892 	bl	800f2d0 <__utoa>
 800f1ac:	e7f1      	b.n	800f192 <__itoa+0x10>
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	e7f9      	b.n	800f1a6 <__itoa+0x24>

0800f1b2 <itoa>:
 800f1b2:	f7ff bfe6 	b.w	800f182 <__itoa>
	...

0800f1b8 <_strtol_l.constprop.0>:
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1be:	d001      	beq.n	800f1c4 <_strtol_l.constprop.0+0xc>
 800f1c0:	2b24      	cmp	r3, #36	; 0x24
 800f1c2:	d906      	bls.n	800f1d2 <_strtol_l.constprop.0+0x1a>
 800f1c4:	f000 fa96 	bl	800f6f4 <__errno>
 800f1c8:	2316      	movs	r3, #22
 800f1ca:	6003      	str	r3, [r0, #0]
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f2b8 <_strtol_l.constprop.0+0x100>
 800f1d6:	460d      	mov	r5, r1
 800f1d8:	462e      	mov	r6, r5
 800f1da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f1e2:	f017 0708 	ands.w	r7, r7, #8
 800f1e6:	d1f7      	bne.n	800f1d8 <_strtol_l.constprop.0+0x20>
 800f1e8:	2c2d      	cmp	r4, #45	; 0x2d
 800f1ea:	d132      	bne.n	800f252 <_strtol_l.constprop.0+0x9a>
 800f1ec:	782c      	ldrb	r4, [r5, #0]
 800f1ee:	2701      	movs	r7, #1
 800f1f0:	1cb5      	adds	r5, r6, #2
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d05b      	beq.n	800f2ae <_strtol_l.constprop.0+0xf6>
 800f1f6:	2b10      	cmp	r3, #16
 800f1f8:	d109      	bne.n	800f20e <_strtol_l.constprop.0+0x56>
 800f1fa:	2c30      	cmp	r4, #48	; 0x30
 800f1fc:	d107      	bne.n	800f20e <_strtol_l.constprop.0+0x56>
 800f1fe:	782c      	ldrb	r4, [r5, #0]
 800f200:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f204:	2c58      	cmp	r4, #88	; 0x58
 800f206:	d14d      	bne.n	800f2a4 <_strtol_l.constprop.0+0xec>
 800f208:	786c      	ldrb	r4, [r5, #1]
 800f20a:	2310      	movs	r3, #16
 800f20c:	3502      	adds	r5, #2
 800f20e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f212:	f108 38ff 	add.w	r8, r8, #4294967295
 800f216:	f04f 0e00 	mov.w	lr, #0
 800f21a:	fbb8 f9f3 	udiv	r9, r8, r3
 800f21e:	4676      	mov	r6, lr
 800f220:	fb03 8a19 	mls	sl, r3, r9, r8
 800f224:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f228:	f1bc 0f09 	cmp.w	ip, #9
 800f22c:	d816      	bhi.n	800f25c <_strtol_l.constprop.0+0xa4>
 800f22e:	4664      	mov	r4, ip
 800f230:	42a3      	cmp	r3, r4
 800f232:	dd24      	ble.n	800f27e <_strtol_l.constprop.0+0xc6>
 800f234:	f1be 3fff 	cmp.w	lr, #4294967295
 800f238:	d008      	beq.n	800f24c <_strtol_l.constprop.0+0x94>
 800f23a:	45b1      	cmp	r9, r6
 800f23c:	d31c      	bcc.n	800f278 <_strtol_l.constprop.0+0xc0>
 800f23e:	d101      	bne.n	800f244 <_strtol_l.constprop.0+0x8c>
 800f240:	45a2      	cmp	sl, r4
 800f242:	db19      	blt.n	800f278 <_strtol_l.constprop.0+0xc0>
 800f244:	fb06 4603 	mla	r6, r6, r3, r4
 800f248:	f04f 0e01 	mov.w	lr, #1
 800f24c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f250:	e7e8      	b.n	800f224 <_strtol_l.constprop.0+0x6c>
 800f252:	2c2b      	cmp	r4, #43	; 0x2b
 800f254:	bf04      	itt	eq
 800f256:	782c      	ldrbeq	r4, [r5, #0]
 800f258:	1cb5      	addeq	r5, r6, #2
 800f25a:	e7ca      	b.n	800f1f2 <_strtol_l.constprop.0+0x3a>
 800f25c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f260:	f1bc 0f19 	cmp.w	ip, #25
 800f264:	d801      	bhi.n	800f26a <_strtol_l.constprop.0+0xb2>
 800f266:	3c37      	subs	r4, #55	; 0x37
 800f268:	e7e2      	b.n	800f230 <_strtol_l.constprop.0+0x78>
 800f26a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f26e:	f1bc 0f19 	cmp.w	ip, #25
 800f272:	d804      	bhi.n	800f27e <_strtol_l.constprop.0+0xc6>
 800f274:	3c57      	subs	r4, #87	; 0x57
 800f276:	e7db      	b.n	800f230 <_strtol_l.constprop.0+0x78>
 800f278:	f04f 3eff 	mov.w	lr, #4294967295
 800f27c:	e7e6      	b.n	800f24c <_strtol_l.constprop.0+0x94>
 800f27e:	f1be 3fff 	cmp.w	lr, #4294967295
 800f282:	d105      	bne.n	800f290 <_strtol_l.constprop.0+0xd8>
 800f284:	2322      	movs	r3, #34	; 0x22
 800f286:	6003      	str	r3, [r0, #0]
 800f288:	4646      	mov	r6, r8
 800f28a:	b942      	cbnz	r2, 800f29e <_strtol_l.constprop.0+0xe6>
 800f28c:	4630      	mov	r0, r6
 800f28e:	e79e      	b.n	800f1ce <_strtol_l.constprop.0+0x16>
 800f290:	b107      	cbz	r7, 800f294 <_strtol_l.constprop.0+0xdc>
 800f292:	4276      	negs	r6, r6
 800f294:	2a00      	cmp	r2, #0
 800f296:	d0f9      	beq.n	800f28c <_strtol_l.constprop.0+0xd4>
 800f298:	f1be 0f00 	cmp.w	lr, #0
 800f29c:	d000      	beq.n	800f2a0 <_strtol_l.constprop.0+0xe8>
 800f29e:	1e69      	subs	r1, r5, #1
 800f2a0:	6011      	str	r1, [r2, #0]
 800f2a2:	e7f3      	b.n	800f28c <_strtol_l.constprop.0+0xd4>
 800f2a4:	2430      	movs	r4, #48	; 0x30
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1b1      	bne.n	800f20e <_strtol_l.constprop.0+0x56>
 800f2aa:	2308      	movs	r3, #8
 800f2ac:	e7af      	b.n	800f20e <_strtol_l.constprop.0+0x56>
 800f2ae:	2c30      	cmp	r4, #48	; 0x30
 800f2b0:	d0a5      	beq.n	800f1fe <_strtol_l.constprop.0+0x46>
 800f2b2:	230a      	movs	r3, #10
 800f2b4:	e7ab      	b.n	800f20e <_strtol_l.constprop.0+0x56>
 800f2b6:	bf00      	nop
 800f2b8:	08011056 	.word	0x08011056

0800f2bc <strtol>:
 800f2bc:	4613      	mov	r3, r2
 800f2be:	460a      	mov	r2, r1
 800f2c0:	4601      	mov	r1, r0
 800f2c2:	4802      	ldr	r0, [pc, #8]	; (800f2cc <strtol+0x10>)
 800f2c4:	6800      	ldr	r0, [r0, #0]
 800f2c6:	f7ff bf77 	b.w	800f1b8 <_strtol_l.constprop.0>
 800f2ca:	bf00      	nop
 800f2cc:	20000174 	.word	0x20000174

0800f2d0 <__utoa>:
 800f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2d2:	4c1f      	ldr	r4, [pc, #124]	; (800f350 <__utoa+0x80>)
 800f2d4:	b08b      	sub	sp, #44	; 0x2c
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	460b      	mov	r3, r1
 800f2da:	466e      	mov	r6, sp
 800f2dc:	f104 0c20 	add.w	ip, r4, #32
 800f2e0:	6820      	ldr	r0, [r4, #0]
 800f2e2:	6861      	ldr	r1, [r4, #4]
 800f2e4:	4637      	mov	r7, r6
 800f2e6:	c703      	stmia	r7!, {r0, r1}
 800f2e8:	3408      	adds	r4, #8
 800f2ea:	4564      	cmp	r4, ip
 800f2ec:	463e      	mov	r6, r7
 800f2ee:	d1f7      	bne.n	800f2e0 <__utoa+0x10>
 800f2f0:	7921      	ldrb	r1, [r4, #4]
 800f2f2:	7139      	strb	r1, [r7, #4]
 800f2f4:	1e91      	subs	r1, r2, #2
 800f2f6:	6820      	ldr	r0, [r4, #0]
 800f2f8:	6038      	str	r0, [r7, #0]
 800f2fa:	2922      	cmp	r1, #34	; 0x22
 800f2fc:	f04f 0100 	mov.w	r1, #0
 800f300:	d904      	bls.n	800f30c <__utoa+0x3c>
 800f302:	7019      	strb	r1, [r3, #0]
 800f304:	460b      	mov	r3, r1
 800f306:	4618      	mov	r0, r3
 800f308:	b00b      	add	sp, #44	; 0x2c
 800f30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f30c:	1e58      	subs	r0, r3, #1
 800f30e:	4684      	mov	ip, r0
 800f310:	fbb5 f7f2 	udiv	r7, r5, r2
 800f314:	fb02 5617 	mls	r6, r2, r7, r5
 800f318:	3628      	adds	r6, #40	; 0x28
 800f31a:	446e      	add	r6, sp
 800f31c:	460c      	mov	r4, r1
 800f31e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f322:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f326:	462e      	mov	r6, r5
 800f328:	42b2      	cmp	r2, r6
 800f32a:	f101 0101 	add.w	r1, r1, #1
 800f32e:	463d      	mov	r5, r7
 800f330:	d9ee      	bls.n	800f310 <__utoa+0x40>
 800f332:	2200      	movs	r2, #0
 800f334:	545a      	strb	r2, [r3, r1]
 800f336:	1919      	adds	r1, r3, r4
 800f338:	1aa5      	subs	r5, r4, r2
 800f33a:	42aa      	cmp	r2, r5
 800f33c:	dae3      	bge.n	800f306 <__utoa+0x36>
 800f33e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f342:	780e      	ldrb	r6, [r1, #0]
 800f344:	7006      	strb	r6, [r0, #0]
 800f346:	3201      	adds	r2, #1
 800f348:	f801 5901 	strb.w	r5, [r1], #-1
 800f34c:	e7f4      	b.n	800f338 <__utoa+0x68>
 800f34e:	bf00      	nop
 800f350:	08011030 	.word	0x08011030

0800f354 <std>:
 800f354:	2300      	movs	r3, #0
 800f356:	b510      	push	{r4, lr}
 800f358:	4604      	mov	r4, r0
 800f35a:	e9c0 3300 	strd	r3, r3, [r0]
 800f35e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f362:	6083      	str	r3, [r0, #8]
 800f364:	8181      	strh	r1, [r0, #12]
 800f366:	6643      	str	r3, [r0, #100]	; 0x64
 800f368:	81c2      	strh	r2, [r0, #14]
 800f36a:	6183      	str	r3, [r0, #24]
 800f36c:	4619      	mov	r1, r3
 800f36e:	2208      	movs	r2, #8
 800f370:	305c      	adds	r0, #92	; 0x5c
 800f372:	f000 f902 	bl	800f57a <memset>
 800f376:	4b05      	ldr	r3, [pc, #20]	; (800f38c <std+0x38>)
 800f378:	6263      	str	r3, [r4, #36]	; 0x24
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <std+0x3c>)
 800f37c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f37e:	4b05      	ldr	r3, [pc, #20]	; (800f394 <std+0x40>)
 800f380:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f382:	4b05      	ldr	r3, [pc, #20]	; (800f398 <std+0x44>)
 800f384:	6224      	str	r4, [r4, #32]
 800f386:	6323      	str	r3, [r4, #48]	; 0x30
 800f388:	bd10      	pop	{r4, pc}
 800f38a:	bf00      	nop
 800f38c:	0800f4f5 	.word	0x0800f4f5
 800f390:	0800f517 	.word	0x0800f517
 800f394:	0800f54f 	.word	0x0800f54f
 800f398:	0800f573 	.word	0x0800f573

0800f39c <stdio_exit_handler>:
 800f39c:	4a02      	ldr	r2, [pc, #8]	; (800f3a8 <stdio_exit_handler+0xc>)
 800f39e:	4903      	ldr	r1, [pc, #12]	; (800f3ac <stdio_exit_handler+0x10>)
 800f3a0:	4803      	ldr	r0, [pc, #12]	; (800f3b0 <stdio_exit_handler+0x14>)
 800f3a2:	f000 b869 	b.w	800f478 <_fwalk_sglue>
 800f3a6:	bf00      	nop
 800f3a8:	2000011c 	.word	0x2000011c
 800f3ac:	08010075 	.word	0x08010075
 800f3b0:	20000128 	.word	0x20000128

0800f3b4 <cleanup_stdio>:
 800f3b4:	6841      	ldr	r1, [r0, #4]
 800f3b6:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <cleanup_stdio+0x34>)
 800f3b8:	4299      	cmp	r1, r3
 800f3ba:	b510      	push	{r4, lr}
 800f3bc:	4604      	mov	r4, r0
 800f3be:	d001      	beq.n	800f3c4 <cleanup_stdio+0x10>
 800f3c0:	f000 fe58 	bl	8010074 <_fflush_r>
 800f3c4:	68a1      	ldr	r1, [r4, #8]
 800f3c6:	4b09      	ldr	r3, [pc, #36]	; (800f3ec <cleanup_stdio+0x38>)
 800f3c8:	4299      	cmp	r1, r3
 800f3ca:	d002      	beq.n	800f3d2 <cleanup_stdio+0x1e>
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f000 fe51 	bl	8010074 <_fflush_r>
 800f3d2:	68e1      	ldr	r1, [r4, #12]
 800f3d4:	4b06      	ldr	r3, [pc, #24]	; (800f3f0 <cleanup_stdio+0x3c>)
 800f3d6:	4299      	cmp	r1, r3
 800f3d8:	d004      	beq.n	800f3e4 <cleanup_stdio+0x30>
 800f3da:	4620      	mov	r0, r4
 800f3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3e0:	f000 be48 	b.w	8010074 <_fflush_r>
 800f3e4:	bd10      	pop	{r4, pc}
 800f3e6:	bf00      	nop
 800f3e8:	20004068 	.word	0x20004068
 800f3ec:	200040d0 	.word	0x200040d0
 800f3f0:	20004138 	.word	0x20004138

0800f3f4 <global_stdio_init.part.0>:
 800f3f4:	b510      	push	{r4, lr}
 800f3f6:	4b0b      	ldr	r3, [pc, #44]	; (800f424 <global_stdio_init.part.0+0x30>)
 800f3f8:	4c0b      	ldr	r4, [pc, #44]	; (800f428 <global_stdio_init.part.0+0x34>)
 800f3fa:	4a0c      	ldr	r2, [pc, #48]	; (800f42c <global_stdio_init.part.0+0x38>)
 800f3fc:	601a      	str	r2, [r3, #0]
 800f3fe:	4620      	mov	r0, r4
 800f400:	2200      	movs	r2, #0
 800f402:	2104      	movs	r1, #4
 800f404:	f7ff ffa6 	bl	800f354 <std>
 800f408:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f40c:	2201      	movs	r2, #1
 800f40e:	2109      	movs	r1, #9
 800f410:	f7ff ffa0 	bl	800f354 <std>
 800f414:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f418:	2202      	movs	r2, #2
 800f41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f41e:	2112      	movs	r1, #18
 800f420:	f7ff bf98 	b.w	800f354 <std>
 800f424:	200041a0 	.word	0x200041a0
 800f428:	20004068 	.word	0x20004068
 800f42c:	0800f39d 	.word	0x0800f39d

0800f430 <__sfp_lock_acquire>:
 800f430:	4801      	ldr	r0, [pc, #4]	; (800f438 <__sfp_lock_acquire+0x8>)
 800f432:	f000 b989 	b.w	800f748 <__retarget_lock_acquire_recursive>
 800f436:	bf00      	nop
 800f438:	200041a9 	.word	0x200041a9

0800f43c <__sfp_lock_release>:
 800f43c:	4801      	ldr	r0, [pc, #4]	; (800f444 <__sfp_lock_release+0x8>)
 800f43e:	f000 b984 	b.w	800f74a <__retarget_lock_release_recursive>
 800f442:	bf00      	nop
 800f444:	200041a9 	.word	0x200041a9

0800f448 <__sinit>:
 800f448:	b510      	push	{r4, lr}
 800f44a:	4604      	mov	r4, r0
 800f44c:	f7ff fff0 	bl	800f430 <__sfp_lock_acquire>
 800f450:	6a23      	ldr	r3, [r4, #32]
 800f452:	b11b      	cbz	r3, 800f45c <__sinit+0x14>
 800f454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f458:	f7ff bff0 	b.w	800f43c <__sfp_lock_release>
 800f45c:	4b04      	ldr	r3, [pc, #16]	; (800f470 <__sinit+0x28>)
 800f45e:	6223      	str	r3, [r4, #32]
 800f460:	4b04      	ldr	r3, [pc, #16]	; (800f474 <__sinit+0x2c>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d1f5      	bne.n	800f454 <__sinit+0xc>
 800f468:	f7ff ffc4 	bl	800f3f4 <global_stdio_init.part.0>
 800f46c:	e7f2      	b.n	800f454 <__sinit+0xc>
 800f46e:	bf00      	nop
 800f470:	0800f3b5 	.word	0x0800f3b5
 800f474:	200041a0 	.word	0x200041a0

0800f478 <_fwalk_sglue>:
 800f478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f47c:	4607      	mov	r7, r0
 800f47e:	4688      	mov	r8, r1
 800f480:	4614      	mov	r4, r2
 800f482:	2600      	movs	r6, #0
 800f484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f488:	f1b9 0901 	subs.w	r9, r9, #1
 800f48c:	d505      	bpl.n	800f49a <_fwalk_sglue+0x22>
 800f48e:	6824      	ldr	r4, [r4, #0]
 800f490:	2c00      	cmp	r4, #0
 800f492:	d1f7      	bne.n	800f484 <_fwalk_sglue+0xc>
 800f494:	4630      	mov	r0, r6
 800f496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f49a:	89ab      	ldrh	r3, [r5, #12]
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d907      	bls.n	800f4b0 <_fwalk_sglue+0x38>
 800f4a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	d003      	beq.n	800f4b0 <_fwalk_sglue+0x38>
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	4638      	mov	r0, r7
 800f4ac:	47c0      	blx	r8
 800f4ae:	4306      	orrs	r6, r0
 800f4b0:	3568      	adds	r5, #104	; 0x68
 800f4b2:	e7e9      	b.n	800f488 <_fwalk_sglue+0x10>

0800f4b4 <siprintf>:
 800f4b4:	b40e      	push	{r1, r2, r3}
 800f4b6:	b500      	push	{lr}
 800f4b8:	b09c      	sub	sp, #112	; 0x70
 800f4ba:	ab1d      	add	r3, sp, #116	; 0x74
 800f4bc:	9002      	str	r0, [sp, #8]
 800f4be:	9006      	str	r0, [sp, #24]
 800f4c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4c4:	4809      	ldr	r0, [pc, #36]	; (800f4ec <siprintf+0x38>)
 800f4c6:	9107      	str	r1, [sp, #28]
 800f4c8:	9104      	str	r1, [sp, #16]
 800f4ca:	4909      	ldr	r1, [pc, #36]	; (800f4f0 <siprintf+0x3c>)
 800f4cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4d0:	9105      	str	r1, [sp, #20]
 800f4d2:	6800      	ldr	r0, [r0, #0]
 800f4d4:	9301      	str	r3, [sp, #4]
 800f4d6:	a902      	add	r1, sp, #8
 800f4d8:	f000 fab8 	bl	800fa4c <_svfiprintf_r>
 800f4dc:	9b02      	ldr	r3, [sp, #8]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	701a      	strb	r2, [r3, #0]
 800f4e2:	b01c      	add	sp, #112	; 0x70
 800f4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4e8:	b003      	add	sp, #12
 800f4ea:	4770      	bx	lr
 800f4ec:	20000174 	.word	0x20000174
 800f4f0:	ffff0208 	.word	0xffff0208

0800f4f4 <__sread>:
 800f4f4:	b510      	push	{r4, lr}
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4fc:	f000 f8d6 	bl	800f6ac <_read_r>
 800f500:	2800      	cmp	r0, #0
 800f502:	bfab      	itete	ge
 800f504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f506:	89a3      	ldrhlt	r3, [r4, #12]
 800f508:	181b      	addge	r3, r3, r0
 800f50a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f50e:	bfac      	ite	ge
 800f510:	6563      	strge	r3, [r4, #84]	; 0x54
 800f512:	81a3      	strhlt	r3, [r4, #12]
 800f514:	bd10      	pop	{r4, pc}

0800f516 <__swrite>:
 800f516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f51a:	461f      	mov	r7, r3
 800f51c:	898b      	ldrh	r3, [r1, #12]
 800f51e:	05db      	lsls	r3, r3, #23
 800f520:	4605      	mov	r5, r0
 800f522:	460c      	mov	r4, r1
 800f524:	4616      	mov	r6, r2
 800f526:	d505      	bpl.n	800f534 <__swrite+0x1e>
 800f528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f52c:	2302      	movs	r3, #2
 800f52e:	2200      	movs	r2, #0
 800f530:	f000 f8aa 	bl	800f688 <_lseek_r>
 800f534:	89a3      	ldrh	r3, [r4, #12]
 800f536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f53a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f53e:	81a3      	strh	r3, [r4, #12]
 800f540:	4632      	mov	r2, r6
 800f542:	463b      	mov	r3, r7
 800f544:	4628      	mov	r0, r5
 800f546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f54a:	f000 b8c1 	b.w	800f6d0 <_write_r>

0800f54e <__sseek>:
 800f54e:	b510      	push	{r4, lr}
 800f550:	460c      	mov	r4, r1
 800f552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f556:	f000 f897 	bl	800f688 <_lseek_r>
 800f55a:	1c43      	adds	r3, r0, #1
 800f55c:	89a3      	ldrh	r3, [r4, #12]
 800f55e:	bf15      	itete	ne
 800f560:	6560      	strne	r0, [r4, #84]	; 0x54
 800f562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f56a:	81a3      	strheq	r3, [r4, #12]
 800f56c:	bf18      	it	ne
 800f56e:	81a3      	strhne	r3, [r4, #12]
 800f570:	bd10      	pop	{r4, pc}

0800f572 <__sclose>:
 800f572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f576:	f000 b877 	b.w	800f668 <_close_r>

0800f57a <memset>:
 800f57a:	4402      	add	r2, r0
 800f57c:	4603      	mov	r3, r0
 800f57e:	4293      	cmp	r3, r2
 800f580:	d100      	bne.n	800f584 <memset+0xa>
 800f582:	4770      	bx	lr
 800f584:	f803 1b01 	strb.w	r1, [r3], #1
 800f588:	e7f9      	b.n	800f57e <memset+0x4>

0800f58a <strncat>:
 800f58a:	b530      	push	{r4, r5, lr}
 800f58c:	4604      	mov	r4, r0
 800f58e:	7825      	ldrb	r5, [r4, #0]
 800f590:	4623      	mov	r3, r4
 800f592:	3401      	adds	r4, #1
 800f594:	2d00      	cmp	r5, #0
 800f596:	d1fa      	bne.n	800f58e <strncat+0x4>
 800f598:	3a01      	subs	r2, #1
 800f59a:	d304      	bcc.n	800f5a6 <strncat+0x1c>
 800f59c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5a0:	f803 4b01 	strb.w	r4, [r3], #1
 800f5a4:	b904      	cbnz	r4, 800f5a8 <strncat+0x1e>
 800f5a6:	bd30      	pop	{r4, r5, pc}
 800f5a8:	2a00      	cmp	r2, #0
 800f5aa:	d1f5      	bne.n	800f598 <strncat+0xe>
 800f5ac:	701a      	strb	r2, [r3, #0]
 800f5ae:	e7f3      	b.n	800f598 <strncat+0xe>

0800f5b0 <strtok>:
 800f5b0:	4b16      	ldr	r3, [pc, #88]	; (800f60c <strtok+0x5c>)
 800f5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5b4:	681e      	ldr	r6, [r3, #0]
 800f5b6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	b9fc      	cbnz	r4, 800f5fc <strtok+0x4c>
 800f5bc:	2050      	movs	r0, #80	; 0x50
 800f5be:	9101      	str	r1, [sp, #4]
 800f5c0:	f000 f936 	bl	800f830 <malloc>
 800f5c4:	9901      	ldr	r1, [sp, #4]
 800f5c6:	6470      	str	r0, [r6, #68]	; 0x44
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	b920      	cbnz	r0, 800f5d6 <strtok+0x26>
 800f5cc:	4b10      	ldr	r3, [pc, #64]	; (800f610 <strtok+0x60>)
 800f5ce:	4811      	ldr	r0, [pc, #68]	; (800f614 <strtok+0x64>)
 800f5d0:	215b      	movs	r1, #91	; 0x5b
 800f5d2:	f000 f8c3 	bl	800f75c <__assert_func>
 800f5d6:	e9c0 4400 	strd	r4, r4, [r0]
 800f5da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f5de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f5e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f5e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f5ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f5ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f5f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f5f6:	6184      	str	r4, [r0, #24]
 800f5f8:	7704      	strb	r4, [r0, #28]
 800f5fa:	6244      	str	r4, [r0, #36]	; 0x24
 800f5fc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f5fe:	2301      	movs	r3, #1
 800f600:	4628      	mov	r0, r5
 800f602:	b002      	add	sp, #8
 800f604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f608:	f000 b806 	b.w	800f618 <__strtok_r>
 800f60c:	20000174 	.word	0x20000174
 800f610:	08011156 	.word	0x08011156
 800f614:	0801116d 	.word	0x0801116d

0800f618 <__strtok_r>:
 800f618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f61a:	b908      	cbnz	r0, 800f620 <__strtok_r+0x8>
 800f61c:	6810      	ldr	r0, [r2, #0]
 800f61e:	b188      	cbz	r0, 800f644 <__strtok_r+0x2c>
 800f620:	4604      	mov	r4, r0
 800f622:	4620      	mov	r0, r4
 800f624:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f628:	460f      	mov	r7, r1
 800f62a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f62e:	b91e      	cbnz	r6, 800f638 <__strtok_r+0x20>
 800f630:	b965      	cbnz	r5, 800f64c <__strtok_r+0x34>
 800f632:	6015      	str	r5, [r2, #0]
 800f634:	4628      	mov	r0, r5
 800f636:	e005      	b.n	800f644 <__strtok_r+0x2c>
 800f638:	42b5      	cmp	r5, r6
 800f63a:	d1f6      	bne.n	800f62a <__strtok_r+0x12>
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1f0      	bne.n	800f622 <__strtok_r+0xa>
 800f640:	6014      	str	r4, [r2, #0]
 800f642:	7003      	strb	r3, [r0, #0]
 800f644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f646:	461c      	mov	r4, r3
 800f648:	e00c      	b.n	800f664 <__strtok_r+0x4c>
 800f64a:	b915      	cbnz	r5, 800f652 <__strtok_r+0x3a>
 800f64c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f650:	460e      	mov	r6, r1
 800f652:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f656:	42ab      	cmp	r3, r5
 800f658:	d1f7      	bne.n	800f64a <__strtok_r+0x32>
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d0f3      	beq.n	800f646 <__strtok_r+0x2e>
 800f65e:	2300      	movs	r3, #0
 800f660:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f664:	6014      	str	r4, [r2, #0]
 800f666:	e7ed      	b.n	800f644 <__strtok_r+0x2c>

0800f668 <_close_r>:
 800f668:	b538      	push	{r3, r4, r5, lr}
 800f66a:	4d06      	ldr	r5, [pc, #24]	; (800f684 <_close_r+0x1c>)
 800f66c:	2300      	movs	r3, #0
 800f66e:	4604      	mov	r4, r0
 800f670:	4608      	mov	r0, r1
 800f672:	602b      	str	r3, [r5, #0]
 800f674:	f7f3 f995 	bl	80029a2 <_close>
 800f678:	1c43      	adds	r3, r0, #1
 800f67a:	d102      	bne.n	800f682 <_close_r+0x1a>
 800f67c:	682b      	ldr	r3, [r5, #0]
 800f67e:	b103      	cbz	r3, 800f682 <_close_r+0x1a>
 800f680:	6023      	str	r3, [r4, #0]
 800f682:	bd38      	pop	{r3, r4, r5, pc}
 800f684:	200041a4 	.word	0x200041a4

0800f688 <_lseek_r>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	4d07      	ldr	r5, [pc, #28]	; (800f6a8 <_lseek_r+0x20>)
 800f68c:	4604      	mov	r4, r0
 800f68e:	4608      	mov	r0, r1
 800f690:	4611      	mov	r1, r2
 800f692:	2200      	movs	r2, #0
 800f694:	602a      	str	r2, [r5, #0]
 800f696:	461a      	mov	r2, r3
 800f698:	f7f3 f9aa 	bl	80029f0 <_lseek>
 800f69c:	1c43      	adds	r3, r0, #1
 800f69e:	d102      	bne.n	800f6a6 <_lseek_r+0x1e>
 800f6a0:	682b      	ldr	r3, [r5, #0]
 800f6a2:	b103      	cbz	r3, 800f6a6 <_lseek_r+0x1e>
 800f6a4:	6023      	str	r3, [r4, #0]
 800f6a6:	bd38      	pop	{r3, r4, r5, pc}
 800f6a8:	200041a4 	.word	0x200041a4

0800f6ac <_read_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4d07      	ldr	r5, [pc, #28]	; (800f6cc <_read_r+0x20>)
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	4608      	mov	r0, r1
 800f6b4:	4611      	mov	r1, r2
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	602a      	str	r2, [r5, #0]
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	f7f3 f938 	bl	8002930 <_read>
 800f6c0:	1c43      	adds	r3, r0, #1
 800f6c2:	d102      	bne.n	800f6ca <_read_r+0x1e>
 800f6c4:	682b      	ldr	r3, [r5, #0]
 800f6c6:	b103      	cbz	r3, 800f6ca <_read_r+0x1e>
 800f6c8:	6023      	str	r3, [r4, #0]
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	200041a4 	.word	0x200041a4

0800f6d0 <_write_r>:
 800f6d0:	b538      	push	{r3, r4, r5, lr}
 800f6d2:	4d07      	ldr	r5, [pc, #28]	; (800f6f0 <_write_r+0x20>)
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	4608      	mov	r0, r1
 800f6d8:	4611      	mov	r1, r2
 800f6da:	2200      	movs	r2, #0
 800f6dc:	602a      	str	r2, [r5, #0]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	f7f3 f943 	bl	800296a <_write>
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	d102      	bne.n	800f6ee <_write_r+0x1e>
 800f6e8:	682b      	ldr	r3, [r5, #0]
 800f6ea:	b103      	cbz	r3, 800f6ee <_write_r+0x1e>
 800f6ec:	6023      	str	r3, [r4, #0]
 800f6ee:	bd38      	pop	{r3, r4, r5, pc}
 800f6f0:	200041a4 	.word	0x200041a4

0800f6f4 <__errno>:
 800f6f4:	4b01      	ldr	r3, [pc, #4]	; (800f6fc <__errno+0x8>)
 800f6f6:	6818      	ldr	r0, [r3, #0]
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop
 800f6fc:	20000174 	.word	0x20000174

0800f700 <__libc_init_array>:
 800f700:	b570      	push	{r4, r5, r6, lr}
 800f702:	4d0d      	ldr	r5, [pc, #52]	; (800f738 <__libc_init_array+0x38>)
 800f704:	4c0d      	ldr	r4, [pc, #52]	; (800f73c <__libc_init_array+0x3c>)
 800f706:	1b64      	subs	r4, r4, r5
 800f708:	10a4      	asrs	r4, r4, #2
 800f70a:	2600      	movs	r6, #0
 800f70c:	42a6      	cmp	r6, r4
 800f70e:	d109      	bne.n	800f724 <__libc_init_array+0x24>
 800f710:	4d0b      	ldr	r5, [pc, #44]	; (800f740 <__libc_init_array+0x40>)
 800f712:	4c0c      	ldr	r4, [pc, #48]	; (800f744 <__libc_init_array+0x44>)
 800f714:	f001 f800 	bl	8010718 <_init>
 800f718:	1b64      	subs	r4, r4, r5
 800f71a:	10a4      	asrs	r4, r4, #2
 800f71c:	2600      	movs	r6, #0
 800f71e:	42a6      	cmp	r6, r4
 800f720:	d105      	bne.n	800f72e <__libc_init_array+0x2e>
 800f722:	bd70      	pop	{r4, r5, r6, pc}
 800f724:	f855 3b04 	ldr.w	r3, [r5], #4
 800f728:	4798      	blx	r3
 800f72a:	3601      	adds	r6, #1
 800f72c:	e7ee      	b.n	800f70c <__libc_init_array+0xc>
 800f72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f732:	4798      	blx	r3
 800f734:	3601      	adds	r6, #1
 800f736:	e7f2      	b.n	800f71e <__libc_init_array+0x1e>
 800f738:	08011240 	.word	0x08011240
 800f73c:	08011240 	.word	0x08011240
 800f740:	08011240 	.word	0x08011240
 800f744:	08011244 	.word	0x08011244

0800f748 <__retarget_lock_acquire_recursive>:
 800f748:	4770      	bx	lr

0800f74a <__retarget_lock_release_recursive>:
 800f74a:	4770      	bx	lr

0800f74c <strcpy>:
 800f74c:	4603      	mov	r3, r0
 800f74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f752:	f803 2b01 	strb.w	r2, [r3], #1
 800f756:	2a00      	cmp	r2, #0
 800f758:	d1f9      	bne.n	800f74e <strcpy+0x2>
 800f75a:	4770      	bx	lr

0800f75c <__assert_func>:
 800f75c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f75e:	4614      	mov	r4, r2
 800f760:	461a      	mov	r2, r3
 800f762:	4b09      	ldr	r3, [pc, #36]	; (800f788 <__assert_func+0x2c>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4605      	mov	r5, r0
 800f768:	68d8      	ldr	r0, [r3, #12]
 800f76a:	b14c      	cbz	r4, 800f780 <__assert_func+0x24>
 800f76c:	4b07      	ldr	r3, [pc, #28]	; (800f78c <__assert_func+0x30>)
 800f76e:	9100      	str	r1, [sp, #0]
 800f770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f774:	4906      	ldr	r1, [pc, #24]	; (800f790 <__assert_func+0x34>)
 800f776:	462b      	mov	r3, r5
 800f778:	f000 fca4 	bl	80100c4 <fiprintf>
 800f77c:	f000 fcec 	bl	8010158 <abort>
 800f780:	4b04      	ldr	r3, [pc, #16]	; (800f794 <__assert_func+0x38>)
 800f782:	461c      	mov	r4, r3
 800f784:	e7f3      	b.n	800f76e <__assert_func+0x12>
 800f786:	bf00      	nop
 800f788:	20000174 	.word	0x20000174
 800f78c:	080111c7 	.word	0x080111c7
 800f790:	080111d4 	.word	0x080111d4
 800f794:	08011202 	.word	0x08011202

0800f798 <_free_r>:
 800f798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f79a:	2900      	cmp	r1, #0
 800f79c:	d044      	beq.n	800f828 <_free_r+0x90>
 800f79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7a2:	9001      	str	r0, [sp, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	f1a1 0404 	sub.w	r4, r1, #4
 800f7aa:	bfb8      	it	lt
 800f7ac:	18e4      	addlt	r4, r4, r3
 800f7ae:	f000 f8e7 	bl	800f980 <__malloc_lock>
 800f7b2:	4a1e      	ldr	r2, [pc, #120]	; (800f82c <_free_r+0x94>)
 800f7b4:	9801      	ldr	r0, [sp, #4]
 800f7b6:	6813      	ldr	r3, [r2, #0]
 800f7b8:	b933      	cbnz	r3, 800f7c8 <_free_r+0x30>
 800f7ba:	6063      	str	r3, [r4, #4]
 800f7bc:	6014      	str	r4, [r2, #0]
 800f7be:	b003      	add	sp, #12
 800f7c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7c4:	f000 b8e2 	b.w	800f98c <__malloc_unlock>
 800f7c8:	42a3      	cmp	r3, r4
 800f7ca:	d908      	bls.n	800f7de <_free_r+0x46>
 800f7cc:	6825      	ldr	r5, [r4, #0]
 800f7ce:	1961      	adds	r1, r4, r5
 800f7d0:	428b      	cmp	r3, r1
 800f7d2:	bf01      	itttt	eq
 800f7d4:	6819      	ldreq	r1, [r3, #0]
 800f7d6:	685b      	ldreq	r3, [r3, #4]
 800f7d8:	1949      	addeq	r1, r1, r5
 800f7da:	6021      	streq	r1, [r4, #0]
 800f7dc:	e7ed      	b.n	800f7ba <_free_r+0x22>
 800f7de:	461a      	mov	r2, r3
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	b10b      	cbz	r3, 800f7e8 <_free_r+0x50>
 800f7e4:	42a3      	cmp	r3, r4
 800f7e6:	d9fa      	bls.n	800f7de <_free_r+0x46>
 800f7e8:	6811      	ldr	r1, [r2, #0]
 800f7ea:	1855      	adds	r5, r2, r1
 800f7ec:	42a5      	cmp	r5, r4
 800f7ee:	d10b      	bne.n	800f808 <_free_r+0x70>
 800f7f0:	6824      	ldr	r4, [r4, #0]
 800f7f2:	4421      	add	r1, r4
 800f7f4:	1854      	adds	r4, r2, r1
 800f7f6:	42a3      	cmp	r3, r4
 800f7f8:	6011      	str	r1, [r2, #0]
 800f7fa:	d1e0      	bne.n	800f7be <_free_r+0x26>
 800f7fc:	681c      	ldr	r4, [r3, #0]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	6053      	str	r3, [r2, #4]
 800f802:	440c      	add	r4, r1
 800f804:	6014      	str	r4, [r2, #0]
 800f806:	e7da      	b.n	800f7be <_free_r+0x26>
 800f808:	d902      	bls.n	800f810 <_free_r+0x78>
 800f80a:	230c      	movs	r3, #12
 800f80c:	6003      	str	r3, [r0, #0]
 800f80e:	e7d6      	b.n	800f7be <_free_r+0x26>
 800f810:	6825      	ldr	r5, [r4, #0]
 800f812:	1961      	adds	r1, r4, r5
 800f814:	428b      	cmp	r3, r1
 800f816:	bf04      	itt	eq
 800f818:	6819      	ldreq	r1, [r3, #0]
 800f81a:	685b      	ldreq	r3, [r3, #4]
 800f81c:	6063      	str	r3, [r4, #4]
 800f81e:	bf04      	itt	eq
 800f820:	1949      	addeq	r1, r1, r5
 800f822:	6021      	streq	r1, [r4, #0]
 800f824:	6054      	str	r4, [r2, #4]
 800f826:	e7ca      	b.n	800f7be <_free_r+0x26>
 800f828:	b003      	add	sp, #12
 800f82a:	bd30      	pop	{r4, r5, pc}
 800f82c:	200041ac 	.word	0x200041ac

0800f830 <malloc>:
 800f830:	4b02      	ldr	r3, [pc, #8]	; (800f83c <malloc+0xc>)
 800f832:	4601      	mov	r1, r0
 800f834:	6818      	ldr	r0, [r3, #0]
 800f836:	f000 b823 	b.w	800f880 <_malloc_r>
 800f83a:	bf00      	nop
 800f83c:	20000174 	.word	0x20000174

0800f840 <sbrk_aligned>:
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	4e0e      	ldr	r6, [pc, #56]	; (800f87c <sbrk_aligned+0x3c>)
 800f844:	460c      	mov	r4, r1
 800f846:	6831      	ldr	r1, [r6, #0]
 800f848:	4605      	mov	r5, r0
 800f84a:	b911      	cbnz	r1, 800f852 <sbrk_aligned+0x12>
 800f84c:	f000 fc66 	bl	801011c <_sbrk_r>
 800f850:	6030      	str	r0, [r6, #0]
 800f852:	4621      	mov	r1, r4
 800f854:	4628      	mov	r0, r5
 800f856:	f000 fc61 	bl	801011c <_sbrk_r>
 800f85a:	1c43      	adds	r3, r0, #1
 800f85c:	d00a      	beq.n	800f874 <sbrk_aligned+0x34>
 800f85e:	1cc4      	adds	r4, r0, #3
 800f860:	f024 0403 	bic.w	r4, r4, #3
 800f864:	42a0      	cmp	r0, r4
 800f866:	d007      	beq.n	800f878 <sbrk_aligned+0x38>
 800f868:	1a21      	subs	r1, r4, r0
 800f86a:	4628      	mov	r0, r5
 800f86c:	f000 fc56 	bl	801011c <_sbrk_r>
 800f870:	3001      	adds	r0, #1
 800f872:	d101      	bne.n	800f878 <sbrk_aligned+0x38>
 800f874:	f04f 34ff 	mov.w	r4, #4294967295
 800f878:	4620      	mov	r0, r4
 800f87a:	bd70      	pop	{r4, r5, r6, pc}
 800f87c:	200041b0 	.word	0x200041b0

0800f880 <_malloc_r>:
 800f880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f884:	1ccd      	adds	r5, r1, #3
 800f886:	f025 0503 	bic.w	r5, r5, #3
 800f88a:	3508      	adds	r5, #8
 800f88c:	2d0c      	cmp	r5, #12
 800f88e:	bf38      	it	cc
 800f890:	250c      	movcc	r5, #12
 800f892:	2d00      	cmp	r5, #0
 800f894:	4607      	mov	r7, r0
 800f896:	db01      	blt.n	800f89c <_malloc_r+0x1c>
 800f898:	42a9      	cmp	r1, r5
 800f89a:	d905      	bls.n	800f8a8 <_malloc_r+0x28>
 800f89c:	230c      	movs	r3, #12
 800f89e:	603b      	str	r3, [r7, #0]
 800f8a0:	2600      	movs	r6, #0
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f97c <_malloc_r+0xfc>
 800f8ac:	f000 f868 	bl	800f980 <__malloc_lock>
 800f8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f8b4:	461c      	mov	r4, r3
 800f8b6:	bb5c      	cbnz	r4, 800f910 <_malloc_r+0x90>
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	4638      	mov	r0, r7
 800f8bc:	f7ff ffc0 	bl	800f840 <sbrk_aligned>
 800f8c0:	1c43      	adds	r3, r0, #1
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	d155      	bne.n	800f972 <_malloc_r+0xf2>
 800f8c6:	f8d8 4000 	ldr.w	r4, [r8]
 800f8ca:	4626      	mov	r6, r4
 800f8cc:	2e00      	cmp	r6, #0
 800f8ce:	d145      	bne.n	800f95c <_malloc_r+0xdc>
 800f8d0:	2c00      	cmp	r4, #0
 800f8d2:	d048      	beq.n	800f966 <_malloc_r+0xe6>
 800f8d4:	6823      	ldr	r3, [r4, #0]
 800f8d6:	4631      	mov	r1, r6
 800f8d8:	4638      	mov	r0, r7
 800f8da:	eb04 0903 	add.w	r9, r4, r3
 800f8de:	f000 fc1d 	bl	801011c <_sbrk_r>
 800f8e2:	4581      	cmp	r9, r0
 800f8e4:	d13f      	bne.n	800f966 <_malloc_r+0xe6>
 800f8e6:	6821      	ldr	r1, [r4, #0]
 800f8e8:	1a6d      	subs	r5, r5, r1
 800f8ea:	4629      	mov	r1, r5
 800f8ec:	4638      	mov	r0, r7
 800f8ee:	f7ff ffa7 	bl	800f840 <sbrk_aligned>
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	d037      	beq.n	800f966 <_malloc_r+0xe6>
 800f8f6:	6823      	ldr	r3, [r4, #0]
 800f8f8:	442b      	add	r3, r5
 800f8fa:	6023      	str	r3, [r4, #0]
 800f8fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d038      	beq.n	800f976 <_malloc_r+0xf6>
 800f904:	685a      	ldr	r2, [r3, #4]
 800f906:	42a2      	cmp	r2, r4
 800f908:	d12b      	bne.n	800f962 <_malloc_r+0xe2>
 800f90a:	2200      	movs	r2, #0
 800f90c:	605a      	str	r2, [r3, #4]
 800f90e:	e00f      	b.n	800f930 <_malloc_r+0xb0>
 800f910:	6822      	ldr	r2, [r4, #0]
 800f912:	1b52      	subs	r2, r2, r5
 800f914:	d41f      	bmi.n	800f956 <_malloc_r+0xd6>
 800f916:	2a0b      	cmp	r2, #11
 800f918:	d917      	bls.n	800f94a <_malloc_r+0xca>
 800f91a:	1961      	adds	r1, r4, r5
 800f91c:	42a3      	cmp	r3, r4
 800f91e:	6025      	str	r5, [r4, #0]
 800f920:	bf18      	it	ne
 800f922:	6059      	strne	r1, [r3, #4]
 800f924:	6863      	ldr	r3, [r4, #4]
 800f926:	bf08      	it	eq
 800f928:	f8c8 1000 	streq.w	r1, [r8]
 800f92c:	5162      	str	r2, [r4, r5]
 800f92e:	604b      	str	r3, [r1, #4]
 800f930:	4638      	mov	r0, r7
 800f932:	f104 060b 	add.w	r6, r4, #11
 800f936:	f000 f829 	bl	800f98c <__malloc_unlock>
 800f93a:	f026 0607 	bic.w	r6, r6, #7
 800f93e:	1d23      	adds	r3, r4, #4
 800f940:	1af2      	subs	r2, r6, r3
 800f942:	d0ae      	beq.n	800f8a2 <_malloc_r+0x22>
 800f944:	1b9b      	subs	r3, r3, r6
 800f946:	50a3      	str	r3, [r4, r2]
 800f948:	e7ab      	b.n	800f8a2 <_malloc_r+0x22>
 800f94a:	42a3      	cmp	r3, r4
 800f94c:	6862      	ldr	r2, [r4, #4]
 800f94e:	d1dd      	bne.n	800f90c <_malloc_r+0x8c>
 800f950:	f8c8 2000 	str.w	r2, [r8]
 800f954:	e7ec      	b.n	800f930 <_malloc_r+0xb0>
 800f956:	4623      	mov	r3, r4
 800f958:	6864      	ldr	r4, [r4, #4]
 800f95a:	e7ac      	b.n	800f8b6 <_malloc_r+0x36>
 800f95c:	4634      	mov	r4, r6
 800f95e:	6876      	ldr	r6, [r6, #4]
 800f960:	e7b4      	b.n	800f8cc <_malloc_r+0x4c>
 800f962:	4613      	mov	r3, r2
 800f964:	e7cc      	b.n	800f900 <_malloc_r+0x80>
 800f966:	230c      	movs	r3, #12
 800f968:	603b      	str	r3, [r7, #0]
 800f96a:	4638      	mov	r0, r7
 800f96c:	f000 f80e 	bl	800f98c <__malloc_unlock>
 800f970:	e797      	b.n	800f8a2 <_malloc_r+0x22>
 800f972:	6025      	str	r5, [r4, #0]
 800f974:	e7dc      	b.n	800f930 <_malloc_r+0xb0>
 800f976:	605b      	str	r3, [r3, #4]
 800f978:	deff      	udf	#255	; 0xff
 800f97a:	bf00      	nop
 800f97c:	200041ac 	.word	0x200041ac

0800f980 <__malloc_lock>:
 800f980:	4801      	ldr	r0, [pc, #4]	; (800f988 <__malloc_lock+0x8>)
 800f982:	f7ff bee1 	b.w	800f748 <__retarget_lock_acquire_recursive>
 800f986:	bf00      	nop
 800f988:	200041a8 	.word	0x200041a8

0800f98c <__malloc_unlock>:
 800f98c:	4801      	ldr	r0, [pc, #4]	; (800f994 <__malloc_unlock+0x8>)
 800f98e:	f7ff bedc 	b.w	800f74a <__retarget_lock_release_recursive>
 800f992:	bf00      	nop
 800f994:	200041a8 	.word	0x200041a8

0800f998 <__ssputs_r>:
 800f998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	688e      	ldr	r6, [r1, #8]
 800f99e:	461f      	mov	r7, r3
 800f9a0:	42be      	cmp	r6, r7
 800f9a2:	680b      	ldr	r3, [r1, #0]
 800f9a4:	4682      	mov	sl, r0
 800f9a6:	460c      	mov	r4, r1
 800f9a8:	4690      	mov	r8, r2
 800f9aa:	d82c      	bhi.n	800fa06 <__ssputs_r+0x6e>
 800f9ac:	898a      	ldrh	r2, [r1, #12]
 800f9ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f9b2:	d026      	beq.n	800fa02 <__ssputs_r+0x6a>
 800f9b4:	6965      	ldr	r5, [r4, #20]
 800f9b6:	6909      	ldr	r1, [r1, #16]
 800f9b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9bc:	eba3 0901 	sub.w	r9, r3, r1
 800f9c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f9c4:	1c7b      	adds	r3, r7, #1
 800f9c6:	444b      	add	r3, r9
 800f9c8:	106d      	asrs	r5, r5, #1
 800f9ca:	429d      	cmp	r5, r3
 800f9cc:	bf38      	it	cc
 800f9ce:	461d      	movcc	r5, r3
 800f9d0:	0553      	lsls	r3, r2, #21
 800f9d2:	d527      	bpl.n	800fa24 <__ssputs_r+0x8c>
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	f7ff ff53 	bl	800f880 <_malloc_r>
 800f9da:	4606      	mov	r6, r0
 800f9dc:	b360      	cbz	r0, 800fa38 <__ssputs_r+0xa0>
 800f9de:	6921      	ldr	r1, [r4, #16]
 800f9e0:	464a      	mov	r2, r9
 800f9e2:	f000 fbab 	bl	801013c <memcpy>
 800f9e6:	89a3      	ldrh	r3, [r4, #12]
 800f9e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9f0:	81a3      	strh	r3, [r4, #12]
 800f9f2:	6126      	str	r6, [r4, #16]
 800f9f4:	6165      	str	r5, [r4, #20]
 800f9f6:	444e      	add	r6, r9
 800f9f8:	eba5 0509 	sub.w	r5, r5, r9
 800f9fc:	6026      	str	r6, [r4, #0]
 800f9fe:	60a5      	str	r5, [r4, #8]
 800fa00:	463e      	mov	r6, r7
 800fa02:	42be      	cmp	r6, r7
 800fa04:	d900      	bls.n	800fa08 <__ssputs_r+0x70>
 800fa06:	463e      	mov	r6, r7
 800fa08:	6820      	ldr	r0, [r4, #0]
 800fa0a:	4632      	mov	r2, r6
 800fa0c:	4641      	mov	r1, r8
 800fa0e:	f000 fb6b 	bl	80100e8 <memmove>
 800fa12:	68a3      	ldr	r3, [r4, #8]
 800fa14:	1b9b      	subs	r3, r3, r6
 800fa16:	60a3      	str	r3, [r4, #8]
 800fa18:	6823      	ldr	r3, [r4, #0]
 800fa1a:	4433      	add	r3, r6
 800fa1c:	6023      	str	r3, [r4, #0]
 800fa1e:	2000      	movs	r0, #0
 800fa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa24:	462a      	mov	r2, r5
 800fa26:	f000 fb9e 	bl	8010166 <_realloc_r>
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d1e0      	bne.n	800f9f2 <__ssputs_r+0x5a>
 800fa30:	6921      	ldr	r1, [r4, #16]
 800fa32:	4650      	mov	r0, sl
 800fa34:	f7ff feb0 	bl	800f798 <_free_r>
 800fa38:	230c      	movs	r3, #12
 800fa3a:	f8ca 3000 	str.w	r3, [sl]
 800fa3e:	89a3      	ldrh	r3, [r4, #12]
 800fa40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa44:	81a3      	strh	r3, [r4, #12]
 800fa46:	f04f 30ff 	mov.w	r0, #4294967295
 800fa4a:	e7e9      	b.n	800fa20 <__ssputs_r+0x88>

0800fa4c <_svfiprintf_r>:
 800fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa50:	4698      	mov	r8, r3
 800fa52:	898b      	ldrh	r3, [r1, #12]
 800fa54:	061b      	lsls	r3, r3, #24
 800fa56:	b09d      	sub	sp, #116	; 0x74
 800fa58:	4607      	mov	r7, r0
 800fa5a:	460d      	mov	r5, r1
 800fa5c:	4614      	mov	r4, r2
 800fa5e:	d50e      	bpl.n	800fa7e <_svfiprintf_r+0x32>
 800fa60:	690b      	ldr	r3, [r1, #16]
 800fa62:	b963      	cbnz	r3, 800fa7e <_svfiprintf_r+0x32>
 800fa64:	2140      	movs	r1, #64	; 0x40
 800fa66:	f7ff ff0b 	bl	800f880 <_malloc_r>
 800fa6a:	6028      	str	r0, [r5, #0]
 800fa6c:	6128      	str	r0, [r5, #16]
 800fa6e:	b920      	cbnz	r0, 800fa7a <_svfiprintf_r+0x2e>
 800fa70:	230c      	movs	r3, #12
 800fa72:	603b      	str	r3, [r7, #0]
 800fa74:	f04f 30ff 	mov.w	r0, #4294967295
 800fa78:	e0d0      	b.n	800fc1c <_svfiprintf_r+0x1d0>
 800fa7a:	2340      	movs	r3, #64	; 0x40
 800fa7c:	616b      	str	r3, [r5, #20]
 800fa7e:	2300      	movs	r3, #0
 800fa80:	9309      	str	r3, [sp, #36]	; 0x24
 800fa82:	2320      	movs	r3, #32
 800fa84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa88:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa8c:	2330      	movs	r3, #48	; 0x30
 800fa8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fc34 <_svfiprintf_r+0x1e8>
 800fa92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa96:	f04f 0901 	mov.w	r9, #1
 800fa9a:	4623      	mov	r3, r4
 800fa9c:	469a      	mov	sl, r3
 800fa9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800faa2:	b10a      	cbz	r2, 800faa8 <_svfiprintf_r+0x5c>
 800faa4:	2a25      	cmp	r2, #37	; 0x25
 800faa6:	d1f9      	bne.n	800fa9c <_svfiprintf_r+0x50>
 800faa8:	ebba 0b04 	subs.w	fp, sl, r4
 800faac:	d00b      	beq.n	800fac6 <_svfiprintf_r+0x7a>
 800faae:	465b      	mov	r3, fp
 800fab0:	4622      	mov	r2, r4
 800fab2:	4629      	mov	r1, r5
 800fab4:	4638      	mov	r0, r7
 800fab6:	f7ff ff6f 	bl	800f998 <__ssputs_r>
 800faba:	3001      	adds	r0, #1
 800fabc:	f000 80a9 	beq.w	800fc12 <_svfiprintf_r+0x1c6>
 800fac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fac2:	445a      	add	r2, fp
 800fac4:	9209      	str	r2, [sp, #36]	; 0x24
 800fac6:	f89a 3000 	ldrb.w	r3, [sl]
 800faca:	2b00      	cmp	r3, #0
 800facc:	f000 80a1 	beq.w	800fc12 <_svfiprintf_r+0x1c6>
 800fad0:	2300      	movs	r3, #0
 800fad2:	f04f 32ff 	mov.w	r2, #4294967295
 800fad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fada:	f10a 0a01 	add.w	sl, sl, #1
 800fade:	9304      	str	r3, [sp, #16]
 800fae0:	9307      	str	r3, [sp, #28]
 800fae2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fae6:	931a      	str	r3, [sp, #104]	; 0x68
 800fae8:	4654      	mov	r4, sl
 800faea:	2205      	movs	r2, #5
 800faec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faf0:	4850      	ldr	r0, [pc, #320]	; (800fc34 <_svfiprintf_r+0x1e8>)
 800faf2:	f7f0 fb8d 	bl	8000210 <memchr>
 800faf6:	9a04      	ldr	r2, [sp, #16]
 800faf8:	b9d8      	cbnz	r0, 800fb32 <_svfiprintf_r+0xe6>
 800fafa:	06d0      	lsls	r0, r2, #27
 800fafc:	bf44      	itt	mi
 800fafe:	2320      	movmi	r3, #32
 800fb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb04:	0711      	lsls	r1, r2, #28
 800fb06:	bf44      	itt	mi
 800fb08:	232b      	movmi	r3, #43	; 0x2b
 800fb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb0e:	f89a 3000 	ldrb.w	r3, [sl]
 800fb12:	2b2a      	cmp	r3, #42	; 0x2a
 800fb14:	d015      	beq.n	800fb42 <_svfiprintf_r+0xf6>
 800fb16:	9a07      	ldr	r2, [sp, #28]
 800fb18:	4654      	mov	r4, sl
 800fb1a:	2000      	movs	r0, #0
 800fb1c:	f04f 0c0a 	mov.w	ip, #10
 800fb20:	4621      	mov	r1, r4
 800fb22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb26:	3b30      	subs	r3, #48	; 0x30
 800fb28:	2b09      	cmp	r3, #9
 800fb2a:	d94d      	bls.n	800fbc8 <_svfiprintf_r+0x17c>
 800fb2c:	b1b0      	cbz	r0, 800fb5c <_svfiprintf_r+0x110>
 800fb2e:	9207      	str	r2, [sp, #28]
 800fb30:	e014      	b.n	800fb5c <_svfiprintf_r+0x110>
 800fb32:	eba0 0308 	sub.w	r3, r0, r8
 800fb36:	fa09 f303 	lsl.w	r3, r9, r3
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	9304      	str	r3, [sp, #16]
 800fb3e:	46a2      	mov	sl, r4
 800fb40:	e7d2      	b.n	800fae8 <_svfiprintf_r+0x9c>
 800fb42:	9b03      	ldr	r3, [sp, #12]
 800fb44:	1d19      	adds	r1, r3, #4
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	9103      	str	r1, [sp, #12]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	bfbb      	ittet	lt
 800fb4e:	425b      	neglt	r3, r3
 800fb50:	f042 0202 	orrlt.w	r2, r2, #2
 800fb54:	9307      	strge	r3, [sp, #28]
 800fb56:	9307      	strlt	r3, [sp, #28]
 800fb58:	bfb8      	it	lt
 800fb5a:	9204      	strlt	r2, [sp, #16]
 800fb5c:	7823      	ldrb	r3, [r4, #0]
 800fb5e:	2b2e      	cmp	r3, #46	; 0x2e
 800fb60:	d10c      	bne.n	800fb7c <_svfiprintf_r+0x130>
 800fb62:	7863      	ldrb	r3, [r4, #1]
 800fb64:	2b2a      	cmp	r3, #42	; 0x2a
 800fb66:	d134      	bne.n	800fbd2 <_svfiprintf_r+0x186>
 800fb68:	9b03      	ldr	r3, [sp, #12]
 800fb6a:	1d1a      	adds	r2, r3, #4
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	9203      	str	r2, [sp, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	bfb8      	it	lt
 800fb74:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb78:	3402      	adds	r4, #2
 800fb7a:	9305      	str	r3, [sp, #20]
 800fb7c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fc44 <_svfiprintf_r+0x1f8>
 800fb80:	7821      	ldrb	r1, [r4, #0]
 800fb82:	2203      	movs	r2, #3
 800fb84:	4650      	mov	r0, sl
 800fb86:	f7f0 fb43 	bl	8000210 <memchr>
 800fb8a:	b138      	cbz	r0, 800fb9c <_svfiprintf_r+0x150>
 800fb8c:	9b04      	ldr	r3, [sp, #16]
 800fb8e:	eba0 000a 	sub.w	r0, r0, sl
 800fb92:	2240      	movs	r2, #64	; 0x40
 800fb94:	4082      	lsls	r2, r0
 800fb96:	4313      	orrs	r3, r2
 800fb98:	3401      	adds	r4, #1
 800fb9a:	9304      	str	r3, [sp, #16]
 800fb9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fba0:	4825      	ldr	r0, [pc, #148]	; (800fc38 <_svfiprintf_r+0x1ec>)
 800fba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fba6:	2206      	movs	r2, #6
 800fba8:	f7f0 fb32 	bl	8000210 <memchr>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d038      	beq.n	800fc22 <_svfiprintf_r+0x1d6>
 800fbb0:	4b22      	ldr	r3, [pc, #136]	; (800fc3c <_svfiprintf_r+0x1f0>)
 800fbb2:	bb1b      	cbnz	r3, 800fbfc <_svfiprintf_r+0x1b0>
 800fbb4:	9b03      	ldr	r3, [sp, #12]
 800fbb6:	3307      	adds	r3, #7
 800fbb8:	f023 0307 	bic.w	r3, r3, #7
 800fbbc:	3308      	adds	r3, #8
 800fbbe:	9303      	str	r3, [sp, #12]
 800fbc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbc2:	4433      	add	r3, r6
 800fbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800fbc6:	e768      	b.n	800fa9a <_svfiprintf_r+0x4e>
 800fbc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbcc:	460c      	mov	r4, r1
 800fbce:	2001      	movs	r0, #1
 800fbd0:	e7a6      	b.n	800fb20 <_svfiprintf_r+0xd4>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	3401      	adds	r4, #1
 800fbd6:	9305      	str	r3, [sp, #20]
 800fbd8:	4619      	mov	r1, r3
 800fbda:	f04f 0c0a 	mov.w	ip, #10
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbe4:	3a30      	subs	r2, #48	; 0x30
 800fbe6:	2a09      	cmp	r2, #9
 800fbe8:	d903      	bls.n	800fbf2 <_svfiprintf_r+0x1a6>
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d0c6      	beq.n	800fb7c <_svfiprintf_r+0x130>
 800fbee:	9105      	str	r1, [sp, #20]
 800fbf0:	e7c4      	b.n	800fb7c <_svfiprintf_r+0x130>
 800fbf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	e7f0      	b.n	800fbde <_svfiprintf_r+0x192>
 800fbfc:	ab03      	add	r3, sp, #12
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	462a      	mov	r2, r5
 800fc02:	4b0f      	ldr	r3, [pc, #60]	; (800fc40 <_svfiprintf_r+0x1f4>)
 800fc04:	a904      	add	r1, sp, #16
 800fc06:	4638      	mov	r0, r7
 800fc08:	f3af 8000 	nop.w
 800fc0c:	1c42      	adds	r2, r0, #1
 800fc0e:	4606      	mov	r6, r0
 800fc10:	d1d6      	bne.n	800fbc0 <_svfiprintf_r+0x174>
 800fc12:	89ab      	ldrh	r3, [r5, #12]
 800fc14:	065b      	lsls	r3, r3, #25
 800fc16:	f53f af2d 	bmi.w	800fa74 <_svfiprintf_r+0x28>
 800fc1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc1c:	b01d      	add	sp, #116	; 0x74
 800fc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc22:	ab03      	add	r3, sp, #12
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	462a      	mov	r2, r5
 800fc28:	4b05      	ldr	r3, [pc, #20]	; (800fc40 <_svfiprintf_r+0x1f4>)
 800fc2a:	a904      	add	r1, sp, #16
 800fc2c:	4638      	mov	r0, r7
 800fc2e:	f000 f879 	bl	800fd24 <_printf_i>
 800fc32:	e7eb      	b.n	800fc0c <_svfiprintf_r+0x1c0>
 800fc34:	08011203 	.word	0x08011203
 800fc38:	0801120d 	.word	0x0801120d
 800fc3c:	00000000 	.word	0x00000000
 800fc40:	0800f999 	.word	0x0800f999
 800fc44:	08011209 	.word	0x08011209

0800fc48 <_printf_common>:
 800fc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc4c:	4616      	mov	r6, r2
 800fc4e:	4699      	mov	r9, r3
 800fc50:	688a      	ldr	r2, [r1, #8]
 800fc52:	690b      	ldr	r3, [r1, #16]
 800fc54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	bfb8      	it	lt
 800fc5c:	4613      	movlt	r3, r2
 800fc5e:	6033      	str	r3, [r6, #0]
 800fc60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc64:	4607      	mov	r7, r0
 800fc66:	460c      	mov	r4, r1
 800fc68:	b10a      	cbz	r2, 800fc6e <_printf_common+0x26>
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	6033      	str	r3, [r6, #0]
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	0699      	lsls	r1, r3, #26
 800fc72:	bf42      	ittt	mi
 800fc74:	6833      	ldrmi	r3, [r6, #0]
 800fc76:	3302      	addmi	r3, #2
 800fc78:	6033      	strmi	r3, [r6, #0]
 800fc7a:	6825      	ldr	r5, [r4, #0]
 800fc7c:	f015 0506 	ands.w	r5, r5, #6
 800fc80:	d106      	bne.n	800fc90 <_printf_common+0x48>
 800fc82:	f104 0a19 	add.w	sl, r4, #25
 800fc86:	68e3      	ldr	r3, [r4, #12]
 800fc88:	6832      	ldr	r2, [r6, #0]
 800fc8a:	1a9b      	subs	r3, r3, r2
 800fc8c:	42ab      	cmp	r3, r5
 800fc8e:	dc26      	bgt.n	800fcde <_printf_common+0x96>
 800fc90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc94:	1e13      	subs	r3, r2, #0
 800fc96:	6822      	ldr	r2, [r4, #0]
 800fc98:	bf18      	it	ne
 800fc9a:	2301      	movne	r3, #1
 800fc9c:	0692      	lsls	r2, r2, #26
 800fc9e:	d42b      	bmi.n	800fcf8 <_printf_common+0xb0>
 800fca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fca4:	4649      	mov	r1, r9
 800fca6:	4638      	mov	r0, r7
 800fca8:	47c0      	blx	r8
 800fcaa:	3001      	adds	r0, #1
 800fcac:	d01e      	beq.n	800fcec <_printf_common+0xa4>
 800fcae:	6823      	ldr	r3, [r4, #0]
 800fcb0:	6922      	ldr	r2, [r4, #16]
 800fcb2:	f003 0306 	and.w	r3, r3, #6
 800fcb6:	2b04      	cmp	r3, #4
 800fcb8:	bf02      	ittt	eq
 800fcba:	68e5      	ldreq	r5, [r4, #12]
 800fcbc:	6833      	ldreq	r3, [r6, #0]
 800fcbe:	1aed      	subeq	r5, r5, r3
 800fcc0:	68a3      	ldr	r3, [r4, #8]
 800fcc2:	bf0c      	ite	eq
 800fcc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcc8:	2500      	movne	r5, #0
 800fcca:	4293      	cmp	r3, r2
 800fccc:	bfc4      	itt	gt
 800fcce:	1a9b      	subgt	r3, r3, r2
 800fcd0:	18ed      	addgt	r5, r5, r3
 800fcd2:	2600      	movs	r6, #0
 800fcd4:	341a      	adds	r4, #26
 800fcd6:	42b5      	cmp	r5, r6
 800fcd8:	d11a      	bne.n	800fd10 <_printf_common+0xc8>
 800fcda:	2000      	movs	r0, #0
 800fcdc:	e008      	b.n	800fcf0 <_printf_common+0xa8>
 800fcde:	2301      	movs	r3, #1
 800fce0:	4652      	mov	r2, sl
 800fce2:	4649      	mov	r1, r9
 800fce4:	4638      	mov	r0, r7
 800fce6:	47c0      	blx	r8
 800fce8:	3001      	adds	r0, #1
 800fcea:	d103      	bne.n	800fcf4 <_printf_common+0xac>
 800fcec:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	e7c6      	b.n	800fc86 <_printf_common+0x3e>
 800fcf8:	18e1      	adds	r1, r4, r3
 800fcfa:	1c5a      	adds	r2, r3, #1
 800fcfc:	2030      	movs	r0, #48	; 0x30
 800fcfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd02:	4422      	add	r2, r4
 800fd04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd0c:	3302      	adds	r3, #2
 800fd0e:	e7c7      	b.n	800fca0 <_printf_common+0x58>
 800fd10:	2301      	movs	r3, #1
 800fd12:	4622      	mov	r2, r4
 800fd14:	4649      	mov	r1, r9
 800fd16:	4638      	mov	r0, r7
 800fd18:	47c0      	blx	r8
 800fd1a:	3001      	adds	r0, #1
 800fd1c:	d0e6      	beq.n	800fcec <_printf_common+0xa4>
 800fd1e:	3601      	adds	r6, #1
 800fd20:	e7d9      	b.n	800fcd6 <_printf_common+0x8e>
	...

0800fd24 <_printf_i>:
 800fd24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd28:	7e0f      	ldrb	r7, [r1, #24]
 800fd2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd2c:	2f78      	cmp	r7, #120	; 0x78
 800fd2e:	4691      	mov	r9, r2
 800fd30:	4680      	mov	r8, r0
 800fd32:	460c      	mov	r4, r1
 800fd34:	469a      	mov	sl, r3
 800fd36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd3a:	d807      	bhi.n	800fd4c <_printf_i+0x28>
 800fd3c:	2f62      	cmp	r7, #98	; 0x62
 800fd3e:	d80a      	bhi.n	800fd56 <_printf_i+0x32>
 800fd40:	2f00      	cmp	r7, #0
 800fd42:	f000 80d4 	beq.w	800feee <_printf_i+0x1ca>
 800fd46:	2f58      	cmp	r7, #88	; 0x58
 800fd48:	f000 80c0 	beq.w	800fecc <_printf_i+0x1a8>
 800fd4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd54:	e03a      	b.n	800fdcc <_printf_i+0xa8>
 800fd56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd5a:	2b15      	cmp	r3, #21
 800fd5c:	d8f6      	bhi.n	800fd4c <_printf_i+0x28>
 800fd5e:	a101      	add	r1, pc, #4	; (adr r1, 800fd64 <_printf_i+0x40>)
 800fd60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd64:	0800fdbd 	.word	0x0800fdbd
 800fd68:	0800fdd1 	.word	0x0800fdd1
 800fd6c:	0800fd4d 	.word	0x0800fd4d
 800fd70:	0800fd4d 	.word	0x0800fd4d
 800fd74:	0800fd4d 	.word	0x0800fd4d
 800fd78:	0800fd4d 	.word	0x0800fd4d
 800fd7c:	0800fdd1 	.word	0x0800fdd1
 800fd80:	0800fd4d 	.word	0x0800fd4d
 800fd84:	0800fd4d 	.word	0x0800fd4d
 800fd88:	0800fd4d 	.word	0x0800fd4d
 800fd8c:	0800fd4d 	.word	0x0800fd4d
 800fd90:	0800fed5 	.word	0x0800fed5
 800fd94:	0800fdfd 	.word	0x0800fdfd
 800fd98:	0800fe8f 	.word	0x0800fe8f
 800fd9c:	0800fd4d 	.word	0x0800fd4d
 800fda0:	0800fd4d 	.word	0x0800fd4d
 800fda4:	0800fef7 	.word	0x0800fef7
 800fda8:	0800fd4d 	.word	0x0800fd4d
 800fdac:	0800fdfd 	.word	0x0800fdfd
 800fdb0:	0800fd4d 	.word	0x0800fd4d
 800fdb4:	0800fd4d 	.word	0x0800fd4d
 800fdb8:	0800fe97 	.word	0x0800fe97
 800fdbc:	682b      	ldr	r3, [r5, #0]
 800fdbe:	1d1a      	adds	r2, r3, #4
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	602a      	str	r2, [r5, #0]
 800fdc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e09f      	b.n	800ff10 <_printf_i+0x1ec>
 800fdd0:	6820      	ldr	r0, [r4, #0]
 800fdd2:	682b      	ldr	r3, [r5, #0]
 800fdd4:	0607      	lsls	r7, r0, #24
 800fdd6:	f103 0104 	add.w	r1, r3, #4
 800fdda:	6029      	str	r1, [r5, #0]
 800fddc:	d501      	bpl.n	800fde2 <_printf_i+0xbe>
 800fdde:	681e      	ldr	r6, [r3, #0]
 800fde0:	e003      	b.n	800fdea <_printf_i+0xc6>
 800fde2:	0646      	lsls	r6, r0, #25
 800fde4:	d5fb      	bpl.n	800fdde <_printf_i+0xba>
 800fde6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fdea:	2e00      	cmp	r6, #0
 800fdec:	da03      	bge.n	800fdf6 <_printf_i+0xd2>
 800fdee:	232d      	movs	r3, #45	; 0x2d
 800fdf0:	4276      	negs	r6, r6
 800fdf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdf6:	485a      	ldr	r0, [pc, #360]	; (800ff60 <_printf_i+0x23c>)
 800fdf8:	230a      	movs	r3, #10
 800fdfa:	e012      	b.n	800fe22 <_printf_i+0xfe>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	6820      	ldr	r0, [r4, #0]
 800fe00:	1d19      	adds	r1, r3, #4
 800fe02:	6029      	str	r1, [r5, #0]
 800fe04:	0605      	lsls	r5, r0, #24
 800fe06:	d501      	bpl.n	800fe0c <_printf_i+0xe8>
 800fe08:	681e      	ldr	r6, [r3, #0]
 800fe0a:	e002      	b.n	800fe12 <_printf_i+0xee>
 800fe0c:	0641      	lsls	r1, r0, #25
 800fe0e:	d5fb      	bpl.n	800fe08 <_printf_i+0xe4>
 800fe10:	881e      	ldrh	r6, [r3, #0]
 800fe12:	4853      	ldr	r0, [pc, #332]	; (800ff60 <_printf_i+0x23c>)
 800fe14:	2f6f      	cmp	r7, #111	; 0x6f
 800fe16:	bf0c      	ite	eq
 800fe18:	2308      	moveq	r3, #8
 800fe1a:	230a      	movne	r3, #10
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe22:	6865      	ldr	r5, [r4, #4]
 800fe24:	60a5      	str	r5, [r4, #8]
 800fe26:	2d00      	cmp	r5, #0
 800fe28:	bfa2      	ittt	ge
 800fe2a:	6821      	ldrge	r1, [r4, #0]
 800fe2c:	f021 0104 	bicge.w	r1, r1, #4
 800fe30:	6021      	strge	r1, [r4, #0]
 800fe32:	b90e      	cbnz	r6, 800fe38 <_printf_i+0x114>
 800fe34:	2d00      	cmp	r5, #0
 800fe36:	d04b      	beq.n	800fed0 <_printf_i+0x1ac>
 800fe38:	4615      	mov	r5, r2
 800fe3a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe3e:	fb03 6711 	mls	r7, r3, r1, r6
 800fe42:	5dc7      	ldrb	r7, [r0, r7]
 800fe44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe48:	4637      	mov	r7, r6
 800fe4a:	42bb      	cmp	r3, r7
 800fe4c:	460e      	mov	r6, r1
 800fe4e:	d9f4      	bls.n	800fe3a <_printf_i+0x116>
 800fe50:	2b08      	cmp	r3, #8
 800fe52:	d10b      	bne.n	800fe6c <_printf_i+0x148>
 800fe54:	6823      	ldr	r3, [r4, #0]
 800fe56:	07de      	lsls	r6, r3, #31
 800fe58:	d508      	bpl.n	800fe6c <_printf_i+0x148>
 800fe5a:	6923      	ldr	r3, [r4, #16]
 800fe5c:	6861      	ldr	r1, [r4, #4]
 800fe5e:	4299      	cmp	r1, r3
 800fe60:	bfde      	ittt	le
 800fe62:	2330      	movle	r3, #48	; 0x30
 800fe64:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe68:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe6c:	1b52      	subs	r2, r2, r5
 800fe6e:	6122      	str	r2, [r4, #16]
 800fe70:	f8cd a000 	str.w	sl, [sp]
 800fe74:	464b      	mov	r3, r9
 800fe76:	aa03      	add	r2, sp, #12
 800fe78:	4621      	mov	r1, r4
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	f7ff fee4 	bl	800fc48 <_printf_common>
 800fe80:	3001      	adds	r0, #1
 800fe82:	d14a      	bne.n	800ff1a <_printf_i+0x1f6>
 800fe84:	f04f 30ff 	mov.w	r0, #4294967295
 800fe88:	b004      	add	sp, #16
 800fe8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	f043 0320 	orr.w	r3, r3, #32
 800fe94:	6023      	str	r3, [r4, #0]
 800fe96:	4833      	ldr	r0, [pc, #204]	; (800ff64 <_printf_i+0x240>)
 800fe98:	2778      	movs	r7, #120	; 0x78
 800fe9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe9e:	6823      	ldr	r3, [r4, #0]
 800fea0:	6829      	ldr	r1, [r5, #0]
 800fea2:	061f      	lsls	r7, r3, #24
 800fea4:	f851 6b04 	ldr.w	r6, [r1], #4
 800fea8:	d402      	bmi.n	800feb0 <_printf_i+0x18c>
 800feaa:	065f      	lsls	r7, r3, #25
 800feac:	bf48      	it	mi
 800feae:	b2b6      	uxthmi	r6, r6
 800feb0:	07df      	lsls	r7, r3, #31
 800feb2:	bf48      	it	mi
 800feb4:	f043 0320 	orrmi.w	r3, r3, #32
 800feb8:	6029      	str	r1, [r5, #0]
 800feba:	bf48      	it	mi
 800febc:	6023      	strmi	r3, [r4, #0]
 800febe:	b91e      	cbnz	r6, 800fec8 <_printf_i+0x1a4>
 800fec0:	6823      	ldr	r3, [r4, #0]
 800fec2:	f023 0320 	bic.w	r3, r3, #32
 800fec6:	6023      	str	r3, [r4, #0]
 800fec8:	2310      	movs	r3, #16
 800feca:	e7a7      	b.n	800fe1c <_printf_i+0xf8>
 800fecc:	4824      	ldr	r0, [pc, #144]	; (800ff60 <_printf_i+0x23c>)
 800fece:	e7e4      	b.n	800fe9a <_printf_i+0x176>
 800fed0:	4615      	mov	r5, r2
 800fed2:	e7bd      	b.n	800fe50 <_printf_i+0x12c>
 800fed4:	682b      	ldr	r3, [r5, #0]
 800fed6:	6826      	ldr	r6, [r4, #0]
 800fed8:	6961      	ldr	r1, [r4, #20]
 800feda:	1d18      	adds	r0, r3, #4
 800fedc:	6028      	str	r0, [r5, #0]
 800fede:	0635      	lsls	r5, r6, #24
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	d501      	bpl.n	800fee8 <_printf_i+0x1c4>
 800fee4:	6019      	str	r1, [r3, #0]
 800fee6:	e002      	b.n	800feee <_printf_i+0x1ca>
 800fee8:	0670      	lsls	r0, r6, #25
 800feea:	d5fb      	bpl.n	800fee4 <_printf_i+0x1c0>
 800feec:	8019      	strh	r1, [r3, #0]
 800feee:	2300      	movs	r3, #0
 800fef0:	6123      	str	r3, [r4, #16]
 800fef2:	4615      	mov	r5, r2
 800fef4:	e7bc      	b.n	800fe70 <_printf_i+0x14c>
 800fef6:	682b      	ldr	r3, [r5, #0]
 800fef8:	1d1a      	adds	r2, r3, #4
 800fefa:	602a      	str	r2, [r5, #0]
 800fefc:	681d      	ldr	r5, [r3, #0]
 800fefe:	6862      	ldr	r2, [r4, #4]
 800ff00:	2100      	movs	r1, #0
 800ff02:	4628      	mov	r0, r5
 800ff04:	f7f0 f984 	bl	8000210 <memchr>
 800ff08:	b108      	cbz	r0, 800ff0e <_printf_i+0x1ea>
 800ff0a:	1b40      	subs	r0, r0, r5
 800ff0c:	6060      	str	r0, [r4, #4]
 800ff0e:	6863      	ldr	r3, [r4, #4]
 800ff10:	6123      	str	r3, [r4, #16]
 800ff12:	2300      	movs	r3, #0
 800ff14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff18:	e7aa      	b.n	800fe70 <_printf_i+0x14c>
 800ff1a:	6923      	ldr	r3, [r4, #16]
 800ff1c:	462a      	mov	r2, r5
 800ff1e:	4649      	mov	r1, r9
 800ff20:	4640      	mov	r0, r8
 800ff22:	47d0      	blx	sl
 800ff24:	3001      	adds	r0, #1
 800ff26:	d0ad      	beq.n	800fe84 <_printf_i+0x160>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	079b      	lsls	r3, r3, #30
 800ff2c:	d413      	bmi.n	800ff56 <_printf_i+0x232>
 800ff2e:	68e0      	ldr	r0, [r4, #12]
 800ff30:	9b03      	ldr	r3, [sp, #12]
 800ff32:	4298      	cmp	r0, r3
 800ff34:	bfb8      	it	lt
 800ff36:	4618      	movlt	r0, r3
 800ff38:	e7a6      	b.n	800fe88 <_printf_i+0x164>
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	4632      	mov	r2, r6
 800ff3e:	4649      	mov	r1, r9
 800ff40:	4640      	mov	r0, r8
 800ff42:	47d0      	blx	sl
 800ff44:	3001      	adds	r0, #1
 800ff46:	d09d      	beq.n	800fe84 <_printf_i+0x160>
 800ff48:	3501      	adds	r5, #1
 800ff4a:	68e3      	ldr	r3, [r4, #12]
 800ff4c:	9903      	ldr	r1, [sp, #12]
 800ff4e:	1a5b      	subs	r3, r3, r1
 800ff50:	42ab      	cmp	r3, r5
 800ff52:	dcf2      	bgt.n	800ff3a <_printf_i+0x216>
 800ff54:	e7eb      	b.n	800ff2e <_printf_i+0x20a>
 800ff56:	2500      	movs	r5, #0
 800ff58:	f104 0619 	add.w	r6, r4, #25
 800ff5c:	e7f5      	b.n	800ff4a <_printf_i+0x226>
 800ff5e:	bf00      	nop
 800ff60:	08011214 	.word	0x08011214
 800ff64:	08011225 	.word	0x08011225

0800ff68 <__sflush_r>:
 800ff68:	898a      	ldrh	r2, [r1, #12]
 800ff6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff6e:	4605      	mov	r5, r0
 800ff70:	0710      	lsls	r0, r2, #28
 800ff72:	460c      	mov	r4, r1
 800ff74:	d458      	bmi.n	8010028 <__sflush_r+0xc0>
 800ff76:	684b      	ldr	r3, [r1, #4]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	dc05      	bgt.n	800ff88 <__sflush_r+0x20>
 800ff7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	dc02      	bgt.n	800ff88 <__sflush_r+0x20>
 800ff82:	2000      	movs	r0, #0
 800ff84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff8a:	2e00      	cmp	r6, #0
 800ff8c:	d0f9      	beq.n	800ff82 <__sflush_r+0x1a>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff94:	682f      	ldr	r7, [r5, #0]
 800ff96:	6a21      	ldr	r1, [r4, #32]
 800ff98:	602b      	str	r3, [r5, #0]
 800ff9a:	d032      	beq.n	8010002 <__sflush_r+0x9a>
 800ff9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff9e:	89a3      	ldrh	r3, [r4, #12]
 800ffa0:	075a      	lsls	r2, r3, #29
 800ffa2:	d505      	bpl.n	800ffb0 <__sflush_r+0x48>
 800ffa4:	6863      	ldr	r3, [r4, #4]
 800ffa6:	1ac0      	subs	r0, r0, r3
 800ffa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffaa:	b10b      	cbz	r3, 800ffb0 <__sflush_r+0x48>
 800ffac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffae:	1ac0      	subs	r0, r0, r3
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffb6:	6a21      	ldr	r1, [r4, #32]
 800ffb8:	4628      	mov	r0, r5
 800ffba:	47b0      	blx	r6
 800ffbc:	1c43      	adds	r3, r0, #1
 800ffbe:	89a3      	ldrh	r3, [r4, #12]
 800ffc0:	d106      	bne.n	800ffd0 <__sflush_r+0x68>
 800ffc2:	6829      	ldr	r1, [r5, #0]
 800ffc4:	291d      	cmp	r1, #29
 800ffc6:	d82b      	bhi.n	8010020 <__sflush_r+0xb8>
 800ffc8:	4a29      	ldr	r2, [pc, #164]	; (8010070 <__sflush_r+0x108>)
 800ffca:	410a      	asrs	r2, r1
 800ffcc:	07d6      	lsls	r6, r2, #31
 800ffce:	d427      	bmi.n	8010020 <__sflush_r+0xb8>
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	6062      	str	r2, [r4, #4]
 800ffd4:	04d9      	lsls	r1, r3, #19
 800ffd6:	6922      	ldr	r2, [r4, #16]
 800ffd8:	6022      	str	r2, [r4, #0]
 800ffda:	d504      	bpl.n	800ffe6 <__sflush_r+0x7e>
 800ffdc:	1c42      	adds	r2, r0, #1
 800ffde:	d101      	bne.n	800ffe4 <__sflush_r+0x7c>
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	b903      	cbnz	r3, 800ffe6 <__sflush_r+0x7e>
 800ffe4:	6560      	str	r0, [r4, #84]	; 0x54
 800ffe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffe8:	602f      	str	r7, [r5, #0]
 800ffea:	2900      	cmp	r1, #0
 800ffec:	d0c9      	beq.n	800ff82 <__sflush_r+0x1a>
 800ffee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fff2:	4299      	cmp	r1, r3
 800fff4:	d002      	beq.n	800fffc <__sflush_r+0x94>
 800fff6:	4628      	mov	r0, r5
 800fff8:	f7ff fbce 	bl	800f798 <_free_r>
 800fffc:	2000      	movs	r0, #0
 800fffe:	6360      	str	r0, [r4, #52]	; 0x34
 8010000:	e7c0      	b.n	800ff84 <__sflush_r+0x1c>
 8010002:	2301      	movs	r3, #1
 8010004:	4628      	mov	r0, r5
 8010006:	47b0      	blx	r6
 8010008:	1c41      	adds	r1, r0, #1
 801000a:	d1c8      	bne.n	800ff9e <__sflush_r+0x36>
 801000c:	682b      	ldr	r3, [r5, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d0c5      	beq.n	800ff9e <__sflush_r+0x36>
 8010012:	2b1d      	cmp	r3, #29
 8010014:	d001      	beq.n	801001a <__sflush_r+0xb2>
 8010016:	2b16      	cmp	r3, #22
 8010018:	d101      	bne.n	801001e <__sflush_r+0xb6>
 801001a:	602f      	str	r7, [r5, #0]
 801001c:	e7b1      	b.n	800ff82 <__sflush_r+0x1a>
 801001e:	89a3      	ldrh	r3, [r4, #12]
 8010020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010024:	81a3      	strh	r3, [r4, #12]
 8010026:	e7ad      	b.n	800ff84 <__sflush_r+0x1c>
 8010028:	690f      	ldr	r7, [r1, #16]
 801002a:	2f00      	cmp	r7, #0
 801002c:	d0a9      	beq.n	800ff82 <__sflush_r+0x1a>
 801002e:	0793      	lsls	r3, r2, #30
 8010030:	680e      	ldr	r6, [r1, #0]
 8010032:	bf08      	it	eq
 8010034:	694b      	ldreq	r3, [r1, #20]
 8010036:	600f      	str	r7, [r1, #0]
 8010038:	bf18      	it	ne
 801003a:	2300      	movne	r3, #0
 801003c:	eba6 0807 	sub.w	r8, r6, r7
 8010040:	608b      	str	r3, [r1, #8]
 8010042:	f1b8 0f00 	cmp.w	r8, #0
 8010046:	dd9c      	ble.n	800ff82 <__sflush_r+0x1a>
 8010048:	6a21      	ldr	r1, [r4, #32]
 801004a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801004c:	4643      	mov	r3, r8
 801004e:	463a      	mov	r2, r7
 8010050:	4628      	mov	r0, r5
 8010052:	47b0      	blx	r6
 8010054:	2800      	cmp	r0, #0
 8010056:	dc06      	bgt.n	8010066 <__sflush_r+0xfe>
 8010058:	89a3      	ldrh	r3, [r4, #12]
 801005a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801005e:	81a3      	strh	r3, [r4, #12]
 8010060:	f04f 30ff 	mov.w	r0, #4294967295
 8010064:	e78e      	b.n	800ff84 <__sflush_r+0x1c>
 8010066:	4407      	add	r7, r0
 8010068:	eba8 0800 	sub.w	r8, r8, r0
 801006c:	e7e9      	b.n	8010042 <__sflush_r+0xda>
 801006e:	bf00      	nop
 8010070:	dfbffffe 	.word	0xdfbffffe

08010074 <_fflush_r>:
 8010074:	b538      	push	{r3, r4, r5, lr}
 8010076:	690b      	ldr	r3, [r1, #16]
 8010078:	4605      	mov	r5, r0
 801007a:	460c      	mov	r4, r1
 801007c:	b913      	cbnz	r3, 8010084 <_fflush_r+0x10>
 801007e:	2500      	movs	r5, #0
 8010080:	4628      	mov	r0, r5
 8010082:	bd38      	pop	{r3, r4, r5, pc}
 8010084:	b118      	cbz	r0, 801008e <_fflush_r+0x1a>
 8010086:	6a03      	ldr	r3, [r0, #32]
 8010088:	b90b      	cbnz	r3, 801008e <_fflush_r+0x1a>
 801008a:	f7ff f9dd 	bl	800f448 <__sinit>
 801008e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d0f3      	beq.n	801007e <_fflush_r+0xa>
 8010096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010098:	07d0      	lsls	r0, r2, #31
 801009a:	d404      	bmi.n	80100a6 <_fflush_r+0x32>
 801009c:	0599      	lsls	r1, r3, #22
 801009e:	d402      	bmi.n	80100a6 <_fflush_r+0x32>
 80100a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100a2:	f7ff fb51 	bl	800f748 <__retarget_lock_acquire_recursive>
 80100a6:	4628      	mov	r0, r5
 80100a8:	4621      	mov	r1, r4
 80100aa:	f7ff ff5d 	bl	800ff68 <__sflush_r>
 80100ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100b0:	07da      	lsls	r2, r3, #31
 80100b2:	4605      	mov	r5, r0
 80100b4:	d4e4      	bmi.n	8010080 <_fflush_r+0xc>
 80100b6:	89a3      	ldrh	r3, [r4, #12]
 80100b8:	059b      	lsls	r3, r3, #22
 80100ba:	d4e1      	bmi.n	8010080 <_fflush_r+0xc>
 80100bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100be:	f7ff fb44 	bl	800f74a <__retarget_lock_release_recursive>
 80100c2:	e7dd      	b.n	8010080 <_fflush_r+0xc>

080100c4 <fiprintf>:
 80100c4:	b40e      	push	{r1, r2, r3}
 80100c6:	b503      	push	{r0, r1, lr}
 80100c8:	4601      	mov	r1, r0
 80100ca:	ab03      	add	r3, sp, #12
 80100cc:	4805      	ldr	r0, [pc, #20]	; (80100e4 <fiprintf+0x20>)
 80100ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80100d2:	6800      	ldr	r0, [r0, #0]
 80100d4:	9301      	str	r3, [sp, #4]
 80100d6:	f000 f89f 	bl	8010218 <_vfiprintf_r>
 80100da:	b002      	add	sp, #8
 80100dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80100e0:	b003      	add	sp, #12
 80100e2:	4770      	bx	lr
 80100e4:	20000174 	.word	0x20000174

080100e8 <memmove>:
 80100e8:	4288      	cmp	r0, r1
 80100ea:	b510      	push	{r4, lr}
 80100ec:	eb01 0402 	add.w	r4, r1, r2
 80100f0:	d902      	bls.n	80100f8 <memmove+0x10>
 80100f2:	4284      	cmp	r4, r0
 80100f4:	4623      	mov	r3, r4
 80100f6:	d807      	bhi.n	8010108 <memmove+0x20>
 80100f8:	1e43      	subs	r3, r0, #1
 80100fa:	42a1      	cmp	r1, r4
 80100fc:	d008      	beq.n	8010110 <memmove+0x28>
 80100fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010102:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010106:	e7f8      	b.n	80100fa <memmove+0x12>
 8010108:	4402      	add	r2, r0
 801010a:	4601      	mov	r1, r0
 801010c:	428a      	cmp	r2, r1
 801010e:	d100      	bne.n	8010112 <memmove+0x2a>
 8010110:	bd10      	pop	{r4, pc}
 8010112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801011a:	e7f7      	b.n	801010c <memmove+0x24>

0801011c <_sbrk_r>:
 801011c:	b538      	push	{r3, r4, r5, lr}
 801011e:	4d06      	ldr	r5, [pc, #24]	; (8010138 <_sbrk_r+0x1c>)
 8010120:	2300      	movs	r3, #0
 8010122:	4604      	mov	r4, r0
 8010124:	4608      	mov	r0, r1
 8010126:	602b      	str	r3, [r5, #0]
 8010128:	f7f2 fc70 	bl	8002a0c <_sbrk>
 801012c:	1c43      	adds	r3, r0, #1
 801012e:	d102      	bne.n	8010136 <_sbrk_r+0x1a>
 8010130:	682b      	ldr	r3, [r5, #0]
 8010132:	b103      	cbz	r3, 8010136 <_sbrk_r+0x1a>
 8010134:	6023      	str	r3, [r4, #0]
 8010136:	bd38      	pop	{r3, r4, r5, pc}
 8010138:	200041a4 	.word	0x200041a4

0801013c <memcpy>:
 801013c:	440a      	add	r2, r1
 801013e:	4291      	cmp	r1, r2
 8010140:	f100 33ff 	add.w	r3, r0, #4294967295
 8010144:	d100      	bne.n	8010148 <memcpy+0xc>
 8010146:	4770      	bx	lr
 8010148:	b510      	push	{r4, lr}
 801014a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801014e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010152:	4291      	cmp	r1, r2
 8010154:	d1f9      	bne.n	801014a <memcpy+0xe>
 8010156:	bd10      	pop	{r4, pc}

08010158 <abort>:
 8010158:	b508      	push	{r3, lr}
 801015a:	2006      	movs	r0, #6
 801015c:	f000 fa34 	bl	80105c8 <raise>
 8010160:	2001      	movs	r0, #1
 8010162:	f7f2 fbdb 	bl	800291c <_exit>

08010166 <_realloc_r>:
 8010166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016a:	4680      	mov	r8, r0
 801016c:	4614      	mov	r4, r2
 801016e:	460e      	mov	r6, r1
 8010170:	b921      	cbnz	r1, 801017c <_realloc_r+0x16>
 8010172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010176:	4611      	mov	r1, r2
 8010178:	f7ff bb82 	b.w	800f880 <_malloc_r>
 801017c:	b92a      	cbnz	r2, 801018a <_realloc_r+0x24>
 801017e:	f7ff fb0b 	bl	800f798 <_free_r>
 8010182:	4625      	mov	r5, r4
 8010184:	4628      	mov	r0, r5
 8010186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801018a:	f000 fa39 	bl	8010600 <_malloc_usable_size_r>
 801018e:	4284      	cmp	r4, r0
 8010190:	4607      	mov	r7, r0
 8010192:	d802      	bhi.n	801019a <_realloc_r+0x34>
 8010194:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010198:	d812      	bhi.n	80101c0 <_realloc_r+0x5a>
 801019a:	4621      	mov	r1, r4
 801019c:	4640      	mov	r0, r8
 801019e:	f7ff fb6f 	bl	800f880 <_malloc_r>
 80101a2:	4605      	mov	r5, r0
 80101a4:	2800      	cmp	r0, #0
 80101a6:	d0ed      	beq.n	8010184 <_realloc_r+0x1e>
 80101a8:	42bc      	cmp	r4, r7
 80101aa:	4622      	mov	r2, r4
 80101ac:	4631      	mov	r1, r6
 80101ae:	bf28      	it	cs
 80101b0:	463a      	movcs	r2, r7
 80101b2:	f7ff ffc3 	bl	801013c <memcpy>
 80101b6:	4631      	mov	r1, r6
 80101b8:	4640      	mov	r0, r8
 80101ba:	f7ff faed 	bl	800f798 <_free_r>
 80101be:	e7e1      	b.n	8010184 <_realloc_r+0x1e>
 80101c0:	4635      	mov	r5, r6
 80101c2:	e7df      	b.n	8010184 <_realloc_r+0x1e>

080101c4 <__sfputc_r>:
 80101c4:	6893      	ldr	r3, [r2, #8]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	b410      	push	{r4}
 80101cc:	6093      	str	r3, [r2, #8]
 80101ce:	da08      	bge.n	80101e2 <__sfputc_r+0x1e>
 80101d0:	6994      	ldr	r4, [r2, #24]
 80101d2:	42a3      	cmp	r3, r4
 80101d4:	db01      	blt.n	80101da <__sfputc_r+0x16>
 80101d6:	290a      	cmp	r1, #10
 80101d8:	d103      	bne.n	80101e2 <__sfputc_r+0x1e>
 80101da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101de:	f000 b935 	b.w	801044c <__swbuf_r>
 80101e2:	6813      	ldr	r3, [r2, #0]
 80101e4:	1c58      	adds	r0, r3, #1
 80101e6:	6010      	str	r0, [r2, #0]
 80101e8:	7019      	strb	r1, [r3, #0]
 80101ea:	4608      	mov	r0, r1
 80101ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101f0:	4770      	bx	lr

080101f2 <__sfputs_r>:
 80101f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101f4:	4606      	mov	r6, r0
 80101f6:	460f      	mov	r7, r1
 80101f8:	4614      	mov	r4, r2
 80101fa:	18d5      	adds	r5, r2, r3
 80101fc:	42ac      	cmp	r4, r5
 80101fe:	d101      	bne.n	8010204 <__sfputs_r+0x12>
 8010200:	2000      	movs	r0, #0
 8010202:	e007      	b.n	8010214 <__sfputs_r+0x22>
 8010204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010208:	463a      	mov	r2, r7
 801020a:	4630      	mov	r0, r6
 801020c:	f7ff ffda 	bl	80101c4 <__sfputc_r>
 8010210:	1c43      	adds	r3, r0, #1
 8010212:	d1f3      	bne.n	80101fc <__sfputs_r+0xa>
 8010214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010218 <_vfiprintf_r>:
 8010218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021c:	460d      	mov	r5, r1
 801021e:	b09d      	sub	sp, #116	; 0x74
 8010220:	4614      	mov	r4, r2
 8010222:	4698      	mov	r8, r3
 8010224:	4606      	mov	r6, r0
 8010226:	b118      	cbz	r0, 8010230 <_vfiprintf_r+0x18>
 8010228:	6a03      	ldr	r3, [r0, #32]
 801022a:	b90b      	cbnz	r3, 8010230 <_vfiprintf_r+0x18>
 801022c:	f7ff f90c 	bl	800f448 <__sinit>
 8010230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010232:	07d9      	lsls	r1, r3, #31
 8010234:	d405      	bmi.n	8010242 <_vfiprintf_r+0x2a>
 8010236:	89ab      	ldrh	r3, [r5, #12]
 8010238:	059a      	lsls	r2, r3, #22
 801023a:	d402      	bmi.n	8010242 <_vfiprintf_r+0x2a>
 801023c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801023e:	f7ff fa83 	bl	800f748 <__retarget_lock_acquire_recursive>
 8010242:	89ab      	ldrh	r3, [r5, #12]
 8010244:	071b      	lsls	r3, r3, #28
 8010246:	d501      	bpl.n	801024c <_vfiprintf_r+0x34>
 8010248:	692b      	ldr	r3, [r5, #16]
 801024a:	b99b      	cbnz	r3, 8010274 <_vfiprintf_r+0x5c>
 801024c:	4629      	mov	r1, r5
 801024e:	4630      	mov	r0, r6
 8010250:	f000 f93a 	bl	80104c8 <__swsetup_r>
 8010254:	b170      	cbz	r0, 8010274 <_vfiprintf_r+0x5c>
 8010256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010258:	07dc      	lsls	r4, r3, #31
 801025a:	d504      	bpl.n	8010266 <_vfiprintf_r+0x4e>
 801025c:	f04f 30ff 	mov.w	r0, #4294967295
 8010260:	b01d      	add	sp, #116	; 0x74
 8010262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010266:	89ab      	ldrh	r3, [r5, #12]
 8010268:	0598      	lsls	r0, r3, #22
 801026a:	d4f7      	bmi.n	801025c <_vfiprintf_r+0x44>
 801026c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801026e:	f7ff fa6c 	bl	800f74a <__retarget_lock_release_recursive>
 8010272:	e7f3      	b.n	801025c <_vfiprintf_r+0x44>
 8010274:	2300      	movs	r3, #0
 8010276:	9309      	str	r3, [sp, #36]	; 0x24
 8010278:	2320      	movs	r3, #32
 801027a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801027e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010282:	2330      	movs	r3, #48	; 0x30
 8010284:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010438 <_vfiprintf_r+0x220>
 8010288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801028c:	f04f 0901 	mov.w	r9, #1
 8010290:	4623      	mov	r3, r4
 8010292:	469a      	mov	sl, r3
 8010294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010298:	b10a      	cbz	r2, 801029e <_vfiprintf_r+0x86>
 801029a:	2a25      	cmp	r2, #37	; 0x25
 801029c:	d1f9      	bne.n	8010292 <_vfiprintf_r+0x7a>
 801029e:	ebba 0b04 	subs.w	fp, sl, r4
 80102a2:	d00b      	beq.n	80102bc <_vfiprintf_r+0xa4>
 80102a4:	465b      	mov	r3, fp
 80102a6:	4622      	mov	r2, r4
 80102a8:	4629      	mov	r1, r5
 80102aa:	4630      	mov	r0, r6
 80102ac:	f7ff ffa1 	bl	80101f2 <__sfputs_r>
 80102b0:	3001      	adds	r0, #1
 80102b2:	f000 80a9 	beq.w	8010408 <_vfiprintf_r+0x1f0>
 80102b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102b8:	445a      	add	r2, fp
 80102ba:	9209      	str	r2, [sp, #36]	; 0x24
 80102bc:	f89a 3000 	ldrb.w	r3, [sl]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	f000 80a1 	beq.w	8010408 <_vfiprintf_r+0x1f0>
 80102c6:	2300      	movs	r3, #0
 80102c8:	f04f 32ff 	mov.w	r2, #4294967295
 80102cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102d0:	f10a 0a01 	add.w	sl, sl, #1
 80102d4:	9304      	str	r3, [sp, #16]
 80102d6:	9307      	str	r3, [sp, #28]
 80102d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102dc:	931a      	str	r3, [sp, #104]	; 0x68
 80102de:	4654      	mov	r4, sl
 80102e0:	2205      	movs	r2, #5
 80102e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102e6:	4854      	ldr	r0, [pc, #336]	; (8010438 <_vfiprintf_r+0x220>)
 80102e8:	f7ef ff92 	bl	8000210 <memchr>
 80102ec:	9a04      	ldr	r2, [sp, #16]
 80102ee:	b9d8      	cbnz	r0, 8010328 <_vfiprintf_r+0x110>
 80102f0:	06d1      	lsls	r1, r2, #27
 80102f2:	bf44      	itt	mi
 80102f4:	2320      	movmi	r3, #32
 80102f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102fa:	0713      	lsls	r3, r2, #28
 80102fc:	bf44      	itt	mi
 80102fe:	232b      	movmi	r3, #43	; 0x2b
 8010300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010304:	f89a 3000 	ldrb.w	r3, [sl]
 8010308:	2b2a      	cmp	r3, #42	; 0x2a
 801030a:	d015      	beq.n	8010338 <_vfiprintf_r+0x120>
 801030c:	9a07      	ldr	r2, [sp, #28]
 801030e:	4654      	mov	r4, sl
 8010310:	2000      	movs	r0, #0
 8010312:	f04f 0c0a 	mov.w	ip, #10
 8010316:	4621      	mov	r1, r4
 8010318:	f811 3b01 	ldrb.w	r3, [r1], #1
 801031c:	3b30      	subs	r3, #48	; 0x30
 801031e:	2b09      	cmp	r3, #9
 8010320:	d94d      	bls.n	80103be <_vfiprintf_r+0x1a6>
 8010322:	b1b0      	cbz	r0, 8010352 <_vfiprintf_r+0x13a>
 8010324:	9207      	str	r2, [sp, #28]
 8010326:	e014      	b.n	8010352 <_vfiprintf_r+0x13a>
 8010328:	eba0 0308 	sub.w	r3, r0, r8
 801032c:	fa09 f303 	lsl.w	r3, r9, r3
 8010330:	4313      	orrs	r3, r2
 8010332:	9304      	str	r3, [sp, #16]
 8010334:	46a2      	mov	sl, r4
 8010336:	e7d2      	b.n	80102de <_vfiprintf_r+0xc6>
 8010338:	9b03      	ldr	r3, [sp, #12]
 801033a:	1d19      	adds	r1, r3, #4
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	9103      	str	r1, [sp, #12]
 8010340:	2b00      	cmp	r3, #0
 8010342:	bfbb      	ittet	lt
 8010344:	425b      	neglt	r3, r3
 8010346:	f042 0202 	orrlt.w	r2, r2, #2
 801034a:	9307      	strge	r3, [sp, #28]
 801034c:	9307      	strlt	r3, [sp, #28]
 801034e:	bfb8      	it	lt
 8010350:	9204      	strlt	r2, [sp, #16]
 8010352:	7823      	ldrb	r3, [r4, #0]
 8010354:	2b2e      	cmp	r3, #46	; 0x2e
 8010356:	d10c      	bne.n	8010372 <_vfiprintf_r+0x15a>
 8010358:	7863      	ldrb	r3, [r4, #1]
 801035a:	2b2a      	cmp	r3, #42	; 0x2a
 801035c:	d134      	bne.n	80103c8 <_vfiprintf_r+0x1b0>
 801035e:	9b03      	ldr	r3, [sp, #12]
 8010360:	1d1a      	adds	r2, r3, #4
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	9203      	str	r2, [sp, #12]
 8010366:	2b00      	cmp	r3, #0
 8010368:	bfb8      	it	lt
 801036a:	f04f 33ff 	movlt.w	r3, #4294967295
 801036e:	3402      	adds	r4, #2
 8010370:	9305      	str	r3, [sp, #20]
 8010372:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010448 <_vfiprintf_r+0x230>
 8010376:	7821      	ldrb	r1, [r4, #0]
 8010378:	2203      	movs	r2, #3
 801037a:	4650      	mov	r0, sl
 801037c:	f7ef ff48 	bl	8000210 <memchr>
 8010380:	b138      	cbz	r0, 8010392 <_vfiprintf_r+0x17a>
 8010382:	9b04      	ldr	r3, [sp, #16]
 8010384:	eba0 000a 	sub.w	r0, r0, sl
 8010388:	2240      	movs	r2, #64	; 0x40
 801038a:	4082      	lsls	r2, r0
 801038c:	4313      	orrs	r3, r2
 801038e:	3401      	adds	r4, #1
 8010390:	9304      	str	r3, [sp, #16]
 8010392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010396:	4829      	ldr	r0, [pc, #164]	; (801043c <_vfiprintf_r+0x224>)
 8010398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801039c:	2206      	movs	r2, #6
 801039e:	f7ef ff37 	bl	8000210 <memchr>
 80103a2:	2800      	cmp	r0, #0
 80103a4:	d03f      	beq.n	8010426 <_vfiprintf_r+0x20e>
 80103a6:	4b26      	ldr	r3, [pc, #152]	; (8010440 <_vfiprintf_r+0x228>)
 80103a8:	bb1b      	cbnz	r3, 80103f2 <_vfiprintf_r+0x1da>
 80103aa:	9b03      	ldr	r3, [sp, #12]
 80103ac:	3307      	adds	r3, #7
 80103ae:	f023 0307 	bic.w	r3, r3, #7
 80103b2:	3308      	adds	r3, #8
 80103b4:	9303      	str	r3, [sp, #12]
 80103b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103b8:	443b      	add	r3, r7
 80103ba:	9309      	str	r3, [sp, #36]	; 0x24
 80103bc:	e768      	b.n	8010290 <_vfiprintf_r+0x78>
 80103be:	fb0c 3202 	mla	r2, ip, r2, r3
 80103c2:	460c      	mov	r4, r1
 80103c4:	2001      	movs	r0, #1
 80103c6:	e7a6      	b.n	8010316 <_vfiprintf_r+0xfe>
 80103c8:	2300      	movs	r3, #0
 80103ca:	3401      	adds	r4, #1
 80103cc:	9305      	str	r3, [sp, #20]
 80103ce:	4619      	mov	r1, r3
 80103d0:	f04f 0c0a 	mov.w	ip, #10
 80103d4:	4620      	mov	r0, r4
 80103d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103da:	3a30      	subs	r2, #48	; 0x30
 80103dc:	2a09      	cmp	r2, #9
 80103de:	d903      	bls.n	80103e8 <_vfiprintf_r+0x1d0>
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d0c6      	beq.n	8010372 <_vfiprintf_r+0x15a>
 80103e4:	9105      	str	r1, [sp, #20]
 80103e6:	e7c4      	b.n	8010372 <_vfiprintf_r+0x15a>
 80103e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80103ec:	4604      	mov	r4, r0
 80103ee:	2301      	movs	r3, #1
 80103f0:	e7f0      	b.n	80103d4 <_vfiprintf_r+0x1bc>
 80103f2:	ab03      	add	r3, sp, #12
 80103f4:	9300      	str	r3, [sp, #0]
 80103f6:	462a      	mov	r2, r5
 80103f8:	4b12      	ldr	r3, [pc, #72]	; (8010444 <_vfiprintf_r+0x22c>)
 80103fa:	a904      	add	r1, sp, #16
 80103fc:	4630      	mov	r0, r6
 80103fe:	f3af 8000 	nop.w
 8010402:	4607      	mov	r7, r0
 8010404:	1c78      	adds	r0, r7, #1
 8010406:	d1d6      	bne.n	80103b6 <_vfiprintf_r+0x19e>
 8010408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801040a:	07d9      	lsls	r1, r3, #31
 801040c:	d405      	bmi.n	801041a <_vfiprintf_r+0x202>
 801040e:	89ab      	ldrh	r3, [r5, #12]
 8010410:	059a      	lsls	r2, r3, #22
 8010412:	d402      	bmi.n	801041a <_vfiprintf_r+0x202>
 8010414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010416:	f7ff f998 	bl	800f74a <__retarget_lock_release_recursive>
 801041a:	89ab      	ldrh	r3, [r5, #12]
 801041c:	065b      	lsls	r3, r3, #25
 801041e:	f53f af1d 	bmi.w	801025c <_vfiprintf_r+0x44>
 8010422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010424:	e71c      	b.n	8010260 <_vfiprintf_r+0x48>
 8010426:	ab03      	add	r3, sp, #12
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	462a      	mov	r2, r5
 801042c:	4b05      	ldr	r3, [pc, #20]	; (8010444 <_vfiprintf_r+0x22c>)
 801042e:	a904      	add	r1, sp, #16
 8010430:	4630      	mov	r0, r6
 8010432:	f7ff fc77 	bl	800fd24 <_printf_i>
 8010436:	e7e4      	b.n	8010402 <_vfiprintf_r+0x1ea>
 8010438:	08011203 	.word	0x08011203
 801043c:	0801120d 	.word	0x0801120d
 8010440:	00000000 	.word	0x00000000
 8010444:	080101f3 	.word	0x080101f3
 8010448:	08011209 	.word	0x08011209

0801044c <__swbuf_r>:
 801044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801044e:	460e      	mov	r6, r1
 8010450:	4614      	mov	r4, r2
 8010452:	4605      	mov	r5, r0
 8010454:	b118      	cbz	r0, 801045e <__swbuf_r+0x12>
 8010456:	6a03      	ldr	r3, [r0, #32]
 8010458:	b90b      	cbnz	r3, 801045e <__swbuf_r+0x12>
 801045a:	f7fe fff5 	bl	800f448 <__sinit>
 801045e:	69a3      	ldr	r3, [r4, #24]
 8010460:	60a3      	str	r3, [r4, #8]
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	071a      	lsls	r2, r3, #28
 8010466:	d525      	bpl.n	80104b4 <__swbuf_r+0x68>
 8010468:	6923      	ldr	r3, [r4, #16]
 801046a:	b31b      	cbz	r3, 80104b4 <__swbuf_r+0x68>
 801046c:	6823      	ldr	r3, [r4, #0]
 801046e:	6922      	ldr	r2, [r4, #16]
 8010470:	1a98      	subs	r0, r3, r2
 8010472:	6963      	ldr	r3, [r4, #20]
 8010474:	b2f6      	uxtb	r6, r6
 8010476:	4283      	cmp	r3, r0
 8010478:	4637      	mov	r7, r6
 801047a:	dc04      	bgt.n	8010486 <__swbuf_r+0x3a>
 801047c:	4621      	mov	r1, r4
 801047e:	4628      	mov	r0, r5
 8010480:	f7ff fdf8 	bl	8010074 <_fflush_r>
 8010484:	b9e0      	cbnz	r0, 80104c0 <__swbuf_r+0x74>
 8010486:	68a3      	ldr	r3, [r4, #8]
 8010488:	3b01      	subs	r3, #1
 801048a:	60a3      	str	r3, [r4, #8]
 801048c:	6823      	ldr	r3, [r4, #0]
 801048e:	1c5a      	adds	r2, r3, #1
 8010490:	6022      	str	r2, [r4, #0]
 8010492:	701e      	strb	r6, [r3, #0]
 8010494:	6962      	ldr	r2, [r4, #20]
 8010496:	1c43      	adds	r3, r0, #1
 8010498:	429a      	cmp	r2, r3
 801049a:	d004      	beq.n	80104a6 <__swbuf_r+0x5a>
 801049c:	89a3      	ldrh	r3, [r4, #12]
 801049e:	07db      	lsls	r3, r3, #31
 80104a0:	d506      	bpl.n	80104b0 <__swbuf_r+0x64>
 80104a2:	2e0a      	cmp	r6, #10
 80104a4:	d104      	bne.n	80104b0 <__swbuf_r+0x64>
 80104a6:	4621      	mov	r1, r4
 80104a8:	4628      	mov	r0, r5
 80104aa:	f7ff fde3 	bl	8010074 <_fflush_r>
 80104ae:	b938      	cbnz	r0, 80104c0 <__swbuf_r+0x74>
 80104b0:	4638      	mov	r0, r7
 80104b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104b4:	4621      	mov	r1, r4
 80104b6:	4628      	mov	r0, r5
 80104b8:	f000 f806 	bl	80104c8 <__swsetup_r>
 80104bc:	2800      	cmp	r0, #0
 80104be:	d0d5      	beq.n	801046c <__swbuf_r+0x20>
 80104c0:	f04f 37ff 	mov.w	r7, #4294967295
 80104c4:	e7f4      	b.n	80104b0 <__swbuf_r+0x64>
	...

080104c8 <__swsetup_r>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	4b2a      	ldr	r3, [pc, #168]	; (8010574 <__swsetup_r+0xac>)
 80104cc:	4605      	mov	r5, r0
 80104ce:	6818      	ldr	r0, [r3, #0]
 80104d0:	460c      	mov	r4, r1
 80104d2:	b118      	cbz	r0, 80104dc <__swsetup_r+0x14>
 80104d4:	6a03      	ldr	r3, [r0, #32]
 80104d6:	b90b      	cbnz	r3, 80104dc <__swsetup_r+0x14>
 80104d8:	f7fe ffb6 	bl	800f448 <__sinit>
 80104dc:	89a3      	ldrh	r3, [r4, #12]
 80104de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104e2:	0718      	lsls	r0, r3, #28
 80104e4:	d422      	bmi.n	801052c <__swsetup_r+0x64>
 80104e6:	06d9      	lsls	r1, r3, #27
 80104e8:	d407      	bmi.n	80104fa <__swsetup_r+0x32>
 80104ea:	2309      	movs	r3, #9
 80104ec:	602b      	str	r3, [r5, #0]
 80104ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80104f2:	81a3      	strh	r3, [r4, #12]
 80104f4:	f04f 30ff 	mov.w	r0, #4294967295
 80104f8:	e034      	b.n	8010564 <__swsetup_r+0x9c>
 80104fa:	0758      	lsls	r0, r3, #29
 80104fc:	d512      	bpl.n	8010524 <__swsetup_r+0x5c>
 80104fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010500:	b141      	cbz	r1, 8010514 <__swsetup_r+0x4c>
 8010502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010506:	4299      	cmp	r1, r3
 8010508:	d002      	beq.n	8010510 <__swsetup_r+0x48>
 801050a:	4628      	mov	r0, r5
 801050c:	f7ff f944 	bl	800f798 <_free_r>
 8010510:	2300      	movs	r3, #0
 8010512:	6363      	str	r3, [r4, #52]	; 0x34
 8010514:	89a3      	ldrh	r3, [r4, #12]
 8010516:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801051a:	81a3      	strh	r3, [r4, #12]
 801051c:	2300      	movs	r3, #0
 801051e:	6063      	str	r3, [r4, #4]
 8010520:	6923      	ldr	r3, [r4, #16]
 8010522:	6023      	str	r3, [r4, #0]
 8010524:	89a3      	ldrh	r3, [r4, #12]
 8010526:	f043 0308 	orr.w	r3, r3, #8
 801052a:	81a3      	strh	r3, [r4, #12]
 801052c:	6923      	ldr	r3, [r4, #16]
 801052e:	b94b      	cbnz	r3, 8010544 <__swsetup_r+0x7c>
 8010530:	89a3      	ldrh	r3, [r4, #12]
 8010532:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801053a:	d003      	beq.n	8010544 <__swsetup_r+0x7c>
 801053c:	4621      	mov	r1, r4
 801053e:	4628      	mov	r0, r5
 8010540:	f000 f88c 	bl	801065c <__smakebuf_r>
 8010544:	89a0      	ldrh	r0, [r4, #12]
 8010546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801054a:	f010 0301 	ands.w	r3, r0, #1
 801054e:	d00a      	beq.n	8010566 <__swsetup_r+0x9e>
 8010550:	2300      	movs	r3, #0
 8010552:	60a3      	str	r3, [r4, #8]
 8010554:	6963      	ldr	r3, [r4, #20]
 8010556:	425b      	negs	r3, r3
 8010558:	61a3      	str	r3, [r4, #24]
 801055a:	6923      	ldr	r3, [r4, #16]
 801055c:	b943      	cbnz	r3, 8010570 <__swsetup_r+0xa8>
 801055e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010562:	d1c4      	bne.n	80104ee <__swsetup_r+0x26>
 8010564:	bd38      	pop	{r3, r4, r5, pc}
 8010566:	0781      	lsls	r1, r0, #30
 8010568:	bf58      	it	pl
 801056a:	6963      	ldrpl	r3, [r4, #20]
 801056c:	60a3      	str	r3, [r4, #8]
 801056e:	e7f4      	b.n	801055a <__swsetup_r+0x92>
 8010570:	2000      	movs	r0, #0
 8010572:	e7f7      	b.n	8010564 <__swsetup_r+0x9c>
 8010574:	20000174 	.word	0x20000174

08010578 <_raise_r>:
 8010578:	291f      	cmp	r1, #31
 801057a:	b538      	push	{r3, r4, r5, lr}
 801057c:	4604      	mov	r4, r0
 801057e:	460d      	mov	r5, r1
 8010580:	d904      	bls.n	801058c <_raise_r+0x14>
 8010582:	2316      	movs	r3, #22
 8010584:	6003      	str	r3, [r0, #0]
 8010586:	f04f 30ff 	mov.w	r0, #4294967295
 801058a:	bd38      	pop	{r3, r4, r5, pc}
 801058c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801058e:	b112      	cbz	r2, 8010596 <_raise_r+0x1e>
 8010590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010594:	b94b      	cbnz	r3, 80105aa <_raise_r+0x32>
 8010596:	4620      	mov	r0, r4
 8010598:	f000 f830 	bl	80105fc <_getpid_r>
 801059c:	462a      	mov	r2, r5
 801059e:	4601      	mov	r1, r0
 80105a0:	4620      	mov	r0, r4
 80105a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105a6:	f000 b817 	b.w	80105d8 <_kill_r>
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d00a      	beq.n	80105c4 <_raise_r+0x4c>
 80105ae:	1c59      	adds	r1, r3, #1
 80105b0:	d103      	bne.n	80105ba <_raise_r+0x42>
 80105b2:	2316      	movs	r3, #22
 80105b4:	6003      	str	r3, [r0, #0]
 80105b6:	2001      	movs	r0, #1
 80105b8:	e7e7      	b.n	801058a <_raise_r+0x12>
 80105ba:	2400      	movs	r4, #0
 80105bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80105c0:	4628      	mov	r0, r5
 80105c2:	4798      	blx	r3
 80105c4:	2000      	movs	r0, #0
 80105c6:	e7e0      	b.n	801058a <_raise_r+0x12>

080105c8 <raise>:
 80105c8:	4b02      	ldr	r3, [pc, #8]	; (80105d4 <raise+0xc>)
 80105ca:	4601      	mov	r1, r0
 80105cc:	6818      	ldr	r0, [r3, #0]
 80105ce:	f7ff bfd3 	b.w	8010578 <_raise_r>
 80105d2:	bf00      	nop
 80105d4:	20000174 	.word	0x20000174

080105d8 <_kill_r>:
 80105d8:	b538      	push	{r3, r4, r5, lr}
 80105da:	4d07      	ldr	r5, [pc, #28]	; (80105f8 <_kill_r+0x20>)
 80105dc:	2300      	movs	r3, #0
 80105de:	4604      	mov	r4, r0
 80105e0:	4608      	mov	r0, r1
 80105e2:	4611      	mov	r1, r2
 80105e4:	602b      	str	r3, [r5, #0]
 80105e6:	f7f2 f989 	bl	80028fc <_kill>
 80105ea:	1c43      	adds	r3, r0, #1
 80105ec:	d102      	bne.n	80105f4 <_kill_r+0x1c>
 80105ee:	682b      	ldr	r3, [r5, #0]
 80105f0:	b103      	cbz	r3, 80105f4 <_kill_r+0x1c>
 80105f2:	6023      	str	r3, [r4, #0]
 80105f4:	bd38      	pop	{r3, r4, r5, pc}
 80105f6:	bf00      	nop
 80105f8:	200041a4 	.word	0x200041a4

080105fc <_getpid_r>:
 80105fc:	f7f2 b976 	b.w	80028ec <_getpid>

08010600 <_malloc_usable_size_r>:
 8010600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010604:	1f18      	subs	r0, r3, #4
 8010606:	2b00      	cmp	r3, #0
 8010608:	bfbc      	itt	lt
 801060a:	580b      	ldrlt	r3, [r1, r0]
 801060c:	18c0      	addlt	r0, r0, r3
 801060e:	4770      	bx	lr

08010610 <__swhatbuf_r>:
 8010610:	b570      	push	{r4, r5, r6, lr}
 8010612:	460c      	mov	r4, r1
 8010614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010618:	2900      	cmp	r1, #0
 801061a:	b096      	sub	sp, #88	; 0x58
 801061c:	4615      	mov	r5, r2
 801061e:	461e      	mov	r6, r3
 8010620:	da0d      	bge.n	801063e <__swhatbuf_r+0x2e>
 8010622:	89a3      	ldrh	r3, [r4, #12]
 8010624:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010628:	f04f 0100 	mov.w	r1, #0
 801062c:	bf0c      	ite	eq
 801062e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010632:	2340      	movne	r3, #64	; 0x40
 8010634:	2000      	movs	r0, #0
 8010636:	6031      	str	r1, [r6, #0]
 8010638:	602b      	str	r3, [r5, #0]
 801063a:	b016      	add	sp, #88	; 0x58
 801063c:	bd70      	pop	{r4, r5, r6, pc}
 801063e:	466a      	mov	r2, sp
 8010640:	f000 f848 	bl	80106d4 <_fstat_r>
 8010644:	2800      	cmp	r0, #0
 8010646:	dbec      	blt.n	8010622 <__swhatbuf_r+0x12>
 8010648:	9901      	ldr	r1, [sp, #4]
 801064a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801064e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010652:	4259      	negs	r1, r3
 8010654:	4159      	adcs	r1, r3
 8010656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801065a:	e7eb      	b.n	8010634 <__swhatbuf_r+0x24>

0801065c <__smakebuf_r>:
 801065c:	898b      	ldrh	r3, [r1, #12]
 801065e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010660:	079d      	lsls	r5, r3, #30
 8010662:	4606      	mov	r6, r0
 8010664:	460c      	mov	r4, r1
 8010666:	d507      	bpl.n	8010678 <__smakebuf_r+0x1c>
 8010668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801066c:	6023      	str	r3, [r4, #0]
 801066e:	6123      	str	r3, [r4, #16]
 8010670:	2301      	movs	r3, #1
 8010672:	6163      	str	r3, [r4, #20]
 8010674:	b002      	add	sp, #8
 8010676:	bd70      	pop	{r4, r5, r6, pc}
 8010678:	ab01      	add	r3, sp, #4
 801067a:	466a      	mov	r2, sp
 801067c:	f7ff ffc8 	bl	8010610 <__swhatbuf_r>
 8010680:	9900      	ldr	r1, [sp, #0]
 8010682:	4605      	mov	r5, r0
 8010684:	4630      	mov	r0, r6
 8010686:	f7ff f8fb 	bl	800f880 <_malloc_r>
 801068a:	b948      	cbnz	r0, 80106a0 <__smakebuf_r+0x44>
 801068c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010690:	059a      	lsls	r2, r3, #22
 8010692:	d4ef      	bmi.n	8010674 <__smakebuf_r+0x18>
 8010694:	f023 0303 	bic.w	r3, r3, #3
 8010698:	f043 0302 	orr.w	r3, r3, #2
 801069c:	81a3      	strh	r3, [r4, #12]
 801069e:	e7e3      	b.n	8010668 <__smakebuf_r+0xc>
 80106a0:	89a3      	ldrh	r3, [r4, #12]
 80106a2:	6020      	str	r0, [r4, #0]
 80106a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a8:	81a3      	strh	r3, [r4, #12]
 80106aa:	9b00      	ldr	r3, [sp, #0]
 80106ac:	6163      	str	r3, [r4, #20]
 80106ae:	9b01      	ldr	r3, [sp, #4]
 80106b0:	6120      	str	r0, [r4, #16]
 80106b2:	b15b      	cbz	r3, 80106cc <__smakebuf_r+0x70>
 80106b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106b8:	4630      	mov	r0, r6
 80106ba:	f000 f81d 	bl	80106f8 <_isatty_r>
 80106be:	b128      	cbz	r0, 80106cc <__smakebuf_r+0x70>
 80106c0:	89a3      	ldrh	r3, [r4, #12]
 80106c2:	f023 0303 	bic.w	r3, r3, #3
 80106c6:	f043 0301 	orr.w	r3, r3, #1
 80106ca:	81a3      	strh	r3, [r4, #12]
 80106cc:	89a3      	ldrh	r3, [r4, #12]
 80106ce:	431d      	orrs	r5, r3
 80106d0:	81a5      	strh	r5, [r4, #12]
 80106d2:	e7cf      	b.n	8010674 <__smakebuf_r+0x18>

080106d4 <_fstat_r>:
 80106d4:	b538      	push	{r3, r4, r5, lr}
 80106d6:	4d07      	ldr	r5, [pc, #28]	; (80106f4 <_fstat_r+0x20>)
 80106d8:	2300      	movs	r3, #0
 80106da:	4604      	mov	r4, r0
 80106dc:	4608      	mov	r0, r1
 80106de:	4611      	mov	r1, r2
 80106e0:	602b      	str	r3, [r5, #0]
 80106e2:	f7f2 f96a 	bl	80029ba <_fstat>
 80106e6:	1c43      	adds	r3, r0, #1
 80106e8:	d102      	bne.n	80106f0 <_fstat_r+0x1c>
 80106ea:	682b      	ldr	r3, [r5, #0]
 80106ec:	b103      	cbz	r3, 80106f0 <_fstat_r+0x1c>
 80106ee:	6023      	str	r3, [r4, #0]
 80106f0:	bd38      	pop	{r3, r4, r5, pc}
 80106f2:	bf00      	nop
 80106f4:	200041a4 	.word	0x200041a4

080106f8 <_isatty_r>:
 80106f8:	b538      	push	{r3, r4, r5, lr}
 80106fa:	4d06      	ldr	r5, [pc, #24]	; (8010714 <_isatty_r+0x1c>)
 80106fc:	2300      	movs	r3, #0
 80106fe:	4604      	mov	r4, r0
 8010700:	4608      	mov	r0, r1
 8010702:	602b      	str	r3, [r5, #0]
 8010704:	f7f2 f969 	bl	80029da <_isatty>
 8010708:	1c43      	adds	r3, r0, #1
 801070a:	d102      	bne.n	8010712 <_isatty_r+0x1a>
 801070c:	682b      	ldr	r3, [r5, #0]
 801070e:	b103      	cbz	r3, 8010712 <_isatty_r+0x1a>
 8010710:	6023      	str	r3, [r4, #0]
 8010712:	bd38      	pop	{r3, r4, r5, pc}
 8010714:	200041a4 	.word	0x200041a4

08010718 <_init>:
 8010718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801071a:	bf00      	nop
 801071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801071e:	bc08      	pop	{r3}
 8010720:	469e      	mov	lr, r3
 8010722:	4770      	bx	lr

08010724 <_fini>:
 8010724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010726:	bf00      	nop
 8010728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801072a:	bc08      	pop	{r3}
 801072c:	469e      	mov	lr, r3
 801072e:	4770      	bx	lr
