
F411-Tepelco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f484  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800f624  0800f624  0001f624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd18  0800fd18  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd18  0800fd18  0001fd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd20  0800fd20  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd20  0800fd20  0001fd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd24  0800fd24  0001fd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800fd28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003594  2000017c  0800fea4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003710  0800fea4  00023710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014882  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d57  00000000  00000000  00034a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  000377c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dea  00000000  00000000  000388f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018569  00000000  00000000  000396da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172c3  00000000  00000000  00051c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093651  00000000  00000000  00068f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005460  00000000  00000000  000fc558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  001019b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000017c 	.word	0x2000017c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f60c 	.word	0x0800f60c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000180 	.word	0x20000180
 80001dc:	0800f60c 	.word	0x0800f60c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b09a      	sub	sp, #104	; 0x68
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=34;//ETH.SIPR[3]=6,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2222      	movs	r2, #34	; 0x22
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory
		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;//=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	//----------------------- ETHERNET W5100 Environment-------------------------//

	//----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f005 fd17 	bl	8006304 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008d6:	4943      	ldr	r1, [pc, #268]	; (80009e4 <main+0x350>)
 80008d8:	4843      	ldr	r0, [pc, #268]	; (80009e8 <main+0x354>)
 80008da:	f00d feb1 	bl	800e640 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008de:	4943      	ldr	r1, [pc, #268]	; (80009ec <main+0x358>)
 80008e0:	4843      	ldr	r0, [pc, #268]	; (80009f0 <main+0x35c>)
 80008e2:	f00d fead 	bl	800e640 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008e6:	4943      	ldr	r1, [pc, #268]	; (80009f4 <main+0x360>)
 80008e8:	4843      	ldr	r0, [pc, #268]	; (80009f8 <main+0x364>)
 80008ea:	f00d fea9 	bl	800e640 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008ee:	4943      	ldr	r1, [pc, #268]	; (80009fc <main+0x368>)
 80008f0:	4843      	ldr	r0, [pc, #268]	; (8000a00 <main+0x36c>)
 80008f2:	f00d fea5 	bl	800e640 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008f6:	4943      	ldr	r1, [pc, #268]	; (8000a04 <main+0x370>)
 80008f8:	4843      	ldr	r0, [pc, #268]	; (8000a08 <main+0x374>)
 80008fa:	f00d fea1 	bl	800e640 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80008fe:	4943      	ldr	r1, [pc, #268]	; (8000a0c <main+0x378>)
 8000900:	4843      	ldr	r0, [pc, #268]	; (8000a10 <main+0x37c>)
 8000902:	f00d fe9d 	bl	800e640 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000906:	4943      	ldr	r1, [pc, #268]	; (8000a14 <main+0x380>)
 8000908:	4843      	ldr	r0, [pc, #268]	; (8000a18 <main+0x384>)
 800090a:	f00d fe99 	bl	800e640 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800090e:	4943      	ldr	r1, [pc, #268]	; (8000a1c <main+0x388>)
 8000910:	4843      	ldr	r0, [pc, #268]	; (8000a20 <main+0x38c>)
 8000912:	f00d fe95 	bl	800e640 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <main+0x34c>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <main+0x34c>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000948:	2206      	movs	r2, #6
 800094a:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 8000950:	2201      	movs	r2, #1
 8000952:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000958:	2203      	movs	r2, #3
 800095a:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000978:	220a      	movs	r2, #10
 800097a:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000988:	2233      	movs	r2, #51	; 0x33
 800098a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000998:	2235      	movs	r2, #53	; 0x35
 800099a:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
		wf._DBG_EN=1;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50

	// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //

		spi_no_debug=1;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <main+0x390>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <main+0x348>)
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <main+0x394>)
 80009d0:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009d2:	4b02      	ldr	r3, [pc, #8]	; (80009dc <main+0x348>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d8:	4b00      	ldr	r3, [pc, #0]	; (80009dc <main+0x348>)
 80009da:	e027      	b.n	8000a2c <main+0x398>
 80009dc:	20001cb4 	.word	0x20001cb4
 80009e0:	200002c0 	.word	0x200002c0
 80009e4:	20000024 	.word	0x20000024
 80009e8:	200002c6 	.word	0x200002c6
 80009ec:	2000002c 	.word	0x2000002c
 80009f0:	200002e6 	.word	0x200002e6
 80009f4:	20000038 	.word	0x20000038
 80009f8:	200002f6 	.word	0x200002f6
 80009fc:	20000048 	.word	0x20000048
 8000a00:	20000306 	.word	0x20000306
 8000a04:	20000050 	.word	0x20000050
 8000a08:	2000030c 	.word	0x2000030c
 8000a0c:	20000060 	.word	0x20000060
 8000a10:	20000322 	.word	0x20000322
 8000a14:	20000070 	.word	0x20000070
 8000a18:	20000332 	.word	0x20000332
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	2000031c 	.word	0x2000031c
 8000a24:	2000316c 	.word	0x2000316c
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	4a58      	ldr	r2, [pc, #352]	; (8000b90 <main+0x4fc>)
 8000a2e:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a30:	4858      	ldr	r0, [pc, #352]	; (8000b94 <main+0x500>)
 8000a32:	f00b f849 	bl	800bac8 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a36:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <main+0x500>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a3c:	4856      	ldr	r0, [pc, #344]	; (8000b98 <main+0x504>)
 8000a3e:	f00b f843 	bl	800bac8 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a42:	4b55      	ldr	r3, [pc, #340]	; (8000b98 <main+0x504>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a48:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4852      	ldr	r0, [pc, #328]	; (8000b98 <main+0x504>)
 8000a50:	f00b f8dd 	bl	800bc0e <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f001 fdee 	bl	8002634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 fa6a 	bl	8000f30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a5c:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <main+0x508>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <main+0x50c>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	099b      	lsrs	r3, r3, #6
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fdc9 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 fbcb 	bl	8001208 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a72:	f000 fac5 	bl	8001000 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a76:	f000 fb73 	bl	8001160 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a7a:	f000 fb9b 	bl	80011b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a7e:	f000 faf5 	bl	800106c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	4847      	ldr	r0, [pc, #284]	; (8000ba4 <main+0x510>)
 8000a88:	f002 faa8 	bl	8002fdc <HAL_GPIO_WritePin>
	ITM0_Write("\r\n INICIO OK\r\n",14);
 8000a8c:	210e      	movs	r1, #14
 8000a8e:	4846      	ldr	r0, [pc, #280]	; (8000ba8 <main+0x514>)
 8000a90:	f000 fc42 	bl	8001318 <ITM0_Write>
	HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);		//Escucho el puerto serie
 8000a94:	2201      	movs	r2, #1
 8000a96:	4945      	ldr	r1, [pc, #276]	; (8000bac <main+0x518>)
 8000a98:	4845      	ldr	r0, [pc, #276]	; (8000bb0 <main+0x51c>)
 8000a9a:	f004 fbc8 	bl	800522e <HAL_UART_Receive_IT>
	ESP8266_HW_Reset();		 						          	//Reseteo el modulo desde el pin de RESET
 8000a9e:	f001 fa5f 	bl	8001f60 <ESP8266_HW_Reset>
	if (wf._DBG_EN==1)
 8000aa2:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <main+0x520>)
 8000aa4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d103      	bne.n	8000ab4 <main+0x420>
		{
		ITM0_Write("\r\n RESET ESP8266 \r\n",17);
 8000aac:	2111      	movs	r1, #17
 8000aae:	4842      	ldr	r0, [pc, #264]	; (8000bb8 <main+0x524>)
 8000ab0:	f000 fc32 	bl	8001318 <ITM0_Write>
		}
	if (WF_SER_DBG==1)
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <main+0x528>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d104      	bne.n	8000ac6 <main+0x432>
		{
		HAL_UART_Transmit_IT(&huart2, "\r\n RESET ESP8266 \r\n",17);
 8000abc:	2211      	movs	r2, #17
 8000abe:	493e      	ldr	r1, [pc, #248]	; (8000bb8 <main+0x524>)
 8000ac0:	483f      	ldr	r0, [pc, #252]	; (8000bc0 <main+0x52c>)
 8000ac2:	f004 fb6f 	bl	80051a4 <HAL_UART_Transmit_IT>
		}
	if (ETH_DBG_EN == 1) ITM0_Write("\r\n SET-UP W5100 \r\n",17);
 8000ac6:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <main+0x530>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d103      	bne.n	8000ad6 <main+0x442>
 8000ace:	2111      	movs	r1, #17
 8000ad0:	483d      	ldr	r0, [pc, #244]	; (8000bc8 <main+0x534>)
 8000ad2:	f000 fc21 	bl	8001318 <ITM0_Write>

	ETH.operacion=SPI_WRITE;
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <main+0x538>)
 8000ad8:	22f0      	movs	r2, #240	; 0xf0
 8000ada:	729a      	strb	r2, [r3, #10]
	ETH.TX[1]= 0;
 8000adc:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <main+0x538>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	755a      	strb	r2, [r3, #21]
	ETH.TX[2]= 1;
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <main+0x538>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	759a      	strb	r2, [r3, #22]
	ETH.TX[3]= 192;
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <main+0x538>)
 8000aea:	22c0      	movs	r2, #192	; 0xc0
 8000aec:	75da      	strb	r2, [r3, #23]

	eth_init(&ETH);
 8000aee:	4837      	ldr	r0, [pc, #220]	; (8000bcc <main+0x538>)
 8000af0:	f00c fcb6 	bl	800d460 <eth_init>

	eth_socket_init(&ETH,0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	4835      	ldr	r0, [pc, #212]	; (8000bcc <main+0x538>)
 8000af8:	f00c fd08 	bl	800d50c <eth_socket_init>

	SPI_ETH_READ_EN=1;
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <main+0x53c>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
	ETH.operacion=SPI_READ;
 8000b02:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <main+0x538>)
 8000b04:	220f      	movs	r2, #15
 8000b06:	729a      	strb	r2, [r3, #10]
	ETH.TX[1]= 0;
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <main+0x538>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	755a      	strb	r2, [r3, #21]
	ETH.TX[2]= 1;
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <main+0x538>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	759a      	strb	r2, [r3, #22]
	ETH.TX[3]= 0;
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <main+0x538>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <main+0x51c>)
 8000b1c:	f001 fa48 	bl	8001fb0 <ESP8266_HW_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d115      	bne.n	8000b52 <main+0x4be>
     {
   	  ESP_HW_Init=1;
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <main+0x540>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN==1) ITM0_Write("\r\n ESP HW Init OK\r\n",19);
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <main+0x520>)
 8000b2e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d103      	bne.n	8000b3e <main+0x4aa>
 8000b36:	2113      	movs	r1, #19
 8000b38:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <main+0x544>)
 8000b3a:	f000 fbed 	bl	8001318 <ITM0_Write>
   	  if (WF_SER_DBG==1) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",19);
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <main+0x528>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d15f      	bne.n	8000c06 <main+0x572>
 8000b46:	2213      	movs	r2, #19
 8000b48:	4923      	ldr	r1, [pc, #140]	; (8000bd8 <main+0x544>)
 8000b4a:	481d      	ldr	r0, [pc, #116]	; (8000bc0 <main+0x52c>)
 8000b4c:	f004 fb2a 	bl	80051a4 <HAL_UART_Transmit_IT>
 8000b50:	e059      	b.n	8000c06 <main+0x572>
     }
     else
     {
   	  ESP8266_HW_Reset(); 				//Si no logra resetear con el comando de AT+RESTORE, pruebo el resete desde hardware
 8000b52:	f001 fa05 	bl	8001f60 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <main+0x51c>)
 8000b58:	f001 fa2a 	bl	8001fb0 <ESP8266_HW_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d13c      	bne.n	8000bdc <main+0x548>
   	  {
   		  ESP_HW_Init=1;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <main+0x540>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN==1) ITM0_Write("\r\n ESP HW Init OK\r\n",19);
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <main+0x520>)
 8000b6a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d103      	bne.n	8000b7a <main+0x4e6>
 8000b72:	2113      	movs	r1, #19
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <main+0x544>)
 8000b76:	f000 fbcf 	bl	8001318 <ITM0_Write>
   		  if (WF_SER_DBG==1) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",19);
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <main+0x528>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d141      	bne.n	8000c06 <main+0x572>
 8000b82:	2213      	movs	r2, #19
 8000b84:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <main+0x544>)
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <main+0x52c>)
 8000b88:	f004 fb0c 	bl	80051a4 <HAL_UART_Transmit_IT>
 8000b8c:	e03b      	b.n	8000c06 <main+0x572>
 8000b8e:	bf00      	nop
 8000b90:	20000198 	.word	0x20000198
 8000b94:	20001014 	.word	0x20001014
 8000b98:	20001664 	.word	0x20001664
 8000b9c:	20000088 	.word	0x20000088
 8000ba0:	10624dd3 	.word	0x10624dd3
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	0800f624 	.word	0x0800f624
 8000bac:	2000357c 	.word	0x2000357c
 8000bb0:	20000238 	.word	0x20000238
 8000bb4:	200002c0 	.word	0x200002c0
 8000bb8:	0800f634 	.word	0x0800f634
 8000bbc:	200035b0 	.word	0x200035b0
 8000bc0:	2000027c 	.word	0x2000027c
 8000bc4:	20000084 	.word	0x20000084
 8000bc8:	0800f648 	.word	0x0800f648
 8000bcc:	20001cb4 	.word	0x20001cb4
 8000bd0:	20003177 	.word	0x20003177
 8000bd4:	2000316f 	.word	0x2000316f
 8000bd8:	0800f65c 	.word	0x0800f65c
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bdc:	4bad      	ldr	r3, [pc, #692]	; (8000e94 <main+0x800>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN==1)  ITM0_Write("\r\n ESP HW Init Fail\r\n",24);
 8000be2:	4bad      	ldr	r3, [pc, #692]	; (8000e98 <main+0x804>)
 8000be4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d103      	bne.n	8000bf4 <main+0x560>
 8000bec:	2118      	movs	r1, #24
 8000bee:	48ab      	ldr	r0, [pc, #684]	; (8000e9c <main+0x808>)
 8000bf0:	f000 fb92 	bl	8001318 <ITM0_Write>
   		  if (WF_SER_DBG==1) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init Fail\r\n",24);
 8000bf4:	4baa      	ldr	r3, [pc, #680]	; (8000ea0 <main+0x80c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d104      	bne.n	8000c06 <main+0x572>
 8000bfc:	2218      	movs	r2, #24
 8000bfe:	49a7      	ldr	r1, [pc, #668]	; (8000e9c <main+0x808>)
 8000c00:	48a8      	ldr	r0, [pc, #672]	; (8000ea4 <main+0x810>)
 8000c02:	f004 facf 	bl	80051a4 <HAL_UART_Transmit_IT>
   	  }
     }

     HAL_Delay(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f001 fd85 	bl	8002718 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /**************[ INICIO PIDO ENVIAR DATOS ]**************/
	  	  if (ESP_HW_Init==1)
 8000c0e:	4ba1      	ldr	r3, [pc, #644]	; (8000e94 <main+0x800>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	f040 80a9 	bne.w	8000d6a <main+0x6d6>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000c18:	4ba3      	ldr	r3, [pc, #652]	; (8000ea8 <main+0x814>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	f040 80a4 	bne.w	8000d6a <main+0x6d6>
 8000c22:	4b9d      	ldr	r3, [pc, #628]	; (8000e98 <main+0x804>)
 8000c24:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f040 809e 	bne.w	8000d6a <main+0x6d6>
 8000c2e:	4b9a      	ldr	r3, [pc, #616]	; (8000e98 <main+0x804>)
 8000c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c34:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c38:	f340 8097 	ble.w	8000d6a <main+0x6d6>
 8000c3c:	4b9b      	ldr	r3, [pc, #620]	; (8000eac <main+0x818>)
 8000c3e:	7c9b      	ldrb	r3, [r3, #18]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 8092 	beq.w	8000d6a <main+0x6d6>
	  			{	ETH.S0_data_available=0;
 8000c46:	4b99      	ldr	r3, [pc, #612]	; (8000eac <main+0x818>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c4c:	4b98      	ldr	r3, [pc, #608]	; (8000eb0 <main+0x81c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c52:	4b95      	ldr	r3, [pc, #596]	; (8000ea8 <main+0x814>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4896      	ldr	r0, [pc, #600]	; (8000eb4 <main+0x820>)
 8000c5c:	f00b f803 	bl	800bc66 <ModBUS_F03_Read>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4698      	mov	r8, r3
 8000c64:	2101      	movs	r1, #1
 8000c66:	4893      	ldr	r0, [pc, #588]	; (8000eb4 <main+0x820>)
 8000c68:	f00a fffd 	bl	800bc66 <ModBUS_F03_Read>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461c      	mov	r4, r3
 8000c70:	2102      	movs	r1, #2
 8000c72:	4890      	ldr	r0, [pc, #576]	; (8000eb4 <main+0x820>)
 8000c74:	f00a fff7 	bl	800bc66 <ModBUS_F03_Read>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	488d      	ldr	r0, [pc, #564]	; (8000eb4 <main+0x820>)
 8000c80:	f00a fff1 	bl	800bc66 <ModBUS_F03_Read>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461e      	mov	r6, r3
 8000c88:	2104      	movs	r1, #4
 8000c8a:	488a      	ldr	r0, [pc, #552]	; (8000eb4 <main+0x820>)
 8000c8c:	f00a ffeb 	bl	800bc66 <ModBUS_F03_Read>
 8000c90:	4603      	mov	r3, r0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	2105      	movs	r1, #5
 8000c96:	4887      	ldr	r0, [pc, #540]	; (8000eb4 <main+0x820>)
 8000c98:	f00a ffe5 	bl	800bc66 <ModBUS_F03_Read>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	2106      	movs	r1, #6
 8000ca2:	4884      	ldr	r0, [pc, #528]	; (8000eb4 <main+0x820>)
 8000ca4:	f00a ffdf 	bl	800bc66 <ModBUS_F03_Read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	2107      	movs	r1, #7
 8000cae:	4881      	ldr	r0, [pc, #516]	; (8000eb4 <main+0x820>)
 8000cb0:	f00a ffd9 	bl	800bc66 <ModBUS_F03_Read>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	2108      	movs	r1, #8
 8000cba:	487e      	ldr	r0, [pc, #504]	; (8000eb4 <main+0x820>)
 8000cbc:	f00a ffd3 	bl	800bc66 <ModBUS_F03_Read>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	2109      	movs	r1, #9
 8000cc6:	487b      	ldr	r0, [pc, #492]	; (8000eb4 <main+0x820>)
 8000cc8:	f00a ffcd 	bl	800bc66 <ModBUS_F03_Read>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd4:	9312      	str	r3, [sp, #72]	; 0x48
 8000cd6:	4b78      	ldr	r3, [pc, #480]	; (8000eb8 <main+0x824>)
 8000cd8:	9311      	str	r3, [sp, #68]	; 0x44
 8000cda:	4b78      	ldr	r3, [pc, #480]	; (8000ebc <main+0x828>)
 8000cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8000cde:	2300      	movs	r3, #0
 8000ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	930d      	str	r3, [sp, #52]	; 0x34
 8000cea:	2300      	movs	r3, #0
 8000cec:	930c      	str	r3, [sp, #48]	; 0x30
 8000cee:	2300      	movs	r3, #0
 8000cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8000cfa:	9208      	str	r2, [sp, #32]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	9207      	str	r2, [sp, #28]
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	9206      	str	r2, [sp, #24]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	9205      	str	r2, [sp, #20]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	9204      	str	r2, [sp, #16]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	9303      	str	r3, [sp, #12]
 8000d10:	9602      	str	r6, [sp, #8]
 8000d12:	9501      	str	r5, [sp, #4]
 8000d14:	9400      	str	r4, [sp, #0]
 8000d16:	4643      	mov	r3, r8
 8000d18:	4a69      	ldr	r2, [pc, #420]	; (8000ec0 <main+0x82c>)
 8000d1a:	496a      	ldr	r1, [pc, #424]	; (8000ec4 <main+0x830>)
 8000d1c:	486a      	ldr	r0, [pc, #424]	; (8000ec8 <main+0x834>)
 8000d1e:	f00a fb49 	bl	800b3b4 <httpPOST>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <main+0x6d6>
	  								ModBUS_F03_Read(&mb_eth,7),
	  								ModBUS_F03_Read(&mb_eth,8),
									ModBUS_F03_Read(&mb_eth,9),
									0,0,0,0,0,0,TEPELCO,post, body, 512) )
	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d28:	4864      	ldr	r0, [pc, #400]	; (8000ebc <main+0x828>)
 8000d2a:	f7ff fa63 	bl	80001f4 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	2341      	movs	r3, #65	; 0x41
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	4960      	ldr	r1, [pc, #384]	; (8000ebc <main+0x828>)
 8000d3a:	4864      	ldr	r0, [pc, #400]	; (8000ecc <main+0x838>)
 8000d3c:	f00d f9a8 	bl	800e090 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d40:	485e      	ldr	r0, [pc, #376]	; (8000ebc <main+0x828>)
 8000d42:	f7ff fa57 	bl	80001f4 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <main+0x804>)
 8000d4c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d50:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <main+0x804>)
 8000d52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d807      	bhi.n	8000d6a <main+0x6d6>
	  							{
	  								EnviarDatos(&wf);
 8000d5a:	484f      	ldr	r0, [pc, #316]	; (8000e98 <main+0x804>)
 8000d5c:	f005 fabc 	bl	80062d8 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d60:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <main+0x804>)
 8000d62:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1_WF==1)||(FLAG_TIMEOUT_WF==1))  //Si recibí datos o me fui por TimeOUT
 8000d6a:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <main+0x83c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d003      	beq.n	8000d7a <main+0x6e6>
 8000d72:	4b58      	ldr	r3, [pc, #352]	; (8000ed4 <main+0x840>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d163      	bne.n	8000e42 <main+0x7ae>
	  		{
	  			if(FLAG_UART1_WF==1)
 8000d7a:	4b55      	ldr	r3, [pc, #340]	; (8000ed0 <main+0x83c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10b      	bne.n	8000d9a <main+0x706>
	  				{
	  					CopiaVector(wf._uartRCVD,UART1_WF_RX_vect_hld,UART1_WF_RX_items,1,CMP_VECT);
 8000d82:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <main+0x844>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b55      	ldr	r3, [pc, #340]	; (8000edc <main+0x848>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4954      	ldr	r1, [pc, #336]	; (8000ee0 <main+0x84c>)
 8000d8e:	4855      	ldr	r0, [pc, #340]	; (8000ee4 <main+0x850>)
 8000d90:	f00d f97e 	bl	800e090 <CopiaVector>
	  					FLAG_UART1_WF=0;
 8000d94:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <main+0x83c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
	  				}
	  			if(FLAG_TIMEOUT_WF==1)
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <main+0x840>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d102      	bne.n	8000da8 <main+0x714>
	  					{
	  						FLAG_TIMEOUT_WF=0;
 8000da2:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <main+0x840>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000da8:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <main+0x800>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d148      	bne.n	8000e42 <main+0x7ae>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART1_WF_RX_items;
 8000db0:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <main+0x844>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a38      	ldr	r2, [pc, #224]	; (8000e98 <main+0x804>)
 8000db6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART1_WF_RX_vect_hld,UART1_WF_RX_items,1,CMP_VECT);
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <main+0x844>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b47      	ldr	r3, [pc, #284]	; (8000edc <main+0x848>)
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4946      	ldr	r1, [pc, #280]	; (8000ee0 <main+0x84c>)
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <main+0x850>)
 8000dc8:	f00d f962 	bl	800e090 <CopiaVector>
	  					dummy_int=AT_ESP8266_ND(&wf);
 8000dcc:	4832      	ldr	r0, [pc, #200]	; (8000e98 <main+0x804>)
 8000dce:	f005 fb69 	bl	80064a4 <AT_ESP8266_ND>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a44      	ldr	r2, [pc, #272]	; (8000ee8 <main+0x854>)
 8000dd6:	6013      	str	r3, [r2, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <main+0x804>)
 8000dda:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d12f      	bne.n	8000e42 <main+0x7ae>
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <main+0x804>)
 8000de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000de8:	2b63      	cmp	r3, #99	; 0x63
 8000dea:	d12a      	bne.n	8000e42 <main+0x7ae>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <main+0x804>)
 8000dee:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000df2:	2341      	movs	r3, #65	; 0x41
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	493c      	ldr	r1, [pc, #240]	; (8000eec <main+0x858>)
 8000dfa:	483d      	ldr	r0, [pc, #244]	; (8000ef0 <main+0x85c>)
 8000dfc:	f00d f948 	bl	800e090 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e00:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <main+0x804>)
 8000e02:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e06:	4a3b      	ldr	r2, [pc, #236]	; (8000ef4 <main+0x860>)
 8000e08:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000e0c:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <main+0x860>)
 8000e0e:	f00a ffaf 	bl	800bd70 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <main+0x860>)
 8000e14:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e18:	2341      	movs	r3, #65	; 0x41
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4936      	ldr	r1, [pc, #216]	; (8000ef8 <main+0x864>)
 8000e20:	482a      	ldr	r0, [pc, #168]	; (8000ecc <main+0x838>)
 8000e22:	f00d f935 	bl	800e090 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <main+0x860>)
 8000e28:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <main+0x804>)
 8000e2e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <main+0x804>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <main+0x804>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <main+0x800>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <main+0x7c8>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	492b      	ldr	r1, [pc, #172]	; (8000efc <main+0x868>)
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <main+0x804>)
 8000e50:	f008 fdd0 	bl	80099f4 <WiFi_Conn_ND>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <main+0x86c>)
 8000e5a:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <main+0x870>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	f47f aed4 	bne.w	8000c0e <main+0x57a>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6c:	4826      	ldr	r0, [pc, #152]	; (8000f08 <main+0x874>)
 8000e6e:	f002 f8b5 	bl	8002fdc <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000e72:	2115      	movs	r1, #21
 8000e74:	4825      	ldr	r0, [pc, #148]	; (8000f0c <main+0x878>)
 8000e76:	f000 fa4f 	bl	8001318 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000e7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7e:	f001 fc4b 	bl	8002718 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e88:	481f      	ldr	r0, [pc, #124]	; (8000f08 <main+0x874>)
 8000e8a:	f002 f8a7 	bl	8002fdc <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000e8e:	2118      	movs	r1, #24
 8000e90:	e03e      	b.n	8000f10 <main+0x87c>
 8000e92:	bf00      	nop
 8000e94:	2000316f 	.word	0x2000316f
 8000e98:	200002c0 	.word	0x200002c0
 8000e9c:	0800f670 	.word	0x0800f670
 8000ea0:	200035b0 	.word	0x200035b0
 8000ea4:	2000027c 	.word	0x2000027c
 8000ea8:	20003176 	.word	0x20003176
 8000eac:	20001cb4 	.word	0x20001cb4
 8000eb0:	200035b4 	.word	0x200035b4
 8000eb4:	20001014 	.word	0x20001014
 8000eb8:	20002f1c 	.word	0x20002f1c
 8000ebc:	20002d1c 	.word	0x20002d1c
 8000ec0:	2000001c 	.word	0x2000001c
 8000ec4:	2000000c 	.word	0x2000000c
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000554 	.word	0x20000554
 8000ed0:	20003173 	.word	0x20003173
 8000ed4:	20003172 	.word	0x20003172
 8000ed8:	20003580 	.word	0x20003580
 8000edc:	20003578 	.word	0x20003578
 8000ee0:	20003378 	.word	0x20003378
 8000ee4:	20000954 	.word	0x20000954
 8000ee8:	20003598 	.word	0x20003598
 8000eec:	20000354 	.word	0x20000354
 8000ef0:	20001676 	.word	0x20001676
 8000ef4:	20001664 	.word	0x20001664
 8000ef8:	2000187c 	.word	0x2000187c
 8000efc:	20000238 	.word	0x20000238
 8000f00:	20003175 	.word	0x20003175
 8000f04:	20003174 	.word	0x20003174
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	0800f688 	.word	0x0800f688
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <main+0x894>)
 8000f12:	f000 fa01 	bl	8001318 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000f16:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f1a:	f001 fbfd 	bl	8002718 <HAL_Delay>
	  				esp_restart=0;
 8000f1e:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <main+0x898>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000f24:	e673      	b.n	8000c0e <main+0x57a>
 8000f26:	bf00      	nop
 8000f28:	0800f6a0 	.word	0x0800f6a0
 8000f2c:	20003174 	.word	0x20003174

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00d fa95 	bl	800e46e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 f845 	bl	8003044 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc0:	f001 f876 	bl	80020b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2103      	movs	r1, #3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 faa7 	bl	8003534 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fec:	f001 f860 	bl	80020b0 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	; 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_SPI1_Init+0x64>)
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <MX_SPI1_Init+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SPI1_Init+0x64>)
 800100c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_SPI1_Init+0x64>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_SPI1_Init+0x64>)
 8001034:	2210      	movs	r2, #16
 8001036:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_SPI1_Init+0x64>)
 800104c:	220a      	movs	r2, #10
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_SPI1_Init+0x64>)
 8001052:	f002 fc4f 	bl	80038f4 <HAL_SPI_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800105c:	f001 f828 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000198 	.word	0x20000198
 8001068:	40013000 	.word	0x40013000

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <MX_TIM2_Init+0xf0>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_TIM2_Init+0xf0>)
 80010a6:	2264      	movs	r2, #100	; 0x64
 80010a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <MX_TIM2_Init+0xf0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_TIM2_Init+0xf0>)
 80010b2:	2264      	movs	r2, #100	; 0x64
 80010b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <MX_TIM2_Init+0xf0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_TIM2_Init+0xf0>)
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c2:	4826      	ldr	r0, [pc, #152]	; (800115c <MX_TIM2_Init+0xf0>)
 80010c4:	f002 ff0c 	bl	8003ee0 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80010ce:	f000 ffef 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	481f      	ldr	r0, [pc, #124]	; (800115c <MX_TIM2_Init+0xf0>)
 80010e0:	f003 fb14 	bl	800470c <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 ffe1 	bl	80020b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80010ee:	481b      	ldr	r0, [pc, #108]	; (800115c <MX_TIM2_Init+0xf0>)
 80010f0:	f002 ff45 	bl	8003f7e <HAL_TIM_OC_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 ffd9 	bl	80020b0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80010fe:	2108      	movs	r1, #8
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <MX_TIM2_Init+0xf0>)
 8001102:	f003 f945 	bl	8004390 <HAL_TIM_OnePulse_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800110c:	f000 ffd0 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4619      	mov	r1, r3
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <MX_TIM2_Init+0xf0>)
 8001120:	f003 feb0 	bl	8004e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800112a:	f000 ffc1 	bl	80020b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800112e:	2320      	movs	r3, #32
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM2_Init+0xf0>)
 8001146:	f003 fa85 	bl	8004654 <HAL_TIM_OC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001150:	f000 ffae 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3738      	adds	r7, #56	; 0x38
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200001f0 	.word	0x200001f0

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART1_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001198:	f003 fef6 	bl	8004f88 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 ff85 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000238 	.word	0x20000238
 80011b0:	40011000 	.word	0x40011000

080011b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART2_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ec:	f003 fecc 	bl	8004f88 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 ff5b 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000027c 	.word	0x2000027c
 8001204:	40004400 	.word	0x40004400

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <MX_GPIO_Init+0x104>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a39      	ldr	r2, [pc, #228]	; (800130c <MX_GPIO_Init+0x104>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <MX_GPIO_Init+0x104>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <MX_GPIO_Init+0x104>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <MX_GPIO_Init+0x104>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <MX_GPIO_Init+0x104>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_GPIO_Init+0x104>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2b      	ldr	r2, [pc, #172]	; (800130c <MX_GPIO_Init+0x104>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_GPIO_Init+0x104>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_GPIO_Init+0x104>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a24      	ldr	r2, [pc, #144]	; (800130c <MX_GPIO_Init+0x104>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_GPIO_Init+0x104>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	481e      	ldr	r0, [pc, #120]	; (8001310 <MX_GPIO_Init+0x108>)
 8001296:	f001 fea1 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2102      	movs	r1, #2
 800129e:	481d      	ldr	r0, [pc, #116]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012a0:	f001 fe9c 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2110      	movs	r1, #16
 80012a8:	481a      	ldr	r0, [pc, #104]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012aa:	f001 fe97 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_GPIO_Init+0x108>)
 80012c8:	f001 fc20 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 WiFi_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|WiFi_EN_Pin;
 80012cc:	f240 1301 	movw	r3, #257	; 0x101
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012e2:	f001 fc13 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 80012e6:	2312      	movs	r3, #18
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012fe:	f001 fc05 	bl	8002b0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40020800 	.word	0x40020800
 8001314:	40020000 	.word	0x40020000

08001318 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e009      	b.n	800133c <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f987 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf1      	blt.n	8001328 <ITM0_Write+0x10>
  }
  return len;
 8001344:	683b      	ldr	r3, [r7, #0]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 8001356:	4bbd      	ldr	r3, [pc, #756]	; (800164c <SysTick_Handler+0x2fc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	4abb      	ldr	r2, [pc, #748]	; (800164c <SysTick_Handler+0x2fc>)
 800135e:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001360:	4bbb      	ldr	r3, [pc, #748]	; (8001650 <SysTick_Handler+0x300>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	4aba      	ldr	r2, [pc, #744]	; (8001650 <SysTick_Handler+0x300>)
 8001368:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800136a:	4bba      	ldr	r3, [pc, #744]	; (8001654 <SysTick_Handler+0x304>)
 800136c:	7a1b      	ldrb	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <SysTick_Handler+0x2c>
 8001372:	4bb9      	ldr	r3, [pc, #740]	; (8001658 <SysTick_Handler+0x308>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4ab7      	ldr	r2, [pc, #732]	; (8001658 <SysTick_Handler+0x308>)
 800137a:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 800137c:	4bb5      	ldr	r3, [pc, #724]	; (8001654 <SysTick_Handler+0x304>)
 800137e:	7a1b      	ldrb	r3, [r3, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00c      	beq.n	800139e <SysTick_Handler+0x4e>
 8001384:	4bb3      	ldr	r3, [pc, #716]	; (8001654 <SysTick_Handler+0x304>)
 8001386:	88db      	ldrh	r3, [r3, #6]
 8001388:	461a      	mov	r2, r3
 800138a:	4bb3      	ldr	r3, [pc, #716]	; (8001658 <SysTick_Handler+0x308>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	da05      	bge.n	800139e <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 8001392:	4bb0      	ldr	r3, [pc, #704]	; (8001654 <SysTick_Handler+0x304>)
 8001394:	2200      	movs	r2, #0
 8001396:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 8001398:	4baf      	ldr	r3, [pc, #700]	; (8001658 <SysTick_Handler+0x308>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
		}


// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 800139e:	4baf      	ldr	r3, [pc, #700]	; (800165c <SysTick_Handler+0x30c>)
 80013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a4:	f240 2261 	movw	r2, #609	; 0x261
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d005      	beq.n	80013b8 <SysTick_Handler+0x68>
 80013ac:	4bab      	ldr	r3, [pc, #684]	; (800165c <SysTick_Handler+0x30c>)
 80013ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80013b6:	d109      	bne.n	80013cc <SysTick_Handler+0x7c>
 80013b8:	4ba8      	ldr	r3, [pc, #672]	; (800165c <SysTick_Handler+0x30c>)
 80013ba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d104      	bne.n	80013cc <SysTick_Handler+0x7c>
 80013c2:	4ba7      	ldr	r3, [pc, #668]	; (8001660 <SysTick_Handler+0x310>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4aa5      	ldr	r2, [pc, #660]	; (8001660 <SysTick_Handler+0x310>)
 80013ca:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>=20000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;		//Envío de datos cada 20 segs
 80013cc:	4ba4      	ldr	r3, [pc, #656]	; (8001660 <SysTick_Handler+0x310>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013d4:	4293      	cmp	r3, r2
 80013d6:	dd0c      	ble.n	80013f2 <SysTick_Handler+0xa2>
 80013d8:	4ba0      	ldr	r3, [pc, #640]	; (800165c <SysTick_Handler+0x30c>)
 80013da:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d007      	beq.n	80013f2 <SysTick_Handler+0xa2>
 80013e2:	4b9e      	ldr	r3, [pc, #632]	; (800165c <SysTick_Handler+0x30c>)
 80013e4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <SysTick_Handler+0xa2>
 80013ec:	4b9d      	ldr	r3, [pc, #628]	; (8001664 <SysTick_Handler+0x314>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 80013f2:	4b9d      	ldr	r3, [pc, #628]	; (8001668 <SysTick_Handler+0x318>)
 80013f4:	7b9b      	ldrb	r3, [r3, #14]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10e      	bne.n	8001418 <SysTick_Handler+0xc8>
	{
		ETH.ETH_WDG++;
 80013fa:	4b9b      	ldr	r3, [pc, #620]	; (8001668 <SysTick_Handler+0x318>)
 80013fc:	899b      	ldrh	r3, [r3, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b99      	ldr	r3, [pc, #612]	; (8001668 <SysTick_Handler+0x318>)
 8001404:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000) ETH.ETH_WDG=64000;		//Si alcanza valor límite lo dejo en 64000
 8001406:	4b98      	ldr	r3, [pc, #608]	; (8001668 <SysTick_Handler+0x318>)
 8001408:	899b      	ldrh	r3, [r3, #12]
 800140a:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800140e:	d303      	bcc.n	8001418 <SysTick_Handler+0xc8>
 8001410:	4b95      	ldr	r3, [pc, #596]	; (8001668 <SysTick_Handler+0x318>)
 8001412:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001416:	819a      	strh	r2, [r3, #12]
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==700)
 8001418:	4b8c      	ldr	r3, [pc, #560]	; (800164c <SysTick_Handler+0x2fc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001420:	f040 8402 	bne.w	8001c28 <SysTick_Handler+0x8d8>
  {
	dbgn++;
 8001424:	4b91      	ldr	r3, [pc, #580]	; (800166c <SysTick_Handler+0x31c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a90      	ldr	r2, [pc, #576]	; (800166c <SysTick_Handler+0x31c>)
 800142c:	6013      	str	r3, [r2, #0]
	ms_ticks=0;
 800142e:	4b87      	ldr	r3, [pc, #540]	; (800164c <SysTick_Handler+0x2fc>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	min_ticks++;
 8001434:	4b8e      	ldr	r3, [pc, #568]	; (8001670 <SysTick_Handler+0x320>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a8d      	ldr	r2, [pc, #564]	; (8001670 <SysTick_Handler+0x320>)
 800143c:	6013      	str	r3, [r2, #0]

  	if(MBUS_ticks==360) MBUS_ticks=0;
 800143e:	4b8d      	ldr	r3, [pc, #564]	; (8001674 <SysTick_Handler+0x324>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001446:	d102      	bne.n	800144e <SysTick_Handler+0xfe>
 8001448:	4b8a      	ldr	r3, [pc, #552]	; (8001674 <SysTick_Handler+0x324>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
  /*	if (asc==0)  MBUS_ticks++;
  	if (MBUS_ticks==100) asc=1;
  	if (asc==1) MBUS_ticks--;
  	if (MBUS_ticks==0) asc=0;*/

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800144e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001452:	4889      	ldr	r0, [pc, #548]	; (8001678 <SysTick_Handler+0x328>)
 8001454:	f001 fddb 	bl	800300e <HAL_GPIO_TogglePin>

	if(spi_no_debug)
 8001458:	4b88      	ldr	r3, [pc, #544]	; (800167c <SysTick_Handler+0x32c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 83a4 	beq.w	8001baa <SysTick_Handler+0x85a>
	  {
	  if(SPI_ETH_READ_EN)
 8001462:	4b87      	ldr	r3, [pc, #540]	; (8001680 <SysTick_Handler+0x330>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 83a3 	beq.w	8001bb2 <SysTick_Handler+0x862>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 800146c:	2100      	movs	r1, #0
 800146e:	487e      	ldr	r0, [pc, #504]	; (8001668 <SysTick_Handler+0x318>)
 8001470:	f00c f8a4 	bl	800d5bc <eth_rd_SOCKET_STAT>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <SysTick_Handler+0x318>)
 800147a:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 800147c:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <SysTick_Handler+0x318>)
 800147e:	7b9b      	ldrb	r3, [r3, #14]
 8001480:	2b5f      	cmp	r3, #95	; 0x5f
 8001482:	f200 83ca 	bhi.w	8001c1a <SysTick_Handler+0x8ca>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <SysTick_Handler+0x13c>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	0800160d 	.word	0x0800160d
 8001490:	08001c1b 	.word	0x08001c1b
 8001494:	08001c1b 	.word	0x08001c1b
 8001498:	08001c1b 	.word	0x08001c1b
 800149c:	08001c1b 	.word	0x08001c1b
 80014a0:	08001c1b 	.word	0x08001c1b
 80014a4:	08001c1b 	.word	0x08001c1b
 80014a8:	08001c1b 	.word	0x08001c1b
 80014ac:	08001c1b 	.word	0x08001c1b
 80014b0:	08001c1b 	.word	0x08001c1b
 80014b4:	08001c1b 	.word	0x08001c1b
 80014b8:	08001c1b 	.word	0x08001c1b
 80014bc:	08001c1b 	.word	0x08001c1b
 80014c0:	08001c1b 	.word	0x08001c1b
 80014c4:	08001c1b 	.word	0x08001c1b
 80014c8:	08001c1b 	.word	0x08001c1b
 80014cc:	08001c1b 	.word	0x08001c1b
 80014d0:	08001c1b 	.word	0x08001c1b
 80014d4:	08001c1b 	.word	0x08001c1b
 80014d8:	0800168d 	.word	0x0800168d
 80014dc:	080016df 	.word	0x080016df
 80014e0:	080016f7 	.word	0x080016f7
 80014e4:	0800170f 	.word	0x0800170f
 80014e8:	08001727 	.word	0x08001727
 80014ec:	08001a87 	.word	0x08001a87
 80014f0:	08001c1b 	.word	0x08001c1b
 80014f4:	08001a9f 	.word	0x08001a9f
 80014f8:	08001ab7 	.word	0x08001ab7
 80014fc:	08001af5 	.word	0x08001af5
 8001500:	08001b33 	.word	0x08001b33
 8001504:	08001c1b 	.word	0x08001c1b
 8001508:	08001c1b 	.word	0x08001c1b
 800150c:	08001c1b 	.word	0x08001c1b
 8001510:	08001c1b 	.word	0x08001c1b
 8001514:	08001b4b 	.word	0x08001b4b
 8001518:	08001c1b 	.word	0x08001c1b
 800151c:	08001c1b 	.word	0x08001c1b
 8001520:	08001c1b 	.word	0x08001c1b
 8001524:	08001c1b 	.word	0x08001c1b
 8001528:	08001c1b 	.word	0x08001c1b
 800152c:	08001c1b 	.word	0x08001c1b
 8001530:	08001c1b 	.word	0x08001c1b
 8001534:	08001c1b 	.word	0x08001c1b
 8001538:	08001c1b 	.word	0x08001c1b
 800153c:	08001c1b 	.word	0x08001c1b
 8001540:	08001c1b 	.word	0x08001c1b
 8001544:	08001c1b 	.word	0x08001c1b
 8001548:	08001c1b 	.word	0x08001c1b
 800154c:	08001c1b 	.word	0x08001c1b
 8001550:	08001c1b 	.word	0x08001c1b
 8001554:	08001b63 	.word	0x08001b63
 8001558:	08001c1b 	.word	0x08001c1b
 800155c:	08001c1b 	.word	0x08001c1b
 8001560:	08001c1b 	.word	0x08001c1b
 8001564:	08001c1b 	.word	0x08001c1b
 8001568:	08001c1b 	.word	0x08001c1b
 800156c:	08001c1b 	.word	0x08001c1b
 8001570:	08001c1b 	.word	0x08001c1b
 8001574:	08001c1b 	.word	0x08001c1b
 8001578:	08001c1b 	.word	0x08001c1b
 800157c:	08001c1b 	.word	0x08001c1b
 8001580:	08001c1b 	.word	0x08001c1b
 8001584:	08001c1b 	.word	0x08001c1b
 8001588:	08001c1b 	.word	0x08001c1b
 800158c:	08001c1b 	.word	0x08001c1b
 8001590:	08001c1b 	.word	0x08001c1b
 8001594:	08001b7b 	.word	0x08001b7b
 8001598:	08001c1b 	.word	0x08001c1b
 800159c:	08001c1b 	.word	0x08001c1b
 80015a0:	08001c1b 	.word	0x08001c1b
 80015a4:	08001c1b 	.word	0x08001c1b
 80015a8:	08001c1b 	.word	0x08001c1b
 80015ac:	08001c1b 	.word	0x08001c1b
 80015b0:	08001c1b 	.word	0x08001c1b
 80015b4:	08001c1b 	.word	0x08001c1b
 80015b8:	08001c1b 	.word	0x08001c1b
 80015bc:	08001c1b 	.word	0x08001c1b
 80015c0:	08001c1b 	.word	0x08001c1b
 80015c4:	08001c1b 	.word	0x08001c1b
 80015c8:	08001c1b 	.word	0x08001c1b
 80015cc:	08001c1b 	.word	0x08001c1b
 80015d0:	08001c1b 	.word	0x08001c1b
 80015d4:	08001c1b 	.word	0x08001c1b
 80015d8:	08001c1b 	.word	0x08001c1b
 80015dc:	08001c1b 	.word	0x08001c1b
 80015e0:	08001c1b 	.word	0x08001c1b
 80015e4:	08001c1b 	.word	0x08001c1b
 80015e8:	08001c1b 	.word	0x08001c1b
 80015ec:	08001c1b 	.word	0x08001c1b
 80015f0:	08001c1b 	.word	0x08001c1b
 80015f4:	08001c1b 	.word	0x08001c1b
 80015f8:	08001c1b 	.word	0x08001c1b
 80015fc:	08001c1b 	.word	0x08001c1b
 8001600:	08001c1b 	.word	0x08001c1b
 8001604:	08001c1b 	.word	0x08001c1b
 8001608:	08001b93 	.word	0x08001b93
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));}
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <SysTick_Handler+0x334>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d103      	bne.n	800161c <SysTick_Handler+0x2cc>
 8001614:	2113      	movs	r1, #19
 8001616:	481c      	ldr	r0, [pc, #112]	; (8001688 <SysTick_Handler+0x338>)
 8001618:	f7ff fe7e 	bl	8001318 <ITM0_Write>
					 eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 800161c:	2201      	movs	r2, #1
 800161e:	2100      	movs	r1, #0
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <SysTick_Handler+0x318>)
 8001622:	f00b fee1 	bl	800d3e8 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <SysTick_Handler+0x318>)
 8001628:	899b      	ldrh	r3, [r3, #12]
 800162a:	f241 3287 	movw	r2, #4999	; 0x1387
 800162e:	4293      	cmp	r3, r2
 8001630:	f240 82c1 	bls.w	8001bb6 <SysTick_Handler+0x866>
					 {
						 ETH.ETH_WDG=0;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <SysTick_Handler+0x318>)
 8001636:	2200      	movs	r2, #0
 8001638:	819a      	strh	r2, [r3, #12]
						 eth_init(&ETH);
 800163a:	480b      	ldr	r0, [pc, #44]	; (8001668 <SysTick_Handler+0x318>)
 800163c:	f00b ff10 	bl	800d460 <eth_init>
						 eth_socket_init(&ETH,0);
 8001640:	2100      	movs	r1, #0
 8001642:	4809      	ldr	r0, [pc, #36]	; (8001668 <SysTick_Handler+0x318>)
 8001644:	f00b ff62 	bl	800d50c <eth_socket_init>
					 }

				 }
			 break;
 8001648:	e2b5      	b.n	8001bb6 <SysTick_Handler+0x866>
 800164a:	bf00      	nop
 800164c:	2000311c 	.word	0x2000311c
 8001650:	20003584 	.word	0x20003584
 8001654:	20001014 	.word	0x20001014
 8001658:	2000358c 	.word	0x2000358c
 800165c:	200002c0 	.word	0x200002c0
 8001660:	200035b4 	.word	0x200035b4
 8001664:	20003176 	.word	0x20003176
 8001668:	20001cb4 	.word	0x20001cb4
 800166c:	200035b8 	.word	0x200035b8
 8001670:	20003120 	.word	0x20003120
 8001674:	20003588 	.word	0x20003588
 8001678:	40020800 	.word	0x40020800
 800167c:	2000316c 	.word	0x2000316c
 8001680:	20003177 	.word	0x20003177
 8001684:	20000084 	.word	0x20000084
 8001688:	0800f6bc 	.word	0x0800f6bc
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 800168c:	4baa      	ldr	r3, [pc, #680]	; (8001938 <SysTick_Handler+0x5e8>)
 800168e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001696:	2b01      	cmp	r3, #1
 8001698:	d110      	bne.n	80016bc <SysTick_Handler+0x36c>
					 {
						 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));}
 800169a:	4ba8      	ldr	r3, [pc, #672]	; (800193c <SysTick_Handler+0x5ec>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d103      	bne.n	80016aa <SysTick_Handler+0x35a>
 80016a2:	2111      	movs	r1, #17
 80016a4:	48a6      	ldr	r0, [pc, #664]	; (8001940 <SysTick_Handler+0x5f0>)
 80016a6:	f7ff fe37 	bl	8001318 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 80016aa:	2202      	movs	r2, #2
 80016ac:	2100      	movs	r1, #0
 80016ae:	48a2      	ldr	r0, [pc, #648]	; (8001938 <SysTick_Handler+0x5e8>)
 80016b0:	f00b fe9a 	bl	800d3e8 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 80016b4:	4ba0      	ldr	r3, [pc, #640]	; (8001938 <SysTick_Handler+0x5e8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	819a      	strh	r2, [r3, #12]
						 	}
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 80016ba:	e2ae      	b.n	8001c1a <SysTick_Handler+0x8ca>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 80016bc:	2204      	movs	r2, #4
 80016be:	2100      	movs	r1, #0
 80016c0:	489d      	ldr	r0, [pc, #628]	; (8001938 <SysTick_Handler+0x5e8>)
 80016c2:	f00b fe91 	bl	800d3e8 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN == 1)
 80016c6:	4b9d      	ldr	r3, [pc, #628]	; (800193c <SysTick_Handler+0x5ec>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d103      	bne.n	80016d6 <SysTick_Handler+0x386>
						 		ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 80016ce:	2115      	movs	r1, #21
 80016d0:	489c      	ldr	r0, [pc, #624]	; (8001944 <SysTick_Handler+0x5f4>)
 80016d2:	f7ff fe21 	bl	8001318 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 80016d6:	4b98      	ldr	r3, [pc, #608]	; (8001938 <SysTick_Handler+0x5e8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	819a      	strh	r2, [r3, #12]
			 break;
 80016dc:	e29d      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));}
 80016de:	4b97      	ldr	r3, [pc, #604]	; (800193c <SysTick_Handler+0x5ec>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d103      	bne.n	80016ee <SysTick_Handler+0x39e>
 80016e6:	2113      	movs	r1, #19
 80016e8:	4897      	ldr	r0, [pc, #604]	; (8001948 <SysTick_Handler+0x5f8>)
 80016ea:	f7ff fe15 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80016ee:	4b92      	ldr	r3, [pc, #584]	; (8001938 <SysTick_Handler+0x5e8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80016f4:	e291      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));}
 80016f6:	4b91      	ldr	r3, [pc, #580]	; (800193c <SysTick_Handler+0x5ec>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d103      	bne.n	8001706 <SysTick_Handler+0x3b6>
 80016fe:	2114      	movs	r1, #20
 8001700:	4892      	ldr	r0, [pc, #584]	; (800194c <SysTick_Handler+0x5fc>)
 8001702:	f7ff fe09 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001706:	4b8c      	ldr	r3, [pc, #560]	; (8001938 <SysTick_Handler+0x5e8>)
 8001708:	2200      	movs	r2, #0
 800170a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 800170c:	e285      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));}
 800170e:	4b8b      	ldr	r3, [pc, #556]	; (800193c <SysTick_Handler+0x5ec>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d103      	bne.n	800171e <SysTick_Handler+0x3ce>
 8001716:	2114      	movs	r1, #20
 8001718:	488d      	ldr	r0, [pc, #564]	; (8001950 <SysTick_Handler+0x600>)
 800171a:	f7ff fdfd 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800171e:	4b86      	ldr	r3, [pc, #536]	; (8001938 <SysTick_Handler+0x5e8>)
 8001720:	2200      	movs	r2, #0
 8001722:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001724:	e279      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));}
 8001726:	4b85      	ldr	r3, [pc, #532]	; (800193c <SysTick_Handler+0x5ec>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d103      	bne.n	8001736 <SysTick_Handler+0x3e6>
 800172e:	2118      	movs	r1, #24
 8001730:	4888      	ldr	r0, [pc, #544]	; (8001954 <SysTick_Handler+0x604>)
 8001732:	f7ff fdf1 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001736:	4b80      	ldr	r3, [pc, #512]	; (8001938 <SysTick_Handler+0x5e8>)
 8001738:	2200      	movs	r2, #0
 800173a:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 800173c:	4b7e      	ldr	r3, [pc, #504]	; (8001938 <SysTick_Handler+0x5e8>)
 800173e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 8089 	bne.w	800185e <SysTick_Handler+0x50e>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800174c:	2302      	movs	r3, #2
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	4b81      	ldr	r3, [pc, #516]	; (8001958 <SysTick_Handler+0x608>)
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	230f      	movs	r3, #15
 8001756:	2226      	movs	r2, #38	; 0x26
 8001758:	2104      	movs	r1, #4
 800175a:	4877      	ldr	r0, [pc, #476]	; (8001938 <SysTick_Handler+0x5e8>)
 800175c:	f00b fd19 	bl	800d192 <SPI_ETH_REG>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b7d      	ldr	r3, [pc, #500]	; (800195c <SysTick_Handler+0x60c>)
 8001766:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001768:	4b7c      	ldr	r3, [pc, #496]	; (800195c <SysTick_Handler+0x60c>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 8253 	beq.w	8001c18 <SysTick_Handler+0x8c8>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001772:	4b7a      	ldr	r3, [pc, #488]	; (800195c <SysTick_Handler+0x60c>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	4a7a      	ldr	r2, [pc, #488]	; (8001960 <SysTick_Handler+0x610>)
 8001778:	2100      	movs	r1, #0
 800177a:	486f      	ldr	r0, [pc, #444]	; (8001938 <SysTick_Handler+0x5e8>)
 800177c:	f00b ff58 	bl	800d630 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001780:	4b77      	ldr	r3, [pc, #476]	; (8001960 <SysTick_Handler+0x610>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	f44f 6185 	mov.w	r1, #1064	; 0x428
 800178a:	486b      	ldr	r0, [pc, #428]	; (8001938 <SysTick_Handler+0x5e8>)
 800178c:	f00b fd79 	bl	800d282 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	2100      	movs	r1, #0
 8001794:	4868      	ldr	r0, [pc, #416]	; (8001938 <SysTick_Handler+0x5e8>)
 8001796:	f00b fe27 	bl	800d3e8 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 800179a:	bf00      	nop
 800179c:	2100      	movs	r1, #0
 800179e:	4866      	ldr	r0, [pc, #408]	; (8001938 <SysTick_Handler+0x5e8>)
 80017a0:	f00b ff29 	bl	800d5f6 <eth_rd_SOCKET_CMD>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f8      	bne.n	800179c <SysTick_Handler+0x44c>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80017aa:	4b6c      	ldr	r3, [pc, #432]	; (800195c <SysTick_Handler+0x60c>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2300      	movs	r3, #0
 80017b6:	496b      	ldr	r1, [pc, #428]	; (8001964 <SysTick_Handler+0x614>)
 80017b8:	486b      	ldr	r0, [pc, #428]	; (8001968 <SysTick_Handler+0x618>)
 80017ba:	f00c fc69 	bl	800e090 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80017be:	4b67      	ldr	r3, [pc, #412]	; (800195c <SysTick_Handler+0x60c>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b69      	ldr	r3, [pc, #420]	; (800196c <SysTick_Handler+0x61c>)
 80017c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 80017ca:	4b64      	ldr	r3, [pc, #400]	; (800195c <SysTick_Handler+0x60c>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <SysTick_Handler+0x488>
 80017d2:	4b59      	ldr	r3, [pc, #356]	; (8001938 <SysTick_Handler+0x5e8>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 80017d8:	4b64      	ldr	r3, [pc, #400]	; (800196c <SysTick_Handler+0x61c>)
 80017da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80017de:	4619      	mov	r1, r3
 80017e0:	4861      	ldr	r0, [pc, #388]	; (8001968 <SysTick_Handler+0x618>)
 80017e2:	f00a f9c5 	bl	800bb70 <ModBUS_Check>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00d      	beq.n	8001808 <SysTick_Handler+0x4b8>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 80017ec:	485f      	ldr	r0, [pc, #380]	; (800196c <SysTick_Handler+0x61c>)
 80017ee:	f00a fabf 	bl	800bd70 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 80017f2:	4b5e      	ldr	r3, [pc, #376]	; (800196c <SysTick_Handler+0x61c>)
 80017f4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80017f8:	2300      	movs	r3, #0
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2300      	movs	r3, #0
 80017fe:	495c      	ldr	r1, [pc, #368]	; (8001970 <SysTick_Handler+0x620>)
 8001800:	4858      	ldr	r0, [pc, #352]	; (8001964 <SysTick_Handler+0x614>)
 8001802:	f00c fc45 	bl	800e090 <CopiaVector>
 8001806:	e007      	b.n	8001818 <SysTick_Handler+0x4c8>
								}
								else
								{
									if (ETH_DBG_EN == 1) {ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));}
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <SysTick_Handler+0x5ec>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d103      	bne.n	8001818 <SysTick_Handler+0x4c8>
 8001810:	2111      	movs	r1, #17
 8001812:	4858      	ldr	r0, [pc, #352]	; (8001974 <SysTick_Handler+0x624>)
 8001814:	f7ff fd80 	bl	8001318 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001818:	4b54      	ldr	r3, [pc, #336]	; (800196c <SysTick_Handler+0x61c>)
 800181a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <SysTick_Handler+0x628>)
 8001822:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001824:	4b54      	ldr	r3, [pc, #336]	; (8001978 <SysTick_Handler+0x628>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	4a54      	ldr	r2, [pc, #336]	; (800197c <SysTick_Handler+0x62c>)
 800182a:	2100      	movs	r1, #0
 800182c:	4842      	ldr	r0, [pc, #264]	; (8001938 <SysTick_Handler+0x5e8>)
 800182e:	f00b ffcf 	bl	800d7d0 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001832:	4b52      	ldr	r3, [pc, #328]	; (800197c <SysTick_Handler+0x62c>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	f240 4124 	movw	r1, #1060	; 0x424
 800183c:	483e      	ldr	r0, [pc, #248]	; (8001938 <SysTick_Handler+0x5e8>)
 800183e:	f00b fd20 	bl	800d282 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001842:	2220      	movs	r2, #32
 8001844:	2100      	movs	r1, #0
 8001846:	483c      	ldr	r0, [pc, #240]	; (8001938 <SysTick_Handler+0x5e8>)
 8001848:	f00b fdce 	bl	800d3e8 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 800184c:	bf00      	nop
 800184e:	2100      	movs	r1, #0
 8001850:	4839      	ldr	r0, [pc, #228]	; (8001938 <SysTick_Handler+0x5e8>)
 8001852:	f00b fed0 	bl	800d5f6 <eth_rd_SOCKET_CMD>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f8      	bne.n	800184e <SysTick_Handler+0x4fe>

							}
						}
					}
				 }
			 break;
 800185c:	e1dc      	b.n	8001c18 <SysTick_Handler+0x8c8>
						if (mb_eth._w_answer==0)
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <SysTick_Handler+0x61c>)
 8001860:	7a1b      	ldrb	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8090 	bne.w	8001988 <SysTick_Handler+0x638>
							ETH.data[0]=0x00;
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <SysTick_Handler+0x5e8>)
 800186a:	2200      	movs	r2, #0
 800186c:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <SysTick_Handler+0x5e8>)
 8001870:	2200      	movs	r2, #0
 8001872:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <SysTick_Handler+0x5e8>)
 8001876:	2200      	movs	r2, #0
 8001878:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <SysTick_Handler+0x5e8>)
 800187c:	2200      	movs	r2, #0
 800187e:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <SysTick_Handler+0x5e8>)
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <SysTick_Handler+0x5e8>)
 800188a:	2206      	movs	r2, #6
 800188c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <SysTick_Handler+0x5e8>)
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <SysTick_Handler+0x5e8>)
 800189a:	2203      	movs	r2, #3
 800189c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <SysTick_Handler+0x5e8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <SysTick_Handler+0x5e8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <SysTick_Handler+0x5e8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <SysTick_Handler+0x5e8>)
 80018ba:	220a      	movs	r2, #10
 80018bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <SysTick_Handler+0x628>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 80018c6:	220f      	movs	r2, #15
 80018c8:	2100      	movs	r1, #0
 80018ca:	4828      	ldr	r0, [pc, #160]	; (800196c <SysTick_Handler+0x61c>)
 80018cc:	f00a f9f9 	bl	800bcc2 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 80018d0:	2300      	movs	r3, #0
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	220c      	movs	r2, #12
 80018d8:	4925      	ldr	r1, [pc, #148]	; (8001970 <SysTick_Handler+0x620>)
 80018da:	4822      	ldr	r0, [pc, #136]	; (8001964 <SysTick_Handler+0x614>)
 80018dc:	f00c fbd8 	bl	800e090 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <SysTick_Handler+0x628>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	4a25      	ldr	r2, [pc, #148]	; (800197c <SysTick_Handler+0x62c>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4813      	ldr	r0, [pc, #76]	; (8001938 <SysTick_Handler+0x5e8>)
 80018ea:	f00b ff71 	bl	800d7d0 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 80018ee:	4b23      	ldr	r3, [pc, #140]	; (800197c <SysTick_Handler+0x62c>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	f240 4124 	movw	r1, #1060	; 0x424
 80018f8:	480f      	ldr	r0, [pc, #60]	; (8001938 <SysTick_Handler+0x5e8>)
 80018fa:	f00b fcc2 	bl	800d282 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 80018fe:	2220      	movs	r2, #32
 8001900:	2100      	movs	r1, #0
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <SysTick_Handler+0x5e8>)
 8001904:	f00b fd70 	bl	800d3e8 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001908:	bf00      	nop
 800190a:	2100      	movs	r1, #0
 800190c:	480a      	ldr	r0, [pc, #40]	; (8001938 <SysTick_Handler+0x5e8>)
 800190e:	f00b fe72 	bl	800d5f6 <eth_rd_SOCKET_CMD>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f8      	bne.n	800190a <SysTick_Handler+0x5ba>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <SysTick_Handler+0x61c>)
 800191a:	2201      	movs	r2, #1
 800191c:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <SysTick_Handler+0x630>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN == 1) {ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));}
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Handler+0x5ec>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	f040 8175 	bne.w	8001c18 <SysTick_Handler+0x8c8>
 800192e:	2117      	movs	r1, #23
 8001930:	4814      	ldr	r0, [pc, #80]	; (8001984 <SysTick_Handler+0x634>)
 8001932:	f7ff fcf1 	bl	8001318 <ITM0_Write>
			 break;
 8001936:	e16f      	b.n	8001c18 <SysTick_Handler+0x8c8>
 8001938:	20001cb4 	.word	0x20001cb4
 800193c:	20000084 	.word	0x20000084
 8001940:	0800f6d0 	.word	0x0800f6d0
 8001944:	0800f6e4 	.word	0x0800f6e4
 8001948:	0800f6fc 	.word	0x0800f6fc
 800194c:	0800f710 	.word	0x0800f710
 8001950:	0800f728 	.word	0x0800f728
 8001954:	0800f740 	.word	0x0800f740
 8001958:	2000312c 	.word	0x2000312c
 800195c:	20003124 	.word	0x20003124
 8001960:	20003128 	.word	0x20003128
 8001964:	20001cd0 	.word	0x20001cd0
 8001968:	20001026 	.word	0x20001026
 800196c:	20001014 	.word	0x20001014
 8001970:	2000122c 	.word	0x2000122c
 8001974:	0800f75c 	.word	0x0800f75c
 8001978:	2000312a 	.word	0x2000312a
 800197c:	20003126 	.word	0x20003126
 8001980:	2000358c 	.word	0x2000358c
 8001984:	0800f76c 	.word	0x0800f76c
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001988:	2302      	movs	r3, #2
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	4b8b      	ldr	r3, [pc, #556]	; (8001bbc <SysTick_Handler+0x86c>)
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	230f      	movs	r3, #15
 8001992:	2226      	movs	r2, #38	; 0x26
 8001994:	2104      	movs	r1, #4
 8001996:	488a      	ldr	r0, [pc, #552]	; (8001bc0 <SysTick_Handler+0x870>)
 8001998:	f00b fbfb 	bl	800d192 <SPI_ETH_REG>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <SysTick_Handler+0x874>)
 80019a2:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80019a4:	4b87      	ldr	r3, [pc, #540]	; (8001bc4 <SysTick_Handler+0x874>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8135 	beq.w	8001c18 <SysTick_Handler+0x8c8>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80019ae:	4b85      	ldr	r3, [pc, #532]	; (8001bc4 <SysTick_Handler+0x874>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	4a85      	ldr	r2, [pc, #532]	; (8001bc8 <SysTick_Handler+0x878>)
 80019b4:	2100      	movs	r1, #0
 80019b6:	4882      	ldr	r0, [pc, #520]	; (8001bc0 <SysTick_Handler+0x870>)
 80019b8:	f00b fe3a 	bl	800d630 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 80019bc:	4b82      	ldr	r3, [pc, #520]	; (8001bc8 <SysTick_Handler+0x878>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80019c6:	487e      	ldr	r0, [pc, #504]	; (8001bc0 <SysTick_Handler+0x870>)
 80019c8:	f00b fc5b 	bl	800d282 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 80019cc:	2240      	movs	r2, #64	; 0x40
 80019ce:	2100      	movs	r1, #0
 80019d0:	487b      	ldr	r0, [pc, #492]	; (8001bc0 <SysTick_Handler+0x870>)
 80019d2:	f00b fd09 	bl	800d3e8 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80019d6:	bf00      	nop
 80019d8:	2100      	movs	r1, #0
 80019da:	4879      	ldr	r0, [pc, #484]	; (8001bc0 <SysTick_Handler+0x870>)
 80019dc:	f00b fe0b 	bl	800d5f6 <eth_rd_SOCKET_CMD>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f8      	bne.n	80019d8 <SysTick_Handler+0x688>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80019e6:	4b77      	ldr	r3, [pc, #476]	; (8001bc4 <SysTick_Handler+0x874>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	4976      	ldr	r1, [pc, #472]	; (8001bcc <SysTick_Handler+0x87c>)
 80019f4:	4876      	ldr	r0, [pc, #472]	; (8001bd0 <SysTick_Handler+0x880>)
 80019f6:	f00c fb4b 	bl	800e090 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80019fa:	4b72      	ldr	r3, [pc, #456]	; (8001bc4 <SysTick_Handler+0x874>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b74      	ldr	r3, [pc, #464]	; (8001bd4 <SysTick_Handler+0x884>)
 8001a02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001a06:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <SysTick_Handler+0x874>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <SysTick_Handler+0x6c4>
 8001a0e:	4b6c      	ldr	r3, [pc, #432]	; (8001bc0 <SysTick_Handler+0x870>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a14:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <SysTick_Handler+0x884>)
 8001a16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	486c      	ldr	r0, [pc, #432]	; (8001bd0 <SysTick_Handler+0x880>)
 8001a1e:	f00a f8a7 	bl	800bb70 <ModBUS_Check>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d024      	beq.n	8001a72 <SysTick_Handler+0x722>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001a28:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <SysTick_Handler+0x884>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <SysTick_Handler+0x888>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a34:	4867      	ldr	r0, [pc, #412]	; (8001bd4 <SysTick_Handler+0x884>)
 8001a36:	f00a f99b 	bl	800bd70 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001a3a:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <SysTick_Handler+0x884>)
 8001a3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2300      	movs	r3, #0
 8001a46:	4962      	ldr	r1, [pc, #392]	; (8001bd0 <SysTick_Handler+0x880>)
 8001a48:	4864      	ldr	r0, [pc, #400]	; (8001bdc <SysTick_Handler+0x88c>)
 8001a4a:	f00c fb21 	bl	800e090 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2300      	movs	r3, #0
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	4962      	ldr	r1, [pc, #392]	; (8001be0 <SysTick_Handler+0x890>)
 8001a58:	4862      	ldr	r0, [pc, #392]	; (8001be4 <SysTick_Handler+0x894>)
 8001a5a:	f00c fb19 	bl	800e090 <CopiaVector>
										if (ETH_DBG_EN == 1) {ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));}
 8001a5e:	4b62      	ldr	r3, [pc, #392]	; (8001be8 <SysTick_Handler+0x898>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	f040 80d8 	bne.w	8001c18 <SysTick_Handler+0x8c8>
 8001a68:	2117      	movs	r1, #23
 8001a6a:	4860      	ldr	r0, [pc, #384]	; (8001bec <SysTick_Handler+0x89c>)
 8001a6c:	f7ff fc54 	bl	8001318 <ITM0_Write>
			 break;
 8001a70:	e0d2      	b.n	8001c18 <SysTick_Handler+0x8c8>
										if (ETH_DBG_EN == 1) {ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));}
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <SysTick_Handler+0x898>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	f040 80ce 	bne.w	8001c18 <SysTick_Handler+0x8c8>
 8001a7c:	2111      	movs	r1, #17
 8001a7e:	485c      	ldr	r0, [pc, #368]	; (8001bf0 <SysTick_Handler+0x8a0>)
 8001a80:	f7ff fc4a 	bl	8001318 <ITM0_Write>
			 break;
 8001a84:	e0c8      	b.n	8001c18 <SysTick_Handler+0x8c8>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));}
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <SysTick_Handler+0x898>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d103      	bne.n	8001a96 <SysTick_Handler+0x746>
 8001a8e:	2115      	movs	r1, #21
 8001a90:	4858      	ldr	r0, [pc, #352]	; (8001bf4 <SysTick_Handler+0x8a4>)
 8001a92:	f7ff fc41 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <SysTick_Handler+0x870>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a9c:	e0bd      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));}
 8001a9e:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <SysTick_Handler+0x898>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d103      	bne.n	8001aae <SysTick_Handler+0x75e>
 8001aa6:	2114      	movs	r1, #20
 8001aa8:	4853      	ldr	r0, [pc, #332]	; (8001bf8 <SysTick_Handler+0x8a8>)
 8001aaa:	f7ff fc35 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <SysTick_Handler+0x870>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ab4:	e0b1      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));}
 8001ab6:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <SysTick_Handler+0x898>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d103      	bne.n	8001ac6 <SysTick_Handler+0x776>
 8001abe:	2116      	movs	r1, #22
 8001ac0:	484e      	ldr	r0, [pc, #312]	; (8001bfc <SysTick_Handler+0x8ac>)
 8001ac2:	f7ff fc29 	bl	8001318 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	2100      	movs	r1, #0
 8001aca:	483d      	ldr	r0, [pc, #244]	; (8001bc0 <SysTick_Handler+0x870>)
 8001acc:	f00b fc8c 	bl	800d3e8 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ad0:	bf00      	nop
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <SysTick_Handler+0x86c>)
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	230f      	movs	r3, #15
 8001adc:	2201      	movs	r2, #1
 8001ade:	2104      	movs	r1, #4
 8001ae0:	4837      	ldr	r0, [pc, #220]	; (8001bc0 <SysTick_Handler+0x870>)
 8001ae2:	f00b fb56 	bl	800d192 <SPI_ETH_REG>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f2      	bne.n	8001ad2 <SysTick_Handler+0x782>
					{}
					ETH.ETH_WDG=0;
 8001aec:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <SysTick_Handler+0x870>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001af2:	e092      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));}
 8001af4:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <SysTick_Handler+0x898>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d103      	bne.n	8001b04 <SysTick_Handler+0x7b4>
 8001afc:	2117      	movs	r1, #23
 8001afe:	4840      	ldr	r0, [pc, #256]	; (8001c00 <SysTick_Handler+0x8b0>)
 8001b00:	f7ff fc0a 	bl	8001318 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001b04:	2208      	movs	r2, #8
 8001b06:	2100      	movs	r1, #0
 8001b08:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <SysTick_Handler+0x870>)
 8001b0a:	f00b fc6d 	bl	800d3e8 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001b0e:	bf00      	nop
 8001b10:	2301      	movs	r3, #1
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <SysTick_Handler+0x86c>)
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	230f      	movs	r3, #15
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	4828      	ldr	r0, [pc, #160]	; (8001bc0 <SysTick_Handler+0x870>)
 8001b20:	f00b fb37 	bl	800d192 <SPI_ETH_REG>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f2      	bne.n	8001b10 <SysTick_Handler+0x7c0>
					{}
					ETH.ETH_WDG=0;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <SysTick_Handler+0x870>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b30:	e073      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN == 1)
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <SysTick_Handler+0x898>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d103      	bne.n	8001b42 <SysTick_Handler+0x7f2>
					 {
						 ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001b3a:	2115      	movs	r1, #21
 8001b3c:	4831      	ldr	r0, [pc, #196]	; (8001c04 <SysTick_Handler+0x8b4>)
 8001b3e:	f7ff fbeb 	bl	8001318 <ITM0_Write>
					 }
					 ETH.ETH_WDG=0;
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <SysTick_Handler+0x870>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b48:	e067      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN == 1){ ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));}
 8001b4a:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <SysTick_Handler+0x898>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d103      	bne.n	8001b5a <SysTick_Handler+0x80a>
 8001b52:	2110      	movs	r1, #16
 8001b54:	482c      	ldr	r0, [pc, #176]	; (8001c08 <SysTick_Handler+0x8b8>)
 8001b56:	f7ff fbdf 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <SysTick_Handler+0x870>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b60:	e05b      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));}
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <SysTick_Handler+0x898>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d103      	bne.n	8001b72 <SysTick_Handler+0x822>
 8001b6a:	2112      	movs	r1, #18
 8001b6c:	4827      	ldr	r0, [pc, #156]	; (8001c0c <SysTick_Handler+0x8bc>)
 8001b6e:	f7ff fbd3 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <SysTick_Handler+0x870>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b78:	e04f      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));}
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <SysTick_Handler+0x898>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d103      	bne.n	8001b8a <SysTick_Handler+0x83a>
 8001b82:	2113      	movs	r1, #19
 8001b84:	4822      	ldr	r0, [pc, #136]	; (8001c10 <SysTick_Handler+0x8c0>)
 8001b86:	f7ff fbc7 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <SysTick_Handler+0x870>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b90:	e043      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));}
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <SysTick_Handler+0x898>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d103      	bne.n	8001ba2 <SysTick_Handler+0x852>
 8001b9a:	2111      	movs	r1, #17
 8001b9c:	481d      	ldr	r0, [pc, #116]	; (8001c14 <SysTick_Handler+0x8c4>)
 8001b9e:	f7ff fbbb 	bl	8001318 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <SysTick_Handler+0x870>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ba8:	e037      	b.n	8001c1a <SysTick_Handler+0x8ca>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <SysTick_Handler+0x870>)
 8001bac:	f00b faca 	bl	800d144 <SPI_ETH>
 8001bb0:	e033      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 default:
 8001bb2:	bf00      	nop
 8001bb4:	e031      	b.n	8001c1a <SysTick_Handler+0x8ca>
			 break;
 8001bb6:	bf00      	nop
 8001bb8:	e02f      	b.n	8001c1a <SysTick_Handler+0x8ca>
 8001bba:	bf00      	nop
 8001bbc:	2000312c 	.word	0x2000312c
 8001bc0:	20001cb4 	.word	0x20001cb4
 8001bc4:	20003124 	.word	0x20003124
 8001bc8:	20003128 	.word	0x20003128
 8001bcc:	20001cd0 	.word	0x20001cd0
 8001bd0:	20001026 	.word	0x20001026
 8001bd4:	20001014 	.word	0x20001014
 8001bd8:	2000358c 	.word	0x2000358c
 8001bdc:	200024d0 	.word	0x200024d0
 8001be0:	20001438 	.word	0x20001438
 8001be4:	20001a88 	.word	0x20001a88
 8001be8:	20000084 	.word	0x20000084
 8001bec:	0800f780 	.word	0x0800f780
 8001bf0:	0800f75c 	.word	0x0800f75c
 8001bf4:	0800f794 	.word	0x0800f794
 8001bf8:	0800f7ac 	.word	0x0800f7ac
 8001bfc:	0800f7c4 	.word	0x0800f7c4
 8001c00:	0800f7dc 	.word	0x0800f7dc
 8001c04:	0800f7f4 	.word	0x0800f7f4
 8001c08:	0800f80c 	.word	0x0800f80c
 8001c0c:	0800f820 	.word	0x0800f820
 8001c10:	0800f834 	.word	0x0800f834
 8001c14:	0800f848 	.word	0x0800f848
			 break;
 8001c18:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <SysTick_Handler+0x9fc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d102      	bne.n	8001c28 <SysTick_Handler+0x8d8>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <SysTick_Handler+0x9fc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001c28:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <SysTick_Handler+0xa00>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d104      	bne.n	8001c3a <SysTick_Handler+0x8ea>
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <SysTick_Handler+0xa04>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4a47      	ldr	r2, [pc, #284]	; (8001d54 <SysTick_Handler+0xa04>)
 8001c38:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <SysTick_Handler+0xa04>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	dd0f      	ble.n	8001c62 <SysTick_Handler+0x912>
	{
		USART1_ticks=0;
 8001c42:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <SysTick_Handler+0xa04>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001c48:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <SysTick_Handler+0xa08>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001c4e:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <SysTick_Handler+0xa00>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001c54:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <SysTick_Handler+0xa0c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a41      	ldr	r2, [pc, #260]	; (8001d60 <SysTick_Handler+0xa10>)
 8001c5a:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <SysTick_Handler+0xa0c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c62:	f000 fd39 	bl	80026d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//Solo cuento cuando no estahaciendo otra cosa
 8001c66:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <SysTick_Handler+0xa14>)
 8001c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d105      	bne.n	8001c7c <SysTick_Handler+0x92c>
	{
		ticks++;
 8001c70:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <SysTick_Handler+0xa18>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	4a3c      	ldr	r2, [pc, #240]	; (8001d68 <SysTick_Handler+0xa18>)
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e002      	b.n	8001c82 <SysTick_Handler+0x932>
	}
	else
	{
		ticks=0;
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <SysTick_Handler+0xa18>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <SysTick_Handler+0xa14>)
 8001c84:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d158      	bne.n	8001d3e <SysTick_Handler+0x9ee>
	{
		if (FLAG_TIMEOUT_WF!=1)
 8001c8c:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <SysTick_Handler+0xa1c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d017      	beq.n	8001cc4 <SysTick_Handler+0x974>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001c94:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <SysTick_Handler+0xa14>)
 8001c96:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d006      	beq.n	8001cac <SysTick_Handler+0x95c>
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <SysTick_Handler+0xa14>)
 8001ca0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a2f      	ldr	r2, [pc, #188]	; (8001d64 <SysTick_Handler+0xa14>)
 8001ca8:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <SysTick_Handler+0xa14>)
 8001cae:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d106      	bne.n	8001cc4 <SysTick_Handler+0x974>
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <SysTick_Handler+0xa14>)
 8001cb8:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <SysTick_Handler+0xa14>)
 8001cc0:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <SysTick_Handler+0xa14>)
 8001cc6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d018      	beq.n	8001d00 <SysTick_Handler+0x9b0>
 8001cce:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <SysTick_Handler+0xa14>)
 8001cd0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001cd4:	f241 527c 	movw	r2, #5500	; 0x157c
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	dd11      	ble.n	8001d00 <SysTick_Handler+0x9b0>
		{
			FLAG_TIMEOUT_WF=1;
 8001cdc:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <SysTick_Handler+0xa1c>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <SysTick_Handler+0xa20>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f242 020c 	movw	r2, #8204	; 0x200c
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d107      	bne.n	8001d00 <SysTick_Handler+0x9b0>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4920      	ldr	r1, [pc, #128]	; (8001d74 <SysTick_Handler+0xa24>)
 8001cf4:	481e      	ldr	r0, [pc, #120]	; (8001d70 <SysTick_Handler+0xa20>)
 8001cf6:	f003 fa9a 	bl	800522e <HAL_UART_Receive_IT>
				EN_UART1_WF_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <SysTick_Handler+0xa28>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
			}
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <SysTick_Handler+0xa14>)
 8001d02:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d11d      	bne.n	8001d46 <SysTick_Handler+0x9f6>
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <SysTick_Handler+0xa14>)
 8001d0c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001d10:	f245 0214 	movw	r2, #20500	; 0x5014
 8001d14:	4293      	cmp	r3, r2
 8001d16:	dd16      	ble.n	8001d46 <SysTick_Handler+0x9f6>
		{
			FLAG_TIMEOUT_WF=1;
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <SysTick_Handler+0xa1c>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <SysTick_Handler+0xa20>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f242 020c 	movw	r2, #8204	; 0x200c
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d10c      	bne.n	8001d46 <SysTick_Handler+0x9f6>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4911      	ldr	r1, [pc, #68]	; (8001d74 <SysTick_Handler+0xa24>)
 8001d30:	480f      	ldr	r0, [pc, #60]	; (8001d70 <SysTick_Handler+0xa20>)
 8001d32:	f003 fa7c 	bl	800522e <HAL_UART_Receive_IT>
				EN_UART1_WF_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <SysTick_Handler+0xa28>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3c:	e003      	b.n	8001d46 <SysTick_Handler+0x9f6>
		wf._ticks=0;
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <SysTick_Handler+0xa14>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20003120 	.word	0x20003120
 8001d50:	20003171 	.word	0x20003171
 8001d54:	200035a0 	.word	0x200035a0
 8001d58:	200035a4 	.word	0x200035a4
 8001d5c:	2000359c 	.word	0x2000359c
 8001d60:	200035a8 	.word	0x200035a8
 8001d64:	200002c0 	.word	0x200002c0
 8001d68:	20003590 	.word	0x20003590
 8001d6c:	20003172 	.word	0x20003172
 8001d70:	20000238 	.word	0x20000238
 8001d74:	2000357c 	.word	0x2000357c
 8001d78:	20003170 	.word	0x20003170

08001d7c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a22      	ldr	r2, [pc, #136]	; (8001e14 <HAL_UART_ErrorCallback+0x98>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]

			 wf._debug_count9++;
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_UART_ErrorCallback+0x9c>)
 8001d98:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	4a1e      	ldr	r2, [pc, #120]	; (8001e18 <HAL_UART_ErrorCallback+0x9c>)
 8001da0:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	613b      	str	r3, [r7, #16]

		 HAL_UART_DeInit(ERRUART);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f003 f934 	bl	8005022 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8001dba:	f7ff f9d1 	bl	8001160 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART1_WF_RX_byte,1);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4916      	ldr	r1, [pc, #88]	; (8001e1c <HAL_UART_ErrorCallback+0xa0>)
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f003 fa33 	bl	800522e <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <HAL_UART_ErrorCallback+0xa4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d11c      	bne.n	8001e0c <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]

			 wf._debug_count9++;
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_UART_ErrorCallback+0x9c>)
 8001ddc:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001de0:	3301      	adds	r3, #1
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <HAL_UART_ErrorCallback+0x9c>)
 8001de4:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	60bb      	str	r3, [r7, #8]

		 HAL_UART_DeInit(ERRUART);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f003 f912 	bl	8005022 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8001dfe:	f7ff f9d9 	bl	80011b4 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART1_WF_RX_byte,1);
 8001e02:	2201      	movs	r2, #1
 8001e04:	4905      	ldr	r1, [pc, #20]	; (8001e1c <HAL_UART_ErrorCallback+0xa0>)
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f003 fa11 	bl	800522e <HAL_UART_Receive_IT>
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40011000 	.word	0x40011000
 8001e18:	200002c0 	.word	0x200002c0
 8001e1c:	2000357c 	.word	0x2000357c
 8001e20:	40004400 	.word	0x40004400

08001e24 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <HAL_UART_RxCpltCallback+0x64>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d123      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART1_WF_RX_vect[UART1_WF_RX_pos]=UART1_WF_RX_byte[0];
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_UART_RxCpltCallback+0x68>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <HAL_UART_RxCpltCallback+0x6c>)
 8001e3c:	7811      	ldrb	r1, [r2, #0]
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_UART_RxCpltCallback+0x70>)
 8001e40:	54d1      	strb	r1, [r2, r3]
			UART1_WF_RX_pos++;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_UART_RxCpltCallback+0x68>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_UART_RxCpltCallback+0x68>)
 8001e4a:	6013      	str	r3, [r2, #0]
			if(UART1_WF_RX_pos>=512) UART1_WF_RX_pos=512;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_UART_RxCpltCallback+0x68>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e54:	db03      	blt.n	8001e5e <HAL_UART_RxCpltCallback+0x3a>
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_UART_RxCpltCallback+0x68>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001e5e:	2100      	movs	r1, #0
 8001e60:	480d      	ldr	r0, [pc, #52]	; (8001e98 <HAL_UART_RxCpltCallback+0x74>)
 8001e62:	f002 f8e5 	bl	8004030 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8001e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_WF_TMR=1;	//Habilito Timeout de software
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_UART_RxCpltCallback+0x78>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART1_WF_RX_byte,1);
 8001e74:	2201      	movs	r2, #1
 8001e76:	4906      	ldr	r1, [pc, #24]	; (8001e90 <HAL_UART_RxCpltCallback+0x6c>)
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f003 f9d8 	bl	800522e <HAL_UART_Receive_IT>
		 }
 }
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	200035ac 	.word	0x200035ac
 8001e90:	2000357c 	.word	0x2000357c
 8001e94:	20003178 	.word	0x20003178
 8001e98:	200001f0 	.word	0x200001f0
 8001e9c:	20003170 	.word	0x20003170

08001ea0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	6078      	str	r0, [r7, #4]
		if(TIMER->Instance==TIM2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb0:	d139      	bne.n	8001f26 <HAL_TIM_OC_DelayElapsedCallback+0x86>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f002 f9b9 	bl	800422c <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1_WF=1;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
				 EN_UART1_WF_TMR=0;
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
				 UART1_WF_RX_items=UART1_WF_RX_pos;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ecc:	6013      	str	r3, [r2, #0]
				 UART1_WF_RX_pos=0;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
				 UART1_WF_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART1_WF_RX_vect_hld,UART1_WF_RX_vect,UART1_WF_RX_items,1,CMP_VECT);
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	4916      	ldr	r1, [pc, #88]	; (8001f40 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001ee8:	4817      	ldr	r0, [pc, #92]	; (8001f48 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001eea:	f00c f8d1 	bl	800e090 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4916      	ldr	r1, [pc, #88]	; (8001f4c <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001ef2:	4817      	ldr	r0, [pc, #92]	; (8001f50 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8001ef4:	f003 f99b 	bl	800522e <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)ITM0_Write((uint8_t *)UART1_WF_RX_vect_hld,UART1_WF_RX_items);
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001efa:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d105      	bne.n	8001f0e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	480f      	ldr	r0, [pc, #60]	; (8001f48 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001f0a:	f7ff fa05 	bl	8001318 <ITM0_Write>

				 if (WF_SER_DBG==1)HAL_UART_Transmit_IT(&huart2,(uint8_t *)UART1_WF_RX_vect_hld,UART1_WF_RX_items);
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_TIM_OC_DelayElapsedCallback+0x86>
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	490a      	ldr	r1, [pc, #40]	; (8001f48 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001f20:	480e      	ldr	r0, [pc, #56]	; (8001f5c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8001f22:	f003 f93f 	bl	80051a4 <HAL_UART_Transmit_IT>

		}
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20003173 	.word	0x20003173
 8001f34:	20003170 	.word	0x20003170
 8001f38:	200035ac 	.word	0x200035ac
 8001f3c:	20003580 	.word	0x20003580
 8001f40:	20003178 	.word	0x20003178
 8001f44:	20003578 	.word	0x20003578
 8001f48:	20003378 	.word	0x20003378
 8001f4c:	2000357c 	.word	0x2000357c
 8001f50:	20000238 	.word	0x20000238
 8001f54:	200002c0 	.word	0x200002c0
 8001f58:	200035b0 	.word	0x200035b0
 8001f5c:	2000027c 	.word	0x2000027c

08001f60 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <ESP8266_HW_Reset+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f70:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <ESP8266_HW_Reset+0x44>)
 8001f72:	f001 f833 	bl	8002fdc <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8001f76:	2115      	movs	r1, #21
 8001f78:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <ESP8266_HW_Reset+0x48>)
 8001f7a:	f7ff f9cd 	bl	8001318 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 8001f7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f82:	f000 fbc9 	bl	8002718 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8001f86:	210f      	movs	r1, #15
 8001f88:	4808      	ldr	r0, [pc, #32]	; (8001fac <ESP8266_HW_Reset+0x4c>)
 8001f8a:	f7ff f9c5 	bl	8001318 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <ESP8266_HW_Reset+0x44>)
 8001f96:	f001 f821 	bl	8002fdc <HAL_GPIO_WritePin>
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000316d 	.word	0x2000316d
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	0800f688 	.word	0x0800f688
 8001fac:	0800f85c 	.word	0x0800f85c

08001fb0 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af06      	add	r7, sp, #24
 8001fb6:	6078      	str	r0, [r7, #4]
	do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",12,100);
 8001fb8:	2364      	movs	r3, #100	; 0x64
 8001fba:	220c      	movs	r2, #12
 8001fbc:	492d      	ldr	r1, [pc, #180]	; (8002074 <ESP8266_HW_Init+0xc4>)
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f003 f85e 	bl	8005080 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8001fc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fc8:	f000 fba6 	bl	8002718 <HAL_Delay>
		  wf._n_fcomp=5;			//Cdad de elementos del vector a analizar
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <ESP8266_HW_Init+0xc8>)
 8001fce:	2205      	movs	r2, #5
 8001fd0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART1_WF_RX_items;
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <ESP8266_HW_Init+0xcc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a27      	ldr	r2, [pc, #156]	; (8002078 <ESP8266_HW_Init+0xc8>)
 8001fda:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  while(FT_String_ND(UART1_WF_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001fde:	e00e      	b.n	8001ffe <ESP8266_HW_Init+0x4e>
		  {
			  wf._n_orig=UART1_WF_RX_items;
 8001fe0:	4b26      	ldr	r3, [pc, #152]	; (800207c <ESP8266_HW_Init+0xcc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <ESP8266_HW_Init+0xc8>)
 8001fe6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <ESP8266_HW_Init+0xd0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	dd03      	ble.n	8001ffe <ESP8266_HW_Init+0x4e>
					 {
						 ESP_InitF=1;
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <ESP8266_HW_Init+0xd4>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
						 break;
 8001ffc:	e014      	b.n	8002028 <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART1_WF_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <ESP8266_HW_Init+0xd8>)
 8002000:	2200      	movs	r2, #0
 8002002:	9205      	str	r2, [sp, #20]
 8002004:	9304      	str	r3, [sp, #16]
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <ESP8266_HW_Init+0xdc>)
 8002008:	9303      	str	r3, [sp, #12]
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <ESP8266_HW_Init+0xe0>)
 800200c:	9302      	str	r3, [sp, #8]
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <ESP8266_HW_Init+0xe4>)
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <ESP8266_HW_Init+0xe8>)
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <ESP8266_HW_Init+0xec>)
 8002018:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <ESP8266_HW_Init+0xf0>)
 800201a:	4922      	ldr	r1, [pc, #136]	; (80020a4 <ESP8266_HW_Init+0xf4>)
 800201c:	4822      	ldr	r0, [pc, #136]	; (80020a8 <ESP8266_HW_Init+0xf8>)
 800201e:	f00b fcbb 	bl	800d998 <FT_String_ND>
 8002022:	4603      	mov	r3, r0
 8002024:	2b01      	cmp	r3, #1
 8002026:	d1db      	bne.n	8001fe0 <ESP8266_HW_Init+0x30>
					 }
		  }

		  if (ESP_ticks<5000)
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <ESP8266_HW_Init+0xd0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002030:	4293      	cmp	r3, r2
 8002032:	dc06      	bgt.n	8002042 <ESP8266_HW_Init+0x92>
		  {
			  ESP_REinit=10;	//Condición de salida
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <ESP8266_HW_Init+0xfc>)
 8002036:	220a      	movs	r2, #10
 8002038:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <ESP8266_HW_Init+0xd0>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e008      	b.n	8002054 <ESP8266_HW_Init+0xa4>
		  }
		  else
		  {
			  ESP_REinit++;		//Conteo de la cantidad de veces que se reinicia el ciclo
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <ESP8266_HW_Init+0xfc>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <ESP8266_HW_Init+0xfc>)
 800204c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <ESP8266_HW_Init+0xd0>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
		  }

	 } while (ESP_REinit<=5);
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <ESP8266_HW_Init+0xfc>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b05      	cmp	r3, #5
 800205a:	d9ad      	bls.n	8001fb8 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <ESP8266_HW_Init+0xfc>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b0a      	cmp	r3, #10
 8002062:	d101      	bne.n	8002068 <ESP8266_HW_Init+0xb8>
	  {
		  return(1);
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <ESP8266_HW_Init+0xba>
	  }
	  else
	  {
		  return(0);
 8002068:	2300      	movs	r3, #0
	  }
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	0800f86c 	.word	0x0800f86c
 8002078:	200002c0 	.word	0x200002c0
 800207c:	20003580 	.word	0x20003580
 8002080:	20003584 	.word	0x20003584
 8002084:	2000316e 	.word	0x2000316e
 8002088:	20001008 	.word	0x20001008
 800208c:	20000d54 	.word	0x20000d54
 8002090:	20003594 	.word	0x20003594
 8002094:	20000fa0 	.word	0x20000fa0
 8002098:	20000b54 	.word	0x20000b54
 800209c:	20000fac 	.word	0x20000fac
 80020a0:	0800f87c 	.word	0x0800f87c
 80020a4:	20000f98 	.word	0x20000f98
 80020a8:	20003378 	.word	0x20003378
 80020ac:	2000316d 	.word	0x2000316d

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <Error_Handler+0x8>
	...

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <HAL_SPI_MspInit+0xc0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d149      	bne.n	80021c2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_SPI_MspInit+0xc4>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <HAL_SPI_MspInit+0xc4>)
 8002138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_SPI_MspInit+0xc4>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_SPI_MspInit+0xc4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_SPI_MspInit+0xc4>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_SPI_MspInit+0xc4>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_SPI_MspInit+0xc4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <HAL_SPI_MspInit+0xc4>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_SPI_MspInit+0xc4>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002182:	23a0      	movs	r3, #160	; 0xa0
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002192:	2305      	movs	r3, #5
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <HAL_SPI_MspInit+0xc8>)
 800219e:	f000 fcb5 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021a2:	2310      	movs	r3, #16
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b2:	2305      	movs	r3, #5
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4806      	ldr	r0, [pc, #24]	; (80021d8 <HAL_SPI_MspInit+0xcc>)
 80021be:	f000 fca5 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021c2:	bf00      	nop
 80021c4:	3728      	adds	r7, #40	; 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40013000 	.word	0x40013000
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020000 	.word	0x40020000
 80021d8:	40020400 	.word	0x40020400

080021dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d115      	bne.n	800221a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_TIM_Base_MspInit+0x48>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <HAL_TIM_Base_MspInit+0x48>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_TIM_Base_MspInit+0x48>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	201c      	movs	r0, #28
 8002210:	f000 fba5 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002214:	201c      	movs	r0, #28
 8002216:	f000 fbbe 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800

08002228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a3a      	ldr	r2, [pc, #232]	; (8002330 <HAL_UART_MspInit+0x108>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d135      	bne.n	80022b6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_UART_MspInit+0x10c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a38      	ldr	r2, [pc, #224]	; (8002334 <HAL_UART_MspInit+0x10c>)
 8002254:	f043 0310 	orr.w	r3, r3, #16
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b36      	ldr	r3, [pc, #216]	; (8002334 <HAL_UART_MspInit+0x10c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_UART_MspInit+0x10c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a31      	ldr	r2, [pc, #196]	; (8002334 <HAL_UART_MspInit+0x10c>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_UART_MspInit+0x10c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_WF_TX_Pin|USART1_WF_RX_Pin;
 8002282:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002294:	2307      	movs	r3, #7
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	4826      	ldr	r0, [pc, #152]	; (8002338 <HAL_UART_MspInit+0x110>)
 80022a0:	f000 fc34 	bl	8002b0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	2025      	movs	r0, #37	; 0x25
 80022aa:	f000 fb58 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ae:	2025      	movs	r0, #37	; 0x25
 80022b0:	f000 fb71 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022b4:	e038      	b.n	8002328 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_UART_MspInit+0x114>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d133      	bne.n	8002328 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_UART_MspInit+0x10c>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a1a      	ldr	r2, [pc, #104]	; (8002334 <HAL_UART_MspInit+0x10c>)
 80022ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <HAL_UART_MspInit+0x10c>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_UART_MspInit+0x10c>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a13      	ldr	r2, [pc, #76]	; (8002334 <HAL_UART_MspInit+0x10c>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_UART_MspInit+0x10c>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_DBG_TX_Pin|USART2_DBG_RX_Pin;
 80022f8:	230c      	movs	r3, #12
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002308:	2307      	movs	r3, #7
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	4809      	ldr	r0, [pc, #36]	; (8002338 <HAL_UART_MspInit+0x110>)
 8002314:	f000 fbfa 	bl	8002b0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	2026      	movs	r0, #38	; 0x26
 800231e:	f000 fb1e 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002322:	2026      	movs	r0, #38	; 0x26
 8002324:	f000 fb37 	bl	8002996 <HAL_NVIC_EnableIRQ>
}
 8002328:	bf00      	nop
 800232a:	3730      	adds	r7, #48	; 0x30
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40011000 	.word	0x40011000
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000
 800233c:	40004400 	.word	0x40004400

08002340 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a13      	ldr	r2, [pc, #76]	; (800239c <HAL_UART_MspDeInit+0x5c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10e      	bne.n	8002370 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_UART_MspDeInit+0x60>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <HAL_UART_MspDeInit+0x60>)
 8002358:	f023 0310 	bic.w	r3, r3, #16
 800235c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_WF_TX_Pin|USART1_WF_RX_Pin);
 800235e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002362:	4810      	ldr	r0, [pc, #64]	; (80023a4 <HAL_UART_MspDeInit+0x64>)
 8002364:	f000 fd56 	bl	8002e14 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002368:	2025      	movs	r0, #37	; 0x25
 800236a:	f000 fb22 	bl	80029b2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800236e:	e011      	b.n	8002394 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <HAL_UART_MspDeInit+0x68>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10c      	bne.n	8002394 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_UART_MspDeInit+0x60>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_UART_MspDeInit+0x60>)
 8002380:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_DBG_TX_Pin|USART2_DBG_RX_Pin);
 8002386:	210c      	movs	r1, #12
 8002388:	4806      	ldr	r0, [pc, #24]	; (80023a4 <HAL_UART_MspDeInit+0x64>)
 800238a:	f000 fd43 	bl	8002e14 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800238e:	2026      	movs	r0, #38	; 0x26
 8002390:	f000 fb0f 	bl	80029b2 <HAL_NVIC_DisableIRQ>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40011000 	.word	0x40011000
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40004400 	.word	0x40004400

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <NMI_Handler+0x4>

080023b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <MemManage_Handler+0x4>

080023be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <UsageFault_Handler+0x4>

080023ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <TIM2_IRQHandler+0x10>)
 80023fa:	f002 f823 	bl	8004444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200001f0 	.word	0x200001f0

08002408 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <USART1_IRQHandler+0x10>)
 800240e:	f002 ff3f 	bl	8005290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000238 	.word	0x20000238

0800241c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <USART2_IRQHandler+0x10>)
 8002422:	f002 ff35 	bl	8005290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000027c 	.word	0x2000027c

08002430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
	return 1;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_kill>:

int _kill(int pid, int sig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800244a:	f00c f8cd 	bl	800e5e8 <__errno>
 800244e:	4603      	mov	r3, r0
 8002450:	2216      	movs	r2, #22
 8002452:	601a      	str	r2, [r3, #0]
	return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_exit>:

void _exit (int status)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ffe7 	bl	8002440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002472:	e7fe      	b.n	8002472 <_exit+0x12>

08002474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e00a      	b.n	800249c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002486:	f3af 8000 	nop.w
 800248a:	4601      	mov	r1, r0
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	60ba      	str	r2, [r7, #8]
 8002492:	b2ca      	uxtb	r2, r1
 8002494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf0      	blt.n	8002486 <_read+0x12>
	}

return len;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e009      	b.n	80024d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	60ba      	str	r2, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	dbf1      	blt.n	80024c0 <_write+0x12>
	}
	return len;
 80024dc:	687b      	ldr	r3, [r7, #4]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_close>:

int _close(int file)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return -1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800250e:	605a      	str	r2, [r3, #4]
	return 0;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_isatty>:

int _isatty(int file)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
	return 1;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
	return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <_sbrk+0x5c>)
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <_sbrk+0x60>)
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <_sbrk+0x64>)
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <_sbrk+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002580:	f00c f832 	bl	800e5e8 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	220c      	movs	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e009      	b.n	80025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <_sbrk+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20020000 	.word	0x20020000
 80025b0:	00000400 	.word	0x00000400
 80025b4:	200035bc 	.word	0x200035bc
 80025b8:	20003710 	.word	0x20003710

080025bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025e6:	490e      	ldr	r1, [pc, #56]	; (8002620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025e8:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ec:	e002      	b.n	80025f4 <LoopCopyDataInit>

080025ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f2:	3304      	adds	r3, #4

080025f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f8:	d3f9      	bcc.n	80025ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025fc:	4c0b      	ldr	r4, [pc, #44]	; (800262c <LoopFillZerobss+0x26>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002600:	e001      	b.n	8002606 <LoopFillZerobss>

08002602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002604:	3204      	adds	r2, #4

08002606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002608:	d3fb      	bcc.n	8002602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800260a:	f7ff ffd7 	bl	80025bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260e:	f00b fff1 	bl	800e5f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002612:	f7fe f83f 	bl	8000694 <main>
  bx  lr    
 8002616:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800261c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002620:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8002624:	0800fd28 	.word	0x0800fd28
  ldr r2, =_sbss
 8002628:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800262c:	20003710 	.word	0x20003710

08002630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC_IRQHandler>
	...

08002634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002638:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <HAL_Init+0x40>)
 800263e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <HAL_Init+0x40>)
 800264a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a07      	ldr	r2, [pc, #28]	; (8002674 <HAL_Init+0x40>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265c:	2003      	movs	r0, #3
 800265e:	f000 f973 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002662:	200f      	movs	r0, #15
 8002664:	f000 f808 	bl	8002678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002668:	f7ff fd28 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00

08002678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_InitTick+0x54>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_InitTick+0x58>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f999 	bl	80029ce <HAL_SYSTICK_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00e      	b.n	80026c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d80a      	bhi.n	80026c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f000 f953 	bl	800295e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b8:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_InitTick+0x5c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000088 	.word	0x20000088
 80026d0:	20000090 	.word	0x20000090
 80026d4:	2000008c 	.word	0x2000008c

080026d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x20>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_IncTick+0x24>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_IncTick+0x24>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000090 	.word	0x20000090
 80026fc:	200035c0 	.word	0x200035c0

08002700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_GetTick+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	200035c0 	.word	0x200035c0

08002718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff ffee 	bl	8002700 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d005      	beq.n	800273e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_Delay+0x44>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800273e:	bf00      	nop
 8002740:	f7ff ffde 	bl	8002700 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d8f7      	bhi.n	8002740 <HAL_Delay+0x28>
  {
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000090 	.word	0x20000090

08002760 <__NVIC_SetPriorityGrouping>:
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_DisableIRQ>:
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db12      	blt.n	8002838 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	490a      	ldr	r1, [pc, #40]	; (8002844 <__NVIC_DisableIRQ+0x44>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	3320      	adds	r3, #32
 8002828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800282c:	f3bf 8f4f 	dsb	sy
}
 8002830:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002832:	f3bf 8f6f 	isb	sy
}
 8002836:	bf00      	nop
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100

08002848 <__NVIC_SetPriority>:
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff05 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff1a 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff8e 	bl	800289c <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5d 	bl	8002848 <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff0d 	bl	80027c4 <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff1d 	bl	8002800 <__NVIC_DisableIRQ>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ff94 	bl	8002904 <SysTick_Config>
 80029dc:	4603      	mov	r3, r0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff fe84 	bl	8002700 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d008      	beq.n	8002a18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2280      	movs	r2, #128	; 0x80
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e052      	b.n	8002abe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0216 	bic.w	r2, r2, #22
 8002a26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <HAL_DMA_Abort+0x62>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0208 	bic.w	r2, r2, #8
 8002a56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a68:	e013      	b.n	8002a92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a6a:	f7ff fe49 	bl	8002700 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d90c      	bls.n	8002a92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2203      	movs	r2, #3
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e015      	b.n	8002abe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e4      	bne.n	8002a6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	223f      	movs	r2, #63	; 0x3f
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2280      	movs	r2, #128	; 0x80
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e00c      	b.n	8002afe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2205      	movs	r2, #5
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e159      	b.n	8002ddc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 8148 	bne.w	8002dd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d005      	beq.n	8002b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d130      	bne.n	8002bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d123      	bne.n	8002c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a2 	beq.w	8002dd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <HAL_GPIO_Init+0x2e8>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a56      	ldr	r2, [pc, #344]	; (8002df4 <HAL_GPIO_Init+0x2e8>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b54      	ldr	r3, [pc, #336]	; (8002df4 <HAL_GPIO_Init+0x2e8>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cae:	4a52      	ldr	r2, [pc, #328]	; (8002df8 <HAL_GPIO_Init+0x2ec>)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a49      	ldr	r2, [pc, #292]	; (8002dfc <HAL_GPIO_Init+0x2f0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d019      	beq.n	8002d0e <HAL_GPIO_Init+0x202>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a48      	ldr	r2, [pc, #288]	; (8002e00 <HAL_GPIO_Init+0x2f4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x1fe>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a47      	ldr	r2, [pc, #284]	; (8002e04 <HAL_GPIO_Init+0x2f8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00d      	beq.n	8002d06 <HAL_GPIO_Init+0x1fa>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a46      	ldr	r2, [pc, #280]	; (8002e08 <HAL_GPIO_Init+0x2fc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x1f6>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a45      	ldr	r2, [pc, #276]	; (8002e0c <HAL_GPIO_Init+0x300>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_GPIO_Init+0x1f2>
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e008      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002cfe:	2307      	movs	r3, #7
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e004      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	f002 0203 	and.w	r2, r2, #3
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	4093      	lsls	r3, r2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d20:	4935      	ldr	r1, [pc, #212]	; (8002df8 <HAL_GPIO_Init+0x2ec>)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2e:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d52:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d7c:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da6:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd0:	4a0f      	ldr	r2, [pc, #60]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	f67f aea2 	bls.w	8002b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40020c00 	.word	0x40020c00
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e0bb      	b.n	8002fa8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e30:	2201      	movs	r2, #1
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	f040 80ab 	bne.w	8002fa2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e4c:	4a5c      	ldr	r2, [pc, #368]	; (8002fc0 <HAL_GPIO_DeInit+0x1ac>)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	3302      	adds	r3, #2
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	220f      	movs	r2, #15
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a54      	ldr	r2, [pc, #336]	; (8002fc4 <HAL_GPIO_DeInit+0x1b0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d019      	beq.n	8002eaa <HAL_GPIO_DeInit+0x96>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a53      	ldr	r2, [pc, #332]	; (8002fc8 <HAL_GPIO_DeInit+0x1b4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_GPIO_DeInit+0x92>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a52      	ldr	r2, [pc, #328]	; (8002fcc <HAL_GPIO_DeInit+0x1b8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00d      	beq.n	8002ea2 <HAL_GPIO_DeInit+0x8e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a51      	ldr	r2, [pc, #324]	; (8002fd0 <HAL_GPIO_DeInit+0x1bc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_DeInit+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a50      	ldr	r2, [pc, #320]	; (8002fd4 <HAL_GPIO_DeInit+0x1c0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_GPIO_DeInit+0x86>
 8002e96:	2304      	movs	r3, #4
 8002e98:	e008      	b.n	8002eac <HAL_GPIO_DeInit+0x98>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_DeInit+0x98>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e004      	b.n	8002eac <HAL_GPIO_DeInit+0x98>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e002      	b.n	8002eac <HAL_GPIO_DeInit+0x98>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_GPIO_DeInit+0x98>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	f002 0203 	and.w	r2, r2, #3
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	4093      	lsls	r3, r2
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d132      	bne.n	8002f22 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ebc:	4b46      	ldr	r3, [pc, #280]	; (8002fd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	4944      	ldr	r1, [pc, #272]	; (8002fd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002eca:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	4941      	ldr	r1, [pc, #260]	; (8002fd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ed8:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <HAL_GPIO_DeInit+0x1c4>)
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	493d      	ldr	r1, [pc, #244]	; (8002fd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	493a      	ldr	r1, [pc, #232]	; (8002fd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	220f      	movs	r2, #15
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f04:	4a2e      	ldr	r2, [pc, #184]	; (8002fc0 <HAL_GPIO_DeInit+0x1ac>)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	43da      	mvns	r2, r3
 8002f14:	482a      	ldr	r0, [pc, #168]	; (8002fc0 <HAL_GPIO_DeInit+0x1ac>)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2103      	movs	r1, #3
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	08da      	lsrs	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3208      	adds	r2, #8
 8002f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	08d2      	lsrs	r2, r2, #3
 8002f58:	4019      	ands	r1, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	401a      	ands	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	401a      	ands	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2103      	movs	r1, #3
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b0f      	cmp	r3, #15
 8002fac:	f67f af40 	bls.w	8002e30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	40020400 	.word	0x40020400
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	40020c00 	.word	0x40020c00
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff8:	e003      	b.n	8003002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	619a      	str	r2, [r3, #24]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003020:	887a      	ldrh	r2, [r7, #2]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4013      	ands	r3, r2
 8003026:	041a      	lsls	r2, r3, #16
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43d9      	mvns	r1, r3
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	400b      	ands	r3, r1
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e267      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d075      	beq.n	800314e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003062:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b04      	cmp	r3, #4
 800306c:	d00c      	beq.n	8003088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306e:	4b85      	ldr	r3, [pc, #532]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003076:	2b08      	cmp	r3, #8
 8003078:	d112      	bne.n	80030a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4b82      	ldr	r3, [pc, #520]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003086:	d10b      	bne.n	80030a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	4b7e      	ldr	r3, [pc, #504]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d05b      	beq.n	800314c <HAL_RCC_OscConfig+0x108>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d157      	bne.n	800314c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e242      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a8:	d106      	bne.n	80030b8 <HAL_RCC_OscConfig+0x74>
 80030aa:	4b76      	ldr	r3, [pc, #472]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a75      	ldr	r2, [pc, #468]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e01d      	b.n	80030f4 <HAL_RCC_OscConfig+0xb0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x98>
 80030c2:	4b70      	ldr	r3, [pc, #448]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6f      	ldr	r2, [pc, #444]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b6d      	ldr	r3, [pc, #436]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6c      	ldr	r2, [pc, #432]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0xb0>
 80030dc:	4b69      	ldr	r3, [pc, #420]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a68      	ldr	r2, [pc, #416]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a65      	ldr	r2, [pc, #404]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7ff fb00 	bl	8002700 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003104:	f7ff fafc 	bl	8002700 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e207      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0xc0>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7ff faec 	bl	8002700 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312c:	f7ff fae8 	bl	8002700 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e1f3      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	4b51      	ldr	r3, [pc, #324]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0xe8>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d063      	beq.n	8003222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800315a:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003166:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800316e:	2b08      	cmp	r3, #8
 8003170:	d11c      	bne.n	80031ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b44      	ldr	r3, [pc, #272]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d116      	bne.n	80031ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_RCC_OscConfig+0x152>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e1c7      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003196:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4937      	ldr	r1, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031aa:	e03a      	b.n	8003222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d020      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b4:	4b34      	ldr	r3, [pc, #208]	; (8003288 <HAL_RCC_OscConfig+0x244>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ba:	f7ff faa1 	bl	8002700 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c2:	f7ff fa9d 	bl	8002700 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e1a8      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e0:	4b28      	ldr	r3, [pc, #160]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4925      	ldr	r1, [pc, #148]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]
 80031f4:	e015      	b.n	8003222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f6:	4b24      	ldr	r3, [pc, #144]	; (8003288 <HAL_RCC_OscConfig+0x244>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7ff fa80 	bl	8002700 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003204:	f7ff fa7c 	bl	8002700 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e187      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d036      	beq.n	800329c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_RCC_OscConfig+0x248>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7ff fa60 	bl	8002700 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003244:	f7ff fa5c 	bl	8002700 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e167      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_OscConfig+0x240>)
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x200>
 8003262:	e01b      	b.n	800329c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_OscConfig+0x248>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326a:	f7ff fa49 	bl	8002700 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003270:	e00e      	b.n	8003290 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003272:	f7ff fa45 	bl	8002700 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d907      	bls.n	8003290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e150      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
 8003284:	40023800 	.word	0x40023800
 8003288:	42470000 	.word	0x42470000
 800328c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	4b88      	ldr	r3, [pc, #544]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ea      	bne.n	8003272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8097 	beq.w	80033d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ae:	4b81      	ldr	r3, [pc, #516]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b7d      	ldr	r3, [pc, #500]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a7c      	ldr	r2, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b7a      	ldr	r3, [pc, #488]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b77      	ldr	r3, [pc, #476]	; (80034b8 <HAL_RCC_OscConfig+0x474>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d118      	bne.n	8003318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e6:	4b74      	ldr	r3, [pc, #464]	; (80034b8 <HAL_RCC_OscConfig+0x474>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a73      	ldr	r2, [pc, #460]	; (80034b8 <HAL_RCC_OscConfig+0x474>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f2:	f7ff fa05 	bl	8002700 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fa:	f7ff fa01 	bl	8002700 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e10c      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	4b6a      	ldr	r3, [pc, #424]	; (80034b8 <HAL_RCC_OscConfig+0x474>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d106      	bne.n	800332e <HAL_RCC_OscConfig+0x2ea>
 8003320:	4b64      	ldr	r3, [pc, #400]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a63      	ldr	r2, [pc, #396]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
 800332c:	e01c      	b.n	8003368 <HAL_RCC_OscConfig+0x324>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b05      	cmp	r3, #5
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x30c>
 8003336:	4b5f      	ldr	r3, [pc, #380]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a5e      	ldr	r2, [pc, #376]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 800333c:	f043 0304 	orr.w	r3, r3, #4
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
 8003342:	4b5c      	ldr	r3, [pc, #368]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a5b      	ldr	r2, [pc, #364]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0x324>
 8003350:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a57      	ldr	r2, [pc, #348]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
 800335c:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a54      	ldr	r2, [pc, #336]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003362:	f023 0304 	bic.w	r3, r3, #4
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7ff f9c6 	bl	8002700 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7ff f9c2 	bl	8002700 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0cb      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	4b49      	ldr	r3, [pc, #292]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0ee      	beq.n	8003378 <HAL_RCC_OscConfig+0x334>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339c:	f7ff f9b0 	bl	8002700 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7ff f9ac 	bl	8002700 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0b5      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ba:	4b3e      	ldr	r3, [pc, #248]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ee      	bne.n	80033a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d105      	bne.n	80033d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	4a38      	ldr	r2, [pc, #224]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 80033d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80a1 	beq.w	8003524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033e2:	4b34      	ldr	r3, [pc, #208]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d05c      	beq.n	80034a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d141      	bne.n	800347a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_RCC_OscConfig+0x478>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7ff f980 	bl	8002700 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003404:	f7ff f97c 	bl	8002700 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e087      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	019b      	lsls	r3, r3, #6
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	3b01      	subs	r3, #1
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	491b      	ldr	r1, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_RCC_OscConfig+0x478>)
 800344e:	2201      	movs	r2, #1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7ff f955 	bl	8002700 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345a:	f7ff f951 	bl	8002700 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e05c      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x416>
 8003478:	e054      	b.n	8003524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_RCC_OscConfig+0x478>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7ff f93e 	bl	8002700 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003488:	f7ff f93a 	bl	8002700 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e045      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCC_OscConfig+0x470>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x444>
 80034a6:	e03d      	b.n	8003524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d107      	bne.n	80034c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e038      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40007000 	.word	0x40007000
 80034bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCC_OscConfig+0x4ec>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d028      	beq.n	8003520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d121      	bne.n	8003520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d11a      	bne.n	8003520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034f0:	4013      	ands	r3, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d111      	bne.n	8003520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	3b01      	subs	r3, #1
 800350a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800

08003534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0cc      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003548:	4b68      	ldr	r3, [pc, #416]	; (80036ec <HAL_RCC_ClockConfig+0x1b8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d90c      	bls.n	8003570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b65      	ldr	r3, [pc, #404]	; (80036ec <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b63      	ldr	r3, [pc, #396]	; (80036ec <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0b8      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d020      	beq.n	80035be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003588:	4b59      	ldr	r3, [pc, #356]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4a58      	ldr	r2, [pc, #352]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a0:	4b53      	ldr	r3, [pc, #332]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a52      	ldr	r2, [pc, #328]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ac:	4b50      	ldr	r3, [pc, #320]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	494d      	ldr	r1, [pc, #308]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d044      	beq.n	8003654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	4b47      	ldr	r3, [pc, #284]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d119      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e07f      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d003      	beq.n	80035f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e06f      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003602:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e067      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003612:	4b37      	ldr	r3, [pc, #220]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4934      	ldr	r1, [pc, #208]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	4313      	orrs	r3, r2
 8003622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003624:	f7ff f86c 	bl	8002700 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7ff f868 	bl	8002700 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e04f      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 020c 	and.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d1eb      	bne.n	800362c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_RCC_ClockConfig+0x1b8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d20c      	bcs.n	800367c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b22      	ldr	r3, [pc, #136]	; (80036ec <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b20      	ldr	r3, [pc, #128]	; (80036ec <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e032      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003688:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4916      	ldr	r1, [pc, #88]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	490e      	ldr	r1, [pc, #56]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ba:	f000 f821 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 80036be:	4602      	mov	r2, r0
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	490a      	ldr	r1, [pc, #40]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	5ccb      	ldrb	r3, [r1, r3]
 80036ce:	fa22 f303 	lsr.w	r3, r2, r3
 80036d2:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe ffcc 	bl	8002678 <HAL_InitTick>

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023c00 	.word	0x40023c00
 80036f0:	40023800 	.word	0x40023800
 80036f4:	0800fb1c 	.word	0x0800fb1c
 80036f8:	20000088 	.word	0x20000088
 80036fc:	2000008c 	.word	0x2000008c

08003700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003704:	b090      	sub	sp, #64	; 0x40
 8003706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
 800370c:	2300      	movs	r3, #0
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003710:	2300      	movs	r3, #0
 8003712:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003718:	4b59      	ldr	r3, [pc, #356]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d00d      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x40>
 8003724:	2b08      	cmp	r3, #8
 8003726:	f200 80a1 	bhi.w	800386c <HAL_RCC_GetSysClockFreq+0x16c>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x34>
 800372e:	2b04      	cmp	r3, #4
 8003730:	d003      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0x3a>
 8003732:	e09b      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_RCC_GetSysClockFreq+0x184>)
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003738:	e09b      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800373a:	4b53      	ldr	r3, [pc, #332]	; (8003888 <HAL_RCC_GetSysClockFreq+0x188>)
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800373e:	e098      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003740:	4b4f      	ldr	r3, [pc, #316]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374a:	4b4d      	ldr	r3, [pc, #308]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d028      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003756:	4b4a      	ldr	r3, [pc, #296]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	099b      	lsrs	r3, r3, #6
 800375c:	2200      	movs	r2, #0
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	627a      	str	r2, [r7, #36]	; 0x24
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003768:	2100      	movs	r1, #0
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCC_GetSysClockFreq+0x188>)
 800376c:	fb03 f201 	mul.w	r2, r3, r1
 8003770:	2300      	movs	r3, #0
 8003772:	fb00 f303 	mul.w	r3, r0, r3
 8003776:	4413      	add	r3, r2
 8003778:	4a43      	ldr	r2, [pc, #268]	; (8003888 <HAL_RCC_GetSysClockFreq+0x188>)
 800377a:	fba0 1202 	umull	r1, r2, r0, r2
 800377e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003780:	460a      	mov	r2, r1
 8003782:	62ba      	str	r2, [r7, #40]	; 0x28
 8003784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003786:	4413      	add	r3, r2
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	2200      	movs	r2, #0
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	61fa      	str	r2, [r7, #28]
 8003792:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003796:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800379a:	f7fc fd89 	bl	80002b0 <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4613      	mov	r3, r2
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a6:	e053      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a8:	4b35      	ldr	r3, [pc, #212]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	2200      	movs	r2, #0
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	617a      	str	r2, [r7, #20]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037ba:	f04f 0b00 	mov.w	fp, #0
 80037be:	4652      	mov	r2, sl
 80037c0:	465b      	mov	r3, fp
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	0159      	lsls	r1, r3, #5
 80037cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d0:	0150      	lsls	r0, r2, #5
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	ebb2 080a 	subs.w	r8, r2, sl
 80037da:	eb63 090b 	sbc.w	r9, r3, fp
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037f2:	ebb2 0408 	subs.w	r4, r2, r8
 80037f6:	eb63 0509 	sbc.w	r5, r3, r9
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	00eb      	lsls	r3, r5, #3
 8003804:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003808:	00e2      	lsls	r2, r4, #3
 800380a:	4614      	mov	r4, r2
 800380c:	461d      	mov	r5, r3
 800380e:	eb14 030a 	adds.w	r3, r4, sl
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	eb45 030b 	adc.w	r3, r5, fp
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003826:	4629      	mov	r1, r5
 8003828:	028b      	lsls	r3, r1, #10
 800382a:	4621      	mov	r1, r4
 800382c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003830:	4621      	mov	r1, r4
 8003832:	028a      	lsls	r2, r1, #10
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	2200      	movs	r2, #0
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	60fa      	str	r2, [r7, #12]
 8003840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003844:	f7fc fd34 	bl	80002b0 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetSysClockFreq+0x184>)
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003874:	4618      	mov	r0, r3
 8003876:	3740      	adds	r7, #64	; 0x40
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	00f42400 	.word	0x00f42400
 8003888:	017d7840 	.word	0x017d7840

0800388c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000088 	.word	0x20000088

080038a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038a8:	f7ff fff0 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	0a9b      	lsrs	r3, r3, #10
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	4903      	ldr	r1, [pc, #12]	; (80038c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40023800 	.word	0x40023800
 80038c8:	0800fb2c 	.word	0x0800fb2c

080038cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038d0:	f7ff ffdc 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	0b5b      	lsrs	r3, r3, #13
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	4903      	ldr	r1, [pc, #12]	; (80038f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e2:	5ccb      	ldrb	r3, [r1, r3]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40023800 	.word	0x40023800
 80038f0:	0800fb2c 	.word	0x0800fb2c

080038f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07b      	b.n	80039fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003916:	d009      	beq.n	800392c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	61da      	str	r2, [r3, #28]
 800391e:	e005      	b.n	800392c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fe fbe0 	bl	800210c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	ea42 0103 	orr.w	r1, r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	f003 0104 	and.w	r1, r3, #4
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	f003 0210 	and.w	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b08c      	sub	sp, #48	; 0x30
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a14:	2301      	movs	r3, #1
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x26>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e18a      	b.n	8003d42 <HAL_SPI_TransmitReceive+0x33c>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a34:	f7fe fe64 	bl	8002700 <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a4a:	887b      	ldrh	r3, [r7, #2]
 8003a4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d00f      	beq.n	8003a76 <HAL_SPI_TransmitReceive+0x70>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5c:	d107      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x68>
 8003a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d003      	beq.n	8003a76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a74:	e15b      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x82>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x82>
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d103      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a8e:	e14e      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d003      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2205      	movs	r2, #5
 8003aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	887a      	ldrh	r2, [r7, #2]
 8003aba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d007      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b00:	d178      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_TransmitReceive+0x10a>
 8003b0a:	8b7b      	ldrh	r3, [r7, #26]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d166      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	881a      	ldrh	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	1c9a      	adds	r2, r3, #2
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b34:	e053      	b.n	8003bde <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d11b      	bne.n	8003b7c <HAL_SPI_TransmitReceive+0x176>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d016      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x176>
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d113      	bne.n	8003b7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	881a      	ldrh	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	1c9a      	adds	r2, r3, #2
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d119      	bne.n	8003bbe <HAL_SPI_TransmitReceive+0x1b8>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d014      	beq.n	8003bbe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	b292      	uxth	r2, r2
 8003ba0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	1c9a      	adds	r2, r3, #2
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bbe:	f7fe fd9f 	bl	8002700 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d807      	bhi.n	8003bde <HAL_SPI_TransmitReceive+0x1d8>
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d003      	beq.n	8003bde <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bdc:	e0a7      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1a6      	bne.n	8003b36 <HAL_SPI_TransmitReceive+0x130>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1a1      	bne.n	8003b36 <HAL_SPI_TransmitReceive+0x130>
 8003bf2:	e07c      	b.n	8003cee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_SPI_TransmitReceive+0x1fc>
 8003bfc:	8b7b      	ldrh	r3, [r7, #26]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d16b      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	7812      	ldrb	r2, [r2, #0]
 8003c0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c28:	e057      	b.n	8003cda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d11c      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x26c>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d017      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x26c>
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d114      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	330c      	adds	r3, #12
 8003c52:	7812      	ldrb	r2, [r2, #0]
 8003c54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d119      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x2ae>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d014      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cb4:	f7fe fd24 	bl	8002700 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d803      	bhi.n	8003ccc <HAL_SPI_TransmitReceive+0x2c6>
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d102      	bne.n	8003cd2 <HAL_SPI_TransmitReceive+0x2cc>
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cd8:	e029      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1a2      	bne.n	8003c2a <HAL_SPI_TransmitReceive+0x224>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d19d      	bne.n	8003c2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f8b2 	bl	8003e5c <SPI_EndRxTxTransaction>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d006      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d0a:	e010      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	e000      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3730      	adds	r7, #48	; 0x30
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d5c:	f7fe fcd0 	bl	8002700 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d6c:	f7fe fcc8 	bl	8002700 <HAL_GetTick>
 8003d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d72:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	015b      	lsls	r3, r3, #5
 8003d78:	0d1b      	lsrs	r3, r3, #20
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d82:	e054      	b.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d050      	beq.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d8c:	f7fe fcb8 	bl	8002700 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d902      	bls.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d13d      	bne.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dba:	d111      	bne.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc4:	d004      	beq.n	8003dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dce:	d107      	bne.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de8:	d10f      	bne.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e017      	b.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4013      	ands	r3, r2
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2301      	moveq	r3, #1
 8003e40:	2300      	movne	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d19b      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000088 	.word	0x20000088

08003e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <SPI_EndRxTxTransaction+0x7c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <SPI_EndRxTxTransaction+0x80>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	0d5b      	lsrs	r3, r3, #21
 8003e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e86:	d112      	bne.n	8003eae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff ff5a 	bl	8003d4c <SPI_WaitFlagStateUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	f043 0220 	orr.w	r2, r3, #32
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e00f      	b.n	8003ece <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d0f2      	beq.n	8003eae <SPI_EndRxTxTransaction+0x52>
 8003ec8:	e000      	b.n	8003ecc <SPI_EndRxTxTransaction+0x70>
        break;
 8003eca:	bf00      	nop
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000088 	.word	0x20000088
 8003edc:	165e9f81 	.word	0x165e9f81

08003ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fe f968 	bl	80021dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fce4 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e041      	b.n	8004014 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f839 	bl	800401c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 fc95 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_TIM_OC_Start_IT+0x28>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e022      	b.n	800409e <HAL_TIM_OC_Start_IT+0x6e>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d109      	bne.n	8004072 <HAL_TIM_OC_Start_IT+0x42>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e015      	b.n	800409e <HAL_TIM_OC_Start_IT+0x6e>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d109      	bne.n	800408c <HAL_TIM_OC_Start_IT+0x5c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e008      	b.n	800409e <HAL_TIM_OC_Start_IT+0x6e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0b3      	b.n	800420e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_OC_Start_IT+0x86>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	e013      	b.n	80040de <HAL_TIM_OC_Start_IT+0xae>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_OC_Start_IT+0x96>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c4:	e00b      	b.n	80040de <HAL_TIM_OC_Start_IT+0xae>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_OC_Start_IT+0xa6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d4:	e003      	b.n	80040de <HAL_TIM_OC_Start_IT+0xae>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b0c      	cmp	r3, #12
 80040e2:	d841      	bhi.n	8004168 <HAL_TIM_OC_Start_IT+0x138>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <HAL_TIM_OC_Start_IT+0xbc>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004121 	.word	0x08004121
 80040f0:	08004169 	.word	0x08004169
 80040f4:	08004169 	.word	0x08004169
 80040f8:	08004169 	.word	0x08004169
 80040fc:	08004133 	.word	0x08004133
 8004100:	08004169 	.word	0x08004169
 8004104:	08004169 	.word	0x08004169
 8004108:	08004169 	.word	0x08004169
 800410c:	08004145 	.word	0x08004145
 8004110:	08004169 	.word	0x08004169
 8004114:	08004169 	.word	0x08004169
 8004118:	08004169 	.word	0x08004169
 800411c:	08004157 	.word	0x08004157
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0202 	orr.w	r2, r2, #2
 800412e:	60da      	str	r2, [r3, #12]
      break;
 8004130:	e01d      	b.n	800416e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0204 	orr.w	r2, r2, #4
 8004140:	60da      	str	r2, [r3, #12]
      break;
 8004142:	e014      	b.n	800416e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0208 	orr.w	r2, r2, #8
 8004152:	60da      	str	r2, [r3, #12]
      break;
 8004154:	e00b      	b.n	800416e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0210 	orr.w	r2, r2, #16
 8004164:	60da      	str	r2, [r3, #12]
      break;
 8004166:	e002      	b.n	800416e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      break;
 800416c:	bf00      	nop
  }

  if (status == HAL_OK)
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d14b      	bne.n	800420c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2201      	movs	r2, #1
 800417a:	6839      	ldr	r1, [r7, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fe5b 	bl	8004e38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a24      	ldr	r2, [pc, #144]	; (8004218 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d107      	bne.n	800419c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <HAL_TIM_OC_Start_IT+0x1e8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d018      	beq.n	80041d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ae:	d013      	beq.n	80041d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <HAL_TIM_OC_Start_IT+0x1ec>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00e      	beq.n	80041d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a18      	ldr	r2, [pc, #96]	; (8004220 <HAL_TIM_OC_Start_IT+0x1f0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d009      	beq.n	80041d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_TIM_OC_Start_IT+0x1f4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a15      	ldr	r2, [pc, #84]	; (8004228 <HAL_TIM_OC_Start_IT+0x1f8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d111      	bne.n	80041fc <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b06      	cmp	r3, #6
 80041e8:	d010      	beq.n	800420c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0201 	orr.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fa:	e007      	b.n	800420c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40014000 	.word	0x40014000

0800422c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b0c      	cmp	r3, #12
 800423e:	d841      	bhi.n	80042c4 <HAL_TIM_OC_Stop_IT+0x98>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <HAL_TIM_OC_Stop_IT+0x1c>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	0800427d 	.word	0x0800427d
 800424c:	080042c5 	.word	0x080042c5
 8004250:	080042c5 	.word	0x080042c5
 8004254:	080042c5 	.word	0x080042c5
 8004258:	0800428f 	.word	0x0800428f
 800425c:	080042c5 	.word	0x080042c5
 8004260:	080042c5 	.word	0x080042c5
 8004264:	080042c5 	.word	0x080042c5
 8004268:	080042a1 	.word	0x080042a1
 800426c:	080042c5 	.word	0x080042c5
 8004270:	080042c5 	.word	0x080042c5
 8004274:	080042c5 	.word	0x080042c5
 8004278:	080042b3 	.word	0x080042b3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0202 	bic.w	r2, r2, #2
 800428a:	60da      	str	r2, [r3, #12]
      break;
 800428c:	e01d      	b.n	80042ca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0204 	bic.w	r2, r2, #4
 800429c:	60da      	str	r2, [r3, #12]
      break;
 800429e:	e014      	b.n	80042ca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0208 	bic.w	r2, r2, #8
 80042ae:	60da      	str	r2, [r3, #12]
      break;
 80042b0:	e00b      	b.n	80042ca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0210 	bic.w	r2, r2, #16
 80042c0:	60da      	str	r2, [r3, #12]
      break;
 80042c2:	e002      	b.n	80042ca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      break;
 80042c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d157      	bne.n	8004380 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fdad 	bl	8004e38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2a      	ldr	r2, [pc, #168]	; (800438c <HAL_TIM_OC_Stop_IT+0x160>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d117      	bne.n	8004318 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6a1a      	ldr	r2, [r3, #32]
 80042ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10f      	bne.n	8004318 <HAL_TIM_OC_Stop_IT+0xec>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a1a      	ldr	r2, [r3, #32]
 80042fe:	f240 4344 	movw	r3, #1092	; 0x444
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <HAL_TIM_OC_Stop_IT+0xec>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004316:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6a1a      	ldr	r2, [r3, #32]
 800431e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <HAL_TIM_OC_Stop_IT+0x11c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a1a      	ldr	r2, [r3, #32]
 800432e:	f240 4344 	movw	r3, #1092	; 0x444
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d107      	bne.n	8004348 <HAL_TIM_OC_Stop_IT+0x11c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_TIM_OC_Stop_IT+0x12c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004356:	e013      	b.n	8004380 <HAL_TIM_OC_Stop_IT+0x154>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d104      	bne.n	8004368 <HAL_TIM_OC_Stop_IT+0x13c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004366:	e00b      	b.n	8004380 <HAL_TIM_OC_Stop_IT+0x154>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b08      	cmp	r3, #8
 800436c:	d104      	bne.n	8004378 <HAL_TIM_OC_Stop_IT+0x14c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004376:	e003      	b.n	8004380 <HAL_TIM_OC_Stop_IT+0x154>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000

08004390 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e041      	b.n	8004428 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f839 	bl	8004430 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f000 fa8b 	bl	80048ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0208 	bic.w	r2, r2, #8
 80043e4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6819      	ldr	r1, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d122      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d11b      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0202 	mvn.w	r2, #2
 8004470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa11 	bl	80048ae <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd fd06 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fa14 	bl	80048c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d122      	bne.n	80044f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0204 	mvn.w	r2, #4
 80044c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f9e7 	bl	80048ae <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd fcdc 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9ea 	bl	80048c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d122      	bne.n	8004548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b08      	cmp	r3, #8
 800450e:	d11b      	bne.n	8004548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0208 	mvn.w	r2, #8
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2204      	movs	r2, #4
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f9bd 	bl	80048ae <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd fcb2 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f9c0 	bl	80048c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b10      	cmp	r3, #16
 8004554:	d122      	bne.n	800459c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b10      	cmp	r3, #16
 8004562:	d11b      	bne.n	800459c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0210 	mvn.w	r2, #16
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2208      	movs	r2, #8
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f993 	bl	80048ae <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fc88 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f996 	bl	80048c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0201 	mvn.w	r2, #1
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f969 	bl	800489a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b80      	cmp	r3, #128	; 0x80
 80045d4:	d10e      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fcc0 	bl	8004f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	d10e      	bne.n	8004620 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d107      	bne.n	8004620 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f95b 	bl	80048d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b20      	cmp	r3, #32
 800462c:	d10e      	bne.n	800464c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b20      	cmp	r3, #32
 800463a:	d107      	bne.n	800464c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0220 	mvn.w	r2, #32
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fc8a 	bl	8004f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_TIM_OC_ConfigChannel+0x1e>
 800466e:	2302      	movs	r3, #2
 8004670:	e048      	b.n	8004704 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b0c      	cmp	r3, #12
 800467e:	d839      	bhi.n	80046f4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080046f5 	.word	0x080046f5
 8004690:	080046f5 	.word	0x080046f5
 8004694:	080046f5 	.word	0x080046f5
 8004698:	080046cb 	.word	0x080046cb
 800469c:	080046f5 	.word	0x080046f5
 80046a0:	080046f5 	.word	0x080046f5
 80046a4:	080046f5 	.word	0x080046f5
 80046a8:	080046d9 	.word	0x080046d9
 80046ac:	080046f5 	.word	0x080046f5
 80046b0:	080046f5 	.word	0x080046f5
 80046b4:	080046f5 	.word	0x080046f5
 80046b8:	080046e7 	.word	0x080046e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f992 	bl	80049ec <TIM_OC1_SetConfig>
      break;
 80046c8:	e017      	b.n	80046fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f9f1 	bl	8004ab8 <TIM_OC2_SetConfig>
      break;
 80046d6:	e010      	b.n	80046fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fa56 	bl	8004b90 <TIM_OC3_SetConfig>
      break;
 80046e4:	e009      	b.n	80046fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fab9 	bl	8004c64 <TIM_OC4_SetConfig>
      break;
 80046f2:	e002      	b.n	80046fa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
      break;
 80046f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004702:	7dfb      	ldrb	r3, [r7, #23]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_TIM_ConfigClockSource+0x1c>
 8004724:	2302      	movs	r3, #2
 8004726:	e0b4      	b.n	8004892 <HAL_TIM_ConfigClockSource+0x186>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004760:	d03e      	beq.n	80047e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004766:	f200 8087 	bhi.w	8004878 <HAL_TIM_ConfigClockSource+0x16c>
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	f000 8086 	beq.w	800487e <HAL_TIM_ConfigClockSource+0x172>
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d87f      	bhi.n	8004878 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b70      	cmp	r3, #112	; 0x70
 800477a:	d01a      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0xa6>
 800477c:	2b70      	cmp	r3, #112	; 0x70
 800477e:	d87b      	bhi.n	8004878 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b60      	cmp	r3, #96	; 0x60
 8004782:	d050      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x11a>
 8004784:	2b60      	cmp	r3, #96	; 0x60
 8004786:	d877      	bhi.n	8004878 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b50      	cmp	r3, #80	; 0x50
 800478a:	d03c      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0xfa>
 800478c:	2b50      	cmp	r3, #80	; 0x50
 800478e:	d873      	bhi.n	8004878 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d058      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x13a>
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d86f      	bhi.n	8004878 <HAL_TIM_ConfigClockSource+0x16c>
 8004798:	2b30      	cmp	r3, #48	; 0x30
 800479a:	d064      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0x15a>
 800479c:	2b30      	cmp	r3, #48	; 0x30
 800479e:	d86b      	bhi.n	8004878 <HAL_TIM_ConfigClockSource+0x16c>
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d060      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0x15a>
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d867      	bhi.n	8004878 <HAL_TIM_ConfigClockSource+0x16c>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d05c      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0x15a>
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d05a      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0x15a>
 80047b0:	e062      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6899      	ldr	r1, [r3, #8]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f000 fb19 	bl	8004df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	609a      	str	r2, [r3, #8]
      break;
 80047de:	e04f      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6899      	ldr	r1, [r3, #8]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f000 fb02 	bl	8004df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004802:	609a      	str	r2, [r3, #8]
      break;
 8004804:	e03c      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6859      	ldr	r1, [r3, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	461a      	mov	r2, r3
 8004814:	f000 fa76 	bl	8004d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2150      	movs	r1, #80	; 0x50
 800481e:	4618      	mov	r0, r3
 8004820:	f000 facf 	bl	8004dc2 <TIM_ITRx_SetConfig>
      break;
 8004824:	e02c      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	461a      	mov	r2, r3
 8004834:	f000 fa95 	bl	8004d62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2160      	movs	r1, #96	; 0x60
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fabf 	bl	8004dc2 <TIM_ITRx_SetConfig>
      break;
 8004844:	e01c      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	461a      	mov	r2, r3
 8004854:	f000 fa56 	bl	8004d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2140      	movs	r1, #64	; 0x40
 800485e:	4618      	mov	r0, r3
 8004860:	f000 faaf 	bl	8004dc2 <TIM_ITRx_SetConfig>
      break;
 8004864:	e00c      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f000 faa6 	bl	8004dc2 <TIM_ITRx_SetConfig>
      break;
 8004876:	e003      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
      break;
 800487c:	e000      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800487e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a34      	ldr	r2, [pc, #208]	; (80049d0 <TIM_Base_SetConfig+0xe4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00f      	beq.n	8004924 <TIM_Base_SetConfig+0x38>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d00b      	beq.n	8004924 <TIM_Base_SetConfig+0x38>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a31      	ldr	r2, [pc, #196]	; (80049d4 <TIM_Base_SetConfig+0xe8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <TIM_Base_SetConfig+0x38>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a30      	ldr	r2, [pc, #192]	; (80049d8 <TIM_Base_SetConfig+0xec>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_Base_SetConfig+0x38>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a2f      	ldr	r2, [pc, #188]	; (80049dc <TIM_Base_SetConfig+0xf0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d108      	bne.n	8004936 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <TIM_Base_SetConfig+0xe4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01b      	beq.n	8004976 <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d017      	beq.n	8004976 <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a22      	ldr	r2, [pc, #136]	; (80049d4 <TIM_Base_SetConfig+0xe8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <TIM_Base_SetConfig+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <TIM_Base_SetConfig+0xec>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00f      	beq.n	8004976 <TIM_Base_SetConfig+0x8a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a20      	ldr	r2, [pc, #128]	; (80049dc <TIM_Base_SetConfig+0xf0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_Base_SetConfig+0x8a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <TIM_Base_SetConfig+0xf4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_Base_SetConfig+0x8a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <TIM_Base_SetConfig+0xf8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_Base_SetConfig+0x8a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <TIM_Base_SetConfig+0xfc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d108      	bne.n	8004988 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a08      	ldr	r2, [pc, #32]	; (80049d0 <TIM_Base_SetConfig+0xe4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d103      	bne.n	80049bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	615a      	str	r2, [r3, #20]
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400
 80049e8:	40014800 	.word	0x40014800

080049ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f023 0201 	bic.w	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f023 0302 	bic.w	r3, r3, #2
 8004a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a1c      	ldr	r2, [pc, #112]	; (8004ab4 <TIM_OC1_SetConfig+0xc8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10c      	bne.n	8004a62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0308 	bic.w	r3, r3, #8
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a13      	ldr	r2, [pc, #76]	; (8004ab4 <TIM_OC1_SetConfig+0xc8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d111      	bne.n	8004a8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40010000 	.word	0x40010000

08004ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0210 	bic.w	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0320 	bic.w	r3, r3, #32
 8004b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <TIM_OC2_SetConfig+0xd4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d10d      	bne.n	8004b34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <TIM_OC2_SetConfig+0xd4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d113      	bne.n	8004b64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000

08004b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1d      	ldr	r2, [pc, #116]	; (8004c60 <TIM_OC3_SetConfig+0xd0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d10d      	bne.n	8004c0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <TIM_OC3_SetConfig+0xd0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d113      	bne.n	8004c3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40010000 	.word	0x40010000

08004c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	031b      	lsls	r3, r3, #12
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <TIM_OC4_SetConfig+0x9c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d109      	bne.n	8004cd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000

08004d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0201 	bic.w	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f023 030a 	bic.w	r3, r3, #10
 8004d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0210 	bic.w	r2, r3, #16
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	031b      	lsls	r3, r3, #12
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	621a      	str	r2, [r3, #32]
}
 8004db6:	bf00      	nop
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b085      	sub	sp, #20
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f043 0307 	orr.w	r3, r3, #7
 8004de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	609a      	str	r2, [r3, #8]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	021a      	lsls	r2, r3, #8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	609a      	str	r2, [r3, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e70:	431a      	orrs	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e050      	b.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d10c      	bne.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40000c00 	.word	0x40000c00
 8004f5c:	40014000 	.word	0x40014000

08004f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e03f      	b.n	800501a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fd f93a 	bl	8002228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2224      	movs	r2, #36	; 0x24
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fe49 	bl	8005c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e021      	b.n	8005078 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2224      	movs	r2, #36	; 0x24
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fd f977 	bl	8002340 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b20      	cmp	r3, #32
 800509e:	d17c      	bne.n	800519a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_UART_Transmit+0x2c>
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e075      	b.n	800519c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_UART_Transmit+0x3e>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e06e      	b.n	800519c <HAL_UART_Transmit+0x11c>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2221      	movs	r2, #33	; 0x21
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050d4:	f7fd fb14 	bl	8002700 <HAL_GetTick>
 80050d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	88fa      	ldrh	r2, [r7, #6]
 80050de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	88fa      	ldrh	r2, [r7, #6]
 80050e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	d108      	bne.n	8005102 <HAL_UART_Transmit+0x82>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	e003      	b.n	800510a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005112:	e02a      	b.n	800516a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2200      	movs	r2, #0
 800511c:	2180      	movs	r1, #128	; 0x80
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fb5a 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e036      	b.n	800519c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005142:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	3302      	adds	r3, #2
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	e007      	b.n	800515c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	3301      	adds	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1cf      	bne.n	8005114 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2200      	movs	r2, #0
 800517c:	2140      	movs	r1, #64	; 0x40
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fb2a 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e006      	b.n	800519c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800519a:	2302      	movs	r3, #2
  }
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d130      	bne.n	8005220 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_UART_Transmit_IT+0x26>
 80051c4:	88fb      	ldrh	r3, [r7, #6]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e029      	b.n	8005222 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_UART_Transmit_IT+0x38>
 80051d8:	2302      	movs	r3, #2
 80051da:	e022      	b.n	8005222 <HAL_UART_Transmit_IT+0x7e>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	88fa      	ldrh	r2, [r7, #6]
 80051ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2221      	movs	r2, #33	; 0x21
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800521a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	e000      	b.n	8005222 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b20      	cmp	r3, #32
 8005246:	d11d      	bne.n	8005284 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_UART_Receive_IT+0x26>
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e016      	b.n	8005286 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_UART_Receive_IT+0x38>
 8005262:	2302      	movs	r3, #2
 8005264:	e00f      	b.n	8005286 <HAL_UART_Receive_IT+0x58>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	461a      	mov	r2, r3
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fb1a 	bl	80058b4 <UART_Start_Receive_IT>
 8005280:	4603      	mov	r3, r0
 8005282:	e000      	b.n	8005286 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005284:	2302      	movs	r3, #2
  }
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b0ba      	sub	sp, #232	; 0xe8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10f      	bne.n	80052f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_UART_IRQHandler+0x66>
 80052e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fbfd 	bl	8005aee <UART_Receive_IT>
      return;
 80052f4:	e256      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80de 	beq.w	80054bc <HAL_UART_IRQHandler+0x22c>
 8005300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d106      	bne.n	800531a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005310:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80d1 	beq.w	80054bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_UART_IRQHandler+0xae>
 8005326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0201 	orr.w	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <HAL_UART_IRQHandler+0xd2>
 800534a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f043 0202 	orr.w	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <HAL_UART_IRQHandler+0xf6>
 800536e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f043 0204 	orr.w	r2, r3, #4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d011      	beq.n	80053b6 <HAL_UART_IRQHandler+0x126>
 8005392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d105      	bne.n	80053aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800539e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0208 	orr.w	r2, r3, #8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 81ed 	beq.w	800579a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_UART_IRQHandler+0x14e>
 80053cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fb88 	bl	8005aee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	bf0c      	ite	eq
 80053ec:	2301      	moveq	r3, #1
 80053ee:	2300      	movne	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <HAL_UART_IRQHandler+0x17a>
 8005402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d04f      	beq.n	80054aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa90 	bl	8005930 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b40      	cmp	r3, #64	; 0x40
 800541c:	d141      	bne.n	80054a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800543c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3314      	adds	r3, #20
 8005446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800544a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800544e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1d9      	bne.n	800541e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	2b00      	cmp	r3, #0
 8005470:	d013      	beq.n	800549a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	4a7d      	ldr	r2, [pc, #500]	; (800566c <HAL_UART_IRQHandler+0x3dc>)
 8005478:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	4618      	mov	r0, r3
 8005480:	f7fd fb21 	bl	8002ac6 <HAL_DMA_Abort_IT>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005494:	4610      	mov	r0, r2
 8005496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	e00e      	b.n	80054b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fc fc6e 	bl	8001d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	e00a      	b.n	80054b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fc fc6a 	bl	8001d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	e006      	b.n	80054b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc fc66 	bl	8001d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054b6:	e170      	b.n	800579a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b8:	bf00      	nop
    return;
 80054ba:	e16e      	b.n	800579a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	f040 814a 	bne.w	800575a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 8143 	beq.w	800575a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 813c 	beq.w	800575a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054e2:	2300      	movs	r3, #0
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	f040 80b4 	bne.w	8005670 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8140 	beq.w	800579e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005526:	429a      	cmp	r2, r3
 8005528:	f080 8139 	bcs.w	800579e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005532:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553e:	f000 8088 	beq.w	8005652 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800555c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800556e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800557a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1d9      	bne.n	8005542 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800559e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e1      	bne.n	800558e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3314      	adds	r3, #20
 80055d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e3      	bne.n	80055ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005634:	65ba      	str	r2, [r7, #88]	; 0x58
 8005636:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800563a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e3      	bne.n	8005610 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	4618      	mov	r0, r3
 800564e:	f7fd f9ca 	bl	80029e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565a:	b29b      	uxth	r3, r3
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	b29b      	uxth	r3, r3
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f8ac 	bl	80057c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005668:	e099      	b.n	800579e <HAL_UART_IRQHandler+0x50e>
 800566a:	bf00      	nop
 800566c:	080059f7 	.word	0x080059f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005678:	b29b      	uxth	r3, r3
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 808b 	beq.w	80057a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800568c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8086 	beq.w	80057a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056ba:	647a      	str	r2, [r7, #68]	; 0x44
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e3      	bne.n	8005696 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	623b      	str	r3, [r7, #32]
   return(result);
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3314      	adds	r3, #20
 80056ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056f2:	633a      	str	r2, [r7, #48]	; 0x30
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e3      	bne.n	80056ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	60fb      	str	r3, [r7, #12]
   return(result);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0310 	bic.w	r3, r3, #16
 800572a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005738:	61fa      	str	r2, [r7, #28]
 800573a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	69b9      	ldr	r1, [r7, #24]
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	617b      	str	r3, [r7, #20]
   return(result);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e3      	bne.n	8005714 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800574c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f834 	bl	80057c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005758:	e023      	b.n	80057a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <HAL_UART_IRQHandler+0x4ea>
 8005766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f953 	bl	8005a1e <UART_Transmit_IT>
    return;
 8005778:	e014      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <HAL_UART_IRQHandler+0x514>
 8005786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f993 	bl	8005abe <UART_EndTransmit_IT>
    return;
 8005798:	e004      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
    return;
 800579a:	bf00      	nop
 800579c:	e002      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
      return;
 800579e:	bf00      	nop
 80057a0:	e000      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
      return;
 80057a2:	bf00      	nop
  }
}
 80057a4:	37e8      	adds	r7, #232	; 0xe8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop

080057ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b090      	sub	sp, #64	; 0x40
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e8:	e050      	b.n	800588c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d04c      	beq.n	800588c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <UART_WaitOnFlagUntilTimeout+0x30>
 80057f8:	f7fc ff82 	bl	8002700 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005804:	429a      	cmp	r2, r3
 8005806:	d241      	bcs.n	800588c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005828:	637a      	str	r2, [r7, #52]	; 0x34
 800582a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800582e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e5      	bne.n	8005808 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	613b      	str	r3, [r7, #16]
   return(result);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	63bb      	str	r3, [r7, #56]	; 0x38
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3314      	adds	r3, #20
 800585a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800585c:	623a      	str	r2, [r7, #32]
 800585e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	6a3a      	ldr	r2, [r7, #32]
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	61bb      	str	r3, [r7, #24]
   return(result);
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e5      	bne.n	800583c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e00f      	b.n	80058ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4013      	ands	r3, r2
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	429a      	cmp	r2, r3
 800589a:	bf0c      	ite	eq
 800589c:	2301      	moveq	r3, #1
 800589e:	2300      	movne	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d09f      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3740      	adds	r7, #64	; 0x40
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2222      	movs	r2, #34	; 0x22
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005900:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695a      	ldr	r2, [r3, #20]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0201 	orr.w	r2, r2, #1
 8005910:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0220 	orr.w	r2, r2, #32
 8005920:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005930:	b480      	push	{r7}
 8005932:	b095      	sub	sp, #84	; 0x54
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800594e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005958:	643a      	str	r2, [r7, #64]	; 0x40
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800595e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e5      	bne.n	8005938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3314      	adds	r3, #20
 8005972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	61fb      	str	r3, [r7, #28]
   return(result);
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	64bb      	str	r3, [r7, #72]	; 0x48
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3314      	adds	r3, #20
 800598a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800598c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e5      	bne.n	800596c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d119      	bne.n	80059dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	647b      	str	r3, [r7, #68]	; 0x44
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c8:	61ba      	str	r2, [r7, #24]
 80059ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	613b      	str	r3, [r7, #16]
   return(result);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059ea:	bf00      	nop
 80059ec:	3754      	adds	r7, #84	; 0x54
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7fc f9b3 	bl	8001d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b21      	cmp	r3, #33	; 0x21
 8005a30:	d13e      	bne.n	8005ab0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3a:	d114      	bne.n	8005a66 <UART_Transmit_IT+0x48>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d110      	bne.n	8005a66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	1c9a      	adds	r2, r3, #2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	621a      	str	r2, [r3, #32]
 8005a64:	e008      	b.n	8005a78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	1c59      	adds	r1, r3, #1
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6211      	str	r1, [r2, #32]
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4619      	mov	r1, r3
 8005a86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10f      	bne.n	8005aac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e000      	b.n	8005ab2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ab0:	2302      	movs	r3, #2
  }
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff fe64 	bl	80057ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b08c      	sub	sp, #48	; 0x30
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b22      	cmp	r3, #34	; 0x22
 8005b00:	f040 80ab 	bne.w	8005c5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0c:	d117      	bne.n	8005b3e <UART_Receive_IT+0x50>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d113      	bne.n	8005b3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	1c9a      	adds	r2, r3, #2
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b3c:	e026      	b.n	8005b8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b50:	d007      	beq.n	8005b62 <UART_Receive_IT+0x74>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <UART_Receive_IT+0x82>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	e008      	b.n	8005b82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d15a      	bne.n	8005c56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0220 	bic.w	r2, r2, #32
 8005bae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d135      	bne.n	8005c4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	330c      	adds	r3, #12
 8005bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f023 0310 	bic.w	r3, r3, #16
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	330c      	adds	r3, #12
 8005c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c06:	623a      	str	r2, [r7, #32]
 8005c08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	69f9      	ldr	r1, [r7, #28]
 8005c0c:	6a3a      	ldr	r2, [r7, #32]
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e5      	bne.n	8005be6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b10      	cmp	r3, #16
 8005c26:	d10a      	bne.n	8005c3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fdbb 	bl	80057c0 <HAL_UARTEx_RxEventCallback>
 8005c4a:	e002      	b.n	8005c52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fc f8e9 	bl	8001e24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e002      	b.n	8005c5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e000      	b.n	8005c5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c5a:	2302      	movs	r3, #2
  }
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3730      	adds	r7, #48	; 0x30
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c68:	b0c0      	sub	sp, #256	; 0x100
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c80:	68d9      	ldr	r1, [r3, #12]
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	ea40 0301 	orr.w	r3, r0, r1
 8005c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cbc:	f021 010c 	bic.w	r1, r1, #12
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cde:	6999      	ldr	r1, [r3, #24]
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	ea40 0301 	orr.w	r3, r0, r1
 8005cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b8f      	ldr	r3, [pc, #572]	; (8005f30 <UART_SetConfig+0x2cc>)
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d005      	beq.n	8005d04 <UART_SetConfig+0xa0>
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b8d      	ldr	r3, [pc, #564]	; (8005f34 <UART_SetConfig+0x2d0>)
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d104      	bne.n	8005d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d04:	f7fd fde2 	bl	80038cc <HAL_RCC_GetPCLK2Freq>
 8005d08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d0c:	e003      	b.n	8005d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d0e:	f7fd fdc9 	bl	80038a4 <HAL_RCC_GetPCLK1Freq>
 8005d12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d20:	f040 810c 	bne.w	8005f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d36:	4622      	mov	r2, r4
 8005d38:	462b      	mov	r3, r5
 8005d3a:	1891      	adds	r1, r2, r2
 8005d3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d3e:	415b      	adcs	r3, r3
 8005d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d46:	4621      	mov	r1, r4
 8005d48:	eb12 0801 	adds.w	r8, r2, r1
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	eb43 0901 	adc.w	r9, r3, r1
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d66:	4690      	mov	r8, r2
 8005d68:	4699      	mov	r9, r3
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	eb18 0303 	adds.w	r3, r8, r3
 8005d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d74:	462b      	mov	r3, r5
 8005d76:	eb49 0303 	adc.w	r3, r9, r3
 8005d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d92:	460b      	mov	r3, r1
 8005d94:	18db      	adds	r3, r3, r3
 8005d96:	653b      	str	r3, [r7, #80]	; 0x50
 8005d98:	4613      	mov	r3, r2
 8005d9a:	eb42 0303 	adc.w	r3, r2, r3
 8005d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8005da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005da8:	f7fa fa82 	bl	80002b0 <__aeabi_uldivmod>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4b61      	ldr	r3, [pc, #388]	; (8005f38 <UART_SetConfig+0x2d4>)
 8005db2:	fba3 2302 	umull	r2, r3, r3, r2
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	011c      	lsls	r4, r3, #4
 8005dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	1891      	adds	r1, r2, r2
 8005dd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005dd4:	415b      	adcs	r3, r3
 8005dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ddc:	4641      	mov	r1, r8
 8005dde:	eb12 0a01 	adds.w	sl, r2, r1
 8005de2:	4649      	mov	r1, r9
 8005de4:	eb43 0b01 	adc.w	fp, r3, r1
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dfc:	4692      	mov	sl, r2
 8005dfe:	469b      	mov	fp, r3
 8005e00:	4643      	mov	r3, r8
 8005e02:	eb1a 0303 	adds.w	r3, sl, r3
 8005e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8005e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	18db      	adds	r3, r3, r3
 8005e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e2e:	4613      	mov	r3, r2
 8005e30:	eb42 0303 	adc.w	r3, r2, r3
 8005e34:	647b      	str	r3, [r7, #68]	; 0x44
 8005e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e3e:	f7fa fa37 	bl	80002b0 <__aeabi_uldivmod>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	4b3b      	ldr	r3, [pc, #236]	; (8005f38 <UART_SetConfig+0x2d4>)
 8005e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	2264      	movs	r2, #100	; 0x64
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	1acb      	subs	r3, r1, r3
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e5e:	4b36      	ldr	r3, [pc, #216]	; (8005f38 <UART_SetConfig+0x2d4>)
 8005e60:	fba3 2302 	umull	r2, r3, r3, r2
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e6c:	441c      	add	r4, r3
 8005e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	1891      	adds	r1, r2, r2
 8005e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e88:	415b      	adcs	r3, r3
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e90:	4641      	mov	r1, r8
 8005e92:	1851      	adds	r1, r2, r1
 8005e94:	6339      	str	r1, [r7, #48]	; 0x30
 8005e96:	4649      	mov	r1, r9
 8005e98:	414b      	adcs	r3, r1
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ea8:	4659      	mov	r1, fp
 8005eaa:	00cb      	lsls	r3, r1, #3
 8005eac:	4651      	mov	r1, sl
 8005eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eb2:	4651      	mov	r1, sl
 8005eb4:	00ca      	lsls	r2, r1, #3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ec4:	464b      	mov	r3, r9
 8005ec6:	460a      	mov	r2, r1
 8005ec8:	eb42 0303 	adc.w	r3, r2, r3
 8005ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005edc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	18db      	adds	r3, r3, r3
 8005ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eea:	4613      	mov	r3, r2
 8005eec:	eb42 0303 	adc.w	r3, r2, r3
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005efa:	f7fa f9d9 	bl	80002b0 <__aeabi_uldivmod>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <UART_SetConfig+0x2d4>)
 8005f04:	fba3 1302 	umull	r1, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	2164      	movs	r1, #100	; 0x64
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	3332      	adds	r3, #50	; 0x32
 8005f16:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <UART_SetConfig+0x2d4>)
 8005f18:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	f003 0207 	and.w	r2, r3, #7
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4422      	add	r2, r4
 8005f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f2c:	e106      	b.n	800613c <UART_SetConfig+0x4d8>
 8005f2e:	bf00      	nop
 8005f30:	40011000 	.word	0x40011000
 8005f34:	40011400 	.word	0x40011400
 8005f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f4e:	4642      	mov	r2, r8
 8005f50:	464b      	mov	r3, r9
 8005f52:	1891      	adds	r1, r2, r2
 8005f54:	6239      	str	r1, [r7, #32]
 8005f56:	415b      	adcs	r3, r3
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f5e:	4641      	mov	r1, r8
 8005f60:	1854      	adds	r4, r2, r1
 8005f62:	4649      	mov	r1, r9
 8005f64:	eb43 0501 	adc.w	r5, r3, r1
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	00eb      	lsls	r3, r5, #3
 8005f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f76:	00e2      	lsls	r2, r4, #3
 8005f78:	4614      	mov	r4, r2
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	4643      	mov	r3, r8
 8005f7e:	18e3      	adds	r3, r4, r3
 8005f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f84:	464b      	mov	r3, r9
 8005f86:	eb45 0303 	adc.w	r3, r5, r3
 8005f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005faa:	4629      	mov	r1, r5
 8005fac:	008b      	lsls	r3, r1, #2
 8005fae:	4621      	mov	r1, r4
 8005fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	008a      	lsls	r2, r1, #2
 8005fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005fbc:	f7fa f978 	bl	80002b0 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4b60      	ldr	r3, [pc, #384]	; (8006148 <UART_SetConfig+0x4e4>)
 8005fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	011c      	lsls	r4, r3, #4
 8005fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	1891      	adds	r1, r2, r2
 8005fe6:	61b9      	str	r1, [r7, #24]
 8005fe8:	415b      	adcs	r3, r3
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	1851      	adds	r1, r2, r1
 8005ff4:	6139      	str	r1, [r7, #16]
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	414b      	adcs	r3, r1
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006008:	4659      	mov	r1, fp
 800600a:	00cb      	lsls	r3, r1, #3
 800600c:	4651      	mov	r1, sl
 800600e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006012:	4651      	mov	r1, sl
 8006014:	00ca      	lsls	r2, r1, #3
 8006016:	4610      	mov	r0, r2
 8006018:	4619      	mov	r1, r3
 800601a:	4603      	mov	r3, r0
 800601c:	4642      	mov	r2, r8
 800601e:	189b      	adds	r3, r3, r2
 8006020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006024:	464b      	mov	r3, r9
 8006026:	460a      	mov	r2, r1
 8006028:	eb42 0303 	adc.w	r3, r2, r3
 800602c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	67bb      	str	r3, [r7, #120]	; 0x78
 800603a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006048:	4649      	mov	r1, r9
 800604a:	008b      	lsls	r3, r1, #2
 800604c:	4641      	mov	r1, r8
 800604e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006052:	4641      	mov	r1, r8
 8006054:	008a      	lsls	r2, r1, #2
 8006056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800605a:	f7fa f929 	bl	80002b0 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4611      	mov	r1, r2
 8006064:	4b38      	ldr	r3, [pc, #224]	; (8006148 <UART_SetConfig+0x4e4>)
 8006066:	fba3 2301 	umull	r2, r3, r3, r1
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	2264      	movs	r2, #100	; 0x64
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	1acb      	subs	r3, r1, r3
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	3332      	adds	r3, #50	; 0x32
 8006078:	4a33      	ldr	r2, [pc, #204]	; (8006148 <UART_SetConfig+0x4e4>)
 800607a:	fba2 2303 	umull	r2, r3, r2, r3
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006084:	441c      	add	r4, r3
 8006086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608a:	2200      	movs	r2, #0
 800608c:	673b      	str	r3, [r7, #112]	; 0x70
 800608e:	677a      	str	r2, [r7, #116]	; 0x74
 8006090:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006094:	4642      	mov	r2, r8
 8006096:	464b      	mov	r3, r9
 8006098:	1891      	adds	r1, r2, r2
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	415b      	adcs	r3, r3
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060a4:	4641      	mov	r1, r8
 80060a6:	1851      	adds	r1, r2, r1
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	4649      	mov	r1, r9
 80060ac:	414b      	adcs	r3, r1
 80060ae:	607b      	str	r3, [r7, #4]
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060bc:	4659      	mov	r1, fp
 80060be:	00cb      	lsls	r3, r1, #3
 80060c0:	4651      	mov	r1, sl
 80060c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060c6:	4651      	mov	r1, sl
 80060c8:	00ca      	lsls	r2, r1, #3
 80060ca:	4610      	mov	r0, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	4642      	mov	r2, r8
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80060d6:	464b      	mov	r3, r9
 80060d8:	460a      	mov	r2, r1
 80060da:	eb42 0303 	adc.w	r3, r2, r3
 80060de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	663b      	str	r3, [r7, #96]	; 0x60
 80060ea:	667a      	str	r2, [r7, #100]	; 0x64
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060f8:	4649      	mov	r1, r9
 80060fa:	008b      	lsls	r3, r1, #2
 80060fc:	4641      	mov	r1, r8
 80060fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006102:	4641      	mov	r1, r8
 8006104:	008a      	lsls	r2, r1, #2
 8006106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800610a:	f7fa f8d1 	bl	80002b0 <__aeabi_uldivmod>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4b0d      	ldr	r3, [pc, #52]	; (8006148 <UART_SetConfig+0x4e4>)
 8006114:	fba3 1302 	umull	r1, r3, r3, r2
 8006118:	095b      	lsrs	r3, r3, #5
 800611a:	2164      	movs	r1, #100	; 0x64
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	3332      	adds	r3, #50	; 0x32
 8006126:	4a08      	ldr	r2, [pc, #32]	; (8006148 <UART_SetConfig+0x4e4>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	095b      	lsrs	r3, r3, #5
 800612e:	f003 020f 	and.w	r2, r3, #15
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4422      	add	r2, r4
 800613a:	609a      	str	r2, [r3, #8]
}
 800613c:	bf00      	nop
 800613e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006142:	46bd      	mov	sp, r7
 8006144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006148:	51eb851f 	.word	0x51eb851f

0800614c <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <MUX>:
void MUX(struct WIFI *a)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2204      	movs	r2, #4
 80061dc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <IPDef>:
void IPDef(struct WIFI *a)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2205      	movs	r2, #5
 8006208:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2206      	movs	r2, #6
 8006260:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2208      	movs	r2, #8
 800628c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2209      	movs	r2, #9
 80062b8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2207      	movs	r2, #7
 80062e4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006492:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 80064a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a6:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80064aa:	af06      	add	r7, sp, #24
 80064ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064b4:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80064c2:	2300      	movs	r3, #0
 80064c4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80064c8:	2300      	movs	r3, #0
 80064ca:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80064ce:	2300      	movs	r3, #0
 80064d0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 80064d4:	2320      	movs	r3, #32
 80064d6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 80064da:	2322      	movs	r3, #34	; 0x22
 80064dc:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 80064e0:	4b7c      	ldr	r3, [pc, #496]	; (80066d4 <AT_ESP8266_ND+0x230>)
 80064e2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 80064e6:	4a7c      	ldr	r2, [pc, #496]	; (80066d8 <AT_ESP8266_ND+0x234>)
 80064e8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	4611      	mov	r1, r2
 80064f0:	8019      	strh	r1, [r3, #0]
 80064f2:	3302      	adds	r3, #2
 80064f4:	0c12      	lsrs	r2, r2, #16
 80064f6:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80064f8:	f642 4322 	movw	r3, #11298	; 0x2c22
 80064fc:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006500:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006504:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800650e:	2300      	movs	r3, #0
 8006510:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006518:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006532:	4618      	mov	r0, r3
 8006534:	f7f9 fe5e 	bl	80001f4 <strlen>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006540:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 800654a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800654e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2200      	movs	r2, #0
 8006556:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 800655a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800655e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006568:	4618      	mov	r0, r3
 800656a:	f7f9 fe43 	bl	80001f4 <strlen>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006576:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006580:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006584:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2206      	movs	r2, #6
 800658c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006594:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800659e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80065ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80065ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80065c8:	603b      	str	r3, [r7, #0]
 80065ca:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80065ce:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80065d8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80065dc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80065e0:	6809      	ldr	r1, [r1, #0]
 80065e2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80065e6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80065ea:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80065ee:	6800      	ldr	r0, [r0, #0]
 80065f0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80065f4:	2300      	movs	r3, #0
 80065f6:	9305      	str	r3, [sp, #20]
 80065f8:	9004      	str	r0, [sp, #16]
 80065fa:	9103      	str	r1, [sp, #12]
 80065fc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006600:	9102      	str	r1, [sp, #8]
 8006602:	9201      	str	r2, [sp, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	4633      	mov	r3, r6
 800660a:	4a34      	ldr	r2, [pc, #208]	; (80066dc <AT_ESP8266_ND+0x238>)
 800660c:	4629      	mov	r1, r5
 800660e:	4620      	mov	r0, r4
 8006610:	f007 f9c2 	bl	800d998 <FT_String_ND>
 8006614:	4603      	mov	r3, r0
 8006616:	2b01      	cmp	r3, #1
 8006618:	f040 8140 	bne.w	800689c <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 800661c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006620:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2206      	movs	r2, #6
 8006628:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 800662c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006630:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800663a:	2b00      	cmp	r3, #0
 800663c:	d150      	bne.n	80066e0 <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 800663e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006642:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800664c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006650:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800665a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800665e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006668:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800666c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800667c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006686:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800668a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800668e:	6809      	ldr	r1, [r1, #0]
 8006690:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006694:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006698:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80066a2:	2304      	movs	r3, #4
 80066a4:	9305      	str	r3, [sp, #20]
 80066a6:	9004      	str	r0, [sp, #16]
 80066a8:	9103      	str	r1, [sp, #12]
 80066aa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80066ae:	9102      	str	r1, [sp, #8]
 80066b0:	9201      	str	r2, [sp, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4633      	mov	r3, r6
 80066b8:	4a08      	ldr	r2, [pc, #32]	; (80066dc <AT_ESP8266_ND+0x238>)
 80066ba:	4629      	mov	r1, r5
 80066bc:	4620      	mov	r0, r4
 80066be:	f007 f96b 	bl	800d998 <FT_String_ND>
 80066c2:	4602      	mov	r2, r0
 80066c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 80066d2:	e04f      	b.n	8006774 <AT_ESP8266_ND+0x2d0>
 80066d4:	00222c22 	.word	0x00222c22
 80066d8:	0800fa84 	.word	0x0800fa84
 80066dc:	0800f8ac 	.word	0x0800f8ac
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 80066e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80066ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80066fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800670a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800670e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800671e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006728:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800672c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006730:	6809      	ldr	r1, [r1, #0]
 8006732:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006736:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800673a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800673e:	6800      	ldr	r0, [r0, #0]
 8006740:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006744:	2305      	movs	r3, #5
 8006746:	9305      	str	r3, [sp, #20]
 8006748:	9004      	str	r0, [sp, #16]
 800674a:	9103      	str	r1, [sp, #12]
 800674c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006750:	9102      	str	r1, [sp, #8]
 8006752:	9201      	str	r2, [sp, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	4633      	mov	r3, r6
 800675a:	4ad2      	ldr	r2, [pc, #840]	; (8006aa4 <AT_ESP8266_ND+0x600>)
 800675c:	4629      	mov	r1, r5
 800675e:	4620      	mov	r0, r4
 8006760:	f007 f91a 	bl	800d998 <FT_String_ND>
 8006764:	4602      	mov	r2, r0
 8006766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800676a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006778:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006782:	2b04      	cmp	r3, #4
 8006784:	d15a      	bne.n	800683c <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 8006786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800678a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2263      	movs	r2, #99	; 0x63
 8006792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800679a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 80067a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 80067b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f103 0094 	add.w	r0, r3, #148	; 0x94
 80067c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f603 0194 	addw	r1, r3, #2196	; 0x894
 80067ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 80067dc:	2341      	movs	r3, #65	; 0x41
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	2300      	movs	r3, #0
 80067e2:	f007 fc55 	bl	800e090 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 80067e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80067f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006802:	2341      	movs	r3, #65	; 0x41
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	2300      	movs	r3, #0
 8006808:	2205      	movs	r2, #5
 800680a:	f007 fc41 	bl	800e090 <CopiaVector>

	 		a->_debug_rx_ok++;
 800680e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006822:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 800682c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006830:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2201      	movs	r2, #1
 8006838:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 800683c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006840:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800684a:	2b05      	cmp	r3, #5
 800684c:	d126      	bne.n	800689c <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 800684e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006852:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2237      	movs	r2, #55	; 0x37
 800685a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 800685e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006862:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2200      	movs	r2, #0
 800686a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 800686e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006872:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006882:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 800688c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006890:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2201      	movs	r2, #1
 8006898:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 800689c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2204      	movs	r2, #4
 80068a8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80068ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80068ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80068c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80068d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80068ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80068f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80068f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80068fc:	6809      	ldr	r1, [r1, #0]
 80068fe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006902:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006906:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006910:	2300      	movs	r3, #0
 8006912:	9305      	str	r3, [sp, #20]
 8006914:	9004      	str	r0, [sp, #16]
 8006916:	9103      	str	r1, [sp, #12]
 8006918:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800691c:	9102      	str	r1, [sp, #8]
 800691e:	9201      	str	r2, [sp, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	4633      	mov	r3, r6
 8006926:	4a60      	ldr	r2, [pc, #384]	; (8006aa8 <AT_ESP8266_ND+0x604>)
 8006928:	4629      	mov	r1, r5
 800692a:	4620      	mov	r0, r4
 800692c:	f007 f834 	bl	800d998 <FT_String_ND>
 8006930:	4603      	mov	r3, r0
 8006932:	2b01      	cmp	r3, #1
 8006934:	f040 83b4 	bne.w	80070a0 <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 8006938:	2301      	movs	r3, #1
 800693a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 800693e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2206      	movs	r2, #6
 800694a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 800694e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006952:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800695c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800696a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800696e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800697c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800698c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006996:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800699a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800699e:	6809      	ldr	r1, [r1, #0]
 80069a0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80069a4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80069a8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80069ac:	6800      	ldr	r0, [r0, #0]
 80069ae:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80069b2:	2300      	movs	r3, #0
 80069b4:	9305      	str	r3, [sp, #20]
 80069b6:	9004      	str	r0, [sp, #16]
 80069b8:	9103      	str	r1, [sp, #12]
 80069ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80069be:	9102      	str	r1, [sp, #8]
 80069c0:	9201      	str	r2, [sp, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	4633      	mov	r3, r6
 80069c8:	4a38      	ldr	r2, [pc, #224]	; (8006aac <AT_ESP8266_ND+0x608>)
 80069ca:	4629      	mov	r1, r5
 80069cc:	4620      	mov	r0, r4
 80069ce:	f006 ffe3 	bl	800d998 <FT_String_ND>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d113      	bne.n	8006a00 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 80069d8:	2313      	movs	r3, #19
 80069da:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 80069de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 80069fc:	f001 bae1 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006a00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006a1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006a2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006a3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a48:	603b      	str	r3, [r7, #0]
 8006a4a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a4e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a58:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a5c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a60:	6809      	ldr	r1, [r1, #0]
 8006a62:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a66:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a6a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a6e:	6800      	ldr	r0, [r0, #0]
 8006a70:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006a74:	2300      	movs	r3, #0
 8006a76:	9305      	str	r3, [sp, #20]
 8006a78:	9004      	str	r0, [sp, #16]
 8006a7a:	9103      	str	r1, [sp, #12]
 8006a7c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a80:	9102      	str	r1, [sp, #8]
 8006a82:	9201      	str	r2, [sp, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4633      	mov	r3, r6
 8006a8a:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <AT_ESP8266_ND+0x60c>)
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f006 ff82 	bl	800d998 <FT_String_ND>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d10c      	bne.n	8006ab4 <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8006a9a:	230d      	movs	r3, #13
 8006a9c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006aa0:	f001 ba8f 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
 8006aa4:	0800f8ac 	.word	0x0800f8ac
 8006aa8:	0800f8b4 	.word	0x0800f8b4
 8006aac:	0800f8bc 	.word	0x0800f8bc
 8006ab0:	0800f8c4 	.word	0x0800f8c4
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	220a      	movs	r2, #10
 8006ac0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ad6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006afc:	603b      	str	r3, [r7, #0]
 8006afe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b02:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b06:	6812      	ldr	r2, [r2, #0]
 8006b08:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b0c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b10:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b14:	6809      	ldr	r1, [r1, #0]
 8006b16:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b1a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b1e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b22:	6800      	ldr	r0, [r0, #0]
 8006b24:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006b28:	2300      	movs	r3, #0
 8006b2a:	9305      	str	r3, [sp, #20]
 8006b2c:	9004      	str	r0, [sp, #16]
 8006b2e:	9103      	str	r1, [sp, #12]
 8006b30:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b34:	9102      	str	r1, [sp, #8]
 8006b36:	9201      	str	r2, [sp, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	4633      	mov	r3, r6
 8006b3e:	4aaa      	ldr	r2, [pc, #680]	; (8006de8 <AT_ESP8266_ND+0x944>)
 8006b40:	4629      	mov	r1, r5
 8006b42:	4620      	mov	r0, r4
 8006b44:	f006 ff28 	bl	800d998 <FT_String_ND>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d104      	bne.n	8006b58 <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 8006b4e:	231c      	movs	r3, #28
 8006b50:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006b54:	f001 ba35 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	220f      	movs	r2, #15
 8006b64:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006b92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ba0:	603b      	str	r3, [r7, #0]
 8006ba2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ba6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006bb0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006bb4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006bb8:	6809      	ldr	r1, [r1, #0]
 8006bba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006bbe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006bc2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9305      	str	r3, [sp, #20]
 8006bd0:	9004      	str	r0, [sp, #16]
 8006bd2:	9103      	str	r1, [sp, #12]
 8006bd4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006bd8:	9102      	str	r1, [sp, #8]
 8006bda:	9201      	str	r2, [sp, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	4633      	mov	r3, r6
 8006be2:	4a82      	ldr	r2, [pc, #520]	; (8006dec <AT_ESP8266_ND+0x948>)
 8006be4:	4629      	mov	r1, r5
 8006be6:	4620      	mov	r0, r4
 8006be8:	f006 fed6 	bl	800d998 <FT_String_ND>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d104      	bne.n	8006bfc <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006bf2:	2317      	movs	r3, #23
 8006bf4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006bf8:	f001 b9e3 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2203      	movs	r2, #3
 8006c08:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8006c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006c28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006c36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c4a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c4e:	6812      	ldr	r2, [r2, #0]
 8006c50:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c54:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c58:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c5c:	6809      	ldr	r1, [r1, #0]
 8006c5e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c62:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c66:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006c70:	2300      	movs	r3, #0
 8006c72:	9305      	str	r3, [sp, #20]
 8006c74:	9004      	str	r0, [sp, #16]
 8006c76:	9103      	str	r1, [sp, #12]
 8006c78:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c7c:	9102      	str	r1, [sp, #8]
 8006c7e:	9201      	str	r2, [sp, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	4633      	mov	r3, r6
 8006c86:	4a5a      	ldr	r2, [pc, #360]	; (8006df0 <AT_ESP8266_ND+0x94c>)
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f006 fe84 	bl	800d998 <FT_String_ND>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d104      	bne.n	8006ca0 <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 8006c96:	2314      	movs	r3, #20
 8006c98:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006c9c:	f001 b991 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8006ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	220c      	movs	r2, #12
 8006cac:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006cb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006cbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ccc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006cda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cf2:	6812      	ldr	r2, [r2, #0]
 8006cf4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006cf8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cfc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d00:	6809      	ldr	r1, [r1, #0]
 8006d02:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d06:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d0a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d0e:	6800      	ldr	r0, [r0, #0]
 8006d10:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006d14:	2300      	movs	r3, #0
 8006d16:	9305      	str	r3, [sp, #20]
 8006d18:	9004      	str	r0, [sp, #16]
 8006d1a:	9103      	str	r1, [sp, #12]
 8006d1c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d20:	9102      	str	r1, [sp, #8]
 8006d22:	9201      	str	r2, [sp, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	4633      	mov	r3, r6
 8006d2a:	4a32      	ldr	r2, [pc, #200]	; (8006df4 <AT_ESP8266_ND+0x950>)
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f006 fe32 	bl	800d998 <FT_String_ND>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d104      	bne.n	8006d44 <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 8006d3a:	2315      	movs	r3, #21
 8006d3c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d40:	f001 b93f 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	220b      	movs	r2, #11
 8006d50:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006d62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006d70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006d7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d8c:	603b      	str	r3, [r7, #0]
 8006d8e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d92:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d9c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006da0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006da4:	6809      	ldr	r1, [r1, #0]
 8006da6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006daa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006dae:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006db2:	6800      	ldr	r0, [r0, #0]
 8006db4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006db8:	2300      	movs	r3, #0
 8006dba:	9305      	str	r3, [sp, #20]
 8006dbc:	9004      	str	r0, [sp, #16]
 8006dbe:	9103      	str	r1, [sp, #12]
 8006dc0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006dc4:	9102      	str	r1, [sp, #8]
 8006dc6:	9201      	str	r2, [sp, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4633      	mov	r3, r6
 8006dce:	4a0a      	ldr	r2, [pc, #40]	; (8006df8 <AT_ESP8266_ND+0x954>)
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f006 fde0 	bl	800d998 <FT_String_ND>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d10e      	bne.n	8006dfc <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 8006dde:	2309      	movs	r3, #9
 8006de0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006de4:	f001 b8ed 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
 8006de8:	0800f8d0 	.word	0x0800f8d0
 8006dec:	0800f8dc 	.word	0x0800f8dc
 8006df0:	0800f8ec 	.word	0x0800f8ec
 8006df4:	0800f8f0 	.word	0x0800f8f0
 8006df8:	0800f900 	.word	0x0800f900
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8006dfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	220b      	movs	r2, #11
 8006e08:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006e0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006e1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006e28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e44:	603b      	str	r3, [r7, #0]
 8006e46:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e4a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e54:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e58:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e5c:	6809      	ldr	r1, [r1, #0]
 8006e5e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e62:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e66:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006e70:	2300      	movs	r3, #0
 8006e72:	9305      	str	r3, [sp, #20]
 8006e74:	9004      	str	r0, [sp, #16]
 8006e76:	9103      	str	r1, [sp, #12]
 8006e78:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e7c:	9102      	str	r1, [sp, #8]
 8006e7e:	9201      	str	r2, [sp, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4633      	mov	r3, r6
 8006e86:	4a82      	ldr	r2, [pc, #520]	; (8007090 <AT_ESP8266_ND+0xbec>)
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f006 fd84 	bl	800d998 <FT_String_ND>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d104      	bne.n	8006ea0 <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 8006e96:	2307      	movs	r3, #7
 8006e98:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e9c:	f001 b891 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006ea0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	220b      	movs	r2, #11
 8006eac:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006eb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006ebe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ee8:	603b      	str	r3, [r7, #0]
 8006eea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006eee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ef8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006efc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f00:	6809      	ldr	r1, [r1, #0]
 8006f02:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f06:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f0a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f0e:	6800      	ldr	r0, [r0, #0]
 8006f10:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f14:	2300      	movs	r3, #0
 8006f16:	9305      	str	r3, [sp, #20]
 8006f18:	9004      	str	r0, [sp, #16]
 8006f1a:	9103      	str	r1, [sp, #12]
 8006f1c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f20:	9102      	str	r1, [sp, #8]
 8006f22:	9201      	str	r2, [sp, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4633      	mov	r3, r6
 8006f2a:	4a5a      	ldr	r2, [pc, #360]	; (8007094 <AT_ESP8266_ND+0xbf0>)
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f006 fd32 	bl	800d998 <FT_String_ND>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d104      	bne.n	8006f44 <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 8006f3a:	2308      	movs	r3, #8
 8006f3c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f40:	f001 b83f 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8006f44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	220a      	movs	r2, #10
 8006f50:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006f54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f8c:	603b      	str	r3, [r7, #0]
 8006f8e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f92:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f9c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fa0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fa4:	6809      	ldr	r1, [r1, #0]
 8006fa6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006faa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006fae:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006fb2:	6800      	ldr	r0, [r0, #0]
 8006fb4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9305      	str	r3, [sp, #20]
 8006fbc:	9004      	str	r0, [sp, #16]
 8006fbe:	9103      	str	r1, [sp, #12]
 8006fc0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fc4:	9102      	str	r1, [sp, #8]
 8006fc6:	9201      	str	r2, [sp, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	4633      	mov	r3, r6
 8006fce:	4a32      	ldr	r2, [pc, #200]	; (8007098 <AT_ESP8266_ND+0xbf4>)
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f006 fce0 	bl	800d998 <FT_String_ND>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d104      	bne.n	8006fe8 <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 8006fde:	231b      	movs	r3, #27
 8006fe0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fe4:	f000 bfed 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8006fe8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2207      	movs	r2, #7
 8006ff4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8006ff8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ffc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007006:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800700a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007022:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007026:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007036:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800703a:	6812      	ldr	r2, [r2, #0]
 800703c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007040:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007044:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007048:	6809      	ldr	r1, [r1, #0]
 800704a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800704e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007052:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800705c:	2300      	movs	r3, #0
 800705e:	9305      	str	r3, [sp, #20]
 8007060:	9004      	str	r0, [sp, #16]
 8007062:	9103      	str	r1, [sp, #12]
 8007064:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007068:	9102      	str	r1, [sp, #8]
 800706a:	9201      	str	r2, [sp, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4633      	mov	r3, r6
 8007072:	4a0a      	ldr	r2, [pc, #40]	; (800709c <AT_ESP8266_ND+0xbf8>)
 8007074:	4629      	mov	r1, r5
 8007076:	4620      	mov	r0, r4
 8007078:	f006 fc8e 	bl	800d998 <FT_String_ND>
 800707c:	4603      	mov	r3, r0
 800707e:	2b01      	cmp	r3, #1
 8007080:	f040 879f 	bne.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 8007084:	230f      	movs	r3, #15
 8007086:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800708a:	f000 bf9a 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
 800708e:	bf00      	nop
 8007090:	0800f90c 	.word	0x0800f90c
 8007094:	0800f918 	.word	0x0800f918
 8007098:	0800f924 	.word	0x0800f924
 800709c:	0800f930 	.word	0x0800f930
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 80070a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2207      	movs	r2, #7
 80070ac:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80070b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80070be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80070cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80070da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070ee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070f8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070fc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007100:	6809      	ldr	r1, [r1, #0]
 8007102:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007106:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800710a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800710e:	6800      	ldr	r0, [r0, #0]
 8007110:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007114:	2300      	movs	r3, #0
 8007116:	9305      	str	r3, [sp, #20]
 8007118:	9004      	str	r0, [sp, #16]
 800711a:	9103      	str	r1, [sp, #12]
 800711c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007120:	9102      	str	r1, [sp, #8]
 8007122:	9201      	str	r2, [sp, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	4633      	mov	r3, r6
 800712a:	4aaa      	ldr	r2, [pc, #680]	; (80073d4 <AT_ESP8266_ND+0xf30>)
 800712c:	4629      	mov	r1, r5
 800712e:	4620      	mov	r0, r4
 8007130:	f006 fc32 	bl	800d998 <FT_String_ND>
 8007134:	4603      	mov	r3, r0
 8007136:	2b01      	cmp	r3, #1
 8007138:	f040 839d 	bne.w	8007876 <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 800713c:	2302      	movs	r3, #2
 800713e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8007142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007146:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2208      	movs	r2, #8
 800714e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 8007152:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007156:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007160:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007164:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800716e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007172:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800717c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007180:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007190:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800719a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800719e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071a2:	6809      	ldr	r1, [r1, #0]
 80071a4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071a8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80071ac:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80071b0:	6800      	ldr	r0, [r0, #0]
 80071b2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80071b6:	2300      	movs	r3, #0
 80071b8:	9305      	str	r3, [sp, #20]
 80071ba:	9004      	str	r0, [sp, #16]
 80071bc:	9103      	str	r1, [sp, #12]
 80071be:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071c2:	9102      	str	r1, [sp, #8]
 80071c4:	9201      	str	r2, [sp, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	4633      	mov	r3, r6
 80071cc:	4a82      	ldr	r2, [pc, #520]	; (80073d8 <AT_ESP8266_ND+0xf34>)
 80071ce:	4629      	mov	r1, r5
 80071d0:	4620      	mov	r0, r4
 80071d2:	f006 fbe1 	bl	800d998 <FT_String_ND>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d104      	bne.n	80071e6 <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 80071dc:	2306      	movs	r3, #6
 80071de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071e2:	f000 beee 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80071e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2215      	movs	r2, #21
 80071f2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80071f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007204:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007208:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007212:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007216:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007224:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007234:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800723e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007242:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007246:	6809      	ldr	r1, [r1, #0]
 8007248:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800724c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007250:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007254:	6800      	ldr	r0, [r0, #0]
 8007256:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800725a:	2300      	movs	r3, #0
 800725c:	9305      	str	r3, [sp, #20]
 800725e:	9004      	str	r0, [sp, #16]
 8007260:	9103      	str	r1, [sp, #12]
 8007262:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007266:	9102      	str	r1, [sp, #8]
 8007268:	9201      	str	r2, [sp, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	4633      	mov	r3, r6
 8007270:	4a5a      	ldr	r2, [pc, #360]	; (80073dc <AT_ESP8266_ND+0xf38>)
 8007272:	4629      	mov	r1, r5
 8007274:	4620      	mov	r0, r4
 8007276:	f006 fb8f 	bl	800d998 <FT_String_ND>
 800727a:	4603      	mov	r3, r0
 800727c:	2b01      	cmp	r3, #1
 800727e:	d104      	bne.n	800728a <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8007280:	230e      	movs	r3, #14
 8007282:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007286:	f000 be9c 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 800728a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800728e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	220c      	movs	r2, #12
 8007296:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800729a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800729e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80072a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80072b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80072c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072d8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072e2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072e6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072ea:	6809      	ldr	r1, [r1, #0]
 80072ec:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072f0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072f4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072f8:	6800      	ldr	r0, [r0, #0]
 80072fa:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80072fe:	2300      	movs	r3, #0
 8007300:	9305      	str	r3, [sp, #20]
 8007302:	9004      	str	r0, [sp, #16]
 8007304:	9103      	str	r1, [sp, #12]
 8007306:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800730a:	9102      	str	r1, [sp, #8]
 800730c:	9201      	str	r2, [sp, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4633      	mov	r3, r6
 8007314:	4a32      	ldr	r2, [pc, #200]	; (80073e0 <AT_ESP8266_ND+0xf3c>)
 8007316:	4629      	mov	r1, r5
 8007318:	4620      	mov	r0, r4
 800731a:	f006 fb3d 	bl	800d998 <FT_String_ND>
 800731e:	4603      	mov	r3, r0
 8007320:	2b01      	cmp	r3, #1
 8007322:	d104      	bne.n	800732e <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 8007324:	2316      	movs	r3, #22
 8007326:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800732a:	f000 be4a 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 800732e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007332:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	220b      	movs	r2, #11
 800733a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 800733e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007342:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800734c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007350:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800735a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800735e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007368:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800736c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800737c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007380:	6812      	ldr	r2, [r2, #0]
 8007382:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007386:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800738a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800738e:	6809      	ldr	r1, [r1, #0]
 8007390:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007394:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007398:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800739c:	6800      	ldr	r0, [r0, #0]
 800739e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80073a2:	2300      	movs	r3, #0
 80073a4:	9305      	str	r3, [sp, #20]
 80073a6:	9004      	str	r0, [sp, #16]
 80073a8:	9103      	str	r1, [sp, #12]
 80073aa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073ae:	9102      	str	r1, [sp, #8]
 80073b0:	9201      	str	r2, [sp, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4633      	mov	r3, r6
 80073b8:	4a0a      	ldr	r2, [pc, #40]	; (80073e4 <AT_ESP8266_ND+0xf40>)
 80073ba:	4629      	mov	r1, r5
 80073bc:	4620      	mov	r0, r4
 80073be:	f006 faeb 	bl	800d998 <FT_String_ND>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d10f      	bne.n	80073e8 <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 80073c8:	231a      	movs	r3, #26
 80073ca:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073ce:	f000 bdf8 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
 80073d2:	bf00      	nop
 80073d4:	0800f938 	.word	0x0800f938
 80073d8:	0800f940 	.word	0x0800f940
 80073dc:	0800f94c 	.word	0x0800f94c
 80073e0:	0800f8f0 	.word	0x0800f8f0
 80073e4:	0800f900 	.word	0x0800f900
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80073e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2211      	movs	r2, #17
 80073f4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80073f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007406:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800740a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007422:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007426:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007430:	603b      	str	r3, [r7, #0]
 8007432:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007436:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800743a:	6812      	ldr	r2, [r2, #0]
 800743c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007440:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007444:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007448:	6809      	ldr	r1, [r1, #0]
 800744a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800744e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007452:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007456:	6800      	ldr	r0, [r0, #0]
 8007458:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800745c:	2300      	movs	r3, #0
 800745e:	9305      	str	r3, [sp, #20]
 8007460:	9004      	str	r0, [sp, #16]
 8007462:	9103      	str	r1, [sp, #12]
 8007464:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007468:	9102      	str	r1, [sp, #8]
 800746a:	9201      	str	r2, [sp, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	4633      	mov	r3, r6
 8007472:	4aaa      	ldr	r2, [pc, #680]	; (800771c <AT_ESP8266_ND+0x1278>)
 8007474:	4629      	mov	r1, r5
 8007476:	4620      	mov	r0, r4
 8007478:	f006 fa8e 	bl	800d998 <FT_String_ND>
 800747c:	4603      	mov	r3, r0
 800747e:	2b01      	cmp	r3, #1
 8007480:	d104      	bne.n	800748c <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 8007482:	2311      	movs	r3, #17
 8007484:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007488:	f000 bd9b 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 800748c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007490:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	220a      	movs	r2, #10
 8007498:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 800749c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80074aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80074b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80074c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074da:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074e4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074e8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074ec:	6809      	ldr	r1, [r1, #0]
 80074ee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074f2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074f6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007500:	2300      	movs	r3, #0
 8007502:	9305      	str	r3, [sp, #20]
 8007504:	9004      	str	r0, [sp, #16]
 8007506:	9103      	str	r1, [sp, #12]
 8007508:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800750c:	9102      	str	r1, [sp, #8]
 800750e:	9201      	str	r2, [sp, #4]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	4633      	mov	r3, r6
 8007516:	4a82      	ldr	r2, [pc, #520]	; (8007720 <AT_ESP8266_ND+0x127c>)
 8007518:	4629      	mov	r1, r5
 800751a:	4620      	mov	r0, r4
 800751c:	f006 fa3c 	bl	800d998 <FT_String_ND>
 8007520:	4603      	mov	r3, r0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d104      	bne.n	8007530 <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 8007526:	231d      	movs	r3, #29
 8007528:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800752c:	f000 bd49 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007534:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	220b      	movs	r2, #11
 800753c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007540:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007544:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800754e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007552:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800755c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007560:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800756a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800756e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007578:	603b      	str	r3, [r7, #0]
 800757a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800757e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007588:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800758c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007590:	6809      	ldr	r1, [r1, #0]
 8007592:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007596:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800759a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800759e:	6800      	ldr	r0, [r0, #0]
 80075a0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80075a4:	2300      	movs	r3, #0
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	9004      	str	r0, [sp, #16]
 80075aa:	9103      	str	r1, [sp, #12]
 80075ac:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075b0:	9102      	str	r1, [sp, #8]
 80075b2:	9201      	str	r2, [sp, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	4633      	mov	r3, r6
 80075ba:	4a5a      	ldr	r2, [pc, #360]	; (8007724 <AT_ESP8266_ND+0x1280>)
 80075bc:	4629      	mov	r1, r5
 80075be:	4620      	mov	r0, r4
 80075c0:	f006 f9ea 	bl	800d998 <FT_String_ND>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d104      	bne.n	80075d4 <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 80075ca:	231e      	movs	r3, #30
 80075cc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075d0:	f000 bcf7 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 80075d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	220b      	movs	r2, #11
 80075e0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80075e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80075f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800760e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007612:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800761c:	603b      	str	r3, [r7, #0]
 800761e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007622:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007626:	6812      	ldr	r2, [r2, #0]
 8007628:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800762c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007630:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007634:	6809      	ldr	r1, [r1, #0]
 8007636:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800763a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800763e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007642:	6800      	ldr	r0, [r0, #0]
 8007644:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007648:	2300      	movs	r3, #0
 800764a:	9305      	str	r3, [sp, #20]
 800764c:	9004      	str	r0, [sp, #16]
 800764e:	9103      	str	r1, [sp, #12]
 8007650:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007654:	9102      	str	r1, [sp, #8]
 8007656:	9201      	str	r2, [sp, #4]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	4633      	mov	r3, r6
 800765e:	4a32      	ldr	r2, [pc, #200]	; (8007728 <AT_ESP8266_ND+0x1284>)
 8007660:	4629      	mov	r1, r5
 8007662:	4620      	mov	r0, r4
 8007664:	f006 f998 	bl	800d998 <FT_String_ND>
 8007668:	4603      	mov	r3, r0
 800766a:	2b01      	cmp	r3, #1
 800766c:	d104      	bne.n	8007678 <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 800766e:	231f      	movs	r3, #31
 8007670:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007674:	f000 bca5 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800767c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2208      	movs	r2, #8
 8007684:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800768c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800769a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80076a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80076b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076d8:	6809      	ldr	r1, [r1, #0]
 80076da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076de:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80076e2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80076e6:	6800      	ldr	r0, [r0, #0]
 80076e8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80076ec:	2300      	movs	r3, #0
 80076ee:	9305      	str	r3, [sp, #20]
 80076f0:	9004      	str	r0, [sp, #16]
 80076f2:	9103      	str	r1, [sp, #12]
 80076f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076f8:	9102      	str	r1, [sp, #8]
 80076fa:	9201      	str	r2, [sp, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	4633      	mov	r3, r6
 8007702:	4a0a      	ldr	r2, [pc, #40]	; (800772c <AT_ESP8266_ND+0x1288>)
 8007704:	4629      	mov	r1, r5
 8007706:	4620      	mov	r0, r4
 8007708:	f006 f946 	bl	800d998 <FT_String_ND>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	d10e      	bne.n	8007730 <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 8007712:	2320      	movs	r3, #32
 8007714:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007718:	f000 bc53 	b.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
 800771c:	0800f964 	.word	0x0800f964
 8007720:	0800f8d0 	.word	0x0800f8d0
 8007724:	0800f90c 	.word	0x0800f90c
 8007728:	0800f918 	.word	0x0800f918
 800772c:	0800f978 	.word	0x0800f978
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007734:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	220a      	movs	r2, #10
 800773c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800774e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800775c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800776a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800776e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800777e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007788:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800778c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007790:	6809      	ldr	r1, [r1, #0]
 8007792:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007796:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800779a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800779e:	6800      	ldr	r0, [r0, #0]
 80077a0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80077a4:	2300      	movs	r3, #0
 80077a6:	9305      	str	r3, [sp, #20]
 80077a8:	9004      	str	r0, [sp, #16]
 80077aa:	9103      	str	r1, [sp, #12]
 80077ac:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077b0:	9102      	str	r1, [sp, #8]
 80077b2:	9201      	str	r2, [sp, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4633      	mov	r3, r6
 80077ba:	4ab7      	ldr	r2, [pc, #732]	; (8007a98 <AT_ESP8266_ND+0x15f4>)
 80077bc:	4629      	mov	r1, r5
 80077be:	4620      	mov	r0, r4
 80077c0:	f006 f8ea 	bl	800d998 <FT_String_ND>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d103      	bne.n	80077d2 <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 80077ca:	2321      	movs	r3, #33	; 0x21
 80077cc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077d0:	e3f7      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 80077d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2205      	movs	r2, #5
 80077de:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80077e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80077f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80077fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800780c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007810:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007820:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800782a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800782e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007832:	6809      	ldr	r1, [r1, #0]
 8007834:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007838:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800783c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007840:	6800      	ldr	r0, [r0, #0]
 8007842:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007846:	2300      	movs	r3, #0
 8007848:	9305      	str	r3, [sp, #20]
 800784a:	9004      	str	r0, [sp, #16]
 800784c:	9103      	str	r1, [sp, #12]
 800784e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007852:	9102      	str	r1, [sp, #8]
 8007854:	9201      	str	r2, [sp, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	4633      	mov	r3, r6
 800785c:	4a8f      	ldr	r2, [pc, #572]	; (8007a9c <AT_ESP8266_ND+0x15f8>)
 800785e:	4629      	mov	r1, r5
 8007860:	4620      	mov	r0, r4
 8007862:	f006 f899 	bl	800d998 <FT_String_ND>
 8007866:	4603      	mov	r3, r0
 8007868:	2b01      	cmp	r3, #1
 800786a:	f040 83aa 	bne.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 800786e:	2322      	movs	r3, #34	; 0x22
 8007870:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007874:	e3a5      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800787a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	220f      	movs	r2, #15
 8007882:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007886:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800788a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007898:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80078a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80078b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078c4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078c8:	6812      	ldr	r2, [r2, #0]
 80078ca:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078ce:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078d2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078d6:	6809      	ldr	r1, [r1, #0]
 80078d8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078dc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80078e0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80078e4:	6800      	ldr	r0, [r0, #0]
 80078e6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80078ea:	2300      	movs	r3, #0
 80078ec:	9305      	str	r3, [sp, #20]
 80078ee:	9004      	str	r0, [sp, #16]
 80078f0:	9103      	str	r1, [sp, #12]
 80078f2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078f6:	9102      	str	r1, [sp, #8]
 80078f8:	9201      	str	r2, [sp, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4633      	mov	r3, r6
 8007900:	4a67      	ldr	r2, [pc, #412]	; (8007aa0 <AT_ESP8266_ND+0x15fc>)
 8007902:	4629      	mov	r1, r5
 8007904:	4620      	mov	r0, r4
 8007906:	f006 f847 	bl	800d998 <FT_String_ND>
 800790a:	4603      	mov	r3, r0
 800790c:	2b01      	cmp	r3, #1
 800790e:	d112      	bne.n	8007936 <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 8007910:	230a      	movs	r3, #10
 8007912:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007916:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800792a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007934:	e345      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007936:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800793a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2209      	movs	r2, #9
 8007942:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007946:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800794a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007954:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007958:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007962:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007966:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007970:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007974:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007984:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800798e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007992:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007996:	6809      	ldr	r1, [r1, #0]
 8007998:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800799c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80079a0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80079a4:	6800      	ldr	r0, [r0, #0]
 80079a6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80079aa:	2300      	movs	r3, #0
 80079ac:	9305      	str	r3, [sp, #20]
 80079ae:	9004      	str	r0, [sp, #16]
 80079b0:	9103      	str	r1, [sp, #12]
 80079b2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079b6:	9102      	str	r1, [sp, #8]
 80079b8:	9201      	str	r2, [sp, #4]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	4633      	mov	r3, r6
 80079c0:	4a38      	ldr	r2, [pc, #224]	; (8007aa4 <AT_ESP8266_ND+0x1600>)
 80079c2:	4629      	mov	r1, r5
 80079c4:	4620      	mov	r0, r4
 80079c6:	f005 ffe7 	bl	800d998 <FT_String_ND>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d112      	bne.n	80079f6 <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 80079d0:	2319      	movs	r3, #25
 80079d2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 80079d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 80079f4:	e2e5      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 80079f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2208      	movs	r2, #8
 8007a02:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007a06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007a30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a3e:	603b      	str	r3, [r7, #0]
 8007a40:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a44:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a4e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a52:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a56:	6809      	ldr	r1, [r1, #0]
 8007a58:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a5c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a60:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a64:	6800      	ldr	r0, [r0, #0]
 8007a66:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9305      	str	r3, [sp, #20]
 8007a6e:	9004      	str	r0, [sp, #16]
 8007a70:	9103      	str	r1, [sp, #12]
 8007a72:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a76:	9102      	str	r1, [sp, #8]
 8007a78:	9201      	str	r2, [sp, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	4633      	mov	r3, r6
 8007a80:	4a09      	ldr	r2, [pc, #36]	; (8007aa8 <AT_ESP8266_ND+0x1604>)
 8007a82:	4629      	mov	r1, r5
 8007a84:	4620      	mov	r0, r4
 8007a86:	f005 ff87 	bl	800d998 <FT_String_ND>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10d      	bne.n	8007aac <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8007a90:	2310      	movs	r3, #16
 8007a92:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a96:	e294      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
 8007a98:	0800f924 	.word	0x0800f924
 8007a9c:	0800f984 	.word	0x0800f984
 8007aa0:	0800f98c 	.word	0x0800f98c
 8007aa4:	0800f99c 	.word	0x0800f99c
 8007aa8:	0800f940 	.word	0x0800f940
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007aac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ab0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007aba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007abe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007ac8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007acc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f203 4694 	addw	r6, r3, #1172	; 0x494
 8007ad6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ada:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 8007ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007af8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b02:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b06:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b0a:	6809      	ldr	r1, [r1, #0]
 8007b0c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b10:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b14:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b18:	6800      	ldr	r0, [r0, #0]
 8007b1a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9305      	str	r3, [sp, #20]
 8007b22:	9004      	str	r0, [sp, #16]
 8007b24:	9103      	str	r1, [sp, #12]
 8007b26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b2a:	9102      	str	r1, [sp, #8]
 8007b2c:	9201      	str	r2, [sp, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	4663      	mov	r3, ip
 8007b34:	4632      	mov	r2, r6
 8007b36:	4629      	mov	r1, r5
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f005 ff2d 	bl	800d998 <FT_String_ND>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d112      	bne.n	8007b6a <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 8235 	beq.w	8007fc2 <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007b68:	e22b      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007b6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	220d      	movs	r2, #13
 8007b76:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007b7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007b88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007b96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007ba4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ba8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bb8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007bc2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007bc6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bca:	6809      	ldr	r1, [r1, #0]
 8007bcc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bd0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007bd4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007bd8:	6800      	ldr	r0, [r0, #0]
 8007bda:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007bde:	2300      	movs	r3, #0
 8007be0:	9305      	str	r3, [sp, #20]
 8007be2:	9004      	str	r0, [sp, #16]
 8007be4:	9103      	str	r1, [sp, #12]
 8007be6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bea:	9102      	str	r1, [sp, #8]
 8007bec:	9201      	str	r2, [sp, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	4633      	mov	r3, r6
 8007bf4:	4ac5      	ldr	r2, [pc, #788]	; (8007f0c <AT_ESP8266_ND+0x1a68>)
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f005 fecd 	bl	800d998 <FT_String_ND>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d112      	bne.n	8007c2a <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007c04:	2312      	movs	r3, #18
 8007c06:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007c0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007c28:	e1cb      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	220d      	movs	r2, #13
 8007c36:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8007c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007c48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007c56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c78:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c7c:	6812      	ldr	r2, [r2, #0]
 8007c7e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c82:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c86:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c8a:	6809      	ldr	r1, [r1, #0]
 8007c8c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c90:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c94:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c98:	6800      	ldr	r0, [r0, #0]
 8007c9a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9305      	str	r3, [sp, #20]
 8007ca2:	9004      	str	r0, [sp, #16]
 8007ca4:	9103      	str	r1, [sp, #12]
 8007ca6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007caa:	9102      	str	r1, [sp, #8]
 8007cac:	9201      	str	r2, [sp, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	4633      	mov	r3, r6
 8007cb4:	4a96      	ldr	r2, [pc, #600]	; (8007f10 <AT_ESP8266_ND+0x1a6c>)
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f005 fe6d 	bl	800d998 <FT_String_ND>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d112      	bne.n	8007cea <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 8007cc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ce8:	e16b      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007cea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	220e      	movs	r2, #14
 8007cf6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 8007cfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007d16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d38:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d42:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d46:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d4a:	6809      	ldr	r1, [r1, #0]
 8007d4c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d50:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d54:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d58:	6800      	ldr	r0, [r0, #0]
 8007d5a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9305      	str	r3, [sp, #20]
 8007d62:	9004      	str	r0, [sp, #16]
 8007d64:	9103      	str	r1, [sp, #12]
 8007d66:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d6a:	9102      	str	r1, [sp, #8]
 8007d6c:	9201      	str	r2, [sp, #4]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	4633      	mov	r3, r6
 8007d74:	4a67      	ldr	r2, [pc, #412]	; (8007f14 <AT_ESP8266_ND+0x1a70>)
 8007d76:	4629      	mov	r1, r5
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f005 fe0d 	bl	800d998 <FT_String_ND>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d112      	bne.n	8007daa <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 8007d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007da2:	230b      	movs	r3, #11
 8007da4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007da8:	e10b      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007daa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	220a      	movs	r2, #10
 8007db6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007dba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007dc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007dd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007de4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007df8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007dfc:	6812      	ldr	r2, [r2, #0]
 8007dfe:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e02:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e06:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e0a:	6809      	ldr	r1, [r1, #0]
 8007e0c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e10:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007e14:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e18:	6800      	ldr	r0, [r0, #0]
 8007e1a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9305      	str	r3, [sp, #20]
 8007e22:	9004      	str	r0, [sp, #16]
 8007e24:	9103      	str	r1, [sp, #12]
 8007e26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e2a:	9102      	str	r1, [sp, #8]
 8007e2c:	9201      	str	r2, [sp, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	4633      	mov	r3, r6
 8007e34:	4a38      	ldr	r2, [pc, #224]	; (8007f18 <AT_ESP8266_ND+0x1a74>)
 8007e36:	4629      	mov	r1, r5
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f005 fdad 	bl	800d998 <FT_String_ND>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d112      	bne.n	8007e6a <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007e44:	2318      	movs	r3, #24
 8007e46:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007e68:	e0ab      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2208      	movs	r2, #8
 8007e76:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007ea4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ea8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007eb8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ebc:	6812      	ldr	r2, [r2, #0]
 8007ebe:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ec2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ec6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007eca:	6809      	ldr	r1, [r1, #0]
 8007ecc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ed0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007ed4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ed8:	6800      	ldr	r0, [r0, #0]
 8007eda:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ede:	2300      	movs	r3, #0
 8007ee0:	9305      	str	r3, [sp, #20]
 8007ee2:	9004      	str	r0, [sp, #16]
 8007ee4:	9103      	str	r1, [sp, #12]
 8007ee6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007eea:	9102      	str	r1, [sp, #8]
 8007eec:	9201      	str	r2, [sp, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	4633      	mov	r3, r6
 8007ef4:	4a09      	ldr	r2, [pc, #36]	; (8007f1c <AT_ESP8266_ND+0x1a78>)
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f005 fd4d 	bl	800d998 <FT_String_ND>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d10d      	bne.n	8007f20 <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 8007f04:	2303      	movs	r3, #3
 8007f06:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f0a:	e05a      	b.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
 8007f0c:	0800f9a8 	.word	0x0800f9a8
 8007f10:	0800f9b8 	.word	0x0800f9b8
 8007f14:	0800f9c8 	.word	0x0800f9c8
 8007f18:	0800f9d8 	.word	0x0800f9d8
 8007f1c:	0800f9e4 	.word	0x0800f9e4
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8007f20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2209      	movs	r2, #9
 8007f2c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007f30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007f3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007f4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f68:	603b      	str	r3, [r7, #0]
 8007f6a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f6e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f78:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f7c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f80:	6809      	ldr	r1, [r1, #0]
 8007f82:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f86:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f8a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f8e:	6800      	ldr	r0, [r0, #0]
 8007f90:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f94:	2300      	movs	r3, #0
 8007f96:	9305      	str	r3, [sp, #20]
 8007f98:	9004      	str	r0, [sp, #16]
 8007f9a:	9103      	str	r1, [sp, #12]
 8007f9c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007fa0:	9102      	str	r1, [sp, #8]
 8007fa2:	9201      	str	r2, [sp, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4633      	mov	r3, r6
 8007faa:	4a78      	ldr	r2, [pc, #480]	; (800818c <AT_ESP8266_ND+0x1ce8>)
 8007fac:	4629      	mov	r1, r5
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f005 fcf2 	bl	800d998 <FT_String_ND>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d103      	bne.n	8007fc2 <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 8007fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fbe:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8007fc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	f201 84d7 	bhi.w	8009986 <AT_ESP8266_ND+0x34e2>
 8007fd8:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <AT_ESP8266_ND+0x1b3c>)
 8007fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fde:	bf00      	nop
 8007fe0:	08008005 	.word	0x08008005
 8007fe4:	08008195 	.word	0x08008195
 8007fe8:	08008417 	.word	0x08008417
 8007fec:	08008595 	.word	0x08008595
 8007ff0:	0800876d 	.word	0x0800876d
 8007ff4:	08008a41 	.word	0x08008a41
 8007ff8:	08008d01 	.word	0x08008d01
 8007ffc:	08009229 	.word	0x08009229
 8008000:	080093ff 	.word	0x080093ff
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008022:	2b01      	cmp	r3, #1
 8008024:	d14f      	bne.n	80080c6 <AT_ESP8266_ND+0x1c22>
 8008026:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800802a:	2b01      	cmp	r3, #1
 800802c:	d04b      	beq.n	80080c6 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 800802e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008032:	2b02      	cmp	r3, #2
 8008034:	d047      	beq.n	80080c6 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 8008036:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800803a:	2b04      	cmp	r3, #4
 800803c:	d043      	beq.n	80080c6 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 800803e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008042:	2b13      	cmp	r3, #19
 8008044:	d03f      	beq.n	80080c6 <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 8008046:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800804a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2200      	movs	r2, #0
 8008052:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800805a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2201      	movs	r2, #1
 8008062:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8008066:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800806a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008074:	4620      	mov	r0, r4
 8008076:	f7f8 f8bd 	bl	80001f4 <strlen>
 800807a:	4603      	mov	r3, r0
 800807c:	4423      	add	r3, r4
 800807e:	4a44      	ldr	r2, [pc, #272]	; (8008190 <AT_ESP8266_ND+0x1cec>)
 8008080:	461c      	mov	r4, r3
 8008082:	4613      	mov	r3, r2
 8008084:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008086:	6020      	str	r0, [r4, #0]
 8008088:	6061      	str	r1, [r4, #4]
 800808a:	60a2      	str	r2, [r4, #8]
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008090:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008094:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800809e:	4618      	mov	r0, r3
 80080a0:	f7f8 f8a8 	bl	80001f4 <strlen>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 80080b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2264      	movs	r2, #100	; 0x64
 80080c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 80080c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80080e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d11b      	bne.n	800812e <AT_ESP8266_ND+0x1c8a>
 80080f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d023      	beq.n	8008146 <AT_ESP8266_ND+0x1ca2>
 80080fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008102:	2b1c      	cmp	r3, #28
 8008104:	d01f      	beq.n	8008146 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 8008106:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800810a:	2b02      	cmp	r3, #2
 800810c:	d01b      	beq.n	8008146 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 800810e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008112:	2b04      	cmp	r3, #4
 8008114:	d017      	beq.n	8008146 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 8008116:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800811a:	2b0b      	cmp	r3, #11
 800811c:	d013      	beq.n	8008146 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 800811e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008122:	2b0c      	cmp	r3, #12
 8008124:	d00f      	beq.n	8008146 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 8008126:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800812a:	2b13      	cmp	r3, #19
 800812c:	d00b      	beq.n	8008146 <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 800812e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008132:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800813c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008140:	4293      	cmp	r3, r2
 8008142:	f341 842a 	ble.w	800999a <AT_ESP8266_ND+0x34f6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008146:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800814a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800815c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008168:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800816c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008178:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800817c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008188:	f001 bc07 	b.w	800999a <AT_ESP8266_ND+0x34f6>
 800818c:	0800f9f0 	.word	0x0800f9f0
 8008190:	0800f9fc 	.word	0x0800f9fc
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80081a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	f040 80c8 	bne.w	8008348 <AT_ESP8266_ND+0x1ea4>
 80081b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081bc:	2b01      	cmp	r3, #1
 80081be:	f000 80c3 	beq.w	8008348 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 80081c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	f000 80be 	beq.w	8008348 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 80081cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	f000 80b9 	beq.w	8008348 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 80081d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081da:	2b04      	cmp	r3, #4
 80081dc:	f000 80b4 	beq.w	8008348 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 80081e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081e4:	2b0a      	cmp	r3, #10
 80081e6:	f000 80af 	beq.w	8008348 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 80081ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ee:	2b0b      	cmp	r3, #11
 80081f0:	f000 80aa 	beq.w	8008348 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 80081f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081f8:	2b0c      	cmp	r3, #12
 80081fa:	f000 80a5 	beq.w	8008348 <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 80081fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800820e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008212:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2201      	movs	r2, #1
 800821a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 800821e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008222:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800822c:	4620      	mov	r0, r4
 800822e:	f7f7 ffe1 	bl	80001f4 <strlen>
 8008232:	4603      	mov	r3, r0
 8008234:	4423      	add	r3, r4
 8008236:	49d5      	ldr	r1, [pc, #852]	; (800858c <AT_ESP8266_ND+0x20e8>)
 8008238:	461a      	mov	r2, r3
 800823a:	460b      	mov	r3, r1
 800823c:	cb03      	ldmia	r3!, {r0, r1}
 800823e:	6010      	str	r0, [r2, #0]
 8008240:	6051      	str	r1, [r2, #4]
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 8008246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800824a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008254:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008258:	2201      	movs	r2, #1
 800825a:	4618      	mov	r0, r3
 800825c:	f006 f90f 	bl	800e47e <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800826e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008272:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	1d9d      	adds	r5, r3, #6
 800827a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800827e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3306      	adds	r3, #6
 8008286:	4618      	mov	r0, r3
 8008288:	f7f7 ffb4 	bl	80001f4 <strlen>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	4629      	mov	r1, r5
 8008292:	4620      	mov	r0, r4
 8008294:	f006 f8f3 	bl	800e47e <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008298:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800829c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80082a6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f7 ffa2 	bl	80001f4 <strlen>
 80082b0:	4602      	mov	r2, r0
 80082b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80082b6:	4619      	mov	r1, r3
 80082b8:	4620      	mov	r0, r4
 80082ba:	f006 f8e0 	bl	800e47e <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 80082be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80082cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80082da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3326      	adds	r3, #38	; 0x26
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7f7 ff84 	bl	80001f4 <strlen>
 80082ec:	4603      	mov	r3, r0
 80082ee:	461a      	mov	r2, r3
 80082f0:	4629      	mov	r1, r5
 80082f2:	4620      	mov	r0, r4
 80082f4:	f006 f8c3 	bl	800e47e <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 80082f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008306:	f507 7109 	add.w	r1, r7, #548	; 0x224
 800830a:	2203      	movs	r2, #3
 800830c:	4618      	mov	r0, r3
 800830e:	f006 f8b6 	bl	800e47e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 8008312:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008316:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008320:	4618      	mov	r0, r3
 8008322:	f7f7 ff67 	bl	80001f4 <strlen>
 8008326:	4603      	mov	r3, r0
 8008328:	461a      	mov	r2, r3
 800832a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800832e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008338:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800833c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	22c8      	movs	r2, #200	; 0xc8
 8008344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8008348:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800834c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800835c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8008366:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800836a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11b      	bne.n	80083b0 <AT_ESP8266_ND+0x1f0c>
 8008378:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800837c:	2b01      	cmp	r3, #1
 800837e:	d023      	beq.n	80083c8 <AT_ESP8266_ND+0x1f24>
 8008380:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008384:	2b02      	cmp	r3, #2
 8008386:	d01f      	beq.n	80083c8 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 8008388:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800838c:	2b03      	cmp	r3, #3
 800838e:	d01b      	beq.n	80083c8 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 8008390:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008394:	2b04      	cmp	r3, #4
 8008396:	d017      	beq.n	80083c8 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 8008398:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800839c:	2b0a      	cmp	r3, #10
 800839e:	d013      	beq.n	80083c8 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 80083a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083a4:	2b0b      	cmp	r3, #11
 80083a6:	d00f      	beq.n	80083c8 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 80083a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083ac:	2b0c      	cmp	r3, #12
 80083ae:	d00b      	beq.n	80083c8 <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 80083b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80083be:	f644 6220 	movw	r2, #20000	; 0x4e20
 80083c2:	4293      	cmp	r3, r2
 80083c4:	f341 82eb 	ble.w	800999e <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80083c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80083d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 80083da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083de:	2b0a      	cmp	r3, #10
 80083e0:	d00f      	beq.n	8008402 <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 80083e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 80083f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 8008402:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008406:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2200      	movs	r2, #0
 800840e:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 8008412:	f001 bac4 	b.w	800999e <AT_ESP8266_ND+0x34fa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008416:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008426:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800842a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008434:	2b01      	cmp	r3, #1
 8008436:	d14d      	bne.n	80084d4 <AT_ESP8266_ND+0x2030>
 8008438:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800843c:	2b04      	cmp	r3, #4
 800843e:	d049      	beq.n	80084d4 <AT_ESP8266_ND+0x2030>
 8008440:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008444:	2b0a      	cmp	r3, #10
 8008446:	d045      	beq.n	80084d4 <AT_ESP8266_ND+0x2030>
 8008448:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800844c:	2b0d      	cmp	r3, #13
 800844e:	d041      	beq.n	80084d4 <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 8008450:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008454:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2200      	movs	r2, #0
 800845c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2201      	movs	r2, #1
 800846c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 8008470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800847e:	4620      	mov	r0, r4
 8008480:	f7f7 feb8 	bl	80001f4 <strlen>
 8008484:	4603      	mov	r3, r0
 8008486:	4423      	add	r3, r4
 8008488:	4941      	ldr	r1, [pc, #260]	; (8008590 <AT_ESP8266_ND+0x20ec>)
 800848a:	461a      	mov	r2, r3
 800848c:	460b      	mov	r3, r1
 800848e:	cb03      	ldmia	r3!, {r0, r1}
 8008490:	6010      	str	r0, [r2, #0]
 8008492:	6051      	str	r1, [r2, #4]
 8008494:	8819      	ldrh	r1, [r3, #0]
 8008496:	789b      	ldrb	r3, [r3, #2]
 8008498:	8111      	strh	r1, [r2, #8]
 800849a:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800849c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7f7 fea2 	bl	80001f4 <strlen>
 80084b0:	4603      	mov	r3, r0
 80084b2:	461a      	mov	r2, r3
 80084b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80084c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80084d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80084d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80084f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d113      	bne.n	800852c <AT_ESP8266_ND+0x2088>
 8008504:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008508:	2b0a      	cmp	r3, #10
 800850a:	d01b      	beq.n	8008544 <AT_ESP8266_ND+0x20a0>
 800850c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008510:	2b0b      	cmp	r3, #11
 8008512:	d017      	beq.n	8008544 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 8008514:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008518:	2b0c      	cmp	r3, #12
 800851a:	d013      	beq.n	8008544 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 800851c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008520:	2b04      	cmp	r3, #4
 8008522:	d00f      	beq.n	8008544 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 8008524:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008528:	2b0d      	cmp	r3, #13
 800852a:	d00b      	beq.n	8008544 <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800852c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008530:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800853a:	f241 3288 	movw	r2, #5000	; 0x1388
 800853e:	4293      	cmp	r3, r2
 8008540:	f341 822f 	ble.w	80099a2 <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008544:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008548:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800855a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2200      	movs	r2, #0
 8008562:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800856a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2200      	movs	r2, #0
 8008572:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008576:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800857a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2200      	movs	r2, #0
 8008582:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008586:	f001 ba0c 	b.w	80099a2 <AT_ESP8266_ND+0x34fe>
 800858a:	bf00      	nop
 800858c:	0800fa0c 	.word	0x0800fa0c
 8008590:	0800fa18 	.word	0x0800fa18
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008598:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 80085a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d16b      	bne.n	800868e <AT_ESP8266_ND+0x21ea>
 80085b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d067      	beq.n	800868e <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 80085be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d063      	beq.n	800868e <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 80085c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d05f      	beq.n	800868e <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 80085ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80085de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 80085ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d115      	bne.n	800862c <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800860e:	4620      	mov	r0, r4
 8008610:	f7f7 fdf0 	bl	80001f4 <strlen>
 8008614:	4603      	mov	r3, r0
 8008616:	4423      	add	r3, r4
 8008618:	4a52      	ldr	r2, [pc, #328]	; (8008764 <AT_ESP8266_ND+0x22c0>)
 800861a:	461c      	mov	r4, r3
 800861c:	4613      	mov	r3, r2
 800861e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008620:	6020      	str	r0, [r4, #0]
 8008622:	6061      	str	r1, [r4, #4]
 8008624:	60a2      	str	r2, [r4, #8]
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	81a3      	strh	r3, [r4, #12]
 800862a:	e014      	b.n	8008656 <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 800862c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008630:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800863a:	4620      	mov	r0, r4
 800863c:	f7f7 fdda 	bl	80001f4 <strlen>
 8008640:	4603      	mov	r3, r0
 8008642:	4423      	add	r3, r4
 8008644:	4a48      	ldr	r2, [pc, #288]	; (8008768 <AT_ESP8266_ND+0x22c4>)
 8008646:	461c      	mov	r4, r3
 8008648:	4613      	mov	r3, r2
 800864a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800864c:	6020      	str	r0, [r4, #0]
 800864e:	6061      	str	r1, [r4, #4]
 8008650:	60a2      	str	r2, [r4, #8]
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800865a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008664:	4618      	mov	r0, r3
 8008666:	f7f7 fdc5 	bl	80001f4 <strlen>
 800866a:	4603      	mov	r3, r0
 800866c:	461a      	mov	r2, r3
 800866e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 800867c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800868a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800868e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008692:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 80086ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d123      	bne.n	8008706 <AT_ESP8266_ND+0x2262>
 80086be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d02b      	beq.n	800871e <AT_ESP8266_ND+0x227a>
 80086c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ca:	2b0b      	cmp	r3, #11
 80086cc:	d027      	beq.n	800871e <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 80086ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086d2:	2b0c      	cmp	r3, #12
 80086d4:	d023      	beq.n	800871e <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 80086d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d01f      	beq.n	800871e <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 80086de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d01b      	beq.n	800871e <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 80086e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ea:	2b07      	cmp	r3, #7
 80086ec:	d017      	beq.n	800871e <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 80086ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d013      	beq.n	800871e <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 80086f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086fa:	2b1e      	cmp	r3, #30
 80086fc:	d00f      	beq.n	800871e <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 80086fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008702:	2b1f      	cmp	r3, #31
 8008704:	d00b      	beq.n	800871e <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800870a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008714:	f241 3288 	movw	r2, #5000	; 0x1388
 8008718:	4293      	cmp	r3, r2
 800871a:	f341 8144 	ble.w	80099a6 <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800871e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008722:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800872c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008734:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008750:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008754:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008760:	f001 b921 	b.w	80099a6 <AT_ESP8266_ND+0x3502>
 8008764:	0800fa24 	.word	0x0800fa24
 8008768:	0800fa34 	.word	0x0800fa34
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800876c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008770:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 800877c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008780:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800878a:	2b01      	cmp	r3, #1
 800878c:	f040 80f3 	bne.w	8008976 <AT_ESP8266_ND+0x24d2>
 8008790:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008794:	2b04      	cmp	r3, #4
 8008796:	f000 80ee 	beq.w	8008976 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 800879a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800879e:	2b01      	cmp	r3, #1
 80087a0:	f000 80e9 	beq.w	8008976 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 80087a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	f000 80e4 	beq.w	8008976 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 80087ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087b2:	2b21      	cmp	r3, #33	; 0x21
 80087b4:	f000 80df 	beq.w	8008976 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 80087b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087bc:	2b1b      	cmp	r3, #27
 80087be:	f000 80da 	beq.w	8008976 <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 80087c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80087d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2201      	movs	r2, #1
 80087de:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 80087e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087f0:	4620      	mov	r0, r4
 80087f2:	f7f7 fcff 	bl	80001f4 <strlen>
 80087f6:	4603      	mov	r3, r0
 80087f8:	4423      	add	r3, r4
 80087fa:	4990      	ldr	r1, [pc, #576]	; (8008a3c <AT_ESP8266_ND+0x2598>)
 80087fc:	461a      	mov	r2, r3
 80087fe:	460b      	mov	r3, r1
 8008800:	cb03      	ldmia	r3!, {r0, r1}
 8008802:	6010      	str	r0, [r2, #0]
 8008804:	6051      	str	r1, [r2, #4]
 8008806:	8819      	ldrh	r1, [r3, #0]
 8008808:	789b      	ldrb	r3, [r3, #2]
 800880a:	8111      	strh	r1, [r2, #8]
 800880c:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 800880e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800881c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008820:	2201      	movs	r2, #1
 8008822:	4618      	mov	r0, r3
 8008824:	f005 fe2b 	bl	800e47e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008828:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800882c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008836:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008844:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008848:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	334c      	adds	r3, #76	; 0x4c
 8008850:	4618      	mov	r0, r3
 8008852:	f7f7 fccf 	bl	80001f4 <strlen>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	4629      	mov	r1, r5
 800885c:	4620      	mov	r0, r4
 800885e:	f005 fe0e 	bl	800e47e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008870:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008874:	2203      	movs	r2, #3
 8008876:	4618      	mov	r0, r3
 8008878:	f005 fe01 	bl	800e47e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 800887c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008880:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800888a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800888e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008898:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800889c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3362      	adds	r3, #98	; 0x62
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7f7 fca5 	bl	80001f4 <strlen>
 80088aa:	4603      	mov	r3, r0
 80088ac:	461a      	mov	r2, r3
 80088ae:	4629      	mov	r1, r5
 80088b0:	4620      	mov	r0, r4
 80088b2:	f005 fde4 	bl	800e47e <strncat>
						strncat(a->_uart2snd,separador,3);
 80088b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088c4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80088c8:	2203      	movs	r2, #3
 80088ca:	4618      	mov	r0, r3
 80088cc:	f005 fdd7 	bl	800e47e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 80088d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80088de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f103 0572 	add.w	r5, r3, #114	; 0x72
 80088ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3372      	adds	r3, #114	; 0x72
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f7 fc7b 	bl	80001f4 <strlen>
 80088fe:	4603      	mov	r3, r0
 8008900:	461a      	mov	r2, r3
 8008902:	4629      	mov	r1, r5
 8008904:	4620      	mov	r0, r4
 8008906:	f005 fdba 	bl	800e47e <strncat>
						strncat(a->_uart2snd,&comillas,1);
 800890a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800890e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008918:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800891c:	2201      	movs	r2, #1
 800891e:	4618      	mov	r0, r3
 8008920:	f005 fdad 	bl	800e47e <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008924:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008928:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008932:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008936:	2202      	movs	r2, #2
 8008938:	4618      	mov	r0, r3
 800893a:	f005 fda0 	bl	800e47e <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 800893e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800894c:	4618      	mov	r0, r3
 800894e:	f7f7 fc51 	bl	80001f4 <strlen>
 8008952:	4603      	mov	r3, r0
 8008954:	461a      	mov	r2, r3
 8008956:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008964:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008968:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008976:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800897a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800898a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008994:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d11b      	bne.n	80089de <AT_ESP8266_ND+0x253a>
 80089a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d023      	beq.n	80089f6 <AT_ESP8266_ND+0x2552>
 80089ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089b2:	2b0b      	cmp	r3, #11
 80089b4:	d01f      	beq.n	80089f6 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 80089b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089ba:	2b0c      	cmp	r3, #12
 80089bc:	d01b      	beq.n	80089f6 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 80089be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	d017      	beq.n	80089f6 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 80089c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d013      	beq.n	80089f6 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 80089ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089d2:	2b21      	cmp	r3, #33	; 0x21
 80089d4:	d00f      	beq.n	80089f6 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 80089d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089da:	2b1b      	cmp	r3, #27
 80089dc:	d00b      	beq.n	80089f6 <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80089de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80089ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f0:	4293      	cmp	r3, r2
 80089f2:	f340 87da 	ble.w	80099aa <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80089f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008a38:	f000 bfb7 	b.w	80099aa <AT_ESP8266_ND+0x3506>
 8008a3c:	0800f924 	.word	0x0800f924
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008a40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	f040 80e2 	bne.w	8008c28 <AT_ESP8266_ND+0x2784>
 8008a64:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a68:	2b0b      	cmp	r3, #11
 8008a6a:	f000 80dd 	beq.w	8008c28 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8008a6e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a72:	2b0c      	cmp	r3, #12
 8008a74:	f000 80d8 	beq.w	8008c28 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008a78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a7c:	2b0e      	cmp	r3, #14
 8008a7e:	f000 80d3 	beq.w	8008c28 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 8008a82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a86:	2b0f      	cmp	r3, #15
 8008a88:	f000 80ce 	beq.w	8008c28 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8008a8c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a90:	2b10      	cmp	r3, #16
 8008a92:	f000 80c9 	beq.w	8008c28 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 8008a96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	f000 80c4 	beq.w	8008c28 <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8008aa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008ab0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008ac0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f7f7 fb90 	bl	80001f4 <strlen>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4423      	add	r3, r4
 8008ad8:	4aa5      	ldr	r2, [pc, #660]	; (8008d70 <AT_ESP8266_ND+0x28cc>)
 8008ada:	461c      	mov	r4, r3
 8008adc:	4613      	mov	r3, r2
 8008ade:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ae0:	6020      	str	r0, [r4, #0]
 8008ae2:	6061      	str	r1, [r4, #4]
 8008ae4:	60a2      	str	r2, [r4, #8]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008aea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008af8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008afc:	2201      	movs	r2, #1
 8008afe:	4618      	mov	r0, r3
 8008b00:	f005 fcbd 	bl	800e47e <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008b04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b12:	4620      	mov	r0, r4
 8008b14:	f7f7 fb6e 	bl	80001f4 <strlen>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	4423      	add	r3, r4
 8008b1c:	4a95      	ldr	r2, [pc, #596]	; (8008d74 <AT_ESP8266_ND+0x28d0>)
 8008b1e:	6810      	ldr	r0, [r2, #0]
 8008b20:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008b22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b30:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008b34:	2203      	movs	r2, #3
 8008b36:	4618      	mov	r0, r3
 8008b38:	f005 fca1 	bl	800e47e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3336      	adds	r3, #54	; 0x36
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7f7 fb45 	bl	80001f4 <strlen>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4620      	mov	r0, r4
 8008b72:	f005 fc84 	bl	800e47e <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b84:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008b88:	2202      	movs	r2, #2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f005 fc77 	bl	800e47e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008b90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008bac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3346      	adds	r3, #70	; 0x46
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7f7 fb1b 	bl	80001f4 <strlen>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f005 fc5a 	bl	800e47e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008bd8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7f7 fb09 	bl	80001f4 <strlen>
 8008be2:	4602      	mov	r2, r0
 8008be4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008be8:	4619      	mov	r1, r3
 8008bea:	4620      	mov	r0, r4
 8008bec:	f005 fc47 	bl	800e47e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008bf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f7 faf8 	bl	80001f4 <strlen>
 8008c04:	4603      	mov	r3, r0
 8008c06:	461a      	mov	r2, r3
 8008c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008c16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008c28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d124      	bne.n	8008ca2 <AT_ESP8266_ND+0x27fe>
 8008c58:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c5c:	2b0a      	cmp	r3, #10
 8008c5e:	d02c      	beq.n	8008cba <AT_ESP8266_ND+0x2816>
 8008c60:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c64:	2b0b      	cmp	r3, #11
 8008c66:	d028      	beq.n	8008cba <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_fail)
 8008c68:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	d024      	beq.n	8008cba <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_wifi_gotip)
 8008c70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c74:	2b0c      	cmp	r3, #12
 8008c76:	d020      	beq.n	8008cba <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008c78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c7c:	2b0e      	cmp	r3, #14
 8008c7e:	d01c      	beq.n	8008cba <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_conectado)
 8008c80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c84:	2b0f      	cmp	r3, #15
 8008c86:	d018      	beq.n	8008cba <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_desconectado)
 8008c88:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c8c:	2b10      	cmp	r3, #16
 8008c8e:	d014      	beq.n	8008cba <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_error)
 8008c90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d010      	beq.n	8008cba <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_busy_p)))
 8008c98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ca0:	d00b      	beq.n	8008cba <AT_ESP8266_ND+0x2816>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008ca2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	f340 867a 	ble.w	80099ae <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008ccc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008cec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008cfc:	f000 be57 	b.w	80099ae <AT_ESP8266_ND+0x350a>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008d00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d04:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8008d10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d14:	2b10      	cmp	r3, #16
 8008d16:	d007      	beq.n	8008d28 <AT_ESP8266_ND+0x2884>
 8008d18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d1c:	2b0a      	cmp	r3, #10
 8008d1e:	d003      	beq.n	8008d28 <AT_ESP8266_ND+0x2884>
 8008d20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d127      	bne.n	8008d78 <AT_ESP8266_ND+0x28d4>
				{
					a->_estado=AT_decode;
 8008d28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008d4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008d5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008d6a:	f000 be22 	b.w	80099b2 <AT_ESP8266_ND+0x350e>
 8008d6e:	bf00      	nop
 8008d70:	0800fa44 	.word	0x0800fa44
 8008d74:	0800fa54 	.word	0x0800fa54
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008d78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	f040 80d1 	bne.w	8008f2e <AT_ESP8266_ND+0x2a8a>
 8008d8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f040 80c7 	bne.w	8008f2e <AT_ESP8266_ND+0x2a8a>
										a->_ejecucion=1;
 8008da0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008db0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2218      	movs	r2, #24
 8008dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008dd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008dee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008dfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008e0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f7f7 f9e9 	bl	80001f4 <strlen>
 8008e22:	4603      	mov	r3, r0
 8008e24:	4423      	add	r3, r4
 8008e26:	4ac0      	ldr	r2, [pc, #768]	; (8009128 <AT_ESP8266_ND+0x2c84>)
 8008e28:	461c      	mov	r4, r3
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e2e:	6020      	str	r0, [r4, #0]
 8008e30:	6061      	str	r1, [r4, #4]
 8008e32:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008e34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008e42:	f107 0214 	add.w	r2, r7, #20
 8008e46:	4611      	mov	r1, r2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f005 f8ed 	bl	800e028 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008e4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e5c:	f107 0314 	add.w	r3, r7, #20
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f7 f9c7 	bl	80001f4 <strlen>
 8008e66:	4602      	mov	r2, r0
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f005 fb05 	bl	800e47e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008e82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f005 fbd4 	bl	800e640 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008e98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ea6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008eaa:	2202      	movs	r2, #2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f005 fae6 	bl	800e47e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7f7 f997 	bl	80001f4 <strlen>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	461a      	mov	r2, r3
 8008eca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ece:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008ed8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7f7 f984 	bl	80001f4 <strlen>
 8008eec:	4603      	mov	r3, r0
 8008eee:	4423      	add	r3, r4
 8008ef0:	4a8e      	ldr	r2, [pc, #568]	; (800912c <AT_ESP8266_ND+0x2c88>)
 8008ef2:	461c      	mov	r4, r3
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ef8:	6020      	str	r0, [r4, #0]
 8008efa:	6061      	str	r1, [r4, #4]
 8008efc:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008efe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8008f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008f2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8008f4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f040 80a6 	bne.w	80090ac <AT_ESP8266_ND+0x2c08>
 8008f60:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f64:	2b13      	cmp	r3, #19
 8008f66:	f000 80a1 	beq.w	80090ac <AT_ESP8266_ND+0x2c08>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8008f6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8008f78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8008f86:	4619      	mov	r1, r3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	f7f7 f929 	bl	80001e0 <strcmp>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01b      	beq.n	8008fcc <AT_ESP8266_ND+0x2b28>
 8008f94:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d017      	beq.n	8008fcc <AT_ESP8266_ND+0x2b28>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8008f9c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fa0:	2b14      	cmp	r3, #20
 8008fa2:	d013      	beq.n	8008fcc <AT_ESP8266_ND+0x2b28>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	dd78      	ble.n	80090ac <AT_ESP8266_ND+0x2c08>
 8008fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d16f      	bne.n	80090ac <AT_ESP8266_ND+0x2c08>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8008fcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	dd0e      	ble.n	8009000 <AT_ESP8266_ND+0x2b5c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009014:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800901e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009022:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009032:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 800903c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009040:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2201      	movs	r2, #1
 8009048:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 800904c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009050:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f203 4094 	addw	r0, r3, #1172	; 0x494
 800905a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009068:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009076:	2361      	movs	r3, #97	; 0x61
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	2301      	movs	r3, #1
 800907c:	f005 f808 	bl	800e090 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800908e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 800909c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 80090ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ba:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80090be:	f040 8478 	bne.w	80099b2 <AT_ESP8266_ND+0x350e>
 80090c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090c6:	2b13      	cmp	r3, #19
 80090c8:	d032      	beq.n	8009130 <AT_ESP8266_ND+0x2c8c>
 80090ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80090d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090dc:	4293      	cmp	r3, r2
 80090de:	dc27      	bgt.n	8009130 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_disconnect)
 80090e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e4:	2b0a      	cmp	r3, #10
 80090e6:	d023      	beq.n	8009130 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_fail)
 80090e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d01f      	beq.n	8009130 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_connected)
 80090f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090f4:	2b0b      	cmp	r3, #11
 80090f6:	d01b      	beq.n	8009130 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_gotip)
 80090f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090fc:	2b0c      	cmp	r3, #12
 80090fe:	d017      	beq.n	8009130 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_desconectado)
 8009100:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009104:	2b10      	cmp	r3, #16
 8009106:	d013      	beq.n	8009130 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_snd_err)
 8009108:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800910c:	2b11      	cmp	r3, #17
 800910e:	d00f      	beq.n	8009130 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_enviado_error)
 8009110:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009114:	2b12      	cmp	r3, #18
 8009116:	d00b      	beq.n	8009130 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_busy_p)))
 8009118:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800911c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009120:	f040 8447 	bne.w	80099b2 <AT_ESP8266_ND+0x350e>
 8009124:	e004      	b.n	8009130 <AT_ESP8266_ND+0x2c8c>
 8009126:	bf00      	nop
 8009128:	0800fa58 	.word	0x0800fa58
 800912c:	0800fa64 	.word	0x0800fa64
									a->_debug_count5++;
 8009130:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009134:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009144:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 800914e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009152:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800915c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009160:	4293      	cmp	r3, r2
 8009162:	dd25      	ble.n	80091b0 <AT_ESP8266_ND+0x2d0c>
										a->_debug_count8++;
 8009164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009178:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009182:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009186:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009196:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80091a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80091b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091be:	2b02      	cmp	r3, #2
 80091c0:	dd10      	ble.n	80091e4 <AT_ESP8266_ND+0x2d40>
 80091c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091c6:	2b10      	cmp	r3, #16
 80091c8:	d00c      	beq.n	80091e4 <AT_ESP8266_ND+0x2d40>
 80091ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091ce:	2b0a      	cmp	r3, #10
 80091d0:	d008      	beq.n	80091e4 <AT_ESP8266_ND+0x2d40>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 80091d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	220f      	movs	r2, #15
 80091de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80091e2:	e008      	b.n	80091f6 <AT_ESP8266_ND+0x2d52>
										a->_estado=AT_decode;	//Devuelvo el estado
 80091e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80091f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80091f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800920a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2200      	movs	r2, #0
 8009212:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800921a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2200      	movs	r2, #0
 8009222:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009226:	e3c4      	b.n	80099b2 <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800922c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8009238:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800923c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009246:	2b01      	cmp	r3, #1
 8009248:	d16f      	bne.n	800932a <AT_ESP8266_ND+0x2e86>
						{
						a->_pasos=0;
 800924a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2200      	movs	r2, #0
 8009256:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800925a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800925e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2201      	movs	r2, #1
 8009266:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 800926a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800926e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009278:	4620      	mov	r0, r4
 800927a:	f7f6 ffbb 	bl	80001f4 <strlen>
 800927e:	4603      	mov	r3, r0
 8009280:	4423      	add	r3, r4
 8009282:	4a7a      	ldr	r2, [pc, #488]	; (800946c <AT_ESP8266_ND+0x2fc8>)
 8009284:	461c      	mov	r4, r3
 8009286:	4615      	mov	r5, r2
 8009288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	6061      	str	r1, [r4, #4]
 800928e:	60a2      	str	r2, [r4, #8]
 8009290:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80092a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80092ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	335c      	adds	r3, #92	; 0x5c
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7f6 ff9a 	bl	80001f4 <strlen>
 80092c0:	4603      	mov	r3, r0
 80092c2:	461a      	mov	r2, r3
 80092c4:	4629      	mov	r1, r5
 80092c6:	4620      	mov	r0, r4
 80092c8:	f005 f8d9 	bl	800e47e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80092cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80092da:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80092de:	4618      	mov	r0, r3
 80092e0:	f7f6 ff88 	bl	80001f4 <strlen>
 80092e4:	4602      	mov	r2, r0
 80092e6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80092ea:	4619      	mov	r1, r3
 80092ec:	4620      	mov	r0, r4
 80092ee:	f005 f8c6 	bl	800e47e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80092f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009300:	4618      	mov	r0, r3
 8009302:	f7f6 ff77 	bl	80001f4 <strlen>
 8009306:	4603      	mov	r3, r0
 8009308:	461a      	mov	r2, r3
 800930a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800930e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8009318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800931c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800932a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800932e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009338:	1c5a      	adds	r2, r3, #1
 800933a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800933e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009348:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800934c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009356:	2b00      	cmp	r3, #0
 8009358:	d123      	bne.n	80093a2 <AT_ESP8266_ND+0x2efe>
 800935a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800935e:	2b0a      	cmp	r3, #10
 8009360:	d02b      	beq.n	80093ba <AT_ESP8266_ND+0x2f16>
 8009362:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009366:	2b0b      	cmp	r3, #11
 8009368:	d027      	beq.n	80093ba <AT_ESP8266_ND+0x2f16>
 800936a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800936e:	2b0c      	cmp	r3, #12
 8009370:	d023      	beq.n	80093ba <AT_ESP8266_ND+0x2f16>
 8009372:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009376:	2b0e      	cmp	r3, #14
 8009378:	d01f      	beq.n	80093ba <AT_ESP8266_ND+0x2f16>
 800937a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800937e:	2b0f      	cmp	r3, #15
 8009380:	d01b      	beq.n	80093ba <AT_ESP8266_ND+0x2f16>
 8009382:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009386:	2b10      	cmp	r3, #16
 8009388:	d017      	beq.n	80093ba <AT_ESP8266_ND+0x2f16>
 800938a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800938e:	2b15      	cmp	r3, #21
 8009390:	d013      	beq.n	80093ba <AT_ESP8266_ND+0x2f16>
 8009392:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009396:	2b16      	cmp	r3, #22
 8009398:	d00f      	beq.n	80093ba <AT_ESP8266_ND+0x2f16>
 800939a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800939e:	2b17      	cmp	r3, #23
 80093a0:	d00b      	beq.n	80093ba <AT_ESP8266_ND+0x2f16>
 80093a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80093b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b4:	4293      	cmp	r3, r2
 80093b6:	f340 82fe 	ble.w	80099b6 <AT_ESP8266_ND+0x3512>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80093ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80093c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80093cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80093dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80093ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 80093fc:	e2db      	b.n	80099b6 <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80093fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009402:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	2200      	movs	r2, #0
 800940c:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 800940e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009412:	2b10      	cmp	r3, #16
 8009414:	d007      	beq.n	8009426 <AT_ESP8266_ND+0x2f82>
 8009416:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800941a:	2b0a      	cmp	r3, #10
 800941c:	d003      	beq.n	8009426 <AT_ESP8266_ND+0x2f82>
 800941e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009422:	2b03      	cmp	r3, #3
 8009424:	d124      	bne.n	8009470 <AT_ESP8266_ND+0x2fcc>
				{
					a->_estado=AT_decode;
 8009426:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800943c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2200      	movs	r2, #0
 8009444:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800944c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2200      	movs	r2, #0
 8009454:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009458:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800945c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2200      	movs	r2, #0
 8009464:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009468:	e2a7      	b.n	80099ba <AT_ESP8266_ND+0x3516>
 800946a:	bf00      	nop
 800946c:	0800fa70 	.word	0x0800fa70
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800947e:	2b01      	cmp	r3, #1
 8009480:	f040 8102 	bne.w	8009688 <AT_ESP8266_ND+0x31e4>
 8009484:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009488:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009492:	2b00      	cmp	r3, #0
 8009494:	f040 80f8 	bne.w	8009688 <AT_ESP8266_ND+0x31e4>
										a->_ejecucion=1;
 8009498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800949c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 80094a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2218      	movs	r2, #24
 80094b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80094b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80094c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80094e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80094f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800950a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009514:	4620      	mov	r0, r4
 8009516:	f7f6 fe6d 	bl	80001f4 <strlen>
 800951a:	4603      	mov	r3, r0
 800951c:	4423      	add	r3, r4
 800951e:	4a83      	ldr	r2, [pc, #524]	; (800972c <AT_ESP8266_ND+0x3288>)
 8009520:	461c      	mov	r4, r3
 8009522:	4613      	mov	r3, r2
 8009524:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009526:	6020      	str	r0, [r4, #0]
 8009528:	6061      	str	r1, [r4, #4]
 800952a:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 800952c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009530:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 800953a:	f107 020c 	add.w	r2, r7, #12
 800953e:	4611      	mov	r1, r2
 8009540:	4618      	mov	r0, r3
 8009542:	f004 fd71 	bl	800e028 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800954a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009554:	f107 030c 	add.w	r3, r7, #12
 8009558:	4618      	mov	r0, r3
 800955a:	f7f6 fe4b 	bl	80001f4 <strlen>
 800955e:	4602      	mov	r2, r0
 8009560:	f107 030c 	add.w	r3, r7, #12
 8009564:	4619      	mov	r1, r3
 8009566:	4620      	mov	r0, r4
 8009568:	f004 ff89 	bl	800e47e <strncat>
										strncat(a->_uart2snd,",",1);
 800956c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800957a:	4620      	mov	r0, r4
 800957c:	f7f6 fe3a 	bl	80001f4 <strlen>
 8009580:	4603      	mov	r3, r0
 8009582:	4423      	add	r3, r4
 8009584:	496a      	ldr	r1, [pc, #424]	; (8009730 <AT_ESP8266_ND+0x328c>)
 8009586:	461a      	mov	r2, r3
 8009588:	460b      	mov	r3, r1
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 800958e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009592:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800959c:	f107 020c 	add.w	r2, r7, #12
 80095a0:	4611      	mov	r1, r2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f004 fd40 	bl	800e028 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80095a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80095b6:	f107 030c 	add.w	r3, r7, #12
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7f6 fe1a 	bl	80001f4 <strlen>
 80095c0:	4602      	mov	r2, r0
 80095c2:	f107 030c 	add.w	r3, r7, #12
 80095c6:	4619      	mov	r1, r3
 80095c8:	4620      	mov	r0, r4
 80095ca:	f004 ff58 	bl	800e47e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80095ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80095dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80095ea:	4619      	mov	r1, r3
 80095ec:	4610      	mov	r0, r2
 80095ee:	f005 f827 	bl	800e640 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80095f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009600:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009604:	2202      	movs	r2, #2
 8009606:	4618      	mov	r0, r3
 8009608:	f004 ff39 	bl	800e47e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800960c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009610:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800961a:	4618      	mov	r0, r3
 800961c:	f7f6 fdea 	bl	80001f4 <strlen>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009628:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009632:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009636:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009640:	4620      	mov	r0, r4
 8009642:	f7f6 fdd7 	bl	80001f4 <strlen>
 8009646:	4603      	mov	r3, r0
 8009648:	4423      	add	r3, r4
 800964a:	4a3a      	ldr	r2, [pc, #232]	; (8009734 <AT_ESP8266_ND+0x3290>)
 800964c:	461c      	mov	r4, r3
 800964e:	4613      	mov	r3, r2
 8009650:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009652:	6020      	str	r0, [r4, #0]
 8009654:	6061      	str	r1, [r4, #4]
 8009656:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800965c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800966c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800967a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800968c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800969c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80096a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f040 80b8 	bne.w	800982a <AT_ESP8266_ND+0x3386>
 80096ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096be:	2b13      	cmp	r3, #19
 80096c0:	f000 80b3 	beq.w	800982a <AT_ESP8266_ND+0x3386>
 80096c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80096d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 80096e0:	4619      	mov	r1, r3
 80096e2:	4610      	mov	r0, r2
 80096e4:	f7f6 fd7c 	bl	80001e0 <strcmp>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d024      	beq.n	8009738 <AT_ESP8266_ND+0x3294>
 80096ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d020      	beq.n	8009738 <AT_ESP8266_ND+0x3294>
 80096f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096fa:	2b14      	cmp	r3, #20
 80096fc:	d01c      	beq.n	8009738 <AT_ESP8266_ND+0x3294>
 80096fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009702:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800970c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009710:	4293      	cmp	r3, r2
 8009712:	f340 808a 	ble.w	800982a <AT_ESP8266_ND+0x3386>
 8009716:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800971a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009724:	2b01      	cmp	r3, #1
 8009726:	f040 8080 	bne.w	800982a <AT_ESP8266_ND+0x3386>
 800972a:	e005      	b.n	8009738 <AT_ESP8266_ND+0x3294>
 800972c:	0800fa58 	.word	0x0800fa58
 8009730:	0800fa80 	.word	0x0800fa80
 8009734:	0800fa64 	.word	0x0800fa64
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009738:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800973c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009746:	f241 3288 	movw	r2, #5000	; 0x1388
 800974a:	4293      	cmp	r3, r2
 800974c:	dd17      	ble.n	800977e <AT_ESP8266_ND+0x32da>
 800974e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800975c:	2b01      	cmp	r3, #1
 800975e:	d10e      	bne.n	800977e <AT_ESP8266_ND+0x32da>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009764:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009774:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 800977e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009782:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009792:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800979c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80097ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80097ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80097d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80097e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80097f4:	2361      	movs	r3, #97	; 0x61
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	2301      	movs	r3, #1
 80097fa:	f004 fc49 	bl	800e090 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80097fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800980c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009810:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 800981a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800981e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2200      	movs	r2, #0
 8009826:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 800982a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800982e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009838:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800983c:	f040 80bd 	bne.w	80099ba <AT_ESP8266_ND+0x3516>
 8009840:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009844:	2b13      	cmp	r3, #19
 8009846:	d02b      	beq.n	80098a0 <AT_ESP8266_ND+0x33fc>
 8009848:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800984c:	2b0b      	cmp	r3, #11
 800984e:	d027      	beq.n	80098a0 <AT_ESP8266_ND+0x33fc>
 8009850:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009854:	2b0c      	cmp	r3, #12
 8009856:	d023      	beq.n	80098a0 <AT_ESP8266_ND+0x33fc>
 8009858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800985c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009866:	f241 3288 	movw	r2, #5000	; 0x1388
 800986a:	4293      	cmp	r3, r2
 800986c:	dc18      	bgt.n	80098a0 <AT_ESP8266_ND+0x33fc>
 800986e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009872:	2b0a      	cmp	r3, #10
 8009874:	d014      	beq.n	80098a0 <AT_ESP8266_ND+0x33fc>
 8009876:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800987a:	2b10      	cmp	r3, #16
 800987c:	d010      	beq.n	80098a0 <AT_ESP8266_ND+0x33fc>
 800987e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009882:	2b11      	cmp	r3, #17
 8009884:	d00c      	beq.n	80098a0 <AT_ESP8266_ND+0x33fc>
 8009886:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800988a:	2b12      	cmp	r3, #18
 800988c:	d008      	beq.n	80098a0 <AT_ESP8266_ND+0x33fc>
 800988e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009892:	2b16      	cmp	r3, #22
 8009894:	d004      	beq.n	80098a0 <AT_ESP8266_ND+0x33fc>
 8009896:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800989a:	2b19      	cmp	r3, #25
 800989c:	f040 808d 	bne.w	80099ba <AT_ESP8266_ND+0x3516>
									a->_debug_count5++;
 80098a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80098be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80098cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80098d0:	4293      	cmp	r3, r2
 80098d2:	dd25      	ble.n	8009920 <AT_ESP8266_ND+0x347c>
										a->_debug_count8++;
 80098d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80098f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2200      	movs	r2, #0
 800991c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009920:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009924:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800992e:	2b02      	cmp	r3, #2
 8009930:	dd07      	ble.n	8009942 <AT_ESP8266_ND+0x349e>
 8009932:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009936:	2b10      	cmp	r3, #16
 8009938:	d003      	beq.n	8009942 <AT_ESP8266_ND+0x349e>
 800993a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800993e:	2b0a      	cmp	r3, #10
 8009940:	d108      	bne.n	8009954 <AT_ESP8266_ND+0x34b0>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009954:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009958:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2200      	movs	r2, #0
 8009960:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009964:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009968:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2200      	movs	r2, #0
 8009970:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009974:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009978:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009984:	e019      	b.n	80099ba <AT_ESP8266_ND+0x3516>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800998a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009998:	e010      	b.n	80099bc <AT_ESP8266_ND+0x3518>
			break;
 800999a:	bf00      	nop
 800999c:	e00e      	b.n	80099bc <AT_ESP8266_ND+0x3518>
			break;
 800999e:	bf00      	nop
 80099a0:	e00c      	b.n	80099bc <AT_ESP8266_ND+0x3518>
			break;
 80099a2:	bf00      	nop
 80099a4:	e00a      	b.n	80099bc <AT_ESP8266_ND+0x3518>
			break;
 80099a6:	bf00      	nop
 80099a8:	e008      	b.n	80099bc <AT_ESP8266_ND+0x3518>
			break;
 80099aa:	bf00      	nop
 80099ac:	e006      	b.n	80099bc <AT_ESP8266_ND+0x3518>
			break;
 80099ae:	bf00      	nop
 80099b0:	e004      	b.n	80099bc <AT_ESP8266_ND+0x3518>
			break;
 80099b2:	bf00      	nop
 80099b4:	e002      	b.n	80099bc <AT_ESP8266_ND+0x3518>
			break;
 80099b6:	bf00      	nop
 80099b8:	e000      	b.n	80099bc <AT_ESP8266_ND+0x3518>
			break;
 80099ba:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 80099bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 80099cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 80099dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 80099ea:	4618      	mov	r0, r3
 80099ec:	f507 7715 	add.w	r7, r7, #596	; 0x254
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099f4 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a06:	f240 328d 	movw	r2, #909	; 0x38d
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	f001 8430 	beq.w	800b270 <WiFi_Conn_ND+0x187c>
 8009a10:	f240 328d 	movw	r2, #909	; 0x38d
 8009a14:	4293      	cmp	r3, r2
 8009a16:	f301 84c5 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009a1a:	f240 3289 	movw	r2, #905	; 0x389
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	f001 839d 	beq.w	800b15e <WiFi_Conn_ND+0x176a>
 8009a24:	f240 3289 	movw	r2, #905	; 0x389
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	f301 84bb 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009a2e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009a32:	f001 828c 	beq.w	800af4e <WiFi_Conn_ND+0x155a>
 8009a36:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009a3a:	f301 84b3 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009a3e:	f240 3229 	movw	r2, #809	; 0x329
 8009a42:	4293      	cmp	r3, r2
 8009a44:	f301 84ae 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009a48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009a4c:	f280 80a5 	bge.w	8009b9a <WiFi_Conn_ND+0x1a6>
 8009a50:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009a54:	4293      	cmp	r3, r2
 8009a56:	f000 87c0 	beq.w	800a9da <WiFi_Conn_ND+0xfe6>
 8009a5a:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	f301 84a0 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009a64:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	f000 8741 	beq.w	800a8f0 <WiFi_Conn_ND+0xefc>
 8009a6e:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009a72:	4293      	cmp	r3, r2
 8009a74:	f301 8496 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009a78:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009a7c:	f000 866b 	beq.w	800a756 <WiFi_Conn_ND+0xd62>
 8009a80:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009a84:	f301 848e 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009a88:	f240 2261 	movw	r2, #609	; 0x261
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	f000 85ec 	beq.w	800a66a <WiFi_Conn_ND+0xc76>
 8009a92:	f240 2261 	movw	r2, #609	; 0x261
 8009a96:	4293      	cmp	r3, r2
 8009a98:	f301 8484 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009a9c:	f240 225d 	movw	r2, #605	; 0x25d
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	f000 8582 	beq.w	800a5aa <WiFi_Conn_ND+0xbb6>
 8009aa6:	f240 225d 	movw	r2, #605	; 0x25d
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	f301 847a 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009ab0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009ab4:	f000 8500 	beq.w	800a4b8 <WiFi_Conn_ND+0xac4>
 8009ab8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009abc:	f301 8472 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009ac0:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	f000 8496 	beq.w	800a3f6 <WiFi_Conn_ND+0xa02>
 8009aca:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009ace:	f281 8469 	bge.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009ad2:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	f000 844c 	beq.w	800a374 <WiFi_Conn_ND+0x980>
 8009adc:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009ae0:	f281 8460 	bge.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009ae4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009ae8:	f000 83d7 	beq.w	800a29a <WiFi_Conn_ND+0x8a6>
 8009aec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009af0:	f301 8458 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009af4:	f240 1299 	movw	r2, #409	; 0x199
 8009af8:	4293      	cmp	r3, r2
 8009afa:	f000 8378 	beq.w	800a1ee <WiFi_Conn_ND+0x7fa>
 8009afe:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009b02:	f281 844f 	bge.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b06:	f240 1295 	movw	r2, #405	; 0x195
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	f000 8333 	beq.w	800a176 <WiFi_Conn_ND+0x782>
 8009b10:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009b14:	f281 8446 	bge.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b18:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009b1c:	f000 82aa 	beq.w	800a074 <WiFi_Conn_ND+0x680>
 8009b20:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009b24:	f301 843e 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b28:	f240 1235 	movw	r2, #309	; 0x135
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	f000 827b 	beq.w	800a028 <WiFi_Conn_ND+0x634>
 8009b32:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009b36:	f281 8435 	bge.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b3a:	f240 1231 	movw	r2, #305	; 0x131
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	f000 826d 	beq.w	800a01e <WiFi_Conn_ND+0x62a>
 8009b44:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009b48:	f281 842c 	bge.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009b50:	f000 8211 	beq.w	8009f76 <WiFi_Conn_ND+0x582>
 8009b54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009b58:	f301 8424 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b5c:	2bd1      	cmp	r3, #209	; 0xd1
 8009b5e:	f000 81a5 	beq.w	8009eac <WiFi_Conn_ND+0x4b8>
 8009b62:	2bd1      	cmp	r3, #209	; 0xd1
 8009b64:	f301 841e 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b68:	2bcd      	cmp	r3, #205	; 0xcd
 8009b6a:	f000 8175 	beq.w	8009e58 <WiFi_Conn_ND+0x464>
 8009b6e:	2bcd      	cmp	r3, #205	; 0xcd
 8009b70:	f301 8418 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b74:	2bc8      	cmp	r3, #200	; 0xc8
 8009b76:	f000 80f1 	beq.w	8009d5c <WiFi_Conn_ND+0x368>
 8009b7a:	2bc8      	cmp	r3, #200	; 0xc8
 8009b7c:	f301 8412 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b80:	2b6d      	cmp	r3, #109	; 0x6d
 8009b82:	f000 80b3 	beq.w	8009cec <WiFi_Conn_ND+0x2f8>
 8009b86:	2b6d      	cmp	r3, #109	; 0x6d
 8009b88:	f301 840c 	bgt.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b8c:	2b64      	cmp	r3, #100	; 0x64
 8009b8e:	d021      	beq.n	8009bd4 <WiFi_Conn_ND+0x1e0>
 8009b90:	2b69      	cmp	r3, #105	; 0x69
 8009b92:	f000 8096 	beq.w	8009cc2 <WiFi_Conn_ND+0x2ce>
 8009b96:	f001 bc05 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009b9a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009b9e:	2b09      	cmp	r3, #9
 8009ba0:	f201 8400 	bhi.w	800b3a4 <WiFi_Conn_ND+0x19b0>
 8009ba4:	a201      	add	r2, pc, #4	; (adr r2, 8009bac <WiFi_Conn_ND+0x1b8>)
 8009ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009baa:	bf00      	nop
 8009bac:	0800aaf1 	.word	0x0800aaf1
 8009bb0:	0800b3a5 	.word	0x0800b3a5
 8009bb4:	0800b3a5 	.word	0x0800b3a5
 8009bb8:	0800b3a5 	.word	0x0800b3a5
 8009bbc:	0800b3a5 	.word	0x0800b3a5
 8009bc0:	0800abbf 	.word	0x0800abbf
 8009bc4:	0800ac69 	.word	0x0800ac69
 8009bc8:	0800ad13 	.word	0x0800ad13
 8009bcc:	0800adbd 	.word	0x0800adbd
 8009bd0:	0800ae67 	.word	0x0800ae67
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bda:	2b64      	cmp	r3, #100	; 0x64
 8009bdc:	d046      	beq.n	8009c6c <WiFi_Conn_ND+0x278>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d041      	beq.n	8009c6c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bee:	2b1c      	cmp	r3, #28
 8009bf0:	d03c      	beq.n	8009c6c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d037      	beq.n	8009c6c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d032      	beq.n	8009c6c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0c:	2b13      	cmp	r3, #19
 8009c0e:	d02d      	beq.n	8009c6c <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f7fc fab1 	bl	8006178 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d14e      	bne.n	8009cbe <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f7fc fc3f 	bl	80064a4 <AT_ESP8266_ND>
 8009c26:	4602      	mov	r2, r0
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d109      	bne.n	8009c54 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7f7 fb62 	bl	8001318 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	2364      	movs	r3, #100	; 0x64
 8009c64:	68b8      	ldr	r0, [r7, #8]
 8009c66:	f7fb fa0b 	bl	8005080 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009c6a:	e028      	b.n	8009cbe <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d004      	beq.n	8009c80 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009c7c:	2b1c      	cmp	r3, #28
 8009c7e:	d103      	bne.n	8009c88 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	226d      	movs	r2, #109	; 0x6d
 8009c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d00f      	beq.n	8009cb2 <WiFi_Conn_ND+0x2be>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d00a      	beq.n	8009cb2 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca2:	2b0b      	cmp	r3, #11
 8009ca4:	d005      	beq.n	8009cb2 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cac:	2b0c      	cmp	r3, #12
 8009cae:	f041 834a 	bne.w	800b346 <WiFi_Conn_ND+0x1952>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2269      	movs	r2, #105	; 0x69
 8009cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009cba:	f001 bb44 	b.w	800b346 <WiFi_Conn_ND+0x1952>
 8009cbe:	f001 bb42 	b.w	800b346 <WiFi_Conn_ND+0x1952>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f7fc fa58 	bl	8006178 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2264      	movs	r2, #100	; 0x64
 8009ccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009ce8:	f001 bb5c 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00c      	beq.n	8009d10 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7fc fa6a 	bl	80061d0 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009d0e:	e00e      	b.n	8009d2e <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7fc fa47 	bl	80061a4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	22c8      	movs	r2, #200	; 0xc8
 8009d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	f041 8308 	bne.w	800b34a <WiFi_Conn_ND+0x1956>
					{
						Cambiar_CWMODE(b);
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7fc fa1c 	bl	8006178 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2264      	movs	r2, #100	; 0x64
 8009d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009d58:	f001 baf7 	b.w	800b34a <WiFi_Conn_ND+0x1956>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d62:	2bc8      	cmp	r3, #200	; 0xc8
 8009d64:	d04f      	beq.n	8009e06 <WiFi_Conn_ND+0x412>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d04a      	beq.n	8009e06 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d045      	beq.n	8009e06 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d040      	beq.n	8009e06 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d8a:	2b04      	cmp	r3, #4
 8009d8c:	d03b      	beq.n	8009e06 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d94:	2b0a      	cmp	r3, #10
 8009d96:	d036      	beq.n	8009e06 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d9e:	2b0b      	cmp	r3, #11
 8009da0:	d031      	beq.n	8009e06 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da8:	2b0c      	cmp	r3, #12
 8009daa:	d02c      	beq.n	8009e06 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7fc f9f9 	bl	80061a4 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d124      	bne.n	8009e06 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f7fc fb71 	bl	80064a4 <AT_ESP8266_ND>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d109      	bne.n	8009df0 <WiFi_Conn_ND+0x3fc>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f7f7 fa94 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	2364      	movs	r3, #100	; 0x64
 8009e00:	68b8      	ldr	r0, [r7, #8]
 8009e02:	f7fb f93d 	bl	8005080 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d004      	beq.n	8009e1a <WiFi_Conn_ND+0x426>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e16:	2b0c      	cmp	r3, #12
 8009e18:	d103      	bne.n	8009e22 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	22d1      	movs	r2, #209	; 0xd1
 8009e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d00f      	beq.n	8009e4c <WiFi_Conn_ND+0x458>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d00a      	beq.n	8009e4c <WiFi_Conn_ND+0x458>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	d005      	beq.n	8009e4c <WiFi_Conn_ND+0x458>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e46:	2b0a      	cmp	r3, #10
 8009e48:	f041 8281 	bne.w	800b34e <WiFi_Conn_ND+0x195a>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	22cd      	movs	r2, #205	; 0xcd
 8009e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009e54:	f001 ba7b 	b.w	800b34e <WiFi_Conn_ND+0x195a>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009e58:	f241 3088 	movw	r0, #5000	; 0x1388
 8009e5c:	f7f8 fc5c 	bl	8002718 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f7fc f99f 	bl	80061a4 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	22c8      	movs	r2, #200	; 0xc8
 8009e6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	f041 8264 	bne.w	800b352 <WiFi_Conn_ND+0x195e>
					{
						Cambiar_CWMODE(b);
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f7fc f974 	bl	8006178 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2264      	movs	r2, #100	; 0x64
 8009e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009ea8:	f001 ba53 	b.w	800b352 <WiFi_Conn_ND+0x195e>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d108      	bne.n	8009ed0 <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f240 3229 	movw	r2, #809	; 0x329
 8009ec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed6:	2b0a      	cmp	r3, #10
 8009ed8:	d009      	beq.n	8009eee <WiFi_Conn_ND+0x4fa>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee0:	2b0d      	cmp	r3, #13
 8009ee2:	d004      	beq.n	8009eee <WiFi_Conn_ND+0x4fa>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d10a      	bne.n	8009f04 <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7fc f958 	bl	80061a4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	22c8      	movs	r2, #200	; 0xc8
 8009ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0a:	2b04      	cmp	r3, #4
 8009f0c:	d10e      	bne.n	8009f2c <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f7fc f932 	bl	8006178 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2264      	movs	r2, #100	; 0x64
 8009f18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d011      	beq.n	8009f5a <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f7fc f9a2 	bl	8006280 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009f56:	f001 ba25 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7fc f938 	bl	80061d0 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009f72:	f001 ba17 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f80:	d03b      	beq.n	8009ffa <WiFi_Conn_ND+0x606>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	d036      	beq.n	8009ffa <WiFi_Conn_ND+0x606>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f92:	2b0a      	cmp	r3, #10
 8009f94:	d031      	beq.n	8009ffa <WiFi_Conn_ND+0x606>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f9c:	2b0d      	cmp	r3, #13
 8009f9e:	d02c      	beq.n	8009ffa <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7fc f941 	bl	8006228 <DesconectarWIFI>
						if(b->_enviaruart==1)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d124      	bne.n	8009ffa <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7fc fa77 	bl	80064a4 <AT_ESP8266_ND>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d109      	bne.n	8009fe4 <WiFi_Conn_ND+0x5f0>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f7f7 f99a 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	2364      	movs	r3, #100	; 0x64
 8009ff4:	68b8      	ldr	r0, [r7, #8]
 8009ff6:	f7fb f843 	bl	8005080 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a000:	2b0a      	cmp	r3, #10
 800a002:	d005      	beq.n	800a010 <WiFi_Conn_ND+0x61c>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00a:	2b0d      	cmp	r3, #13
 800a00c:	f041 81a3 	bne.w	800b356 <WiFi_Conn_ND+0x1962>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f240 1235 	movw	r2, #309	; 0x135
 800a016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a01a:	f001 b99c 	b.w	800b356 <WiFi_Conn_ND+0x1962>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7fc f894 	bl	800614c <NOP>
			}
			break;
 800a024:	f001 b9be 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7fc f8b7 	bl	80061a4 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	22c8      	movs	r2, #200	; 0xc8
 800a03a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	f041 8184 	bne.w	800b35a <WiFi_Conn_ND+0x1966>
					{
						Cambiar_CWMODE(b);
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7fc f890 	bl	8006178 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2264      	movs	r2, #100	; 0x64
 800a05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a070:	f001 b973 	b.w	800b35a <WiFi_Conn_ND+0x1966>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a07a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a07e:	d04f      	beq.n	800a120 <WiFi_Conn_ND+0x72c>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a086:	2b04      	cmp	r3, #4
 800a088:	d04a      	beq.n	800a120 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a090:	2b01      	cmp	r3, #1
 800a092:	d045      	beq.n	800a120 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d040      	beq.n	800a120 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a4:	2b07      	cmp	r3, #7
 800a0a6:	d03b      	beq.n	800a120 <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ae:	2b08      	cmp	r3, #8
 800a0b0:	d036      	beq.n	800a120 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b8:	2b1e      	cmp	r3, #30
 800a0ba:	d031      	beq.n	800a120 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c2:	2b1f      	cmp	r3, #31
 800a0c4:	d02c      	beq.n	800a120 <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f7fc f882 	bl	80061d0 <MUX>
						if(b->_enviaruart==1)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d124      	bne.n	800a120 <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f7fc f9e4 	bl	80064a4 <AT_ESP8266_ND>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d109      	bne.n	800a10a <WiFi_Conn_ND+0x716>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a102:	4619      	mov	r1, r3
 800a104:	4610      	mov	r0, r2
 800a106:	f7f7 f907 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a116:	b29a      	uxth	r2, r3
 800a118:	2364      	movs	r3, #100	; 0x64
 800a11a:	68b8      	ldr	r0, [r7, #8]
 800a11c:	f7fa ffb0 	bl	8005080 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a126:	2b01      	cmp	r3, #1
 800a128:	d009      	beq.n	800a13e <WiFi_Conn_ND+0x74a>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a130:	2b07      	cmp	r3, #7
 800a132:	d004      	beq.n	800a13e <WiFi_Conn_ND+0x74a>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a13a:	2b08      	cmp	r3, #8
 800a13c:	d104      	bne.n	800a148 <WiFi_Conn_ND+0x754>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f240 1299 	movw	r2, #409	; 0x199
 800a144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d00a      	beq.n	800a168 <WiFi_Conn_ND+0x774>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a158:	2b1e      	cmp	r3, #30
 800a15a:	d005      	beq.n	800a168 <WiFi_Conn_ND+0x774>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a162:	2b1f      	cmp	r3, #31
 800a164:	f041 80fb 	bne.w	800b35e <WiFi_Conn_ND+0x196a>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f240 1295 	movw	r2, #405	; 0x195
 800a16e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a172:	f001 b8f4 	b.w	800b35e <WiFi_Conn_ND+0x196a>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7fb ffe8 	bl	800614c <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a182:	2b04      	cmp	r3, #4
 800a184:	d112      	bne.n	800a1ac <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7fb fff6 	bl	8006178 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2264      	movs	r2, #100	; 0x64
 800a190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b2:	2b0a      	cmp	r3, #10
 800a1b4:	d00a      	beq.n	800a1cc <WiFi_Conn_ND+0x7d8>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1bc:	2b0d      	cmp	r3, #13
 800a1be:	d005      	beq.n	800a1cc <WiFi_Conn_ND+0x7d8>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	f041 80cb 	bne.w	800b362 <WiFi_Conn_ND+0x196e>
				{
					ConectarWIFI(b);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7fb ffe9 	bl	80061a4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	22c8      	movs	r2, #200	; 0xc8
 800a1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a1ea:	f001 b8ba 	b.w	800b362 <WiFi_Conn_ND+0x196e>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7fb ffac 	bl	800614c <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a202:	2b04      	cmp	r3, #4
 800a204:	d10e      	bne.n	800a224 <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f7fb ffb6 	bl	8006178 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2264      	movs	r2, #100	; 0x64
 800a210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22a:	2b0a      	cmp	r3, #10
 800a22c:	d009      	beq.n	800a242 <WiFi_Conn_ND+0x84e>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a234:	2b0d      	cmp	r3, #13
 800a236:	d004      	beq.n	800a242 <WiFi_Conn_ND+0x84e>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d10a      	bne.n	800a258 <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f7fb ffae 	bl	80061a4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	22c8      	movs	r2, #200	; 0xc8
 800a24c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10d      	bne.n	800a27e <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7fb ffca 	bl	80061fc <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a27a:	f001 b893 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
						IPDef(b);
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7fb ffbc 	bl	80061fc <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a28a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a296:	f001 b885 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a2a4:	d045      	beq.n	800a332 <WiFi_Conn_ND+0x93e>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d040      	beq.n	800a332 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d03b      	beq.n	800a332 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d036      	beq.n	800a332 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ca:	2b1b      	cmp	r3, #27
 800a2cc:	d031      	beq.n	800a332 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d4:	2b21      	cmp	r3, #33	; 0x21
 800a2d6:	d02c      	beq.n	800a332 <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f7fb ff8f 	bl	80061fc <IPDef>
						if(b->_enviaruart==1)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d124      	bne.n	800a332 <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7fc f8db 	bl	80064a4 <AT_ESP8266_ND>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a304:	2b01      	cmp	r3, #1
 800a306:	d109      	bne.n	800a31c <WiFi_Conn_ND+0x928>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a314:	4619      	mov	r1, r3
 800a316:	4610      	mov	r0, r2
 800a318:	f7f6 fffe 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a328:	b29a      	uxth	r2, r3
 800a32a:	2364      	movs	r3, #100	; 0x64
 800a32c:	68b8      	ldr	r0, [r7, #8]
 800a32e:	f7fa fea7 	bl	8005080 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d004      	beq.n	800a346 <WiFi_Conn_ND+0x952>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a342:	2b1b      	cmp	r3, #27
 800a344:	d104      	bne.n	800a350 <WiFi_Conn_ND+0x95c>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a34c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a356:	2b02      	cmp	r3, #2
 800a358:	d005      	beq.n	800a366 <WiFi_Conn_ND+0x972>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a360:	2b21      	cmp	r3, #33	; 0x21
 800a362:	f041 8000 	bne.w	800b366 <WiFi_Conn_ND+0x1972>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a36c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a370:	f000 bff9 	b.w	800b366 <WiFi_Conn_ND+0x1972>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7fb fee9 	bl	800614c <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a380:	2b04      	cmp	r3, #4
 800a382:	d004      	beq.n	800a38e <WiFi_Conn_ND+0x99a>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d112      	bne.n	800a3b4 <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f7fb fef2 	bl	8006178 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2264      	movs	r2, #100	; 0x64
 800a398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ba:	2b0a      	cmp	r3, #10
 800a3bc:	d00a      	beq.n	800a3d4 <WiFi_Conn_ND+0x9e0>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c4:	2b0d      	cmp	r3, #13
 800a3c6:	d005      	beq.n	800a3d4 <WiFi_Conn_ND+0x9e0>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	f040 87cb 	bne.w	800b36a <WiFi_Conn_ND+0x1976>
				{
					ConectarWIFI(b);
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7fb fee5 	bl	80061a4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	22c8      	movs	r2, #200	; 0xc8
 800a3de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a3f2:	f000 bfba 	b.w	800b36a <WiFi_Conn_ND+0x1976>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7fb fea8 	bl	800614c <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a402:	2b04      	cmp	r3, #4
 800a404:	d112      	bne.n	800a42c <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7fb feb6 	bl	8006178 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2264      	movs	r2, #100	; 0x64
 800a410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a432:	2b0a      	cmp	r3, #10
 800a434:	d009      	beq.n	800a44a <WiFi_Conn_ND+0xa56>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a43c:	2b0d      	cmp	r3, #13
 800a43e:	d004      	beq.n	800a44a <WiFi_Conn_ND+0xa56>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a446:	2b03      	cmp	r3, #3
 800a448:	d10e      	bne.n	800a468 <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7fb feaa 	bl	80061a4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	22c8      	movs	r2, #200	; 0xc8
 800a454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d111      	bne.n	800a496 <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f7fb feee 	bl	8006254 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800a492:	f000 bf87 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
						ConectarWIFI(b);//
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f7fb fe84 	bl	80061a4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	22c8      	movs	r2, #200	; 0xc8
 800a4a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a4b4:	f000 bf76 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4be:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a4c2:	d04a      	beq.n	800a55a <WiFi_Conn_ND+0xb66>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d045      	beq.n	800a55a <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d040      	beq.n	800a55a <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4de:	2b0a      	cmp	r3, #10
 800a4e0:	d03b      	beq.n	800a55a <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e8:	2b0e      	cmp	r3, #14
 800a4ea:	d036      	beq.n	800a55a <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f2:	2b0f      	cmp	r3, #15
 800a4f4:	d031      	beq.n	800a55a <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fc:	2b10      	cmp	r3, #16
 800a4fe:	d02c      	beq.n	800a55a <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7fb fea7 	bl	8006254 <ConectarTCP>
						if(b->_enviaruart==1)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d124      	bne.n	800a55a <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7fb ffc7 	bl	80064a4 <AT_ESP8266_ND>
 800a516:	4602      	mov	r2, r0
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d109      	bne.n	800a544 <WiFi_Conn_ND+0xb50>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a53c:	4619      	mov	r1, r3
 800a53e:	4610      	mov	r0, r2
 800a540:	f7f6 feea 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a550:	b29a      	uxth	r2, r3
 800a552:	2364      	movs	r3, #100	; 0x64
 800a554:	68b8      	ldr	r0, [r7, #8]
 800a556:	f7fa fd93 	bl	8005080 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a560:	2b01      	cmp	r3, #1
 800a562:	d009      	beq.n	800a578 <WiFi_Conn_ND+0xb84>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56a:	2b0e      	cmp	r3, #14
 800a56c:	d004      	beq.n	800a578 <WiFi_Conn_ND+0xb84>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a574:	2b0f      	cmp	r3, #15
 800a576:	d106      	bne.n	800a586 <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f240 2261 	movw	r2, #609	; 0x261
 800a57e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a582:	f000 bef4 	b.w	800b36e <WiFi_Conn_ND+0x197a>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d005      	beq.n	800a59c <WiFi_Conn_ND+0xba8>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a596:	2b10      	cmp	r3, #16
 800a598:	f040 86e9 	bne.w	800b36e <WiFi_Conn_ND+0x197a>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f240 225d 	movw	r2, #605	; 0x25d
 800a5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a5a6:	f000 bee2 	b.w	800b36e <WiFi_Conn_ND+0x197a>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f7fb fdce 	bl	800614c <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b6:	2b04      	cmp	r3, #4
 800a5b8:	d112      	bne.n	800a5e0 <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f7fb fddc 	bl	8006178 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2264      	movs	r2, #100	; 0x64
 800a5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e6:	2b0a      	cmp	r3, #10
 800a5e8:	d013      	beq.n	800a612 <WiFi_Conn_ND+0xc1e>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f0:	2b0d      	cmp	r3, #13
 800a5f2:	d00e      	beq.n	800a612 <WiFi_Conn_ND+0xc1e>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5fa:	2b22      	cmp	r3, #34	; 0x22
 800a5fc:	d009      	beq.n	800a612 <WiFi_Conn_ND+0xc1e>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a604:	2b02      	cmp	r3, #2
 800a606:	d004      	beq.n	800a612 <WiFi_Conn_ND+0xc1e>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d10e      	bne.n	800a630 <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7fb fdc6 	bl	80061a4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	22c8      	movs	r2, #200	; 0xc8
 800a61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a636:	2b10      	cmp	r3, #16
 800a638:	d005      	beq.n	800a646 <WiFi_Conn_ND+0xc52>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a640:	2b0e      	cmp	r3, #14
 800a642:	f040 8696 	bne.w	800b372 <WiFi_Conn_ND+0x197e>
				{
					ConectarTCP(b);
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f7fb fe04 	bl	8006254 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a666:	f000 be84 	b.w	800b372 <WiFi_Conn_ND+0x197e>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f7fb fd6e 	bl	800614c <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a676:	2b04      	cmp	r3, #4
 800a678:	d112      	bne.n	800a6a0 <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7fb fd7c 	bl	8006178 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2264      	movs	r2, #100	; 0x64
 800a684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a6:	2b0a      	cmp	r3, #10
 800a6a8:	d009      	beq.n	800a6be <WiFi_Conn_ND+0xcca>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b0:	2b0d      	cmp	r3, #13
 800a6b2:	d004      	beq.n	800a6be <WiFi_Conn_ND+0xcca>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d10e      	bne.n	800a6dc <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7fb fd70 	bl	80061a4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	22c8      	movs	r2, #200	; 0xc8
 800a6c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d004      	beq.n	800a6f0 <WiFi_Conn_ND+0xcfc>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ec:	2b10      	cmp	r3, #16
 800a6ee:	d10f      	bne.n	800a710 <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7fb fdaf 	bl	8006254 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a6fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a716:	2b0e      	cmp	r3, #14
 800a718:	d005      	beq.n	800a726 <WiFi_Conn_ND+0xd32>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a720:	2b0f      	cmp	r3, #15
 800a722:	f040 8628 	bne.w	800b376 <WiFi_Conn_ND+0x1982>
					{
						if(b->_automatizacion >= WF_SEND )
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	f240 8622 	bls.w	800b376 <WiFi_Conn_ND+0x1982>
						{
							EnviarDatos(b);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7fb fdd0 	bl	80062d8 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a752:	f000 be10 	b.w	800b376 <WiFi_Conn_ND+0x1982>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a760:	d054      	beq.n	800a80c <WiFi_Conn_ND+0xe18>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d04f      	beq.n	800a80c <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a772:	2b0a      	cmp	r3, #10
 800a774:	d04a      	beq.n	800a80c <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77c:	2b10      	cmp	r3, #16
 800a77e:	d045      	beq.n	800a80c <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a786:	2b11      	cmp	r3, #17
 800a788:	d040      	beq.n	800a80c <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a790:	2b14      	cmp	r3, #20
 800a792:	d03b      	beq.n	800a80c <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79a:	2b12      	cmp	r3, #18
 800a79c:	d036      	beq.n	800a80c <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d907      	bls.n	800a7b8 <WiFi_Conn_ND+0xdc4>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7fb fd90 	bl	80062d8 <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d124      	bne.n	800a80c <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7fb fe6e 	bl	80064a4 <AT_ESP8266_ND>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d109      	bne.n	800a7f6 <WiFi_Conn_ND+0xe02>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7f6 fd91 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a802:	b29a      	uxth	r2, r3
 800a804:	2364      	movs	r3, #100	; 0x64
 800a806:	68b8      	ldr	r0, [r7, #8]
 800a808:	f7fa fc3a 	bl	8005080 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a812:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a816:	d13b      	bne.n	800a890 <WiFi_Conn_ND+0xe9c>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d136      	bne.n	800a890 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_error)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d031      	beq.n	800a890 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_wifi_disconnect)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a832:	2b0a      	cmp	r3, #10
 800a834:	d02c      	beq.n	800a890 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_desconectado)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83c:	2b10      	cmp	r3, #16
 800a83e:	d027      	beq.n	800a890 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_snd_err)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a846:	2b11      	cmp	r3, #17
 800a848:	d022      	beq.n	800a890 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a850:	2b12      	cmp	r3, #18
 800a852:	d01d      	beq.n	800a890 <WiFi_Conn_ND+0xe9c>
							{
								b->_enviaruart=0;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a862:	2b01      	cmp	r3, #1
 800a864:	d109      	bne.n	800a87a <WiFi_Conn_ND+0xe86>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a872:	4619      	mov	r1, r3
 800a874:	4610      	mov	r0, r2
 800a876:	f7f6 fd4f 	bl	8001318 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a886:	b29a      	uxth	r2, r3
 800a888:	2364      	movs	r3, #100	; 0x64
 800a88a:	68b8      	ldr	r0, [r7, #8]
 800a88c:	f7fa fbf8 	bl	8005080 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a896:	2b13      	cmp	r3, #19
 800a898:	d104      	bne.n	800a8a4 <WiFi_Conn_ND+0xeb0>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a8a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d019      	beq.n	800a8e2 <WiFi_Conn_ND+0xeee>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b4:	2b0a      	cmp	r3, #10
 800a8b6:	d014      	beq.n	800a8e2 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_fail)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d00f      	beq.n	800a8e2 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_desconectado)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c8:	2b10      	cmp	r3, #16
 800a8ca:	d00a      	beq.n	800a8e2 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_snd_err)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d2:	2b11      	cmp	r3, #17
 800a8d4:	d005      	beq.n	800a8e2 <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_enviado_error))
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8dc:	2b12      	cmp	r3, #18
 800a8de:	f040 854c 	bne.w	800b37a <WiFi_Conn_ND+0x1986>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a8e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a8ec:	f000 bd45 	b.w	800b37a <WiFi_Conn_ND+0x1986>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f7fb fc2b 	bl	800614c <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d112      	bne.n	800a926 <WiFi_Conn_ND+0xf32>
				{
					Cambiar_CWMODE(b);
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f7fb fc39 	bl	8006178 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2264      	movs	r2, #100	; 0x64
 800a90a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92c:	2b0a      	cmp	r3, #10
 800a92e:	d009      	beq.n	800a944 <WiFi_Conn_ND+0xf50>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a936:	2b0d      	cmp	r3, #13
 800a938:	d004      	beq.n	800a944 <WiFi_Conn_ND+0xf50>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a940:	2b03      	cmp	r3, #3
 800a942:	d10e      	bne.n	800a962 <WiFi_Conn_ND+0xf6e>
				{
					ConectarWIFI(b);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f7fb fc2d 	bl	80061a4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	22c8      	movs	r2, #200	; 0xc8
 800a94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a968:	2b0c      	cmp	r3, #12
 800a96a:	d10f      	bne.n	800a98c <WiFi_Conn_ND+0xf98>
				{
					ConectarTCP(b);
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f7fb fc71 	bl	8006254 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a992:	2b02      	cmp	r3, #2
 800a994:	d00f      	beq.n	800a9b6 <WiFi_Conn_ND+0xfc2>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99c:	2b10      	cmp	r3, #16
 800a99e:	d00a      	beq.n	800a9b6 <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_snd_err)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a6:	2b11      	cmp	r3, #17
 800a9a8:	d005      	beq.n	800a9b6 <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b0:	2b12      	cmp	r3, #18
 800a9b2:	f040 84e4 	bne.w	800b37e <WiFi_Conn_ND+0x198a>
				{
					ConectarTCP(b);
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f7fb fc4c 	bl	8006254 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a9c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a9d6:	f000 bcd2 	b.w	800b37e <WiFi_Conn_ND+0x198a>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f7fb fbb6 	bl	800614c <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	d112      	bne.n	800aa10 <WiFi_Conn_ND+0x101c>
					{
						Cambiar_CWMODE(b);
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f7fb fbc4 	bl	8006178 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2264      	movs	r2, #100	; 0x64
 800a9f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa16:	2b0a      	cmp	r3, #10
 800aa18:	d009      	beq.n	800aa2e <WiFi_Conn_ND+0x103a>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa20:	2b0d      	cmp	r3, #13
 800aa22:	d004      	beq.n	800aa2e <WiFi_Conn_ND+0x103a>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d10e      	bne.n	800aa4c <WiFi_Conn_ND+0x1058>
					{
						ConectarWIFI(b);
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7fb fbb8 	bl	80061a4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	22c8      	movs	r2, #200	; 0xc8
 800aa38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d00e      	beq.n	800aa74 <WiFi_Conn_ND+0x1080>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa5c:	2b0b      	cmp	r3, #11
 800aa5e:	d009      	beq.n	800aa74 <WiFi_Conn_ND+0x1080>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa66:	2b0c      	cmp	r3, #12
 800aa68:	d004      	beq.n	800aa74 <WiFi_Conn_ND+0x1080>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa70:	2b10      	cmp	r3, #16
 800aa72:	d10f      	bne.n	800aa94 <WiFi_Conn_ND+0x10a0>
					{
						ConectarTCP(b);
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f7fb fbed 	bl	8006254 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800aa94:	20c8      	movs	r0, #200	; 0xc8
 800aa96:	f7f7 fe3f 	bl	8002718 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d916      	bls.n	800aad2 <WiFi_Conn_ND+0x10de>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d011      	beq.n	800aad2 <WiFi_Conn_ND+0x10de>
					{
							EnviarDatos(b);
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f7fb fc12 	bl	80062d8 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800aaba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800aace:	f000 bc69 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
							b->_estado_conexion=TCP_CONN_OK;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f240 2261 	movw	r2, #609	; 0x261
 800aad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800aaec:	f000 bc5a 	b.w	800b3a4 <WiFi_Conn_ND+0x19b0>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aafa:	d045      	beq.n	800ab88 <WiFi_Conn_ND+0x1194>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d040      	beq.n	800ab88 <WiFi_Conn_ND+0x1194>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0c:	2b0a      	cmp	r3, #10
 800ab0e:	d03b      	beq.n	800ab88 <WiFi_Conn_ND+0x1194>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab16:	2b15      	cmp	r3, #21
 800ab18:	d036      	beq.n	800ab88 <WiFi_Conn_ND+0x1194>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab20:	2b16      	cmp	r3, #22
 800ab22:	d031      	beq.n	800ab88 <WiFi_Conn_ND+0x1194>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab2a:	2b17      	cmp	r3, #23
 800ab2c:	d02c      	beq.n	800ab88 <WiFi_Conn_ND+0x1194>
							{
								CrearServidorTCP(b);
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7fb fba6 	bl	8006280 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d124      	bne.n	800ab88 <WiFi_Conn_ND+0x1194>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7fb fcb0 	bl	80064a4 <AT_ESP8266_ND>
 800ab44:	4602      	mov	r2, r0
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d109      	bne.n	800ab72 <WiFi_Conn_ND+0x117e>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	f7f6 fbd3 	bl	8001318 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	2364      	movs	r3, #100	; 0x64
 800ab82:	68b8      	ldr	r0, [r7, #8]
 800ab84:	f7fa fa7c 	bl	8005080 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8e:	2b15      	cmp	r3, #21
 800ab90:	d004      	beq.n	800ab9c <WiFi_Conn_ND+0x11a8>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab98:	2b17      	cmp	r3, #23
 800ab9a:	d104      	bne.n	800aba6 <WiFi_Conn_ND+0x11b2>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f240 3229 	movw	r2, #809	; 0x329
 800aba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abac:	2b16      	cmp	r3, #22
 800abae:	f040 83e8 	bne.w	800b382 <WiFi_Conn_ND+0x198e>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f240 3225 	movw	r2, #805	; 0x325
 800abb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800abbc:	e3e1      	b.n	800b382 <WiFi_Conn_ND+0x198e>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7fb fac4 	bl	800614c <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abca:	2b04      	cmp	r3, #4
 800abcc:	d112      	bne.n	800abf4 <WiFi_Conn_ND+0x1200>
							{
								Cambiar_CWMODE(b);
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f7fb fad2 	bl	8006178 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2264      	movs	r2, #100	; 0x64
 800abd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abfa:	2b0a      	cmp	r3, #10
 800abfc:	d009      	beq.n	800ac12 <WiFi_Conn_ND+0x121e>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac04:	2b0d      	cmp	r3, #13
 800ac06:	d004      	beq.n	800ac12 <WiFi_Conn_ND+0x121e>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac0e:	2b03      	cmp	r3, #3
 800ac10:	d10e      	bne.n	800ac30 <WiFi_Conn_ND+0x123c>
							{
								ConectarWIFI(b);
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f7fb fac6 	bl	80061a4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	22c8      	movs	r2, #200	; 0xc8
 800ac1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d005      	beq.n	800ac46 <WiFi_Conn_ND+0x1252>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac40:	2b10      	cmp	r3, #16
 800ac42:	f040 83a0 	bne.w	800b386 <WiFi_Conn_ND+0x1992>
							{
								ConectarTCP(b);
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f7fb fb04 	bl	8006254 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800ac66:	e38e      	b.n	800b386 <WiFi_Conn_ND+0x1992>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7fb fa6f 	bl	800614c <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac74:	2b04      	cmp	r3, #4
 800ac76:	d112      	bne.n	800ac9e <WiFi_Conn_ND+0x12aa>
							{
								Cambiar_CWMODE(b);
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7fb fa7d 	bl	8006178 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2264      	movs	r2, #100	; 0x64
 800ac82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca4:	2b0a      	cmp	r3, #10
 800aca6:	d009      	beq.n	800acbc <WiFi_Conn_ND+0x12c8>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acae:	2b0d      	cmp	r3, #13
 800acb0:	d004      	beq.n	800acbc <WiFi_Conn_ND+0x12c8>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb8:	2b03      	cmp	r3, #3
 800acba:	d10e      	bne.n	800acda <WiFi_Conn_ND+0x12e6>
							{
								ConectarWIFI(b);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7fb fa71 	bl	80061a4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	22c8      	movs	r2, #200	; 0xc8
 800acc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d005      	beq.n	800acf0 <WiFi_Conn_ND+0x12fc>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acea:	2b10      	cmp	r3, #16
 800acec:	f040 834d 	bne.w	800b38a <WiFi_Conn_ND+0x1996>
							{
								ConectarTCP(b);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7fb faaf 	bl	8006254 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800acfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ad10:	e33b      	b.n	800b38a <WiFi_Conn_ND+0x1996>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f7fb fa1a 	bl	800614c <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d112      	bne.n	800ad48 <WiFi_Conn_ND+0x1354>
							{
								Cambiar_CWMODE(b);
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7fb fa28 	bl	8006178 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2264      	movs	r2, #100	; 0x64
 800ad2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4e:	2b0a      	cmp	r3, #10
 800ad50:	d009      	beq.n	800ad66 <WiFi_Conn_ND+0x1372>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad58:	2b0d      	cmp	r3, #13
 800ad5a:	d004      	beq.n	800ad66 <WiFi_Conn_ND+0x1372>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	d10e      	bne.n	800ad84 <WiFi_Conn_ND+0x1390>
							{
								ConectarWIFI(b);
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7fb fa1c 	bl	80061a4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	22c8      	movs	r2, #200	; 0xc8
 800ad70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d005      	beq.n	800ad9a <WiFi_Conn_ND+0x13a6>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad94:	2b10      	cmp	r3, #16
 800ad96:	f040 82fa 	bne.w	800b38e <WiFi_Conn_ND+0x199a>
							{
								ConectarTCP(b);
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7fb fa5a 	bl	8006254 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ada6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800adba:	e2e8      	b.n	800b38e <WiFi_Conn_ND+0x199a>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7fb f9c5 	bl	800614c <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc8:	2b04      	cmp	r3, #4
 800adca:	d112      	bne.n	800adf2 <WiFi_Conn_ND+0x13fe>
							{
								Cambiar_CWMODE(b);
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f7fb f9d3 	bl	8006178 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2264      	movs	r2, #100	; 0x64
 800add6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf8:	2b0a      	cmp	r3, #10
 800adfa:	d009      	beq.n	800ae10 <WiFi_Conn_ND+0x141c>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae02:	2b0d      	cmp	r3, #13
 800ae04:	d004      	beq.n	800ae10 <WiFi_Conn_ND+0x141c>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d10e      	bne.n	800ae2e <WiFi_Conn_ND+0x143a>
							{
								ConectarWIFI(b);
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f7fb f9c7 	bl	80061a4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	22c8      	movs	r2, #200	; 0xc8
 800ae1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d005      	beq.n	800ae44 <WiFi_Conn_ND+0x1450>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae3e:	2b10      	cmp	r3, #16
 800ae40:	f040 82a7 	bne.w	800b392 <WiFi_Conn_ND+0x199e>
							{
								ConectarTCP(b);
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7fb fa05 	bl	8006254 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ae64:	e295      	b.n	800b392 <WiFi_Conn_ND+0x199e>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f7fb f970 	bl	800614c <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae7a:	2b04      	cmp	r3, #4
 800ae7c:	d112      	bne.n	800aea4 <WiFi_Conn_ND+0x14b0>
								{
									Cambiar_CWMODE(b);
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f7fb f97a 	bl	8006178 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2264      	movs	r2, #100	; 0x64
 800ae88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeaa:	2b0a      	cmp	r3, #10
 800aeac:	d009      	beq.n	800aec2 <WiFi_Conn_ND+0x14ce>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb4:	2b0d      	cmp	r3, #13
 800aeb6:	d004      	beq.n	800aec2 <WiFi_Conn_ND+0x14ce>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d10e      	bne.n	800aee0 <WiFi_Conn_ND+0x14ec>
								{
									ConectarWIFI(b);
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f7fb f96e 	bl	80061a4 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	22c8      	movs	r2, #200	; 0xc8
 800aecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d004      	beq.n	800aef4 <WiFi_Conn_ND+0x1500>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef0:	2b10      	cmp	r3, #16
 800aef2:	d10f      	bne.n	800af14 <WiFi_Conn_ND+0x1520>
								{
									ConectarTCP(b);
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f7fb f9ad 	bl	8006254 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	f040 823b 	bne.w	800b396 <WiFi_Conn_ND+0x19a2>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af26:	2b00      	cmp	r3, #0
 800af28:	f000 8235 	beq.w	800b396 <WiFi_Conn_ND+0x19a2>
								{
									EnviarDatosSRVR(b);
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7fb f9bd 	bl	80062ac <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f44f 7261 	mov.w	r2, #900	; 0x384
 800af38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800af4c:	e223      	b.n	800b396 <WiFi_Conn_ND+0x19a2>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af54:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800af58:	d063      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af60:	2b02      	cmp	r3, #2
 800af62:	d05e      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_disconnect)&&
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800af6a:	2b0a      	cmp	r3, #10
 800af6c:	d059      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_connected)&&
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800af74:	2b0b      	cmp	r3, #11
 800af76:	d054      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_gotip)&&
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800af7e:	2b0c      	cmp	r3, #12
 800af80:	d04f      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_desconectado)&&
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800af88:	2b10      	cmp	r3, #16
 800af8a:	d04a      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_snd_err)&&
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800af92:	2b11      	cmp	r3, #17
 800af94:	d045      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800af9c:	2b12      	cmp	r3, #18
 800af9e:	d040      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800afa6:	2b13      	cmp	r3, #19
 800afa8:	d03b      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800afb0:	2b16      	cmp	r3, #22
 800afb2:	d036      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afba:	2b19      	cmp	r3, #25
 800afbc:	d031      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d02c      	beq.n	800b022 <WiFi_Conn_ND+0x162e>
								{
								EnviarDatosSRVR(b);
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f7fb f96f 	bl	80062ac <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d124      	bne.n	800b022 <WiFi_Conn_ND+0x162e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f7fb fa63 	bl	80064a4 <AT_ESP8266_ND>
 800afde:	4602      	mov	r2, r0
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d109      	bne.n	800b00c <WiFi_Conn_ND+0x1618>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b004:	4619      	mov	r1, r3
 800b006:	4610      	mov	r0, r2
 800b008:	f7f6 f986 	bl	8001318 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b018:	b29a      	uxth	r2, r3
 800b01a:	2364      	movs	r3, #100	; 0x64
 800b01c:	68b8      	ldr	r0, [r7, #8]
 800b01e:	f7fa f82f 	bl	8005080 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b028:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b02c:	d154      	bne.n	800b0d8 <WiFi_Conn_ND+0x16e4>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b034:	2b01      	cmp	r3, #1
 800b036:	d14f      	bne.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_error)&&
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d04a      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_disconnect)&&
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b048:	2b0a      	cmp	r3, #10
 800b04a:	d045      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_connected)&&
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b052:	2b0b      	cmp	r3, #11
 800b054:	d040      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_gotip)&&
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b05c:	2b0c      	cmp	r3, #12
 800b05e:	d03b      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_desconectado)&&
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b066:	2b10      	cmp	r3, #16
 800b068:	d036      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_snd_err)&&
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b070:	2b11      	cmp	r3, #17
 800b072:	d031      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b07a:	2b12      	cmp	r3, #18
 800b07c:	d02c      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b084:	2b13      	cmp	r3, #19
 800b086:	d027      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b08e:	2b16      	cmp	r3, #22
 800b090:	d022      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b098:	2b19      	cmp	r3, #25
 800b09a:	d01d      	beq.n	800b0d8 <WiFi_Conn_ND+0x16e4>
										{
											b->_enviaruart=0;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d109      	bne.n	800b0c2 <WiFi_Conn_ND+0x16ce>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f7f6 f92b 	bl	8001318 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	2364      	movs	r3, #100	; 0x64
 800b0d2:	68b8      	ldr	r0, [r7, #8]
 800b0d4:	f7f9 ffd4 	bl	8005080 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0de:	2b13      	cmp	r3, #19
 800b0e0:	d104      	bne.n	800b0ec <WiFi_Conn_ND+0x16f8>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f240 328d 	movw	r2, #909	; 0x38d
 800b0e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d02d      	beq.n	800b152 <WiFi_Conn_ND+0x175e>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d028      	beq.n	800b152 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b106:	2b0a      	cmp	r3, #10
 800b108:	d023      	beq.n	800b152 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b110:	2b0b      	cmp	r3, #11
 800b112:	d01e      	beq.n	800b152 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b11a:	2b0c      	cmp	r3, #12
 800b11c:	d019      	beq.n	800b152 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b124:	2b10      	cmp	r3, #16
 800b126:	d014      	beq.n	800b152 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b12e:	2b11      	cmp	r3, #17
 800b130:	d00f      	beq.n	800b152 <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b138:	2b12      	cmp	r3, #18
 800b13a:	d00a      	beq.n	800b152 <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b142:	2b16      	cmp	r3, #22
 800b144:	d005      	beq.n	800b152 <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b14c:	2b19      	cmp	r3, #25
 800b14e:	f040 8124 	bne.w	800b39a <WiFi_Conn_ND+0x19a6>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f240 3289 	movw	r2, #905	; 0x389
 800b158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b15c:	e11d      	b.n	800b39a <WiFi_Conn_ND+0x19a6>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f7fa fff4 	bl	800614c <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16a:	2b04      	cmp	r3, #4
 800b16c:	d009      	beq.n	800b182 <WiFi_Conn_ND+0x178e>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b174:	2b0b      	cmp	r3, #11
 800b176:	d004      	beq.n	800b182 <WiFi_Conn_ND+0x178e>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17e:	2b0c      	cmp	r3, #12
 800b180:	d112      	bne.n	800b1a8 <WiFi_Conn_ND+0x17b4>
							{
								Cambiar_CWMODE(b);
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7fa fff8 	bl	8006178 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2264      	movs	r2, #100	; 0x64
 800b18c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ae:	2b0a      	cmp	r3, #10
 800b1b0:	d009      	beq.n	800b1c6 <WiFi_Conn_ND+0x17d2>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b8:	2b0d      	cmp	r3, #13
 800b1ba:	d004      	beq.n	800b1c6 <WiFi_Conn_ND+0x17d2>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d10e      	bne.n	800b1e4 <WiFi_Conn_ND+0x17f0>
							{
								ConectarWIFI(b);
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7fa ffec 	bl	80061a4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	22c8      	movs	r2, #200	; 0xc8
 800b1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ea:	2b16      	cmp	r3, #22
 800b1ec:	d10c      	bne.n	800b208 <WiFi_Conn_ND+0x1814>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f240 3225 	movw	r2, #805	; 0x325
 800b1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b20e:	2b18      	cmp	r3, #24
 800b210:	d10c      	bne.n	800b22c <WiFi_Conn_ND+0x1838>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f240 3229 	movw	r2, #809	; 0x329
 800b218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b232:	2b19      	cmp	r3, #25
 800b234:	d008      	beq.n	800b248 <WiFi_Conn_ND+0x1854>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b23c:	2b11      	cmp	r3, #17
 800b23e:	d003      	beq.n	800b248 <WiFi_Conn_ND+0x1854>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2212      	movs	r2, #18
 800b244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b24e:	2b01      	cmp	r3, #1
 800b250:	f040 80a5 	bne.w	800b39e <WiFi_Conn_ND+0x19aa>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b25a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b26e:	e096      	b.n	800b39e <WiFi_Conn_ND+0x19aa>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7fa ff6b 	bl	800614c <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b27c:	2b04      	cmp	r3, #4
 800b27e:	d009      	beq.n	800b294 <WiFi_Conn_ND+0x18a0>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b286:	2b0b      	cmp	r3, #11
 800b288:	d004      	beq.n	800b294 <WiFi_Conn_ND+0x18a0>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b290:	2b0c      	cmp	r3, #12
 800b292:	d112      	bne.n	800b2ba <WiFi_Conn_ND+0x18c6>
								{
									Cambiar_CWMODE(b);
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f7fa ff6f 	bl	8006178 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2264      	movs	r2, #100	; 0x64
 800b29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c0:	2b0a      	cmp	r3, #10
 800b2c2:	d009      	beq.n	800b2d8 <WiFi_Conn_ND+0x18e4>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ca:	2b0d      	cmp	r3, #13
 800b2cc:	d004      	beq.n	800b2d8 <WiFi_Conn_ND+0x18e4>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d10e      	bne.n	800b2f6 <WiFi_Conn_ND+0x1902>
								{
									ConectarWIFI(b);
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7fa ff63 	bl	80061a4 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	22c8      	movs	r2, #200	; 0xc8
 800b2e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d004      	beq.n	800b30a <WiFi_Conn_ND+0x1916>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b306:	2b01      	cmp	r3, #1
 800b308:	d14b      	bne.n	800b3a2 <WiFi_Conn_ND+0x19ae>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b310:	2b00      	cmp	r3, #0
 800b312:	d046      	beq.n	800b3a2 <WiFi_Conn_ND+0x19ae>
								{
									EnviarDatosSRVR(b);
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f7fa ffc9 	bl	80062ac <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b344:	e02d      	b.n	800b3a2 <WiFi_Conn_ND+0x19ae>
			break;
 800b346:	bf00      	nop
 800b348:	e02c      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b34a:	bf00      	nop
 800b34c:	e02a      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b34e:	bf00      	nop
 800b350:	e028      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b352:	bf00      	nop
 800b354:	e026      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b356:	bf00      	nop
 800b358:	e024      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b35a:	bf00      	nop
 800b35c:	e022      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b35e:	bf00      	nop
 800b360:	e020      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b362:	bf00      	nop
 800b364:	e01e      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b366:	bf00      	nop
 800b368:	e01c      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b36a:	bf00      	nop
 800b36c:	e01a      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b36e:	bf00      	nop
 800b370:	e018      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b372:	bf00      	nop
 800b374:	e016      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b376:	bf00      	nop
 800b378:	e014      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b37a:	bf00      	nop
 800b37c:	e012      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
			break;
 800b37e:	bf00      	nop
 800b380:	e010      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
						break;
 800b382:	bf00      	nop
 800b384:	e00e      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
						break;
 800b386:	bf00      	nop
 800b388:	e00c      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
						break;
 800b38a:	bf00      	nop
 800b38c:	e00a      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
						break;
 800b38e:	bf00      	nop
 800b390:	e008      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
						break;
 800b392:	bf00      	nop
 800b394:	e006      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
						break;
 800b396:	bf00      	nop
 800b398:	e004      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
						break;
 800b39a:	bf00      	nop
 800b39c:	e002      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
						break;
 800b39e:	bf00      	nop
 800b3a0:	e000      	b.n	800b3a4 <WiFi_Conn_ND+0x19b0>
						break;
 800b3a2:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop

0800b3b4 <httpPOST>:

char deviceId[]={',','"','d','e','v','I','d','"',':','\0'};


httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b3b4:	b5b0      	push	{r4, r5, r7, lr}
 800b3b6:	b0a8      	sub	sp, #160	; 0xa0
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b3c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b3d2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3d6:	f7f4 ff0d 	bl	80001f4 <strlen>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	461a      	mov	r2, r3
 800b3de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3e2:	4413      	add	r3, r2
 800b3e4:	4aed      	ldr	r2, [pc, #948]	; (800b79c <httpPOST+0x3e8>)
 800b3e6:	6810      	ldr	r0, [r2, #0]
 800b3e8:	6018      	str	r0, [r3, #0]
 800b3ea:	8892      	ldrh	r2, [r2, #4]
 800b3ec:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7f4 ff00 	bl	80001f4 <strlen>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	68f9      	ldr	r1, [r7, #12]
 800b3fa:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3fe:	f003 f83e 	bl	800e47e <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b402:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b406:	f7f4 fef5 	bl	80001f4 <strlen>
 800b40a:	4603      	mov	r3, r0
 800b40c:	461a      	mov	r2, r3
 800b40e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b412:	4413      	add	r3, r2
 800b414:	49e2      	ldr	r1, [pc, #904]	; (800b7a0 <httpPOST+0x3ec>)
 800b416:	461a      	mov	r2, r3
 800b418:	460b      	mov	r3, r1
 800b41a:	cb03      	ldmia	r3!, {r0, r1}
 800b41c:	6010      	str	r0, [r2, #0]
 800b41e:	6051      	str	r1, [r2, #4]
 800b420:	8819      	ldrh	r1, [r3, #0]
 800b422:	789b      	ldrb	r3, [r3, #2]
 800b424:	8111      	strh	r1, [r2, #8]
 800b426:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b428:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b42c:	f7f4 fee2 	bl	80001f4 <strlen>
 800b430:	4603      	mov	r3, r0
 800b432:	461a      	mov	r2, r3
 800b434:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b438:	4413      	add	r3, r2
 800b43a:	4ada      	ldr	r2, [pc, #872]	; (800b7a4 <httpPOST+0x3f0>)
 800b43c:	8811      	ldrh	r1, [r2, #0]
 800b43e:	7892      	ldrb	r2, [r2, #2]
 800b440:	8019      	strh	r1, [r3, #0]
 800b442:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b444:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b448:	f7f4 fed4 	bl	80001f4 <strlen>
 800b44c:	4603      	mov	r3, r0
 800b44e:	461a      	mov	r2, r3
 800b450:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b454:	4413      	add	r3, r2
 800b456:	4ad4      	ldr	r2, [pc, #848]	; (800b7a8 <httpPOST+0x3f4>)
 800b458:	6810      	ldr	r0, [r2, #0]
 800b45a:	6018      	str	r0, [r3, #0]
 800b45c:	8891      	ldrh	r1, [r2, #4]
 800b45e:	7992      	ldrb	r2, [r2, #6]
 800b460:	8099      	strh	r1, [r3, #4]
 800b462:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b464:	68b8      	ldr	r0, [r7, #8]
 800b466:	f7f4 fec5 	bl	80001f4 <strlen>
 800b46a:	4603      	mov	r3, r0
 800b46c:	461a      	mov	r2, r3
 800b46e:	68b9      	ldr	r1, [r7, #8]
 800b470:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b474:	f003 f803 	bl	800e47e <strncat>
	strncat(post,":",1);
 800b478:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b47c:	f7f4 feba 	bl	80001f4 <strlen>
 800b480:	4603      	mov	r3, r0
 800b482:	461a      	mov	r2, r3
 800b484:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b488:	4413      	add	r3, r2
 800b48a:	49c8      	ldr	r1, [pc, #800]	; (800b7ac <httpPOST+0x3f8>)
 800b48c:	461a      	mov	r2, r3
 800b48e:	460b      	mov	r3, r1
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7f4 fead 	bl	80001f4 <strlen>
 800b49a:	4603      	mov	r3, r0
 800b49c:	461a      	mov	r2, r3
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4a4:	f002 ffeb 	bl	800e47e <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b4a8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4ac:	f7f4 fea2 	bl	80001f4 <strlen>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4b8:	4413      	add	r3, r2
 800b4ba:	4aba      	ldr	r2, [pc, #744]	; (800b7a4 <httpPOST+0x3f0>)
 800b4bc:	8811      	ldrh	r1, [r2, #0]
 800b4be:	7892      	ldrb	r2, [r2, #2]
 800b4c0:	8019      	strh	r1, [r3, #0]
 800b4c2:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b4c4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4c8:	f7f4 fe94 	bl	80001f4 <strlen>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4d4:	4413      	add	r3, r2
 800b4d6:	4ab6      	ldr	r2, [pc, #728]	; (800b7b0 <httpPOST+0x3fc>)
 800b4d8:	461d      	mov	r5, r3
 800b4da:	4614      	mov	r4, r2
 800b4dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4de:	6028      	str	r0, [r5, #0]
 800b4e0:	6069      	str	r1, [r5, #4]
 800b4e2:	60aa      	str	r2, [r5, #8]
 800b4e4:	60eb      	str	r3, [r5, #12]
 800b4e6:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b4e8:	6128      	str	r0, [r5, #16]
 800b4ea:	6169      	str	r1, [r5, #20]
 800b4ec:	61aa      	str	r2, [r5, #24]
 800b4ee:	8823      	ldrh	r3, [r4, #0]
 800b4f0:	78a2      	ldrb	r2, [r4, #2]
 800b4f2:	83ab      	strh	r3, [r5, #28]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b4f8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4fc:	f7f4 fe7a 	bl	80001f4 <strlen>
 800b500:	4603      	mov	r3, r0
 800b502:	461a      	mov	r2, r3
 800b504:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b508:	4413      	add	r3, r2
 800b50a:	4aa6      	ldr	r2, [pc, #664]	; (800b7a4 <httpPOST+0x3f0>)
 800b50c:	8811      	ldrh	r1, [r2, #0]
 800b50e:	7892      	ldrb	r2, [r2, #2]
 800b510:	8019      	strh	r1, [r3, #0]
 800b512:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b514:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b518:	f7f4 fe6c 	bl	80001f4 <strlen>
 800b51c:	4603      	mov	r3, r0
 800b51e:	461a      	mov	r2, r3
 800b520:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b524:	4413      	add	r3, r2
 800b526:	4aa3      	ldr	r2, [pc, #652]	; (800b7b4 <httpPOST+0x400>)
 800b528:	461c      	mov	r4, r3
 800b52a:	4615      	mov	r5, r2
 800b52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b52e:	6020      	str	r0, [r4, #0]
 800b530:	6061      	str	r1, [r4, #4]
 800b532:	60a2      	str	r2, [r4, #8]
 800b534:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b536:	2300      	movs	r3, #0
 800b538:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800b53c:	887b      	ldrh	r3, [r7, #2]
 800b53e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b542:	4611      	mov	r1, r2
 800b544:	4618      	mov	r0, r3
 800b546:	f002 fd6f 	bl	800e028 <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800b54a:	2300      	movs	r3, #0
 800b54c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800b550:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800b554:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f002 fd64 	bl	800e028 <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800b560:	2300      	movs	r3, #0
 800b562:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800b566:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b56a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b56e:	4611      	mov	r1, r2
 800b570:	4618      	mov	r0, r3
 800b572:	f002 fd59 	bl	800e028 <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800b576:	2300      	movs	r3, #0
 800b578:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800b57c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800b580:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b584:	4611      	mov	r1, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f002 fd4e 	bl	800e028 <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800b592:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800b596:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b59a:	4611      	mov	r1, r2
 800b59c:	4618      	mov	r0, r3
 800b59e:	f002 fd43 	bl	800e028 <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800b5a8:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800b5ac:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f002 fd38 	bl	800e028 <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800b5be:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800b5c2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f002 fd2d 	bl	800e028 <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800b5d4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800b5d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f002 fd22 	bl	800e028 <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800b5ea:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800b5ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f002 fd17 	bl	800e028 <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800b600:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800b604:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b608:	4611      	mov	r1, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f002 fd0c 	bl	800e028 <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800b610:	2300      	movs	r3, #0
 800b612:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800b616:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800b61a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b61e:	4611      	mov	r1, r2
 800b620:	4618      	mov	r0, r3
 800b622:	f002 fd01 	bl	800e028 <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800b626:	2300      	movs	r3, #0
 800b628:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800b62c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800b630:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f002 fcf6 	bl	800e028 <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800b63c:	2300      	movs	r3, #0
 800b63e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800b642:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800b646:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b64a:	4611      	mov	r1, r2
 800b64c:	4618      	mov	r0, r3
 800b64e:	f002 fceb 	bl	800e028 <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800b652:	2300      	movs	r3, #0
 800b654:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800b658:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800b65c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b660:	4611      	mov	r1, r2
 800b662:	4618      	mov	r0, r3
 800b664:	f002 fce0 	bl	800e028 <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800b668:	2300      	movs	r3, #0
 800b66a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800b66e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800b672:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b676:	4611      	mov	r1, r2
 800b678:	4618      	mov	r0, r3
 800b67a:	f002 fcd5 	bl	800e028 <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800b67e:	2300      	movs	r3, #0
 800b680:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800b684:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800b688:	f107 0220 	add.w	r2, r7, #32
 800b68c:	4611      	mov	r1, r2
 800b68e:	4618      	mov	r0, r3
 800b690:	f002 fcca 	bl	800e028 <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800b694:	2300      	movs	r3, #0
 800b696:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b698:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800b69c:	f107 0218 	add.w	r2, r7, #24
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f002 fcc0 	bl	800e028 <INTOA>

	strncat(body,dd1,strlen(dd1));
 800b6a8:	4843      	ldr	r0, [pc, #268]	; (800b7b8 <httpPOST+0x404>)
 800b6aa:	f7f4 fda3 	bl	80001f4 <strlen>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	4941      	ldr	r1, [pc, #260]	; (800b7b8 <httpPOST+0x404>)
 800b6b4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6b8:	f002 fee1 	bl	800e47e <strncat>
	strncat(body,_d1,strlen(_d1));
 800b6bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7f4 fd97 	bl	80001f4 <strlen>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6d2:	f002 fed4 	bl	800e47e <strncat>

	strncat(body,dd2,strlen(dd2));
 800b6d6:	4839      	ldr	r0, [pc, #228]	; (800b7bc <httpPOST+0x408>)
 800b6d8:	f7f4 fd8c 	bl	80001f4 <strlen>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	461a      	mov	r2, r3
 800b6e0:	4936      	ldr	r1, [pc, #216]	; (800b7bc <httpPOST+0x408>)
 800b6e2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6e6:	f002 feca 	bl	800e47e <strncat>
	strncat(body,_d2,strlen(_d2));
 800b6ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7f4 fd80 	bl	80001f4 <strlen>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b700:	f002 febd 	bl	800e47e <strncat>

	strncat(body,dd3,strlen(dd3));
 800b704:	482e      	ldr	r0, [pc, #184]	; (800b7c0 <httpPOST+0x40c>)
 800b706:	f7f4 fd75 	bl	80001f4 <strlen>
 800b70a:	4603      	mov	r3, r0
 800b70c:	461a      	mov	r2, r3
 800b70e:	492c      	ldr	r1, [pc, #176]	; (800b7c0 <httpPOST+0x40c>)
 800b710:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b714:	f002 feb3 	bl	800e47e <strncat>
	strncat(body,_d3,strlen(_d3));
 800b718:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7f4 fd69 	bl	80001f4 <strlen>
 800b722:	4602      	mov	r2, r0
 800b724:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b728:	4619      	mov	r1, r3
 800b72a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b72e:	f002 fea6 	bl	800e47e <strncat>

	strncat(body,dd4,strlen(dd4));
 800b732:	4824      	ldr	r0, [pc, #144]	; (800b7c4 <httpPOST+0x410>)
 800b734:	f7f4 fd5e 	bl	80001f4 <strlen>
 800b738:	4603      	mov	r3, r0
 800b73a:	461a      	mov	r2, r3
 800b73c:	4921      	ldr	r1, [pc, #132]	; (800b7c4 <httpPOST+0x410>)
 800b73e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b742:	f002 fe9c 	bl	800e47e <strncat>
	strncat(body,_d4,strlen(_d4));
 800b746:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7f4 fd52 	bl	80001f4 <strlen>
 800b750:	4602      	mov	r2, r0
 800b752:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b756:	4619      	mov	r1, r3
 800b758:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b75c:	f002 fe8f 	bl	800e47e <strncat>

	strncat(body,dd5,strlen(dd5));
 800b760:	4819      	ldr	r0, [pc, #100]	; (800b7c8 <httpPOST+0x414>)
 800b762:	f7f4 fd47 	bl	80001f4 <strlen>
 800b766:	4603      	mov	r3, r0
 800b768:	461a      	mov	r2, r3
 800b76a:	4917      	ldr	r1, [pc, #92]	; (800b7c8 <httpPOST+0x414>)
 800b76c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b770:	f002 fe85 	bl	800e47e <strncat>
	strncat(body,_d5,strlen(_d5));
 800b774:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b778:	4618      	mov	r0, r3
 800b77a:	f7f4 fd3b 	bl	80001f4 <strlen>
 800b77e:	4602      	mov	r2, r0
 800b780:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b784:	4619      	mov	r1, r3
 800b786:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b78a:	f002 fe78 	bl	800e47e <strncat>

	strncat(body,dd6,strlen(dd6));
 800b78e:	480f      	ldr	r0, [pc, #60]	; (800b7cc <httpPOST+0x418>)
 800b790:	f7f4 fd30 	bl	80001f4 <strlen>
 800b794:	4603      	mov	r3, r0
 800b796:	461a      	mov	r2, r3
 800b798:	e01a      	b.n	800b7d0 <httpPOST+0x41c>
 800b79a:	bf00      	nop
 800b79c:	0800fa98 	.word	0x0800fa98
 800b7a0:	0800faa0 	.word	0x0800faa0
 800b7a4:	0800faac 	.word	0x0800faac
 800b7a8:	0800fab0 	.word	0x0800fab0
 800b7ac:	0800fab8 	.word	0x0800fab8
 800b7b0:	0800fabc 	.word	0x0800fabc
 800b7b4:	0800fadc 	.word	0x0800fadc
 800b7b8:	20000094 	.word	0x20000094
 800b7bc:	2000009c 	.word	0x2000009c
 800b7c0:	200000a4 	.word	0x200000a4
 800b7c4:	200000ac 	.word	0x200000ac
 800b7c8:	200000b4 	.word	0x200000b4
 800b7cc:	200000bc 	.word	0x200000bc
 800b7d0:	49af      	ldr	r1, [pc, #700]	; (800ba90 <httpPOST+0x6dc>)
 800b7d2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7d6:	f002 fe52 	bl	800e47e <strncat>
	strncat(body,_d6,strlen(_d6));
 800b7da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7f4 fd08 	bl	80001f4 <strlen>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7f0:	f002 fe45 	bl	800e47e <strncat>

	strncat(body,dd7,strlen(dd7));
 800b7f4:	48a7      	ldr	r0, [pc, #668]	; (800ba94 <httpPOST+0x6e0>)
 800b7f6:	f7f4 fcfd 	bl	80001f4 <strlen>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	49a5      	ldr	r1, [pc, #660]	; (800ba94 <httpPOST+0x6e0>)
 800b800:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b804:	f002 fe3b 	bl	800e47e <strncat>
	strncat(body,_d7,strlen(_d7));
 800b808:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7f4 fcf1 	bl	80001f4 <strlen>
 800b812:	4602      	mov	r2, r0
 800b814:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b818:	4619      	mov	r1, r3
 800b81a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b81e:	f002 fe2e 	bl	800e47e <strncat>

	strncat(body,dd8,strlen(dd8));
 800b822:	489d      	ldr	r0, [pc, #628]	; (800ba98 <httpPOST+0x6e4>)
 800b824:	f7f4 fce6 	bl	80001f4 <strlen>
 800b828:	4603      	mov	r3, r0
 800b82a:	461a      	mov	r2, r3
 800b82c:	499a      	ldr	r1, [pc, #616]	; (800ba98 <httpPOST+0x6e4>)
 800b82e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b832:	f002 fe24 	bl	800e47e <strncat>
	strncat(body,_d8,strlen(_d8));
 800b836:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7f4 fcda 	bl	80001f4 <strlen>
 800b840:	4602      	mov	r2, r0
 800b842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b846:	4619      	mov	r1, r3
 800b848:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b84c:	f002 fe17 	bl	800e47e <strncat>

	strncat(body,dd9,strlen(dd9));
 800b850:	4892      	ldr	r0, [pc, #584]	; (800ba9c <httpPOST+0x6e8>)
 800b852:	f7f4 fccf 	bl	80001f4 <strlen>
 800b856:	4603      	mov	r3, r0
 800b858:	461a      	mov	r2, r3
 800b85a:	4990      	ldr	r1, [pc, #576]	; (800ba9c <httpPOST+0x6e8>)
 800b85c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b860:	f002 fe0d 	bl	800e47e <strncat>
	strncat(body,_d9,strlen(_d9));
 800b864:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b868:	4618      	mov	r0, r3
 800b86a:	f7f4 fcc3 	bl	80001f4 <strlen>
 800b86e:	4602      	mov	r2, r0
 800b870:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b874:	4619      	mov	r1, r3
 800b876:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b87a:	f002 fe00 	bl	800e47e <strncat>

	strncat(body,dd10,strlen(dd10));
 800b87e:	4888      	ldr	r0, [pc, #544]	; (800baa0 <httpPOST+0x6ec>)
 800b880:	f7f4 fcb8 	bl	80001f4 <strlen>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	4985      	ldr	r1, [pc, #532]	; (800baa0 <httpPOST+0x6ec>)
 800b88a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b88e:	f002 fdf6 	bl	800e47e <strncat>
	strncat(body,_d10,strlen(_d10));
 800b892:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b896:	4618      	mov	r0, r3
 800b898:	f7f4 fcac 	bl	80001f4 <strlen>
 800b89c:	4602      	mov	r2, r0
 800b89e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8a8:	f002 fde9 	bl	800e47e <strncat>

	strncat(body,dd11,strlen(dd11));
 800b8ac:	487d      	ldr	r0, [pc, #500]	; (800baa4 <httpPOST+0x6f0>)
 800b8ae:	f7f4 fca1 	bl	80001f4 <strlen>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	497b      	ldr	r1, [pc, #492]	; (800baa4 <httpPOST+0x6f0>)
 800b8b8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8bc:	f002 fddf 	bl	800e47e <strncat>
	strncat(body,_d11,strlen(_d11));
 800b8c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7f4 fc95 	bl	80001f4 <strlen>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8d6:	f002 fdd2 	bl	800e47e <strncat>

	strncat(body,dd12,strlen(dd12));
 800b8da:	4873      	ldr	r0, [pc, #460]	; (800baa8 <httpPOST+0x6f4>)
 800b8dc:	f7f4 fc8a 	bl	80001f4 <strlen>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	4970      	ldr	r1, [pc, #448]	; (800baa8 <httpPOST+0x6f4>)
 800b8e6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8ea:	f002 fdc8 	bl	800e47e <strncat>
	strncat(body,_d12,strlen(_d12));
 800b8ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7f4 fc7e 	bl	80001f4 <strlen>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8fe:	4619      	mov	r1, r3
 800b900:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b904:	f002 fdbb 	bl	800e47e <strncat>

	strncat(body,dd13,strlen(dd13));
 800b908:	4868      	ldr	r0, [pc, #416]	; (800baac <httpPOST+0x6f8>)
 800b90a:	f7f4 fc73 	bl	80001f4 <strlen>
 800b90e:	4603      	mov	r3, r0
 800b910:	461a      	mov	r2, r3
 800b912:	4966      	ldr	r1, [pc, #408]	; (800baac <httpPOST+0x6f8>)
 800b914:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b918:	f002 fdb1 	bl	800e47e <strncat>
	strncat(body,_d13,strlen(_d13));
 800b91c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b920:	4618      	mov	r0, r3
 800b922:	f7f4 fc67 	bl	80001f4 <strlen>
 800b926:	4602      	mov	r2, r0
 800b928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b92c:	4619      	mov	r1, r3
 800b92e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b932:	f002 fda4 	bl	800e47e <strncat>

	strncat(body,dd14,strlen(dd14));
 800b936:	485e      	ldr	r0, [pc, #376]	; (800bab0 <httpPOST+0x6fc>)
 800b938:	f7f4 fc5c 	bl	80001f4 <strlen>
 800b93c:	4603      	mov	r3, r0
 800b93e:	461a      	mov	r2, r3
 800b940:	495b      	ldr	r1, [pc, #364]	; (800bab0 <httpPOST+0x6fc>)
 800b942:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b946:	f002 fd9a 	bl	800e47e <strncat>
	strncat(body,_d14,strlen(_d14));
 800b94a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b94e:	4618      	mov	r0, r3
 800b950:	f7f4 fc50 	bl	80001f4 <strlen>
 800b954:	4602      	mov	r2, r0
 800b956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b95a:	4619      	mov	r1, r3
 800b95c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b960:	f002 fd8d 	bl	800e47e <strncat>

	strncat(body,dd15,strlen(dd15));
 800b964:	4853      	ldr	r0, [pc, #332]	; (800bab4 <httpPOST+0x700>)
 800b966:	f7f4 fc45 	bl	80001f4 <strlen>
 800b96a:	4603      	mov	r3, r0
 800b96c:	461a      	mov	r2, r3
 800b96e:	4951      	ldr	r1, [pc, #324]	; (800bab4 <httpPOST+0x700>)
 800b970:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b974:	f002 fd83 	bl	800e47e <strncat>
	strncat(body,_d15,strlen(_d15));
 800b978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7f4 fc39 	bl	80001f4 <strlen>
 800b982:	4602      	mov	r2, r0
 800b984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b988:	4619      	mov	r1, r3
 800b98a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b98e:	f002 fd76 	bl	800e47e <strncat>

	strncat(body,dd16,strlen(dd16));
 800b992:	4849      	ldr	r0, [pc, #292]	; (800bab8 <httpPOST+0x704>)
 800b994:	f7f4 fc2e 	bl	80001f4 <strlen>
 800b998:	4603      	mov	r3, r0
 800b99a:	461a      	mov	r2, r3
 800b99c:	4946      	ldr	r1, [pc, #280]	; (800bab8 <httpPOST+0x704>)
 800b99e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9a2:	f002 fd6c 	bl	800e47e <strncat>
	strncat(body,_d16,strlen(_d16));
 800b9a6:	f107 0320 	add.w	r3, r7, #32
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7f4 fc22 	bl	80001f4 <strlen>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	f107 0320 	add.w	r3, r7, #32
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9bc:	f002 fd5f 	bl	800e47e <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800b9c0:	483e      	ldr	r0, [pc, #248]	; (800babc <httpPOST+0x708>)
 800b9c2:	f7f4 fc17 	bl	80001f4 <strlen>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	493c      	ldr	r1, [pc, #240]	; (800babc <httpPOST+0x708>)
 800b9cc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9d0:	f002 fd55 	bl	800e47e <strncat>
	strncat(body,_devId,strlen(_devId));
 800b9d4:	f107 0318 	add.w	r3, r7, #24
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7f4 fc0b 	bl	80001f4 <strlen>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	f107 0318 	add.w	r3, r7, #24
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9ea:	f002 fd48 	bl	800e47e <strncat>

	strncat(body,"}",strlen("}"));
 800b9ee:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9f2:	f7f4 fbff 	bl	80001f4 <strlen>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9fe:	4413      	add	r3, r2
 800ba00:	492f      	ldr	r1, [pc, #188]	; (800bac0 <httpPOST+0x70c>)
 800ba02:	461a      	mov	r2, r3
 800ba04:	460b      	mov	r3, r1
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800ba0a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba0e:	f7f4 fbf1 	bl	80001f4 <strlen>
 800ba12:	4602      	mov	r2, r0
 800ba14:	f107 0310 	add.w	r3, r7, #16
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	f002 fb04 	bl	800e028 <INTOA>
	strncat(post,length,strlen(length));
 800ba20:	f107 0310 	add.w	r3, r7, #16
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f4 fbe5 	bl	80001f4 <strlen>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	f107 0310 	add.w	r3, r7, #16
 800ba30:	4619      	mov	r1, r3
 800ba32:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba36:	f002 fd22 	bl	800e47e <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800ba3a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba3e:	f7f4 fbd9 	bl	80001f4 <strlen>
 800ba42:	4603      	mov	r3, r0
 800ba44:	461a      	mov	r2, r3
 800ba46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba4a:	4413      	add	r3, r2
 800ba4c:	4a1d      	ldr	r2, [pc, #116]	; (800bac4 <httpPOST+0x710>)
 800ba4e:	6810      	ldr	r0, [r2, #0]
 800ba50:	6018      	str	r0, [r3, #0]
 800ba52:	7912      	ldrb	r2, [r2, #4]
 800ba54:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800ba56:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba5a:	f7f4 fbcb 	bl	80001f4 <strlen>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d20d      	bcs.n	800ba84 <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800ba68:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba6c:	f7f4 fbc2 	bl	80001f4 <strlen>
 800ba70:	4603      	mov	r3, r0
 800ba72:	461a      	mov	r2, r3
 800ba74:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800ba78:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba7c:	f002 fcff 	bl	800e47e <strncat>
		return 1 ;
 800ba80:	2301      	movs	r3, #1
 800ba82:	e000      	b.n	800ba86 <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800ba84:	2300      	movs	r3, #0
		}
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	37a0      	adds	r7, #160	; 0xa0
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	200000bc 	.word	0x200000bc
 800ba94:	200000c4 	.word	0x200000c4
 800ba98:	200000cc 	.word	0x200000cc
 800ba9c:	200000d4 	.word	0x200000d4
 800baa0:	200000dc 	.word	0x200000dc
 800baa4:	200000e4 	.word	0x200000e4
 800baa8:	200000ec 	.word	0x200000ec
 800baac:	200000f4 	.word	0x200000f4
 800bab0:	200000fc 	.word	0x200000fc
 800bab4:	20000104 	.word	0x20000104
 800bab8:	2000010c 	.word	0x2000010c
 800babc:	20000114 	.word	0x20000114
 800bac0:	0800faec 	.word	0x0800faec
 800bac4:	0800faf0 	.word	0x0800faf0

0800bac8 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bae2:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2220      	movs	r2, #32
 800baee:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a1c      	ldr	r2, [pc, #112]	; (800bb68 <ModBUS_Config+0xa0>)
 800baf6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2201      	movs	r2, #1
 800bafe:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2220      	movs	r2, #32
 800bb04:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a18      	ldr	r2, [pc, #96]	; (800bb6c <ModBUS_Config+0xa4>)
 800bb0c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2210      	movs	r2, #16
 800bb1a:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2201      	movs	r2, #1
 800bb22:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2210      	movs	r2, #16
 800bb28:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2220      	movs	r2, #32
 800bb36:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2201      	movs	r2, #1
 800bb52:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2220      	movs	r2, #32
 800bb58:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	f0f0af5a 	.word	0xf0f0af5a
 800bb6c:	a5fa0f0f 	.word	0xa5fa0f0f

0800bb70 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	3305      	adds	r3, #5
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	3306      	adds	r3, #6
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d10b      	bne.n	800bba0 <ModBUS_Check+0x30>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	3302      	adds	r3, #2
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	3303      	adds	r3, #3
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	4413      	add	r3, r2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <ModBUS_Check+0x30>
	{
		return(1);
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e000      	b.n	800bba2 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800bba0:	2300      	movs	r3, #0
	}
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b083      	sub	sp, #12
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	7c9b      	ldrb	r3, [r3, #18]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d11d      	bne.n	800bc00 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d116      	bne.n	800bc00 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d10f      	bne.n	800bc00 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d108      	bne.n	800bc00 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d101      	bne.n	800bc00 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e000      	b.n	800bc02 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800bc00:	2300      	movs	r3, #0
	}
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b085      	sub	sp, #20
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bc28:	78fa      	ldrb	r2, [r7, #3]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d901      	bls.n	800bc32 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e013      	b.n	800bc5a <ModBUS_F03_Assign+0x4c>
	}
	else
	{
		m2->_Holding_Registers[(address)+1]=data;
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	3301      	adds	r3, #1
 800bc36:	883a      	ldrh	r2, [r7, #0]
 800bc38:	b2d1      	uxtb	r1, r2
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	460a      	mov	r2, r1
 800bc40:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800bc44:	883b      	ldrh	r3, [r7, #0]
 800bc46:	0a1b      	lsrs	r3, r3, #8
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	4413      	add	r3, r2
 800bc52:	7bfa      	ldrb	r2, [r7, #15]
 800bc54:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800bc58:	2300      	movs	r3, #0
	}
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b085      	sub	sp, #20
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bc80:	78fa      	ldrb	r2, [r7, #3]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d901      	bls.n	800bc8a <ModBUS_F03_Read+0x24>
	{
		return(1);
 800bc86:	2301      	movs	r3, #1
 800bc88:	e015      	b.n	800bcb6 <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(address*2)];
 800bc8a:	78fb      	ldrb	r3, [r7, #3]
 800bc8c:	005b      	lsls	r3, r3, #1
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	4413      	add	r3, r2
 800bc92:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bc96:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800bc98:	89fb      	ldrh	r3, [r7, #14]
 800bc9a:	021b      	lsls	r3, r3, #8
 800bc9c:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address*2)+1];
 800bc9e:	78fb      	ldrb	r3, [r7, #3]
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	3301      	adds	r3, #1
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	4413      	add	r3, r2
 800bca8:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	89fb      	ldrh	r3, [r7, #14]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	81fb      	strh	r3, [r7, #14]
		return(n);
 800bcb4:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr

0800bcc2 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800bcc2:	b480      	push	{r7}
 800bcc4:	b083      	sub	sp, #12
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	460b      	mov	r3, r1
 800bccc:	807b      	strh	r3, [r7, #2]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800bcd2:	887b      	ldrh	r3, [r7, #2]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bf14      	ite	ne
 800bcd8:	2301      	movne	r3, #1
 800bcda:	2300      	moveq	r3, #0
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	461a      	mov	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800bce6:	887b      	ldrh	r3, [r7, #2]
 800bce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcec:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800bcee:	887b      	ldrh	r3, [r7, #2]
 800bcf0:	0a1b      	lsrs	r3, r3, #8
 800bcf2:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800bcf4:	887b      	ldrh	r3, [r7, #2]
 800bcf6:	f003 030f 	and.w	r3, r3, #15
 800bcfa:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2206      	movs	r2, #6
 800bd28:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	781a      	ldrb	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2203      	movs	r2, #3
 800bd3a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800bd3e:	887b      	ldrh	r3, [r7, #2]
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	787a      	ldrb	r2, [r7, #1]
 800bd54:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	220c      	movs	r2, #12
 800bd5c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800bd60:	bf00      	nop
 800bd62:	4618      	mov	r0, r3
 800bd64:	370c      	adds	r7, #12
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
	...

0800bd70 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b09c      	sub	sp, #112	; 0x70
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	791b      	ldrb	r3, [r3, #4]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	f041 813f 	bne.w	800d000 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f103 0212 	add.w	r2, r3, #18
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4610      	mov	r0, r2
 800bd92:	f7ff feed 	bl	800bb70 <ModBUS_Check>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f001 812f 	beq.w	800cffc <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	7e5b      	ldrb	r3, [r3, #25]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	2b0f      	cmp	r3, #15
 800bda6:	f201 80f3 	bhi.w	800cf90 <ModBUS+0x1220>
 800bdaa:	a201      	add	r2, pc, #4	; (adr r2, 800bdb0 <ModBUS+0x40>)
 800bdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb0:	0800bdf1 	.word	0x0800bdf1
 800bdb4:	0800c031 	.word	0x0800c031
 800bdb8:	0800c271 	.word	0x0800c271
 800bdbc:	0800c4a9 	.word	0x0800c4a9
 800bdc0:	0800c6e1 	.word	0x0800c6e1
 800bdc4:	0800c8f7 	.word	0x0800c8f7
 800bdc8:	0800cf91 	.word	0x0800cf91
 800bdcc:	0800cf91 	.word	0x0800cf91
 800bdd0:	0800cf91 	.word	0x0800cf91
 800bdd4:	0800cf91 	.word	0x0800cf91
 800bdd8:	0800cf91 	.word	0x0800cf91
 800bddc:	0800cf91 	.word	0x0800cf91
 800bde0:	0800cf91 	.word	0x0800cf91
 800bde4:	0800cf91 	.word	0x0800cf91
 800bde8:	0800cab3 	.word	0x0800cab3
 800bdec:	0800cd43 	.word	0x0800cd43

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	7d9a      	ldrb	r2, [r3, #22]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	7d5a      	ldrb	r2, [r3, #21]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	7d1a      	ldrb	r2, [r3, #20]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	7cda      	ldrb	r2, [r3, #19]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	7c9a      	ldrb	r2, [r3, #18]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	7a9b      	ldrb	r3, [r3, #10]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	f040 80e6 	bne.w	800bffc <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7e9b      	ldrb	r3, [r3, #26]
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800be42:	021b      	lsls	r3, r3, #8
 800be44:	b29a      	uxth	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800be52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be56:	b29a      	uxth	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	7edb      	ldrb	r3, [r3, #27]
 800be68:	b29b      	uxth	r3, r3
 800be6a:	4313      	orrs	r3, r2
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	7f1b      	ldrb	r3, [r3, #28]
 800be78:	b29a      	uxth	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be86:	021b      	lsls	r3, r3, #8
 800be88:	b29a      	uxth	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7f5b      	ldrb	r3, [r3, #29]
 800beac:	b29b      	uxth	r3, r3
 800beae:	4313      	orrs	r3, r2
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d87e      	bhi.n	800bfc8 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bed0:	461a      	mov	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bed8:	4413      	add	r3, r2
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800bee0:	4293      	cmp	r3, r2
 800bee2:	dc57      	bgt.n	800bf94 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	613b      	str	r3, [r7, #16]
 800bee8:	2300      	movs	r3, #0
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	2300      	movs	r3, #0
 800beee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bef0:	2300      	movs	r3, #0
 800bef2:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800bf04:	40d3      	lsrs	r3, r2
 800bf06:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bf0e:	08db      	lsrs	r3, r3, #3
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bf1a:	f003 0307 	and.w	r3, r3, #7
 800bf1e:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d102      	bne.n	800bf2c <ModBUS+0x1bc>
									{
										bytes=div;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf2a:	e002      	b.n	800bf32 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800bf32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800bf3c:	e00e      	b.n	800bf5c <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bf3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf40:	3308      	adds	r3, #8
 800bf42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf44:	b2d1      	uxtb	r1, r2
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	4413      	add	r3, r2
 800bf4a:	460a      	mov	r2, r1
 800bf4c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800bf50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf52:	0a1b      	lsrs	r3, r3, #8
 800bf54:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800bf56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf58:	3b01      	subs	r3, #1
 800bf5a:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800bf5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	dced      	bgt.n	800bf3e <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bf78:	3303      	adds	r3, #3
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bf88:	1d9a      	adds	r2, r3, #6
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bf90:	f001 b8d4 	b.w	800d13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2202      	movs	r2, #2
 800bf98:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2281      	movs	r2, #129	; 0x81
 800bfa0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2203      	movs	r2, #3
 800bfb0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bfba:	1d9a      	adds	r2, r3, #6
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	f001 b8ba 	b.w	800d13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2203      	movs	r2, #3
 800bfcc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2281      	movs	r2, #129	; 0x81
 800bfd4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2203      	movs	r2, #3
 800bfe4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bfee:	1d9a      	adds	r2, r3, #6
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800bff6:	2303      	movs	r3, #3
 800bff8:	f001 b8a0 	b.w	800d13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2281      	movs	r2, #129	; 0x81
 800c008:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2203      	movs	r2, #3
 800c018:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c022:	1d9a      	adds	r2, r3, #6
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c02a:	2301      	movs	r3, #1
 800c02c:	f001 b886 	b.w	800d13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	7d9a      	ldrb	r2, [r3, #22]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	7d5a      	ldrb	r2, [r3, #21]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7d1a      	ldrb	r2, [r3, #20]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	7cda      	ldrb	r2, [r3, #19]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	7c9a      	ldrb	r2, [r3, #18]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c062:	2300      	movs	r3, #0
 800c064:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	7adb      	ldrb	r3, [r3, #11]
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	f040 80e6 	bne.w	800c23c <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7e9b      	ldrb	r3, [r3, #26]
 800c074:	b29a      	uxth	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c082:	021b      	lsls	r3, r3, #8
 800c084:	b29a      	uxth	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7edb      	ldrb	r3, [r3, #27]
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7f1b      	ldrb	r3, [r3, #28]
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c0c6:	021b      	lsls	r3, r3, #8
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c0d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	7f5b      	ldrb	r3, [r3, #29]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800c104:	b29b      	uxth	r3, r3
 800c106:	429a      	cmp	r2, r3
 800c108:	d87e      	bhi.n	800c208 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c110:	461a      	mov	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c118:	4413      	add	r3, r2
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800c120:	4293      	cmp	r3, r2
 800c122:	dc57      	bgt.n	800c1d4 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c124:	2300      	movs	r3, #0
 800c126:	623b      	str	r3, [r7, #32]
 800c128:	2300      	movs	r3, #0
 800c12a:	61fb      	str	r3, [r7, #28]
 800c12c:	2300      	movs	r3, #0
 800c12e:	667b      	str	r3, [r7, #100]	; 0x64
 800c130:	2300      	movs	r3, #0
 800c132:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800c134:	2300      	movs	r3, #0
 800c136:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800c144:	40d3      	lsrs	r3, r2
 800c146:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c14e:	08db      	lsrs	r3, r3, #3
 800c150:	b29b      	uxth	r3, r3
 800c152:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c15a:	f003 0307 	and.w	r3, r3, #7
 800c15e:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d102      	bne.n	800c16c <ModBUS+0x3fc>
									{
										bytes=div;
 800c166:	6a3b      	ldr	r3, [r7, #32]
 800c168:	667b      	str	r3, [r7, #100]	; 0x64
 800c16a:	e002      	b.n	800c172 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	3301      	adds	r3, #1
 800c170:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800c172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c174:	b2da      	uxtb	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c17c:	e00e      	b.n	800c19c <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c17e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c180:	3308      	adds	r3, #8
 800c182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c184:	b2d1      	uxtb	r1, r2
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	4413      	add	r3, r2
 800c18a:	460a      	mov	r2, r1
 800c18c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c192:	0a1b      	lsrs	r3, r3, #8
 800c194:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800c196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c198:	3b01      	subs	r3, #1
 800c19a:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800c19c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	dced      	bgt.n	800c17e <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c1b8:	3303      	adds	r3, #3
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c1c8:	1d9a      	adds	r2, r3, #6
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c1d0:	f000 bfb4 	b.w	800d13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2282      	movs	r2, #130	; 0x82
 800c1e0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2203      	movs	r2, #3
 800c1f0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c1fa:	1d9a      	adds	r2, r3, #6
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c202:	2302      	movs	r3, #2
 800c204:	f000 bf9a 	b.w	800d13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2203      	movs	r2, #3
 800c20c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2282      	movs	r2, #130	; 0x82
 800c214:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2203      	movs	r2, #3
 800c224:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c22e:	1d9a      	adds	r2, r3, #6
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c236:	2303      	movs	r3, #3
 800c238:	f000 bf80 	b.w	800d13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2282      	movs	r2, #130	; 0x82
 800c248:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2203      	movs	r2, #3
 800c258:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c262:	1d9a      	adds	r2, r3, #6
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c26a:	2301      	movs	r3, #1
 800c26c:	f000 bf66 	b.w	800d13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	7d9a      	ldrb	r2, [r3, #22]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	7d5a      	ldrb	r2, [r3, #21]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	7d1a      	ldrb	r2, [r3, #20]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	7cda      	ldrb	r2, [r3, #19]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	7c9a      	ldrb	r2, [r3, #18]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	7b1b      	ldrb	r3, [r3, #12]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	f040 80e2 	bne.w	800c474 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7e9b      	ldrb	r3, [r3, #26]
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c2c2:	021b      	lsls	r3, r3, #8
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c2d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	7edb      	ldrb	r3, [r3, #27]
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	7f1b      	ldrb	r3, [r3, #28]
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c306:	021b      	lsls	r3, r3, #8
 800c308:	b29a      	uxth	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	7f5b      	ldrb	r3, [r3, #29]
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	4313      	orrs	r3, r2
 800c330:	b29a      	uxth	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c344:	b29b      	uxth	r3, r3
 800c346:	429a      	cmp	r2, r3
 800c348:	d87a      	bhi.n	800c440 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c350:	461a      	mov	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c358:	4413      	add	r3, r2
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800c360:	4293      	cmp	r3, r2
 800c362:	dc53      	bgt.n	800c40c <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c364:	e029      	b.n	800c3ba <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c36c:	461a      	mov	r2, r3
 800c36e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c370:	4413      	add	r3, r2
 800c372:	005a      	lsls	r2, r3, #1
 800c374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	3309      	adds	r3, #9
 800c37a:	6879      	ldr	r1, [r7, #4]
 800c37c:	440a      	add	r2, r1
 800c37e:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	4413      	add	r3, r2
 800c386:	460a      	mov	r2, r1
 800c388:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c392:	461a      	mov	r2, r3
 800c394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c396:	4413      	add	r3, r2
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	1c5a      	adds	r2, r3, #1
 800c39c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c39e:	3305      	adds	r3, #5
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	6879      	ldr	r1, [r7, #4]
 800c3a4:	440a      	add	r2, r1
 800c3a6:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	460a      	mov	r2, r1
 800c3b0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c3b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	dbce      	blt.n	800c366 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	b2da      	uxtb	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2203      	movs	r2, #3
 800c3de:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c3f0:	3303      	adds	r3, #3
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c400:	1d9a      	adds	r2, r3, #6
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c408:	f000 be98 	b.w	800d13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2202      	movs	r2, #2
 800c410:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2283      	movs	r2, #131	; 0x83
 800c418:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2203      	movs	r2, #3
 800c428:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c432:	1d9a      	adds	r2, r3, #6
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c43a:	2302      	movs	r3, #2
 800c43c:	f000 be7e 	b.w	800d13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2203      	movs	r2, #3
 800c444:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2283      	movs	r2, #131	; 0x83
 800c44c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2203      	movs	r2, #3
 800c45c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c466:	1d9a      	adds	r2, r3, #6
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c46e:	2303      	movs	r3, #3
 800c470:	f000 be64 	b.w	800d13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2283      	movs	r2, #131	; 0x83
 800c480:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2203      	movs	r2, #3
 800c490:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c49a:	1d9a      	adds	r2, r3, #6
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	f000 be4a 	b.w	800d13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	7d9a      	ldrb	r2, [r3, #22]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	7d5a      	ldrb	r2, [r3, #21]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	7d1a      	ldrb	r2, [r3, #20]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	7cda      	ldrb	r2, [r3, #19]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	7c9a      	ldrb	r2, [r3, #18]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	7b5b      	ldrb	r3, [r3, #13]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	f040 80e2 	bne.w	800c6ac <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	7e9b      	ldrb	r3, [r3, #26]
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c4fa:	021b      	lsls	r3, r3, #8
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c50a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c50e:	b29a      	uxth	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	7edb      	ldrb	r3, [r3, #27]
 800c520:	b29b      	uxth	r3, r3
 800c522:	4313      	orrs	r3, r2
 800c524:	b29a      	uxth	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	7f1b      	ldrb	r3, [r3, #28]
 800c530:	b29a      	uxth	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c53e:	021b      	lsls	r3, r3, #8
 800c540:	b29a      	uxth	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c54e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c552:	b29a      	uxth	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	7f5b      	ldrb	r3, [r3, #29]
 800c564:	b29b      	uxth	r3, r3
 800c566:	4313      	orrs	r3, r2
 800c568:	b29a      	uxth	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	429a      	cmp	r2, r3
 800c580:	d87a      	bhi.n	800c678 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c588:	461a      	mov	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c590:	4413      	add	r3, r2
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800c598:	4293      	cmp	r3, r2
 800c59a:	dc53      	bgt.n	800c644 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c59c:	e029      	b.n	800c5f2 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5a8:	4413      	add	r3, r2
 800c5aa:	005a      	lsls	r2, r3, #1
 800c5ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5ae:	005b      	lsls	r3, r3, #1
 800c5b0:	3309      	adds	r3, #9
 800c5b2:	6879      	ldr	r1, [r7, #4]
 800c5b4:	440a      	add	r2, r1
 800c5b6:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	4413      	add	r3, r2
 800c5be:	460a      	mov	r2, r1
 800c5c0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5ce:	4413      	add	r3, r2
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	1c5a      	adds	r2, r3, #1
 800c5d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5d6:	3305      	adds	r3, #5
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	6879      	ldr	r1, [r7, #4]
 800c5dc:	440a      	add	r2, r1
 800c5de:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	460a      	mov	r2, r1
 800c5e8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c5ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	dbce      	blt.n	800c59e <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c606:	b2db      	uxtb	r3, r3
 800c608:	005b      	lsls	r3, r3, #1
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2204      	movs	r2, #4
 800c616:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c628:	3303      	adds	r3, #3
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c638:	1d9a      	adds	r2, r3, #6
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c640:	f000 bd7c 	b.w	800d13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2202      	movs	r2, #2
 800c648:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2284      	movs	r2, #132	; 0x84
 800c650:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2203      	movs	r2, #3
 800c660:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c66a:	1d9a      	adds	r2, r3, #6
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c672:	2302      	movs	r3, #2
 800c674:	f000 bd62 	b.w	800d13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2203      	movs	r2, #3
 800c67c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2284      	movs	r2, #132	; 0x84
 800c684:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2203      	movs	r2, #3
 800c694:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c69e:	1d9a      	adds	r2, r3, #6
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	f000 bd48 	b.w	800d13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2284      	movs	r2, #132	; 0x84
 800c6b8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2203      	movs	r2, #3
 800c6c8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c6d2:	1d9a      	adds	r2, r3, #6
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c6da:	2301      	movs	r3, #1
 800c6dc:	f000 bd2e 	b.w	800d13c <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	7d9a      	ldrb	r2, [r3, #22]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	7d5a      	ldrb	r2, [r3, #21]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	7d1a      	ldrb	r2, [r3, #20]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	7cda      	ldrb	r2, [r3, #19]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7c9a      	ldrb	r2, [r3, #18]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800c712:	2300      	movs	r3, #0
 800c714:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7b9b      	ldrb	r3, [r3, #14]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	f040 80d1 	bne.w	800c8c2 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	7e9b      	ldrb	r3, [r3, #26]
 800c724:	b29a      	uxth	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c732:	021b      	lsls	r3, r3, #8
 800c734:	b29a      	uxth	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c746:	b29a      	uxth	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	7edb      	ldrb	r3, [r3, #27]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	4313      	orrs	r3, r2
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	7f1b      	ldrb	r3, [r3, #28]
 800c768:	b29a      	uxth	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c776:	021b      	lsls	r3, r3, #8
 800c778:	b29a      	uxth	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7f5b      	ldrb	r3, [r3, #29]
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	dd69      	ble.n	800c88e <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d005      	beq.n	800c7d0 <ModBUS+0xa60>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7ca:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c7ce:	d144      	bne.n	800c85a <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7d6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c7da:	d10d      	bne.n	800c7f8 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	408a      	lsls	r2, r1
 800c7ee:	431a      	orrs	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800c7f6:	e003      	b.n	800c800 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	7f5a      	ldrb	r2, [r3, #29]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	7f1a      	ldrb	r2, [r3, #28]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	7eda      	ldrb	r2, [r3, #27]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	7e9a      	ldrb	r2, [r3, #26]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2205      	movs	r2, #5
 800c82c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c83e:	3306      	adds	r3, #6
 800c840:	b2da      	uxtb	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c84e:	1d9a      	adds	r2, r3, #6
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c856:	f000 bc71 	b.w	800d13c <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2202      	movs	r2, #2
 800c85e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2285      	movs	r2, #133	; 0x85
 800c866:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2203      	movs	r2, #3
 800c876:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c880:	1d9a      	adds	r2, r3, #6
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800c888:	2302      	movs	r3, #2
 800c88a:	f000 bc57 	b.w	800d13c <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2203      	movs	r2, #3
 800c892:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2285      	movs	r2, #133	; 0x85
 800c89a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2203      	movs	r2, #3
 800c8aa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c8b4:	1d9a      	adds	r2, r3, #6
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800c8bc:	2303      	movs	r3, #3
 800c8be:	f000 bc3d 	b.w	800d13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2285      	movs	r2, #133	; 0x85
 800c8ce:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2203      	movs	r2, #3
 800c8de:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c8e8:	1d9a      	adds	r2, r3, #6
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	f000 bc23 	b.w	800d13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	7d9a      	ldrb	r2, [r3, #22]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	7d5a      	ldrb	r2, [r3, #21]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	7d1a      	ldrb	r2, [r3, #20]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7cda      	ldrb	r2, [r3, #19]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	7c9a      	ldrb	r2, [r3, #18]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800c928:	2300      	movs	r3, #0
 800c92a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c92c:	2300      	movs	r3, #0
 800c92e:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	7bdb      	ldrb	r3, [r3, #15]
 800c934:	2b01      	cmp	r3, #1
 800c936:	f040 80a3 	bne.w	800ca80 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	7e9b      	ldrb	r3, [r3, #26]
 800c93e:	b29a      	uxth	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c94c:	021b      	lsls	r3, r3, #8
 800c94e:	b29a      	uxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c95c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c960:	b29a      	uxth	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7edb      	ldrb	r3, [r3, #27]
 800c972:	b29b      	uxth	r3, r3
 800c974:	4313      	orrs	r3, r2
 800c976:	b29a      	uxth	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c984:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	7f1b      	ldrb	r3, [r3, #28]
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c998:	021b      	lsls	r3, r3, #8
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c9a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	7f5b      	ldrb	r3, [r3, #29]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d838      	bhi.n	800ca4e <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c9dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	7f11      	ldrb	r1, [r2, #28]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	460a      	mov	r2, r1
 800c9e8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c9ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	7f51      	ldrb	r1, [r2, #29]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	460a      	mov	r2, r1
 800c9fa:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	7f5a      	ldrb	r2, [r3, #29]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7f1a      	ldrb	r2, [r3, #28]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	7eda      	ldrb	r2, [r3, #27]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	7e9a      	ldrb	r2, [r3, #26]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2206      	movs	r2, #6
 800ca2a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2206      	movs	r2, #6
 800ca3a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca44:	1d9a      	adds	r2, r3, #6
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ca4c:	e376      	b.n	800d13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2202      	movs	r2, #2
 800ca52:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2286      	movs	r2, #134	; 0x86
 800ca5a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2203      	movs	r2, #3
 800ca6a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca74:	1d9a      	adds	r2, r3, #6
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	e35d      	b.n	800d13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2286      	movs	r2, #134	; 0x86
 800ca8c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2203      	movs	r2, #3
 800ca9c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800caa6:	1d9a      	adds	r2, r3, #6
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800caae:	2301      	movs	r3, #1
 800cab0:	e344      	b.n	800d13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	7d9a      	ldrb	r2, [r3, #22]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7d5a      	ldrb	r2, [r3, #21]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	7d1a      	ldrb	r2, [r3, #20]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7cda      	ldrb	r2, [r3, #19]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	7c9a      	ldrb	r2, [r3, #18]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	7c1b      	ldrb	r3, [r3, #16]
 800caec:	2b01      	cmp	r3, #1
 800caee:	f040 810f 	bne.w	800cd10 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	7e9b      	ldrb	r3, [r3, #26]
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb04:	021b      	lsls	r3, r3, #8
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	7edb      	ldrb	r3, [r3, #27]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	7f1b      	ldrb	r3, [r3, #28]
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb48:	021b      	lsls	r3, r3, #8
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	7f5b      	ldrb	r3, [r3, #29]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	4313      	orrs	r3, r2
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	f200 80a8 	bhi.w	800ccde <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb94:	461a      	mov	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb9c:	4413      	add	r3, r2
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800cba4:	4293      	cmp	r3, r2
 800cba6:	f300 8081 	bgt.w	800ccac <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	657b      	str	r3, [r7, #84]	; 0x54
 800cbae:	2300      	movs	r3, #0
 800cbb0:	653b      	str	r3, [r7, #80]	; 0x50
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	7f9b      	ldrb	r3, [r3, #30]
 800cbbe:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800cbc0:	e00e      	b.n	800cbe0 <ModBUS+0xe70>
									{
										data=data<<8;
 800cbc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbc4:	021b      	lsls	r3, r3, #8
 800cbc6:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800cbc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbca:	330c      	adds	r3, #12
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	4413      	add	r3, r2
 800cbd0:	7c9b      	ldrb	r3, [r3, #18]
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800cbda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800cbe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1ed      	bne.n	800cbc2 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cbec:	461a      	mov	r2, r3
 800cbee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf0:	4093      	lsls	r3, r2
 800cbf2:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cbf4:	e00f      	b.n	800cc16 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc00:	4413      	add	r3, r2
 800cc02:	2201      	movs	r2, #1
 800cc04:	fa02 f303 	lsl.w	r3, r2, r3
 800cc08:	461a      	mov	r2, r3
 800cc0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800cc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc12:	3301      	adds	r3, #1
 800cc14:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d3e8      	bcc.n	800cbf6 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800cc24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc26:	43db      	mvns	r3, r3
 800cc28:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cc30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc32:	401a      	ands	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800cc3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc3c:	43db      	mvns	r3, r3
 800cc3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc40:	4013      	ands	r3, r2
 800cc42:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cc4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc4c:	431a      	orrs	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7f5a      	ldrb	r2, [r3, #29]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	7f1a      	ldrb	r2, [r3, #28]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	7eda      	ldrb	r2, [r3, #27]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	7e9a      	ldrb	r2, [r3, #26]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	220f      	movs	r2, #15
 800cc80:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cc92:	3306      	adds	r3, #6
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cca2:	1d9a      	adds	r2, r3, #6
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ccaa:	e247      	b.n	800d13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2202      	movs	r2, #2
 800ccb0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	228f      	movs	r2, #143	; 0x8f
 800ccb8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2203      	movs	r2, #3
 800ccc8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccd2:	1d9a      	adds	r2, r3, #6
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ccda:	2302      	movs	r3, #2
 800ccdc:	e22e      	b.n	800d13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2203      	movs	r2, #3
 800cce2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	228f      	movs	r2, #143	; 0x8f
 800ccea:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2203      	movs	r2, #3
 800ccfa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd04:	1d9a      	adds	r2, r3, #6
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e215      	b.n	800d13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	228f      	movs	r2, #143	; 0x8f
 800cd1c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd36:	1d9a      	adds	r2, r3, #6
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e1fc      	b.n	800d13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	7d9a      	ldrb	r2, [r3, #22]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	7d5a      	ldrb	r2, [r3, #21]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	7d1a      	ldrb	r2, [r3, #20]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7cda      	ldrb	r2, [r3, #19]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7c9a      	ldrb	r2, [r3, #18]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800cd74:	2300      	movs	r3, #0
 800cd76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	7c5b      	ldrb	r3, [r3, #17]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	f040 80eb 	bne.w	800cf5e <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	7e9b      	ldrb	r3, [r3, #26]
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cd9a:	021b      	lsls	r3, r3, #8
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cdaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	7edb      	ldrb	r3, [r3, #27]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	7f1b      	ldrb	r3, [r3, #28]
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cde8:	021b      	lsls	r3, r3, #8
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cdf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	7f5b      	ldrb	r3, [r3, #29]
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	4313      	orrs	r3, r2
 800ce12:	b29a      	uxth	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d87f      	bhi.n	800cf2c <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ce32:	461a      	mov	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ce3a:	4413      	add	r3, r2
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800ce42:	4293      	cmp	r3, r2
 800ce44:	dc59      	bgt.n	800cefa <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800ce46:	e029      	b.n	800ce9c <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ce48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce4c:	f103 020d 	add.w	r2, r3, #13
 800ce50:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ce52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce56:	440b      	add	r3, r1
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	440a      	add	r2, r1
 800ce5c:	7c91      	ldrb	r1, [r2, #18]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	4413      	add	r3, r2
 800ce62:	460a      	mov	r2, r1
 800ce64:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800ce68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ce72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce76:	f103 020d 	add.w	r2, r3, #13
 800ce7a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ce7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce80:	440b      	add	r3, r1
 800ce82:	6879      	ldr	r1, [r7, #4]
 800ce84:	440a      	add	r2, r1
 800ce86:	7c91      	ldrb	r1, [r2, #18]
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	460a      	mov	r2, r1
 800ce8e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800ce92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce96:	3301      	adds	r3, #1
 800ce98:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	7f9b      	ldrb	r3, [r3, #30]
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d3ce      	bcc.n	800ce48 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	7f5a      	ldrb	r2, [r3, #29]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	7f1a      	ldrb	r2, [r3, #28]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	7eda      	ldrb	r2, [r3, #27]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7e9a      	ldrb	r2, [r3, #26]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2210      	movs	r2, #16
 800ced6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2206      	movs	r2, #6
 800cee6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cef0:	1d9a      	adds	r2, r3, #6
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cef8:	e120      	b.n	800d13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2202      	movs	r2, #2
 800cefe:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2290      	movs	r2, #144	; 0x90
 800cf06:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2203      	movs	r2, #3
 800cf16:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf20:	1d9a      	adds	r2, r3, #6
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cf28:	2302      	movs	r3, #2
 800cf2a:	e107      	b.n	800d13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2203      	movs	r2, #3
 800cf30:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2290      	movs	r2, #144	; 0x90
 800cf38:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2203      	movs	r2, #3
 800cf48:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf52:	1d9a      	adds	r2, r3, #6
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	e0ee      	b.n	800d13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2290      	movs	r2, #144	; 0x90
 800cf6a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2203      	movs	r2, #3
 800cf7a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf84:	1d9a      	adds	r2, r3, #6
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e0d5      	b.n	800d13c <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	7e5b      	ldrb	r3, [r3, #25]
 800cf9c:	3b80      	subs	r3, #128	; 0x80
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	7e1a      	ldrb	r2, [r3, #24]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2203      	movs	r2, #3
 800cfb4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	7d9a      	ldrb	r2, [r3, #22]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	7d5a      	ldrb	r2, [r3, #21]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	7d1a      	ldrb	r2, [r3, #20]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	7cda      	ldrb	r2, [r3, #19]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	7c9a      	ldrb	r2, [r3, #18]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cff0:	1d9a      	adds	r2, r3, #6
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800cff8:	2301      	movs	r3, #1
 800cffa:	e09f      	b.n	800d13c <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800cffc:	2301      	movs	r3, #1
 800cffe:	e09d      	b.n	800d13c <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	791b      	ldrb	r3, [r3, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	f040 8099 	bne.w	800d13c <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f103 0212 	add.w	r2, r3, #18
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d016:	4619      	mov	r1, r3
 800d018:	4610      	mov	r0, r2
 800d01a:	f7fe fda9 	bl	800bb70 <ModBUS_Check>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	f000 808b 	beq.w	800d13c <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7fe fdc1 	bl	800bbae <ModBUS_Check_tid>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d04f      	beq.n	800d0d2 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	7e5b      	ldrb	r3, [r3, #25]
 800d036:	2b03      	cmp	r3, #3
 800d038:	d143      	bne.n	800d0c2 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800d03e:	2300      	movs	r3, #0
 800d040:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d04a:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d04c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d04e:	021b      	lsls	r3, r3, #8
 800d050:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800d058:	b29a      	uxth	r2, r3
 800d05a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d05c:	4313      	orrs	r3, r2
 800d05e:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800d066:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d06a:	2300      	movs	r3, #0
 800d06c:	643b      	str	r3, [r7, #64]	; 0x40
 800d06e:	e022      	b.n	800d0b6 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	f103 0209 	add.w	r2, r3, #9
 800d078:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07c:	440b      	add	r3, r1
 800d07e:	005b      	lsls	r3, r3, #1
 800d080:	6879      	ldr	r1, [r7, #4]
 800d082:	440a      	add	r2, r1
 800d084:	7c91      	ldrb	r1, [r2, #18]
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	4413      	add	r3, r2
 800d08a:	460a      	mov	r2, r1
 800d08c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800d090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d092:	3305      	adds	r3, #5
 800d094:	005a      	lsls	r2, r3, #1
 800d096:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d09a:	440b      	add	r3, r1
 800d09c:	005b      	lsls	r3, r3, #1
 800d09e:	3301      	adds	r3, #1
 800d0a0:	6879      	ldr	r1, [r7, #4]
 800d0a2:	440a      	add	r2, r1
 800d0a4:	7c91      	ldrb	r1, [r2, #18]
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	460a      	mov	r2, r1
 800d0ac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800d0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	643b      	str	r3, [r7, #64]	; 0x40
 800d0b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d0ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	dbd7      	blt.n	800d070 <ModBUS+0x1300>

						}


					}
					break;
 800d0c0:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	7ddb      	ldrb	r3, [r3, #23]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	7e9b      	ldrb	r3, [r3, #26]
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0d0:	e034      	b.n	800d13c <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	7e5b      	ldrb	r3, [r3, #25]
 800d0d6:	3b81      	subs	r3, #129	; 0x81
 800d0d8:	2b15      	cmp	r3, #21
 800d0da:	d82f      	bhi.n	800d13c <ModBUS+0x13cc>
 800d0dc:	a201      	add	r2, pc, #4	; (adr r2, 800d0e4 <ModBUS+0x1374>)
 800d0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e2:	bf00      	nop
 800d0e4:	0800d13d 	.word	0x0800d13d
 800d0e8:	0800d13d 	.word	0x0800d13d
 800d0ec:	0800d13d 	.word	0x0800d13d
 800d0f0:	0800d13d 	.word	0x0800d13d
 800d0f4:	0800d13d 	.word	0x0800d13d
 800d0f8:	0800d13d 	.word	0x0800d13d
 800d0fc:	0800d13d 	.word	0x0800d13d
 800d100:	0800d13d 	.word	0x0800d13d
 800d104:	0800d13d 	.word	0x0800d13d
 800d108:	0800d13d 	.word	0x0800d13d
 800d10c:	0800d13d 	.word	0x0800d13d
 800d110:	0800d13d 	.word	0x0800d13d
 800d114:	0800d13d 	.word	0x0800d13d
 800d118:	0800d13d 	.word	0x0800d13d
 800d11c:	0800d13d 	.word	0x0800d13d
 800d120:	0800d13d 	.word	0x0800d13d
 800d124:	0800d13d 	.word	0x0800d13d
 800d128:	0800d13d 	.word	0x0800d13d
 800d12c:	0800d13d 	.word	0x0800d13d
 800d130:	0800d13d 	.word	0x0800d13d
 800d134:	0800d13d 	.word	0x0800d13d
 800d138:	0800d13d 	.word	0x0800d13d
			}
		}
	}


}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3770      	adds	r7, #112	; 0x70
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af02      	add	r7, sp, #8
 800d14a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6858      	ldr	r0, [r3, #4]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	891b      	ldrh	r3, [r3, #8]
 800d154:	2200      	movs	r2, #0
 800d156:	4619      	mov	r1, r3
 800d158:	f7f5 ff40 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6818      	ldr	r0, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f103 0114 	add.w	r1, r3, #20
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f103 0218 	add.w	r2, r3, #24
 800d16c:	2364      	movs	r3, #100	; 0x64
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	2304      	movs	r3, #4
 800d172:	f7f6 fc48 	bl	8003a06 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6858      	ldr	r0, [r3, #4]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	891b      	ldrh	r3, [r3, #8]
 800d17e:	2201      	movs	r2, #1
 800d180:	4619      	mov	r1, r3
 800d182:	f7f5 ff2b 	bl	8002fdc <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	7edb      	ldrb	r3, [r3, #27]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b086      	sub	sp, #24
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
 800d19a:	4608      	mov	r0, r1
 800d19c:	4611      	mov	r1, r2
 800d19e:	461a      	mov	r2, r3
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	70fb      	strb	r3, [r7, #3]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	70bb      	strb	r3, [r7, #2]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	787a      	ldrb	r2, [r7, #1]
 800d1b4:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	78fa      	ldrb	r2, [r7, #3]
 800d1ba:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	78ba      	ldrb	r2, [r7, #2]
 800d1c0:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800d1c8:	787b      	ldrb	r3, [r7, #1]
 800d1ca:	2bf0      	cmp	r3, #240	; 0xf0
 800d1cc:	d11d      	bne.n	800d20a <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	613b      	str	r3, [r7, #16]
 800d1d2:	e013      	b.n	800d1fc <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	6a3a      	ldr	r2, [r7, #32]
 800d1d8:	4413      	add	r3, r2
 800d1da:	781a      	ldrb	r2, [r3, #0]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff ffaf 	bl	800d144 <SPI_ETH>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	7d9b      	ldrb	r3, [r3, #22]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	613b      	str	r3, [r7, #16]
 800d1fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	429a      	cmp	r2, r3
 800d204:	dbe6      	blt.n	800d1d4 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800d206:	8afb      	ldrh	r3, [r7, #22]
 800d208:	e037      	b.n	800d27a <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800d20a:	787b      	ldrb	r3, [r7, #1]
 800d20c:	2b0f      	cmp	r3, #15
 800d20e:	d134      	bne.n	800d27a <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800d216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d120      	bne.n	800d260 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800d21e:	2300      	movs	r3, #0
 800d220:	60fb      	str	r3, [r7, #12]
 800d222:	e016      	b.n	800d252 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f7ff ff8d 	bl	800d144 <SPI_ETH>
 800d22a:	4603      	mov	r3, r0
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	8afb      	ldrh	r3, [r7, #22]
 800d230:	4313      	orrs	r3, r2
 800d232:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7d9b      	ldrb	r3, [r3, #22]
 800d238:	3301      	adds	r3, #1
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <SPI_ETH_REG+0xba>
 800d246:	8afb      	ldrh	r3, [r7, #22]
 800d248:	021b      	lsls	r3, r3, #8
 800d24a:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	3301      	adds	r3, #1
 800d250:	60fb      	str	r3, [r7, #12]
 800d252:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d256:	68fa      	ldr	r2, [r7, #12]
 800d258:	429a      	cmp	r2, r3
 800d25a:	dbe3      	blt.n	800d224 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800d25c:	8afb      	ldrh	r3, [r7, #22]
 800d25e:	e00c      	b.n	800d27a <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff ff6f 	bl	800d144 <SPI_ETH>
 800d266:	4603      	mov	r3, r0
 800d268:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7d9b      	ldrb	r3, [r3, #22]
 800d26e:	3301      	adds	r3, #1
 800d270:	b2da      	uxtb	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	759a      	strb	r2, [r3, #22]
			return(res);
 800d276:	8afb      	ldrh	r3, [r7, #22]
 800d278:	e7ff      	b.n	800d27a <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b086      	sub	sp, #24
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	460b      	mov	r3, r1
 800d28c:	807b      	strh	r3, [r7, #2]
 800d28e:	4613      	mov	r3, r2
 800d290:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800d292:	2300      	movs	r3, #0
 800d294:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	22f0      	movs	r2, #240	; 0xf0
 800d29a:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800d29c:	883b      	ldrh	r3, [r7, #0]
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800d2a2:	883b      	ldrh	r3, [r7, #0]
 800d2a4:	0a1b      	lsrs	r3, r3, #8
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	613b      	str	r3, [r7, #16]
 800d2b0:	e01b      	b.n	800d2ea <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800d2b2:	887b      	ldrh	r3, [r7, #2]
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800d2ba:	887b      	ldrh	r3, [r7, #2]
 800d2bc:	0a1b      	lsrs	r3, r3, #8
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	755a      	strb	r2, [r3, #21]
		addr++;
 800d2c6:	887b      	ldrh	r3, [r7, #2]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800d2cc:	f107 020c 	add.w	r2, r7, #12
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	781a      	ldrb	r2, [r3, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff ff32 	bl	800d144 <SPI_ETH>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	613b      	str	r3, [r7, #16]
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	dde0      	ble.n	800d2b2 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800d2f0:	8afb      	ldrh	r3, [r7, #22]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3718      	adds	r7, #24
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d2fa:	b590      	push	{r4, r7, lr}
 800d2fc:	b087      	sub	sp, #28
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	60f8      	str	r0, [r7, #12]
 800d302:	607a      	str	r2, [r7, #4]
 800d304:	461a      	mov	r2, r3
 800d306:	460b      	mov	r3, r1
 800d308:	817b      	strh	r3, [r7, #10]
 800d30a:	4613      	mov	r3, r2
 800d30c:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	220f      	movs	r2, #15
 800d312:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d314:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d31a:	d226      	bcs.n	800d36a <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800d322:	2300      	movs	r3, #0
 800d324:	617b      	str	r3, [r7, #20]
 800d326:	e01a      	b.n	800d35e <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800d328:	897b      	ldrh	r3, [r7, #10]
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d330:	897b      	ldrh	r3, [r7, #10]
 800d332:	0a1b      	lsrs	r3, r3, #8
 800d334:	b29b      	uxth	r3, r3
 800d336:	b2da      	uxtb	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800d33c:	893a      	ldrh	r2, [r7, #8]
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	4413      	add	r3, r2
 800d342:	461a      	mov	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	189c      	adds	r4, r3, r2
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f7ff fefb 	bl	800d144 <SPI_ETH>
 800d34e:	4603      	mov	r3, r0
 800d350:	7023      	strb	r3, [r4, #0]
				addr++;
 800d352:	897b      	ldrh	r3, [r7, #10]
 800d354:	3301      	adds	r3, #1
 800d356:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	3301      	adds	r3, #1
 800d35c:	617b      	str	r3, [r7, #20]
 800d35e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	429a      	cmp	r2, r3
 800d364:	dbe0      	blt.n	800d328 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d366:	2300      	movs	r3, #0
 800d368:	e000      	b.n	800d36c <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800d36a:	2301      	movs	r3, #1
	}
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	371c      	adds	r7, #28
 800d370:	46bd      	mov	sp, r7
 800d372:	bd90      	pop	{r4, r7, pc}

0800d374 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	607a      	str	r2, [r7, #4]
 800d37e:	461a      	mov	r2, r3
 800d380:	460b      	mov	r3, r1
 800d382:	817b      	strh	r3, [r7, #10]
 800d384:	4613      	mov	r3, r2
 800d386:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	22f0      	movs	r2, #240	; 0xf0
 800d38c:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d38e:	8c3b      	ldrh	r3, [r7, #32]
 800d390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d394:	d223      	bcs.n	800d3de <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800d396:	2300      	movs	r3, #0
 800d398:	617b      	str	r3, [r7, #20]
 800d39a:	e01a      	b.n	800d3d2 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800d39c:	897b      	ldrh	r3, [r7, #10]
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d3a4:	897b      	ldrh	r3, [r7, #10]
 800d3a6:	0a1b      	lsrs	r3, r3, #8
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	b2da      	uxtb	r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800d3b0:	893a      	ldrh	r2, [r7, #8]
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	7f1a      	ldrb	r2, [r3, #28]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7ff febf 	bl	800d144 <SPI_ETH>
				addr++;
 800d3c6:	897b      	ldrh	r3, [r7, #10]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	617b      	str	r3, [r7, #20]
 800d3d2:	8c3b      	ldrh	r3, [r7, #32]
 800d3d4:	697a      	ldr	r2, [r7, #20]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	dbe0      	blt.n	800d39c <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d3da:	2300      	movs	r3, #0
 800d3dc:	e000      	b.n	800d3e0 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800d3de:	2301      	movs	r3, #1
	}
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3718      	adds	r7, #24
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	70fb      	strb	r3, [r7, #3]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	22f0      	movs	r2, #240	; 0xf0
 800d3fc:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800d3fe:	78fb      	ldrb	r3, [r7, #3]
 800d400:	3304      	adds	r3, #4
 800d402:	b2da      	uxtb	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	78ba      	ldrb	r2, [r7, #2]
 800d412:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7ff fe95 	bl	800d144 <SPI_ETH>
}
 800d41a:	bf00      	nop
 800d41c:	4618      	mov	r0, r3
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	460b      	mov	r3, r1
 800d42e:	70fb      	strb	r3, [r7, #3]
 800d430:	4613      	mov	r3, r2
 800d432:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	22f0      	movs	r2, #240	; 0xf0
 800d438:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800d43a:	78fb      	ldrb	r3, [r7, #3]
 800d43c:	3304      	adds	r3, #4
 800d43e:	b2da      	uxtb	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	78ba      	ldrb	r2, [r7, #2]
 800d44e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f7ff fe77 	bl	800d144 <SPI_ETH>
}
 800d456:	bf00      	nop
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af02      	add	r7, sp, #8
 800d466:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d46e:	331c      	adds	r3, #28
 800d470:	2204      	movs	r2, #4
 800d472:	9201      	str	r2, [sp, #4]
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	23f0      	movs	r3, #240	; 0xf0
 800d478:	2201      	movs	r2, #1
 800d47a:	2100      	movs	r1, #0
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7ff fe88 	bl	800d192 <SPI_ETH_REG>
	 // ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d488:	2204      	movs	r2, #4
 800d48a:	9201      	str	r2, [sp, #4]
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	23f0      	movs	r3, #240	; 0xf0
 800d490:	2205      	movs	r2, #5
 800d492:	2100      	movs	r1, #0
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff fe7c 	bl	800d192 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	2206      	movs	r2, #6
 800d4a4:	9201      	str	r2, [sp, #4]
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	23f0      	movs	r3, #240	; 0xf0
 800d4aa:	2209      	movs	r2, #9
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7ff fe6f 	bl	800d192 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4ba:	330a      	adds	r3, #10
 800d4bc:	2204      	movs	r2, #4
 800d4be:	9201      	str	r2, [sp, #4]
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	23f0      	movs	r3, #240	; 0xf0
 800d4c4:	220f      	movs	r2, #15
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7ff fe62 	bl	800d192 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4d4:	330e      	adds	r3, #14
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	9201      	str	r2, [sp, #4]
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	23f0      	movs	r3, #240	; 0xf0
 800d4de:	221a      	movs	r2, #26
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff fe55 	bl	800d192 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4ee:	330f      	adds	r3, #15
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	9201      	str	r2, [sp, #4]
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	23f0      	movs	r3, #240	; 0xf0
 800d4f8:	221b      	movs	r2, #27
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f7ff fe48 	bl	800d192 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client

}
 800d502:	bf00      	nop
 800d504:	4618      	mov	r0, r3
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af02      	add	r7, sp, #8
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	460b      	mov	r3, r1
 800d516:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800d518:	78fb      	ldrb	r3, [r7, #3]
 800d51a:	2201      	movs	r2, #1
 800d51c:	4619      	mov	r1, r3
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7ff ff80 	bl	800d424 <eth_wr_SOCKET_MODE>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d52a:	331a      	adds	r3, #26
 800d52c:	2202      	movs	r2, #2
 800d52e:	9201      	str	r2, [sp, #4]
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	23f0      	movs	r3, #240	; 0xf0
 800d534:	2204      	movs	r2, #4
 800d536:	2104      	movs	r1, #4
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7ff fe2a 	bl	800d192 <SPI_ETH_REG>

	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d544:	331c      	adds	r3, #28
 800d546:	2204      	movs	r2, #4
 800d548:	9201      	str	r2, [sp, #4]
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	23f0      	movs	r3, #240	; 0xf0
 800d54e:	220c      	movs	r2, #12
 800d550:	2104      	movs	r1, #4
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7ff fe1d 	bl	800d192 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d55e:	2202      	movs	r2, #2
 800d560:	9201      	str	r2, [sp, #4]
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	23f0      	movs	r3, #240	; 0xf0
 800d566:	2210      	movs	r2, #16
 800d568:	2104      	movs	r1, #4
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7ff fe11 	bl	800d192 <SPI_ETH_REG>


	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	2201      	movs	r2, #1
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f7ff ff36 	bl	800d3e8 <eth_wr_SOCKET_CMD>
	 //ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client

	 if(ETH->S0_ENserver == 1)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d586:	2b01      	cmp	r3, #1
 800d588:	d106      	bne.n	800d598 <eth_socket_init+0x8c>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800d58a:	78fb      	ldrb	r3, [r7, #3]
 800d58c:	2202      	movs	r2, #2
 800d58e:	4619      	mov	r1, r3
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7ff ff29 	bl	800d3e8 <eth_wr_SOCKET_CMD>
 800d596:	e009      	b.n	800d5ac <eth_socket_init+0xa0>
		 //ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800d598:	78fb      	ldrb	r3, [r7, #3]
 800d59a:	2204      	movs	r2, #4
 800d59c:	4619      	mov	r1, r3
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7ff ff22 	bl	800d3e8 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800d5a4:	2115      	movs	r1, #21
 800d5a6:	4804      	ldr	r0, [pc, #16]	; (800d5b8 <eth_socket_init+0xac>)
 800d5a8:	f7f3 feb6 	bl	8001318 <ITM0_Write>
	 }
}
 800d5ac:	bf00      	nop
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	0800faf8 	.word	0x0800faf8

0800d5bc <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	220f      	movs	r2, #15
 800d5cc:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800d5ce:	78fb      	ldrb	r3, [r7, #3]
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2203      	movs	r2, #3
 800d5dc:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7ff fdad 	bl	800d144 <SPI_ETH>
	return(y->RX[3]);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7edb      	ldrb	r3, [r3, #27]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	460b      	mov	r3, r1
 800d600:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	220f      	movs	r2, #15
 800d606:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800d608:	78fb      	ldrb	r3, [r7, #3]
 800d60a:	3304      	adds	r3, #4
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7ff fd90 	bl	800d144 <SPI_ETH>
	return(y->RX[3]);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7edb      	ldrb	r3, [r3, #27]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08c      	sub	sp, #48	; 0x30
 800d634:	af02      	add	r7, sp, #8
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	607a      	str	r2, [r7, #4]
 800d63a:	461a      	mov	r2, r3
 800d63c:	460b      	mov	r3, r1
 800d63e:	72fb      	strb	r3, [r7, #11]
 800d640:	4613      	mov	r3, r2
 800d642:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d644:	2300      	movs	r3, #0
 800d646:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800d648:	2300      	movs	r3, #0
 800d64a:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800d64c:	2300      	movs	r3, #0
 800d64e:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800d650:	2300      	movs	r3, #0
 800d652:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800d654:	2300      	movs	r3, #0
 800d656:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800d658:	2300      	movs	r3, #0
 800d65a:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800d65c:	2300      	movs	r3, #0
 800d65e:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800d660:	2300      	movs	r3, #0
 800d662:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800d664:	2300      	movs	r3, #0
 800d666:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800d668:	2300      	movs	r3, #0
 800d66a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800d66c:	7afb      	ldrb	r3, [r7, #11]
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d83e      	bhi.n	800d6f0 <eth_rd_SOCKET_DATA+0xc0>
 800d672:	a201      	add	r2, pc, #4	; (adr r2, 800d678 <eth_rd_SOCKET_DATA+0x48>)
 800d674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d678:	0800d689 	.word	0x0800d689
 800d67c:	0800d6a3 	.word	0x0800d6a3
 800d680:	0800d6bd 	.word	0x0800d6bd
 800d684:	0800d6d7 	.word	0x0800d6d7
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d68e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d692:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d69a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d69e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d6a0:	e033      	b.n	800d70a <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6a8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d6ac:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d6b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d6ba:	e026      	b.n	800d70a <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6c6:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ce:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d6d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d6d4:	e019      	b.n	800d70a <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d6e0:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d6ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d6ee:	e00c      	b.n	800d70a <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d6fa:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d706:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d708:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d70a:	7afb      	ldrb	r3, [r7, #11]
 800d70c:	3304      	adds	r3, #4
 800d70e:	b2d9      	uxtb	r1, r3
 800d710:	2302      	movs	r3, #2
 800d712:	9301      	str	r3, [sp, #4]
 800d714:	f107 0310 	add.w	r3, r7, #16
 800d718:	9300      	str	r3, [sp, #0]
 800d71a:	230f      	movs	r3, #15
 800d71c:	2228      	movs	r2, #40	; 0x28
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7ff fd37 	bl	800d192 <SPI_ETH_REG>
 800d724:	4603      	mov	r3, r0
 800d726:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800d728:	8b7a      	ldrh	r2, [r7, #26]
 800d72a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d72c:	4013      	ands	r3, r2
 800d72e:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800d730:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d732:	8b3b      	ldrh	r3, [r7, #24]
 800d734:	4413      	add	r3, r2
 800d736:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800d738:	8b3a      	ldrh	r2, [r7, #24]
 800d73a:	893b      	ldrh	r3, [r7, #8]
 800d73c:	441a      	add	r2, r3
 800d73e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d740:	3301      	adds	r3, #1
 800d742:	429a      	cmp	r2, r3
 800d744:	dd2c      	ble.n	800d7a0 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800d746:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d748:	8b3b      	ldrh	r3, [r7, #24]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	3301      	adds	r3, #1
 800d750:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f103 021c 	add.w	r2, r3, #28
 800d758:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d75a:	8af9      	ldrh	r1, [r7, #22]
 800d75c:	8bfb      	ldrh	r3, [r7, #30]
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	4603      	mov	r3, r0
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f7ff fdc9 	bl	800d2fa <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d768:	8bba      	ldrh	r2, [r7, #28]
 800d76a:	8bfb      	ldrh	r3, [r7, #30]
 800d76c:	4413      	add	r3, r2
 800d76e:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800d770:	893a      	ldrh	r2, [r7, #8]
 800d772:	8bfb      	ldrh	r3, [r7, #30]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800d778:	8bfb      	ldrh	r3, [r7, #30]
 800d77a:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f103 021c 	add.w	r2, r3, #28
 800d782:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d784:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800d786:	8c3b      	ldrh	r3, [r7, #32]
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	4603      	mov	r3, r0
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f7ff fdb4 	bl	800d2fa <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800d792:	8b7a      	ldrh	r2, [r7, #26]
 800d794:	893b      	ldrh	r3, [r7, #8]
 800d796:	4413      	add	r3, r2
 800d798:	b29a      	uxth	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	801a      	strh	r2, [r3, #0]
 800d79e:	e010      	b.n	800d7c2 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f103 021c 	add.w	r2, r3, #28
 800d7a6:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d7a8:	8af9      	ldrh	r1, [r7, #22]
 800d7aa:	893b      	ldrh	r3, [r7, #8]
 800d7ac:	9300      	str	r3, [sp, #0]
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f7ff fda2 	bl	800d2fa <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800d7b6:	8b7a      	ldrh	r2, [r7, #26]
 800d7b8:	893b      	ldrh	r3, [r7, #8]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	b29b      	uxth	r3, r3
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3728      	adds	r7, #40	; 0x28
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop

0800d7d0 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08c      	sub	sp, #48	; 0x30
 800d7d4:	af02      	add	r7, sp, #8
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	607a      	str	r2, [r7, #4]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	460b      	mov	r3, r1
 800d7de:	72fb      	strb	r3, [r7, #11]
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d800:	2300      	movs	r3, #0
 800d802:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800d804:	2300      	movs	r3, #0
 800d806:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800d808:	2300      	movs	r3, #0
 800d80a:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800d810:	7afb      	ldrb	r3, [r7, #11]
 800d812:	2b03      	cmp	r3, #3
 800d814:	d83e      	bhi.n	800d894 <eth_wr_SOCKET_DATA+0xc4>
 800d816:	a201      	add	r2, pc, #4	; (adr r2, 800d81c <eth_wr_SOCKET_DATA+0x4c>)
 800d818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81c:	0800d82d 	.word	0x0800d82d
 800d820:	0800d847 	.word	0x0800d847
 800d824:	0800d861 	.word	0x0800d861
 800d828:	0800d87b 	.word	0x0800d87b
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d832:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d836:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d83e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d842:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d844:	e033      	b.n	800d8ae <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d84c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d850:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d85c:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d85e:	e026      	b.n	800d8ae <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d86a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d876:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d878:	e019      	b.n	800d8ae <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d880:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d884:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d88c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d890:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d892:	e00c      	b.n	800d8ae <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d89a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d89e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d8aa:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d8ac:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d8ae:	e00e      	b.n	800d8ce <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800d8b0:	7afb      	ldrb	r3, [r7, #11]
 800d8b2:	3304      	adds	r3, #4
 800d8b4:	b2d9      	uxtb	r1, r3
 800d8b6:	2302      	movs	r3, #2
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	f107 0310 	add.w	r3, r7, #16
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	230f      	movs	r3, #15
 800d8c2:	2220      	movs	r2, #32
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7ff fc64 	bl	800d192 <SPI_ETH_REG>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d8ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d8d0:	893b      	ldrh	r3, [r7, #8]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d3ec      	bcc.n	800d8b0 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800d8d6:	7afb      	ldrb	r3, [r7, #11]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	b2d9      	uxtb	r1, r3
 800d8dc:	2302      	movs	r3, #2
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	f107 0310 	add.w	r3, r7, #16
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	230f      	movs	r3, #15
 800d8e8:	2224      	movs	r2, #36	; 0x24
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f7ff fc51 	bl	800d192 <SPI_ETH_REG>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800d8f4:	8b3a      	ldrh	r2, [r7, #24]
 800d8f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800d8fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8fe:	8afb      	ldrh	r3, [r7, #22]
 800d900:	4413      	add	r3, r2
 800d902:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800d904:	8afa      	ldrh	r2, [r7, #22]
 800d906:	893b      	ldrh	r3, [r7, #8]
 800d908:	441a      	add	r2, r3
 800d90a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d90c:	3301      	adds	r3, #1
 800d90e:	429a      	cmp	r2, r3
 800d910:	dd2c      	ble.n	800d96c <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800d912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d914:	8afb      	ldrh	r3, [r7, #22]
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	b29b      	uxth	r3, r3
 800d91a:	3301      	adds	r3, #1
 800d91c:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f103 021c 	add.w	r2, r3, #28
 800d924:	8c38      	ldrh	r0, [r7, #32]
 800d926:	8ab9      	ldrh	r1, [r7, #20]
 800d928:	8bbb      	ldrh	r3, [r7, #28]
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	4603      	mov	r3, r0
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f7ff fd20 	bl	800d374 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800d934:	8b7a      	ldrh	r2, [r7, #26]
 800d936:	8bbb      	ldrh	r3, [r7, #28]
 800d938:	4413      	add	r3, r2
 800d93a:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800d93c:	893a      	ldrh	r2, [r7, #8]
 800d93e:	8bbb      	ldrh	r3, [r7, #28]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800d944:	8bbb      	ldrh	r3, [r7, #28]
 800d946:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f103 021c 	add.w	r2, r3, #28
 800d94e:	8c38      	ldrh	r0, [r7, #32]
 800d950:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800d952:	8bfb      	ldrh	r3, [r7, #30]
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	4603      	mov	r3, r0
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f7ff fd0b 	bl	800d374 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800d95e:	8b3a      	ldrh	r2, [r7, #24]
 800d960:	893b      	ldrh	r3, [r7, #8]
 800d962:	4413      	add	r3, r2
 800d964:	b29a      	uxth	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	801a      	strh	r2, [r3, #0]
 800d96a:	e010      	b.n	800d98e <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f103 021c 	add.w	r2, r3, #28
 800d972:	8c38      	ldrh	r0, [r7, #32]
 800d974:	8ab9      	ldrh	r1, [r7, #20]
 800d976:	893b      	ldrh	r3, [r7, #8]
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	4603      	mov	r3, r0
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f7ff fcf9 	bl	800d374 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800d982:	8b3a      	ldrh	r2, [r7, #24]
 800d984:	893b      	ldrh	r3, [r7, #8]
 800d986:	4413      	add	r3, r2
 800d988:	b29a      	uxth	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	801a      	strh	r2, [r3, #0]
					}

}
 800d98e:	bf00      	nop
 800d990:	4618      	mov	r0, r3
 800d992:	3728      	adds	r7, #40	; 0x28
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b090      	sub	sp, #64	; 0x40
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	633b      	str	r3, [r7, #48]	; 0x30
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	61fb      	str	r3, [r7, #28]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	61bb      	str	r3, [r7, #24]
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	617b      	str	r3, [r7, #20]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	623b      	str	r3, [r7, #32]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800d9e2:	69fa      	ldr	r2, [r7, #28]
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	f2c0 8315 	blt.w	800e016 <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800d9f0:	e00c      	b.n	800da0c <FT_String_ND+0x74>
							{
								n++;
 800d9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800d9f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	441a      	add	r2, r3
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	3301      	adds	r3, #1
 800da02:	429a      	cmp	r2, r3
 800da04:	dd02      	ble.n	800da0c <FT_String_ND+0x74>
								{
									estado=0;
 800da06:	2300      	movs	r3, #0
 800da08:	623b      	str	r3, [r7, #32]
									break;
 800da0a:	e009      	b.n	800da20 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800da0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	4413      	add	r3, r2
 800da12:	781a      	ldrb	r2, [r3, #0]
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	6879      	ldr	r1, [r7, #4]
 800da18:	440b      	add	r3, r1
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d1e8      	bne.n	800d9f2 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800da20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da22:	3301      	adds	r3, #1
 800da24:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800da26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da28:	3301      	adds	r3, #1
 800da2a:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800da2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	429a      	cmp	r2, r3
 800da32:	d108      	bne.n	800da46 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800da34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da3e:	601a      	str	r2, [r3, #0]
									estado=1;
 800da40:	2301      	movs	r3, #1
 800da42:	623b      	str	r3, [r7, #32]
									break;
 800da44:	e010      	b.n	800da68 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800da46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	dd02      	ble.n	800da54 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800da4e:	2300      	movs	r3, #0
 800da50:	623b      	str	r3, [r7, #32]
									 break;
 800da52:	e009      	b.n	800da68 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800da54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	4413      	add	r3, r2
 800da5a:	781a      	ldrb	r2, [r3, #0]
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	6879      	ldr	r1, [r7, #4]
 800da60:	440b      	add	r3, r1
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	429a      	cmp	r2, r3
 800da66:	d0db      	beq.n	800da20 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	1e5a      	subs	r2, r3, #1
 800da6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6e:	4413      	add	r3, r2
 800da70:	69fa      	ldr	r2, [r7, #28]
 800da72:	429a      	cmp	r2, r3
 800da74:	dd02      	ble.n	800da7c <FT_String_ND+0xe4>
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d1b7      	bne.n	800d9ec <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800da7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d101      	bne.n	800da86 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800da82:	6a3b      	ldr	r3, [r7, #32]
 800da84:	e2c8      	b.n	800e018 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800da86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d12c      	bne.n	800dae6 <FT_String_ND+0x14e>
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d129      	bne.n	800dae6 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800da92:	e014      	b.n	800dabe <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800da94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	441a      	add	r2, r3
 800da9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da9e:	4413      	add	r3, r2
 800daa0:	3b01      	subs	r3, #1
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	441a      	add	r2, r3
 800daa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daa8:	6819      	ldr	r1, [r3, #0]
 800daaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daac:	440b      	add	r3, r1
 800daae:	3b01      	subs	r3, #1
 800dab0:	68f9      	ldr	r1, [r7, #12]
 800dab2:	440b      	add	r3, r1
 800dab4:	7812      	ldrb	r2, [r2, #0]
 800dab6:	701a      	strb	r2, [r3, #0]
										n3++;
 800dab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daba:	3301      	adds	r3, #1
 800dabc:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800dabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac4:	441a      	add	r2, r3
 800dac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac8:	4413      	add	r3, r2
 800daca:	69fa      	ldr	r2, [r7, #28]
 800dacc:	429a      	cmp	r2, r3
 800dace:	dae1      	bge.n	800da94 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800dad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad6:	4413      	add	r3, r2
 800dad8:	1e5a      	subs	r2, r3, #1
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	601a      	str	r2, [r3, #0]
							estado=3;
 800dade:	2303      	movs	r3, #3
 800dae0:	623b      	str	r3, [r7, #32]
							return(estado);
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	e298      	b.n	800e018 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800dae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dae8:	2b02      	cmp	r3, #2
 800daea:	f040 80be 	bne.w	800dc6a <FT_String_ND+0x2d2>
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	f040 80ba 	bne.w	800dc6a <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800daf6:	e012      	b.n	800db1e <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800daf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	1ad2      	subs	r2, r2, r3
 800dafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db00:	4413      	add	r3, r2
 800db02:	461a      	mov	r2, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	441a      	add	r2, r3
 800db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db0c:	440b      	add	r3, r1
 800db0e:	7812      	ldrb	r2, [r2, #0]
 800db10:	701a      	strb	r2, [r3, #0]
								n4++;
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	3301      	adds	r3, #1
 800db16:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800db18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db1c:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800db1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	1ad2      	subs	r2, r2, r3
 800db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db26:	4413      	add	r3, r2
 800db28:	69fa      	ldr	r2, [r7, #28]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	dae4      	bge.n	800daf8 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800db2e:	499d      	ldr	r1, [pc, #628]	; (800dda4 <FT_String_ND+0x40c>)
 800db30:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800db32:	f000 fcb7 	bl	800e4a4 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800db36:	499c      	ldr	r1, [pc, #624]	; (800dda8 <FT_String_ND+0x410>)
 800db38:	2000      	movs	r0, #0
 800db3a:	f000 fcb3 	bl	800e4a4 <strtok>
 800db3e:	4603      	mov	r3, r0
 800db40:	4618      	mov	r0, r3
 800db42:	f000 faf0 	bl	800e126 <atoi>
 800db46:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800db48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db4a:	3b01      	subs	r3, #1
 800db4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db4e:	429a      	cmp	r2, r3
 800db50:	db02      	blt.n	800db58 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800db52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db54:	3b01      	subs	r3, #1
 800db56:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800db58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db5a:	3306      	adds	r3, #6
 800db5c:	222c      	movs	r2, #44	; 0x2c
 800db5e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	2b09      	cmp	r3, #9
 800db64:	dc0d      	bgt.n	800db82 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800db66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db68:	3308      	adds	r3, #8
 800db6a:	223a      	movs	r2, #58	; 0x3a
 800db6c:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800db6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db70:	3309      	adds	r3, #9
 800db72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db74:	4413      	add	r3, r2
 800db76:	2200      	movs	r2, #0
 800db78:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	3309      	adds	r3, #9
 800db7e:	627b      	str	r3, [r7, #36]	; 0x24
 800db80:	e021      	b.n	800dbc6 <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800db82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db84:	2b63      	cmp	r3, #99	; 0x63
 800db86:	dc0d      	bgt.n	800dba4 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800db88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db8a:	3309      	adds	r3, #9
 800db8c:	223a      	movs	r2, #58	; 0x3a
 800db8e:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	330a      	adds	r3, #10
 800db94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db96:	4413      	add	r3, r2
 800db98:	2200      	movs	r2, #0
 800db9a:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800db9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9e:	330a      	adds	r3, #10
 800dba0:	627b      	str	r3, [r7, #36]	; 0x24
 800dba2:	e010      	b.n	800dbc6 <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800dba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbaa:	da0c      	bge.n	800dbc6 <FT_String_ND+0x22e>
														{
															c[10]=':';
 800dbac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbae:	330a      	adds	r3, #10
 800dbb0:	223a      	movs	r2, #58	; 0x3a
 800dbb2:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800dbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb6:	330b      	adds	r3, #11
 800dbb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbba:	4413      	add	r3, r2
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc2:	330b      	adds	r3, #11
 800dbc4:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800dbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbca:	601a      	str	r2, [r3, #0]
							n4=0;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dbd0:	e016      	b.n	800dc00 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800dbd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	1ad2      	subs	r2, r2, r3
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	441a      	add	r2, r3
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbde:	4413      	add	r3, r2
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	441a      	add	r2, r3
 800dbe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	1ac9      	subs	r1, r1, r3
 800dbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbee:	440b      	add	r3, r1
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	440b      	add	r3, r1
 800dbf6:	7812      	ldrb	r2, [r2, #0]
 800dbf8:	701a      	strb	r2, [r3, #0]
								n4++;
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dc00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	1ad2      	subs	r2, r2, r3
 800dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc08:	441a      	add	r2, r3
 800dc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0c:	4413      	add	r3, r2
 800dc0e:	69fa      	ldr	r2, [r7, #28]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	dade      	bge.n	800dbd2 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800dc14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	441a      	add	r2, r3
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	1e5a      	subs	r2, r3, #1
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800dc24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	1ad2      	subs	r2, r2, r3
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	441a      	add	r2, r3
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc30:	4413      	add	r3, r2
 800dc32:	461a      	mov	r2, r3
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4413      	add	r3, r2
 800dc38:	2200      	movs	r2, #0
 800dc3a:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800dc3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	1ad2      	subs	r2, r2, r3
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	4413      	add	r3, r2
 800dc46:	461a      	mov	r2, r3
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800dc50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	1ad2      	subs	r2, r2, r3
 800dc56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5a:	440b      	add	r3, r1
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d102      	bne.n	800dc66 <FT_String_ND+0x2ce>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2200      	movs	r2, #0
 800dc64:	701a      	strb	r2, [r3, #0]
							estado=3;
 800dc66:	2303      	movs	r3, #3
 800dc68:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800dc6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc6c:	2b03      	cmp	r3, #3
 800dc6e:	d146      	bne.n	800dcfe <FT_String_ND+0x366>
 800dc70:	6a3b      	ldr	r3, [r7, #32]
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d143      	bne.n	800dcfe <FT_String_ND+0x366>
						{
						n3=0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800dc7a:	e00e      	b.n	800dc9a <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800dc7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc82:	4413      	add	r3, r2
 800dc84:	3b01      	subs	r3, #1
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	441a      	add	r2, r3
 800dc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dc8e:	440b      	add	r3, r1
 800dc90:	7812      	ldrb	r2, [r2, #0]
 800dc92:	701a      	strb	r2, [r3, #0]
										n3++;
 800dc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc96:	3301      	adds	r3, #1
 800dc98:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800dc9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	dbec      	blt.n	800dc7c <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800dca6:	e014      	b.n	800dcd2 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800dca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	441a      	add	r2, r3
 800dcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb2:	4413      	add	r3, r2
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	441a      	add	r2, r3
 800dcba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcbc:	6819      	ldr	r1, [r3, #0]
 800dcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc0:	440b      	add	r3, r1
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	68f9      	ldr	r1, [r7, #12]
 800dcc6:	440b      	add	r3, r1
 800dcc8:	7812      	ldrb	r2, [r2, #0]
 800dcca:	701a      	strb	r2, [r3, #0]
										n5++;
 800dccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcce:	3301      	adds	r3, #1
 800dcd0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800dcd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	441a      	add	r2, r3
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	441a      	add	r2, r3
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	dde0      	ble.n	800dca8 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800dce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	4413      	add	r3, r2
 800dcee:	1e5a      	subs	r2, r3, #1
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800dcf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcf8:	601a      	str	r2, [r3, #0]
							estado=3;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800dcfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	f040 80bd 	bne.w	800de80 <FT_String_ND+0x4e8>
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	f040 80b9 	bne.w	800de80 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800dd0e:	e012      	b.n	800dd36 <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800dd10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	1ad2      	subs	r2, r2, r3
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	4413      	add	r3, r2
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	441a      	add	r2, r3
 800dd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd24:	440b      	add	r3, r1
 800dd26:	7812      	ldrb	r2, [r2, #0]
 800dd28:	701a      	strb	r2, [r3, #0]
								n4++;
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800dd30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd34:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800dd36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	1ad2      	subs	r2, r2, r3
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3e:	4413      	add	r3, r2
 800dd40:	69fa      	ldr	r2, [r7, #28]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	dae4      	bge.n	800dd10 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800dd46:	4917      	ldr	r1, [pc, #92]	; (800dda4 <FT_String_ND+0x40c>)
 800dd48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dd4a:	f000 fbab 	bl	800e4a4 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800dd4e:	4916      	ldr	r1, [pc, #88]	; (800dda8 <FT_String_ND+0x410>)
 800dd50:	2000      	movs	r0, #0
 800dd52:	f000 fba7 	bl	800e4a4 <strtok>
 800dd56:	4603      	mov	r3, r0
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 f9e4 	bl	800e126 <atoi>
 800dd5e:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800dd60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd62:	3b01      	subs	r3, #1
 800dd64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd66:	429a      	cmp	r2, r3
 800dd68:	db02      	blt.n	800dd70 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800dd6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800dd70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd72:	3306      	adds	r3, #6
 800dd74:	222c      	movs	r2, #44	; 0x2c
 800dd76:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	2b09      	cmp	r3, #9
 800dd7c:	dc07      	bgt.n	800dd8e <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800dd7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd80:	3308      	adds	r3, #8
 800dd82:	223a      	movs	r2, #58	; 0x3a
 800dd84:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800dd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd88:	3309      	adds	r3, #9
 800dd8a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd8c:	e019      	b.n	800ddc2 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800dd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd90:	2b63      	cmp	r3, #99	; 0x63
 800dd92:	dc0b      	bgt.n	800ddac <FT_String_ND+0x414>
														{
															c[9]=':';
 800dd94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd96:	3309      	adds	r3, #9
 800dd98:	223a      	movs	r2, #58	; 0x3a
 800dd9a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	330a      	adds	r3, #10
 800dda0:	627b      	str	r3, [r7, #36]	; 0x24
 800dda2:	e00e      	b.n	800ddc2 <FT_String_ND+0x42a>
 800dda4:	0800fb10 	.word	0x0800fb10
 800dda8:	0800fb14 	.word	0x0800fb14
														}
														else
														{
														if (lngd < 1000)
 800ddac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddb2:	da06      	bge.n	800ddc2 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800ddb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddb6:	330a      	adds	r3, #10
 800ddb8:	223a      	movs	r2, #58	; 0x3a
 800ddba:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	330b      	adds	r3, #11
 800ddc0:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ddc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddc6:	601a      	str	r2, [r3, #0]
							n4=0;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ddcc:	e016      	b.n	800ddfc <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ddce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	1ad2      	subs	r2, r2, r3
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	441a      	add	r2, r3
 800ddd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddda:	4413      	add	r3, r2
 800dddc:	461a      	mov	r2, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	441a      	add	r2, r3
 800dde2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	1ac9      	subs	r1, r1, r3
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	440b      	add	r3, r1
 800ddec:	4619      	mov	r1, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	440b      	add	r3, r1
 800ddf2:	7812      	ldrb	r2, [r2, #0]
 800ddf4:	701a      	strb	r2, [r3, #0]
								n4++;
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ddfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	1ad2      	subs	r2, r2, r3
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	441a      	add	r2, r3
 800de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de08:	4413      	add	r3, r2
 800de0a:	69fa      	ldr	r2, [r7, #28]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	dade      	bge.n	800ddce <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800de10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de14:	441a      	add	r2, r3
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	1e5a      	subs	r2, r3, #1
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	601a      	str	r2, [r3, #0]
							n5=0;
 800de20:	2300      	movs	r3, #0
 800de22:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800de24:	e00f      	b.n	800de46 <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800de26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	1ad2      	subs	r2, r2, r3
 800de2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2e:	4413      	add	r3, r2
 800de30:	461a      	mov	r2, r3
 800de32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de34:	441a      	add	r2, r3
 800de36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de38:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800de3a:	440b      	add	r3, r1
 800de3c:	7812      	ldrb	r2, [r2, #0]
 800de3e:	701a      	strb	r2, [r3, #0]
								n5++;
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	3301      	adds	r3, #1
 800de44:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800de46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	1ad2      	subs	r2, r2, r3
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	441a      	add	r2, r3
 800de50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	429a      	cmp	r2, r3
 800de56:	dbe6      	blt.n	800de26 <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800de58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de5c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800de5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de64:	441a      	add	r2, r3
 800de66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de68:	1ad2      	subs	r2, r2, r3
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4413      	add	r3, r2
 800de70:	69fa      	ldr	r2, [r7, #28]
 800de72:	429a      	cmp	r2, r3
 800de74:	d102      	bne.n	800de7c <FT_String_ND+0x4e4>
							{
								estado=4;
 800de76:	2304      	movs	r3, #4
 800de78:	623b      	str	r3, [r7, #32]
 800de7a:	e001      	b.n	800de80 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800de7c:	2305      	movs	r3, #5
 800de7e:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800de80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de82:	2b05      	cmp	r3, #5
 800de84:	f040 80c5 	bne.w	800e012 <FT_String_ND+0x67a>
 800de88:	6a3b      	ldr	r3, [r7, #32]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	f040 80c1 	bne.w	800e012 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800de90:	e012      	b.n	800deb8 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800de92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	1ad2      	subs	r2, r2, r3
 800de98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9a:	4413      	add	r3, r2
 800de9c:	461a      	mov	r2, r3
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	441a      	add	r2, r3
 800dea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dea6:	440b      	add	r3, r1
 800dea8:	7812      	ldrb	r2, [r2, #0]
 800deaa:	701a      	strb	r2, [r3, #0]
								n4++;
 800deac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deae:	3301      	adds	r3, #1
 800deb0:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800deb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deb6:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800deb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	1ad2      	subs	r2, r2, r3
 800debe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec0:	4413      	add	r3, r2
 800dec2:	69fa      	ldr	r2, [r7, #28]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	dae4      	bge.n	800de92 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800dec8:	4955      	ldr	r1, [pc, #340]	; (800e020 <FT_String_ND+0x688>)
 800deca:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800decc:	f000 faea 	bl	800e4a4 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ded0:	4954      	ldr	r1, [pc, #336]	; (800e024 <FT_String_ND+0x68c>)
 800ded2:	2000      	movs	r0, #0
 800ded4:	f000 fae6 	bl	800e4a4 <strtok>
 800ded8:	4603      	mov	r3, r0
 800deda:	4618      	mov	r0, r3
 800dedc:	f000 f923 	bl	800e126 <atoi>
 800dee0:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800dee2:	4950      	ldr	r1, [pc, #320]	; (800e024 <FT_String_ND+0x68c>)
 800dee4:	2000      	movs	r0, #0
 800dee6:	f000 fadd 	bl	800e4a4 <strtok>
 800deea:	4603      	mov	r3, r0
 800deec:	4618      	mov	r0, r3
 800deee:	f000 f91a 	bl	800e126 <atoi>
 800def2:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800def4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800def6:	3b01      	subs	r3, #1
 800def8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800defa:	429a      	cmp	r2, r3
 800defc:	db02      	blt.n	800df04 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800defe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df00:	3b01      	subs	r3, #1
 800df02:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800df04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df06:	3306      	adds	r3, #6
 800df08:	222c      	movs	r2, #44	; 0x2c
 800df0a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0e:	2b09      	cmp	r3, #9
 800df10:	dc07      	bgt.n	800df22 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800df12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df14:	330a      	adds	r3, #10
 800df16:	223a      	movs	r2, #58	; 0x3a
 800df18:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800df1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1c:	330b      	adds	r3, #11
 800df1e:	627b      	str	r3, [r7, #36]	; 0x24
 800df20:	e015      	b.n	800df4e <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	2b63      	cmp	r3, #99	; 0x63
 800df26:	dc07      	bgt.n	800df38 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800df28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df2a:	330b      	adds	r3, #11
 800df2c:	223a      	movs	r2, #58	; 0x3a
 800df2e:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	330c      	adds	r3, #12
 800df34:	627b      	str	r3, [r7, #36]	; 0x24
 800df36:	e00a      	b.n	800df4e <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800df38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df3e:	da06      	bge.n	800df4e <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800df40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df42:	330c      	adds	r3, #12
 800df44:	223a      	movs	r2, #58	; 0x3a
 800df46:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800df48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4a:	330d      	adds	r3, #13
 800df4c:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800df4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df52:	601a      	str	r2, [r3, #0]
							n4=0;
 800df54:	2300      	movs	r3, #0
 800df56:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800df58:	e016      	b.n	800df88 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800df5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	1ad2      	subs	r2, r2, r3
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	441a      	add	r2, r3
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	4413      	add	r3, r2
 800df68:	461a      	mov	r2, r3
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	441a      	add	r2, r3
 800df6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	1ac9      	subs	r1, r1, r3
 800df74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df76:	440b      	add	r3, r1
 800df78:	4619      	mov	r1, r3
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	440b      	add	r3, r1
 800df7e:	7812      	ldrb	r2, [r2, #0]
 800df80:	701a      	strb	r2, [r3, #0]
								n4++;
 800df82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df84:	3301      	adds	r3, #1
 800df86:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800df88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	1ad2      	subs	r2, r2, r3
 800df8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df90:	441a      	add	r2, r3
 800df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df94:	4413      	add	r3, r2
 800df96:	69fa      	ldr	r2, [r7, #28]
 800df98:	429a      	cmp	r2, r3
 800df9a:	dade      	bge.n	800df5a <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800df9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	441a      	add	r2, r3
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	1e5a      	subs	r2, r3, #1
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	601a      	str	r2, [r3, #0]
							n5=0;
 800dfac:	2300      	movs	r3, #0
 800dfae:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800dfb0:	e00f      	b.n	800dfd2 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800dfb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb6:	1ad2      	subs	r2, r2, r3
 800dfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfba:	4413      	add	r3, r2
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfc0:	441a      	add	r2, r3
 800dfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dfc6:	440b      	add	r3, r1
 800dfc8:	7812      	ldrb	r2, [r2, #0]
 800dfca:	701a      	strb	r2, [r3, #0]
								n5++;
 800dfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfce:	3301      	adds	r3, #1
 800dfd0:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800dfd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd6:	1ad2      	subs	r2, r2, r3
 800dfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfda:	441a      	add	r2, r3
 800dfdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	dbe6      	blt.n	800dfb2 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800dfe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfe8:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800dfea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff0:	441a      	add	r2, r3
 800dff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff4:	1ad2      	subs	r2, r2, r3
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4413      	add	r3, r2
 800dffc:	69fa      	ldr	r2, [r7, #28]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d105      	bne.n	800e00e <FT_String_ND+0x676>
							{
								estado=4;
 800e002:	2304      	movs	r3, #4
 800e004:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800e006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e008:	693a      	ldr	r2, [r7, #16]
 800e00a:	601a      	str	r2, [r3, #0]
 800e00c:	e001      	b.n	800e012 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800e00e:	2305      	movs	r3, #5
 800e010:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800e012:	6a3b      	ldr	r3, [r7, #32]
 800e014:	e000      	b.n	800e018 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800e016:	2302      	movs	r3, #2
			}
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3740      	adds	r7, #64	; 0x40
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	0800fb10 	.word	0x0800fb10
 800e024:	0800fb14 	.word	0x0800fb14

0800e028 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b088      	sub	sp, #32
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800e032:	2330      	movs	r3, #48	; 0x30
 800e034:	60bb      	str	r3, [r7, #8]
 800e036:	f107 030c 	add.w	r3, r7, #12
 800e03a:	2200      	movs	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]
 800e03e:	605a      	str	r2, [r3, #4]
 800e040:	609a      	str	r2, [r3, #8]
 800e042:	60da      	str	r2, [r3, #12]
int i=0;	
 800e044:	2300      	movs	r3, #0
 800e046:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800e048:	f107 0308 	add.w	r3, r7, #8
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	490f      	ldr	r1, [pc, #60]	; (800e08c <INTOA+0x64>)
 800e050:	4618      	mov	r0, r3
 800e052:	f000 f9a9 	bl	800e3a8 <siprintf>
		while(i<=strlen(origbuff))
 800e056:	e00b      	b.n	800e070 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	1c5a      	adds	r2, r3, #1
 800e05c:	603a      	str	r2, [r7, #0]
 800e05e:	f107 0108 	add.w	r1, r7, #8
 800e062:	69fa      	ldr	r2, [r7, #28]
 800e064:	440a      	add	r2, r1
 800e066:	7812      	ldrb	r2, [r2, #0]
 800e068:	701a      	strb	r2, [r3, #0]
		i++;
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	3301      	adds	r3, #1
 800e06e:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800e070:	f107 0308 	add.w	r3, r7, #8
 800e074:	4618      	mov	r0, r3
 800e076:	f7f2 f8bd 	bl	80001f4 <strlen>
 800e07a:	4602      	mov	r2, r0
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d2ea      	bcs.n	800e058 <INTOA+0x30>
		}
		return(i);
 800e082:	69fb      	ldr	r3, [r7, #28]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3720      	adds	r7, #32
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	0800fb18 	.word	0x0800fb18

0800e090 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b088      	sub	sp, #32
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]
 800e09c:	603b      	str	r3, [r7, #0]
int x =0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800e0a6:	f107 0310 	add.w	r3, r7, #16
 800e0aa:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d105      	bne.n	800e0be <CopiaVector+0x2e>
 800e0b2:	68b8      	ldr	r0, [r7, #8]
 800e0b4:	f7f2 f89e 	bl	80001f4 <strlen>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	61bb      	str	r3, [r7, #24]
 800e0bc:	e02e      	b.n	800e11c <CopiaVector+0x8c>
else
	{
		x=c;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0c8:	dd01      	ble.n	800e0ce <CopiaVector+0x3e>
			{
				return(1);
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e027      	b.n	800e11e <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e0d2:	e00a      	b.n	800e0ea <CopiaVector+0x5a>
				{
					*a++=*b++;
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	1c53      	adds	r3, r2, #1
 800e0d8:	60bb      	str	r3, [r7, #8]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	1c59      	adds	r1, r3, #1
 800e0de:	60f9      	str	r1, [r7, #12]
 800e0e0:	7812      	ldrb	r2, [r2, #0]
 800e0e2:	701a      	strb	r2, [r3, #0]
					p++;
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e0ea:	69fa      	ldr	r2, [r7, #28]
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	dbf0      	blt.n	800e0d4 <CopiaVector+0x44>
				}
				if (d==1)
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d111      	bne.n	800e11c <CopiaVector+0x8c>
				{
				  p=c;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e0fc:	e008      	b.n	800e110 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	1c5a      	adds	r2, r3, #1
 800e102:	60fa      	str	r2, [r7, #12]
 800e104:	697a      	ldr	r2, [r7, #20]
 800e106:	7812      	ldrb	r2, [r2, #0]
 800e108:	701a      	strb	r2, [r3, #0]
					  p++;
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	3301      	adds	r3, #1
 800e10e:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	429a      	cmp	r2, r3
 800e116:	daf2      	bge.n	800e0fe <CopiaVector+0x6e>
				  }
				return (0);
 800e118:	2300      	movs	r3, #0
 800e11a:	e000      	b.n	800e11e <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800e11c:	2301      	movs	r3, #1
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3720      	adds	r7, #32
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <atoi>:
 800e126:	220a      	movs	r2, #10
 800e128:	2100      	movs	r1, #0
 800e12a:	f000 b883 	b.w	800e234 <strtol>
	...

0800e130 <_strtol_l.constprop.0>:
 800e130:	2b01      	cmp	r3, #1
 800e132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e136:	d001      	beq.n	800e13c <_strtol_l.constprop.0+0xc>
 800e138:	2b24      	cmp	r3, #36	; 0x24
 800e13a:	d906      	bls.n	800e14a <_strtol_l.constprop.0+0x1a>
 800e13c:	f000 fa54 	bl	800e5e8 <__errno>
 800e140:	2316      	movs	r3, #22
 800e142:	6003      	str	r3, [r0, #0]
 800e144:	2000      	movs	r0, #0
 800e146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e14a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e230 <_strtol_l.constprop.0+0x100>
 800e14e:	460d      	mov	r5, r1
 800e150:	462e      	mov	r6, r5
 800e152:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e156:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e15a:	f017 0708 	ands.w	r7, r7, #8
 800e15e:	d1f7      	bne.n	800e150 <_strtol_l.constprop.0+0x20>
 800e160:	2c2d      	cmp	r4, #45	; 0x2d
 800e162:	d132      	bne.n	800e1ca <_strtol_l.constprop.0+0x9a>
 800e164:	782c      	ldrb	r4, [r5, #0]
 800e166:	2701      	movs	r7, #1
 800e168:	1cb5      	adds	r5, r6, #2
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d05b      	beq.n	800e226 <_strtol_l.constprop.0+0xf6>
 800e16e:	2b10      	cmp	r3, #16
 800e170:	d109      	bne.n	800e186 <_strtol_l.constprop.0+0x56>
 800e172:	2c30      	cmp	r4, #48	; 0x30
 800e174:	d107      	bne.n	800e186 <_strtol_l.constprop.0+0x56>
 800e176:	782c      	ldrb	r4, [r5, #0]
 800e178:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e17c:	2c58      	cmp	r4, #88	; 0x58
 800e17e:	d14d      	bne.n	800e21c <_strtol_l.constprop.0+0xec>
 800e180:	786c      	ldrb	r4, [r5, #1]
 800e182:	2310      	movs	r3, #16
 800e184:	3502      	adds	r5, #2
 800e186:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e18a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e18e:	f04f 0e00 	mov.w	lr, #0
 800e192:	fbb8 f9f3 	udiv	r9, r8, r3
 800e196:	4676      	mov	r6, lr
 800e198:	fb03 8a19 	mls	sl, r3, r9, r8
 800e19c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e1a0:	f1bc 0f09 	cmp.w	ip, #9
 800e1a4:	d816      	bhi.n	800e1d4 <_strtol_l.constprop.0+0xa4>
 800e1a6:	4664      	mov	r4, ip
 800e1a8:	42a3      	cmp	r3, r4
 800e1aa:	dd24      	ble.n	800e1f6 <_strtol_l.constprop.0+0xc6>
 800e1ac:	f1be 3fff 	cmp.w	lr, #4294967295
 800e1b0:	d008      	beq.n	800e1c4 <_strtol_l.constprop.0+0x94>
 800e1b2:	45b1      	cmp	r9, r6
 800e1b4:	d31c      	bcc.n	800e1f0 <_strtol_l.constprop.0+0xc0>
 800e1b6:	d101      	bne.n	800e1bc <_strtol_l.constprop.0+0x8c>
 800e1b8:	45a2      	cmp	sl, r4
 800e1ba:	db19      	blt.n	800e1f0 <_strtol_l.constprop.0+0xc0>
 800e1bc:	fb06 4603 	mla	r6, r6, r3, r4
 800e1c0:	f04f 0e01 	mov.w	lr, #1
 800e1c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1c8:	e7e8      	b.n	800e19c <_strtol_l.constprop.0+0x6c>
 800e1ca:	2c2b      	cmp	r4, #43	; 0x2b
 800e1cc:	bf04      	itt	eq
 800e1ce:	782c      	ldrbeq	r4, [r5, #0]
 800e1d0:	1cb5      	addeq	r5, r6, #2
 800e1d2:	e7ca      	b.n	800e16a <_strtol_l.constprop.0+0x3a>
 800e1d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e1d8:	f1bc 0f19 	cmp.w	ip, #25
 800e1dc:	d801      	bhi.n	800e1e2 <_strtol_l.constprop.0+0xb2>
 800e1de:	3c37      	subs	r4, #55	; 0x37
 800e1e0:	e7e2      	b.n	800e1a8 <_strtol_l.constprop.0+0x78>
 800e1e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e1e6:	f1bc 0f19 	cmp.w	ip, #25
 800e1ea:	d804      	bhi.n	800e1f6 <_strtol_l.constprop.0+0xc6>
 800e1ec:	3c57      	subs	r4, #87	; 0x57
 800e1ee:	e7db      	b.n	800e1a8 <_strtol_l.constprop.0+0x78>
 800e1f0:	f04f 3eff 	mov.w	lr, #4294967295
 800e1f4:	e7e6      	b.n	800e1c4 <_strtol_l.constprop.0+0x94>
 800e1f6:	f1be 3fff 	cmp.w	lr, #4294967295
 800e1fa:	d105      	bne.n	800e208 <_strtol_l.constprop.0+0xd8>
 800e1fc:	2322      	movs	r3, #34	; 0x22
 800e1fe:	6003      	str	r3, [r0, #0]
 800e200:	4646      	mov	r6, r8
 800e202:	b942      	cbnz	r2, 800e216 <_strtol_l.constprop.0+0xe6>
 800e204:	4630      	mov	r0, r6
 800e206:	e79e      	b.n	800e146 <_strtol_l.constprop.0+0x16>
 800e208:	b107      	cbz	r7, 800e20c <_strtol_l.constprop.0+0xdc>
 800e20a:	4276      	negs	r6, r6
 800e20c:	2a00      	cmp	r2, #0
 800e20e:	d0f9      	beq.n	800e204 <_strtol_l.constprop.0+0xd4>
 800e210:	f1be 0f00 	cmp.w	lr, #0
 800e214:	d000      	beq.n	800e218 <_strtol_l.constprop.0+0xe8>
 800e216:	1e69      	subs	r1, r5, #1
 800e218:	6011      	str	r1, [r2, #0]
 800e21a:	e7f3      	b.n	800e204 <_strtol_l.constprop.0+0xd4>
 800e21c:	2430      	movs	r4, #48	; 0x30
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1b1      	bne.n	800e186 <_strtol_l.constprop.0+0x56>
 800e222:	2308      	movs	r3, #8
 800e224:	e7af      	b.n	800e186 <_strtol_l.constprop.0+0x56>
 800e226:	2c30      	cmp	r4, #48	; 0x30
 800e228:	d0a5      	beq.n	800e176 <_strtol_l.constprop.0+0x46>
 800e22a:	230a      	movs	r3, #10
 800e22c:	e7ab      	b.n	800e186 <_strtol_l.constprop.0+0x56>
 800e22e:	bf00      	nop
 800e230:	0800fb35 	.word	0x0800fb35

0800e234 <strtol>:
 800e234:	4613      	mov	r3, r2
 800e236:	460a      	mov	r2, r1
 800e238:	4601      	mov	r1, r0
 800e23a:	4802      	ldr	r0, [pc, #8]	; (800e244 <strtol+0x10>)
 800e23c:	6800      	ldr	r0, [r0, #0]
 800e23e:	f7ff bf77 	b.w	800e130 <_strtol_l.constprop.0>
 800e242:	bf00      	nop
 800e244:	20000178 	.word	0x20000178

0800e248 <std>:
 800e248:	2300      	movs	r3, #0
 800e24a:	b510      	push	{r4, lr}
 800e24c:	4604      	mov	r4, r0
 800e24e:	e9c0 3300 	strd	r3, r3, [r0]
 800e252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e256:	6083      	str	r3, [r0, #8]
 800e258:	8181      	strh	r1, [r0, #12]
 800e25a:	6643      	str	r3, [r0, #100]	; 0x64
 800e25c:	81c2      	strh	r2, [r0, #14]
 800e25e:	6183      	str	r3, [r0, #24]
 800e260:	4619      	mov	r1, r3
 800e262:	2208      	movs	r2, #8
 800e264:	305c      	adds	r0, #92	; 0x5c
 800e266:	f000 f902 	bl	800e46e <memset>
 800e26a:	4b05      	ldr	r3, [pc, #20]	; (800e280 <std+0x38>)
 800e26c:	6263      	str	r3, [r4, #36]	; 0x24
 800e26e:	4b05      	ldr	r3, [pc, #20]	; (800e284 <std+0x3c>)
 800e270:	62a3      	str	r3, [r4, #40]	; 0x28
 800e272:	4b05      	ldr	r3, [pc, #20]	; (800e288 <std+0x40>)
 800e274:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e276:	4b05      	ldr	r3, [pc, #20]	; (800e28c <std+0x44>)
 800e278:	6224      	str	r4, [r4, #32]
 800e27a:	6323      	str	r3, [r4, #48]	; 0x30
 800e27c:	bd10      	pop	{r4, pc}
 800e27e:	bf00      	nop
 800e280:	0800e3e9 	.word	0x0800e3e9
 800e284:	0800e40b 	.word	0x0800e40b
 800e288:	0800e443 	.word	0x0800e443
 800e28c:	0800e467 	.word	0x0800e467

0800e290 <stdio_exit_handler>:
 800e290:	4a02      	ldr	r2, [pc, #8]	; (800e29c <stdio_exit_handler+0xc>)
 800e292:	4903      	ldr	r1, [pc, #12]	; (800e2a0 <stdio_exit_handler+0x10>)
 800e294:	4803      	ldr	r0, [pc, #12]	; (800e2a4 <stdio_exit_handler+0x14>)
 800e296:	f000 b869 	b.w	800e36c <_fwalk_sglue>
 800e29a:	bf00      	nop
 800e29c:	20000120 	.word	0x20000120
 800e2a0:	0800ef69 	.word	0x0800ef69
 800e2a4:	2000012c 	.word	0x2000012c

0800e2a8 <cleanup_stdio>:
 800e2a8:	6841      	ldr	r1, [r0, #4]
 800e2aa:	4b0c      	ldr	r3, [pc, #48]	; (800e2dc <cleanup_stdio+0x34>)
 800e2ac:	4299      	cmp	r1, r3
 800e2ae:	b510      	push	{r4, lr}
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	d001      	beq.n	800e2b8 <cleanup_stdio+0x10>
 800e2b4:	f000 fe58 	bl	800ef68 <_fflush_r>
 800e2b8:	68a1      	ldr	r1, [r4, #8]
 800e2ba:	4b09      	ldr	r3, [pc, #36]	; (800e2e0 <cleanup_stdio+0x38>)
 800e2bc:	4299      	cmp	r1, r3
 800e2be:	d002      	beq.n	800e2c6 <cleanup_stdio+0x1e>
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f000 fe51 	bl	800ef68 <_fflush_r>
 800e2c6:	68e1      	ldr	r1, [r4, #12]
 800e2c8:	4b06      	ldr	r3, [pc, #24]	; (800e2e4 <cleanup_stdio+0x3c>)
 800e2ca:	4299      	cmp	r1, r3
 800e2cc:	d004      	beq.n	800e2d8 <cleanup_stdio+0x30>
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d4:	f000 be48 	b.w	800ef68 <_fflush_r>
 800e2d8:	bd10      	pop	{r4, pc}
 800e2da:	bf00      	nop
 800e2dc:	200035c4 	.word	0x200035c4
 800e2e0:	2000362c 	.word	0x2000362c
 800e2e4:	20003694 	.word	0x20003694

0800e2e8 <global_stdio_init.part.0>:
 800e2e8:	b510      	push	{r4, lr}
 800e2ea:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <global_stdio_init.part.0+0x30>)
 800e2ec:	4c0b      	ldr	r4, [pc, #44]	; (800e31c <global_stdio_init.part.0+0x34>)
 800e2ee:	4a0c      	ldr	r2, [pc, #48]	; (800e320 <global_stdio_init.part.0+0x38>)
 800e2f0:	601a      	str	r2, [r3, #0]
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2104      	movs	r1, #4
 800e2f8:	f7ff ffa6 	bl	800e248 <std>
 800e2fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e300:	2201      	movs	r2, #1
 800e302:	2109      	movs	r1, #9
 800e304:	f7ff ffa0 	bl	800e248 <std>
 800e308:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e30c:	2202      	movs	r2, #2
 800e30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e312:	2112      	movs	r1, #18
 800e314:	f7ff bf98 	b.w	800e248 <std>
 800e318:	200036fc 	.word	0x200036fc
 800e31c:	200035c4 	.word	0x200035c4
 800e320:	0800e291 	.word	0x0800e291

0800e324 <__sfp_lock_acquire>:
 800e324:	4801      	ldr	r0, [pc, #4]	; (800e32c <__sfp_lock_acquire+0x8>)
 800e326:	f000 b989 	b.w	800e63c <__retarget_lock_acquire_recursive>
 800e32a:	bf00      	nop
 800e32c:	20003705 	.word	0x20003705

0800e330 <__sfp_lock_release>:
 800e330:	4801      	ldr	r0, [pc, #4]	; (800e338 <__sfp_lock_release+0x8>)
 800e332:	f000 b984 	b.w	800e63e <__retarget_lock_release_recursive>
 800e336:	bf00      	nop
 800e338:	20003705 	.word	0x20003705

0800e33c <__sinit>:
 800e33c:	b510      	push	{r4, lr}
 800e33e:	4604      	mov	r4, r0
 800e340:	f7ff fff0 	bl	800e324 <__sfp_lock_acquire>
 800e344:	6a23      	ldr	r3, [r4, #32]
 800e346:	b11b      	cbz	r3, 800e350 <__sinit+0x14>
 800e348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e34c:	f7ff bff0 	b.w	800e330 <__sfp_lock_release>
 800e350:	4b04      	ldr	r3, [pc, #16]	; (800e364 <__sinit+0x28>)
 800e352:	6223      	str	r3, [r4, #32]
 800e354:	4b04      	ldr	r3, [pc, #16]	; (800e368 <__sinit+0x2c>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1f5      	bne.n	800e348 <__sinit+0xc>
 800e35c:	f7ff ffc4 	bl	800e2e8 <global_stdio_init.part.0>
 800e360:	e7f2      	b.n	800e348 <__sinit+0xc>
 800e362:	bf00      	nop
 800e364:	0800e2a9 	.word	0x0800e2a9
 800e368:	200036fc 	.word	0x200036fc

0800e36c <_fwalk_sglue>:
 800e36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e370:	4607      	mov	r7, r0
 800e372:	4688      	mov	r8, r1
 800e374:	4614      	mov	r4, r2
 800e376:	2600      	movs	r6, #0
 800e378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e37c:	f1b9 0901 	subs.w	r9, r9, #1
 800e380:	d505      	bpl.n	800e38e <_fwalk_sglue+0x22>
 800e382:	6824      	ldr	r4, [r4, #0]
 800e384:	2c00      	cmp	r4, #0
 800e386:	d1f7      	bne.n	800e378 <_fwalk_sglue+0xc>
 800e388:	4630      	mov	r0, r6
 800e38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e38e:	89ab      	ldrh	r3, [r5, #12]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d907      	bls.n	800e3a4 <_fwalk_sglue+0x38>
 800e394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e398:	3301      	adds	r3, #1
 800e39a:	d003      	beq.n	800e3a4 <_fwalk_sglue+0x38>
 800e39c:	4629      	mov	r1, r5
 800e39e:	4638      	mov	r0, r7
 800e3a0:	47c0      	blx	r8
 800e3a2:	4306      	orrs	r6, r0
 800e3a4:	3568      	adds	r5, #104	; 0x68
 800e3a6:	e7e9      	b.n	800e37c <_fwalk_sglue+0x10>

0800e3a8 <siprintf>:
 800e3a8:	b40e      	push	{r1, r2, r3}
 800e3aa:	b500      	push	{lr}
 800e3ac:	b09c      	sub	sp, #112	; 0x70
 800e3ae:	ab1d      	add	r3, sp, #116	; 0x74
 800e3b0:	9002      	str	r0, [sp, #8]
 800e3b2:	9006      	str	r0, [sp, #24]
 800e3b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e3b8:	4809      	ldr	r0, [pc, #36]	; (800e3e0 <siprintf+0x38>)
 800e3ba:	9107      	str	r1, [sp, #28]
 800e3bc:	9104      	str	r1, [sp, #16]
 800e3be:	4909      	ldr	r1, [pc, #36]	; (800e3e4 <siprintf+0x3c>)
 800e3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3c4:	9105      	str	r1, [sp, #20]
 800e3c6:	6800      	ldr	r0, [r0, #0]
 800e3c8:	9301      	str	r3, [sp, #4]
 800e3ca:	a902      	add	r1, sp, #8
 800e3cc:	f000 fab8 	bl	800e940 <_svfiprintf_r>
 800e3d0:	9b02      	ldr	r3, [sp, #8]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	701a      	strb	r2, [r3, #0]
 800e3d6:	b01c      	add	sp, #112	; 0x70
 800e3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3dc:	b003      	add	sp, #12
 800e3de:	4770      	bx	lr
 800e3e0:	20000178 	.word	0x20000178
 800e3e4:	ffff0208 	.word	0xffff0208

0800e3e8 <__sread>:
 800e3e8:	b510      	push	{r4, lr}
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f0:	f000 f8d6 	bl	800e5a0 <_read_r>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	bfab      	itete	ge
 800e3f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3fa:	89a3      	ldrhlt	r3, [r4, #12]
 800e3fc:	181b      	addge	r3, r3, r0
 800e3fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e402:	bfac      	ite	ge
 800e404:	6563      	strge	r3, [r4, #84]	; 0x54
 800e406:	81a3      	strhlt	r3, [r4, #12]
 800e408:	bd10      	pop	{r4, pc}

0800e40a <__swrite>:
 800e40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e40e:	461f      	mov	r7, r3
 800e410:	898b      	ldrh	r3, [r1, #12]
 800e412:	05db      	lsls	r3, r3, #23
 800e414:	4605      	mov	r5, r0
 800e416:	460c      	mov	r4, r1
 800e418:	4616      	mov	r6, r2
 800e41a:	d505      	bpl.n	800e428 <__swrite+0x1e>
 800e41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e420:	2302      	movs	r3, #2
 800e422:	2200      	movs	r2, #0
 800e424:	f000 f8aa 	bl	800e57c <_lseek_r>
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e42e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e432:	81a3      	strh	r3, [r4, #12]
 800e434:	4632      	mov	r2, r6
 800e436:	463b      	mov	r3, r7
 800e438:	4628      	mov	r0, r5
 800e43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e43e:	f000 b8c1 	b.w	800e5c4 <_write_r>

0800e442 <__sseek>:
 800e442:	b510      	push	{r4, lr}
 800e444:	460c      	mov	r4, r1
 800e446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e44a:	f000 f897 	bl	800e57c <_lseek_r>
 800e44e:	1c43      	adds	r3, r0, #1
 800e450:	89a3      	ldrh	r3, [r4, #12]
 800e452:	bf15      	itete	ne
 800e454:	6560      	strne	r0, [r4, #84]	; 0x54
 800e456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e45a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e45e:	81a3      	strheq	r3, [r4, #12]
 800e460:	bf18      	it	ne
 800e462:	81a3      	strhne	r3, [r4, #12]
 800e464:	bd10      	pop	{r4, pc}

0800e466 <__sclose>:
 800e466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e46a:	f000 b877 	b.w	800e55c <_close_r>

0800e46e <memset>:
 800e46e:	4402      	add	r2, r0
 800e470:	4603      	mov	r3, r0
 800e472:	4293      	cmp	r3, r2
 800e474:	d100      	bne.n	800e478 <memset+0xa>
 800e476:	4770      	bx	lr
 800e478:	f803 1b01 	strb.w	r1, [r3], #1
 800e47c:	e7f9      	b.n	800e472 <memset+0x4>

0800e47e <strncat>:
 800e47e:	b530      	push	{r4, r5, lr}
 800e480:	4604      	mov	r4, r0
 800e482:	7825      	ldrb	r5, [r4, #0]
 800e484:	4623      	mov	r3, r4
 800e486:	3401      	adds	r4, #1
 800e488:	2d00      	cmp	r5, #0
 800e48a:	d1fa      	bne.n	800e482 <strncat+0x4>
 800e48c:	3a01      	subs	r2, #1
 800e48e:	d304      	bcc.n	800e49a <strncat+0x1c>
 800e490:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e494:	f803 4b01 	strb.w	r4, [r3], #1
 800e498:	b904      	cbnz	r4, 800e49c <strncat+0x1e>
 800e49a:	bd30      	pop	{r4, r5, pc}
 800e49c:	2a00      	cmp	r2, #0
 800e49e:	d1f5      	bne.n	800e48c <strncat+0xe>
 800e4a0:	701a      	strb	r2, [r3, #0]
 800e4a2:	e7f3      	b.n	800e48c <strncat+0xe>

0800e4a4 <strtok>:
 800e4a4:	4b16      	ldr	r3, [pc, #88]	; (800e500 <strtok+0x5c>)
 800e4a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4a8:	681e      	ldr	r6, [r3, #0]
 800e4aa:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800e4ac:	4605      	mov	r5, r0
 800e4ae:	b9fc      	cbnz	r4, 800e4f0 <strtok+0x4c>
 800e4b0:	2050      	movs	r0, #80	; 0x50
 800e4b2:	9101      	str	r1, [sp, #4]
 800e4b4:	f000 f936 	bl	800e724 <malloc>
 800e4b8:	9901      	ldr	r1, [sp, #4]
 800e4ba:	6470      	str	r0, [r6, #68]	; 0x44
 800e4bc:	4602      	mov	r2, r0
 800e4be:	b920      	cbnz	r0, 800e4ca <strtok+0x26>
 800e4c0:	4b10      	ldr	r3, [pc, #64]	; (800e504 <strtok+0x60>)
 800e4c2:	4811      	ldr	r0, [pc, #68]	; (800e508 <strtok+0x64>)
 800e4c4:	215b      	movs	r1, #91	; 0x5b
 800e4c6:	f000 f8c3 	bl	800e650 <__assert_func>
 800e4ca:	e9c0 4400 	strd	r4, r4, [r0]
 800e4ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e4d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e4d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e4da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e4de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e4e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e4e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e4ea:	6184      	str	r4, [r0, #24]
 800e4ec:	7704      	strb	r4, [r0, #28]
 800e4ee:	6244      	str	r4, [r0, #36]	; 0x24
 800e4f0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	b002      	add	sp, #8
 800e4f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4fc:	f000 b806 	b.w	800e50c <__strtok_r>
 800e500:	20000178 	.word	0x20000178
 800e504:	0800fc35 	.word	0x0800fc35
 800e508:	0800fc4c 	.word	0x0800fc4c

0800e50c <__strtok_r>:
 800e50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e50e:	b908      	cbnz	r0, 800e514 <__strtok_r+0x8>
 800e510:	6810      	ldr	r0, [r2, #0]
 800e512:	b188      	cbz	r0, 800e538 <__strtok_r+0x2c>
 800e514:	4604      	mov	r4, r0
 800e516:	4620      	mov	r0, r4
 800e518:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e51c:	460f      	mov	r7, r1
 800e51e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e522:	b91e      	cbnz	r6, 800e52c <__strtok_r+0x20>
 800e524:	b965      	cbnz	r5, 800e540 <__strtok_r+0x34>
 800e526:	6015      	str	r5, [r2, #0]
 800e528:	4628      	mov	r0, r5
 800e52a:	e005      	b.n	800e538 <__strtok_r+0x2c>
 800e52c:	42b5      	cmp	r5, r6
 800e52e:	d1f6      	bne.n	800e51e <__strtok_r+0x12>
 800e530:	2b00      	cmp	r3, #0
 800e532:	d1f0      	bne.n	800e516 <__strtok_r+0xa>
 800e534:	6014      	str	r4, [r2, #0]
 800e536:	7003      	strb	r3, [r0, #0]
 800e538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e53a:	461c      	mov	r4, r3
 800e53c:	e00c      	b.n	800e558 <__strtok_r+0x4c>
 800e53e:	b915      	cbnz	r5, 800e546 <__strtok_r+0x3a>
 800e540:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e544:	460e      	mov	r6, r1
 800e546:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e54a:	42ab      	cmp	r3, r5
 800e54c:	d1f7      	bne.n	800e53e <__strtok_r+0x32>
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d0f3      	beq.n	800e53a <__strtok_r+0x2e>
 800e552:	2300      	movs	r3, #0
 800e554:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e558:	6014      	str	r4, [r2, #0]
 800e55a:	e7ed      	b.n	800e538 <__strtok_r+0x2c>

0800e55c <_close_r>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	4d06      	ldr	r5, [pc, #24]	; (800e578 <_close_r+0x1c>)
 800e560:	2300      	movs	r3, #0
 800e562:	4604      	mov	r4, r0
 800e564:	4608      	mov	r0, r1
 800e566:	602b      	str	r3, [r5, #0]
 800e568:	f7f3 ffbd 	bl	80024e6 <_close>
 800e56c:	1c43      	adds	r3, r0, #1
 800e56e:	d102      	bne.n	800e576 <_close_r+0x1a>
 800e570:	682b      	ldr	r3, [r5, #0]
 800e572:	b103      	cbz	r3, 800e576 <_close_r+0x1a>
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	bd38      	pop	{r3, r4, r5, pc}
 800e578:	20003700 	.word	0x20003700

0800e57c <_lseek_r>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4d07      	ldr	r5, [pc, #28]	; (800e59c <_lseek_r+0x20>)
 800e580:	4604      	mov	r4, r0
 800e582:	4608      	mov	r0, r1
 800e584:	4611      	mov	r1, r2
 800e586:	2200      	movs	r2, #0
 800e588:	602a      	str	r2, [r5, #0]
 800e58a:	461a      	mov	r2, r3
 800e58c:	f7f3 ffd2 	bl	8002534 <_lseek>
 800e590:	1c43      	adds	r3, r0, #1
 800e592:	d102      	bne.n	800e59a <_lseek_r+0x1e>
 800e594:	682b      	ldr	r3, [r5, #0]
 800e596:	b103      	cbz	r3, 800e59a <_lseek_r+0x1e>
 800e598:	6023      	str	r3, [r4, #0]
 800e59a:	bd38      	pop	{r3, r4, r5, pc}
 800e59c:	20003700 	.word	0x20003700

0800e5a0 <_read_r>:
 800e5a0:	b538      	push	{r3, r4, r5, lr}
 800e5a2:	4d07      	ldr	r5, [pc, #28]	; (800e5c0 <_read_r+0x20>)
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	4608      	mov	r0, r1
 800e5a8:	4611      	mov	r1, r2
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	602a      	str	r2, [r5, #0]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	f7f3 ff60 	bl	8002474 <_read>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	d102      	bne.n	800e5be <_read_r+0x1e>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	b103      	cbz	r3, 800e5be <_read_r+0x1e>
 800e5bc:	6023      	str	r3, [r4, #0]
 800e5be:	bd38      	pop	{r3, r4, r5, pc}
 800e5c0:	20003700 	.word	0x20003700

0800e5c4 <_write_r>:
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	4d07      	ldr	r5, [pc, #28]	; (800e5e4 <_write_r+0x20>)
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	4608      	mov	r0, r1
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	602a      	str	r2, [r5, #0]
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	f7f3 ff6b 	bl	80024ae <_write>
 800e5d8:	1c43      	adds	r3, r0, #1
 800e5da:	d102      	bne.n	800e5e2 <_write_r+0x1e>
 800e5dc:	682b      	ldr	r3, [r5, #0]
 800e5de:	b103      	cbz	r3, 800e5e2 <_write_r+0x1e>
 800e5e0:	6023      	str	r3, [r4, #0]
 800e5e2:	bd38      	pop	{r3, r4, r5, pc}
 800e5e4:	20003700 	.word	0x20003700

0800e5e8 <__errno>:
 800e5e8:	4b01      	ldr	r3, [pc, #4]	; (800e5f0 <__errno+0x8>)
 800e5ea:	6818      	ldr	r0, [r3, #0]
 800e5ec:	4770      	bx	lr
 800e5ee:	bf00      	nop
 800e5f0:	20000178 	.word	0x20000178

0800e5f4 <__libc_init_array>:
 800e5f4:	b570      	push	{r4, r5, r6, lr}
 800e5f6:	4d0d      	ldr	r5, [pc, #52]	; (800e62c <__libc_init_array+0x38>)
 800e5f8:	4c0d      	ldr	r4, [pc, #52]	; (800e630 <__libc_init_array+0x3c>)
 800e5fa:	1b64      	subs	r4, r4, r5
 800e5fc:	10a4      	asrs	r4, r4, #2
 800e5fe:	2600      	movs	r6, #0
 800e600:	42a6      	cmp	r6, r4
 800e602:	d109      	bne.n	800e618 <__libc_init_array+0x24>
 800e604:	4d0b      	ldr	r5, [pc, #44]	; (800e634 <__libc_init_array+0x40>)
 800e606:	4c0c      	ldr	r4, [pc, #48]	; (800e638 <__libc_init_array+0x44>)
 800e608:	f001 f800 	bl	800f60c <_init>
 800e60c:	1b64      	subs	r4, r4, r5
 800e60e:	10a4      	asrs	r4, r4, #2
 800e610:	2600      	movs	r6, #0
 800e612:	42a6      	cmp	r6, r4
 800e614:	d105      	bne.n	800e622 <__libc_init_array+0x2e>
 800e616:	bd70      	pop	{r4, r5, r6, pc}
 800e618:	f855 3b04 	ldr.w	r3, [r5], #4
 800e61c:	4798      	blx	r3
 800e61e:	3601      	adds	r6, #1
 800e620:	e7ee      	b.n	800e600 <__libc_init_array+0xc>
 800e622:	f855 3b04 	ldr.w	r3, [r5], #4
 800e626:	4798      	blx	r3
 800e628:	3601      	adds	r6, #1
 800e62a:	e7f2      	b.n	800e612 <__libc_init_array+0x1e>
 800e62c:	0800fd20 	.word	0x0800fd20
 800e630:	0800fd20 	.word	0x0800fd20
 800e634:	0800fd20 	.word	0x0800fd20
 800e638:	0800fd24 	.word	0x0800fd24

0800e63c <__retarget_lock_acquire_recursive>:
 800e63c:	4770      	bx	lr

0800e63e <__retarget_lock_release_recursive>:
 800e63e:	4770      	bx	lr

0800e640 <strcpy>:
 800e640:	4603      	mov	r3, r0
 800e642:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e646:	f803 2b01 	strb.w	r2, [r3], #1
 800e64a:	2a00      	cmp	r2, #0
 800e64c:	d1f9      	bne.n	800e642 <strcpy+0x2>
 800e64e:	4770      	bx	lr

0800e650 <__assert_func>:
 800e650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e652:	4614      	mov	r4, r2
 800e654:	461a      	mov	r2, r3
 800e656:	4b09      	ldr	r3, [pc, #36]	; (800e67c <__assert_func+0x2c>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4605      	mov	r5, r0
 800e65c:	68d8      	ldr	r0, [r3, #12]
 800e65e:	b14c      	cbz	r4, 800e674 <__assert_func+0x24>
 800e660:	4b07      	ldr	r3, [pc, #28]	; (800e680 <__assert_func+0x30>)
 800e662:	9100      	str	r1, [sp, #0]
 800e664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e668:	4906      	ldr	r1, [pc, #24]	; (800e684 <__assert_func+0x34>)
 800e66a:	462b      	mov	r3, r5
 800e66c:	f000 fca4 	bl	800efb8 <fiprintf>
 800e670:	f000 fcec 	bl	800f04c <abort>
 800e674:	4b04      	ldr	r3, [pc, #16]	; (800e688 <__assert_func+0x38>)
 800e676:	461c      	mov	r4, r3
 800e678:	e7f3      	b.n	800e662 <__assert_func+0x12>
 800e67a:	bf00      	nop
 800e67c:	20000178 	.word	0x20000178
 800e680:	0800fca6 	.word	0x0800fca6
 800e684:	0800fcb3 	.word	0x0800fcb3
 800e688:	0800fce1 	.word	0x0800fce1

0800e68c <_free_r>:
 800e68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e68e:	2900      	cmp	r1, #0
 800e690:	d044      	beq.n	800e71c <_free_r+0x90>
 800e692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e696:	9001      	str	r0, [sp, #4]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f1a1 0404 	sub.w	r4, r1, #4
 800e69e:	bfb8      	it	lt
 800e6a0:	18e4      	addlt	r4, r4, r3
 800e6a2:	f000 f8e7 	bl	800e874 <__malloc_lock>
 800e6a6:	4a1e      	ldr	r2, [pc, #120]	; (800e720 <_free_r+0x94>)
 800e6a8:	9801      	ldr	r0, [sp, #4]
 800e6aa:	6813      	ldr	r3, [r2, #0]
 800e6ac:	b933      	cbnz	r3, 800e6bc <_free_r+0x30>
 800e6ae:	6063      	str	r3, [r4, #4]
 800e6b0:	6014      	str	r4, [r2, #0]
 800e6b2:	b003      	add	sp, #12
 800e6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6b8:	f000 b8e2 	b.w	800e880 <__malloc_unlock>
 800e6bc:	42a3      	cmp	r3, r4
 800e6be:	d908      	bls.n	800e6d2 <_free_r+0x46>
 800e6c0:	6825      	ldr	r5, [r4, #0]
 800e6c2:	1961      	adds	r1, r4, r5
 800e6c4:	428b      	cmp	r3, r1
 800e6c6:	bf01      	itttt	eq
 800e6c8:	6819      	ldreq	r1, [r3, #0]
 800e6ca:	685b      	ldreq	r3, [r3, #4]
 800e6cc:	1949      	addeq	r1, r1, r5
 800e6ce:	6021      	streq	r1, [r4, #0]
 800e6d0:	e7ed      	b.n	800e6ae <_free_r+0x22>
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	b10b      	cbz	r3, 800e6dc <_free_r+0x50>
 800e6d8:	42a3      	cmp	r3, r4
 800e6da:	d9fa      	bls.n	800e6d2 <_free_r+0x46>
 800e6dc:	6811      	ldr	r1, [r2, #0]
 800e6de:	1855      	adds	r5, r2, r1
 800e6e0:	42a5      	cmp	r5, r4
 800e6e2:	d10b      	bne.n	800e6fc <_free_r+0x70>
 800e6e4:	6824      	ldr	r4, [r4, #0]
 800e6e6:	4421      	add	r1, r4
 800e6e8:	1854      	adds	r4, r2, r1
 800e6ea:	42a3      	cmp	r3, r4
 800e6ec:	6011      	str	r1, [r2, #0]
 800e6ee:	d1e0      	bne.n	800e6b2 <_free_r+0x26>
 800e6f0:	681c      	ldr	r4, [r3, #0]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	6053      	str	r3, [r2, #4]
 800e6f6:	440c      	add	r4, r1
 800e6f8:	6014      	str	r4, [r2, #0]
 800e6fa:	e7da      	b.n	800e6b2 <_free_r+0x26>
 800e6fc:	d902      	bls.n	800e704 <_free_r+0x78>
 800e6fe:	230c      	movs	r3, #12
 800e700:	6003      	str	r3, [r0, #0]
 800e702:	e7d6      	b.n	800e6b2 <_free_r+0x26>
 800e704:	6825      	ldr	r5, [r4, #0]
 800e706:	1961      	adds	r1, r4, r5
 800e708:	428b      	cmp	r3, r1
 800e70a:	bf04      	itt	eq
 800e70c:	6819      	ldreq	r1, [r3, #0]
 800e70e:	685b      	ldreq	r3, [r3, #4]
 800e710:	6063      	str	r3, [r4, #4]
 800e712:	bf04      	itt	eq
 800e714:	1949      	addeq	r1, r1, r5
 800e716:	6021      	streq	r1, [r4, #0]
 800e718:	6054      	str	r4, [r2, #4]
 800e71a:	e7ca      	b.n	800e6b2 <_free_r+0x26>
 800e71c:	b003      	add	sp, #12
 800e71e:	bd30      	pop	{r4, r5, pc}
 800e720:	20003708 	.word	0x20003708

0800e724 <malloc>:
 800e724:	4b02      	ldr	r3, [pc, #8]	; (800e730 <malloc+0xc>)
 800e726:	4601      	mov	r1, r0
 800e728:	6818      	ldr	r0, [r3, #0]
 800e72a:	f000 b823 	b.w	800e774 <_malloc_r>
 800e72e:	bf00      	nop
 800e730:	20000178 	.word	0x20000178

0800e734 <sbrk_aligned>:
 800e734:	b570      	push	{r4, r5, r6, lr}
 800e736:	4e0e      	ldr	r6, [pc, #56]	; (800e770 <sbrk_aligned+0x3c>)
 800e738:	460c      	mov	r4, r1
 800e73a:	6831      	ldr	r1, [r6, #0]
 800e73c:	4605      	mov	r5, r0
 800e73e:	b911      	cbnz	r1, 800e746 <sbrk_aligned+0x12>
 800e740:	f000 fc66 	bl	800f010 <_sbrk_r>
 800e744:	6030      	str	r0, [r6, #0]
 800e746:	4621      	mov	r1, r4
 800e748:	4628      	mov	r0, r5
 800e74a:	f000 fc61 	bl	800f010 <_sbrk_r>
 800e74e:	1c43      	adds	r3, r0, #1
 800e750:	d00a      	beq.n	800e768 <sbrk_aligned+0x34>
 800e752:	1cc4      	adds	r4, r0, #3
 800e754:	f024 0403 	bic.w	r4, r4, #3
 800e758:	42a0      	cmp	r0, r4
 800e75a:	d007      	beq.n	800e76c <sbrk_aligned+0x38>
 800e75c:	1a21      	subs	r1, r4, r0
 800e75e:	4628      	mov	r0, r5
 800e760:	f000 fc56 	bl	800f010 <_sbrk_r>
 800e764:	3001      	adds	r0, #1
 800e766:	d101      	bne.n	800e76c <sbrk_aligned+0x38>
 800e768:	f04f 34ff 	mov.w	r4, #4294967295
 800e76c:	4620      	mov	r0, r4
 800e76e:	bd70      	pop	{r4, r5, r6, pc}
 800e770:	2000370c 	.word	0x2000370c

0800e774 <_malloc_r>:
 800e774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e778:	1ccd      	adds	r5, r1, #3
 800e77a:	f025 0503 	bic.w	r5, r5, #3
 800e77e:	3508      	adds	r5, #8
 800e780:	2d0c      	cmp	r5, #12
 800e782:	bf38      	it	cc
 800e784:	250c      	movcc	r5, #12
 800e786:	2d00      	cmp	r5, #0
 800e788:	4607      	mov	r7, r0
 800e78a:	db01      	blt.n	800e790 <_malloc_r+0x1c>
 800e78c:	42a9      	cmp	r1, r5
 800e78e:	d905      	bls.n	800e79c <_malloc_r+0x28>
 800e790:	230c      	movs	r3, #12
 800e792:	603b      	str	r3, [r7, #0]
 800e794:	2600      	movs	r6, #0
 800e796:	4630      	mov	r0, r6
 800e798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e79c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e870 <_malloc_r+0xfc>
 800e7a0:	f000 f868 	bl	800e874 <__malloc_lock>
 800e7a4:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a8:	461c      	mov	r4, r3
 800e7aa:	bb5c      	cbnz	r4, 800e804 <_malloc_r+0x90>
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	f7ff ffc0 	bl	800e734 <sbrk_aligned>
 800e7b4:	1c43      	adds	r3, r0, #1
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	d155      	bne.n	800e866 <_malloc_r+0xf2>
 800e7ba:	f8d8 4000 	ldr.w	r4, [r8]
 800e7be:	4626      	mov	r6, r4
 800e7c0:	2e00      	cmp	r6, #0
 800e7c2:	d145      	bne.n	800e850 <_malloc_r+0xdc>
 800e7c4:	2c00      	cmp	r4, #0
 800e7c6:	d048      	beq.n	800e85a <_malloc_r+0xe6>
 800e7c8:	6823      	ldr	r3, [r4, #0]
 800e7ca:	4631      	mov	r1, r6
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	eb04 0903 	add.w	r9, r4, r3
 800e7d2:	f000 fc1d 	bl	800f010 <_sbrk_r>
 800e7d6:	4581      	cmp	r9, r0
 800e7d8:	d13f      	bne.n	800e85a <_malloc_r+0xe6>
 800e7da:	6821      	ldr	r1, [r4, #0]
 800e7dc:	1a6d      	subs	r5, r5, r1
 800e7de:	4629      	mov	r1, r5
 800e7e0:	4638      	mov	r0, r7
 800e7e2:	f7ff ffa7 	bl	800e734 <sbrk_aligned>
 800e7e6:	3001      	adds	r0, #1
 800e7e8:	d037      	beq.n	800e85a <_malloc_r+0xe6>
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	442b      	add	r3, r5
 800e7ee:	6023      	str	r3, [r4, #0]
 800e7f0:	f8d8 3000 	ldr.w	r3, [r8]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d038      	beq.n	800e86a <_malloc_r+0xf6>
 800e7f8:	685a      	ldr	r2, [r3, #4]
 800e7fa:	42a2      	cmp	r2, r4
 800e7fc:	d12b      	bne.n	800e856 <_malloc_r+0xe2>
 800e7fe:	2200      	movs	r2, #0
 800e800:	605a      	str	r2, [r3, #4]
 800e802:	e00f      	b.n	800e824 <_malloc_r+0xb0>
 800e804:	6822      	ldr	r2, [r4, #0]
 800e806:	1b52      	subs	r2, r2, r5
 800e808:	d41f      	bmi.n	800e84a <_malloc_r+0xd6>
 800e80a:	2a0b      	cmp	r2, #11
 800e80c:	d917      	bls.n	800e83e <_malloc_r+0xca>
 800e80e:	1961      	adds	r1, r4, r5
 800e810:	42a3      	cmp	r3, r4
 800e812:	6025      	str	r5, [r4, #0]
 800e814:	bf18      	it	ne
 800e816:	6059      	strne	r1, [r3, #4]
 800e818:	6863      	ldr	r3, [r4, #4]
 800e81a:	bf08      	it	eq
 800e81c:	f8c8 1000 	streq.w	r1, [r8]
 800e820:	5162      	str	r2, [r4, r5]
 800e822:	604b      	str	r3, [r1, #4]
 800e824:	4638      	mov	r0, r7
 800e826:	f104 060b 	add.w	r6, r4, #11
 800e82a:	f000 f829 	bl	800e880 <__malloc_unlock>
 800e82e:	f026 0607 	bic.w	r6, r6, #7
 800e832:	1d23      	adds	r3, r4, #4
 800e834:	1af2      	subs	r2, r6, r3
 800e836:	d0ae      	beq.n	800e796 <_malloc_r+0x22>
 800e838:	1b9b      	subs	r3, r3, r6
 800e83a:	50a3      	str	r3, [r4, r2]
 800e83c:	e7ab      	b.n	800e796 <_malloc_r+0x22>
 800e83e:	42a3      	cmp	r3, r4
 800e840:	6862      	ldr	r2, [r4, #4]
 800e842:	d1dd      	bne.n	800e800 <_malloc_r+0x8c>
 800e844:	f8c8 2000 	str.w	r2, [r8]
 800e848:	e7ec      	b.n	800e824 <_malloc_r+0xb0>
 800e84a:	4623      	mov	r3, r4
 800e84c:	6864      	ldr	r4, [r4, #4]
 800e84e:	e7ac      	b.n	800e7aa <_malloc_r+0x36>
 800e850:	4634      	mov	r4, r6
 800e852:	6876      	ldr	r6, [r6, #4]
 800e854:	e7b4      	b.n	800e7c0 <_malloc_r+0x4c>
 800e856:	4613      	mov	r3, r2
 800e858:	e7cc      	b.n	800e7f4 <_malloc_r+0x80>
 800e85a:	230c      	movs	r3, #12
 800e85c:	603b      	str	r3, [r7, #0]
 800e85e:	4638      	mov	r0, r7
 800e860:	f000 f80e 	bl	800e880 <__malloc_unlock>
 800e864:	e797      	b.n	800e796 <_malloc_r+0x22>
 800e866:	6025      	str	r5, [r4, #0]
 800e868:	e7dc      	b.n	800e824 <_malloc_r+0xb0>
 800e86a:	605b      	str	r3, [r3, #4]
 800e86c:	deff      	udf	#255	; 0xff
 800e86e:	bf00      	nop
 800e870:	20003708 	.word	0x20003708

0800e874 <__malloc_lock>:
 800e874:	4801      	ldr	r0, [pc, #4]	; (800e87c <__malloc_lock+0x8>)
 800e876:	f7ff bee1 	b.w	800e63c <__retarget_lock_acquire_recursive>
 800e87a:	bf00      	nop
 800e87c:	20003704 	.word	0x20003704

0800e880 <__malloc_unlock>:
 800e880:	4801      	ldr	r0, [pc, #4]	; (800e888 <__malloc_unlock+0x8>)
 800e882:	f7ff bedc 	b.w	800e63e <__retarget_lock_release_recursive>
 800e886:	bf00      	nop
 800e888:	20003704 	.word	0x20003704

0800e88c <__ssputs_r>:
 800e88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e890:	688e      	ldr	r6, [r1, #8]
 800e892:	461f      	mov	r7, r3
 800e894:	42be      	cmp	r6, r7
 800e896:	680b      	ldr	r3, [r1, #0]
 800e898:	4682      	mov	sl, r0
 800e89a:	460c      	mov	r4, r1
 800e89c:	4690      	mov	r8, r2
 800e89e:	d82c      	bhi.n	800e8fa <__ssputs_r+0x6e>
 800e8a0:	898a      	ldrh	r2, [r1, #12]
 800e8a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8a6:	d026      	beq.n	800e8f6 <__ssputs_r+0x6a>
 800e8a8:	6965      	ldr	r5, [r4, #20]
 800e8aa:	6909      	ldr	r1, [r1, #16]
 800e8ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8b0:	eba3 0901 	sub.w	r9, r3, r1
 800e8b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8b8:	1c7b      	adds	r3, r7, #1
 800e8ba:	444b      	add	r3, r9
 800e8bc:	106d      	asrs	r5, r5, #1
 800e8be:	429d      	cmp	r5, r3
 800e8c0:	bf38      	it	cc
 800e8c2:	461d      	movcc	r5, r3
 800e8c4:	0553      	lsls	r3, r2, #21
 800e8c6:	d527      	bpl.n	800e918 <__ssputs_r+0x8c>
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	f7ff ff53 	bl	800e774 <_malloc_r>
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	b360      	cbz	r0, 800e92c <__ssputs_r+0xa0>
 800e8d2:	6921      	ldr	r1, [r4, #16]
 800e8d4:	464a      	mov	r2, r9
 800e8d6:	f000 fbab 	bl	800f030 <memcpy>
 800e8da:	89a3      	ldrh	r3, [r4, #12]
 800e8dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8e4:	81a3      	strh	r3, [r4, #12]
 800e8e6:	6126      	str	r6, [r4, #16]
 800e8e8:	6165      	str	r5, [r4, #20]
 800e8ea:	444e      	add	r6, r9
 800e8ec:	eba5 0509 	sub.w	r5, r5, r9
 800e8f0:	6026      	str	r6, [r4, #0]
 800e8f2:	60a5      	str	r5, [r4, #8]
 800e8f4:	463e      	mov	r6, r7
 800e8f6:	42be      	cmp	r6, r7
 800e8f8:	d900      	bls.n	800e8fc <__ssputs_r+0x70>
 800e8fa:	463e      	mov	r6, r7
 800e8fc:	6820      	ldr	r0, [r4, #0]
 800e8fe:	4632      	mov	r2, r6
 800e900:	4641      	mov	r1, r8
 800e902:	f000 fb6b 	bl	800efdc <memmove>
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	1b9b      	subs	r3, r3, r6
 800e90a:	60a3      	str	r3, [r4, #8]
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	4433      	add	r3, r6
 800e910:	6023      	str	r3, [r4, #0]
 800e912:	2000      	movs	r0, #0
 800e914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e918:	462a      	mov	r2, r5
 800e91a:	f000 fb9e 	bl	800f05a <_realloc_r>
 800e91e:	4606      	mov	r6, r0
 800e920:	2800      	cmp	r0, #0
 800e922:	d1e0      	bne.n	800e8e6 <__ssputs_r+0x5a>
 800e924:	6921      	ldr	r1, [r4, #16]
 800e926:	4650      	mov	r0, sl
 800e928:	f7ff feb0 	bl	800e68c <_free_r>
 800e92c:	230c      	movs	r3, #12
 800e92e:	f8ca 3000 	str.w	r3, [sl]
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e938:	81a3      	strh	r3, [r4, #12]
 800e93a:	f04f 30ff 	mov.w	r0, #4294967295
 800e93e:	e7e9      	b.n	800e914 <__ssputs_r+0x88>

0800e940 <_svfiprintf_r>:
 800e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e944:	4698      	mov	r8, r3
 800e946:	898b      	ldrh	r3, [r1, #12]
 800e948:	061b      	lsls	r3, r3, #24
 800e94a:	b09d      	sub	sp, #116	; 0x74
 800e94c:	4607      	mov	r7, r0
 800e94e:	460d      	mov	r5, r1
 800e950:	4614      	mov	r4, r2
 800e952:	d50e      	bpl.n	800e972 <_svfiprintf_r+0x32>
 800e954:	690b      	ldr	r3, [r1, #16]
 800e956:	b963      	cbnz	r3, 800e972 <_svfiprintf_r+0x32>
 800e958:	2140      	movs	r1, #64	; 0x40
 800e95a:	f7ff ff0b 	bl	800e774 <_malloc_r>
 800e95e:	6028      	str	r0, [r5, #0]
 800e960:	6128      	str	r0, [r5, #16]
 800e962:	b920      	cbnz	r0, 800e96e <_svfiprintf_r+0x2e>
 800e964:	230c      	movs	r3, #12
 800e966:	603b      	str	r3, [r7, #0]
 800e968:	f04f 30ff 	mov.w	r0, #4294967295
 800e96c:	e0d0      	b.n	800eb10 <_svfiprintf_r+0x1d0>
 800e96e:	2340      	movs	r3, #64	; 0x40
 800e970:	616b      	str	r3, [r5, #20]
 800e972:	2300      	movs	r3, #0
 800e974:	9309      	str	r3, [sp, #36]	; 0x24
 800e976:	2320      	movs	r3, #32
 800e978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e97c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e980:	2330      	movs	r3, #48	; 0x30
 800e982:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eb28 <_svfiprintf_r+0x1e8>
 800e986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e98a:	f04f 0901 	mov.w	r9, #1
 800e98e:	4623      	mov	r3, r4
 800e990:	469a      	mov	sl, r3
 800e992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e996:	b10a      	cbz	r2, 800e99c <_svfiprintf_r+0x5c>
 800e998:	2a25      	cmp	r2, #37	; 0x25
 800e99a:	d1f9      	bne.n	800e990 <_svfiprintf_r+0x50>
 800e99c:	ebba 0b04 	subs.w	fp, sl, r4
 800e9a0:	d00b      	beq.n	800e9ba <_svfiprintf_r+0x7a>
 800e9a2:	465b      	mov	r3, fp
 800e9a4:	4622      	mov	r2, r4
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	f7ff ff6f 	bl	800e88c <__ssputs_r>
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	f000 80a9 	beq.w	800eb06 <_svfiprintf_r+0x1c6>
 800e9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9b6:	445a      	add	r2, fp
 800e9b8:	9209      	str	r2, [sp, #36]	; 0x24
 800e9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 80a1 	beq.w	800eb06 <_svfiprintf_r+0x1c6>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9ce:	f10a 0a01 	add.w	sl, sl, #1
 800e9d2:	9304      	str	r3, [sp, #16]
 800e9d4:	9307      	str	r3, [sp, #28]
 800e9d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9da:	931a      	str	r3, [sp, #104]	; 0x68
 800e9dc:	4654      	mov	r4, sl
 800e9de:	2205      	movs	r2, #5
 800e9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e4:	4850      	ldr	r0, [pc, #320]	; (800eb28 <_svfiprintf_r+0x1e8>)
 800e9e6:	f7f1 fc13 	bl	8000210 <memchr>
 800e9ea:	9a04      	ldr	r2, [sp, #16]
 800e9ec:	b9d8      	cbnz	r0, 800ea26 <_svfiprintf_r+0xe6>
 800e9ee:	06d0      	lsls	r0, r2, #27
 800e9f0:	bf44      	itt	mi
 800e9f2:	2320      	movmi	r3, #32
 800e9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9f8:	0711      	lsls	r1, r2, #28
 800e9fa:	bf44      	itt	mi
 800e9fc:	232b      	movmi	r3, #43	; 0x2b
 800e9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea02:	f89a 3000 	ldrb.w	r3, [sl]
 800ea06:	2b2a      	cmp	r3, #42	; 0x2a
 800ea08:	d015      	beq.n	800ea36 <_svfiprintf_r+0xf6>
 800ea0a:	9a07      	ldr	r2, [sp, #28]
 800ea0c:	4654      	mov	r4, sl
 800ea0e:	2000      	movs	r0, #0
 800ea10:	f04f 0c0a 	mov.w	ip, #10
 800ea14:	4621      	mov	r1, r4
 800ea16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea1a:	3b30      	subs	r3, #48	; 0x30
 800ea1c:	2b09      	cmp	r3, #9
 800ea1e:	d94d      	bls.n	800eabc <_svfiprintf_r+0x17c>
 800ea20:	b1b0      	cbz	r0, 800ea50 <_svfiprintf_r+0x110>
 800ea22:	9207      	str	r2, [sp, #28]
 800ea24:	e014      	b.n	800ea50 <_svfiprintf_r+0x110>
 800ea26:	eba0 0308 	sub.w	r3, r0, r8
 800ea2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	9304      	str	r3, [sp, #16]
 800ea32:	46a2      	mov	sl, r4
 800ea34:	e7d2      	b.n	800e9dc <_svfiprintf_r+0x9c>
 800ea36:	9b03      	ldr	r3, [sp, #12]
 800ea38:	1d19      	adds	r1, r3, #4
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	9103      	str	r1, [sp, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	bfbb      	ittet	lt
 800ea42:	425b      	neglt	r3, r3
 800ea44:	f042 0202 	orrlt.w	r2, r2, #2
 800ea48:	9307      	strge	r3, [sp, #28]
 800ea4a:	9307      	strlt	r3, [sp, #28]
 800ea4c:	bfb8      	it	lt
 800ea4e:	9204      	strlt	r2, [sp, #16]
 800ea50:	7823      	ldrb	r3, [r4, #0]
 800ea52:	2b2e      	cmp	r3, #46	; 0x2e
 800ea54:	d10c      	bne.n	800ea70 <_svfiprintf_r+0x130>
 800ea56:	7863      	ldrb	r3, [r4, #1]
 800ea58:	2b2a      	cmp	r3, #42	; 0x2a
 800ea5a:	d134      	bne.n	800eac6 <_svfiprintf_r+0x186>
 800ea5c:	9b03      	ldr	r3, [sp, #12]
 800ea5e:	1d1a      	adds	r2, r3, #4
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	9203      	str	r2, [sp, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	bfb8      	it	lt
 800ea68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea6c:	3402      	adds	r4, #2
 800ea6e:	9305      	str	r3, [sp, #20]
 800ea70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eb38 <_svfiprintf_r+0x1f8>
 800ea74:	7821      	ldrb	r1, [r4, #0]
 800ea76:	2203      	movs	r2, #3
 800ea78:	4650      	mov	r0, sl
 800ea7a:	f7f1 fbc9 	bl	8000210 <memchr>
 800ea7e:	b138      	cbz	r0, 800ea90 <_svfiprintf_r+0x150>
 800ea80:	9b04      	ldr	r3, [sp, #16]
 800ea82:	eba0 000a 	sub.w	r0, r0, sl
 800ea86:	2240      	movs	r2, #64	; 0x40
 800ea88:	4082      	lsls	r2, r0
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	3401      	adds	r4, #1
 800ea8e:	9304      	str	r3, [sp, #16]
 800ea90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea94:	4825      	ldr	r0, [pc, #148]	; (800eb2c <_svfiprintf_r+0x1ec>)
 800ea96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea9a:	2206      	movs	r2, #6
 800ea9c:	f7f1 fbb8 	bl	8000210 <memchr>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d038      	beq.n	800eb16 <_svfiprintf_r+0x1d6>
 800eaa4:	4b22      	ldr	r3, [pc, #136]	; (800eb30 <_svfiprintf_r+0x1f0>)
 800eaa6:	bb1b      	cbnz	r3, 800eaf0 <_svfiprintf_r+0x1b0>
 800eaa8:	9b03      	ldr	r3, [sp, #12]
 800eaaa:	3307      	adds	r3, #7
 800eaac:	f023 0307 	bic.w	r3, r3, #7
 800eab0:	3308      	adds	r3, #8
 800eab2:	9303      	str	r3, [sp, #12]
 800eab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab6:	4433      	add	r3, r6
 800eab8:	9309      	str	r3, [sp, #36]	; 0x24
 800eaba:	e768      	b.n	800e98e <_svfiprintf_r+0x4e>
 800eabc:	fb0c 3202 	mla	r2, ip, r2, r3
 800eac0:	460c      	mov	r4, r1
 800eac2:	2001      	movs	r0, #1
 800eac4:	e7a6      	b.n	800ea14 <_svfiprintf_r+0xd4>
 800eac6:	2300      	movs	r3, #0
 800eac8:	3401      	adds	r4, #1
 800eaca:	9305      	str	r3, [sp, #20]
 800eacc:	4619      	mov	r1, r3
 800eace:	f04f 0c0a 	mov.w	ip, #10
 800ead2:	4620      	mov	r0, r4
 800ead4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ead8:	3a30      	subs	r2, #48	; 0x30
 800eada:	2a09      	cmp	r2, #9
 800eadc:	d903      	bls.n	800eae6 <_svfiprintf_r+0x1a6>
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d0c6      	beq.n	800ea70 <_svfiprintf_r+0x130>
 800eae2:	9105      	str	r1, [sp, #20]
 800eae4:	e7c4      	b.n	800ea70 <_svfiprintf_r+0x130>
 800eae6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaea:	4604      	mov	r4, r0
 800eaec:	2301      	movs	r3, #1
 800eaee:	e7f0      	b.n	800ead2 <_svfiprintf_r+0x192>
 800eaf0:	ab03      	add	r3, sp, #12
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	462a      	mov	r2, r5
 800eaf6:	4b0f      	ldr	r3, [pc, #60]	; (800eb34 <_svfiprintf_r+0x1f4>)
 800eaf8:	a904      	add	r1, sp, #16
 800eafa:	4638      	mov	r0, r7
 800eafc:	f3af 8000 	nop.w
 800eb00:	1c42      	adds	r2, r0, #1
 800eb02:	4606      	mov	r6, r0
 800eb04:	d1d6      	bne.n	800eab4 <_svfiprintf_r+0x174>
 800eb06:	89ab      	ldrh	r3, [r5, #12]
 800eb08:	065b      	lsls	r3, r3, #25
 800eb0a:	f53f af2d 	bmi.w	800e968 <_svfiprintf_r+0x28>
 800eb0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb10:	b01d      	add	sp, #116	; 0x74
 800eb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb16:	ab03      	add	r3, sp, #12
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	462a      	mov	r2, r5
 800eb1c:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <_svfiprintf_r+0x1f4>)
 800eb1e:	a904      	add	r1, sp, #16
 800eb20:	4638      	mov	r0, r7
 800eb22:	f000 f879 	bl	800ec18 <_printf_i>
 800eb26:	e7eb      	b.n	800eb00 <_svfiprintf_r+0x1c0>
 800eb28:	0800fce2 	.word	0x0800fce2
 800eb2c:	0800fcec 	.word	0x0800fcec
 800eb30:	00000000 	.word	0x00000000
 800eb34:	0800e88d 	.word	0x0800e88d
 800eb38:	0800fce8 	.word	0x0800fce8

0800eb3c <_printf_common>:
 800eb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb40:	4616      	mov	r6, r2
 800eb42:	4699      	mov	r9, r3
 800eb44:	688a      	ldr	r2, [r1, #8]
 800eb46:	690b      	ldr	r3, [r1, #16]
 800eb48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	bfb8      	it	lt
 800eb50:	4613      	movlt	r3, r2
 800eb52:	6033      	str	r3, [r6, #0]
 800eb54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb58:	4607      	mov	r7, r0
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	b10a      	cbz	r2, 800eb62 <_printf_common+0x26>
 800eb5e:	3301      	adds	r3, #1
 800eb60:	6033      	str	r3, [r6, #0]
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	0699      	lsls	r1, r3, #26
 800eb66:	bf42      	ittt	mi
 800eb68:	6833      	ldrmi	r3, [r6, #0]
 800eb6a:	3302      	addmi	r3, #2
 800eb6c:	6033      	strmi	r3, [r6, #0]
 800eb6e:	6825      	ldr	r5, [r4, #0]
 800eb70:	f015 0506 	ands.w	r5, r5, #6
 800eb74:	d106      	bne.n	800eb84 <_printf_common+0x48>
 800eb76:	f104 0a19 	add.w	sl, r4, #25
 800eb7a:	68e3      	ldr	r3, [r4, #12]
 800eb7c:	6832      	ldr	r2, [r6, #0]
 800eb7e:	1a9b      	subs	r3, r3, r2
 800eb80:	42ab      	cmp	r3, r5
 800eb82:	dc26      	bgt.n	800ebd2 <_printf_common+0x96>
 800eb84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb88:	1e13      	subs	r3, r2, #0
 800eb8a:	6822      	ldr	r2, [r4, #0]
 800eb8c:	bf18      	it	ne
 800eb8e:	2301      	movne	r3, #1
 800eb90:	0692      	lsls	r2, r2, #26
 800eb92:	d42b      	bmi.n	800ebec <_printf_common+0xb0>
 800eb94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb98:	4649      	mov	r1, r9
 800eb9a:	4638      	mov	r0, r7
 800eb9c:	47c0      	blx	r8
 800eb9e:	3001      	adds	r0, #1
 800eba0:	d01e      	beq.n	800ebe0 <_printf_common+0xa4>
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	6922      	ldr	r2, [r4, #16]
 800eba6:	f003 0306 	and.w	r3, r3, #6
 800ebaa:	2b04      	cmp	r3, #4
 800ebac:	bf02      	ittt	eq
 800ebae:	68e5      	ldreq	r5, [r4, #12]
 800ebb0:	6833      	ldreq	r3, [r6, #0]
 800ebb2:	1aed      	subeq	r5, r5, r3
 800ebb4:	68a3      	ldr	r3, [r4, #8]
 800ebb6:	bf0c      	ite	eq
 800ebb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebbc:	2500      	movne	r5, #0
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	bfc4      	itt	gt
 800ebc2:	1a9b      	subgt	r3, r3, r2
 800ebc4:	18ed      	addgt	r5, r5, r3
 800ebc6:	2600      	movs	r6, #0
 800ebc8:	341a      	adds	r4, #26
 800ebca:	42b5      	cmp	r5, r6
 800ebcc:	d11a      	bne.n	800ec04 <_printf_common+0xc8>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	e008      	b.n	800ebe4 <_printf_common+0xa8>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	4652      	mov	r2, sl
 800ebd6:	4649      	mov	r1, r9
 800ebd8:	4638      	mov	r0, r7
 800ebda:	47c0      	blx	r8
 800ebdc:	3001      	adds	r0, #1
 800ebde:	d103      	bne.n	800ebe8 <_printf_common+0xac>
 800ebe0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe8:	3501      	adds	r5, #1
 800ebea:	e7c6      	b.n	800eb7a <_printf_common+0x3e>
 800ebec:	18e1      	adds	r1, r4, r3
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	2030      	movs	r0, #48	; 0x30
 800ebf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebf6:	4422      	add	r2, r4
 800ebf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec00:	3302      	adds	r3, #2
 800ec02:	e7c7      	b.n	800eb94 <_printf_common+0x58>
 800ec04:	2301      	movs	r3, #1
 800ec06:	4622      	mov	r2, r4
 800ec08:	4649      	mov	r1, r9
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	47c0      	blx	r8
 800ec0e:	3001      	adds	r0, #1
 800ec10:	d0e6      	beq.n	800ebe0 <_printf_common+0xa4>
 800ec12:	3601      	adds	r6, #1
 800ec14:	e7d9      	b.n	800ebca <_printf_common+0x8e>
	...

0800ec18 <_printf_i>:
 800ec18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec1c:	7e0f      	ldrb	r7, [r1, #24]
 800ec1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec20:	2f78      	cmp	r7, #120	; 0x78
 800ec22:	4691      	mov	r9, r2
 800ec24:	4680      	mov	r8, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	469a      	mov	sl, r3
 800ec2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec2e:	d807      	bhi.n	800ec40 <_printf_i+0x28>
 800ec30:	2f62      	cmp	r7, #98	; 0x62
 800ec32:	d80a      	bhi.n	800ec4a <_printf_i+0x32>
 800ec34:	2f00      	cmp	r7, #0
 800ec36:	f000 80d4 	beq.w	800ede2 <_printf_i+0x1ca>
 800ec3a:	2f58      	cmp	r7, #88	; 0x58
 800ec3c:	f000 80c0 	beq.w	800edc0 <_printf_i+0x1a8>
 800ec40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec48:	e03a      	b.n	800ecc0 <_printf_i+0xa8>
 800ec4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec4e:	2b15      	cmp	r3, #21
 800ec50:	d8f6      	bhi.n	800ec40 <_printf_i+0x28>
 800ec52:	a101      	add	r1, pc, #4	; (adr r1, 800ec58 <_printf_i+0x40>)
 800ec54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec58:	0800ecb1 	.word	0x0800ecb1
 800ec5c:	0800ecc5 	.word	0x0800ecc5
 800ec60:	0800ec41 	.word	0x0800ec41
 800ec64:	0800ec41 	.word	0x0800ec41
 800ec68:	0800ec41 	.word	0x0800ec41
 800ec6c:	0800ec41 	.word	0x0800ec41
 800ec70:	0800ecc5 	.word	0x0800ecc5
 800ec74:	0800ec41 	.word	0x0800ec41
 800ec78:	0800ec41 	.word	0x0800ec41
 800ec7c:	0800ec41 	.word	0x0800ec41
 800ec80:	0800ec41 	.word	0x0800ec41
 800ec84:	0800edc9 	.word	0x0800edc9
 800ec88:	0800ecf1 	.word	0x0800ecf1
 800ec8c:	0800ed83 	.word	0x0800ed83
 800ec90:	0800ec41 	.word	0x0800ec41
 800ec94:	0800ec41 	.word	0x0800ec41
 800ec98:	0800edeb 	.word	0x0800edeb
 800ec9c:	0800ec41 	.word	0x0800ec41
 800eca0:	0800ecf1 	.word	0x0800ecf1
 800eca4:	0800ec41 	.word	0x0800ec41
 800eca8:	0800ec41 	.word	0x0800ec41
 800ecac:	0800ed8b 	.word	0x0800ed8b
 800ecb0:	682b      	ldr	r3, [r5, #0]
 800ecb2:	1d1a      	adds	r2, r3, #4
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	602a      	str	r2, [r5, #0]
 800ecb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e09f      	b.n	800ee04 <_printf_i+0x1ec>
 800ecc4:	6820      	ldr	r0, [r4, #0]
 800ecc6:	682b      	ldr	r3, [r5, #0]
 800ecc8:	0607      	lsls	r7, r0, #24
 800ecca:	f103 0104 	add.w	r1, r3, #4
 800ecce:	6029      	str	r1, [r5, #0]
 800ecd0:	d501      	bpl.n	800ecd6 <_printf_i+0xbe>
 800ecd2:	681e      	ldr	r6, [r3, #0]
 800ecd4:	e003      	b.n	800ecde <_printf_i+0xc6>
 800ecd6:	0646      	lsls	r6, r0, #25
 800ecd8:	d5fb      	bpl.n	800ecd2 <_printf_i+0xba>
 800ecda:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ecde:	2e00      	cmp	r6, #0
 800ece0:	da03      	bge.n	800ecea <_printf_i+0xd2>
 800ece2:	232d      	movs	r3, #45	; 0x2d
 800ece4:	4276      	negs	r6, r6
 800ece6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecea:	485a      	ldr	r0, [pc, #360]	; (800ee54 <_printf_i+0x23c>)
 800ecec:	230a      	movs	r3, #10
 800ecee:	e012      	b.n	800ed16 <_printf_i+0xfe>
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	6820      	ldr	r0, [r4, #0]
 800ecf4:	1d19      	adds	r1, r3, #4
 800ecf6:	6029      	str	r1, [r5, #0]
 800ecf8:	0605      	lsls	r5, r0, #24
 800ecfa:	d501      	bpl.n	800ed00 <_printf_i+0xe8>
 800ecfc:	681e      	ldr	r6, [r3, #0]
 800ecfe:	e002      	b.n	800ed06 <_printf_i+0xee>
 800ed00:	0641      	lsls	r1, r0, #25
 800ed02:	d5fb      	bpl.n	800ecfc <_printf_i+0xe4>
 800ed04:	881e      	ldrh	r6, [r3, #0]
 800ed06:	4853      	ldr	r0, [pc, #332]	; (800ee54 <_printf_i+0x23c>)
 800ed08:	2f6f      	cmp	r7, #111	; 0x6f
 800ed0a:	bf0c      	ite	eq
 800ed0c:	2308      	moveq	r3, #8
 800ed0e:	230a      	movne	r3, #10
 800ed10:	2100      	movs	r1, #0
 800ed12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed16:	6865      	ldr	r5, [r4, #4]
 800ed18:	60a5      	str	r5, [r4, #8]
 800ed1a:	2d00      	cmp	r5, #0
 800ed1c:	bfa2      	ittt	ge
 800ed1e:	6821      	ldrge	r1, [r4, #0]
 800ed20:	f021 0104 	bicge.w	r1, r1, #4
 800ed24:	6021      	strge	r1, [r4, #0]
 800ed26:	b90e      	cbnz	r6, 800ed2c <_printf_i+0x114>
 800ed28:	2d00      	cmp	r5, #0
 800ed2a:	d04b      	beq.n	800edc4 <_printf_i+0x1ac>
 800ed2c:	4615      	mov	r5, r2
 800ed2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed32:	fb03 6711 	mls	r7, r3, r1, r6
 800ed36:	5dc7      	ldrb	r7, [r0, r7]
 800ed38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed3c:	4637      	mov	r7, r6
 800ed3e:	42bb      	cmp	r3, r7
 800ed40:	460e      	mov	r6, r1
 800ed42:	d9f4      	bls.n	800ed2e <_printf_i+0x116>
 800ed44:	2b08      	cmp	r3, #8
 800ed46:	d10b      	bne.n	800ed60 <_printf_i+0x148>
 800ed48:	6823      	ldr	r3, [r4, #0]
 800ed4a:	07de      	lsls	r6, r3, #31
 800ed4c:	d508      	bpl.n	800ed60 <_printf_i+0x148>
 800ed4e:	6923      	ldr	r3, [r4, #16]
 800ed50:	6861      	ldr	r1, [r4, #4]
 800ed52:	4299      	cmp	r1, r3
 800ed54:	bfde      	ittt	le
 800ed56:	2330      	movle	r3, #48	; 0x30
 800ed58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed60:	1b52      	subs	r2, r2, r5
 800ed62:	6122      	str	r2, [r4, #16]
 800ed64:	f8cd a000 	str.w	sl, [sp]
 800ed68:	464b      	mov	r3, r9
 800ed6a:	aa03      	add	r2, sp, #12
 800ed6c:	4621      	mov	r1, r4
 800ed6e:	4640      	mov	r0, r8
 800ed70:	f7ff fee4 	bl	800eb3c <_printf_common>
 800ed74:	3001      	adds	r0, #1
 800ed76:	d14a      	bne.n	800ee0e <_printf_i+0x1f6>
 800ed78:	f04f 30ff 	mov.w	r0, #4294967295
 800ed7c:	b004      	add	sp, #16
 800ed7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed82:	6823      	ldr	r3, [r4, #0]
 800ed84:	f043 0320 	orr.w	r3, r3, #32
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	4833      	ldr	r0, [pc, #204]	; (800ee58 <_printf_i+0x240>)
 800ed8c:	2778      	movs	r7, #120	; 0x78
 800ed8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	6829      	ldr	r1, [r5, #0]
 800ed96:	061f      	lsls	r7, r3, #24
 800ed98:	f851 6b04 	ldr.w	r6, [r1], #4
 800ed9c:	d402      	bmi.n	800eda4 <_printf_i+0x18c>
 800ed9e:	065f      	lsls	r7, r3, #25
 800eda0:	bf48      	it	mi
 800eda2:	b2b6      	uxthmi	r6, r6
 800eda4:	07df      	lsls	r7, r3, #31
 800eda6:	bf48      	it	mi
 800eda8:	f043 0320 	orrmi.w	r3, r3, #32
 800edac:	6029      	str	r1, [r5, #0]
 800edae:	bf48      	it	mi
 800edb0:	6023      	strmi	r3, [r4, #0]
 800edb2:	b91e      	cbnz	r6, 800edbc <_printf_i+0x1a4>
 800edb4:	6823      	ldr	r3, [r4, #0]
 800edb6:	f023 0320 	bic.w	r3, r3, #32
 800edba:	6023      	str	r3, [r4, #0]
 800edbc:	2310      	movs	r3, #16
 800edbe:	e7a7      	b.n	800ed10 <_printf_i+0xf8>
 800edc0:	4824      	ldr	r0, [pc, #144]	; (800ee54 <_printf_i+0x23c>)
 800edc2:	e7e4      	b.n	800ed8e <_printf_i+0x176>
 800edc4:	4615      	mov	r5, r2
 800edc6:	e7bd      	b.n	800ed44 <_printf_i+0x12c>
 800edc8:	682b      	ldr	r3, [r5, #0]
 800edca:	6826      	ldr	r6, [r4, #0]
 800edcc:	6961      	ldr	r1, [r4, #20]
 800edce:	1d18      	adds	r0, r3, #4
 800edd0:	6028      	str	r0, [r5, #0]
 800edd2:	0635      	lsls	r5, r6, #24
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	d501      	bpl.n	800eddc <_printf_i+0x1c4>
 800edd8:	6019      	str	r1, [r3, #0]
 800edda:	e002      	b.n	800ede2 <_printf_i+0x1ca>
 800eddc:	0670      	lsls	r0, r6, #25
 800edde:	d5fb      	bpl.n	800edd8 <_printf_i+0x1c0>
 800ede0:	8019      	strh	r1, [r3, #0]
 800ede2:	2300      	movs	r3, #0
 800ede4:	6123      	str	r3, [r4, #16]
 800ede6:	4615      	mov	r5, r2
 800ede8:	e7bc      	b.n	800ed64 <_printf_i+0x14c>
 800edea:	682b      	ldr	r3, [r5, #0]
 800edec:	1d1a      	adds	r2, r3, #4
 800edee:	602a      	str	r2, [r5, #0]
 800edf0:	681d      	ldr	r5, [r3, #0]
 800edf2:	6862      	ldr	r2, [r4, #4]
 800edf4:	2100      	movs	r1, #0
 800edf6:	4628      	mov	r0, r5
 800edf8:	f7f1 fa0a 	bl	8000210 <memchr>
 800edfc:	b108      	cbz	r0, 800ee02 <_printf_i+0x1ea>
 800edfe:	1b40      	subs	r0, r0, r5
 800ee00:	6060      	str	r0, [r4, #4]
 800ee02:	6863      	ldr	r3, [r4, #4]
 800ee04:	6123      	str	r3, [r4, #16]
 800ee06:	2300      	movs	r3, #0
 800ee08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee0c:	e7aa      	b.n	800ed64 <_printf_i+0x14c>
 800ee0e:	6923      	ldr	r3, [r4, #16]
 800ee10:	462a      	mov	r2, r5
 800ee12:	4649      	mov	r1, r9
 800ee14:	4640      	mov	r0, r8
 800ee16:	47d0      	blx	sl
 800ee18:	3001      	adds	r0, #1
 800ee1a:	d0ad      	beq.n	800ed78 <_printf_i+0x160>
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	079b      	lsls	r3, r3, #30
 800ee20:	d413      	bmi.n	800ee4a <_printf_i+0x232>
 800ee22:	68e0      	ldr	r0, [r4, #12]
 800ee24:	9b03      	ldr	r3, [sp, #12]
 800ee26:	4298      	cmp	r0, r3
 800ee28:	bfb8      	it	lt
 800ee2a:	4618      	movlt	r0, r3
 800ee2c:	e7a6      	b.n	800ed7c <_printf_i+0x164>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	4632      	mov	r2, r6
 800ee32:	4649      	mov	r1, r9
 800ee34:	4640      	mov	r0, r8
 800ee36:	47d0      	blx	sl
 800ee38:	3001      	adds	r0, #1
 800ee3a:	d09d      	beq.n	800ed78 <_printf_i+0x160>
 800ee3c:	3501      	adds	r5, #1
 800ee3e:	68e3      	ldr	r3, [r4, #12]
 800ee40:	9903      	ldr	r1, [sp, #12]
 800ee42:	1a5b      	subs	r3, r3, r1
 800ee44:	42ab      	cmp	r3, r5
 800ee46:	dcf2      	bgt.n	800ee2e <_printf_i+0x216>
 800ee48:	e7eb      	b.n	800ee22 <_printf_i+0x20a>
 800ee4a:	2500      	movs	r5, #0
 800ee4c:	f104 0619 	add.w	r6, r4, #25
 800ee50:	e7f5      	b.n	800ee3e <_printf_i+0x226>
 800ee52:	bf00      	nop
 800ee54:	0800fcf3 	.word	0x0800fcf3
 800ee58:	0800fd04 	.word	0x0800fd04

0800ee5c <__sflush_r>:
 800ee5c:	898a      	ldrh	r2, [r1, #12]
 800ee5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee62:	4605      	mov	r5, r0
 800ee64:	0710      	lsls	r0, r2, #28
 800ee66:	460c      	mov	r4, r1
 800ee68:	d458      	bmi.n	800ef1c <__sflush_r+0xc0>
 800ee6a:	684b      	ldr	r3, [r1, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	dc05      	bgt.n	800ee7c <__sflush_r+0x20>
 800ee70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	dc02      	bgt.n	800ee7c <__sflush_r+0x20>
 800ee76:	2000      	movs	r0, #0
 800ee78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee7e:	2e00      	cmp	r6, #0
 800ee80:	d0f9      	beq.n	800ee76 <__sflush_r+0x1a>
 800ee82:	2300      	movs	r3, #0
 800ee84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee88:	682f      	ldr	r7, [r5, #0]
 800ee8a:	6a21      	ldr	r1, [r4, #32]
 800ee8c:	602b      	str	r3, [r5, #0]
 800ee8e:	d032      	beq.n	800eef6 <__sflush_r+0x9a>
 800ee90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee92:	89a3      	ldrh	r3, [r4, #12]
 800ee94:	075a      	lsls	r2, r3, #29
 800ee96:	d505      	bpl.n	800eea4 <__sflush_r+0x48>
 800ee98:	6863      	ldr	r3, [r4, #4]
 800ee9a:	1ac0      	subs	r0, r0, r3
 800ee9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee9e:	b10b      	cbz	r3, 800eea4 <__sflush_r+0x48>
 800eea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eea2:	1ac0      	subs	r0, r0, r3
 800eea4:	2300      	movs	r3, #0
 800eea6:	4602      	mov	r2, r0
 800eea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eeaa:	6a21      	ldr	r1, [r4, #32]
 800eeac:	4628      	mov	r0, r5
 800eeae:	47b0      	blx	r6
 800eeb0:	1c43      	adds	r3, r0, #1
 800eeb2:	89a3      	ldrh	r3, [r4, #12]
 800eeb4:	d106      	bne.n	800eec4 <__sflush_r+0x68>
 800eeb6:	6829      	ldr	r1, [r5, #0]
 800eeb8:	291d      	cmp	r1, #29
 800eeba:	d82b      	bhi.n	800ef14 <__sflush_r+0xb8>
 800eebc:	4a29      	ldr	r2, [pc, #164]	; (800ef64 <__sflush_r+0x108>)
 800eebe:	410a      	asrs	r2, r1
 800eec0:	07d6      	lsls	r6, r2, #31
 800eec2:	d427      	bmi.n	800ef14 <__sflush_r+0xb8>
 800eec4:	2200      	movs	r2, #0
 800eec6:	6062      	str	r2, [r4, #4]
 800eec8:	04d9      	lsls	r1, r3, #19
 800eeca:	6922      	ldr	r2, [r4, #16]
 800eecc:	6022      	str	r2, [r4, #0]
 800eece:	d504      	bpl.n	800eeda <__sflush_r+0x7e>
 800eed0:	1c42      	adds	r2, r0, #1
 800eed2:	d101      	bne.n	800eed8 <__sflush_r+0x7c>
 800eed4:	682b      	ldr	r3, [r5, #0]
 800eed6:	b903      	cbnz	r3, 800eeda <__sflush_r+0x7e>
 800eed8:	6560      	str	r0, [r4, #84]	; 0x54
 800eeda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eedc:	602f      	str	r7, [r5, #0]
 800eede:	2900      	cmp	r1, #0
 800eee0:	d0c9      	beq.n	800ee76 <__sflush_r+0x1a>
 800eee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eee6:	4299      	cmp	r1, r3
 800eee8:	d002      	beq.n	800eef0 <__sflush_r+0x94>
 800eeea:	4628      	mov	r0, r5
 800eeec:	f7ff fbce 	bl	800e68c <_free_r>
 800eef0:	2000      	movs	r0, #0
 800eef2:	6360      	str	r0, [r4, #52]	; 0x34
 800eef4:	e7c0      	b.n	800ee78 <__sflush_r+0x1c>
 800eef6:	2301      	movs	r3, #1
 800eef8:	4628      	mov	r0, r5
 800eefa:	47b0      	blx	r6
 800eefc:	1c41      	adds	r1, r0, #1
 800eefe:	d1c8      	bne.n	800ee92 <__sflush_r+0x36>
 800ef00:	682b      	ldr	r3, [r5, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d0c5      	beq.n	800ee92 <__sflush_r+0x36>
 800ef06:	2b1d      	cmp	r3, #29
 800ef08:	d001      	beq.n	800ef0e <__sflush_r+0xb2>
 800ef0a:	2b16      	cmp	r3, #22
 800ef0c:	d101      	bne.n	800ef12 <__sflush_r+0xb6>
 800ef0e:	602f      	str	r7, [r5, #0]
 800ef10:	e7b1      	b.n	800ee76 <__sflush_r+0x1a>
 800ef12:	89a3      	ldrh	r3, [r4, #12]
 800ef14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef18:	81a3      	strh	r3, [r4, #12]
 800ef1a:	e7ad      	b.n	800ee78 <__sflush_r+0x1c>
 800ef1c:	690f      	ldr	r7, [r1, #16]
 800ef1e:	2f00      	cmp	r7, #0
 800ef20:	d0a9      	beq.n	800ee76 <__sflush_r+0x1a>
 800ef22:	0793      	lsls	r3, r2, #30
 800ef24:	680e      	ldr	r6, [r1, #0]
 800ef26:	bf08      	it	eq
 800ef28:	694b      	ldreq	r3, [r1, #20]
 800ef2a:	600f      	str	r7, [r1, #0]
 800ef2c:	bf18      	it	ne
 800ef2e:	2300      	movne	r3, #0
 800ef30:	eba6 0807 	sub.w	r8, r6, r7
 800ef34:	608b      	str	r3, [r1, #8]
 800ef36:	f1b8 0f00 	cmp.w	r8, #0
 800ef3a:	dd9c      	ble.n	800ee76 <__sflush_r+0x1a>
 800ef3c:	6a21      	ldr	r1, [r4, #32]
 800ef3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef40:	4643      	mov	r3, r8
 800ef42:	463a      	mov	r2, r7
 800ef44:	4628      	mov	r0, r5
 800ef46:	47b0      	blx	r6
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	dc06      	bgt.n	800ef5a <__sflush_r+0xfe>
 800ef4c:	89a3      	ldrh	r3, [r4, #12]
 800ef4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef52:	81a3      	strh	r3, [r4, #12]
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	e78e      	b.n	800ee78 <__sflush_r+0x1c>
 800ef5a:	4407      	add	r7, r0
 800ef5c:	eba8 0800 	sub.w	r8, r8, r0
 800ef60:	e7e9      	b.n	800ef36 <__sflush_r+0xda>
 800ef62:	bf00      	nop
 800ef64:	dfbffffe 	.word	0xdfbffffe

0800ef68 <_fflush_r>:
 800ef68:	b538      	push	{r3, r4, r5, lr}
 800ef6a:	690b      	ldr	r3, [r1, #16]
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	460c      	mov	r4, r1
 800ef70:	b913      	cbnz	r3, 800ef78 <_fflush_r+0x10>
 800ef72:	2500      	movs	r5, #0
 800ef74:	4628      	mov	r0, r5
 800ef76:	bd38      	pop	{r3, r4, r5, pc}
 800ef78:	b118      	cbz	r0, 800ef82 <_fflush_r+0x1a>
 800ef7a:	6a03      	ldr	r3, [r0, #32]
 800ef7c:	b90b      	cbnz	r3, 800ef82 <_fflush_r+0x1a>
 800ef7e:	f7ff f9dd 	bl	800e33c <__sinit>
 800ef82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d0f3      	beq.n	800ef72 <_fflush_r+0xa>
 800ef8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef8c:	07d0      	lsls	r0, r2, #31
 800ef8e:	d404      	bmi.n	800ef9a <_fflush_r+0x32>
 800ef90:	0599      	lsls	r1, r3, #22
 800ef92:	d402      	bmi.n	800ef9a <_fflush_r+0x32>
 800ef94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef96:	f7ff fb51 	bl	800e63c <__retarget_lock_acquire_recursive>
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	4621      	mov	r1, r4
 800ef9e:	f7ff ff5d 	bl	800ee5c <__sflush_r>
 800efa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efa4:	07da      	lsls	r2, r3, #31
 800efa6:	4605      	mov	r5, r0
 800efa8:	d4e4      	bmi.n	800ef74 <_fflush_r+0xc>
 800efaa:	89a3      	ldrh	r3, [r4, #12]
 800efac:	059b      	lsls	r3, r3, #22
 800efae:	d4e1      	bmi.n	800ef74 <_fflush_r+0xc>
 800efb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efb2:	f7ff fb44 	bl	800e63e <__retarget_lock_release_recursive>
 800efb6:	e7dd      	b.n	800ef74 <_fflush_r+0xc>

0800efb8 <fiprintf>:
 800efb8:	b40e      	push	{r1, r2, r3}
 800efba:	b503      	push	{r0, r1, lr}
 800efbc:	4601      	mov	r1, r0
 800efbe:	ab03      	add	r3, sp, #12
 800efc0:	4805      	ldr	r0, [pc, #20]	; (800efd8 <fiprintf+0x20>)
 800efc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc6:	6800      	ldr	r0, [r0, #0]
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	f000 f89f 	bl	800f10c <_vfiprintf_r>
 800efce:	b002      	add	sp, #8
 800efd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efd4:	b003      	add	sp, #12
 800efd6:	4770      	bx	lr
 800efd8:	20000178 	.word	0x20000178

0800efdc <memmove>:
 800efdc:	4288      	cmp	r0, r1
 800efde:	b510      	push	{r4, lr}
 800efe0:	eb01 0402 	add.w	r4, r1, r2
 800efe4:	d902      	bls.n	800efec <memmove+0x10>
 800efe6:	4284      	cmp	r4, r0
 800efe8:	4623      	mov	r3, r4
 800efea:	d807      	bhi.n	800effc <memmove+0x20>
 800efec:	1e43      	subs	r3, r0, #1
 800efee:	42a1      	cmp	r1, r4
 800eff0:	d008      	beq.n	800f004 <memmove+0x28>
 800eff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800effa:	e7f8      	b.n	800efee <memmove+0x12>
 800effc:	4402      	add	r2, r0
 800effe:	4601      	mov	r1, r0
 800f000:	428a      	cmp	r2, r1
 800f002:	d100      	bne.n	800f006 <memmove+0x2a>
 800f004:	bd10      	pop	{r4, pc}
 800f006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f00a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f00e:	e7f7      	b.n	800f000 <memmove+0x24>

0800f010 <_sbrk_r>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	4d06      	ldr	r5, [pc, #24]	; (800f02c <_sbrk_r+0x1c>)
 800f014:	2300      	movs	r3, #0
 800f016:	4604      	mov	r4, r0
 800f018:	4608      	mov	r0, r1
 800f01a:	602b      	str	r3, [r5, #0]
 800f01c:	f7f3 fa98 	bl	8002550 <_sbrk>
 800f020:	1c43      	adds	r3, r0, #1
 800f022:	d102      	bne.n	800f02a <_sbrk_r+0x1a>
 800f024:	682b      	ldr	r3, [r5, #0]
 800f026:	b103      	cbz	r3, 800f02a <_sbrk_r+0x1a>
 800f028:	6023      	str	r3, [r4, #0]
 800f02a:	bd38      	pop	{r3, r4, r5, pc}
 800f02c:	20003700 	.word	0x20003700

0800f030 <memcpy>:
 800f030:	440a      	add	r2, r1
 800f032:	4291      	cmp	r1, r2
 800f034:	f100 33ff 	add.w	r3, r0, #4294967295
 800f038:	d100      	bne.n	800f03c <memcpy+0xc>
 800f03a:	4770      	bx	lr
 800f03c:	b510      	push	{r4, lr}
 800f03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f042:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f046:	4291      	cmp	r1, r2
 800f048:	d1f9      	bne.n	800f03e <memcpy+0xe>
 800f04a:	bd10      	pop	{r4, pc}

0800f04c <abort>:
 800f04c:	b508      	push	{r3, lr}
 800f04e:	2006      	movs	r0, #6
 800f050:	f000 fa34 	bl	800f4bc <raise>
 800f054:	2001      	movs	r0, #1
 800f056:	f7f3 fa03 	bl	8002460 <_exit>

0800f05a <_realloc_r>:
 800f05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f05e:	4680      	mov	r8, r0
 800f060:	4614      	mov	r4, r2
 800f062:	460e      	mov	r6, r1
 800f064:	b921      	cbnz	r1, 800f070 <_realloc_r+0x16>
 800f066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f06a:	4611      	mov	r1, r2
 800f06c:	f7ff bb82 	b.w	800e774 <_malloc_r>
 800f070:	b92a      	cbnz	r2, 800f07e <_realloc_r+0x24>
 800f072:	f7ff fb0b 	bl	800e68c <_free_r>
 800f076:	4625      	mov	r5, r4
 800f078:	4628      	mov	r0, r5
 800f07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f07e:	f000 fa39 	bl	800f4f4 <_malloc_usable_size_r>
 800f082:	4284      	cmp	r4, r0
 800f084:	4607      	mov	r7, r0
 800f086:	d802      	bhi.n	800f08e <_realloc_r+0x34>
 800f088:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f08c:	d812      	bhi.n	800f0b4 <_realloc_r+0x5a>
 800f08e:	4621      	mov	r1, r4
 800f090:	4640      	mov	r0, r8
 800f092:	f7ff fb6f 	bl	800e774 <_malloc_r>
 800f096:	4605      	mov	r5, r0
 800f098:	2800      	cmp	r0, #0
 800f09a:	d0ed      	beq.n	800f078 <_realloc_r+0x1e>
 800f09c:	42bc      	cmp	r4, r7
 800f09e:	4622      	mov	r2, r4
 800f0a0:	4631      	mov	r1, r6
 800f0a2:	bf28      	it	cs
 800f0a4:	463a      	movcs	r2, r7
 800f0a6:	f7ff ffc3 	bl	800f030 <memcpy>
 800f0aa:	4631      	mov	r1, r6
 800f0ac:	4640      	mov	r0, r8
 800f0ae:	f7ff faed 	bl	800e68c <_free_r>
 800f0b2:	e7e1      	b.n	800f078 <_realloc_r+0x1e>
 800f0b4:	4635      	mov	r5, r6
 800f0b6:	e7df      	b.n	800f078 <_realloc_r+0x1e>

0800f0b8 <__sfputc_r>:
 800f0b8:	6893      	ldr	r3, [r2, #8]
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	b410      	push	{r4}
 800f0c0:	6093      	str	r3, [r2, #8]
 800f0c2:	da08      	bge.n	800f0d6 <__sfputc_r+0x1e>
 800f0c4:	6994      	ldr	r4, [r2, #24]
 800f0c6:	42a3      	cmp	r3, r4
 800f0c8:	db01      	blt.n	800f0ce <__sfputc_r+0x16>
 800f0ca:	290a      	cmp	r1, #10
 800f0cc:	d103      	bne.n	800f0d6 <__sfputc_r+0x1e>
 800f0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0d2:	f000 b935 	b.w	800f340 <__swbuf_r>
 800f0d6:	6813      	ldr	r3, [r2, #0]
 800f0d8:	1c58      	adds	r0, r3, #1
 800f0da:	6010      	str	r0, [r2, #0]
 800f0dc:	7019      	strb	r1, [r3, #0]
 800f0de:	4608      	mov	r0, r1
 800f0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0e4:	4770      	bx	lr

0800f0e6 <__sfputs_r>:
 800f0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e8:	4606      	mov	r6, r0
 800f0ea:	460f      	mov	r7, r1
 800f0ec:	4614      	mov	r4, r2
 800f0ee:	18d5      	adds	r5, r2, r3
 800f0f0:	42ac      	cmp	r4, r5
 800f0f2:	d101      	bne.n	800f0f8 <__sfputs_r+0x12>
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	e007      	b.n	800f108 <__sfputs_r+0x22>
 800f0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0fc:	463a      	mov	r2, r7
 800f0fe:	4630      	mov	r0, r6
 800f100:	f7ff ffda 	bl	800f0b8 <__sfputc_r>
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d1f3      	bne.n	800f0f0 <__sfputs_r+0xa>
 800f108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f10c <_vfiprintf_r>:
 800f10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f110:	460d      	mov	r5, r1
 800f112:	b09d      	sub	sp, #116	; 0x74
 800f114:	4614      	mov	r4, r2
 800f116:	4698      	mov	r8, r3
 800f118:	4606      	mov	r6, r0
 800f11a:	b118      	cbz	r0, 800f124 <_vfiprintf_r+0x18>
 800f11c:	6a03      	ldr	r3, [r0, #32]
 800f11e:	b90b      	cbnz	r3, 800f124 <_vfiprintf_r+0x18>
 800f120:	f7ff f90c 	bl	800e33c <__sinit>
 800f124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f126:	07d9      	lsls	r1, r3, #31
 800f128:	d405      	bmi.n	800f136 <_vfiprintf_r+0x2a>
 800f12a:	89ab      	ldrh	r3, [r5, #12]
 800f12c:	059a      	lsls	r2, r3, #22
 800f12e:	d402      	bmi.n	800f136 <_vfiprintf_r+0x2a>
 800f130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f132:	f7ff fa83 	bl	800e63c <__retarget_lock_acquire_recursive>
 800f136:	89ab      	ldrh	r3, [r5, #12]
 800f138:	071b      	lsls	r3, r3, #28
 800f13a:	d501      	bpl.n	800f140 <_vfiprintf_r+0x34>
 800f13c:	692b      	ldr	r3, [r5, #16]
 800f13e:	b99b      	cbnz	r3, 800f168 <_vfiprintf_r+0x5c>
 800f140:	4629      	mov	r1, r5
 800f142:	4630      	mov	r0, r6
 800f144:	f000 f93a 	bl	800f3bc <__swsetup_r>
 800f148:	b170      	cbz	r0, 800f168 <_vfiprintf_r+0x5c>
 800f14a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f14c:	07dc      	lsls	r4, r3, #31
 800f14e:	d504      	bpl.n	800f15a <_vfiprintf_r+0x4e>
 800f150:	f04f 30ff 	mov.w	r0, #4294967295
 800f154:	b01d      	add	sp, #116	; 0x74
 800f156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f15a:	89ab      	ldrh	r3, [r5, #12]
 800f15c:	0598      	lsls	r0, r3, #22
 800f15e:	d4f7      	bmi.n	800f150 <_vfiprintf_r+0x44>
 800f160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f162:	f7ff fa6c 	bl	800e63e <__retarget_lock_release_recursive>
 800f166:	e7f3      	b.n	800f150 <_vfiprintf_r+0x44>
 800f168:	2300      	movs	r3, #0
 800f16a:	9309      	str	r3, [sp, #36]	; 0x24
 800f16c:	2320      	movs	r3, #32
 800f16e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f172:	f8cd 800c 	str.w	r8, [sp, #12]
 800f176:	2330      	movs	r3, #48	; 0x30
 800f178:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f32c <_vfiprintf_r+0x220>
 800f17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f180:	f04f 0901 	mov.w	r9, #1
 800f184:	4623      	mov	r3, r4
 800f186:	469a      	mov	sl, r3
 800f188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f18c:	b10a      	cbz	r2, 800f192 <_vfiprintf_r+0x86>
 800f18e:	2a25      	cmp	r2, #37	; 0x25
 800f190:	d1f9      	bne.n	800f186 <_vfiprintf_r+0x7a>
 800f192:	ebba 0b04 	subs.w	fp, sl, r4
 800f196:	d00b      	beq.n	800f1b0 <_vfiprintf_r+0xa4>
 800f198:	465b      	mov	r3, fp
 800f19a:	4622      	mov	r2, r4
 800f19c:	4629      	mov	r1, r5
 800f19e:	4630      	mov	r0, r6
 800f1a0:	f7ff ffa1 	bl	800f0e6 <__sfputs_r>
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	f000 80a9 	beq.w	800f2fc <_vfiprintf_r+0x1f0>
 800f1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ac:	445a      	add	r2, fp
 800f1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800f1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f000 80a1 	beq.w	800f2fc <_vfiprintf_r+0x1f0>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1c4:	f10a 0a01 	add.w	sl, sl, #1
 800f1c8:	9304      	str	r3, [sp, #16]
 800f1ca:	9307      	str	r3, [sp, #28]
 800f1cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1d0:	931a      	str	r3, [sp, #104]	; 0x68
 800f1d2:	4654      	mov	r4, sl
 800f1d4:	2205      	movs	r2, #5
 800f1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1da:	4854      	ldr	r0, [pc, #336]	; (800f32c <_vfiprintf_r+0x220>)
 800f1dc:	f7f1 f818 	bl	8000210 <memchr>
 800f1e0:	9a04      	ldr	r2, [sp, #16]
 800f1e2:	b9d8      	cbnz	r0, 800f21c <_vfiprintf_r+0x110>
 800f1e4:	06d1      	lsls	r1, r2, #27
 800f1e6:	bf44      	itt	mi
 800f1e8:	2320      	movmi	r3, #32
 800f1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1ee:	0713      	lsls	r3, r2, #28
 800f1f0:	bf44      	itt	mi
 800f1f2:	232b      	movmi	r3, #43	; 0x2b
 800f1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800f1fe:	d015      	beq.n	800f22c <_vfiprintf_r+0x120>
 800f200:	9a07      	ldr	r2, [sp, #28]
 800f202:	4654      	mov	r4, sl
 800f204:	2000      	movs	r0, #0
 800f206:	f04f 0c0a 	mov.w	ip, #10
 800f20a:	4621      	mov	r1, r4
 800f20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f210:	3b30      	subs	r3, #48	; 0x30
 800f212:	2b09      	cmp	r3, #9
 800f214:	d94d      	bls.n	800f2b2 <_vfiprintf_r+0x1a6>
 800f216:	b1b0      	cbz	r0, 800f246 <_vfiprintf_r+0x13a>
 800f218:	9207      	str	r2, [sp, #28]
 800f21a:	e014      	b.n	800f246 <_vfiprintf_r+0x13a>
 800f21c:	eba0 0308 	sub.w	r3, r0, r8
 800f220:	fa09 f303 	lsl.w	r3, r9, r3
 800f224:	4313      	orrs	r3, r2
 800f226:	9304      	str	r3, [sp, #16]
 800f228:	46a2      	mov	sl, r4
 800f22a:	e7d2      	b.n	800f1d2 <_vfiprintf_r+0xc6>
 800f22c:	9b03      	ldr	r3, [sp, #12]
 800f22e:	1d19      	adds	r1, r3, #4
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	9103      	str	r1, [sp, #12]
 800f234:	2b00      	cmp	r3, #0
 800f236:	bfbb      	ittet	lt
 800f238:	425b      	neglt	r3, r3
 800f23a:	f042 0202 	orrlt.w	r2, r2, #2
 800f23e:	9307      	strge	r3, [sp, #28]
 800f240:	9307      	strlt	r3, [sp, #28]
 800f242:	bfb8      	it	lt
 800f244:	9204      	strlt	r2, [sp, #16]
 800f246:	7823      	ldrb	r3, [r4, #0]
 800f248:	2b2e      	cmp	r3, #46	; 0x2e
 800f24a:	d10c      	bne.n	800f266 <_vfiprintf_r+0x15a>
 800f24c:	7863      	ldrb	r3, [r4, #1]
 800f24e:	2b2a      	cmp	r3, #42	; 0x2a
 800f250:	d134      	bne.n	800f2bc <_vfiprintf_r+0x1b0>
 800f252:	9b03      	ldr	r3, [sp, #12]
 800f254:	1d1a      	adds	r2, r3, #4
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	9203      	str	r2, [sp, #12]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	bfb8      	it	lt
 800f25e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f262:	3402      	adds	r4, #2
 800f264:	9305      	str	r3, [sp, #20]
 800f266:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f33c <_vfiprintf_r+0x230>
 800f26a:	7821      	ldrb	r1, [r4, #0]
 800f26c:	2203      	movs	r2, #3
 800f26e:	4650      	mov	r0, sl
 800f270:	f7f0 ffce 	bl	8000210 <memchr>
 800f274:	b138      	cbz	r0, 800f286 <_vfiprintf_r+0x17a>
 800f276:	9b04      	ldr	r3, [sp, #16]
 800f278:	eba0 000a 	sub.w	r0, r0, sl
 800f27c:	2240      	movs	r2, #64	; 0x40
 800f27e:	4082      	lsls	r2, r0
 800f280:	4313      	orrs	r3, r2
 800f282:	3401      	adds	r4, #1
 800f284:	9304      	str	r3, [sp, #16]
 800f286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f28a:	4829      	ldr	r0, [pc, #164]	; (800f330 <_vfiprintf_r+0x224>)
 800f28c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f290:	2206      	movs	r2, #6
 800f292:	f7f0 ffbd 	bl	8000210 <memchr>
 800f296:	2800      	cmp	r0, #0
 800f298:	d03f      	beq.n	800f31a <_vfiprintf_r+0x20e>
 800f29a:	4b26      	ldr	r3, [pc, #152]	; (800f334 <_vfiprintf_r+0x228>)
 800f29c:	bb1b      	cbnz	r3, 800f2e6 <_vfiprintf_r+0x1da>
 800f29e:	9b03      	ldr	r3, [sp, #12]
 800f2a0:	3307      	adds	r3, #7
 800f2a2:	f023 0307 	bic.w	r3, r3, #7
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	9303      	str	r3, [sp, #12]
 800f2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ac:	443b      	add	r3, r7
 800f2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800f2b0:	e768      	b.n	800f184 <_vfiprintf_r+0x78>
 800f2b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	2001      	movs	r0, #1
 800f2ba:	e7a6      	b.n	800f20a <_vfiprintf_r+0xfe>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	3401      	adds	r4, #1
 800f2c0:	9305      	str	r3, [sp, #20]
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	f04f 0c0a 	mov.w	ip, #10
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2ce:	3a30      	subs	r2, #48	; 0x30
 800f2d0:	2a09      	cmp	r2, #9
 800f2d2:	d903      	bls.n	800f2dc <_vfiprintf_r+0x1d0>
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d0c6      	beq.n	800f266 <_vfiprintf_r+0x15a>
 800f2d8:	9105      	str	r1, [sp, #20]
 800f2da:	e7c4      	b.n	800f266 <_vfiprintf_r+0x15a>
 800f2dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e7f0      	b.n	800f2c8 <_vfiprintf_r+0x1bc>
 800f2e6:	ab03      	add	r3, sp, #12
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	462a      	mov	r2, r5
 800f2ec:	4b12      	ldr	r3, [pc, #72]	; (800f338 <_vfiprintf_r+0x22c>)
 800f2ee:	a904      	add	r1, sp, #16
 800f2f0:	4630      	mov	r0, r6
 800f2f2:	f3af 8000 	nop.w
 800f2f6:	4607      	mov	r7, r0
 800f2f8:	1c78      	adds	r0, r7, #1
 800f2fa:	d1d6      	bne.n	800f2aa <_vfiprintf_r+0x19e>
 800f2fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2fe:	07d9      	lsls	r1, r3, #31
 800f300:	d405      	bmi.n	800f30e <_vfiprintf_r+0x202>
 800f302:	89ab      	ldrh	r3, [r5, #12]
 800f304:	059a      	lsls	r2, r3, #22
 800f306:	d402      	bmi.n	800f30e <_vfiprintf_r+0x202>
 800f308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f30a:	f7ff f998 	bl	800e63e <__retarget_lock_release_recursive>
 800f30e:	89ab      	ldrh	r3, [r5, #12]
 800f310:	065b      	lsls	r3, r3, #25
 800f312:	f53f af1d 	bmi.w	800f150 <_vfiprintf_r+0x44>
 800f316:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f318:	e71c      	b.n	800f154 <_vfiprintf_r+0x48>
 800f31a:	ab03      	add	r3, sp, #12
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	462a      	mov	r2, r5
 800f320:	4b05      	ldr	r3, [pc, #20]	; (800f338 <_vfiprintf_r+0x22c>)
 800f322:	a904      	add	r1, sp, #16
 800f324:	4630      	mov	r0, r6
 800f326:	f7ff fc77 	bl	800ec18 <_printf_i>
 800f32a:	e7e4      	b.n	800f2f6 <_vfiprintf_r+0x1ea>
 800f32c:	0800fce2 	.word	0x0800fce2
 800f330:	0800fcec 	.word	0x0800fcec
 800f334:	00000000 	.word	0x00000000
 800f338:	0800f0e7 	.word	0x0800f0e7
 800f33c:	0800fce8 	.word	0x0800fce8

0800f340 <__swbuf_r>:
 800f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f342:	460e      	mov	r6, r1
 800f344:	4614      	mov	r4, r2
 800f346:	4605      	mov	r5, r0
 800f348:	b118      	cbz	r0, 800f352 <__swbuf_r+0x12>
 800f34a:	6a03      	ldr	r3, [r0, #32]
 800f34c:	b90b      	cbnz	r3, 800f352 <__swbuf_r+0x12>
 800f34e:	f7fe fff5 	bl	800e33c <__sinit>
 800f352:	69a3      	ldr	r3, [r4, #24]
 800f354:	60a3      	str	r3, [r4, #8]
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	071a      	lsls	r2, r3, #28
 800f35a:	d525      	bpl.n	800f3a8 <__swbuf_r+0x68>
 800f35c:	6923      	ldr	r3, [r4, #16]
 800f35e:	b31b      	cbz	r3, 800f3a8 <__swbuf_r+0x68>
 800f360:	6823      	ldr	r3, [r4, #0]
 800f362:	6922      	ldr	r2, [r4, #16]
 800f364:	1a98      	subs	r0, r3, r2
 800f366:	6963      	ldr	r3, [r4, #20]
 800f368:	b2f6      	uxtb	r6, r6
 800f36a:	4283      	cmp	r3, r0
 800f36c:	4637      	mov	r7, r6
 800f36e:	dc04      	bgt.n	800f37a <__swbuf_r+0x3a>
 800f370:	4621      	mov	r1, r4
 800f372:	4628      	mov	r0, r5
 800f374:	f7ff fdf8 	bl	800ef68 <_fflush_r>
 800f378:	b9e0      	cbnz	r0, 800f3b4 <__swbuf_r+0x74>
 800f37a:	68a3      	ldr	r3, [r4, #8]
 800f37c:	3b01      	subs	r3, #1
 800f37e:	60a3      	str	r3, [r4, #8]
 800f380:	6823      	ldr	r3, [r4, #0]
 800f382:	1c5a      	adds	r2, r3, #1
 800f384:	6022      	str	r2, [r4, #0]
 800f386:	701e      	strb	r6, [r3, #0]
 800f388:	6962      	ldr	r2, [r4, #20]
 800f38a:	1c43      	adds	r3, r0, #1
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d004      	beq.n	800f39a <__swbuf_r+0x5a>
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	07db      	lsls	r3, r3, #31
 800f394:	d506      	bpl.n	800f3a4 <__swbuf_r+0x64>
 800f396:	2e0a      	cmp	r6, #10
 800f398:	d104      	bne.n	800f3a4 <__swbuf_r+0x64>
 800f39a:	4621      	mov	r1, r4
 800f39c:	4628      	mov	r0, r5
 800f39e:	f7ff fde3 	bl	800ef68 <_fflush_r>
 800f3a2:	b938      	cbnz	r0, 800f3b4 <__swbuf_r+0x74>
 800f3a4:	4638      	mov	r0, r7
 800f3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3a8:	4621      	mov	r1, r4
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f000 f806 	bl	800f3bc <__swsetup_r>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d0d5      	beq.n	800f360 <__swbuf_r+0x20>
 800f3b4:	f04f 37ff 	mov.w	r7, #4294967295
 800f3b8:	e7f4      	b.n	800f3a4 <__swbuf_r+0x64>
	...

0800f3bc <__swsetup_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	4b2a      	ldr	r3, [pc, #168]	; (800f468 <__swsetup_r+0xac>)
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	460c      	mov	r4, r1
 800f3c6:	b118      	cbz	r0, 800f3d0 <__swsetup_r+0x14>
 800f3c8:	6a03      	ldr	r3, [r0, #32]
 800f3ca:	b90b      	cbnz	r3, 800f3d0 <__swsetup_r+0x14>
 800f3cc:	f7fe ffb6 	bl	800e33c <__sinit>
 800f3d0:	89a3      	ldrh	r3, [r4, #12]
 800f3d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3d6:	0718      	lsls	r0, r3, #28
 800f3d8:	d422      	bmi.n	800f420 <__swsetup_r+0x64>
 800f3da:	06d9      	lsls	r1, r3, #27
 800f3dc:	d407      	bmi.n	800f3ee <__swsetup_r+0x32>
 800f3de:	2309      	movs	r3, #9
 800f3e0:	602b      	str	r3, [r5, #0]
 800f3e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3e6:	81a3      	strh	r3, [r4, #12]
 800f3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ec:	e034      	b.n	800f458 <__swsetup_r+0x9c>
 800f3ee:	0758      	lsls	r0, r3, #29
 800f3f0:	d512      	bpl.n	800f418 <__swsetup_r+0x5c>
 800f3f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3f4:	b141      	cbz	r1, 800f408 <__swsetup_r+0x4c>
 800f3f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3fa:	4299      	cmp	r1, r3
 800f3fc:	d002      	beq.n	800f404 <__swsetup_r+0x48>
 800f3fe:	4628      	mov	r0, r5
 800f400:	f7ff f944 	bl	800e68c <_free_r>
 800f404:	2300      	movs	r3, #0
 800f406:	6363      	str	r3, [r4, #52]	; 0x34
 800f408:	89a3      	ldrh	r3, [r4, #12]
 800f40a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	2300      	movs	r3, #0
 800f412:	6063      	str	r3, [r4, #4]
 800f414:	6923      	ldr	r3, [r4, #16]
 800f416:	6023      	str	r3, [r4, #0]
 800f418:	89a3      	ldrh	r3, [r4, #12]
 800f41a:	f043 0308 	orr.w	r3, r3, #8
 800f41e:	81a3      	strh	r3, [r4, #12]
 800f420:	6923      	ldr	r3, [r4, #16]
 800f422:	b94b      	cbnz	r3, 800f438 <__swsetup_r+0x7c>
 800f424:	89a3      	ldrh	r3, [r4, #12]
 800f426:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f42a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f42e:	d003      	beq.n	800f438 <__swsetup_r+0x7c>
 800f430:	4621      	mov	r1, r4
 800f432:	4628      	mov	r0, r5
 800f434:	f000 f88c 	bl	800f550 <__smakebuf_r>
 800f438:	89a0      	ldrh	r0, [r4, #12]
 800f43a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f43e:	f010 0301 	ands.w	r3, r0, #1
 800f442:	d00a      	beq.n	800f45a <__swsetup_r+0x9e>
 800f444:	2300      	movs	r3, #0
 800f446:	60a3      	str	r3, [r4, #8]
 800f448:	6963      	ldr	r3, [r4, #20]
 800f44a:	425b      	negs	r3, r3
 800f44c:	61a3      	str	r3, [r4, #24]
 800f44e:	6923      	ldr	r3, [r4, #16]
 800f450:	b943      	cbnz	r3, 800f464 <__swsetup_r+0xa8>
 800f452:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f456:	d1c4      	bne.n	800f3e2 <__swsetup_r+0x26>
 800f458:	bd38      	pop	{r3, r4, r5, pc}
 800f45a:	0781      	lsls	r1, r0, #30
 800f45c:	bf58      	it	pl
 800f45e:	6963      	ldrpl	r3, [r4, #20]
 800f460:	60a3      	str	r3, [r4, #8]
 800f462:	e7f4      	b.n	800f44e <__swsetup_r+0x92>
 800f464:	2000      	movs	r0, #0
 800f466:	e7f7      	b.n	800f458 <__swsetup_r+0x9c>
 800f468:	20000178 	.word	0x20000178

0800f46c <_raise_r>:
 800f46c:	291f      	cmp	r1, #31
 800f46e:	b538      	push	{r3, r4, r5, lr}
 800f470:	4604      	mov	r4, r0
 800f472:	460d      	mov	r5, r1
 800f474:	d904      	bls.n	800f480 <_raise_r+0x14>
 800f476:	2316      	movs	r3, #22
 800f478:	6003      	str	r3, [r0, #0]
 800f47a:	f04f 30ff 	mov.w	r0, #4294967295
 800f47e:	bd38      	pop	{r3, r4, r5, pc}
 800f480:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f482:	b112      	cbz	r2, 800f48a <_raise_r+0x1e>
 800f484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f488:	b94b      	cbnz	r3, 800f49e <_raise_r+0x32>
 800f48a:	4620      	mov	r0, r4
 800f48c:	f000 f830 	bl	800f4f0 <_getpid_r>
 800f490:	462a      	mov	r2, r5
 800f492:	4601      	mov	r1, r0
 800f494:	4620      	mov	r0, r4
 800f496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f49a:	f000 b817 	b.w	800f4cc <_kill_r>
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d00a      	beq.n	800f4b8 <_raise_r+0x4c>
 800f4a2:	1c59      	adds	r1, r3, #1
 800f4a4:	d103      	bne.n	800f4ae <_raise_r+0x42>
 800f4a6:	2316      	movs	r3, #22
 800f4a8:	6003      	str	r3, [r0, #0]
 800f4aa:	2001      	movs	r0, #1
 800f4ac:	e7e7      	b.n	800f47e <_raise_r+0x12>
 800f4ae:	2400      	movs	r4, #0
 800f4b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	4798      	blx	r3
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	e7e0      	b.n	800f47e <_raise_r+0x12>

0800f4bc <raise>:
 800f4bc:	4b02      	ldr	r3, [pc, #8]	; (800f4c8 <raise+0xc>)
 800f4be:	4601      	mov	r1, r0
 800f4c0:	6818      	ldr	r0, [r3, #0]
 800f4c2:	f7ff bfd3 	b.w	800f46c <_raise_r>
 800f4c6:	bf00      	nop
 800f4c8:	20000178 	.word	0x20000178

0800f4cc <_kill_r>:
 800f4cc:	b538      	push	{r3, r4, r5, lr}
 800f4ce:	4d07      	ldr	r5, [pc, #28]	; (800f4ec <_kill_r+0x20>)
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	4608      	mov	r0, r1
 800f4d6:	4611      	mov	r1, r2
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	f7f2 ffb1 	bl	8002440 <_kill>
 800f4de:	1c43      	adds	r3, r0, #1
 800f4e0:	d102      	bne.n	800f4e8 <_kill_r+0x1c>
 800f4e2:	682b      	ldr	r3, [r5, #0]
 800f4e4:	b103      	cbz	r3, 800f4e8 <_kill_r+0x1c>
 800f4e6:	6023      	str	r3, [r4, #0]
 800f4e8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ea:	bf00      	nop
 800f4ec:	20003700 	.word	0x20003700

0800f4f0 <_getpid_r>:
 800f4f0:	f7f2 bf9e 	b.w	8002430 <_getpid>

0800f4f4 <_malloc_usable_size_r>:
 800f4f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4f8:	1f18      	subs	r0, r3, #4
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	bfbc      	itt	lt
 800f4fe:	580b      	ldrlt	r3, [r1, r0]
 800f500:	18c0      	addlt	r0, r0, r3
 800f502:	4770      	bx	lr

0800f504 <__swhatbuf_r>:
 800f504:	b570      	push	{r4, r5, r6, lr}
 800f506:	460c      	mov	r4, r1
 800f508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f50c:	2900      	cmp	r1, #0
 800f50e:	b096      	sub	sp, #88	; 0x58
 800f510:	4615      	mov	r5, r2
 800f512:	461e      	mov	r6, r3
 800f514:	da0d      	bge.n	800f532 <__swhatbuf_r+0x2e>
 800f516:	89a3      	ldrh	r3, [r4, #12]
 800f518:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f51c:	f04f 0100 	mov.w	r1, #0
 800f520:	bf0c      	ite	eq
 800f522:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f526:	2340      	movne	r3, #64	; 0x40
 800f528:	2000      	movs	r0, #0
 800f52a:	6031      	str	r1, [r6, #0]
 800f52c:	602b      	str	r3, [r5, #0]
 800f52e:	b016      	add	sp, #88	; 0x58
 800f530:	bd70      	pop	{r4, r5, r6, pc}
 800f532:	466a      	mov	r2, sp
 800f534:	f000 f848 	bl	800f5c8 <_fstat_r>
 800f538:	2800      	cmp	r0, #0
 800f53a:	dbec      	blt.n	800f516 <__swhatbuf_r+0x12>
 800f53c:	9901      	ldr	r1, [sp, #4]
 800f53e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f542:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f546:	4259      	negs	r1, r3
 800f548:	4159      	adcs	r1, r3
 800f54a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f54e:	e7eb      	b.n	800f528 <__swhatbuf_r+0x24>

0800f550 <__smakebuf_r>:
 800f550:	898b      	ldrh	r3, [r1, #12]
 800f552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f554:	079d      	lsls	r5, r3, #30
 800f556:	4606      	mov	r6, r0
 800f558:	460c      	mov	r4, r1
 800f55a:	d507      	bpl.n	800f56c <__smakebuf_r+0x1c>
 800f55c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f560:	6023      	str	r3, [r4, #0]
 800f562:	6123      	str	r3, [r4, #16]
 800f564:	2301      	movs	r3, #1
 800f566:	6163      	str	r3, [r4, #20]
 800f568:	b002      	add	sp, #8
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
 800f56c:	ab01      	add	r3, sp, #4
 800f56e:	466a      	mov	r2, sp
 800f570:	f7ff ffc8 	bl	800f504 <__swhatbuf_r>
 800f574:	9900      	ldr	r1, [sp, #0]
 800f576:	4605      	mov	r5, r0
 800f578:	4630      	mov	r0, r6
 800f57a:	f7ff f8fb 	bl	800e774 <_malloc_r>
 800f57e:	b948      	cbnz	r0, 800f594 <__smakebuf_r+0x44>
 800f580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f584:	059a      	lsls	r2, r3, #22
 800f586:	d4ef      	bmi.n	800f568 <__smakebuf_r+0x18>
 800f588:	f023 0303 	bic.w	r3, r3, #3
 800f58c:	f043 0302 	orr.w	r3, r3, #2
 800f590:	81a3      	strh	r3, [r4, #12]
 800f592:	e7e3      	b.n	800f55c <__smakebuf_r+0xc>
 800f594:	89a3      	ldrh	r3, [r4, #12]
 800f596:	6020      	str	r0, [r4, #0]
 800f598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f59c:	81a3      	strh	r3, [r4, #12]
 800f59e:	9b00      	ldr	r3, [sp, #0]
 800f5a0:	6163      	str	r3, [r4, #20]
 800f5a2:	9b01      	ldr	r3, [sp, #4]
 800f5a4:	6120      	str	r0, [r4, #16]
 800f5a6:	b15b      	cbz	r3, 800f5c0 <__smakebuf_r+0x70>
 800f5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f000 f81d 	bl	800f5ec <_isatty_r>
 800f5b2:	b128      	cbz	r0, 800f5c0 <__smakebuf_r+0x70>
 800f5b4:	89a3      	ldrh	r3, [r4, #12]
 800f5b6:	f023 0303 	bic.w	r3, r3, #3
 800f5ba:	f043 0301 	orr.w	r3, r3, #1
 800f5be:	81a3      	strh	r3, [r4, #12]
 800f5c0:	89a3      	ldrh	r3, [r4, #12]
 800f5c2:	431d      	orrs	r5, r3
 800f5c4:	81a5      	strh	r5, [r4, #12]
 800f5c6:	e7cf      	b.n	800f568 <__smakebuf_r+0x18>

0800f5c8 <_fstat_r>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	4d07      	ldr	r5, [pc, #28]	; (800f5e8 <_fstat_r+0x20>)
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	4608      	mov	r0, r1
 800f5d2:	4611      	mov	r1, r2
 800f5d4:	602b      	str	r3, [r5, #0]
 800f5d6:	f7f2 ff92 	bl	80024fe <_fstat>
 800f5da:	1c43      	adds	r3, r0, #1
 800f5dc:	d102      	bne.n	800f5e4 <_fstat_r+0x1c>
 800f5de:	682b      	ldr	r3, [r5, #0]
 800f5e0:	b103      	cbz	r3, 800f5e4 <_fstat_r+0x1c>
 800f5e2:	6023      	str	r3, [r4, #0]
 800f5e4:	bd38      	pop	{r3, r4, r5, pc}
 800f5e6:	bf00      	nop
 800f5e8:	20003700 	.word	0x20003700

0800f5ec <_isatty_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	4d06      	ldr	r5, [pc, #24]	; (800f608 <_isatty_r+0x1c>)
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	4608      	mov	r0, r1
 800f5f6:	602b      	str	r3, [r5, #0]
 800f5f8:	f7f2 ff91 	bl	800251e <_isatty>
 800f5fc:	1c43      	adds	r3, r0, #1
 800f5fe:	d102      	bne.n	800f606 <_isatty_r+0x1a>
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	b103      	cbz	r3, 800f606 <_isatty_r+0x1a>
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	bd38      	pop	{r3, r4, r5, pc}
 800f608:	20003700 	.word	0x20003700

0800f60c <_init>:
 800f60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f60e:	bf00      	nop
 800f610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f612:	bc08      	pop	{r3}
 800f614:	469e      	mov	lr, r3
 800f616:	4770      	bx	lr

0800f618 <_fini>:
 800f618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f61a:	bf00      	nop
 800f61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f61e:	bc08      	pop	{r3}
 800f620:	469e      	mov	lr, r3
 800f622:	4770      	bx	lr
