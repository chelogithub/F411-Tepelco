
F411-Tepelco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0800f67c  0800f67c  0001f67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fde4  0800fde4  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800fde4  0800fde4  0001fde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdec  0800fdec  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdec  0800fdec  0001fdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdf0  0800fdf0  0001fdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800fdf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000358c  20000180  0800ff74  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000370c  0800ff74  0002370c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000148cb  00000000  00000000  000201f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d81  00000000  00000000  00034abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00037840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dea  00000000  00000000  00038968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018581  00000000  00000000  00039752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172dc  00000000  00000000  00051cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000936b0  00000000  00000000  00068faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000546c  00000000  00000000  000fc660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00101acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f664 	.word	0x0800f664

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800f664 	.word	0x0800f664

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b09a      	sub	sp, #104	; 0x68
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=34;//ETH.SIPR[3]=6,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2222      	movs	r2, #34	; 0x22
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory
		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;//=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	//----------------------- ETHERNET W5100 Environment-------------------------//

	//----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f005 fd43 	bl	800635c <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008d6:	4943      	ldr	r1, [pc, #268]	; (80009e4 <main+0x350>)
 80008d8:	4843      	ldr	r0, [pc, #268]	; (80009e8 <main+0x354>)
 80008da:	f00d fedd 	bl	800e698 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008de:	4943      	ldr	r1, [pc, #268]	; (80009ec <main+0x358>)
 80008e0:	4843      	ldr	r0, [pc, #268]	; (80009f0 <main+0x35c>)
 80008e2:	f00d fed9 	bl	800e698 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008e6:	4943      	ldr	r1, [pc, #268]	; (80009f4 <main+0x360>)
 80008e8:	4843      	ldr	r0, [pc, #268]	; (80009f8 <main+0x364>)
 80008ea:	f00d fed5 	bl	800e698 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008ee:	4943      	ldr	r1, [pc, #268]	; (80009fc <main+0x368>)
 80008f0:	4843      	ldr	r0, [pc, #268]	; (8000a00 <main+0x36c>)
 80008f2:	f00d fed1 	bl	800e698 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008f6:	4943      	ldr	r1, [pc, #268]	; (8000a04 <main+0x370>)
 80008f8:	4843      	ldr	r0, [pc, #268]	; (8000a08 <main+0x374>)
 80008fa:	f00d fecd 	bl	800e698 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80008fe:	4943      	ldr	r1, [pc, #268]	; (8000a0c <main+0x378>)
 8000900:	4843      	ldr	r0, [pc, #268]	; (8000a10 <main+0x37c>)
 8000902:	f00d fec9 	bl	800e698 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000906:	4943      	ldr	r1, [pc, #268]	; (8000a14 <main+0x380>)
 8000908:	4843      	ldr	r0, [pc, #268]	; (8000a18 <main+0x384>)
 800090a:	f00d fec5 	bl	800e698 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800090e:	4943      	ldr	r1, [pc, #268]	; (8000a1c <main+0x388>)
 8000910:	4843      	ldr	r0, [pc, #268]	; (8000a20 <main+0x38c>)
 8000912:	f00d fec1 	bl	800e698 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <main+0x34c>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <main+0x34c>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000948:	2206      	movs	r2, #6
 800094a:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 8000950:	2201      	movs	r2, #1
 8000952:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000958:	2203      	movs	r2, #3
 800095a:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000978:	220a      	movs	r2, #10
 800097a:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000988:	2233      	movs	r2, #51	; 0x33
 800098a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000998:	2235      	movs	r2, #53	; 0x35
 800099a:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
		wf._DBG_EN=1;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50

	// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //

		spi_no_debug=1;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <main+0x390>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <main+0x348>)
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <main+0x394>)
 80009d0:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009d2:	4b02      	ldr	r3, [pc, #8]	; (80009dc <main+0x348>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d8:	4b00      	ldr	r3, [pc, #0]	; (80009dc <main+0x348>)
 80009da:	e027      	b.n	8000a2c <main+0x398>
 80009dc:	20001cb8 	.word	0x20001cb8
 80009e0:	200002c4 	.word	0x200002c4
 80009e4:	20000024 	.word	0x20000024
 80009e8:	200002ca 	.word	0x200002ca
 80009ec:	2000002c 	.word	0x2000002c
 80009f0:	200002ea 	.word	0x200002ea
 80009f4:	20000038 	.word	0x20000038
 80009f8:	200002fa 	.word	0x200002fa
 80009fc:	20000048 	.word	0x20000048
 8000a00:	2000030a 	.word	0x2000030a
 8000a04:	20000050 	.word	0x20000050
 8000a08:	20000310 	.word	0x20000310
 8000a0c:	20000060 	.word	0x20000060
 8000a10:	20000326 	.word	0x20000326
 8000a14:	20000070 	.word	0x20000070
 8000a18:	20000336 	.word	0x20000336
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	20000320 	.word	0x20000320
 8000a24:	20003170 	.word	0x20003170
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	4a58      	ldr	r2, [pc, #352]	; (8000b90 <main+0x4fc>)
 8000a2e:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a30:	4858      	ldr	r0, [pc, #352]	; (8000b94 <main+0x500>)
 8000a32:	f00b f875 	bl	800bb20 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a36:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <main+0x500>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a3c:	4856      	ldr	r0, [pc, #344]	; (8000b98 <main+0x504>)
 8000a3e:	f00b f86f 	bl	800bb20 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a42:	4b55      	ldr	r3, [pc, #340]	; (8000b98 <main+0x504>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a48:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4852      	ldr	r0, [pc, #328]	; (8000b98 <main+0x504>)
 8000a50:	f00b f909 	bl	800bc66 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f001 fe1a 	bl	800268c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 fa6a 	bl	8000f30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a5c:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <main+0x508>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <main+0x50c>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	099b      	lsrs	r3, r3, #6
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fdc9 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 fbcb 	bl	8001208 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a72:	f000 fac5 	bl	8001000 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a76:	f000 fb73 	bl	8001160 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a7a:	f000 fb9b 	bl	80011b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a7e:	f000 faf5 	bl	800106c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	4847      	ldr	r0, [pc, #284]	; (8000ba4 <main+0x510>)
 8000a88:	f002 fad4 	bl	8003034 <HAL_GPIO_WritePin>
	ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a8c:	210e      	movs	r1, #14
 8000a8e:	4846      	ldr	r0, [pc, #280]	; (8000ba8 <main+0x514>)
 8000a90:	f000 fc3c 	bl	800130c <ITM0_Write>
	HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);		//Escucho el puerto serie
 8000a94:	2201      	movs	r2, #1
 8000a96:	4945      	ldr	r1, [pc, #276]	; (8000bac <main+0x518>)
 8000a98:	4845      	ldr	r0, [pc, #276]	; (8000bb0 <main+0x51c>)
 8000a9a:	f004 fbf4 	bl	8005286 <HAL_UART_Receive_IT>
	ESP8266_HW_Reset();		 						          	//Reseteo el modulo desde el pin de RESET
 8000a9e:	f001 fa57 	bl	8001f50 <ESP8266_HW_Reset>
	if (wf._DBG_EN==1)
 8000aa2:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <main+0x520>)
 8000aa4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d103      	bne.n	8000ab4 <main+0x420>
		{
		ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aac:	2113      	movs	r1, #19
 8000aae:	4842      	ldr	r0, [pc, #264]	; (8000bb8 <main+0x524>)
 8000ab0:	f000 fc2c 	bl	800130c <ITM0_Write>
		}
	if (WF_SER_DBG==1)
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <main+0x528>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d104      	bne.n	8000ac6 <main+0x432>
		{
		HAL_UART_Transmit_IT(&huart2, "\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000abc:	2213      	movs	r2, #19
 8000abe:	493e      	ldr	r1, [pc, #248]	; (8000bb8 <main+0x524>)
 8000ac0:	483f      	ldr	r0, [pc, #252]	; (8000bc0 <main+0x52c>)
 8000ac2:	f004 fb9b 	bl	80051fc <HAL_UART_Transmit_IT>
		}
	if (ETH_DBG_EN == 1) ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ac6:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <main+0x530>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d103      	bne.n	8000ad6 <main+0x442>
 8000ace:	2112      	movs	r1, #18
 8000ad0:	483d      	ldr	r0, [pc, #244]	; (8000bc8 <main+0x534>)
 8000ad2:	f000 fc1b 	bl	800130c <ITM0_Write>

	ETH.operacion=SPI_WRITE;
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <main+0x538>)
 8000ad8:	22f0      	movs	r2, #240	; 0xf0
 8000ada:	729a      	strb	r2, [r3, #10]
	ETH.TX[1]= 0;
 8000adc:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <main+0x538>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	755a      	strb	r2, [r3, #21]
	ETH.TX[2]= 1;
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <main+0x538>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	759a      	strb	r2, [r3, #22]
	ETH.TX[3]= 192;
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <main+0x538>)
 8000aea:	22c0      	movs	r2, #192	; 0xc0
 8000aec:	75da      	strb	r2, [r3, #23]

	eth_init(&ETH);
 8000aee:	4837      	ldr	r0, [pc, #220]	; (8000bcc <main+0x538>)
 8000af0:	f00c fce2 	bl	800d4b8 <eth_init>

	eth_socket_init(&ETH,0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	4835      	ldr	r0, [pc, #212]	; (8000bcc <main+0x538>)
 8000af8:	f00c fd34 	bl	800d564 <eth_socket_init>

	SPI_ETH_READ_EN=1;
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <main+0x53c>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
	ETH.operacion=SPI_READ;
 8000b02:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <main+0x538>)
 8000b04:	220f      	movs	r2, #15
 8000b06:	729a      	strb	r2, [r3, #10]
	ETH.TX[1]= 0;
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <main+0x538>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	755a      	strb	r2, [r3, #21]
	ETH.TX[2]= 1;
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <main+0x538>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	759a      	strb	r2, [r3, #22]
	ETH.TX[3]= 0;
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <main+0x538>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <main+0x51c>)
 8000b1c:	f001 fa40 	bl	8001fa0 <ESP8266_HW_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d115      	bne.n	8000b52 <main+0x4be>
     {
   	  ESP_HW_Init=1;
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <main+0x540>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN==1) ITM0_Write("\r\n ESP HW Init OK\r\n",19);
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <main+0x520>)
 8000b2e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d103      	bne.n	8000b3e <main+0x4aa>
 8000b36:	2113      	movs	r1, #19
 8000b38:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <main+0x544>)
 8000b3a:	f000 fbe7 	bl	800130c <ITM0_Write>
   	  if (WF_SER_DBG==1) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <main+0x528>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d15f      	bne.n	8000c06 <main+0x572>
 8000b46:	2213      	movs	r2, #19
 8000b48:	4923      	ldr	r1, [pc, #140]	; (8000bd8 <main+0x544>)
 8000b4a:	481d      	ldr	r0, [pc, #116]	; (8000bc0 <main+0x52c>)
 8000b4c:	f004 fb56 	bl	80051fc <HAL_UART_Transmit_IT>
 8000b50:	e059      	b.n	8000c06 <main+0x572>
     }
     else
     {
   	  ESP8266_HW_Reset(); 				//Si no logra resetear con el comando de AT+RESTORE, pruebo el resete desde hardware
 8000b52:	f001 f9fd 	bl	8001f50 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <main+0x51c>)
 8000b58:	f001 fa22 	bl	8001fa0 <ESP8266_HW_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d13c      	bne.n	8000bdc <main+0x548>
   	  {
   		  ESP_HW_Init=1;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <main+0x540>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN==1) ITM0_Write("\r\n ESP HW Init OK\r\n",19);
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <main+0x520>)
 8000b6a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d103      	bne.n	8000b7a <main+0x4e6>
 8000b72:	2113      	movs	r1, #19
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <main+0x544>)
 8000b76:	f000 fbc9 	bl	800130c <ITM0_Write>
   		  if (WF_SER_DBG==1) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <main+0x528>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d141      	bne.n	8000c06 <main+0x572>
 8000b82:	2213      	movs	r2, #19
 8000b84:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <main+0x544>)
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <main+0x52c>)
 8000b88:	f004 fb38 	bl	80051fc <HAL_UART_Transmit_IT>
 8000b8c:	e03b      	b.n	8000c06 <main+0x572>
 8000b8e:	bf00      	nop
 8000b90:	2000019c 	.word	0x2000019c
 8000b94:	20001018 	.word	0x20001018
 8000b98:	20001668 	.word	0x20001668
 8000b9c:	2000008c 	.word	0x2000008c
 8000ba0:	10624dd3 	.word	0x10624dd3
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	0800f67c 	.word	0x0800f67c
 8000bac:	20003580 	.word	0x20003580
 8000bb0:	2000023c 	.word	0x2000023c
 8000bb4:	200002c4 	.word	0x200002c4
 8000bb8:	0800f68c 	.word	0x0800f68c
 8000bbc:	20000088 	.word	0x20000088
 8000bc0:	20000280 	.word	0x20000280
 8000bc4:	20000084 	.word	0x20000084
 8000bc8:	0800f6a0 	.word	0x0800f6a0
 8000bcc:	20001cb8 	.word	0x20001cb8
 8000bd0:	2000317b 	.word	0x2000317b
 8000bd4:	20003173 	.word	0x20003173
 8000bd8:	0800f6b4 	.word	0x0800f6b4
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bdc:	4bad      	ldr	r3, [pc, #692]	; (8000e94 <main+0x800>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN==1)  ITM0_Write("\r\n ESP HW Init Fail\r\n",24);
 8000be2:	4bad      	ldr	r3, [pc, #692]	; (8000e98 <main+0x804>)
 8000be4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d103      	bne.n	8000bf4 <main+0x560>
 8000bec:	2118      	movs	r1, #24
 8000bee:	48ab      	ldr	r0, [pc, #684]	; (8000e9c <main+0x808>)
 8000bf0:	f000 fb8c 	bl	800130c <ITM0_Write>
   		  if (WF_SER_DBG==1) HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bf4:	4baa      	ldr	r3, [pc, #680]	; (8000ea0 <main+0x80c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d104      	bne.n	8000c06 <main+0x572>
 8000bfc:	2215      	movs	r2, #21
 8000bfe:	49a7      	ldr	r1, [pc, #668]	; (8000e9c <main+0x808>)
 8000c00:	48a8      	ldr	r0, [pc, #672]	; (8000ea4 <main+0x810>)
 8000c02:	f004 fafb 	bl	80051fc <HAL_UART_Transmit_IT>
   	  }
     }

     HAL_Delay(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f001 fdb1 	bl	8002770 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /**************[ INICIO PIDO ENVIAR DATOS ]**************/
	  	  if (ESP_HW_Init==1)
 8000c0e:	4ba1      	ldr	r3, [pc, #644]	; (8000e94 <main+0x800>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	f040 80a9 	bne.w	8000d6a <main+0x6d6>
	  		{
	  			//if((WF_SND_FLAG==1)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available)) HAL_UART_Transmit_IT(&huart2,"\r\nCOND OK\r\n",strlen("\r\nCOND OK\r\n"));
	  			//if((WF_SND_FLAG==1)&&(wf._estado_conexion<609)) HAL_UART_Transmit_IT(&huart2,"\r\nNO CONN STATE\r\n",strlen("\r\nNO CONN STATE\r\n"));
	  			//if((WF_SND_FLAG==1)&&(!ETH.S0_data_available)) HAL_UART_Transmit_IT(&huart2,"\r\nNO DATA RDY\r\n",strlen("\r\nNO DATA RDY\r\n"));
	  		}
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000c18:	4ba3      	ldr	r3, [pc, #652]	; (8000ea8 <main+0x814>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	f040 80a4 	bne.w	8000d6a <main+0x6d6>
 8000c22:	4b9d      	ldr	r3, [pc, #628]	; (8000e98 <main+0x804>)
 8000c24:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f040 809e 	bne.w	8000d6a <main+0x6d6>
 8000c2e:	4b9a      	ldr	r3, [pc, #616]	; (8000e98 <main+0x804>)
 8000c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c34:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c38:	f340 8097 	ble.w	8000d6a <main+0x6d6>
 8000c3c:	4b9b      	ldr	r3, [pc, #620]	; (8000eac <main+0x818>)
 8000c3e:	7c9b      	ldrb	r3, [r3, #18]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 8092 	beq.w	8000d6a <main+0x6d6>
	  			{	ETH.S0_data_available=0;
 8000c46:	4b99      	ldr	r3, [pc, #612]	; (8000eac <main+0x818>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c4c:	4b98      	ldr	r3, [pc, #608]	; (8000eb0 <main+0x81c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c52:	4b95      	ldr	r3, [pc, #596]	; (8000ea8 <main+0x814>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4896      	ldr	r0, [pc, #600]	; (8000eb4 <main+0x820>)
 8000c5c:	f00b f82f 	bl	800bcbe <ModBUS_F03_Read>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4698      	mov	r8, r3
 8000c64:	2101      	movs	r1, #1
 8000c66:	4893      	ldr	r0, [pc, #588]	; (8000eb4 <main+0x820>)
 8000c68:	f00b f829 	bl	800bcbe <ModBUS_F03_Read>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461c      	mov	r4, r3
 8000c70:	2102      	movs	r1, #2
 8000c72:	4890      	ldr	r0, [pc, #576]	; (8000eb4 <main+0x820>)
 8000c74:	f00b f823 	bl	800bcbe <ModBUS_F03_Read>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	488d      	ldr	r0, [pc, #564]	; (8000eb4 <main+0x820>)
 8000c80:	f00b f81d 	bl	800bcbe <ModBUS_F03_Read>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461e      	mov	r6, r3
 8000c88:	2104      	movs	r1, #4
 8000c8a:	488a      	ldr	r0, [pc, #552]	; (8000eb4 <main+0x820>)
 8000c8c:	f00b f817 	bl	800bcbe <ModBUS_F03_Read>
 8000c90:	4603      	mov	r3, r0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	2105      	movs	r1, #5
 8000c96:	4887      	ldr	r0, [pc, #540]	; (8000eb4 <main+0x820>)
 8000c98:	f00b f811 	bl	800bcbe <ModBUS_F03_Read>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	2106      	movs	r1, #6
 8000ca2:	4884      	ldr	r0, [pc, #528]	; (8000eb4 <main+0x820>)
 8000ca4:	f00b f80b 	bl	800bcbe <ModBUS_F03_Read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	2107      	movs	r1, #7
 8000cae:	4881      	ldr	r0, [pc, #516]	; (8000eb4 <main+0x820>)
 8000cb0:	f00b f805 	bl	800bcbe <ModBUS_F03_Read>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	2108      	movs	r1, #8
 8000cba:	487e      	ldr	r0, [pc, #504]	; (8000eb4 <main+0x820>)
 8000cbc:	f00a ffff 	bl	800bcbe <ModBUS_F03_Read>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	2109      	movs	r1, #9
 8000cc6:	487b      	ldr	r0, [pc, #492]	; (8000eb4 <main+0x820>)
 8000cc8:	f00a fff9 	bl	800bcbe <ModBUS_F03_Read>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd4:	9312      	str	r3, [sp, #72]	; 0x48
 8000cd6:	4b78      	ldr	r3, [pc, #480]	; (8000eb8 <main+0x824>)
 8000cd8:	9311      	str	r3, [sp, #68]	; 0x44
 8000cda:	4b78      	ldr	r3, [pc, #480]	; (8000ebc <main+0x828>)
 8000cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8000cde:	2300      	movs	r3, #0
 8000ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	930d      	str	r3, [sp, #52]	; 0x34
 8000cea:	2300      	movs	r3, #0
 8000cec:	930c      	str	r3, [sp, #48]	; 0x30
 8000cee:	2300      	movs	r3, #0
 8000cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8000cfa:	9208      	str	r2, [sp, #32]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	9207      	str	r2, [sp, #28]
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	9206      	str	r2, [sp, #24]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	9205      	str	r2, [sp, #20]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	9204      	str	r2, [sp, #16]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	9303      	str	r3, [sp, #12]
 8000d10:	9602      	str	r6, [sp, #8]
 8000d12:	9501      	str	r5, [sp, #4]
 8000d14:	9400      	str	r4, [sp, #0]
 8000d16:	4643      	mov	r3, r8
 8000d18:	4a69      	ldr	r2, [pc, #420]	; (8000ec0 <main+0x82c>)
 8000d1a:	496a      	ldr	r1, [pc, #424]	; (8000ec4 <main+0x830>)
 8000d1c:	486a      	ldr	r0, [pc, #424]	; (8000ec8 <main+0x834>)
 8000d1e:	f00a fb75 	bl	800b40c <httpPOST>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <main+0x6d6>
	  								ModBUS_F03_Read(&mb_eth,7),
	  								ModBUS_F03_Read(&mb_eth,8),
									ModBUS_F03_Read(&mb_eth,9),
									0,0,0,0,0,0,TEPELCO,post, body, 512) )
	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d28:	4864      	ldr	r0, [pc, #400]	; (8000ebc <main+0x828>)
 8000d2a:	f7ff fa63 	bl	80001f4 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	2341      	movs	r3, #65	; 0x41
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	4960      	ldr	r1, [pc, #384]	; (8000ebc <main+0x828>)
 8000d3a:	4864      	ldr	r0, [pc, #400]	; (8000ecc <main+0x838>)
 8000d3c:	f00d f9d4 	bl	800e0e8 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d40:	485e      	ldr	r0, [pc, #376]	; (8000ebc <main+0x828>)
 8000d42:	f7ff fa57 	bl	80001f4 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <main+0x804>)
 8000d4c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d50:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <main+0x804>)
 8000d52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d807      	bhi.n	8000d6a <main+0x6d6>
	  							{
	  								EnviarDatos(&wf);
 8000d5a:	484f      	ldr	r0, [pc, #316]	; (8000e98 <main+0x804>)
 8000d5c:	f005 fae8 	bl	8006330 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d60:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <main+0x804>)
 8000d62:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1_WF==1)||(FLAG_TIMEOUT_WF==1))  //Si recibí datos o me fui por TimeOUT
 8000d6a:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <main+0x83c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d003      	beq.n	8000d7a <main+0x6e6>
 8000d72:	4b58      	ldr	r3, [pc, #352]	; (8000ed4 <main+0x840>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d163      	bne.n	8000e42 <main+0x7ae>
	  		{
	  			if(FLAG_UART1_WF==1)
 8000d7a:	4b55      	ldr	r3, [pc, #340]	; (8000ed0 <main+0x83c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10b      	bne.n	8000d9a <main+0x706>
	  				{
	  					CopiaVector(wf._uartRCVD,UART1_WF_RX_vect_hld,UART1_WF_RX_items,1,CMP_VECT);
 8000d82:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <main+0x844>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b55      	ldr	r3, [pc, #340]	; (8000edc <main+0x848>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4954      	ldr	r1, [pc, #336]	; (8000ee0 <main+0x84c>)
 8000d8e:	4855      	ldr	r0, [pc, #340]	; (8000ee4 <main+0x850>)
 8000d90:	f00d f9aa 	bl	800e0e8 <CopiaVector>
	  					FLAG_UART1_WF=0;
 8000d94:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <main+0x83c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
	  				}
	  			if(FLAG_TIMEOUT_WF==1)
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <main+0x840>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d102      	bne.n	8000da8 <main+0x714>
	  					{
	  						FLAG_TIMEOUT_WF=0;
 8000da2:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <main+0x840>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000da8:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <main+0x800>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d148      	bne.n	8000e42 <main+0x7ae>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART1_WF_RX_items;
 8000db0:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <main+0x844>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a38      	ldr	r2, [pc, #224]	; (8000e98 <main+0x804>)
 8000db6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART1_WF_RX_vect_hld,UART1_WF_RX_items,1,CMP_VECT);
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <main+0x844>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b47      	ldr	r3, [pc, #284]	; (8000edc <main+0x848>)
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4946      	ldr	r1, [pc, #280]	; (8000ee0 <main+0x84c>)
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <main+0x850>)
 8000dc8:	f00d f98e 	bl	800e0e8 <CopiaVector>
	  					dummy_int=AT_ESP8266_ND(&wf);
 8000dcc:	4832      	ldr	r0, [pc, #200]	; (8000e98 <main+0x804>)
 8000dce:	f005 fb95 	bl	80064fc <AT_ESP8266_ND>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a44      	ldr	r2, [pc, #272]	; (8000ee8 <main+0x854>)
 8000dd6:	6013      	str	r3, [r2, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <main+0x804>)
 8000dda:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d12f      	bne.n	8000e42 <main+0x7ae>
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <main+0x804>)
 8000de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000de8:	2b63      	cmp	r3, #99	; 0x63
 8000dea:	d12a      	bne.n	8000e42 <main+0x7ae>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <main+0x804>)
 8000dee:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000df2:	2341      	movs	r3, #65	; 0x41
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	493c      	ldr	r1, [pc, #240]	; (8000eec <main+0x858>)
 8000dfa:	483d      	ldr	r0, [pc, #244]	; (8000ef0 <main+0x85c>)
 8000dfc:	f00d f974 	bl	800e0e8 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e00:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <main+0x804>)
 8000e02:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e06:	4a3b      	ldr	r2, [pc, #236]	; (8000ef4 <main+0x860>)
 8000e08:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000e0c:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <main+0x860>)
 8000e0e:	f00a ffdb 	bl	800bdc8 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <main+0x860>)
 8000e14:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e18:	2341      	movs	r3, #65	; 0x41
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4936      	ldr	r1, [pc, #216]	; (8000ef8 <main+0x864>)
 8000e20:	482a      	ldr	r0, [pc, #168]	; (8000ecc <main+0x838>)
 8000e22:	f00d f961 	bl	800e0e8 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <main+0x860>)
 8000e28:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <main+0x804>)
 8000e2e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <main+0x804>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <main+0x804>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <main+0x800>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <main+0x7c8>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	492b      	ldr	r1, [pc, #172]	; (8000efc <main+0x868>)
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <main+0x804>)
 8000e50:	f008 fdfc 	bl	8009a4c <WiFi_Conn_ND>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <main+0x86c>)
 8000e5a:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <main+0x870>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	f47f aed4 	bne.w	8000c0e <main+0x57a>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6c:	4826      	ldr	r0, [pc, #152]	; (8000f08 <main+0x874>)
 8000e6e:	f002 f8e1 	bl	8003034 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000e72:	2115      	movs	r1, #21
 8000e74:	4825      	ldr	r0, [pc, #148]	; (8000f0c <main+0x878>)
 8000e76:	f000 fa49 	bl	800130c <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000e7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7e:	f001 fc77 	bl	8002770 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e88:	481f      	ldr	r0, [pc, #124]	; (8000f08 <main+0x874>)
 8000e8a:	f002 f8d3 	bl	8003034 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000e8e:	2118      	movs	r1, #24
 8000e90:	e03e      	b.n	8000f10 <main+0x87c>
 8000e92:	bf00      	nop
 8000e94:	20003173 	.word	0x20003173
 8000e98:	200002c4 	.word	0x200002c4
 8000e9c:	0800f6c8 	.word	0x0800f6c8
 8000ea0:	20000088 	.word	0x20000088
 8000ea4:	20000280 	.word	0x20000280
 8000ea8:	2000317a 	.word	0x2000317a
 8000eac:	20001cb8 	.word	0x20001cb8
 8000eb0:	200035b0 	.word	0x200035b0
 8000eb4:	20001018 	.word	0x20001018
 8000eb8:	20002f20 	.word	0x20002f20
 8000ebc:	20002d20 	.word	0x20002d20
 8000ec0:	2000001c 	.word	0x2000001c
 8000ec4:	2000000c 	.word	0x2000000c
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000558 	.word	0x20000558
 8000ed0:	20003177 	.word	0x20003177
 8000ed4:	20003176 	.word	0x20003176
 8000ed8:	20003584 	.word	0x20003584
 8000edc:	2000357c 	.word	0x2000357c
 8000ee0:	2000337c 	.word	0x2000337c
 8000ee4:	20000958 	.word	0x20000958
 8000ee8:	20003598 	.word	0x20003598
 8000eec:	20000358 	.word	0x20000358
 8000ef0:	2000167a 	.word	0x2000167a
 8000ef4:	20001668 	.word	0x20001668
 8000ef8:	20001880 	.word	0x20001880
 8000efc:	2000023c 	.word	0x2000023c
 8000f00:	20003179 	.word	0x20003179
 8000f04:	20003178 	.word	0x20003178
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	0800f6e0 	.word	0x0800f6e0
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <main+0x894>)
 8000f12:	f000 f9fb 	bl	800130c <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000f16:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f1a:	f001 fc29 	bl	8002770 <HAL_Delay>
	  				esp_restart=0;
 8000f1e:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <main+0x898>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000f24:	e673      	b.n	8000c0e <main+0x57a>
 8000f26:	bf00      	nop
 8000f28:	0800f6f8 	.word	0x0800f6f8
 8000f2c:	20003178 	.word	0x20003178

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00d fac1 	bl	800e4c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 f871 	bl	800309c <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc0:	f001 f86e 	bl	80020a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2103      	movs	r1, #3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fad3 	bl	800358c <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fec:	f001 f858 	bl	80020a0 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	; 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_SPI1_Init+0x64>)
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <MX_SPI1_Init+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SPI1_Init+0x64>)
 800100c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_SPI1_Init+0x64>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_SPI1_Init+0x64>)
 8001034:	2210      	movs	r2, #16
 8001036:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_SPI1_Init+0x64>)
 800104c:	220a      	movs	r2, #10
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_SPI1_Init+0x64>)
 8001052:	f002 fc7b 	bl	800394c <HAL_SPI_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800105c:	f001 f820 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000019c 	.word	0x2000019c
 8001068:	40013000 	.word	0x40013000

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <MX_TIM2_Init+0xf0>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_TIM2_Init+0xf0>)
 80010a6:	2264      	movs	r2, #100	; 0x64
 80010a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <MX_TIM2_Init+0xf0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_TIM2_Init+0xf0>)
 80010b2:	2264      	movs	r2, #100	; 0x64
 80010b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <MX_TIM2_Init+0xf0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_TIM2_Init+0xf0>)
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c2:	4826      	ldr	r0, [pc, #152]	; (800115c <MX_TIM2_Init+0xf0>)
 80010c4:	f002 ff38 	bl	8003f38 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80010ce:	f000 ffe7 	bl	80020a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	481f      	ldr	r0, [pc, #124]	; (800115c <MX_TIM2_Init+0xf0>)
 80010e0:	f003 fb40 	bl	8004764 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 ffd9 	bl	80020a0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80010ee:	481b      	ldr	r0, [pc, #108]	; (800115c <MX_TIM2_Init+0xf0>)
 80010f0:	f002 ff71 	bl	8003fd6 <HAL_TIM_OC_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 ffd1 	bl	80020a0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80010fe:	2108      	movs	r1, #8
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <MX_TIM2_Init+0xf0>)
 8001102:	f003 f971 	bl	80043e8 <HAL_TIM_OnePulse_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800110c:	f000 ffc8 	bl	80020a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4619      	mov	r1, r3
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <MX_TIM2_Init+0xf0>)
 8001120:	f003 fedc 	bl	8004edc <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800112a:	f000 ffb9 	bl	80020a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM2_Init+0xf0>)
 8001146:	f003 fab1 	bl	80046ac <HAL_TIM_OC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001150:	f000 ffa6 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3738      	adds	r7, #56	; 0x38
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200001f4 	.word	0x200001f4

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART1_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001198:	f003 ff22 	bl	8004fe0 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 ff7d 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000023c 	.word	0x2000023c
 80011b0:	40011000 	.word	0x40011000

080011b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART2_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ec:	f003 fef8 	bl	8004fe0 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 ff53 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000280 	.word	0x20000280
 8001204:	40004400 	.word	0x40004400

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a36      	ldr	r2, [pc, #216]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <MX_GPIO_Init+0xf8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_GPIO_Init+0xf8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <MX_GPIO_Init+0xf8>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_GPIO_Init+0xf8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	481b      	ldr	r0, [pc, #108]	; (8001304 <MX_GPIO_Init+0xfc>)
 8001296:	f001 fecd 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	2110      	movs	r1, #16
 800129e:	481a      	ldr	r0, [pc, #104]	; (8001308 <MX_GPIO_Init+0x100>)
 80012a0:	f001 fec8 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80012a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_GPIO_Init+0xfc>)
 80012be:	f001 fc51 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 80012c2:	f240 1301 	movw	r3, #257	; 0x101
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_GPIO_Init+0x100>)
 80012d8:	f001 fc44 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80012dc:	2310      	movs	r3, #16
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_GPIO_Init+0x100>)
 80012f4:	f001 fc36 	bl	8002b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020800 	.word	0x40020800
 8001308:	40020000 	.word	0x40020000

0800130c <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e009      	b.n	8001330 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f98d 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf1      	blt.n	800131c <ITM0_Write+0x10>
  }
  return len;
 8001338:	683b      	ldr	r3, [r7, #0]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800134a:	4bb9      	ldr	r3, [pc, #740]	; (8001630 <SysTick_Handler+0x2ec>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4ab7      	ldr	r2, [pc, #732]	; (8001630 <SysTick_Handler+0x2ec>)
 8001352:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001354:	4bb7      	ldr	r3, [pc, #732]	; (8001634 <SysTick_Handler+0x2f0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4ab6      	ldr	r2, [pc, #728]	; (8001634 <SysTick_Handler+0x2f0>)
 800135c:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800135e:	4bb6      	ldr	r3, [pc, #728]	; (8001638 <SysTick_Handler+0x2f4>)
 8001360:	7a1b      	ldrb	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <SysTick_Handler+0x2c>
 8001366:	4bb5      	ldr	r3, [pc, #724]	; (800163c <SysTick_Handler+0x2f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4ab3      	ldr	r2, [pc, #716]	; (800163c <SysTick_Handler+0x2f8>)
 800136e:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001370:	4bb1      	ldr	r3, [pc, #708]	; (8001638 <SysTick_Handler+0x2f4>)
 8001372:	7a1b      	ldrb	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00c      	beq.n	8001392 <SysTick_Handler+0x4e>
 8001378:	4baf      	ldr	r3, [pc, #700]	; (8001638 <SysTick_Handler+0x2f4>)
 800137a:	88db      	ldrh	r3, [r3, #6]
 800137c:	461a      	mov	r2, r3
 800137e:	4baf      	ldr	r3, [pc, #700]	; (800163c <SysTick_Handler+0x2f8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	da05      	bge.n	8001392 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 8001386:	4bac      	ldr	r3, [pc, #688]	; (8001638 <SysTick_Handler+0x2f4>)
 8001388:	2200      	movs	r2, #0
 800138a:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 800138c:	4bab      	ldr	r3, [pc, #684]	; (800163c <SysTick_Handler+0x2f8>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
		}


// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 8001392:	4bab      	ldr	r3, [pc, #684]	; (8001640 <SysTick_Handler+0x2fc>)
 8001394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001398:	f240 2261 	movw	r2, #609	; 0x261
 800139c:	4293      	cmp	r3, r2
 800139e:	d005      	beq.n	80013ac <SysTick_Handler+0x68>
 80013a0:	4ba7      	ldr	r3, [pc, #668]	; (8001640 <SysTick_Handler+0x2fc>)
 80013a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80013aa:	d109      	bne.n	80013c0 <SysTick_Handler+0x7c>
 80013ac:	4ba4      	ldr	r3, [pc, #656]	; (8001640 <SysTick_Handler+0x2fc>)
 80013ae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d104      	bne.n	80013c0 <SysTick_Handler+0x7c>
 80013b6:	4ba3      	ldr	r3, [pc, #652]	; (8001644 <SysTick_Handler+0x300>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4aa1      	ldr	r2, [pc, #644]	; (8001644 <SysTick_Handler+0x300>)
 80013be:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>=20000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;		//Envío de datos cada 20 segs
 80013c0:	4ba0      	ldr	r3, [pc, #640]	; (8001644 <SysTick_Handler+0x300>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013c8:	4293      	cmp	r3, r2
 80013ca:	dd0c      	ble.n	80013e6 <SysTick_Handler+0xa2>
 80013cc:	4b9c      	ldr	r3, [pc, #624]	; (8001640 <SysTick_Handler+0x2fc>)
 80013ce:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d007      	beq.n	80013e6 <SysTick_Handler+0xa2>
 80013d6:	4b9a      	ldr	r3, [pc, #616]	; (8001640 <SysTick_Handler+0x2fc>)
 80013d8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <SysTick_Handler+0xa2>
 80013e0:	4b99      	ldr	r3, [pc, #612]	; (8001648 <SysTick_Handler+0x304>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 80013e6:	4b99      	ldr	r3, [pc, #612]	; (800164c <SysTick_Handler+0x308>)
 80013e8:	7b9b      	ldrb	r3, [r3, #14]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10e      	bne.n	800140c <SysTick_Handler+0xc8>
	{
		ETH.ETH_WDG++;
 80013ee:	4b97      	ldr	r3, [pc, #604]	; (800164c <SysTick_Handler+0x308>)
 80013f0:	899b      	ldrh	r3, [r3, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b95      	ldr	r3, [pc, #596]	; (800164c <SysTick_Handler+0x308>)
 80013f8:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000) ETH.ETH_WDG=64000;		//Si alcanza valor límite lo dejo en 64000
 80013fa:	4b94      	ldr	r3, [pc, #592]	; (800164c <SysTick_Handler+0x308>)
 80013fc:	899b      	ldrh	r3, [r3, #12]
 80013fe:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001402:	d303      	bcc.n	800140c <SysTick_Handler+0xc8>
 8001404:	4b91      	ldr	r3, [pc, #580]	; (800164c <SysTick_Handler+0x308>)
 8001406:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800140a:	819a      	strh	r2, [r3, #12]
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==300)
 800140c:	4b88      	ldr	r3, [pc, #544]	; (8001630 <SysTick_Handler+0x2ec>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001414:	f040 83f6 	bne.w	8001c04 <SysTick_Handler+0x8c0>
  {
	dbgn++;
 8001418:	4b8d      	ldr	r3, [pc, #564]	; (8001650 <SysTick_Handler+0x30c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a8c      	ldr	r2, [pc, #560]	; (8001650 <SysTick_Handler+0x30c>)
 8001420:	6013      	str	r3, [r2, #0]
	ms_ticks=0;
 8001422:	4b83      	ldr	r3, [pc, #524]	; (8001630 <SysTick_Handler+0x2ec>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	min_ticks++;
 8001428:	4b8a      	ldr	r3, [pc, #552]	; (8001654 <SysTick_Handler+0x310>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a89      	ldr	r2, [pc, #548]	; (8001654 <SysTick_Handler+0x310>)
 8001430:	6013      	str	r3, [r2, #0]
  /*	if (asc==0)  MBUS_ticks++;
  	if (MBUS_ticks==100) asc=1;
  	if (asc==1) MBUS_ticks--;
  	if (MBUS_ticks==0) asc=0;*/

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001436:	4888      	ldr	r0, [pc, #544]	; (8001658 <SysTick_Handler+0x314>)
 8001438:	f001 fe15 	bl	8003066 <HAL_GPIO_TogglePin>

	if(spi_no_debug)
 800143c:	4b87      	ldr	r3, [pc, #540]	; (800165c <SysTick_Handler+0x318>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 839d 	beq.w	8001b80 <SysTick_Handler+0x83c>
	  {
	  if(SPI_ETH_READ_EN)
 8001446:	4b86      	ldr	r3, [pc, #536]	; (8001660 <SysTick_Handler+0x31c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 839c 	beq.w	8001b88 <SysTick_Handler+0x844>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001450:	2100      	movs	r1, #0
 8001452:	487e      	ldr	r0, [pc, #504]	; (800164c <SysTick_Handler+0x308>)
 8001454:	f00c f8de 	bl	800d614 <eth_rd_SOCKET_STAT>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b7b      	ldr	r3, [pc, #492]	; (800164c <SysTick_Handler+0x308>)
 800145e:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001460:	4b7a      	ldr	r3, [pc, #488]	; (800164c <SysTick_Handler+0x308>)
 8001462:	7b9b      	ldrb	r3, [r3, #14]
 8001464:	2b5f      	cmp	r3, #95	; 0x5f
 8001466:	f200 83c6 	bhi.w	8001bf6 <SysTick_Handler+0x8b2>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <SysTick_Handler+0x12c>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	080015f1 	.word	0x080015f1
 8001474:	08001bf7 	.word	0x08001bf7
 8001478:	08001bf7 	.word	0x08001bf7
 800147c:	08001bf7 	.word	0x08001bf7
 8001480:	08001bf7 	.word	0x08001bf7
 8001484:	08001bf7 	.word	0x08001bf7
 8001488:	08001bf7 	.word	0x08001bf7
 800148c:	08001bf7 	.word	0x08001bf7
 8001490:	08001bf7 	.word	0x08001bf7
 8001494:	08001bf7 	.word	0x08001bf7
 8001498:	08001bf7 	.word	0x08001bf7
 800149c:	08001bf7 	.word	0x08001bf7
 80014a0:	08001bf7 	.word	0x08001bf7
 80014a4:	08001bf7 	.word	0x08001bf7
 80014a8:	08001bf7 	.word	0x08001bf7
 80014ac:	08001bf7 	.word	0x08001bf7
 80014b0:	08001bf7 	.word	0x08001bf7
 80014b4:	08001bf7 	.word	0x08001bf7
 80014b8:	08001bf7 	.word	0x08001bf7
 80014bc:	0800166d 	.word	0x0800166d
 80014c0:	080016bf 	.word	0x080016bf
 80014c4:	080016d7 	.word	0x080016d7
 80014c8:	080016ef 	.word	0x080016ef
 80014cc:	08001707 	.word	0x08001707
 80014d0:	08001a5d 	.word	0x08001a5d
 80014d4:	08001bf7 	.word	0x08001bf7
 80014d8:	08001a75 	.word	0x08001a75
 80014dc:	08001a8d 	.word	0x08001a8d
 80014e0:	08001acb 	.word	0x08001acb
 80014e4:	08001b09 	.word	0x08001b09
 80014e8:	08001bf7 	.word	0x08001bf7
 80014ec:	08001bf7 	.word	0x08001bf7
 80014f0:	08001bf7 	.word	0x08001bf7
 80014f4:	08001bf7 	.word	0x08001bf7
 80014f8:	08001b21 	.word	0x08001b21
 80014fc:	08001bf7 	.word	0x08001bf7
 8001500:	08001bf7 	.word	0x08001bf7
 8001504:	08001bf7 	.word	0x08001bf7
 8001508:	08001bf7 	.word	0x08001bf7
 800150c:	08001bf7 	.word	0x08001bf7
 8001510:	08001bf7 	.word	0x08001bf7
 8001514:	08001bf7 	.word	0x08001bf7
 8001518:	08001bf7 	.word	0x08001bf7
 800151c:	08001bf7 	.word	0x08001bf7
 8001520:	08001bf7 	.word	0x08001bf7
 8001524:	08001bf7 	.word	0x08001bf7
 8001528:	08001bf7 	.word	0x08001bf7
 800152c:	08001bf7 	.word	0x08001bf7
 8001530:	08001bf7 	.word	0x08001bf7
 8001534:	08001bf7 	.word	0x08001bf7
 8001538:	08001b39 	.word	0x08001b39
 800153c:	08001bf7 	.word	0x08001bf7
 8001540:	08001bf7 	.word	0x08001bf7
 8001544:	08001bf7 	.word	0x08001bf7
 8001548:	08001bf7 	.word	0x08001bf7
 800154c:	08001bf7 	.word	0x08001bf7
 8001550:	08001bf7 	.word	0x08001bf7
 8001554:	08001bf7 	.word	0x08001bf7
 8001558:	08001bf7 	.word	0x08001bf7
 800155c:	08001bf7 	.word	0x08001bf7
 8001560:	08001bf7 	.word	0x08001bf7
 8001564:	08001bf7 	.word	0x08001bf7
 8001568:	08001bf7 	.word	0x08001bf7
 800156c:	08001bf7 	.word	0x08001bf7
 8001570:	08001bf7 	.word	0x08001bf7
 8001574:	08001bf7 	.word	0x08001bf7
 8001578:	08001b51 	.word	0x08001b51
 800157c:	08001bf7 	.word	0x08001bf7
 8001580:	08001bf7 	.word	0x08001bf7
 8001584:	08001bf7 	.word	0x08001bf7
 8001588:	08001bf7 	.word	0x08001bf7
 800158c:	08001bf7 	.word	0x08001bf7
 8001590:	08001bf7 	.word	0x08001bf7
 8001594:	08001bf7 	.word	0x08001bf7
 8001598:	08001bf7 	.word	0x08001bf7
 800159c:	08001bf7 	.word	0x08001bf7
 80015a0:	08001bf7 	.word	0x08001bf7
 80015a4:	08001bf7 	.word	0x08001bf7
 80015a8:	08001bf7 	.word	0x08001bf7
 80015ac:	08001bf7 	.word	0x08001bf7
 80015b0:	08001bf7 	.word	0x08001bf7
 80015b4:	08001bf7 	.word	0x08001bf7
 80015b8:	08001bf7 	.word	0x08001bf7
 80015bc:	08001bf7 	.word	0x08001bf7
 80015c0:	08001bf7 	.word	0x08001bf7
 80015c4:	08001bf7 	.word	0x08001bf7
 80015c8:	08001bf7 	.word	0x08001bf7
 80015cc:	08001bf7 	.word	0x08001bf7
 80015d0:	08001bf7 	.word	0x08001bf7
 80015d4:	08001bf7 	.word	0x08001bf7
 80015d8:	08001bf7 	.word	0x08001bf7
 80015dc:	08001bf7 	.word	0x08001bf7
 80015e0:	08001bf7 	.word	0x08001bf7
 80015e4:	08001bf7 	.word	0x08001bf7
 80015e8:	08001bf7 	.word	0x08001bf7
 80015ec:	08001b69 	.word	0x08001b69
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));}
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <SysTick_Handler+0x320>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d103      	bne.n	8001600 <SysTick_Handler+0x2bc>
 80015f8:	2113      	movs	r1, #19
 80015fa:	481b      	ldr	r0, [pc, #108]	; (8001668 <SysTick_Handler+0x324>)
 80015fc:	f7ff fe86 	bl	800130c <ITM0_Write>
					 eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001600:	2201      	movs	r2, #1
 8001602:	2100      	movs	r1, #0
 8001604:	4811      	ldr	r0, [pc, #68]	; (800164c <SysTick_Handler+0x308>)
 8001606:	f00b ff1b 	bl	800d440 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <SysTick_Handler+0x308>)
 800160c:	899b      	ldrh	r3, [r3, #12]
 800160e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001612:	4293      	cmp	r3, r2
 8001614:	f240 82ba 	bls.w	8001b8c <SysTick_Handler+0x848>
					 {
						 ETH.ETH_WDG=0;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <SysTick_Handler+0x308>)
 800161a:	2200      	movs	r2, #0
 800161c:	819a      	strh	r2, [r3, #12]
						 eth_init(&ETH);
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <SysTick_Handler+0x308>)
 8001620:	f00b ff4a 	bl	800d4b8 <eth_init>
						 eth_socket_init(&ETH,0);
 8001624:	2100      	movs	r1, #0
 8001626:	4809      	ldr	r0, [pc, #36]	; (800164c <SysTick_Handler+0x308>)
 8001628:	f00b ff9c 	bl	800d564 <eth_socket_init>
					 }

				 }
			 break;
 800162c:	e2ae      	b.n	8001b8c <SysTick_Handler+0x848>
 800162e:	bf00      	nop
 8001630:	20003120 	.word	0x20003120
 8001634:	20003588 	.word	0x20003588
 8001638:	20001018 	.word	0x20001018
 800163c:	2000358c 	.word	0x2000358c
 8001640:	200002c4 	.word	0x200002c4
 8001644:	200035b0 	.word	0x200035b0
 8001648:	2000317a 	.word	0x2000317a
 800164c:	20001cb8 	.word	0x20001cb8
 8001650:	200035b4 	.word	0x200035b4
 8001654:	20003124 	.word	0x20003124
 8001658:	40020800 	.word	0x40020800
 800165c:	20003170 	.word	0x20003170
 8001660:	2000317b 	.word	0x2000317b
 8001664:	20000084 	.word	0x20000084
 8001668:	0800f714 	.word	0x0800f714
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 800166c:	4ba7      	ldr	r3, [pc, #668]	; (800190c <SysTick_Handler+0x5c8>)
 800166e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001676:	2b01      	cmp	r3, #1
 8001678:	d110      	bne.n	800169c <SysTick_Handler+0x358>
					 {
						 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));}
 800167a:	4ba5      	ldr	r3, [pc, #660]	; (8001910 <SysTick_Handler+0x5cc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d103      	bne.n	800168a <SysTick_Handler+0x346>
 8001682:	2111      	movs	r1, #17
 8001684:	48a3      	ldr	r0, [pc, #652]	; (8001914 <SysTick_Handler+0x5d0>)
 8001686:	f7ff fe41 	bl	800130c <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 800168a:	2202      	movs	r2, #2
 800168c:	2100      	movs	r1, #0
 800168e:	489f      	ldr	r0, [pc, #636]	; (800190c <SysTick_Handler+0x5c8>)
 8001690:	f00b fed6 	bl	800d440 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001694:	4b9d      	ldr	r3, [pc, #628]	; (800190c <SysTick_Handler+0x5c8>)
 8001696:	2200      	movs	r2, #0
 8001698:	819a      	strh	r2, [r3, #12]
						 	}
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 800169a:	e2ac      	b.n	8001bf6 <SysTick_Handler+0x8b2>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 800169c:	2204      	movs	r2, #4
 800169e:	2100      	movs	r1, #0
 80016a0:	489a      	ldr	r0, [pc, #616]	; (800190c <SysTick_Handler+0x5c8>)
 80016a2:	f00b fecd 	bl	800d440 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN == 1)
 80016a6:	4b9a      	ldr	r3, [pc, #616]	; (8001910 <SysTick_Handler+0x5cc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d103      	bne.n	80016b6 <SysTick_Handler+0x372>
						 		ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 80016ae:	2115      	movs	r1, #21
 80016b0:	4899      	ldr	r0, [pc, #612]	; (8001918 <SysTick_Handler+0x5d4>)
 80016b2:	f7ff fe2b 	bl	800130c <ITM0_Write>
						 	ETH.ETH_WDG=0;
 80016b6:	4b95      	ldr	r3, [pc, #596]	; (800190c <SysTick_Handler+0x5c8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	819a      	strh	r2, [r3, #12]
			 break;
 80016bc:	e29b      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));}
 80016be:	4b94      	ldr	r3, [pc, #592]	; (8001910 <SysTick_Handler+0x5cc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d103      	bne.n	80016ce <SysTick_Handler+0x38a>
 80016c6:	2113      	movs	r1, #19
 80016c8:	4894      	ldr	r0, [pc, #592]	; (800191c <SysTick_Handler+0x5d8>)
 80016ca:	f7ff fe1f 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 80016ce:	4b8f      	ldr	r3, [pc, #572]	; (800190c <SysTick_Handler+0x5c8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80016d4:	e28f      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));}
 80016d6:	4b8e      	ldr	r3, [pc, #568]	; (8001910 <SysTick_Handler+0x5cc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d103      	bne.n	80016e6 <SysTick_Handler+0x3a2>
 80016de:	2114      	movs	r1, #20
 80016e0:	488f      	ldr	r0, [pc, #572]	; (8001920 <SysTick_Handler+0x5dc>)
 80016e2:	f7ff fe13 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 80016e6:	4b89      	ldr	r3, [pc, #548]	; (800190c <SysTick_Handler+0x5c8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80016ec:	e283      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));}
 80016ee:	4b88      	ldr	r3, [pc, #544]	; (8001910 <SysTick_Handler+0x5cc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d103      	bne.n	80016fe <SysTick_Handler+0x3ba>
 80016f6:	2114      	movs	r1, #20
 80016f8:	488a      	ldr	r0, [pc, #552]	; (8001924 <SysTick_Handler+0x5e0>)
 80016fa:	f7ff fe07 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 80016fe:	4b83      	ldr	r3, [pc, #524]	; (800190c <SysTick_Handler+0x5c8>)
 8001700:	2200      	movs	r2, #0
 8001702:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001704:	e277      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));}
 8001706:	4b82      	ldr	r3, [pc, #520]	; (8001910 <SysTick_Handler+0x5cc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d103      	bne.n	8001716 <SysTick_Handler+0x3d2>
 800170e:	2118      	movs	r1, #24
 8001710:	4885      	ldr	r0, [pc, #532]	; (8001928 <SysTick_Handler+0x5e4>)
 8001712:	f7ff fdfb 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001716:	4b7d      	ldr	r3, [pc, #500]	; (800190c <SysTick_Handler+0x5c8>)
 8001718:	2200      	movs	r2, #0
 800171a:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 800171c:	4b7b      	ldr	r3, [pc, #492]	; (800190c <SysTick_Handler+0x5c8>)
 800171e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001726:	2b01      	cmp	r3, #1
 8001728:	f040 8082 	bne.w	8001830 <SysTick_Handler+0x4ec>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800172c:	2302      	movs	r3, #2
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	4b7e      	ldr	r3, [pc, #504]	; (800192c <SysTick_Handler+0x5e8>)
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	230f      	movs	r3, #15
 8001736:	2226      	movs	r2, #38	; 0x26
 8001738:	2104      	movs	r1, #4
 800173a:	4874      	ldr	r0, [pc, #464]	; (800190c <SysTick_Handler+0x5c8>)
 800173c:	f00b fd55 	bl	800d1ea <SPI_ETH_REG>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	4b7a      	ldr	r3, [pc, #488]	; (8001930 <SysTick_Handler+0x5ec>)
 8001746:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001748:	4b79      	ldr	r3, [pc, #484]	; (8001930 <SysTick_Handler+0x5ec>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8251 	beq.w	8001bf4 <SysTick_Handler+0x8b0>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001752:	4b77      	ldr	r3, [pc, #476]	; (8001930 <SysTick_Handler+0x5ec>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	4a77      	ldr	r2, [pc, #476]	; (8001934 <SysTick_Handler+0x5f0>)
 8001758:	2100      	movs	r1, #0
 800175a:	486c      	ldr	r0, [pc, #432]	; (800190c <SysTick_Handler+0x5c8>)
 800175c:	f00b ff94 	bl	800d688 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001760:	4b74      	ldr	r3, [pc, #464]	; (8001934 <SysTick_Handler+0x5f0>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	f44f 6185 	mov.w	r1, #1064	; 0x428
 800176a:	4868      	ldr	r0, [pc, #416]	; (800190c <SysTick_Handler+0x5c8>)
 800176c:	f00b fdb5 	bl	800d2da <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001770:	2240      	movs	r2, #64	; 0x40
 8001772:	2100      	movs	r1, #0
 8001774:	4865      	ldr	r0, [pc, #404]	; (800190c <SysTick_Handler+0x5c8>)
 8001776:	f00b fe63 	bl	800d440 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 800177a:	bf00      	nop
 800177c:	2100      	movs	r1, #0
 800177e:	4863      	ldr	r0, [pc, #396]	; (800190c <SysTick_Handler+0x5c8>)
 8001780:	f00b ff65 	bl	800d64e <eth_rd_SOCKET_CMD>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f8      	bne.n	800177c <SysTick_Handler+0x438>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 800178a:	4b69      	ldr	r3, [pc, #420]	; (8001930 <SysTick_Handler+0x5ec>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	4968      	ldr	r1, [pc, #416]	; (8001938 <SysTick_Handler+0x5f4>)
 8001798:	4868      	ldr	r0, [pc, #416]	; (800193c <SysTick_Handler+0x5f8>)
 800179a:	f00c fca5 	bl	800e0e8 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 800179e:	4b64      	ldr	r3, [pc, #400]	; (8001930 <SysTick_Handler+0x5ec>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b66      	ldr	r3, [pc, #408]	; (8001940 <SysTick_Handler+0x5fc>)
 80017a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								//if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 80017aa:	4b65      	ldr	r3, [pc, #404]	; (8001940 <SysTick_Handler+0x5fc>)
 80017ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80017b0:	4619      	mov	r1, r3
 80017b2:	4862      	ldr	r0, [pc, #392]	; (800193c <SysTick_Handler+0x5f8>)
 80017b4:	f00a fa08 	bl	800bbc8 <ModBUS_Check>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00d      	beq.n	80017da <SysTick_Handler+0x496>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 80017be:	4860      	ldr	r0, [pc, #384]	; (8001940 <SysTick_Handler+0x5fc>)
 80017c0:	f00a fb02 	bl	800bdc8 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <SysTick_Handler+0x5fc>)
 80017c6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80017ca:	2300      	movs	r3, #0
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	495c      	ldr	r1, [pc, #368]	; (8001944 <SysTick_Handler+0x600>)
 80017d2:	4859      	ldr	r0, [pc, #356]	; (8001938 <SysTick_Handler+0x5f4>)
 80017d4:	f00c fc88 	bl	800e0e8 <CopiaVector>
 80017d8:	e007      	b.n	80017ea <SysTick_Handler+0x4a6>
								}
								else
								{
									if (ETH_DBG_EN == 1) {ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));}
 80017da:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <SysTick_Handler+0x5cc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d103      	bne.n	80017ea <SysTick_Handler+0x4a6>
 80017e2:	2111      	movs	r1, #17
 80017e4:	4858      	ldr	r0, [pc, #352]	; (8001948 <SysTick_Handler+0x604>)
 80017e6:	f7ff fd91 	bl	800130c <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 80017ea:	4b55      	ldr	r3, [pc, #340]	; (8001940 <SysTick_Handler+0x5fc>)
 80017ec:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b56      	ldr	r3, [pc, #344]	; (800194c <SysTick_Handler+0x608>)
 80017f4:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 80017f6:	4b55      	ldr	r3, [pc, #340]	; (800194c <SysTick_Handler+0x608>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	4a55      	ldr	r2, [pc, #340]	; (8001950 <SysTick_Handler+0x60c>)
 80017fc:	2100      	movs	r1, #0
 80017fe:	4843      	ldr	r0, [pc, #268]	; (800190c <SysTick_Handler+0x5c8>)
 8001800:	f00c f812 	bl	800d828 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001804:	4b52      	ldr	r3, [pc, #328]	; (8001950 <SysTick_Handler+0x60c>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	f240 4124 	movw	r1, #1060	; 0x424
 800180e:	483f      	ldr	r0, [pc, #252]	; (800190c <SysTick_Handler+0x5c8>)
 8001810:	f00b fd63 	bl	800d2da <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001814:	2220      	movs	r2, #32
 8001816:	2100      	movs	r1, #0
 8001818:	483c      	ldr	r0, [pc, #240]	; (800190c <SysTick_Handler+0x5c8>)
 800181a:	f00b fe11 	bl	800d440 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 800181e:	bf00      	nop
 8001820:	2100      	movs	r1, #0
 8001822:	483a      	ldr	r0, [pc, #232]	; (800190c <SysTick_Handler+0x5c8>)
 8001824:	f00b ff13 	bl	800d64e <eth_rd_SOCKET_CMD>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f8      	bne.n	8001820 <SysTick_Handler+0x4dc>

							}
						}
					}
				 }
			 break;
 800182e:	e1e1      	b.n	8001bf4 <SysTick_Handler+0x8b0>
						if (mb_eth._w_answer==0)
 8001830:	4b43      	ldr	r3, [pc, #268]	; (8001940 <SysTick_Handler+0x5fc>)
 8001832:	7a1b      	ldrb	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f040 8091 	bne.w	800195c <SysTick_Handler+0x618>
							ETH.data[0]=0x00;
 800183a:	4b34      	ldr	r3, [pc, #208]	; (800190c <SysTick_Handler+0x5c8>)
 800183c:	2200      	movs	r2, #0
 800183e:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <SysTick_Handler+0x5c8>)
 8001842:	2200      	movs	r2, #0
 8001844:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <SysTick_Handler+0x5c8>)
 8001848:	2200      	movs	r2, #0
 800184a:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <SysTick_Handler+0x5c8>)
 800184e:	2200      	movs	r2, #0
 8001850:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <SysTick_Handler+0x5c8>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <SysTick_Handler+0x5c8>)
 800185c:	2206      	movs	r2, #6
 800185e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <SysTick_Handler+0x5c8>)
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 800186a:	4b28      	ldr	r3, [pc, #160]	; (800190c <SysTick_Handler+0x5c8>)
 800186c:	2203      	movs	r2, #3
 800186e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <SysTick_Handler+0x5c8>)
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <SysTick_Handler+0x5c8>)
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <SysTick_Handler+0x5c8>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <SysTick_Handler+0x5c8>)
 800188c:	220a      	movs	r2, #10
 800188e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <SysTick_Handler+0x608>)
 8001894:	220c      	movs	r2, #12
 8001896:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001898:	220f      	movs	r2, #15
 800189a:	2100      	movs	r1, #0
 800189c:	4828      	ldr	r0, [pc, #160]	; (8001940 <SysTick_Handler+0x5fc>)
 800189e:	f00a fa3c 	bl	800bd1a <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 80018a2:	2300      	movs	r3, #0
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2300      	movs	r3, #0
 80018a8:	220c      	movs	r2, #12
 80018aa:	4926      	ldr	r1, [pc, #152]	; (8001944 <SysTick_Handler+0x600>)
 80018ac:	4822      	ldr	r0, [pc, #136]	; (8001938 <SysTick_Handler+0x5f4>)
 80018ae:	f00c fc1b 	bl	800e0e8 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <SysTick_Handler+0x608>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	4a26      	ldr	r2, [pc, #152]	; (8001950 <SysTick_Handler+0x60c>)
 80018b8:	2100      	movs	r1, #0
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <SysTick_Handler+0x5c8>)
 80018bc:	f00b ffb4 	bl	800d828 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <SysTick_Handler+0x60c>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	f240 4124 	movw	r1, #1060	; 0x424
 80018ca:	4810      	ldr	r0, [pc, #64]	; (800190c <SysTick_Handler+0x5c8>)
 80018cc:	f00b fd05 	bl	800d2da <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 80018d0:	2220      	movs	r2, #32
 80018d2:	2100      	movs	r1, #0
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <SysTick_Handler+0x5c8>)
 80018d6:	f00b fdb3 	bl	800d440 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80018da:	bf00      	nop
 80018dc:	2100      	movs	r1, #0
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <SysTick_Handler+0x5c8>)
 80018e0:	f00b feb5 	bl	800d64e <eth_rd_SOCKET_CMD>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f8      	bne.n	80018dc <SysTick_Handler+0x598>
							mb_eth._w_answer=1;	// Waiting answer flag
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <SysTick_Handler+0x5fc>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <SysTick_Handler+0x610>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN == 1) {ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));}
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SysTick_Handler+0x5cc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	f040 817a 	bne.w	8001bf4 <SysTick_Handler+0x8b0>
 8001900:	2117      	movs	r1, #23
 8001902:	4815      	ldr	r0, [pc, #84]	; (8001958 <SysTick_Handler+0x614>)
 8001904:	f7ff fd02 	bl	800130c <ITM0_Write>
			 break;
 8001908:	e174      	b.n	8001bf4 <SysTick_Handler+0x8b0>
 800190a:	bf00      	nop
 800190c:	20001cb8 	.word	0x20001cb8
 8001910:	20000084 	.word	0x20000084
 8001914:	0800f728 	.word	0x0800f728
 8001918:	0800f73c 	.word	0x0800f73c
 800191c:	0800f754 	.word	0x0800f754
 8001920:	0800f768 	.word	0x0800f768
 8001924:	0800f780 	.word	0x0800f780
 8001928:	0800f798 	.word	0x0800f798
 800192c:	20003130 	.word	0x20003130
 8001930:	20003128 	.word	0x20003128
 8001934:	2000312c 	.word	0x2000312c
 8001938:	20001cd4 	.word	0x20001cd4
 800193c:	2000102a 	.word	0x2000102a
 8001940:	20001018 	.word	0x20001018
 8001944:	20001230 	.word	0x20001230
 8001948:	0800f7b4 	.word	0x0800f7b4
 800194c:	2000312e 	.word	0x2000312e
 8001950:	2000312a 	.word	0x2000312a
 8001954:	2000358c 	.word	0x2000358c
 8001958:	0800f7c4 	.word	0x0800f7c4
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800195c:	2302      	movs	r3, #2
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	4b8b      	ldr	r3, [pc, #556]	; (8001b90 <SysTick_Handler+0x84c>)
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	230f      	movs	r3, #15
 8001966:	2226      	movs	r2, #38	; 0x26
 8001968:	2104      	movs	r1, #4
 800196a:	488a      	ldr	r0, [pc, #552]	; (8001b94 <SysTick_Handler+0x850>)
 800196c:	f00b fc3d 	bl	800d1ea <SPI_ETH_REG>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <SysTick_Handler+0x854>)
 8001976:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001978:	4b87      	ldr	r3, [pc, #540]	; (8001b98 <SysTick_Handler+0x854>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8139 	beq.w	8001bf4 <SysTick_Handler+0x8b0>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001982:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <SysTick_Handler+0x854>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	4a85      	ldr	r2, [pc, #532]	; (8001b9c <SysTick_Handler+0x858>)
 8001988:	2100      	movs	r1, #0
 800198a:	4882      	ldr	r0, [pc, #520]	; (8001b94 <SysTick_Handler+0x850>)
 800198c:	f00b fe7c 	bl	800d688 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001990:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <SysTick_Handler+0x858>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	f44f 6185 	mov.w	r1, #1064	; 0x428
 800199a:	487e      	ldr	r0, [pc, #504]	; (8001b94 <SysTick_Handler+0x850>)
 800199c:	f00b fc9d 	bl	800d2da <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	2100      	movs	r1, #0
 80019a4:	487b      	ldr	r0, [pc, #492]	; (8001b94 <SysTick_Handler+0x850>)
 80019a6:	f00b fd4b 	bl	800d440 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80019aa:	bf00      	nop
 80019ac:	2100      	movs	r1, #0
 80019ae:	4879      	ldr	r0, [pc, #484]	; (8001b94 <SysTick_Handler+0x850>)
 80019b0:	f00b fe4d 	bl	800d64e <eth_rd_SOCKET_CMD>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f8      	bne.n	80019ac <SysTick_Handler+0x668>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80019ba:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <SysTick_Handler+0x854>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2300      	movs	r3, #0
 80019c6:	4976      	ldr	r1, [pc, #472]	; (8001ba0 <SysTick_Handler+0x85c>)
 80019c8:	4876      	ldr	r0, [pc, #472]	; (8001ba4 <SysTick_Handler+0x860>)
 80019ca:	f00c fb8d 	bl	800e0e8 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80019ce:	4b72      	ldr	r3, [pc, #456]	; (8001b98 <SysTick_Handler+0x854>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b74      	ldr	r3, [pc, #464]	; (8001ba8 <SysTick_Handler+0x864>)
 80019d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 80019da:	4b73      	ldr	r3, [pc, #460]	; (8001ba8 <SysTick_Handler+0x864>)
 80019dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80019e0:	4619      	mov	r1, r3
 80019e2:	4870      	ldr	r0, [pc, #448]	; (8001ba4 <SysTick_Handler+0x860>)
 80019e4:	f00a f8f0 	bl	800bbc8 <ModBUS_Check>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d02c      	beq.n	8001a48 <SysTick_Handler+0x704>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 80019ee:	4b6e      	ldr	r3, [pc, #440]	; (8001ba8 <SysTick_Handler+0x864>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 80019f4:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <SysTick_Handler+0x868>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 80019fa:	486b      	ldr	r0, [pc, #428]	; (8001ba8 <SysTick_Handler+0x864>)
 80019fc:	f00a f9e4 	bl	800bdc8 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001a00:	4b69      	ldr	r3, [pc, #420]	; (8001ba8 <SysTick_Handler+0x864>)
 8001a02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a06:	2300      	movs	r3, #0
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	4965      	ldr	r1, [pc, #404]	; (8001ba4 <SysTick_Handler+0x860>)
 8001a0e:	4868      	ldr	r0, [pc, #416]	; (8001bb0 <SysTick_Handler+0x86c>)
 8001a10:	f00c fb6a 	bl	800e0e8 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001a14:	2300      	movs	r3, #0
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	4965      	ldr	r1, [pc, #404]	; (8001bb4 <SysTick_Handler+0x870>)
 8001a1e:	4866      	ldr	r0, [pc, #408]	; (8001bb8 <SysTick_Handler+0x874>)
 8001a20:	f00c fb62 	bl	800e0e8 <CopiaVector>
										ETH.S0_data_available=1;	//Informa que se ha recibido un dato y es ModBUS
 8001a24:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <SysTick_Handler+0x850>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	749a      	strb	r2, [r3, #18]
										if (ETH_DBG_EN == 1)
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <SysTick_Handler+0x878>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	f040 80e0 	bne.w	8001bf4 <SysTick_Handler+0x8b0>
											HAL_UART_Transmit_IT(&huart2,"\r\nMBUS RCVD\r\n",strlen("\r\nMBUS RCVD\r\n"));
 8001a34:	220d      	movs	r2, #13
 8001a36:	4962      	ldr	r1, [pc, #392]	; (8001bc0 <SysTick_Handler+0x87c>)
 8001a38:	4862      	ldr	r0, [pc, #392]	; (8001bc4 <SysTick_Handler+0x880>)
 8001a3a:	f003 fbdf 	bl	80051fc <HAL_UART_Transmit_IT>
											ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001a3e:	2117      	movs	r1, #23
 8001a40:	4861      	ldr	r0, [pc, #388]	; (8001bc8 <SysTick_Handler+0x884>)
 8001a42:	f7ff fc63 	bl	800130c <ITM0_Write>
			 break;
 8001a46:	e0d5      	b.n	8001bf4 <SysTick_Handler+0x8b0>
										if (ETH_DBG_EN == 1) {ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));}
 8001a48:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <SysTick_Handler+0x878>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	f040 80d1 	bne.w	8001bf4 <SysTick_Handler+0x8b0>
 8001a52:	2111      	movs	r1, #17
 8001a54:	485d      	ldr	r0, [pc, #372]	; (8001bcc <SysTick_Handler+0x888>)
 8001a56:	f7ff fc59 	bl	800130c <ITM0_Write>
			 break;
 8001a5a:	e0cb      	b.n	8001bf4 <SysTick_Handler+0x8b0>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));}
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <SysTick_Handler+0x878>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d103      	bne.n	8001a6c <SysTick_Handler+0x728>
 8001a64:	2115      	movs	r1, #21
 8001a66:	485a      	ldr	r0, [pc, #360]	; (8001bd0 <SysTick_Handler+0x88c>)
 8001a68:	f7ff fc50 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a6c:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <SysTick_Handler+0x850>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a72:	e0c0      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));}
 8001a74:	4b51      	ldr	r3, [pc, #324]	; (8001bbc <SysTick_Handler+0x878>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d103      	bne.n	8001a84 <SysTick_Handler+0x740>
 8001a7c:	2114      	movs	r1, #20
 8001a7e:	4855      	ldr	r0, [pc, #340]	; (8001bd4 <SysTick_Handler+0x890>)
 8001a80:	f7ff fc44 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <SysTick_Handler+0x850>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a8a:	e0b4      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));}
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <SysTick_Handler+0x878>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d103      	bne.n	8001a9c <SysTick_Handler+0x758>
 8001a94:	2116      	movs	r1, #22
 8001a96:	4850      	ldr	r0, [pc, #320]	; (8001bd8 <SysTick_Handler+0x894>)
 8001a98:	f7ff fc38 	bl	800130c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	483c      	ldr	r0, [pc, #240]	; (8001b94 <SysTick_Handler+0x850>)
 8001aa2:	f00b fccd 	bl	800d440 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001aa6:	bf00      	nop
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <SysTick_Handler+0x84c>)
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	4837      	ldr	r0, [pc, #220]	; (8001b94 <SysTick_Handler+0x850>)
 8001ab8:	f00b fb97 	bl	800d1ea <SPI_ETH_REG>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f2      	bne.n	8001aa8 <SysTick_Handler+0x764>
					{}
					ETH.ETH_WDG=0;
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <SysTick_Handler+0x850>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ac8:	e095      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));}
 8001aca:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <SysTick_Handler+0x878>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d103      	bne.n	8001ada <SysTick_Handler+0x796>
 8001ad2:	2117      	movs	r1, #23
 8001ad4:	4841      	ldr	r0, [pc, #260]	; (8001bdc <SysTick_Handler+0x898>)
 8001ad6:	f7ff fc19 	bl	800130c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001ada:	2208      	movs	r2, #8
 8001adc:	2100      	movs	r1, #0
 8001ade:	482d      	ldr	r0, [pc, #180]	; (8001b94 <SysTick_Handler+0x850>)
 8001ae0:	f00b fcae 	bl	800d440 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ae4:	bf00      	nop
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <SysTick_Handler+0x84c>)
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	230f      	movs	r3, #15
 8001af0:	2201      	movs	r2, #1
 8001af2:	2104      	movs	r1, #4
 8001af4:	4827      	ldr	r0, [pc, #156]	; (8001b94 <SysTick_Handler+0x850>)
 8001af6:	f00b fb78 	bl	800d1ea <SPI_ETH_REG>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f2      	bne.n	8001ae6 <SysTick_Handler+0x7a2>
					{}
					ETH.ETH_WDG=0;
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <SysTick_Handler+0x850>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b06:	e076      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN == 1)
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <SysTick_Handler+0x878>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d103      	bne.n	8001b18 <SysTick_Handler+0x7d4>
					 {
						 ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001b10:	2115      	movs	r1, #21
 8001b12:	4833      	ldr	r0, [pc, #204]	; (8001be0 <SysTick_Handler+0x89c>)
 8001b14:	f7ff fbfa 	bl	800130c <ITM0_Write>
					 }
					 ETH.ETH_WDG=0;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <SysTick_Handler+0x850>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b1e:	e06a      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN == 1){ ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));}
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <SysTick_Handler+0x878>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d103      	bne.n	8001b30 <SysTick_Handler+0x7ec>
 8001b28:	2110      	movs	r1, #16
 8001b2a:	482e      	ldr	r0, [pc, #184]	; (8001be4 <SysTick_Handler+0x8a0>)
 8001b2c:	f7ff fbee 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <SysTick_Handler+0x850>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b36:	e05e      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));}
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <SysTick_Handler+0x878>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d103      	bne.n	8001b48 <SysTick_Handler+0x804>
 8001b40:	2112      	movs	r1, #18
 8001b42:	4829      	ldr	r0, [pc, #164]	; (8001be8 <SysTick_Handler+0x8a4>)
 8001b44:	f7ff fbe2 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <SysTick_Handler+0x850>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b4e:	e052      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));}
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <SysTick_Handler+0x878>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d103      	bne.n	8001b60 <SysTick_Handler+0x81c>
 8001b58:	2113      	movs	r1, #19
 8001b5a:	4824      	ldr	r0, [pc, #144]	; (8001bec <SysTick_Handler+0x8a8>)
 8001b5c:	f7ff fbd6 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <SysTick_Handler+0x850>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b66:	e046      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN == 1) {ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));}
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <SysTick_Handler+0x878>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d103      	bne.n	8001b78 <SysTick_Handler+0x834>
 8001b70:	2111      	movs	r1, #17
 8001b72:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <SysTick_Handler+0x8ac>)
 8001b74:	f7ff fbca 	bl	800130c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SysTick_Handler+0x850>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b7e:	e03a      	b.n	8001bf6 <SysTick_Handler+0x8b2>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <SysTick_Handler+0x850>)
 8001b82:	f00b fb0b 	bl	800d19c <SPI_ETH>
 8001b86:	e036      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 default:
 8001b88:	bf00      	nop
 8001b8a:	e034      	b.n	8001bf6 <SysTick_Handler+0x8b2>
			 break;
 8001b8c:	bf00      	nop
 8001b8e:	e032      	b.n	8001bf6 <SysTick_Handler+0x8b2>
 8001b90:	20003130 	.word	0x20003130
 8001b94:	20001cb8 	.word	0x20001cb8
 8001b98:	20003128 	.word	0x20003128
 8001b9c:	2000312c 	.word	0x2000312c
 8001ba0:	20001cd4 	.word	0x20001cd4
 8001ba4:	2000102a 	.word	0x2000102a
 8001ba8:	20001018 	.word	0x20001018
 8001bac:	2000358c 	.word	0x2000358c
 8001bb0:	200024d4 	.word	0x200024d4
 8001bb4:	2000143c 	.word	0x2000143c
 8001bb8:	20001a8c 	.word	0x20001a8c
 8001bbc:	20000084 	.word	0x20000084
 8001bc0:	0800f7d8 	.word	0x0800f7d8
 8001bc4:	20000280 	.word	0x20000280
 8001bc8:	0800f7e8 	.word	0x0800f7e8
 8001bcc:	0800f7b4 	.word	0x0800f7b4
 8001bd0:	0800f7fc 	.word	0x0800f7fc
 8001bd4:	0800f814 	.word	0x0800f814
 8001bd8:	0800f82c 	.word	0x0800f82c
 8001bdc:	0800f844 	.word	0x0800f844
 8001be0:	0800f85c 	.word	0x0800f85c
 8001be4:	0800f874 	.word	0x0800f874
 8001be8:	0800f888 	.word	0x0800f888
 8001bec:	0800f89c 	.word	0x0800f89c
 8001bf0:	0800f8b0 	.word	0x0800f8b0
			 break;
 8001bf4:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001bf6:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <SysTick_Handler+0x9e4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d102      	bne.n	8001c04 <SysTick_Handler+0x8c0>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <SysTick_Handler+0x9e4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001c04:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <SysTick_Handler+0x9e8>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d104      	bne.n	8001c16 <SysTick_Handler+0x8d2>
 8001c0c:	4b48      	ldr	r3, [pc, #288]	; (8001d30 <SysTick_Handler+0x9ec>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	4a47      	ldr	r2, [pc, #284]	; (8001d30 <SysTick_Handler+0x9ec>)
 8001c14:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001c16:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <SysTick_Handler+0x9ec>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	dd0f      	ble.n	8001c3e <SysTick_Handler+0x8fa>
	{
		USART1_ticks=0;
 8001c1e:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <SysTick_Handler+0x9ec>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001c24:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <SysTick_Handler+0x9f0>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <SysTick_Handler+0x9e8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001c30:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <SysTick_Handler+0x9f4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a41      	ldr	r2, [pc, #260]	; (8001d3c <SysTick_Handler+0x9f8>)
 8001c36:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001c38:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <SysTick_Handler+0x9f4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3e:	f000 fd77 	bl	8002730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//Solo cuento cuando no estahaciendo otra cosa
 8001c42:	4b3f      	ldr	r3, [pc, #252]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d105      	bne.n	8001c58 <SysTick_Handler+0x914>
	{
		ticks++;
 8001c4c:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <SysTick_Handler+0xa00>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a3c      	ldr	r2, [pc, #240]	; (8001d44 <SysTick_Handler+0xa00>)
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e002      	b.n	8001c5e <SysTick_Handler+0x91a>
	}
	else
	{
		ticks=0;
 8001c58:	4b3a      	ldr	r3, [pc, #232]	; (8001d44 <SysTick_Handler+0xa00>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c60:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d158      	bne.n	8001d1a <SysTick_Handler+0x9d6>
	{
		if (FLAG_TIMEOUT_WF!=1)
 8001c68:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <SysTick_Handler+0xa04>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d017      	beq.n	8001ca0 <SysTick_Handler+0x95c>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c72:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d006      	beq.n	8001c88 <SysTick_Handler+0x944>
 8001c7a:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c7c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001c80:	3301      	adds	r3, #1
 8001c82:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c84:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c8a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d106      	bne.n	8001ca0 <SysTick_Handler+0x95c>
 8001c92:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c94:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001c98:	3301      	adds	r3, #1
 8001c9a:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001c9c:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001ca2:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d018      	beq.n	8001cdc <SysTick_Handler+0x998>
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001cac:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001cb0:	f241 527c 	movw	r2, #5500	; 0x157c
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	dd11      	ble.n	8001cdc <SysTick_Handler+0x998>
		{
			FLAG_TIMEOUT_WF=1;
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <SysTick_Handler+0xa04>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001cbe:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <SysTick_Handler+0xa08>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f242 020c 	movw	r2, #8204	; 0x200c
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d107      	bne.n	8001cdc <SysTick_Handler+0x998>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4920      	ldr	r1, [pc, #128]	; (8001d50 <SysTick_Handler+0xa0c>)
 8001cd0:	481e      	ldr	r0, [pc, #120]	; (8001d4c <SysTick_Handler+0xa08>)
 8001cd2:	f003 fad8 	bl	8005286 <HAL_UART_Receive_IT>
				EN_UART1_WF_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <SysTick_Handler+0xa10>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
			}
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001cde:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d11d      	bne.n	8001d22 <SysTick_Handler+0x9de>
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001ce8:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001cec:	f245 0214 	movw	r2, #20500	; 0x5014
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	dd16      	ble.n	8001d22 <SysTick_Handler+0x9de>
		{
			FLAG_TIMEOUT_WF=1;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <SysTick_Handler+0xa04>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <SysTick_Handler+0xa08>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f242 020c 	movw	r2, #8204	; 0x200c
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d10c      	bne.n	8001d22 <SysTick_Handler+0x9de>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4911      	ldr	r1, [pc, #68]	; (8001d50 <SysTick_Handler+0xa0c>)
 8001d0c:	480f      	ldr	r0, [pc, #60]	; (8001d4c <SysTick_Handler+0xa08>)
 8001d0e:	f003 faba 	bl	8005286 <HAL_UART_Receive_IT>
				EN_UART1_WF_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <SysTick_Handler+0xa10>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d18:	e003      	b.n	8001d22 <SysTick_Handler+0x9de>
		wf._ticks=0;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <SysTick_Handler+0x9fc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20003124 	.word	0x20003124
 8001d2c:	20003175 	.word	0x20003175
 8001d30:	200035a0 	.word	0x200035a0
 8001d34:	200035a4 	.word	0x200035a4
 8001d38:	2000359c 	.word	0x2000359c
 8001d3c:	200035a8 	.word	0x200035a8
 8001d40:	200002c4 	.word	0x200002c4
 8001d44:	20003590 	.word	0x20003590
 8001d48:	20003176 	.word	0x20003176
 8001d4c:	2000023c 	.word	0x2000023c
 8001d50:	20003580 	.word	0x20003580
 8001d54:	20003174 	.word	0x20003174

08001d58 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]


	if(ERRUART->Instance==USART1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <HAL_UART_ErrorCallback+0xa4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d121      	bne.n	8001dae <HAL_UART_ErrorCallback+0x56>
	{

		HAL_UART_Transmit_IT(&huart2,"\r\nUART1ERR\r\n",strlen("\r\nUART1ERR\r\n"));
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	4924      	ldr	r1, [pc, #144]	; (8001e00 <HAL_UART_ErrorCallback+0xa8>)
 8001d6e:	4825      	ldr	r0, [pc, #148]	; (8001e04 <HAL_UART_ErrorCallback+0xac>)
 8001d70:	f003 fa44 	bl	80051fc <HAL_UART_Transmit_IT>

		volatile int aore=0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]

			 wf._debug_count9++;
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_UART_ErrorCallback+0xb0>)
 8001d7e:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001d82:	3301      	adds	r3, #1
 8001d84:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <HAL_UART_ErrorCallback+0xb0>)
 8001d86:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	613b      	str	r3, [r7, #16]

		 HAL_UART_DeInit(ERRUART);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f003 f96d 	bl	800507a <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8001da0:	f7ff f9de 	bl	8001160 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART1_WF_RX_byte,1);
 8001da4:	2201      	movs	r2, #1
 8001da6:	4919      	ldr	r1, [pc, #100]	; (8001e0c <HAL_UART_ErrorCallback+0xb4>)
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f003 fa6c 	bl	8005286 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_UART_ErrorCallback+0xb8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d11c      	bne.n	8001df2 <HAL_UART_ErrorCallback+0x9a>
	{
		 volatile int aore=0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]

			 wf._debug_count9++;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_UART_ErrorCallback+0xb0>)
 8001dc2:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <HAL_UART_ErrorCallback+0xb0>)
 8001dca:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	60bb      	str	r3, [r7, #8]

		 HAL_UART_DeInit(ERRUART);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f003 f94b 	bl	800507a <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8001de4:	f7ff f9e6 	bl	80011b4 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART1_WF_RX_byte,1);
 8001de8:	2201      	movs	r2, #1
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <HAL_UART_ErrorCallback+0xb4>)
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f003 fa4a 	bl	8005286 <HAL_UART_Receive_IT>
	}
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	0800f8c4 	.word	0x0800f8c4
 8001e04:	20000280 	.word	0x20000280
 8001e08:	200002c4 	.word	0x200002c4
 8001e0c:	20003580 	.word	0x20003580
 8001e10:	40004400 	.word	0x40004400

08001e14 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_UART_RxCpltCallback+0x64>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d123      	bne.n	8001e6e <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART1_WF_RX_vect[UART1_WF_RX_pos]=UART1_WF_RX_byte[0];
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_UART_RxCpltCallback+0x68>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <HAL_UART_RxCpltCallback+0x6c>)
 8001e2c:	7811      	ldrb	r1, [r2, #0]
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_UART_RxCpltCallback+0x70>)
 8001e30:	54d1      	strb	r1, [r2, r3]
			UART1_WF_RX_pos++;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_UART_RxCpltCallback+0x68>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a10      	ldr	r2, [pc, #64]	; (8001e7c <HAL_UART_RxCpltCallback+0x68>)
 8001e3a:	6013      	str	r3, [r2, #0]
			if(UART1_WF_RX_pos>=512) UART1_WF_RX_pos=512;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_UART_RxCpltCallback+0x68>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e44:	db03      	blt.n	8001e4e <HAL_UART_RxCpltCallback+0x3a>
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_UART_RxCpltCallback+0x68>)
 8001e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4c:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001e4e:	2100      	movs	r1, #0
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <HAL_UART_RxCpltCallback+0x74>)
 8001e52:	f002 f919 	bl	8004088 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8001e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_WF_TMR=1;	//Habilito Timeout de software
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_UART_RxCpltCallback+0x78>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART1_WF_RX_byte,1);
 8001e64:	2201      	movs	r2, #1
 8001e66:	4906      	ldr	r1, [pc, #24]	; (8001e80 <HAL_UART_RxCpltCallback+0x6c>)
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f003 fa0c 	bl	8005286 <HAL_UART_Receive_IT>
		 }
 }
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40011000 	.word	0x40011000
 8001e7c:	200035ac 	.word	0x200035ac
 8001e80:	20003580 	.word	0x20003580
 8001e84:	2000317c 	.word	0x2000317c
 8001e88:	200001f4 	.word	0x200001f4
 8001e8c:	20003174 	.word	0x20003174

08001e90 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6078      	str	r0, [r7, #4]
		if(TIMER->Instance==TIM2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea0:	d139      	bne.n	8001f16 <HAL_TIM_OC_DelayElapsedCallback+0x86>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f002 f9ed 	bl	8004284 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1_WF=1;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
				 EN_UART1_WF_TMR=0;
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
				 UART1_WF_RX_items=UART1_WF_RX_pos;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ebc:	6013      	str	r3, [r2, #0]
				 UART1_WF_RX_pos=0;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
				 UART1_WF_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART1_WF_RX_vect_hld,UART1_WF_RX_vect,UART1_WF_RX_items,1,CMP_VECT);
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	4916      	ldr	r1, [pc, #88]	; (8001f30 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001eda:	f00c f905 	bl	800e0e8 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART1_WF_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4916      	ldr	r1, [pc, #88]	; (8001f3c <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001ee2:	4817      	ldr	r0, [pc, #92]	; (8001f40 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8001ee4:	f003 f9cf 	bl	8005286 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)ITM0_Write((uint8_t *)UART1_WF_RX_vect_hld,UART1_WF_RX_items);
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001eea:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <HAL_TIM_OC_DelayElapsedCallback+0x6e>
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480f      	ldr	r0, [pc, #60]	; (8001f38 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001efa:	f7ff fa07 	bl	800130c <ITM0_Write>

				 if (WF_SER_DBG==1)HAL_UART_Transmit_IT(&huart2,(uint8_t *)UART1_WF_RX_vect_hld,UART1_WF_RX_items);
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d107      	bne.n	8001f16 <HAL_TIM_OC_DelayElapsedCallback+0x86>
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	490a      	ldr	r1, [pc, #40]	; (8001f38 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001f10:	480e      	ldr	r0, [pc, #56]	; (8001f4c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8001f12:	f003 f973 	bl	80051fc <HAL_UART_Transmit_IT>

		}
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20003177 	.word	0x20003177
 8001f24:	20003174 	.word	0x20003174
 8001f28:	200035ac 	.word	0x200035ac
 8001f2c:	20003584 	.word	0x20003584
 8001f30:	2000317c 	.word	0x2000317c
 8001f34:	2000357c 	.word	0x2000357c
 8001f38:	2000337c 	.word	0x2000337c
 8001f3c:	20003580 	.word	0x20003580
 8001f40:	2000023c 	.word	0x2000023c
 8001f44:	200002c4 	.word	0x200002c4
 8001f48:	20000088 	.word	0x20000088
 8001f4c:	20000280 	.word	0x20000280

08001f50 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <ESP8266_HW_Reset+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <ESP8266_HW_Reset+0x44>)
 8001f62:	f001 f867 	bl	8003034 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8001f66:	2115      	movs	r1, #21
 8001f68:	480b      	ldr	r0, [pc, #44]	; (8001f98 <ESP8266_HW_Reset+0x48>)
 8001f6a:	f7ff f9cf 	bl	800130c <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 8001f6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f72:	f000 fbfd 	bl	8002770 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8001f76:	210f      	movs	r1, #15
 8001f78:	4808      	ldr	r0, [pc, #32]	; (8001f9c <ESP8266_HW_Reset+0x4c>)
 8001f7a:	f7ff f9c7 	bl	800130c <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <ESP8266_HW_Reset+0x44>)
 8001f86:	f001 f855 	bl	8003034 <HAL_GPIO_WritePin>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20003171 	.word	0x20003171
 8001f94:	40020000 	.word	0x40020000
 8001f98:	0800f6e0 	.word	0x0800f6e0
 8001f9c:	0800f8d4 	.word	0x0800f8d4

08001fa0 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af06      	add	r7, sp, #24
 8001fa6:	6078      	str	r0, [r7, #4]
	do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",12,100);
 8001fa8:	2364      	movs	r3, #100	; 0x64
 8001faa:	220c      	movs	r2, #12
 8001fac:	492d      	ldr	r1, [pc, #180]	; (8002064 <ESP8266_HW_Init+0xc4>)
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f003 f892 	bl	80050d8 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8001fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fb8:	f000 fbda 	bl	8002770 <HAL_Delay>
		  wf._n_fcomp=5;			//Cdad de elementos del vector a analizar
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <ESP8266_HW_Init+0xc8>)
 8001fbe:	2205      	movs	r2, #5
 8001fc0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART1_WF_RX_items;
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <ESP8266_HW_Init+0xcc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <ESP8266_HW_Init+0xc8>)
 8001fca:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  while(FT_String_ND(UART1_WF_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001fce:	e00e      	b.n	8001fee <ESP8266_HW_Init+0x4e>
		  {
			  wf._n_orig=UART1_WF_RX_items;
 8001fd0:	4b26      	ldr	r3, [pc, #152]	; (800206c <ESP8266_HW_Init+0xcc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a24      	ldr	r2, [pc, #144]	; (8002068 <ESP8266_HW_Init+0xc8>)
 8001fd6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <ESP8266_HW_Init+0xd0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	dd03      	ble.n	8001fee <ESP8266_HW_Init+0x4e>
					 {
						 ESP_InitF=1;
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <ESP8266_HW_Init+0xd4>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
						 break;
 8001fec:	e014      	b.n	8002018 <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART1_WF_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001fee:	4b22      	ldr	r3, [pc, #136]	; (8002078 <ESP8266_HW_Init+0xd8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	9205      	str	r2, [sp, #20]
 8001ff4:	9304      	str	r3, [sp, #16]
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <ESP8266_HW_Init+0xdc>)
 8001ff8:	9303      	str	r3, [sp, #12]
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <ESP8266_HW_Init+0xe0>)
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <ESP8266_HW_Init+0xe4>)
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <ESP8266_HW_Init+0xe8>)
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <ESP8266_HW_Init+0xec>)
 8002008:	4a21      	ldr	r2, [pc, #132]	; (8002090 <ESP8266_HW_Init+0xf0>)
 800200a:	4922      	ldr	r1, [pc, #136]	; (8002094 <ESP8266_HW_Init+0xf4>)
 800200c:	4822      	ldr	r0, [pc, #136]	; (8002098 <ESP8266_HW_Init+0xf8>)
 800200e:	f00b fcef 	bl	800d9f0 <FT_String_ND>
 8002012:	4603      	mov	r3, r0
 8002014:	2b01      	cmp	r3, #1
 8002016:	d1db      	bne.n	8001fd0 <ESP8266_HW_Init+0x30>
					 }
		  }

		  if (ESP_ticks<5000)
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <ESP8266_HW_Init+0xd0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002020:	4293      	cmp	r3, r2
 8002022:	dc06      	bgt.n	8002032 <ESP8266_HW_Init+0x92>
		  {
			  ESP_REinit=10;	//Condición de salida
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <ESP8266_HW_Init+0xfc>)
 8002026:	220a      	movs	r2, #10
 8002028:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <ESP8266_HW_Init+0xd0>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e008      	b.n	8002044 <ESP8266_HW_Init+0xa4>
		  }
		  else
		  {
			  ESP_REinit++;		//Conteo de la cantidad de veces que se reinicia el ciclo
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <ESP8266_HW_Init+0xfc>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <ESP8266_HW_Init+0xfc>)
 800203c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <ESP8266_HW_Init+0xd0>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
		  }

	 } while (ESP_REinit<=5);
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <ESP8266_HW_Init+0xfc>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d9ad      	bls.n	8001fa8 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <ESP8266_HW_Init+0xfc>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b0a      	cmp	r3, #10
 8002052:	d101      	bne.n	8002058 <ESP8266_HW_Init+0xb8>
	  {
		  return(1);
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <ESP8266_HW_Init+0xba>
	  }
	  else
	  {
		  return(0);
 8002058:	2300      	movs	r3, #0
	  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	0800f8e4 	.word	0x0800f8e4
 8002068:	200002c4 	.word	0x200002c4
 800206c:	20003584 	.word	0x20003584
 8002070:	20003588 	.word	0x20003588
 8002074:	20003172 	.word	0x20003172
 8002078:	2000100c 	.word	0x2000100c
 800207c:	20000d58 	.word	0x20000d58
 8002080:	20003594 	.word	0x20003594
 8002084:	20000fa4 	.word	0x20000fa4
 8002088:	20000b58 	.word	0x20000b58
 800208c:	20000fb0 	.word	0x20000fb0
 8002090:	0800f8f4 	.word	0x0800f8f4
 8002094:	20000f9c 	.word	0x20000f9c
 8002098:	2000337c 	.word	0x2000337c
 800209c:	20003171 	.word	0x20003171

080020a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a4:	b672      	cpsid	i
}
 80020a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <Error_Handler+0x8>
	...

080020ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_MspInit+0x4c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_MspInit+0x4c>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_MspInit+0x4c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_MspInit+0x4c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_MspInit+0x4c>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_MspInit+0x4c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800

080020fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_SPI_MspInit+0x84>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d12b      	bne.n	8002176 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_SPI_MspInit+0x88>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a17      	ldr	r2, [pc, #92]	; (8002184 <HAL_SPI_MspInit+0x88>)
 8002128:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_SPI_MspInit+0x88>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_SPI_MspInit+0x88>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_SPI_MspInit+0x88>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_SPI_MspInit+0x88>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002156:	23e0      	movs	r3, #224	; 0xe0
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002166:	2305      	movs	r3, #5
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <HAL_SPI_MspInit+0x8c>)
 8002172:	f000 fcf7 	bl	8002b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40013000 	.word	0x40013000
 8002184:	40023800 	.word	0x40023800
 8002188:	40020000 	.word	0x40020000

0800218c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219c:	d115      	bne.n	80021ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_TIM_Base_MspInit+0x48>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_TIM_Base_MspInit+0x48>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_TIM_Base_MspInit+0x48>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	201c      	movs	r0, #28
 80021c0:	f000 fbf9 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021c4:	201c      	movs	r0, #28
 80021c6:	f000 fc12 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a3a      	ldr	r2, [pc, #232]	; (80022e0 <HAL_UART_MspInit+0x108>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d135      	bne.n	8002266 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 8002204:	f043 0310 	orr.w	r3, r3, #16
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_WF_TX_Pin|USART1_WF_RX_Pin;
 8002232:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002244:	2307      	movs	r3, #7
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4826      	ldr	r0, [pc, #152]	; (80022e8 <HAL_UART_MspInit+0x110>)
 8002250:	f000 fc88 	bl	8002b64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	2100      	movs	r1, #0
 8002258:	2025      	movs	r0, #37	; 0x25
 800225a:	f000 fbac 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800225e:	2025      	movs	r0, #37	; 0x25
 8002260:	f000 fbc5 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002264:	e038      	b.n	80022d8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a20      	ldr	r2, [pc, #128]	; (80022ec <HAL_UART_MspInit+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d133      	bne.n	80022d8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a1a      	ldr	r2, [pc, #104]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 800227a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6313      	str	r3, [r2, #48]	; 0x30
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_UART_MspInit+0x10c>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_DBG_TX_Pin|USART2_DBG_RX_Pin;
 80022a8:	230c      	movs	r3, #12
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b8:	2307      	movs	r3, #7
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	4809      	ldr	r0, [pc, #36]	; (80022e8 <HAL_UART_MspInit+0x110>)
 80022c4:	f000 fc4e 	bl	8002b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	2026      	movs	r0, #38	; 0x26
 80022ce:	f000 fb72 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022d2:	2026      	movs	r0, #38	; 0x26
 80022d4:	f000 fb8b 	bl	80029ee <HAL_NVIC_EnableIRQ>
}
 80022d8:	bf00      	nop
 80022da:	3730      	adds	r7, #48	; 0x30
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40011000 	.word	0x40011000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40004400 	.word	0x40004400

080022f0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_UART_MspDeInit+0x5c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10e      	bne.n	8002320 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_UART_MspDeInit+0x60>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_UART_MspDeInit+0x60>)
 8002308:	f023 0310 	bic.w	r3, r3, #16
 800230c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_WF_TX_Pin|USART1_WF_RX_Pin);
 800230e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002312:	4810      	ldr	r0, [pc, #64]	; (8002354 <HAL_UART_MspDeInit+0x64>)
 8002314:	f000 fdaa 	bl	8002e6c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002318:	2025      	movs	r0, #37	; 0x25
 800231a:	f000 fb76 	bl	8002a0a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800231e:	e011      	b.n	8002344 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <HAL_UART_MspDeInit+0x68>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d10c      	bne.n	8002344 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_UART_MspDeInit+0x60>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_UART_MspDeInit+0x60>)
 8002330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_DBG_TX_Pin|USART2_DBG_RX_Pin);
 8002336:	210c      	movs	r1, #12
 8002338:	4806      	ldr	r0, [pc, #24]	; (8002354 <HAL_UART_MspDeInit+0x64>)
 800233a:	f000 fd97 	bl	8002e6c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800233e:	2026      	movs	r0, #38	; 0x26
 8002340:	f000 fb63 	bl	8002a0a <HAL_NVIC_DisableIRQ>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40011000 	.word	0x40011000
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000
 8002358:	40004400 	.word	0x40004400

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
		HAL_UART_Transmit_IT(&huart2,"\r\nNMIERR\r\n",10);
 8002360:	220a      	movs	r2, #10
 8002362:	4904      	ldr	r1, [pc, #16]	; (8002374 <NMI_Handler+0x18>)
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <NMI_Handler+0x1c>)
 8002366:	f002 ff49 	bl	80051fc <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 800236a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800236e:	f000 f9ff 	bl	8002770 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2,"\r\nNMIERR\r\n",10);
 8002372:	e7f5      	b.n	8002360 <NMI_Handler+0x4>
 8002374:	0800f8fc 	.word	0x0800f8fc
 8002378:	20000280 	.word	0x20000280

0800237c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_UART_Transmit_IT(&huart2,"\r\nHARDERR\r\n",11);
 8002380:	220b      	movs	r2, #11
 8002382:	4904      	ldr	r1, [pc, #16]	; (8002394 <HardFault_Handler+0x18>)
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <HardFault_Handler+0x1c>)
 8002386:	f002 ff39 	bl	80051fc <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 800238a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800238e:	f000 f9ef 	bl	8002770 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2,"\r\nHARDERR\r\n",11);
 8002392:	e7f5      	b.n	8002380 <HardFault_Handler+0x4>
 8002394:	0800f908 	.word	0x0800f908
 8002398:	20000280 	.word	0x20000280

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
		HAL_UART_Transmit_IT(&huart2,"\r\nMEMERR\r\n",10);
 80023a0:	220a      	movs	r2, #10
 80023a2:	4904      	ldr	r1, [pc, #16]	; (80023b4 <MemManage_Handler+0x18>)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MemManage_Handler+0x1c>)
 80023a6:	f002 ff29 	bl	80051fc <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 80023aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ae:	f000 f9df 	bl	8002770 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2,"\r\nMEMERR\r\n",10);
 80023b2:	e7f5      	b.n	80023a0 <MemManage_Handler+0x4>
 80023b4:	0800f914 	.word	0x0800f914
 80023b8:	20000280 	.word	0x20000280

080023bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
		HAL_UART_Transmit_IT(&huart2,"\r\nBUSERR\r\n",10);
 80023c0:	220a      	movs	r2, #10
 80023c2:	4904      	ldr	r1, [pc, #16]	; (80023d4 <BusFault_Handler+0x18>)
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <BusFault_Handler+0x1c>)
 80023c6:	f002 ff19 	bl	80051fc <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 80023ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ce:	f000 f9cf 	bl	8002770 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2,"\r\nBUSERR\r\n",10);
 80023d2:	e7f5      	b.n	80023c0 <BusFault_Handler+0x4>
 80023d4:	0800f920 	.word	0x0800f920
 80023d8:	20000280 	.word	0x20000280

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
		HAL_UART_Transmit_IT(&huart2,"\r\nUSGERR\r\n",10);
 80023e0:	220a      	movs	r2, #10
 80023e2:	4904      	ldr	r1, [pc, #16]	; (80023f4 <UsageFault_Handler+0x18>)
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <UsageFault_Handler+0x1c>)
 80023e6:	f002 ff09 	bl	80051fc <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 80023ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ee:	f000 f9bf 	bl	8002770 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2,"\r\nUSGERR\r\n",10);
 80023f2:	e7f5      	b.n	80023e0 <UsageFault_Handler+0x4>
 80023f4:	0800f92c 	.word	0x0800f92c
 80023f8:	20000280 	.word	0x20000280

080023fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

	while(1)
	{
		HAL_UART_Transmit_IT(&huart2,"\r\nSVCERR\r\n",10);
 8002400:	220a      	movs	r2, #10
 8002402:	4904      	ldr	r1, [pc, #16]	; (8002414 <SVC_Handler+0x18>)
 8002404:	4804      	ldr	r0, [pc, #16]	; (8002418 <SVC_Handler+0x1c>)
 8002406:	f002 fef9 	bl	80051fc <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 800240a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800240e:	f000 f9af 	bl	8002770 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2,"\r\nSVCERR\r\n",10);
 8002412:	e7f5      	b.n	8002400 <SVC_Handler+0x4>
 8002414:	0800f938 	.word	0x0800f938
 8002418:	20000280 	.word	0x20000280

0800241c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
	while(1)
	{
		HAL_UART_Transmit_IT(&huart2,"\r\nDEVERR\r\n",10);
 8002420:	220a      	movs	r2, #10
 8002422:	4904      	ldr	r1, [pc, #16]	; (8002434 <DebugMon_Handler+0x18>)
 8002424:	4804      	ldr	r0, [pc, #16]	; (8002438 <DebugMon_Handler+0x1c>)
 8002426:	f002 fee9 	bl	80051fc <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 800242a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800242e:	f000 f99f 	bl	8002770 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2,"\r\nDEVERR\r\n",10);
 8002432:	e7f5      	b.n	8002420 <DebugMon_Handler+0x4>
 8002434:	0800f944 	.word	0x0800f944
 8002438:	20000280 	.word	0x20000280

0800243c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <TIM2_IRQHandler+0x10>)
 8002452:	f002 f823 	bl	800449c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200001f4 	.word	0x200001f4

08002460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <USART1_IRQHandler+0x10>)
 8002466:	f002 ff3f 	bl	80052e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000023c 	.word	0x2000023c

08002474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <USART2_IRQHandler+0x10>)
 800247a:	f002 ff35 	bl	80052e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000280 	.word	0x20000280

08002488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
	return 1;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_kill>:

int _kill(int pid, int sig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024a2:	f00c f8cd 	bl	800e640 <__errno>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2216      	movs	r2, #22
 80024aa:	601a      	str	r2, [r3, #0]
	return -1;
 80024ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_exit>:

void _exit (int status)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ffe7 	bl	8002498 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ca:	e7fe      	b.n	80024ca <_exit+0x12>

080024cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e00a      	b.n	80024f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024de:	f3af 8000 	nop.w
 80024e2:	4601      	mov	r1, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	60ba      	str	r2, [r7, #8]
 80024ea:	b2ca      	uxtb	r2, r1
 80024ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dbf0      	blt.n	80024de <_read+0x12>
	}

return len;
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e009      	b.n	800252c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	60ba      	str	r2, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	dbf1      	blt.n	8002518 <_write+0x12>
	}
	return len;
 8002534:	687b      	ldr	r3, [r7, #4]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <_close>:

int _close(int file)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
	return -1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002566:	605a      	str	r2, [r3, #4]
	return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_isatty>:

int _isatty(int file)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
	return 1;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
	return 0;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <_sbrk+0x5c>)
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <_sbrk+0x60>)
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <_sbrk+0x64>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <_sbrk+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d207      	bcs.n	80025e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d8:	f00c f832 	bl	800e640 <__errno>
 80025dc:	4603      	mov	r3, r0
 80025de:	220c      	movs	r2, #12
 80025e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	e009      	b.n	80025fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <_sbrk+0x64>)
 80025f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20020000 	.word	0x20020000
 8002608:	00000400 	.word	0x00000400
 800260c:	200035b8 	.word	0x200035b8
 8002610:	20003710 	.word	0x20003710

08002614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <SystemInit+0x20>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <SystemInit+0x20>)
 8002620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002670 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800263e:	490e      	ldr	r1, [pc, #56]	; (8002678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002640:	4a0e      	ldr	r2, [pc, #56]	; (800267c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002654:	4c0b      	ldr	r4, [pc, #44]	; (8002684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002662:	f7ff ffd7 	bl	8002614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002666:	f00b fff1 	bl	800e64c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800266a:	f7fe f813 	bl	8000694 <main>
  bx  lr    
 800266e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002678:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800267c:	0800fdf4 	.word	0x0800fdf4
  ldr r2, =_sbss
 8002680:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002684:	2000370c 	.word	0x2000370c

08002688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002688:	e7fe      	b.n	8002688 <ADC_IRQHandler>
	...

0800268c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <HAL_Init+0x40>)
 8002696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_Init+0x40>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <HAL_Init+0x40>)
 80026a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_Init+0x40>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <HAL_Init+0x40>)
 80026ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b4:	2003      	movs	r0, #3
 80026b6:	f000 f973 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ba:	200f      	movs	r0, #15
 80026bc:	f000 f808 	bl	80026d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c0:	f7ff fcf4 	bl	80020ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023c00 	.word	0x40023c00

080026d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_InitTick+0x54>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_InitTick+0x58>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f999 	bl	8002a26 <HAL_SYSTICK_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00e      	b.n	800271c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d80a      	bhi.n	800271a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002704:	2200      	movs	r2, #0
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f000 f953 	bl	80029b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_InitTick+0x5c>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000008c 	.word	0x2000008c
 8002728:	20000094 	.word	0x20000094
 800272c:	20000090 	.word	0x20000090

08002730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x20>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x24>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_IncTick+0x24>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000094 	.word	0x20000094
 8002754:	200035bc 	.word	0x200035bc

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	200035bc 	.word	0x200035bc

08002770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff ffee 	bl	8002758 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d005      	beq.n	8002796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_Delay+0x44>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002796:	bf00      	nop
 8002798:	f7ff ffde 	bl	8002758 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d8f7      	bhi.n	8002798 <HAL_Delay+0x28>
  {
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000094 	.word	0x20000094

080027b8 <__NVIC_SetPriorityGrouping>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	60d3      	str	r3, [r2, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_GetPriorityGrouping>:
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <__NVIC_GetPriorityGrouping+0x18>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	f003 0307 	and.w	r3, r3, #7
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_EnableIRQ>:
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	2b00      	cmp	r3, #0
 800282c:	db0b      	blt.n	8002846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	4907      	ldr	r1, [pc, #28]	; (8002854 <__NVIC_EnableIRQ+0x38>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2001      	movs	r0, #1
 800283e:	fa00 f202 	lsl.w	r2, r0, r2
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_DisableIRQ>:
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db12      	blt.n	8002890 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	490a      	ldr	r1, [pc, #40]	; (800289c <__NVIC_DisableIRQ+0x44>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	3320      	adds	r3, #32
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002884:	f3bf 8f4f 	dsb	sy
}
 8002888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800288a:	f3bf 8f6f 	isb	sy
}
 800288e:	bf00      	nop
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100

080028a0 <__NVIC_SetPriority>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db0a      	blt.n	80028ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	490c      	ldr	r1, [pc, #48]	; (80028ec <__NVIC_SetPriority+0x4c>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	440b      	add	r3, r1
 80028c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028c8:	e00a      	b.n	80028e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <__NVIC_SetPriority+0x50>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3b04      	subs	r3, #4
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	440b      	add	r3, r1
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000e100 	.word	0xe000e100
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <NVIC_EncodePriority>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	bf28      	it	cs
 8002912:	2304      	movcs	r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3304      	adds	r3, #4
 800291a:	2b06      	cmp	r3, #6
 800291c:	d902      	bls.n	8002924 <NVIC_EncodePriority+0x30>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b03      	subs	r3, #3
 8002922:	e000      	b.n	8002926 <NVIC_EncodePriority+0x32>
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	401a      	ands	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43d9      	mvns	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	4313      	orrs	r3, r2
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <SysTick_Config>:
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f7ff ff8e 	bl	80028a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	; (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff05 	bl	80027b8 <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c8:	f7ff ff1a 	bl	8002800 <__NVIC_GetPriorityGrouping>
 80029cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ff8e 	bl	80028f4 <NVIC_EncodePriority>
 80029d8:	4602      	mov	r2, r0
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5d 	bl	80028a0 <__NVIC_SetPriority>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff0d 	bl	800281c <__NVIC_EnableIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff1d 	bl	8002858 <__NVIC_DisableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ff94 	bl	800295c <SysTick_Config>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff fe84 	bl	8002758 <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d008      	beq.n	8002a70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e052      	b.n	8002b16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0216 	bic.w	r2, r2, #22
 8002a7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <HAL_DMA_Abort+0x62>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0208 	bic.w	r2, r2, #8
 8002aae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac0:	e013      	b.n	8002aea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac2:	f7ff fe49 	bl	8002758 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d90c      	bls.n	8002aea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e015      	b.n	8002b16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e4      	bne.n	8002ac2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	223f      	movs	r2, #63	; 0x3f
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d004      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e00c      	b.n	8002b56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2205      	movs	r2, #5
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	e159      	b.n	8002e34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	f040 8148 	bne.w	8002e2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d005      	beq.n	8002bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d130      	bne.n	8002c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0201 	and.w	r2, r3, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d017      	beq.n	8002c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d123      	bne.n	8002ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	08da      	lsrs	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3208      	adds	r2, #8
 8002c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	08da      	lsrs	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0203 	and.w	r2, r3, #3
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a2 	beq.w	8002e2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b57      	ldr	r3, [pc, #348]	; (8002e4c <HAL_GPIO_Init+0x2e8>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	4a56      	ldr	r2, [pc, #344]	; (8002e4c <HAL_GPIO_Init+0x2e8>)
 8002cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfa:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <HAL_GPIO_Init+0x2e8>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d06:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_GPIO_Init+0x2ec>)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a49      	ldr	r2, [pc, #292]	; (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d019      	beq.n	8002d66 <HAL_GPIO_Init+0x202>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a48      	ldr	r2, [pc, #288]	; (8002e58 <HAL_GPIO_Init+0x2f4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <HAL_GPIO_Init+0x1fe>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a47      	ldr	r2, [pc, #284]	; (8002e5c <HAL_GPIO_Init+0x2f8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00d      	beq.n	8002d5e <HAL_GPIO_Init+0x1fa>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a46      	ldr	r2, [pc, #280]	; (8002e60 <HAL_GPIO_Init+0x2fc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <HAL_GPIO_Init+0x1f6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a45      	ldr	r2, [pc, #276]	; (8002e64 <HAL_GPIO_Init+0x300>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_GPIO_Init+0x1f2>
 8002d52:	2304      	movs	r3, #4
 8002d54:	e008      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d56:	2307      	movs	r3, #7
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e004      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d66:	2300      	movs	r3, #0
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	f002 0203 	and.w	r2, r2, #3
 8002d6e:	0092      	lsls	r2, r2, #2
 8002d70:	4093      	lsls	r3, r2
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d78:	4935      	ldr	r1, [pc, #212]	; (8002e50 <HAL_GPIO_Init+0x2ec>)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002daa:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e28:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3301      	adds	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	f67f aea2 	bls.w	8002b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40013800 	.word	0x40013800
 8002e54:	40020000 	.word	0x40020000
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	40020c00 	.word	0x40020c00
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40013c00 	.word	0x40013c00

08002e6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e0bb      	b.n	8003000 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e88:	2201      	movs	r2, #1
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	f040 80ab 	bne.w	8002ffa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ea4:	4a5c      	ldr	r2, [pc, #368]	; (8003018 <HAL_GPIO_DeInit+0x1ac>)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	3302      	adds	r3, #2
 8002eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a54      	ldr	r2, [pc, #336]	; (800301c <HAL_GPIO_DeInit+0x1b0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d019      	beq.n	8002f02 <HAL_GPIO_DeInit+0x96>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a53      	ldr	r2, [pc, #332]	; (8003020 <HAL_GPIO_DeInit+0x1b4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_DeInit+0x92>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_GPIO_DeInit+0x1b8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00d      	beq.n	8002efa <HAL_GPIO_DeInit+0x8e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a51      	ldr	r2, [pc, #324]	; (8003028 <HAL_GPIO_DeInit+0x1bc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_DeInit+0x8a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a50      	ldr	r2, [pc, #320]	; (800302c <HAL_GPIO_DeInit+0x1c0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_GPIO_DeInit+0x86>
 8002eee:	2304      	movs	r3, #4
 8002ef0:	e008      	b.n	8002f04 <HAL_GPIO_DeInit+0x98>
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_DeInit+0x98>
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e004      	b.n	8002f04 <HAL_GPIO_DeInit+0x98>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e002      	b.n	8002f04 <HAL_GPIO_DeInit+0x98>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_GPIO_DeInit+0x98>
 8002f02:	2300      	movs	r3, #0
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	f002 0203 	and.w	r2, r2, #3
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	4093      	lsls	r3, r2
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d132      	bne.n	8002f7a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_GPIO_DeInit+0x1c4>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	4944      	ldr	r1, [pc, #272]	; (8003030 <HAL_GPIO_DeInit+0x1c4>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f22:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_GPIO_DeInit+0x1c4>)
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	4941      	ldr	r1, [pc, #260]	; (8003030 <HAL_GPIO_DeInit+0x1c4>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_GPIO_DeInit+0x1c4>)
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	493d      	ldr	r1, [pc, #244]	; (8003030 <HAL_GPIO_DeInit+0x1c4>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <HAL_GPIO_DeInit+0x1c4>)
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	493a      	ldr	r1, [pc, #232]	; (8003030 <HAL_GPIO_DeInit+0x1c4>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f5c:	4a2e      	ldr	r2, [pc, #184]	; (8003018 <HAL_GPIO_DeInit+0x1ac>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	482a      	ldr	r0, [pc, #168]	; (8003018 <HAL_GPIO_DeInit+0x1ac>)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	400a      	ands	r2, r1
 8002f74:	3302      	adds	r3, #2
 8002f76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2103      	movs	r1, #3
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	08da      	lsrs	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3208      	adds	r2, #8
 8002f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	08d2      	lsrs	r2, r2, #3
 8002fb0:	4019      	ands	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	401a      	ands	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2103      	movs	r1, #3
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f af40 	bls.w	8002e88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40013800 	.word	0x40013800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020800 	.word	0x40020800
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021000 	.word	0x40021000
 8003030:	40013c00 	.word	0x40013c00

08003034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
 8003040:	4613      	mov	r3, r2
 8003042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003044:	787b      	ldrb	r3, [r7, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304a:	887a      	ldrh	r2, [r7, #2]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003050:	e003      	b.n	800305a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	041a      	lsls	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	619a      	str	r2, [r3, #24]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003078:	887a      	ldrh	r2, [r7, #2]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	041a      	lsls	r2, r3, #16
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	43d9      	mvns	r1, r3
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	400b      	ands	r3, r1
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e267      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d075      	beq.n	80031a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b85      	ldr	r3, [pc, #532]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d2:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030de:	d10b      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05b      	beq.n	80031a4 <HAL_RCC_OscConfig+0x108>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d157      	bne.n	80031a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e242      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x74>
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b70      	ldr	r3, [pc, #448]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6f      	ldr	r2, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b6d      	ldr	r3, [pc, #436]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6c      	ldr	r2, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003134:	4b69      	ldr	r3, [pc, #420]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a68      	ldr	r2, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff fb00 	bl	8002758 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315c:	f7ff fafc 	bl	8002758 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	; 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e207      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xc0>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7ff faec 	bl	8002758 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7ff fae8 	bl	8002758 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1f3      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0xe8>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b44      	ldr	r3, [pc, #272]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1c7      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e03a      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x244>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7ff faa1 	bl	8002758 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321a:	f7ff fa9d 	bl	8002758 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e1a8      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4925      	ldr	r1, [pc, #148]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_OscConfig+0x244>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7ff fa80 	bl	8002758 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325c:	f7ff fa7c 	bl	8002758 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e187      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d036      	beq.n	80032f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_RCC_OscConfig+0x248>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7ff fa60 	bl	8002758 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7ff fa5c 	bl	8002758 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e167      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x200>
 80032ba:	e01b      	b.n	80032f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_OscConfig+0x248>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7ff fa49 	bl	8002758 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e00e      	b.n	80032e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ca:	f7ff fa45 	bl	8002758 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d907      	bls.n	80032e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e150      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470000 	.word	0x42470000
 80032e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b88      	ldr	r3, [pc, #544]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ea      	bne.n	80032ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8097 	beq.w	8003430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b81      	ldr	r3, [pc, #516]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b7d      	ldr	r3, [pc, #500]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a7c      	ldr	r2, [pc, #496]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b7a      	ldr	r3, [pc, #488]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b77      	ldr	r3, [pc, #476]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b74      	ldr	r3, [pc, #464]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a73      	ldr	r2, [pc, #460]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7ff fa05 	bl	8002758 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7ff fa01 	bl	8002758 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e10c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x2ea>
 8003378:	4b64      	ldr	r3, [pc, #400]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a63      	ldr	r2, [pc, #396]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	e01c      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x30c>
 800338e:	4b5f      	ldr	r3, [pc, #380]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a5e      	ldr	r2, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	4b5c      	ldr	r3, [pc, #368]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a5b      	ldr	r2, [pc, #364]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 80033a8:	4b58      	ldr	r3, [pc, #352]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a57      	ldr	r2, [pc, #348]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	4b55      	ldr	r3, [pc, #340]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a54      	ldr	r2, [pc, #336]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7ff f9c6 	bl	8002758 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7ff f9c2 	bl	8002758 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0cb      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ee      	beq.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7ff f9b0 	bl	8002758 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7ff f9ac 	bl	8002758 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0b5      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	4b3e      	ldr	r3, [pc, #248]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ee      	bne.n	80033fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b39      	ldr	r3, [pc, #228]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a38      	ldr	r2, [pc, #224]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a1 	beq.w	800357c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b08      	cmp	r3, #8
 8003444:	d05c      	beq.n	8003500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d141      	bne.n	80034d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7ff f980 	bl	8002758 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7ff f97c 	bl	8002758 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e087      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	491b      	ldr	r1, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7ff f955 	bl	8002758 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7ff f951 	bl	8002758 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e05c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x416>
 80034d0:	e054      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7ff f93e 	bl	8002758 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7ff f93a 	bl	8002758 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e045      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x444>
 80034fe:	e03d      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e038      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x4ec>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d028      	beq.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d121      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d11a      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d111      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cc      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b68      	ldr	r3, [pc, #416]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d90c      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b65      	ldr	r3, [pc, #404]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d044      	beq.n	80036ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d119      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d003      	beq.n	800364a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003646:	2b03      	cmp	r3, #3
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e067      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4934      	ldr	r1, [pc, #208]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7ff f86c 	bl	8002758 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7ff f868 	bl	8002758 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e04f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d20c      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b22      	ldr	r3, [pc, #136]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	; (800374c <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe ffcc 	bl	80026d0 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00
 8003748:	40023800 	.word	0x40023800
 800374c:	0800fbe8 	.word	0x0800fbe8
 8003750:	2000008c 	.word	0x2000008c
 8003754:	20000090 	.word	0x20000090

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	b090      	sub	sp, #64	; 0x40
 800375e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
 8003764:	2300      	movs	r3, #0
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003768:	2300      	movs	r3, #0
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d00d      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x40>
 800377c:	2b08      	cmp	r3, #8
 800377e:	f200 80a1 	bhi.w	80038c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x34>
 8003786:	2b04      	cmp	r3, #4
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x3a>
 800378a:	e09b      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_GetSysClockFreq+0x184>)
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003790:	e09b      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003792:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003796:	e098      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003798:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a2:	4b4d      	ldr	r3, [pc, #308]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d028      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	627a      	str	r2, [r7, #36]	; 0x24
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037c0:	2100      	movs	r1, #0
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037c4:	fb03 f201 	mul.w	r2, r3, r1
 80037c8:	2300      	movs	r3, #0
 80037ca:	fb00 f303 	mul.w	r3, r0, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	4a43      	ldr	r2, [pc, #268]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d2:	fba0 1202 	umull	r1, r2, r0, r2
 80037d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d8:	460a      	mov	r2, r1
 80037da:	62ba      	str	r2, [r7, #40]	; 0x28
 80037dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037de:	4413      	add	r3, r2
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e4:	2200      	movs	r2, #0
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	61fa      	str	r2, [r7, #28]
 80037ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037f2:	f7fc fd5d 	bl	80002b0 <__aeabi_uldivmod>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4613      	mov	r3, r2
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fe:	e053      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003800:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	099b      	lsrs	r3, r3, #6
 8003806:	2200      	movs	r2, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	617a      	str	r2, [r7, #20]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003812:	f04f 0b00 	mov.w	fp, #0
 8003816:	4652      	mov	r2, sl
 8003818:	465b      	mov	r3, fp
 800381a:	f04f 0000 	mov.w	r0, #0
 800381e:	f04f 0100 	mov.w	r1, #0
 8003822:	0159      	lsls	r1, r3, #5
 8003824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003828:	0150      	lsls	r0, r2, #5
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	ebb2 080a 	subs.w	r8, r2, sl
 8003832:	eb63 090b 	sbc.w	r9, r3, fp
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003842:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003846:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800384a:	ebb2 0408 	subs.w	r4, r2, r8
 800384e:	eb63 0509 	sbc.w	r5, r3, r9
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	00eb      	lsls	r3, r5, #3
 800385c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003860:	00e2      	lsls	r2, r4, #3
 8003862:	4614      	mov	r4, r2
 8003864:	461d      	mov	r5, r3
 8003866:	eb14 030a 	adds.w	r3, r4, sl
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	eb45 030b 	adc.w	r3, r5, fp
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387e:	4629      	mov	r1, r5
 8003880:	028b      	lsls	r3, r1, #10
 8003882:	4621      	mov	r1, r4
 8003884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003888:	4621      	mov	r1, r4
 800388a:	028a      	lsls	r2, r1, #10
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	2200      	movs	r2, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	60fa      	str	r2, [r7, #12]
 8003898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800389c:	f7fc fd08 	bl	80002b0 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	3301      	adds	r3, #1
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetSysClockFreq+0x184>)
 80038c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3740      	adds	r7, #64	; 0x40
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	00f42400 	.word	0x00f42400
 80038e0:	017d7840 	.word	0x017d7840

080038e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	2000008c 	.word	0x2000008c

080038fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003900:	f7ff fff0 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0a9b      	lsrs	r3, r3, #10
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	0800fbf8 	.word	0x0800fbf8

08003924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003928:	f7ff ffdc 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	0b5b      	lsrs	r3, r3, #13
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	0800fbf8 	.word	0x0800fbf8

0800394c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e07b      	b.n	8003a56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396e:	d009      	beq.n	8003984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
 8003976:	e005      	b.n	8003984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fe fbac 	bl	80020fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	ea42 0103 	orr.w	r1, r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	f003 0104 	and.w	r1, r3, #4
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	f003 0210 	and.w	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b08c      	sub	sp, #48	; 0x30
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x26>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e18a      	b.n	8003d9a <HAL_SPI_TransmitReceive+0x33c>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a8c:	f7fe fe64 	bl	8002758 <HAL_GetTick>
 8003a90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d00f      	beq.n	8003ace <HAL_SPI_TransmitReceive+0x70>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ab4:	d107      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x68>
 8003abe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d003      	beq.n	8003ace <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003acc:	e15b      	b.n	8003d86 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x82>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x82>
 8003ada:	887b      	ldrh	r3, [r7, #2]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ae6:	e14e      	b.n	8003d86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d003      	beq.n	8003afc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2205      	movs	r2, #5
 8003af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	887a      	ldrh	r2, [r7, #2]
 8003b12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	887a      	ldrh	r2, [r7, #2]
 8003b1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d007      	beq.n	8003b50 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b58:	d178      	bne.n	8003c4c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x10a>
 8003b62:	8b7b      	ldrh	r3, [r7, #26]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d166      	bne.n	8003c36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	881a      	ldrh	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8c:	e053      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_SPI_TransmitReceive+0x176>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x176>
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d113      	bne.n	8003bd4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	881a      	ldrh	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	1c9a      	adds	r2, r3, #2
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d119      	bne.n	8003c16 <HAL_SPI_TransmitReceive+0x1b8>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d014      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c12:	2301      	movs	r3, #1
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c16:	f7fe fd9f 	bl	8002758 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d807      	bhi.n	8003c36 <HAL_SPI_TransmitReceive+0x1d8>
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d003      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c34:	e0a7      	b.n	8003d86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1a6      	bne.n	8003b8e <HAL_SPI_TransmitReceive+0x130>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1a1      	bne.n	8003b8e <HAL_SPI_TransmitReceive+0x130>
 8003c4a:	e07c      	b.n	8003d46 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0x1fc>
 8003c54:	8b7b      	ldrh	r3, [r7, #26]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d16b      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c80:	e057      	b.n	8003d32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d11c      	bne.n	8003cca <HAL_SPI_TransmitReceive+0x26c>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d017      	beq.n	8003cca <HAL_SPI_TransmitReceive+0x26c>
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d114      	bne.n	8003cca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d119      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x2ae>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d014      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d0c:	f7fe fd24 	bl	8002758 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d803      	bhi.n	8003d24 <HAL_SPI_TransmitReceive+0x2c6>
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d102      	bne.n	8003d2a <HAL_SPI_TransmitReceive+0x2cc>
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d30:	e029      	b.n	8003d86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1a2      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x224>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d19d      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f8b2 	bl	8003eb4 <SPI_EndRxTxTransaction>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d62:	e010      	b.n	8003d86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	e000      	b.n	8003d86 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3730      	adds	r7, #48	; 0x30
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003db4:	f7fe fcd0 	bl	8002758 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dc4:	f7fe fcc8 	bl	8002758 <HAL_GetTick>
 8003dc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	015b      	lsls	r3, r3, #5
 8003dd0:	0d1b      	lsrs	r3, r3, #20
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	fb02 f303 	mul.w	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dda:	e054      	b.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d050      	beq.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003de4:	f7fe fcb8 	bl	8002758 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d902      	bls.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d13d      	bne.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e12:	d111      	bne.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1c:	d004      	beq.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d107      	bne.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e40:	d10f      	bne.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e017      	b.n	8003ea6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d19b      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	2000008c 	.word	0x2000008c

08003eb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <SPI_EndRxTxTransaction+0x7c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <SPI_EndRxTxTransaction+0x80>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0d5b      	lsrs	r3, r3, #21
 8003ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ed0:	fb02 f303 	mul.w	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ede:	d112      	bne.n	8003f06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff ff5a 	bl	8003da4 <SPI_WaitFlagStateUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d016      	beq.n	8003f24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e00f      	b.n	8003f26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1c:	2b80      	cmp	r3, #128	; 0x80
 8003f1e:	d0f2      	beq.n	8003f06 <SPI_EndRxTxTransaction+0x52>
 8003f20:	e000      	b.n	8003f24 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f22:	bf00      	nop
  }

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2000008c 	.word	0x2000008c
 8003f34:	165e9f81 	.word	0x165e9f81

08003f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e041      	b.n	8003fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fe f914 	bl	800218c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f000 fce4 	bl	8004944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e041      	b.n	800406c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f839 	bl	8004074 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f000 fc95 	bl	8004944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_TIM_OC_Start_IT+0x28>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e022      	b.n	80040f6 <HAL_TIM_OC_Start_IT+0x6e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d109      	bne.n	80040ca <HAL_TIM_OC_Start_IT+0x42>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e015      	b.n	80040f6 <HAL_TIM_OC_Start_IT+0x6e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_OC_Start_IT+0x5c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e008      	b.n	80040f6 <HAL_TIM_OC_Start_IT+0x6e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0b3      	b.n	8004266 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <HAL_TIM_OC_Start_IT+0x86>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	e013      	b.n	8004136 <HAL_TIM_OC_Start_IT+0xae>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b04      	cmp	r3, #4
 8004112:	d104      	bne.n	800411e <HAL_TIM_OC_Start_IT+0x96>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	e00b      	b.n	8004136 <HAL_TIM_OC_Start_IT+0xae>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d104      	bne.n	800412e <HAL_TIM_OC_Start_IT+0xa6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412c:	e003      	b.n	8004136 <HAL_TIM_OC_Start_IT+0xae>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b0c      	cmp	r3, #12
 800413a:	d841      	bhi.n	80041c0 <HAL_TIM_OC_Start_IT+0x138>
 800413c:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <HAL_TIM_OC_Start_IT+0xbc>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004179 	.word	0x08004179
 8004148:	080041c1 	.word	0x080041c1
 800414c:	080041c1 	.word	0x080041c1
 8004150:	080041c1 	.word	0x080041c1
 8004154:	0800418b 	.word	0x0800418b
 8004158:	080041c1 	.word	0x080041c1
 800415c:	080041c1 	.word	0x080041c1
 8004160:	080041c1 	.word	0x080041c1
 8004164:	0800419d 	.word	0x0800419d
 8004168:	080041c1 	.word	0x080041c1
 800416c:	080041c1 	.word	0x080041c1
 8004170:	080041c1 	.word	0x080041c1
 8004174:	080041af 	.word	0x080041af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0202 	orr.w	r2, r2, #2
 8004186:	60da      	str	r2, [r3, #12]
      break;
 8004188:	e01d      	b.n	80041c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0204 	orr.w	r2, r2, #4
 8004198:	60da      	str	r2, [r3, #12]
      break;
 800419a:	e014      	b.n	80041c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	60da      	str	r2, [r3, #12]
      break;
 80041ac:	e00b      	b.n	80041c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0210 	orr.w	r2, r2, #16
 80041bc:	60da      	str	r2, [r3, #12]
      break;
 80041be:	e002      	b.n	80041c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      break;
 80041c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d14b      	bne.n	8004264 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2201      	movs	r2, #1
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fe5b 	bl	8004e90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a24      	ldr	r2, [pc, #144]	; (8004270 <HAL_TIM_OC_Start_IT+0x1e8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <HAL_TIM_OC_Start_IT+0x1e8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <HAL_TIM_OC_Start_IT+0x1a8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d013      	beq.n	8004230 <HAL_TIM_OC_Start_IT+0x1a8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_TIM_OC_Start_IT+0x1ec>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00e      	beq.n	8004230 <HAL_TIM_OC_Start_IT+0x1a8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_TIM_OC_Start_IT+0x1a8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <HAL_TIM_OC_Start_IT+0x1f4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_TIM_OC_Start_IT+0x1a8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_TIM_OC_Start_IT+0x1f8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d111      	bne.n	8004254 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b06      	cmp	r3, #6
 8004240:	d010      	beq.n	8004264 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004252:	e007      	b.n	8004264 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40010000 	.word	0x40010000
 8004274:	40000400 	.word	0x40000400
 8004278:	40000800 	.word	0x40000800
 800427c:	40000c00 	.word	0x40000c00
 8004280:	40014000 	.word	0x40014000

08004284 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b0c      	cmp	r3, #12
 8004296:	d841      	bhi.n	800431c <HAL_TIM_OC_Stop_IT+0x98>
 8004298:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <HAL_TIM_OC_Stop_IT+0x1c>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	080042d5 	.word	0x080042d5
 80042a4:	0800431d 	.word	0x0800431d
 80042a8:	0800431d 	.word	0x0800431d
 80042ac:	0800431d 	.word	0x0800431d
 80042b0:	080042e7 	.word	0x080042e7
 80042b4:	0800431d 	.word	0x0800431d
 80042b8:	0800431d 	.word	0x0800431d
 80042bc:	0800431d 	.word	0x0800431d
 80042c0:	080042f9 	.word	0x080042f9
 80042c4:	0800431d 	.word	0x0800431d
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	0800431d 	.word	0x0800431d
 80042d0:	0800430b 	.word	0x0800430b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0202 	bic.w	r2, r2, #2
 80042e2:	60da      	str	r2, [r3, #12]
      break;
 80042e4:	e01d      	b.n	8004322 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0204 	bic.w	r2, r2, #4
 80042f4:	60da      	str	r2, [r3, #12]
      break;
 80042f6:	e014      	b.n	8004322 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0208 	bic.w	r2, r2, #8
 8004306:	60da      	str	r2, [r3, #12]
      break;
 8004308:	e00b      	b.n	8004322 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0210 	bic.w	r2, r2, #16
 8004318:	60da      	str	r2, [r3, #12]
      break;
 800431a:	e002      	b.n	8004322 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      break;
 8004320:	bf00      	nop
  }

  if (status == HAL_OK)
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d157      	bne.n	80043d8 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2200      	movs	r2, #0
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fdad 	bl	8004e90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <HAL_TIM_OC_Stop_IT+0x160>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d117      	bne.n	8004370 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	f241 1311 	movw	r3, #4369	; 0x1111
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10f      	bne.n	8004370 <HAL_TIM_OC_Stop_IT+0xec>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6a1a      	ldr	r2, [r3, #32]
 8004356:	f240 4344 	movw	r3, #1092	; 0x444
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d107      	bne.n	8004370 <HAL_TIM_OC_Stop_IT+0xec>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	f241 1311 	movw	r3, #4369	; 0x1111
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10f      	bne.n	80043a0 <HAL_TIM_OC_Stop_IT+0x11c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6a1a      	ldr	r2, [r3, #32]
 8004386:	f240 4344 	movw	r3, #1092	; 0x444
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d107      	bne.n	80043a0 <HAL_TIM_OC_Stop_IT+0x11c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_TIM_OC_Stop_IT+0x12c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ae:	e013      	b.n	80043d8 <HAL_TIM_OC_Stop_IT+0x154>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d104      	bne.n	80043c0 <HAL_TIM_OC_Stop_IT+0x13c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043be:	e00b      	b.n	80043d8 <HAL_TIM_OC_Stop_IT+0x154>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d104      	bne.n	80043d0 <HAL_TIM_OC_Stop_IT+0x14c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ce:	e003      	b.n	80043d8 <HAL_TIM_OC_Stop_IT+0x154>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000

080043e8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e041      	b.n	8004480 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f839 	bl	8004488 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f000 fa8b 	bl	8004944 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0208 	bic.w	r2, r2, #8
 800443c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0202 	mvn.w	r2, #2
 80044c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa11 	bl	8004906 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd fcd2 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fa14 	bl	800491a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b04      	cmp	r3, #4
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0204 	mvn.w	r2, #4
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9e7 	bl	8004906 <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fd fca8 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f9ea 	bl	800491a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b08      	cmp	r3, #8
 8004558:	d122      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b08      	cmp	r3, #8
 8004566:	d11b      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0208 	mvn.w	r2, #8
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2204      	movs	r2, #4
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f9bd 	bl	8004906 <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fc7e 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f9c0 	bl	800491a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d122      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d11b      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0210 	mvn.w	r2, #16
 80045c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2208      	movs	r2, #8
 80045ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f993 	bl	8004906 <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd fc54 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f996 	bl	800491a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d10e      	bne.n	8004620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d107      	bne.n	8004620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0201 	mvn.w	r2, #1
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f969 	bl	80048f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	d10e      	bne.n	800464c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d107      	bne.n	800464c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fcc0 	bl	8004fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d10e      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d107      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f95b 	bl	800492e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b20      	cmp	r3, #32
 8004684:	d10e      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b20      	cmp	r3, #32
 8004692:	d107      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0220 	mvn.w	r2, #32
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fc8a 	bl	8004fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e048      	b.n	800475c <HAL_TIM_OC_ConfigChannel+0xb0>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d839      	bhi.n	800474c <HAL_TIM_OC_ConfigChannel+0xa0>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004715 	.word	0x08004715
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	0800474d 	.word	0x0800474d
 80046ec:	0800474d 	.word	0x0800474d
 80046f0:	08004723 	.word	0x08004723
 80046f4:	0800474d 	.word	0x0800474d
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	0800474d 	.word	0x0800474d
 8004700:	08004731 	.word	0x08004731
 8004704:	0800474d 	.word	0x0800474d
 8004708:	0800474d 	.word	0x0800474d
 800470c:	0800474d 	.word	0x0800474d
 8004710:	0800473f 	.word	0x0800473f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f992 	bl	8004a44 <TIM_OC1_SetConfig>
      break;
 8004720:	e017      	b.n	8004752 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f9f1 	bl	8004b10 <TIM_OC2_SetConfig>
      break;
 800472e:	e010      	b.n	8004752 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fa56 	bl	8004be8 <TIM_OC3_SetConfig>
      break;
 800473c:	e009      	b.n	8004752 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fab9 	bl	8004cbc <TIM_OC4_SetConfig>
      break;
 800474a:	e002      	b.n	8004752 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	75fb      	strb	r3, [r7, #23]
      break;
 8004750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800475a:	7dfb      	ldrb	r3, [r7, #23]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIM_ConfigClockSource+0x1c>
 800477c:	2302      	movs	r3, #2
 800477e:	e0b4      	b.n	80048ea <HAL_TIM_ConfigClockSource+0x186>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800479e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b8:	d03e      	beq.n	8004838 <HAL_TIM_ConfigClockSource+0xd4>
 80047ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047be:	f200 8087 	bhi.w	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c6:	f000 8086 	beq.w	80048d6 <HAL_TIM_ConfigClockSource+0x172>
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ce:	d87f      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	2b70      	cmp	r3, #112	; 0x70
 80047d2:	d01a      	beq.n	800480a <HAL_TIM_ConfigClockSource+0xa6>
 80047d4:	2b70      	cmp	r3, #112	; 0x70
 80047d6:	d87b      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d8:	2b60      	cmp	r3, #96	; 0x60
 80047da:	d050      	beq.n	800487e <HAL_TIM_ConfigClockSource+0x11a>
 80047dc:	2b60      	cmp	r3, #96	; 0x60
 80047de:	d877      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b50      	cmp	r3, #80	; 0x50
 80047e2:	d03c      	beq.n	800485e <HAL_TIM_ConfigClockSource+0xfa>
 80047e4:	2b50      	cmp	r3, #80	; 0x50
 80047e6:	d873      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d058      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x13a>
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d86f      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b30      	cmp	r3, #48	; 0x30
 80047f2:	d064      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x15a>
 80047f4:	2b30      	cmp	r3, #48	; 0x30
 80047f6:	d86b      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d060      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x15a>
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d867      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d05c      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x15a>
 8004804:	2b10      	cmp	r3, #16
 8004806:	d05a      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	e062      	b.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6899      	ldr	r1, [r3, #8]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f000 fb19 	bl	8004e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800482c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	609a      	str	r2, [r3, #8]
      break;
 8004836:	e04f      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	6899      	ldr	r1, [r3, #8]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f000 fb02 	bl	8004e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800485a:	609a      	str	r2, [r3, #8]
      break;
 800485c:	e03c      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	461a      	mov	r2, r3
 800486c:	f000 fa76 	bl	8004d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2150      	movs	r1, #80	; 0x50
 8004876:	4618      	mov	r0, r3
 8004878:	f000 facf 	bl	8004e1a <TIM_ITRx_SetConfig>
      break;
 800487c:	e02c      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	f000 fa95 	bl	8004dba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2160      	movs	r1, #96	; 0x60
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fabf 	bl	8004e1a <TIM_ITRx_SetConfig>
      break;
 800489c:	e01c      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f000 fa56 	bl	8004d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2140      	movs	r1, #64	; 0x40
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 faaf 	bl	8004e1a <TIM_ITRx_SetConfig>
      break;
 80048bc:	e00c      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f000 faa6 	bl	8004e1a <TIM_ITRx_SetConfig>
      break;
 80048ce:	e003      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      break;
 80048d4:	e000      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <TIM_Base_SetConfig+0xe4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00f      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004962:	d00b      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a31      	ldr	r2, [pc, #196]	; (8004a2c <TIM_Base_SetConfig+0xe8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a30      	ldr	r2, [pc, #192]	; (8004a30 <TIM_Base_SetConfig+0xec>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a2f      	ldr	r2, [pc, #188]	; (8004a34 <TIM_Base_SetConfig+0xf0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d108      	bne.n	800498e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a25      	ldr	r2, [pc, #148]	; (8004a28 <TIM_Base_SetConfig+0xe4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01b      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499c:	d017      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a22      	ldr	r2, [pc, #136]	; (8004a2c <TIM_Base_SetConfig+0xe8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <TIM_Base_SetConfig+0xec>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00f      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a20      	ldr	r2, [pc, #128]	; (8004a34 <TIM_Base_SetConfig+0xf0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00b      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <TIM_Base_SetConfig+0xf4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <TIM_Base_SetConfig+0xf8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1d      	ldr	r2, [pc, #116]	; (8004a40 <TIM_Base_SetConfig+0xfc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d108      	bne.n	80049e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <TIM_Base_SetConfig+0xe4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	615a      	str	r2, [r3, #20]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800

08004a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f023 0201 	bic.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 0302 	bic.w	r3, r3, #2
 8004a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a1c      	ldr	r2, [pc, #112]	; (8004b0c <TIM_OC1_SetConfig+0xc8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10c      	bne.n	8004aba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0308 	bic.w	r3, r3, #8
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <TIM_OC1_SetConfig+0xc8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d111      	bne.n	8004ae6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	621a      	str	r2, [r3, #32]
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40010000 	.word	0x40010000

08004b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0210 	bic.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0320 	bic.w	r3, r3, #32
 8004b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <TIM_OC2_SetConfig+0xd4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10d      	bne.n	8004b8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <TIM_OC2_SetConfig+0xd4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d113      	bne.n	8004bbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000

08004be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <TIM_OC3_SetConfig+0xd0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10d      	bne.n	8004c62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <TIM_OC3_SetConfig+0xd0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d113      	bne.n	8004c92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	621a      	str	r2, [r3, #32]
}
 8004cac:	bf00      	nop
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	40010000 	.word	0x40010000

08004cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	031b      	lsls	r3, r3, #12
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <TIM_OC4_SetConfig+0x9c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d109      	bne.n	8004d30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	019b      	lsls	r3, r3, #6
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40010000 	.word	0x40010000

08004d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 030a 	bic.w	r3, r3, #10
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f023 0210 	bic.w	r2, r3, #16
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	031b      	lsls	r3, r3, #12
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f043 0307 	orr.w	r3, r3, #7
 8004e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	609a      	str	r2, [r3, #8]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	021a      	lsls	r2, r3, #8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	609a      	str	r2, [r3, #8]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	401a      	ands	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a1a      	ldr	r2, [r3, #32]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e050      	b.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d018      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d013      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a16      	ldr	r2, [pc, #88]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d10c      	bne.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800
 8004fb0:	40000c00 	.word	0x40000c00
 8004fb4:	40014000 	.word	0x40014000

08004fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e03f      	b.n	8005072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd f8e6 	bl	80021d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	; 0x24
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fe49 	bl	8005cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e021      	b.n	80050d0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2224      	movs	r2, #36	; 0x24
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fd f923 	bl	80022f0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d17c      	bne.n	80051f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_UART_Transmit+0x2c>
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e075      	b.n	80051f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_UART_Transmit+0x3e>
 8005112:	2302      	movs	r3, #2
 8005114:	e06e      	b.n	80051f4 <HAL_UART_Transmit+0x11c>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2221      	movs	r2, #33	; 0x21
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800512c:	f7fd fb14 	bl	8002758 <HAL_GetTick>
 8005130:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	88fa      	ldrh	r2, [r7, #6]
 800513c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005146:	d108      	bne.n	800515a <HAL_UART_Transmit+0x82>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	61bb      	str	r3, [r7, #24]
 8005158:	e003      	b.n	8005162 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800516a:	e02a      	b.n	80051c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2200      	movs	r2, #0
 8005174:	2180      	movs	r1, #128	; 0x80
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fb5a 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e036      	b.n	80051f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800519a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	3302      	adds	r3, #2
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	e007      	b.n	80051b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	781a      	ldrb	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3301      	adds	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1cf      	bne.n	800516c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2200      	movs	r2, #0
 80051d4:	2140      	movs	r1, #64	; 0x40
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fb2a 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e006      	b.n	80051f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b20      	cmp	r3, #32
 8005214:	d130      	bne.n	8005278 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_UART_Transmit_IT+0x26>
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e029      	b.n	800527a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_UART_Transmit_IT+0x38>
 8005230:	2302      	movs	r3, #2
 8005232:	e022      	b.n	800527a <HAL_UART_Transmit_IT+0x7e>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	88fa      	ldrh	r2, [r7, #6]
 8005246:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2221      	movs	r2, #33	; 0x21
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005272:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	4613      	mov	r3, r2
 8005292:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b20      	cmp	r3, #32
 800529e:	d11d      	bne.n	80052dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_UART_Receive_IT+0x26>
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e016      	b.n	80052de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_UART_Receive_IT+0x38>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e00f      	b.n	80052de <HAL_UART_Receive_IT+0x58>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	461a      	mov	r2, r3
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fb1a 	bl	800590c <UART_Start_Receive_IT>
 80052d8:	4603      	mov	r3, r0
 80052da:	e000      	b.n	80052de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b0ba      	sub	sp, #232	; 0xe8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800530e:	2300      	movs	r3, #0
 8005310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005314:	2300      	movs	r3, #0
 8005316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10f      	bne.n	800534e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_UART_IRQHandler+0x66>
 800533a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fbfd 	bl	8005b46 <UART_Receive_IT>
      return;
 800534c:	e256      	b.n	80057fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800534e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 80de 	beq.w	8005514 <HAL_UART_IRQHandler+0x22c>
 8005358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005368:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80d1 	beq.w	8005514 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <HAL_UART_IRQHandler+0xae>
 800537e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f043 0201 	orr.w	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <HAL_UART_IRQHandler+0xd2>
 80053a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f043 0202 	orr.w	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <HAL_UART_IRQHandler+0xf6>
 80053c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f043 0204 	orr.w	r2, r3, #4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d011      	beq.n	800540e <HAL_UART_IRQHandler+0x126>
 80053ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d105      	bne.n	8005402 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f043 0208 	orr.w	r2, r3, #8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 81ed 	beq.w	80057f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_UART_IRQHandler+0x14e>
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fb88 	bl	8005b46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <HAL_UART_IRQHandler+0x17a>
 800545a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04f      	beq.n	8005502 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa90 	bl	8005988 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d141      	bne.n	80054fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3314      	adds	r3, #20
 800547c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800548c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3314      	adds	r3, #20
 800549e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1d9      	bne.n	8005476 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d013      	beq.n	80054f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	4a7d      	ldr	r2, [pc, #500]	; (80056c4 <HAL_UART_IRQHandler+0x3dc>)
 80054d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fd fb21 	bl	8002b1e <HAL_DMA_Abort_IT>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	e00e      	b.n	8005510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc fc30 	bl	8001d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f8:	e00a      	b.n	8005510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc fc2c 	bl	8001d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	e006      	b.n	8005510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc fc28 	bl	8001d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800550e:	e170      	b.n	80057f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005510:	bf00      	nop
    return;
 8005512:	e16e      	b.n	80057f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	2b01      	cmp	r3, #1
 800551a:	f040 814a 	bne.w	80057b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 8143 	beq.w	80057b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800552c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 813c 	beq.w	80057b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800553a:	2300      	movs	r3, #0
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	f040 80b4 	bne.w	80056c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800556c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8140 	beq.w	80057f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800557a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800557e:	429a      	cmp	r2, r3
 8005580:	f080 8139 	bcs.w	80057f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800558a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005596:	f000 8088 	beq.w	80056aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1d9      	bne.n	800559a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3314      	adds	r3, #20
 80055ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3314      	adds	r3, #20
 8005606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800560a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800560e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800561c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e1      	bne.n	80055e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3314      	adds	r3, #20
 8005642:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005648:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800564c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e3      	bne.n	8005622 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567a:	f023 0310 	bic.w	r3, r3, #16
 800567e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800568c:	65ba      	str	r2, [r7, #88]	; 0x58
 800568e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800569a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e3      	bne.n	8005668 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fd f9ca 	bl	8002a3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8ac 	bl	8005818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056c0:	e099      	b.n	80057f6 <HAL_UART_IRQHandler+0x50e>
 80056c2:	bf00      	nop
 80056c4:	08005a4f 	.word	0x08005a4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 808b 	beq.w	80057fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8086 	beq.w	80057fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005712:	647a      	str	r2, [r7, #68]	; 0x44
 8005714:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e3      	bne.n	80056ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3314      	adds	r3, #20
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	623b      	str	r3, [r7, #32]
   return(result);
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800574a:	633a      	str	r2, [r7, #48]	; 0x30
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e3      	bne.n	8005726 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	60fb      	str	r3, [r7, #12]
   return(result);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0310 	bic.w	r3, r3, #16
 8005782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005790:	61fa      	str	r2, [r7, #28]
 8005792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	69b9      	ldr	r1, [r7, #24]
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	617b      	str	r3, [r7, #20]
   return(result);
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e3      	bne.n	800576c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f834 	bl	8005818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057b0:	e023      	b.n	80057fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_UART_IRQHandler+0x4ea>
 80057be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f953 	bl	8005a76 <UART_Transmit_IT>
    return;
 80057d0:	e014      	b.n	80057fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00e      	beq.n	80057fc <HAL_UART_IRQHandler+0x514>
 80057de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f993 	bl	8005b16 <UART_EndTransmit_IT>
    return;
 80057f0:	e004      	b.n	80057fc <HAL_UART_IRQHandler+0x514>
    return;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <HAL_UART_IRQHandler+0x514>
      return;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_UART_IRQHandler+0x514>
      return;
 80057fa:	bf00      	nop
  }
}
 80057fc:	37e8      	adds	r7, #232	; 0xe8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop

08005804 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b090      	sub	sp, #64	; 0x40
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005840:	e050      	b.n	80058e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d04c      	beq.n	80058e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800584a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <UART_WaitOnFlagUntilTimeout+0x30>
 8005850:	f7fc ff82 	bl	8002758 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800585c:	429a      	cmp	r2, r3
 800585e:	d241      	bcs.n	80058e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005880:	637a      	str	r2, [r7, #52]	; 0x34
 8005882:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e5      	bne.n	8005860 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	613b      	str	r3, [r7, #16]
   return(result);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058b4:	623a      	str	r2, [r7, #32]
 80058b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	69f9      	ldr	r1, [r7, #28]
 80058ba:	6a3a      	ldr	r2, [r7, #32]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e5      	bne.n	8005894 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e00f      	b.n	8005904 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4013      	ands	r3, r2
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	bf0c      	ite	eq
 80058f4:	2301      	moveq	r3, #1
 80058f6:	2300      	movne	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d09f      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3740      	adds	r7, #64	; 0x40
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2222      	movs	r2, #34	; 0x22
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005958:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0220 	orr.w	r2, r2, #32
 8005978:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b095      	sub	sp, #84	; 0x54
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059b0:	643a      	str	r2, [r7, #64]	; 0x40
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e5      	bne.n	8005990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3314      	adds	r3, #20
 80059ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	64bb      	str	r3, [r7, #72]	; 0x48
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3314      	adds	r3, #20
 80059e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e5      	bne.n	80059c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d119      	bne.n	8005a34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0310 	bic.w	r3, r3, #16
 8005a16:	647b      	str	r3, [r7, #68]	; 0x44
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a20:	61ba      	str	r2, [r7, #24]
 8005a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6979      	ldr	r1, [r7, #20]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e5      	bne.n	8005a00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a42:	bf00      	nop
 8005a44:	3754      	adds	r7, #84	; 0x54
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7fc f975 	bl	8001d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b21      	cmp	r3, #33	; 0x21
 8005a88:	d13e      	bne.n	8005b08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a92:	d114      	bne.n	8005abe <UART_Transmit_IT+0x48>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d110      	bne.n	8005abe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	1c9a      	adds	r2, r3, #2
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	621a      	str	r2, [r3, #32]
 8005abc:	e008      	b.n	8005ad0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	1c59      	adds	r1, r3, #1
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6211      	str	r1, [r2, #32]
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4619      	mov	r1, r3
 8005ade:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10f      	bne.n	8005b04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005af2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	e000      	b.n	8005b0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
  }
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fe64 	bl	8005804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b08c      	sub	sp, #48	; 0x30
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b22      	cmp	r3, #34	; 0x22
 8005b58:	f040 80ab 	bne.w	8005cb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b64:	d117      	bne.n	8005b96 <UART_Receive_IT+0x50>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d113      	bne.n	8005b96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	1c9a      	adds	r2, r3, #2
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28
 8005b94:	e026      	b.n	8005be4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba8:	d007      	beq.n	8005bba <UART_Receive_IT+0x74>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <UART_Receive_IT+0x82>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	e008      	b.n	8005bda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d15a      	bne.n	8005cae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0220 	bic.w	r2, r2, #32
 8005c06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d135      	bne.n	8005ca4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	330c      	adds	r3, #12
 8005c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f023 0310 	bic.w	r3, r3, #16
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	623a      	str	r2, [r7, #32]
 8005c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	69f9      	ldr	r1, [r7, #28]
 8005c64:	6a3a      	ldr	r2, [r7, #32]
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e5      	bne.n	8005c3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0310 	and.w	r3, r3, #16
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d10a      	bne.n	8005c96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fdbb 	bl	8005818 <HAL_UARTEx_RxEventCallback>
 8005ca2:	e002      	b.n	8005caa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7fc f8b5 	bl	8001e14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e002      	b.n	8005cb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e000      	b.n	8005cb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005cb2:	2302      	movs	r3, #2
  }
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3730      	adds	r7, #48	; 0x30
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc0:	b0c0      	sub	sp, #256	; 0x100
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	68d9      	ldr	r1, [r3, #12]
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	ea40 0301 	orr.w	r3, r0, r1
 8005ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d14:	f021 010c 	bic.w	r1, r1, #12
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d22:	430b      	orrs	r3, r1
 8005d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d36:	6999      	ldr	r1, [r3, #24]
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	ea40 0301 	orr.w	r3, r0, r1
 8005d42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b8f      	ldr	r3, [pc, #572]	; (8005f88 <UART_SetConfig+0x2cc>)
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d005      	beq.n	8005d5c <UART_SetConfig+0xa0>
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b8d      	ldr	r3, [pc, #564]	; (8005f8c <UART_SetConfig+0x2d0>)
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d104      	bne.n	8005d66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d5c:	f7fd fde2 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8005d60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d64:	e003      	b.n	8005d6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d66:	f7fd fdc9 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8005d6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d78:	f040 810c 	bne.w	8005f94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d8e:	4622      	mov	r2, r4
 8005d90:	462b      	mov	r3, r5
 8005d92:	1891      	adds	r1, r2, r2
 8005d94:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d96:	415b      	adcs	r3, r3
 8005d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d9e:	4621      	mov	r1, r4
 8005da0:	eb12 0801 	adds.w	r8, r2, r1
 8005da4:	4629      	mov	r1, r5
 8005da6:	eb43 0901 	adc.w	r9, r3, r1
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dbe:	4690      	mov	r8, r2
 8005dc0:	4699      	mov	r9, r3
 8005dc2:	4623      	mov	r3, r4
 8005dc4:	eb18 0303 	adds.w	r3, r8, r3
 8005dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dcc:	462b      	mov	r3, r5
 8005dce:	eb49 0303 	adc.w	r3, r9, r3
 8005dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005de2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005de6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005dea:	460b      	mov	r3, r1
 8005dec:	18db      	adds	r3, r3, r3
 8005dee:	653b      	str	r3, [r7, #80]	; 0x50
 8005df0:	4613      	mov	r3, r2
 8005df2:	eb42 0303 	adc.w	r3, r2, r3
 8005df6:	657b      	str	r3, [r7, #84]	; 0x54
 8005df8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e00:	f7fa fa56 	bl	80002b0 <__aeabi_uldivmod>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4b61      	ldr	r3, [pc, #388]	; (8005f90 <UART_SetConfig+0x2d4>)
 8005e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	011c      	lsls	r4, r3, #4
 8005e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e24:	4642      	mov	r2, r8
 8005e26:	464b      	mov	r3, r9
 8005e28:	1891      	adds	r1, r2, r2
 8005e2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e2c:	415b      	adcs	r3, r3
 8005e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e34:	4641      	mov	r1, r8
 8005e36:	eb12 0a01 	adds.w	sl, r2, r1
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	eb43 0b01 	adc.w	fp, r3, r1
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e54:	4692      	mov	sl, r2
 8005e56:	469b      	mov	fp, r3
 8005e58:	4643      	mov	r3, r8
 8005e5a:	eb1a 0303 	adds.w	r3, sl, r3
 8005e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e62:	464b      	mov	r3, r9
 8005e64:	eb4b 0303 	adc.w	r3, fp, r3
 8005e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e80:	460b      	mov	r3, r1
 8005e82:	18db      	adds	r3, r3, r3
 8005e84:	643b      	str	r3, [r7, #64]	; 0x40
 8005e86:	4613      	mov	r3, r2
 8005e88:	eb42 0303 	adc.w	r3, r2, r3
 8005e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e96:	f7fa fa0b 	bl	80002b0 <__aeabi_uldivmod>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	4b3b      	ldr	r3, [pc, #236]	; (8005f90 <UART_SetConfig+0x2d4>)
 8005ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	2264      	movs	r2, #100	; 0x64
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	1acb      	subs	r3, r1, r3
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eb6:	4b36      	ldr	r3, [pc, #216]	; (8005f90 <UART_SetConfig+0x2d4>)
 8005eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ec4:	441c      	add	r4, r3
 8005ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ed0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ed8:	4642      	mov	r2, r8
 8005eda:	464b      	mov	r3, r9
 8005edc:	1891      	adds	r1, r2, r2
 8005ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ee0:	415b      	adcs	r3, r3
 8005ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ee8:	4641      	mov	r1, r8
 8005eea:	1851      	adds	r1, r2, r1
 8005eec:	6339      	str	r1, [r7, #48]	; 0x30
 8005eee:	4649      	mov	r1, r9
 8005ef0:	414b      	adcs	r3, r1
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f00:	4659      	mov	r1, fp
 8005f02:	00cb      	lsls	r3, r1, #3
 8005f04:	4651      	mov	r1, sl
 8005f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	00ca      	lsls	r2, r1, #3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4619      	mov	r1, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	4642      	mov	r2, r8
 8005f16:	189b      	adds	r3, r3, r2
 8005f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	460a      	mov	r2, r1
 8005f20:	eb42 0303 	adc.w	r3, r2, r3
 8005f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	18db      	adds	r3, r3, r3
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f42:	4613      	mov	r3, r2
 8005f44:	eb42 0303 	adc.w	r3, r2, r3
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f52:	f7fa f9ad 	bl	80002b0 <__aeabi_uldivmod>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <UART_SetConfig+0x2d4>)
 8005f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	2164      	movs	r1, #100	; 0x64
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	3332      	adds	r3, #50	; 0x32
 8005f6e:	4a08      	ldr	r2, [pc, #32]	; (8005f90 <UART_SetConfig+0x2d4>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	f003 0207 	and.w	r2, r3, #7
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4422      	add	r2, r4
 8005f82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f84:	e106      	b.n	8006194 <UART_SetConfig+0x4d8>
 8005f86:	bf00      	nop
 8005f88:	40011000 	.word	0x40011000
 8005f8c:	40011400 	.word	0x40011400
 8005f90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	464b      	mov	r3, r9
 8005faa:	1891      	adds	r1, r2, r2
 8005fac:	6239      	str	r1, [r7, #32]
 8005fae:	415b      	adcs	r3, r3
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fb6:	4641      	mov	r1, r8
 8005fb8:	1854      	adds	r4, r2, r1
 8005fba:	4649      	mov	r1, r9
 8005fbc:	eb43 0501 	adc.w	r5, r3, r1
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	00eb      	lsls	r3, r5, #3
 8005fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fce:	00e2      	lsls	r2, r4, #3
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	461d      	mov	r5, r3
 8005fd4:	4643      	mov	r3, r8
 8005fd6:	18e3      	adds	r3, r4, r3
 8005fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fdc:	464b      	mov	r3, r9
 8005fde:	eb45 0303 	adc.w	r3, r5, r3
 8005fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006002:	4629      	mov	r1, r5
 8006004:	008b      	lsls	r3, r1, #2
 8006006:	4621      	mov	r1, r4
 8006008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800600c:	4621      	mov	r1, r4
 800600e:	008a      	lsls	r2, r1, #2
 8006010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006014:	f7fa f94c 	bl	80002b0 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4b60      	ldr	r3, [pc, #384]	; (80061a0 <UART_SetConfig+0x4e4>)
 800601e:	fba3 2302 	umull	r2, r3, r3, r2
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	011c      	lsls	r4, r3, #4
 8006026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800602a:	2200      	movs	r2, #0
 800602c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	1891      	adds	r1, r2, r2
 800603e:	61b9      	str	r1, [r7, #24]
 8006040:	415b      	adcs	r3, r3
 8006042:	61fb      	str	r3, [r7, #28]
 8006044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006048:	4641      	mov	r1, r8
 800604a:	1851      	adds	r1, r2, r1
 800604c:	6139      	str	r1, [r7, #16]
 800604e:	4649      	mov	r1, r9
 8006050:	414b      	adcs	r3, r1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006060:	4659      	mov	r1, fp
 8006062:	00cb      	lsls	r3, r1, #3
 8006064:	4651      	mov	r1, sl
 8006066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800606a:	4651      	mov	r1, sl
 800606c:	00ca      	lsls	r2, r1, #3
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	4603      	mov	r3, r0
 8006074:	4642      	mov	r2, r8
 8006076:	189b      	adds	r3, r3, r2
 8006078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800607c:	464b      	mov	r3, r9
 800607e:	460a      	mov	r2, r1
 8006080:	eb42 0303 	adc.w	r3, r2, r3
 8006084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	67bb      	str	r3, [r7, #120]	; 0x78
 8006092:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060a0:	4649      	mov	r1, r9
 80060a2:	008b      	lsls	r3, r1, #2
 80060a4:	4641      	mov	r1, r8
 80060a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060aa:	4641      	mov	r1, r8
 80060ac:	008a      	lsls	r2, r1, #2
 80060ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060b2:	f7fa f8fd 	bl	80002b0 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	4b38      	ldr	r3, [pc, #224]	; (80061a0 <UART_SetConfig+0x4e4>)
 80060be:	fba3 2301 	umull	r2, r3, r3, r1
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	2264      	movs	r2, #100	; 0x64
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	1acb      	subs	r3, r1, r3
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	3332      	adds	r3, #50	; 0x32
 80060d0:	4a33      	ldr	r2, [pc, #204]	; (80061a0 <UART_SetConfig+0x4e4>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060dc:	441c      	add	r4, r3
 80060de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e2:	2200      	movs	r2, #0
 80060e4:	673b      	str	r3, [r7, #112]	; 0x70
 80060e6:	677a      	str	r2, [r7, #116]	; 0x74
 80060e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060ec:	4642      	mov	r2, r8
 80060ee:	464b      	mov	r3, r9
 80060f0:	1891      	adds	r1, r2, r2
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	415b      	adcs	r3, r3
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060fc:	4641      	mov	r1, r8
 80060fe:	1851      	adds	r1, r2, r1
 8006100:	6039      	str	r1, [r7, #0]
 8006102:	4649      	mov	r1, r9
 8006104:	414b      	adcs	r3, r1
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006114:	4659      	mov	r1, fp
 8006116:	00cb      	lsls	r3, r1, #3
 8006118:	4651      	mov	r1, sl
 800611a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800611e:	4651      	mov	r1, sl
 8006120:	00ca      	lsls	r2, r1, #3
 8006122:	4610      	mov	r0, r2
 8006124:	4619      	mov	r1, r3
 8006126:	4603      	mov	r3, r0
 8006128:	4642      	mov	r2, r8
 800612a:	189b      	adds	r3, r3, r2
 800612c:	66bb      	str	r3, [r7, #104]	; 0x68
 800612e:	464b      	mov	r3, r9
 8006130:	460a      	mov	r2, r1
 8006132:	eb42 0303 	adc.w	r3, r2, r3
 8006136:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	663b      	str	r3, [r7, #96]	; 0x60
 8006142:	667a      	str	r2, [r7, #100]	; 0x64
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006150:	4649      	mov	r1, r9
 8006152:	008b      	lsls	r3, r1, #2
 8006154:	4641      	mov	r1, r8
 8006156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800615a:	4641      	mov	r1, r8
 800615c:	008a      	lsls	r2, r1, #2
 800615e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006162:	f7fa f8a5 	bl	80002b0 <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <UART_SetConfig+0x4e4>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	; 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	3332      	adds	r3, #50	; 0x32
 800617e:	4a08      	ldr	r2, [pc, #32]	; (80061a0 <UART_SetConfig+0x4e4>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	f003 020f 	and.w	r2, r3, #15
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4422      	add	r2, r4
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800619a:	46bd      	mov	sp, r7
 800619c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a0:	51eb851f 	.word	0x51eb851f

080061a4 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <MUX>:
void MUX(struct WIFI *a)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2204      	movs	r2, #4
 8006234:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2205      	movs	r2, #5
 8006260:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2206      	movs	r2, #6
 80062b8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2208      	movs	r2, #8
 80062e4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2209      	movs	r2, #9
 8006310:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2207      	movs	r2, #7
 800633c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <Inicializar>:
void Inicializar(struct WIFI *a)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ea:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
	...

080064fc <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 80064fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064fe:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006502:	af06      	add	r7, sp, #24
 8006504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800650c:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800650e:	2300      	movs	r3, #0
 8006510:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006514:	2300      	movs	r3, #0
 8006516:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800651a:	2300      	movs	r3, #0
 800651c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006526:	2300      	movs	r3, #0
 8006528:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 800652c:	2320      	movs	r3, #32
 800652e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006532:	2322      	movs	r3, #34	; 0x22
 8006534:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006538:	4b7c      	ldr	r3, [pc, #496]	; (800672c <AT_ESP8266_ND+0x230>)
 800653a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 800653e:	4a7c      	ldr	r2, [pc, #496]	; (8006730 <AT_ESP8266_ND+0x234>)
 8006540:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	4611      	mov	r1, r2
 8006548:	8019      	strh	r1, [r3, #0]
 800654a:	3302      	adds	r3, #2
 800654c:	0c12      	lsrs	r2, r2, #16
 800654e:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006550:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006554:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006558:	f640 230d 	movw	r3, #2573	; 0xa0d
 800655c:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006560:	2300      	movs	r3, #0
 8006562:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006566:	2300      	movs	r3, #0
 8006568:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 800656c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 800657c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800658a:	4618      	mov	r0, r3
 800658c:	f7f9 fe32 	bl	80001f4 <strlen>
 8006590:	4603      	mov	r3, r0
 8006592:	461a      	mov	r2, r3
 8006594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006598:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 80065a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 80065b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7f9 fe17 	bl	80001f4 <strlen>
 80065c6:	4603      	mov	r3, r0
 80065c8:	461a      	mov	r2, r3
 80065ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 80065d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2206      	movs	r2, #6
 80065e4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80065e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80065f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006604:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006608:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006612:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006616:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006626:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006630:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006634:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006638:	6809      	ldr	r1, [r1, #0]
 800663a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800663e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006642:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006646:	6800      	ldr	r0, [r0, #0]
 8006648:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800664c:	2300      	movs	r3, #0
 800664e:	9305      	str	r3, [sp, #20]
 8006650:	9004      	str	r0, [sp, #16]
 8006652:	9103      	str	r1, [sp, #12]
 8006654:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006658:	9102      	str	r1, [sp, #8]
 800665a:	9201      	str	r2, [sp, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	4633      	mov	r3, r6
 8006662:	4a34      	ldr	r2, [pc, #208]	; (8006734 <AT_ESP8266_ND+0x238>)
 8006664:	4629      	mov	r1, r5
 8006666:	4620      	mov	r0, r4
 8006668:	f007 f9c2 	bl	800d9f0 <FT_String_ND>
 800666c:	4603      	mov	r3, r0
 800666e:	2b01      	cmp	r3, #1
 8006670:	f040 8140 	bne.w	80068f4 <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2206      	movs	r2, #6
 8006680:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006692:	2b00      	cmp	r3, #0
 8006694:	d150      	bne.n	8006738 <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800669a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80066a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80066b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80066c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80066d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80066d8:	6812      	ldr	r2, [r2, #0]
 80066da:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80066de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80066e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80066e6:	6809      	ldr	r1, [r1, #0]
 80066e8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80066ec:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80066f0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80066f4:	6800      	ldr	r0, [r0, #0]
 80066f6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80066fa:	2304      	movs	r3, #4
 80066fc:	9305      	str	r3, [sp, #20]
 80066fe:	9004      	str	r0, [sp, #16]
 8006700:	9103      	str	r1, [sp, #12]
 8006702:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006706:	9102      	str	r1, [sp, #8]
 8006708:	9201      	str	r2, [sp, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4633      	mov	r3, r6
 8006710:	4a08      	ldr	r2, [pc, #32]	; (8006734 <AT_ESP8266_ND+0x238>)
 8006712:	4629      	mov	r1, r5
 8006714:	4620      	mov	r0, r4
 8006716:	f007 f96b 	bl	800d9f0 <FT_String_ND>
 800671a:	4602      	mov	r2, r0
 800671c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 800672a:	e04f      	b.n	80067cc <AT_ESP8266_ND+0x2d0>
 800672c:	00222c22 	.word	0x00222c22
 8006730:	0800fb50 	.word	0x0800fb50
 8006734:	0800f978 	.word	0x0800f978
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006738:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800673c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800674a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006766:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006776:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006780:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006784:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006788:	6809      	ldr	r1, [r1, #0]
 800678a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800678e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006792:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006796:	6800      	ldr	r0, [r0, #0]
 8006798:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800679c:	2305      	movs	r3, #5
 800679e:	9305      	str	r3, [sp, #20]
 80067a0:	9004      	str	r0, [sp, #16]
 80067a2:	9103      	str	r1, [sp, #12]
 80067a4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80067a8:	9102      	str	r1, [sp, #8]
 80067aa:	9201      	str	r2, [sp, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4633      	mov	r3, r6
 80067b2:	4ad2      	ldr	r2, [pc, #840]	; (8006afc <AT_ESP8266_ND+0x600>)
 80067b4:	4629      	mov	r1, r5
 80067b6:	4620      	mov	r0, r4
 80067b8:	f007 f91a 	bl	800d9f0 <FT_String_ND>
 80067bc:	4602      	mov	r2, r0
 80067be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 80067cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d15a      	bne.n	8006894 <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 80067de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2263      	movs	r2, #99	; 0x63
 80067ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 80067ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 80067fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006800:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 800680a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800680e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006818:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800681c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006826:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800682a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006834:	2341      	movs	r3, #65	; 0x41
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2300      	movs	r3, #0
 800683a:	f007 fc55 	bl	800e0e8 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 800683e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006842:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f503 7025 	add.w	r0, r3, #660	; 0x294
 800684c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006850:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f603 0194 	addw	r1, r3, #2196	; 0x894
 800685a:	2341      	movs	r3, #65	; 0x41
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	2205      	movs	r2, #5
 8006862:	f007 fc41 	bl	800e0e8 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006866:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800686a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800687a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2201      	movs	r2, #1
 8006890:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006898:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d126      	bne.n	80068f4 <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 80068a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2237      	movs	r2, #55	; 0x37
 80068b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 80068b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 80068c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 80068e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 80068f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2204      	movs	r2, #4
 8006900:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006916:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006920:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006924:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800692e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006932:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006942:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800694c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006950:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006954:	6809      	ldr	r1, [r1, #0]
 8006956:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800695a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800695e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006962:	6800      	ldr	r0, [r0, #0]
 8006964:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006968:	2300      	movs	r3, #0
 800696a:	9305      	str	r3, [sp, #20]
 800696c:	9004      	str	r0, [sp, #16]
 800696e:	9103      	str	r1, [sp, #12]
 8006970:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006974:	9102      	str	r1, [sp, #8]
 8006976:	9201      	str	r2, [sp, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	4633      	mov	r3, r6
 800697e:	4a60      	ldr	r2, [pc, #384]	; (8006b00 <AT_ESP8266_ND+0x604>)
 8006980:	4629      	mov	r1, r5
 8006982:	4620      	mov	r0, r4
 8006984:	f007 f834 	bl	800d9f0 <FT_String_ND>
 8006988:	4603      	mov	r3, r0
 800698a:	2b01      	cmp	r3, #1
 800698c:	f040 83b4 	bne.w	80070f8 <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 8006990:	2301      	movs	r3, #1
 8006992:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006996:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800699a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2206      	movs	r2, #6
 80069a2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 80069a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80069b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80069c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80069d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80069e4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80069ee:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80069f2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80069f6:	6809      	ldr	r1, [r1, #0]
 80069f8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80069fc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a00:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a04:	6800      	ldr	r0, [r0, #0]
 8006a06:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9305      	str	r3, [sp, #20]
 8006a0e:	9004      	str	r0, [sp, #16]
 8006a10:	9103      	str	r1, [sp, #12]
 8006a12:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a16:	9102      	str	r1, [sp, #8]
 8006a18:	9201      	str	r2, [sp, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4633      	mov	r3, r6
 8006a20:	4a38      	ldr	r2, [pc, #224]	; (8006b04 <AT_ESP8266_ND+0x608>)
 8006a22:	4629      	mov	r1, r5
 8006a24:	4620      	mov	r0, r4
 8006a26:	f006 ffe3 	bl	800d9f0 <FT_String_ND>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d113      	bne.n	8006a58 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006a30:	2313      	movs	r3, #19
 8006a32:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006a54:	f001 bae1 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006a58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2208      	movs	r2, #8
 8006a64:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006a92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006aa0:	603b      	str	r3, [r7, #0]
 8006aa2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006aa6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ab0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ab4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ab8:	6809      	ldr	r1, [r1, #0]
 8006aba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006abe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ac2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ac6:	6800      	ldr	r0, [r0, #0]
 8006ac8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006acc:	2300      	movs	r3, #0
 8006ace:	9305      	str	r3, [sp, #20]
 8006ad0:	9004      	str	r0, [sp, #16]
 8006ad2:	9103      	str	r1, [sp, #12]
 8006ad4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ad8:	9102      	str	r1, [sp, #8]
 8006ada:	9201      	str	r2, [sp, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	4633      	mov	r3, r6
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <AT_ESP8266_ND+0x60c>)
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f006 ff82 	bl	800d9f0 <FT_String_ND>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d10c      	bne.n	8006b0c <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8006af2:	230d      	movs	r3, #13
 8006af4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006af8:	f001 ba8f 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
 8006afc:	0800f978 	.word	0x0800f978
 8006b00:	0800f980 	.word	0x0800f980
 8006b04:	0800f988 	.word	0x0800f988
 8006b08:	0800f990 	.word	0x0800f990
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	220a      	movs	r2, #10
 8006b18:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006b1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006b38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b54:	603b      	str	r3, [r7, #0]
 8006b56:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b5a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b64:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b68:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b6c:	6809      	ldr	r1, [r1, #0]
 8006b6e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b72:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b76:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b7a:	6800      	ldr	r0, [r0, #0]
 8006b7c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006b80:	2300      	movs	r3, #0
 8006b82:	9305      	str	r3, [sp, #20]
 8006b84:	9004      	str	r0, [sp, #16]
 8006b86:	9103      	str	r1, [sp, #12]
 8006b88:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b8c:	9102      	str	r1, [sp, #8]
 8006b8e:	9201      	str	r2, [sp, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	4633      	mov	r3, r6
 8006b96:	4aaa      	ldr	r2, [pc, #680]	; (8006e40 <AT_ESP8266_ND+0x944>)
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f006 ff28 	bl	800d9f0 <FT_String_ND>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d104      	bne.n	8006bb0 <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 8006ba6:	231c      	movs	r3, #28
 8006ba8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006bac:	f001 ba35 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	220f      	movs	r2, #15
 8006bbc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006bce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006bfe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c08:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c0c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c10:	6809      	ldr	r1, [r1, #0]
 8006c12:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c16:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c1a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c1e:	6800      	ldr	r0, [r0, #0]
 8006c20:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006c24:	2300      	movs	r3, #0
 8006c26:	9305      	str	r3, [sp, #20]
 8006c28:	9004      	str	r0, [sp, #16]
 8006c2a:	9103      	str	r1, [sp, #12]
 8006c2c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c30:	9102      	str	r1, [sp, #8]
 8006c32:	9201      	str	r2, [sp, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	4633      	mov	r3, r6
 8006c3a:	4a82      	ldr	r2, [pc, #520]	; (8006e44 <AT_ESP8266_ND+0x948>)
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f006 fed6 	bl	800d9f0 <FT_String_ND>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d104      	bne.n	8006c54 <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006c4a:	2317      	movs	r3, #23
 8006c4c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006c50:	f001 b9e3 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2203      	movs	r2, #3
 8006c60:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8006c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006c8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c9c:	603b      	str	r3, [r7, #0]
 8006c9e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ca2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006cac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cb0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006cb4:	6809      	ldr	r1, [r1, #0]
 8006cb6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006cba:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006cbe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006cc2:	6800      	ldr	r0, [r0, #0]
 8006cc4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9305      	str	r3, [sp, #20]
 8006ccc:	9004      	str	r0, [sp, #16]
 8006cce:	9103      	str	r1, [sp, #12]
 8006cd0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006cd4:	9102      	str	r1, [sp, #8]
 8006cd6:	9201      	str	r2, [sp, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	4633      	mov	r3, r6
 8006cde:	4a5a      	ldr	r2, [pc, #360]	; (8006e48 <AT_ESP8266_ND+0x94c>)
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f006 fe84 	bl	800d9f0 <FT_String_ND>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d104      	bne.n	8006cf8 <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 8006cee:	2314      	movs	r3, #20
 8006cf0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006cf4:	f001 b991 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8006cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	220c      	movs	r2, #12
 8006d04:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006d16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006d24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006d32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d46:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d50:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d54:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d58:	6809      	ldr	r1, [r1, #0]
 8006d5a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d5e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d62:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d66:	6800      	ldr	r0, [r0, #0]
 8006d68:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9305      	str	r3, [sp, #20]
 8006d70:	9004      	str	r0, [sp, #16]
 8006d72:	9103      	str	r1, [sp, #12]
 8006d74:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d78:	9102      	str	r1, [sp, #8]
 8006d7a:	9201      	str	r2, [sp, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4633      	mov	r3, r6
 8006d82:	4a32      	ldr	r2, [pc, #200]	; (8006e4c <AT_ESP8266_ND+0x950>)
 8006d84:	4629      	mov	r1, r5
 8006d86:	4620      	mov	r0, r4
 8006d88:	f006 fe32 	bl	800d9f0 <FT_String_ND>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d104      	bne.n	8006d9c <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 8006d92:	2315      	movs	r3, #21
 8006d94:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d98:	f001 b93f 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006d9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006da0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	220b      	movs	r2, #11
 8006da8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006dac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006db0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006dba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006dc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006dd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006de4:	603b      	str	r3, [r7, #0]
 8006de6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006dea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006df4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006df8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006dfc:	6809      	ldr	r1, [r1, #0]
 8006dfe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e02:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e06:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e0a:	6800      	ldr	r0, [r0, #0]
 8006e0c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006e10:	2300      	movs	r3, #0
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	9004      	str	r0, [sp, #16]
 8006e16:	9103      	str	r1, [sp, #12]
 8006e18:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e1c:	9102      	str	r1, [sp, #8]
 8006e1e:	9201      	str	r2, [sp, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	4633      	mov	r3, r6
 8006e26:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <AT_ESP8266_ND+0x954>)
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f006 fde0 	bl	800d9f0 <FT_String_ND>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d10e      	bne.n	8006e54 <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 8006e36:	2309      	movs	r3, #9
 8006e38:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e3c:	f001 b8ed 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
 8006e40:	0800f99c 	.word	0x0800f99c
 8006e44:	0800f9a8 	.word	0x0800f9a8
 8006e48:	0800f9b8 	.word	0x0800f9b8
 8006e4c:	0800f9bc 	.word	0x0800f9bc
 8006e50:	0800f9cc 	.word	0x0800f9cc
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8006e54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	220b      	movs	r2, #11
 8006e60:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006e64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006e72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006e80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e9c:	603b      	str	r3, [r7, #0]
 8006e9e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ea2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006eac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006eb0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006eb4:	6809      	ldr	r1, [r1, #0]
 8006eb6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006eba:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ebe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	9004      	str	r0, [sp, #16]
 8006ece:	9103      	str	r1, [sp, #12]
 8006ed0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ed4:	9102      	str	r1, [sp, #8]
 8006ed6:	9201      	str	r2, [sp, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4633      	mov	r3, r6
 8006ede:	4a82      	ldr	r2, [pc, #520]	; (80070e8 <AT_ESP8266_ND+0xbec>)
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f006 fd84 	bl	800d9f0 <FT_String_ND>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d104      	bne.n	8006ef8 <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 8006eee:	2307      	movs	r3, #7
 8006ef0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ef4:	f001 b891 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006efc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	220b      	movs	r2, #11
 8006f04:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006f08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f40:	603b      	str	r3, [r7, #0]
 8006f42:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f46:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f4a:	6812      	ldr	r2, [r2, #0]
 8006f4c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f50:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f54:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f58:	6809      	ldr	r1, [r1, #0]
 8006f5a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f5e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f62:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9305      	str	r3, [sp, #20]
 8006f70:	9004      	str	r0, [sp, #16]
 8006f72:	9103      	str	r1, [sp, #12]
 8006f74:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f78:	9102      	str	r1, [sp, #8]
 8006f7a:	9201      	str	r2, [sp, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	4633      	mov	r3, r6
 8006f82:	4a5a      	ldr	r2, [pc, #360]	; (80070ec <AT_ESP8266_ND+0xbf0>)
 8006f84:	4629      	mov	r1, r5
 8006f86:	4620      	mov	r0, r4
 8006f88:	f006 fd32 	bl	800d9f0 <FT_String_ND>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d104      	bne.n	8006f9c <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 8006f92:	2308      	movs	r3, #8
 8006f94:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f98:	f001 b83f 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8006f9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	220a      	movs	r2, #10
 8006fa8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006fc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006fe4:	603b      	str	r3, [r7, #0]
 8006fe6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ff4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ff8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ffc:	6809      	ldr	r1, [r1, #0]
 8006ffe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007002:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007006:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007010:	2300      	movs	r3, #0
 8007012:	9305      	str	r3, [sp, #20]
 8007014:	9004      	str	r0, [sp, #16]
 8007016:	9103      	str	r1, [sp, #12]
 8007018:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800701c:	9102      	str	r1, [sp, #8]
 800701e:	9201      	str	r2, [sp, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4633      	mov	r3, r6
 8007026:	4a32      	ldr	r2, [pc, #200]	; (80070f0 <AT_ESP8266_ND+0xbf4>)
 8007028:	4629      	mov	r1, r5
 800702a:	4620      	mov	r0, r4
 800702c:	f006 fce0 	bl	800d9f0 <FT_String_ND>
 8007030:	4603      	mov	r3, r0
 8007032:	2b01      	cmp	r3, #1
 8007034:	d104      	bne.n	8007040 <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 8007036:	231b      	movs	r3, #27
 8007038:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800703c:	f000 bfed 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007044:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2207      	movs	r2, #7
 800704c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007050:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007054:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800705e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007062:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800706c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007070:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800707a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800707e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007088:	603b      	str	r3, [r7, #0]
 800708a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800708e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007098:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800709c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070a0:	6809      	ldr	r1, [r1, #0]
 80070a2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070a6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070aa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070ae:	6800      	ldr	r0, [r0, #0]
 80070b0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80070b4:	2300      	movs	r3, #0
 80070b6:	9305      	str	r3, [sp, #20]
 80070b8:	9004      	str	r0, [sp, #16]
 80070ba:	9103      	str	r1, [sp, #12]
 80070bc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070c0:	9102      	str	r1, [sp, #8]
 80070c2:	9201      	str	r2, [sp, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	4633      	mov	r3, r6
 80070ca:	4a0a      	ldr	r2, [pc, #40]	; (80070f4 <AT_ESP8266_ND+0xbf8>)
 80070cc:	4629      	mov	r1, r5
 80070ce:	4620      	mov	r0, r4
 80070d0:	f006 fc8e 	bl	800d9f0 <FT_String_ND>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	f040 879f 	bne.w	800801a <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 80070dc:	230f      	movs	r3, #15
 80070de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070e2:	f000 bf9a 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
 80070e6:	bf00      	nop
 80070e8:	0800f9d8 	.word	0x0800f9d8
 80070ec:	0800f9e4 	.word	0x0800f9e4
 80070f0:	0800f9f0 	.word	0x0800f9f0
 80070f4:	0800f9fc 	.word	0x0800f9fc
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 80070f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2207      	movs	r2, #7
 8007104:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007108:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800710c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007116:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800711a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007128:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007132:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007136:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007146:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007150:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007154:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007158:	6809      	ldr	r1, [r1, #0]
 800715a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800715e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007162:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007166:	6800      	ldr	r0, [r0, #0]
 8007168:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800716c:	2300      	movs	r3, #0
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	9004      	str	r0, [sp, #16]
 8007172:	9103      	str	r1, [sp, #12]
 8007174:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007178:	9102      	str	r1, [sp, #8]
 800717a:	9201      	str	r2, [sp, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4633      	mov	r3, r6
 8007182:	4aaa      	ldr	r2, [pc, #680]	; (800742c <AT_ESP8266_ND+0xf30>)
 8007184:	4629      	mov	r1, r5
 8007186:	4620      	mov	r0, r4
 8007188:	f006 fc32 	bl	800d9f0 <FT_String_ND>
 800718c:	4603      	mov	r3, r0
 800718e:	2b01      	cmp	r3, #1
 8007190:	f040 839d 	bne.w	80078ce <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 8007194:	2302      	movs	r3, #2
 8007196:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 800719a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800719e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2208      	movs	r2, #8
 80071a6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 80071aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80071b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80071c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80071d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071e8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071f2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071f6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071fa:	6809      	ldr	r1, [r1, #0]
 80071fc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007200:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007204:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007208:	6800      	ldr	r0, [r0, #0]
 800720a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800720e:	2300      	movs	r3, #0
 8007210:	9305      	str	r3, [sp, #20]
 8007212:	9004      	str	r0, [sp, #16]
 8007214:	9103      	str	r1, [sp, #12]
 8007216:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800721a:	9102      	str	r1, [sp, #8]
 800721c:	9201      	str	r2, [sp, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4633      	mov	r3, r6
 8007224:	4a82      	ldr	r2, [pc, #520]	; (8007430 <AT_ESP8266_ND+0xf34>)
 8007226:	4629      	mov	r1, r5
 8007228:	4620      	mov	r0, r4
 800722a:	f006 fbe1 	bl	800d9f0 <FT_String_ND>
 800722e:	4603      	mov	r3, r0
 8007230:	2b01      	cmp	r3, #1
 8007232:	d104      	bne.n	800723e <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 8007234:	2306      	movs	r3, #6
 8007236:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800723a:	f000 beee 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 800723e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007242:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2215      	movs	r2, #21
 800724a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 800724e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800725c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007260:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800726a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800726e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007278:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800727c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800728c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007296:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800729a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800729e:	6809      	ldr	r1, [r1, #0]
 80072a0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072a4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072a8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80072b2:	2300      	movs	r3, #0
 80072b4:	9305      	str	r3, [sp, #20]
 80072b6:	9004      	str	r0, [sp, #16]
 80072b8:	9103      	str	r1, [sp, #12]
 80072ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072be:	9102      	str	r1, [sp, #8]
 80072c0:	9201      	str	r2, [sp, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4633      	mov	r3, r6
 80072c8:	4a5a      	ldr	r2, [pc, #360]	; (8007434 <AT_ESP8266_ND+0xf38>)
 80072ca:	4629      	mov	r1, r5
 80072cc:	4620      	mov	r0, r4
 80072ce:	f006 fb8f 	bl	800d9f0 <FT_String_ND>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d104      	bne.n	80072e2 <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 80072d8:	230e      	movs	r3, #14
 80072da:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072de:	f000 be9c 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 80072e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	220c      	movs	r2, #12
 80072ee:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80072f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800730e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800731c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007320:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007330:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800733a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800733e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007342:	6809      	ldr	r1, [r1, #0]
 8007344:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007348:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800734c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007350:	6800      	ldr	r0, [r0, #0]
 8007352:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007356:	2300      	movs	r3, #0
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	9004      	str	r0, [sp, #16]
 800735c:	9103      	str	r1, [sp, #12]
 800735e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007362:	9102      	str	r1, [sp, #8]
 8007364:	9201      	str	r2, [sp, #4]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	4633      	mov	r3, r6
 800736c:	4a32      	ldr	r2, [pc, #200]	; (8007438 <AT_ESP8266_ND+0xf3c>)
 800736e:	4629      	mov	r1, r5
 8007370:	4620      	mov	r0, r4
 8007372:	f006 fb3d 	bl	800d9f0 <FT_String_ND>
 8007376:	4603      	mov	r3, r0
 8007378:	2b01      	cmp	r3, #1
 800737a:	d104      	bne.n	8007386 <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 800737c:	2316      	movs	r3, #22
 800737e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007382:	f000 be4a 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007386:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	220b      	movs	r2, #11
 8007392:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80073a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80073b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80073c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073e6:	6809      	ldr	r1, [r1, #0]
 80073e8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073ec:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80073f0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80073f4:	6800      	ldr	r0, [r0, #0]
 80073f6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80073fa:	2300      	movs	r3, #0
 80073fc:	9305      	str	r3, [sp, #20]
 80073fe:	9004      	str	r0, [sp, #16]
 8007400:	9103      	str	r1, [sp, #12]
 8007402:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007406:	9102      	str	r1, [sp, #8]
 8007408:	9201      	str	r2, [sp, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4633      	mov	r3, r6
 8007410:	4a0a      	ldr	r2, [pc, #40]	; (800743c <AT_ESP8266_ND+0xf40>)
 8007412:	4629      	mov	r1, r5
 8007414:	4620      	mov	r0, r4
 8007416:	f006 faeb 	bl	800d9f0 <FT_String_ND>
 800741a:	4603      	mov	r3, r0
 800741c:	2b01      	cmp	r3, #1
 800741e:	d10f      	bne.n	8007440 <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 8007420:	231a      	movs	r3, #26
 8007422:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007426:	f000 bdf8 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
 800742a:	bf00      	nop
 800742c:	0800fa04 	.word	0x0800fa04
 8007430:	0800fa0c 	.word	0x0800fa0c
 8007434:	0800fa18 	.word	0x0800fa18
 8007438:	0800f9bc 	.word	0x0800f9bc
 800743c:	0800f9cc 	.word	0x0800f9cc
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 8007440:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007444:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2211      	movs	r2, #17
 800744c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007450:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007454:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800745e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007462:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800746c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800747a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800747e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800748e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007498:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800749c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074a0:	6809      	ldr	r1, [r1, #0]
 80074a2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074a6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074aa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074ae:	6800      	ldr	r0, [r0, #0]
 80074b0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80074b4:	2300      	movs	r3, #0
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	9004      	str	r0, [sp, #16]
 80074ba:	9103      	str	r1, [sp, #12]
 80074bc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074c0:	9102      	str	r1, [sp, #8]
 80074c2:	9201      	str	r2, [sp, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	4633      	mov	r3, r6
 80074ca:	4aaa      	ldr	r2, [pc, #680]	; (8007774 <AT_ESP8266_ND+0x1278>)
 80074cc:	4629      	mov	r1, r5
 80074ce:	4620      	mov	r0, r4
 80074d0:	f006 fa8e 	bl	800d9f0 <FT_String_ND>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d104      	bne.n	80074e4 <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 80074da:	2311      	movs	r3, #17
 80074dc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074e0:	f000 bd9b 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 80074e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	220a      	movs	r2, #10
 80074f0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80074f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007502:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007506:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800751e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007522:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007532:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800753c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007540:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007544:	6809      	ldr	r1, [r1, #0]
 8007546:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800754a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800754e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007552:	6800      	ldr	r0, [r0, #0]
 8007554:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007558:	2300      	movs	r3, #0
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	9004      	str	r0, [sp, #16]
 800755e:	9103      	str	r1, [sp, #12]
 8007560:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007564:	9102      	str	r1, [sp, #8]
 8007566:	9201      	str	r2, [sp, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	4633      	mov	r3, r6
 800756e:	4a82      	ldr	r2, [pc, #520]	; (8007778 <AT_ESP8266_ND+0x127c>)
 8007570:	4629      	mov	r1, r5
 8007572:	4620      	mov	r0, r4
 8007574:	f006 fa3c 	bl	800d9f0 <FT_String_ND>
 8007578:	4603      	mov	r3, r0
 800757a:	2b01      	cmp	r3, #1
 800757c:	d104      	bne.n	8007588 <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 800757e:	231d      	movs	r3, #29
 8007580:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007584:	f000 bd49 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007588:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800758c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	220b      	movs	r2, #11
 8007594:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007598:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800759c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80075a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80075b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80075c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075e8:	6809      	ldr	r1, [r1, #0]
 80075ea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075ee:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80075f2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80075f6:	6800      	ldr	r0, [r0, #0]
 80075f8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80075fc:	2300      	movs	r3, #0
 80075fe:	9305      	str	r3, [sp, #20]
 8007600:	9004      	str	r0, [sp, #16]
 8007602:	9103      	str	r1, [sp, #12]
 8007604:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007608:	9102      	str	r1, [sp, #8]
 800760a:	9201      	str	r2, [sp, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	4633      	mov	r3, r6
 8007612:	4a5a      	ldr	r2, [pc, #360]	; (800777c <AT_ESP8266_ND+0x1280>)
 8007614:	4629      	mov	r1, r5
 8007616:	4620      	mov	r0, r4
 8007618:	f006 f9ea 	bl	800d9f0 <FT_String_ND>
 800761c:	4603      	mov	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d104      	bne.n	800762c <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 8007622:	231e      	movs	r3, #30
 8007624:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007628:	f000 bcf7 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 800762c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007630:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	220b      	movs	r2, #11
 8007638:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800763c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007640:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800764a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800764e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800766a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007674:	603b      	str	r3, [r7, #0]
 8007676:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800767a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007684:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007688:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800768c:	6809      	ldr	r1, [r1, #0]
 800768e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007692:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007696:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80076a0:	2300      	movs	r3, #0
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	9004      	str	r0, [sp, #16]
 80076a6:	9103      	str	r1, [sp, #12]
 80076a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076ac:	9102      	str	r1, [sp, #8]
 80076ae:	9201      	str	r2, [sp, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	4633      	mov	r3, r6
 80076b6:	4a32      	ldr	r2, [pc, #200]	; (8007780 <AT_ESP8266_ND+0x1284>)
 80076b8:	4629      	mov	r1, r5
 80076ba:	4620      	mov	r0, r4
 80076bc:	f006 f998 	bl	800d9f0 <FT_String_ND>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d104      	bne.n	80076d0 <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 80076c6:	231f      	movs	r3, #31
 80076c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076cc:	f000 bca5 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 80076d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2208      	movs	r2, #8
 80076dc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80076e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80076ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80076fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800770a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800770e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007718:	603b      	str	r3, [r7, #0]
 800771a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800771e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007722:	6812      	ldr	r2, [r2, #0]
 8007724:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007728:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800772c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007730:	6809      	ldr	r1, [r1, #0]
 8007732:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007736:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800773a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800773e:	6800      	ldr	r0, [r0, #0]
 8007740:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007744:	2300      	movs	r3, #0
 8007746:	9305      	str	r3, [sp, #20]
 8007748:	9004      	str	r0, [sp, #16]
 800774a:	9103      	str	r1, [sp, #12]
 800774c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007750:	9102      	str	r1, [sp, #8]
 8007752:	9201      	str	r2, [sp, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	4633      	mov	r3, r6
 800775a:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <AT_ESP8266_ND+0x1288>)
 800775c:	4629      	mov	r1, r5
 800775e:	4620      	mov	r0, r4
 8007760:	f006 f946 	bl	800d9f0 <FT_String_ND>
 8007764:	4603      	mov	r3, r0
 8007766:	2b01      	cmp	r3, #1
 8007768:	d10e      	bne.n	8007788 <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 800776a:	2320      	movs	r3, #32
 800776c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007770:	f000 bc53 	b.w	800801a <AT_ESP8266_ND+0x1b1e>
 8007774:	0800fa30 	.word	0x0800fa30
 8007778:	0800f99c 	.word	0x0800f99c
 800777c:	0800f9d8 	.word	0x0800f9d8
 8007780:	0800f9e4 	.word	0x0800f9e4
 8007784:	0800fa44 	.word	0x0800fa44
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800778c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	220a      	movs	r2, #10
 8007794:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800779c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80077a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80077b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80077c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077e8:	6809      	ldr	r1, [r1, #0]
 80077ea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077ee:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80077f2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80077f6:	6800      	ldr	r0, [r0, #0]
 80077f8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80077fc:	2300      	movs	r3, #0
 80077fe:	9305      	str	r3, [sp, #20]
 8007800:	9004      	str	r0, [sp, #16]
 8007802:	9103      	str	r1, [sp, #12]
 8007804:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007808:	9102      	str	r1, [sp, #8]
 800780a:	9201      	str	r2, [sp, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	4633      	mov	r3, r6
 8007812:	4ab7      	ldr	r2, [pc, #732]	; (8007af0 <AT_ESP8266_ND+0x15f4>)
 8007814:	4629      	mov	r1, r5
 8007816:	4620      	mov	r0, r4
 8007818:	f006 f8ea 	bl	800d9f0 <FT_String_ND>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d103      	bne.n	800782a <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 8007822:	2321      	movs	r3, #33	; 0x21
 8007824:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007828:	e3f7      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 800782a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800782e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2205      	movs	r2, #5
 8007836:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800783a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800783e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800784c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007856:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007878:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007882:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007886:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800788a:	6809      	ldr	r1, [r1, #0]
 800788c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007890:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007894:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007898:	6800      	ldr	r0, [r0, #0]
 800789a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800789e:	2300      	movs	r3, #0
 80078a0:	9305      	str	r3, [sp, #20]
 80078a2:	9004      	str	r0, [sp, #16]
 80078a4:	9103      	str	r1, [sp, #12]
 80078a6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078aa:	9102      	str	r1, [sp, #8]
 80078ac:	9201      	str	r2, [sp, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	4633      	mov	r3, r6
 80078b4:	4a8f      	ldr	r2, [pc, #572]	; (8007af4 <AT_ESP8266_ND+0x15f8>)
 80078b6:	4629      	mov	r1, r5
 80078b8:	4620      	mov	r0, r4
 80078ba:	f006 f899 	bl	800d9f0 <FT_String_ND>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	f040 83aa 	bne.w	800801a <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 80078c6:	2322      	movs	r3, #34	; 0x22
 80078c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078cc:	e3a5      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 80078ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	220f      	movs	r2, #15
 80078da:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 80078de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80078ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80078fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800791c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007920:	6812      	ldr	r2, [r2, #0]
 8007922:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007926:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800792a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800792e:	6809      	ldr	r1, [r1, #0]
 8007930:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007934:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007938:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007942:	2300      	movs	r3, #0
 8007944:	9305      	str	r3, [sp, #20]
 8007946:	9004      	str	r0, [sp, #16]
 8007948:	9103      	str	r1, [sp, #12]
 800794a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800794e:	9102      	str	r1, [sp, #8]
 8007950:	9201      	str	r2, [sp, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	4633      	mov	r3, r6
 8007958:	4a67      	ldr	r2, [pc, #412]	; (8007af8 <AT_ESP8266_ND+0x15fc>)
 800795a:	4629      	mov	r1, r5
 800795c:	4620      	mov	r0, r4
 800795e:	f006 f847 	bl	800d9f0 <FT_String_ND>
 8007962:	4603      	mov	r3, r0
 8007964:	2b01      	cmp	r3, #1
 8007966:	d112      	bne.n	800798e <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 8007968:	230a      	movs	r3, #10
 800796a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 800796e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007972:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007982:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 800798c:	e345      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 800798e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007992:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2209      	movs	r2, #9
 800799a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800799e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80079ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80079ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80079c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079d6:	603b      	str	r3, [r7, #0]
 80079d8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079dc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079e0:	6812      	ldr	r2, [r2, #0]
 80079e2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079e6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079ea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079ee:	6809      	ldr	r1, [r1, #0]
 80079f0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079f4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80079f8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80079fc:	6800      	ldr	r0, [r0, #0]
 80079fe:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007a02:	2300      	movs	r3, #0
 8007a04:	9305      	str	r3, [sp, #20]
 8007a06:	9004      	str	r0, [sp, #16]
 8007a08:	9103      	str	r1, [sp, #12]
 8007a0a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a0e:	9102      	str	r1, [sp, #8]
 8007a10:	9201      	str	r2, [sp, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	4633      	mov	r3, r6
 8007a18:	4a38      	ldr	r2, [pc, #224]	; (8007afc <AT_ESP8266_ND+0x1600>)
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f005 ffe7 	bl	800d9f0 <FT_String_ND>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d112      	bne.n	8007a4e <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 8007a28:	2319      	movs	r3, #25
 8007a2a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007a2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007a4c:	e2e5      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007a5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007a88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a9c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007aa0:	6812      	ldr	r2, [r2, #0]
 8007aa2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007aa6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007aaa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007aae:	6809      	ldr	r1, [r1, #0]
 8007ab0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ab4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007ab8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007abc:	6800      	ldr	r0, [r0, #0]
 8007abe:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9305      	str	r3, [sp, #20]
 8007ac6:	9004      	str	r0, [sp, #16]
 8007ac8:	9103      	str	r1, [sp, #12]
 8007aca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ace:	9102      	str	r1, [sp, #8]
 8007ad0:	9201      	str	r2, [sp, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4633      	mov	r3, r6
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <AT_ESP8266_ND+0x1604>)
 8007ada:	4629      	mov	r1, r5
 8007adc:	4620      	mov	r0, r4
 8007ade:	f005 ff87 	bl	800d9f0 <FT_String_ND>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d10d      	bne.n	8007b04 <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8007ae8:	2310      	movs	r3, #16
 8007aea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007aee:	e294      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
 8007af0:	0800f9f0 	.word	0x0800f9f0
 8007af4:	0800fa50 	.word	0x0800fa50
 8007af8:	0800fa58 	.word	0x0800fa58
 8007afc:	0800fa68 	.word	0x0800fa68
 8007b00:	0800fa0c 	.word	0x0800fa0c
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007b04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007b12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f203 4694 	addw	r6, r3, #1172	; 0x494
 8007b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 8007b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b50:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b5a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b5e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b62:	6809      	ldr	r1, [r1, #0]
 8007b64:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b68:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b6c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b70:	6800      	ldr	r0, [r0, #0]
 8007b72:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b76:	2300      	movs	r3, #0
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	9004      	str	r0, [sp, #16]
 8007b7c:	9103      	str	r1, [sp, #12]
 8007b7e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b82:	9102      	str	r1, [sp, #8]
 8007b84:	9201      	str	r2, [sp, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	4663      	mov	r3, ip
 8007b8c:	4632      	mov	r2, r6
 8007b8e:	4629      	mov	r1, r5
 8007b90:	4620      	mov	r0, r4
 8007b92:	f005 ff2d 	bl	800d9f0 <FT_String_ND>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d112      	bne.n	8007bc2 <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 8235 	beq.w	800801a <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007bc0:	e22b      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	220d      	movs	r2, #13
 8007bce:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007bd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007bee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c10:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c14:	6812      	ldr	r2, [r2, #0]
 8007c16:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c1a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c1e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c22:	6809      	ldr	r1, [r1, #0]
 8007c24:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c28:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c2c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c30:	6800      	ldr	r0, [r0, #0]
 8007c32:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007c36:	2300      	movs	r3, #0
 8007c38:	9305      	str	r3, [sp, #20]
 8007c3a:	9004      	str	r0, [sp, #16]
 8007c3c:	9103      	str	r1, [sp, #12]
 8007c3e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c42:	9102      	str	r1, [sp, #8]
 8007c44:	9201      	str	r2, [sp, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	4633      	mov	r3, r6
 8007c4c:	4ac5      	ldr	r2, [pc, #788]	; (8007f64 <AT_ESP8266_ND+0x1a68>)
 8007c4e:	4629      	mov	r1, r5
 8007c50:	4620      	mov	r0, r4
 8007c52:	f005 fecd 	bl	800d9f0 <FT_String_ND>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d112      	bne.n	8007c82 <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007c5c:	2312      	movs	r3, #18
 8007c5e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007c80:	e1cb      	b.n	800801a <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	220d      	movs	r2, #13
 8007c8e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8007c92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007cca:	603b      	str	r3, [r7, #0]
 8007ccc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007cd0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007cda:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cde:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ce2:	6809      	ldr	r1, [r1, #0]
 8007ce4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ce8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007cec:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007cf0:	6800      	ldr	r0, [r0, #0]
 8007cf2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9305      	str	r3, [sp, #20]
 8007cfa:	9004      	str	r0, [sp, #16]
 8007cfc:	9103      	str	r1, [sp, #12]
 8007cfe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d02:	9102      	str	r1, [sp, #8]
 8007d04:	9201      	str	r2, [sp, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	4633      	mov	r3, r6
 8007d0c:	4a96      	ldr	r2, [pc, #600]	; (8007f68 <AT_ESP8266_ND+0x1a6c>)
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4620      	mov	r0, r4
 8007d12:	f005 fe6d 	bl	800d9f0 <FT_String_ND>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d112      	bne.n	8007d42 <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 8007d1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d40:	e16b      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007d42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	220e      	movs	r2, #14
 8007d4e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 8007d52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007d60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d8a:	603b      	str	r3, [r7, #0]
 8007d8c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d90:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d9a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d9e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007da2:	6809      	ldr	r1, [r1, #0]
 8007da4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007da8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007dac:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007db0:	6800      	ldr	r0, [r0, #0]
 8007db2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007db6:	2300      	movs	r3, #0
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	9004      	str	r0, [sp, #16]
 8007dbc:	9103      	str	r1, [sp, #12]
 8007dbe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007dc2:	9102      	str	r1, [sp, #8]
 8007dc4:	9201      	str	r2, [sp, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4633      	mov	r3, r6
 8007dcc:	4a67      	ldr	r2, [pc, #412]	; (8007f6c <AT_ESP8266_ND+0x1a70>)
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f005 fe0d 	bl	800d9f0 <FT_String_ND>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d112      	bne.n	8007e02 <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 8007ddc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007dfa:	230b      	movs	r3, #11
 8007dfc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007e00:	e10b      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007e20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007e3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e50:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e54:	6812      	ldr	r2, [r2, #0]
 8007e56:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e5a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e5e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e62:	6809      	ldr	r1, [r1, #0]
 8007e64:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e68:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007e6c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e70:	6800      	ldr	r0, [r0, #0]
 8007e72:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007e76:	2300      	movs	r3, #0
 8007e78:	9305      	str	r3, [sp, #20]
 8007e7a:	9004      	str	r0, [sp, #16]
 8007e7c:	9103      	str	r1, [sp, #12]
 8007e7e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e82:	9102      	str	r1, [sp, #8]
 8007e84:	9201      	str	r2, [sp, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	4633      	mov	r3, r6
 8007e8c:	4a38      	ldr	r2, [pc, #224]	; (8007f70 <AT_ESP8266_ND+0x1a74>)
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4620      	mov	r0, r4
 8007e92:	f005 fdad 	bl	800d9f0 <FT_String_ND>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d112      	bne.n	8007ec2 <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007e9c:	2318      	movs	r3, #24
 8007e9e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007ec0:	e0ab      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007ec2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ec6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2208      	movs	r2, #8
 8007ece:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007ed2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007ee0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007eee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007efc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f10:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f14:	6812      	ldr	r2, [r2, #0]
 8007f16:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f1a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f1e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f22:	6809      	ldr	r1, [r1, #0]
 8007f24:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f28:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f2c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f30:	6800      	ldr	r0, [r0, #0]
 8007f32:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f36:	2300      	movs	r3, #0
 8007f38:	9305      	str	r3, [sp, #20]
 8007f3a:	9004      	str	r0, [sp, #16]
 8007f3c:	9103      	str	r1, [sp, #12]
 8007f3e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f42:	9102      	str	r1, [sp, #8]
 8007f44:	9201      	str	r2, [sp, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	4633      	mov	r3, r6
 8007f4c:	4a09      	ldr	r2, [pc, #36]	; (8007f74 <AT_ESP8266_ND+0x1a78>)
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4620      	mov	r0, r4
 8007f52:	f005 fd4d 	bl	800d9f0 <FT_String_ND>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d10d      	bne.n	8007f78 <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f62:	e05a      	b.n	800801a <AT_ESP8266_ND+0x1b1e>
 8007f64:	0800fa74 	.word	0x0800fa74
 8007f68:	0800fa84 	.word	0x0800fa84
 8007f6c:	0800fa94 	.word	0x0800fa94
 8007f70:	0800faa4 	.word	0x0800faa4
 8007f74:	0800fab0 	.word	0x0800fab0
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8007f78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2209      	movs	r2, #9
 8007f84:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007f88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007f96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007fb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007fc6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007fd0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007fd4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fd8:	6809      	ldr	r1, [r1, #0]
 8007fda:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007fde:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007fe2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007fe6:	6800      	ldr	r0, [r0, #0]
 8007fe8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007fec:	2300      	movs	r3, #0
 8007fee:	9305      	str	r3, [sp, #20]
 8007ff0:	9004      	str	r0, [sp, #16]
 8007ff2:	9103      	str	r1, [sp, #12]
 8007ff4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ff8:	9102      	str	r1, [sp, #8]
 8007ffa:	9201      	str	r2, [sp, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	4633      	mov	r3, r6
 8008002:	4a78      	ldr	r2, [pc, #480]	; (80081e4 <AT_ESP8266_ND+0x1ce8>)
 8008004:	4629      	mov	r1, r5
 8008006:	4620      	mov	r0, r4
 8008008:	f005 fcf2 	bl	800d9f0 <FT_String_ND>
 800800c:	4603      	mov	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d103      	bne.n	800801a <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 8008012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008016:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 800801a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800801e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008028:	3b01      	subs	r3, #1
 800802a:	2b08      	cmp	r3, #8
 800802c:	f201 84d7 	bhi.w	80099de <AT_ESP8266_ND+0x34e2>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <AT_ESP8266_ND+0x1b3c>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	0800805d 	.word	0x0800805d
 800803c:	080081ed 	.word	0x080081ed
 8008040:	0800846f 	.word	0x0800846f
 8008044:	080085ed 	.word	0x080085ed
 8008048:	080087c5 	.word	0x080087c5
 800804c:	08008a99 	.word	0x08008a99
 8008050:	08008d59 	.word	0x08008d59
 8008054:	08009281 	.word	0x08009281
 8008058:	08009457 	.word	0x08009457
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800805c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 800806c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008070:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800807a:	2b01      	cmp	r3, #1
 800807c:	d14f      	bne.n	800811e <AT_ESP8266_ND+0x1c22>
 800807e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008082:	2b01      	cmp	r3, #1
 8008084:	d04b      	beq.n	800811e <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 8008086:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800808a:	2b02      	cmp	r3, #2
 800808c:	d047      	beq.n	800811e <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 800808e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008092:	2b04      	cmp	r3, #4
 8008094:	d043      	beq.n	800811e <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 8008096:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800809a:	2b13      	cmp	r3, #19
 800809c:	d03f      	beq.n	800811e <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 800809e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80080ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 80080be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80080cc:	4620      	mov	r0, r4
 80080ce:	f7f8 f891 	bl	80001f4 <strlen>
 80080d2:	4603      	mov	r3, r0
 80080d4:	4423      	add	r3, r4
 80080d6:	4a44      	ldr	r2, [pc, #272]	; (80081e8 <AT_ESP8266_ND+0x1cec>)
 80080d8:	461c      	mov	r4, r3
 80080da:	4613      	mov	r3, r2
 80080dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80080de:	6020      	str	r0, [r4, #0]
 80080e0:	6061      	str	r1, [r4, #4]
 80080e2:	60a2      	str	r2, [r4, #8]
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80080e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7f8 f87c 	bl	80001f4 <strlen>
 80080fc:	4603      	mov	r3, r0
 80080fe:	461a      	mov	r2, r3
 8008100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 800810e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008112:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2264      	movs	r2, #100	; 0x64
 800811a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 800811e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008122:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008132:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 800813c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008140:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800814a:	2b00      	cmp	r3, #0
 800814c:	d11b      	bne.n	8008186 <AT_ESP8266_ND+0x1c8a>
 800814e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008152:	2b01      	cmp	r3, #1
 8008154:	d023      	beq.n	800819e <AT_ESP8266_ND+0x1ca2>
 8008156:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800815a:	2b1c      	cmp	r3, #28
 800815c:	d01f      	beq.n	800819e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 800815e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008162:	2b02      	cmp	r3, #2
 8008164:	d01b      	beq.n	800819e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 8008166:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800816a:	2b04      	cmp	r3, #4
 800816c:	d017      	beq.n	800819e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 800816e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008172:	2b0b      	cmp	r3, #11
 8008174:	d013      	beq.n	800819e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 8008176:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800817a:	2b0c      	cmp	r3, #12
 800817c:	d00f      	beq.n	800819e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 800817e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008182:	2b13      	cmp	r3, #19
 8008184:	d00b      	beq.n	800819e <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8008186:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800818a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008194:	f241 3288 	movw	r2, #5000	; 0x1388
 8008198:	4293      	cmp	r3, r2
 800819a:	f341 842a 	ble.w	80099f2 <AT_ESP8266_ND+0x34f6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800819e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80081ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80081b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80081c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80081d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 80081e0:	f001 bc07 	b.w	80099f2 <AT_ESP8266_ND+0x34f6>
 80081e4:	0800fabc 	.word	0x0800fabc
 80081e8:	0800fac8 	.word	0x0800fac8
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80081ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80081fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008200:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800820a:	2b01      	cmp	r3, #1
 800820c:	f040 80c8 	bne.w	80083a0 <AT_ESP8266_ND+0x1ea4>
 8008210:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008214:	2b01      	cmp	r3, #1
 8008216:	f000 80c3 	beq.w	80083a0 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 800821a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800821e:	2b02      	cmp	r3, #2
 8008220:	f000 80be 	beq.w	80083a0 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 8008224:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008228:	2b03      	cmp	r3, #3
 800822a:	f000 80b9 	beq.w	80083a0 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 800822e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008232:	2b04      	cmp	r3, #4
 8008234:	f000 80b4 	beq.w	80083a0 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 8008238:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800823c:	2b0a      	cmp	r3, #10
 800823e:	f000 80af 	beq.w	80083a0 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 8008242:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008246:	2b0b      	cmp	r3, #11
 8008248:	f000 80aa 	beq.w	80083a0 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 800824c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008250:	2b0c      	cmp	r3, #12
 8008252:	f000 80a5 	beq.w	80083a0 <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 8008256:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800825a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008266:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800826a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2201      	movs	r2, #1
 8008272:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 8008276:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800827a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008284:	4620      	mov	r0, r4
 8008286:	f7f7 ffb5 	bl	80001f4 <strlen>
 800828a:	4603      	mov	r3, r0
 800828c:	4423      	add	r3, r4
 800828e:	49d5      	ldr	r1, [pc, #852]	; (80085e4 <AT_ESP8266_ND+0x20e8>)
 8008290:	461a      	mov	r2, r3
 8008292:	460b      	mov	r3, r1
 8008294:	cb03      	ldmia	r3!, {r0, r1}
 8008296:	6010      	str	r0, [r2, #0]
 8008298:	6051      	str	r1, [r2, #4]
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 800829e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80082ac:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80082b0:	2201      	movs	r2, #1
 80082b2:	4618      	mov	r0, r3
 80082b4:	f006 f90f 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80082b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80082c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	1d9d      	adds	r5, r3, #6
 80082d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3306      	adds	r3, #6
 80082de:	4618      	mov	r0, r3
 80082e0:	f7f7 ff88 	bl	80001f4 <strlen>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	4629      	mov	r1, r5
 80082ea:	4620      	mov	r0, r4
 80082ec:	f006 f8f3 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80082f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80082fe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008302:	4618      	mov	r0, r3
 8008304:	f7f7 ff76 	bl	80001f4 <strlen>
 8008308:	4602      	mov	r2, r0
 800830a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800830e:	4619      	mov	r1, r3
 8008310:	4620      	mov	r0, r4
 8008312:	f006 f8e0 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8008316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008328:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008332:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008336:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3326      	adds	r3, #38	; 0x26
 800833e:	4618      	mov	r0, r3
 8008340:	f7f7 ff58 	bl	80001f4 <strlen>
 8008344:	4603      	mov	r3, r0
 8008346:	461a      	mov	r2, r3
 8008348:	4629      	mov	r1, r5
 800834a:	4620      	mov	r0, r4
 800834c:	f006 f8c3 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008350:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008354:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800835e:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008362:	2203      	movs	r2, #3
 8008364:	4618      	mov	r0, r3
 8008366:	f006 f8b6 	bl	800e4d6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800836a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800836e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008378:	4618      	mov	r0, r3
 800837a:	f7f7 ff3b 	bl	80001f4 <strlen>
 800837e:	4603      	mov	r3, r0
 8008380:	461a      	mov	r2, r3
 8008382:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008386:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008390:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008394:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	22c8      	movs	r2, #200	; 0xc8
 800839c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80083a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80083be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d11b      	bne.n	8008408 <AT_ESP8266_ND+0x1f0c>
 80083d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d023      	beq.n	8008420 <AT_ESP8266_ND+0x1f24>
 80083d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d01f      	beq.n	8008420 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 80083e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d01b      	beq.n	8008420 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 80083e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d017      	beq.n	8008420 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 80083f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083f4:	2b0a      	cmp	r3, #10
 80083f6:	d013      	beq.n	8008420 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 80083f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083fc:	2b0b      	cmp	r3, #11
 80083fe:	d00f      	beq.n	8008420 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 8008400:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008404:	2b0c      	cmp	r3, #12
 8008406:	d00b      	beq.n	8008420 <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800840c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008416:	f644 6220 	movw	r2, #20000	; 0x4e20
 800841a:	4293      	cmp	r3, r2
 800841c:	f341 82eb 	ble.w	80099f6 <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008424:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008432:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008436:	2b0a      	cmp	r3, #10
 8008438:	d00f      	beq.n	800845a <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 800843a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800843e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2200      	movs	r2, #0
 8008446:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 800844a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800844e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 800845a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800845e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2200      	movs	r2, #0
 8008466:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 800846a:	f001 bac4 	b.w	80099f6 <AT_ESP8266_ND+0x34fa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800846e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008472:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 800847e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800848c:	2b01      	cmp	r3, #1
 800848e:	d14d      	bne.n	800852c <AT_ESP8266_ND+0x2030>
 8008490:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008494:	2b04      	cmp	r3, #4
 8008496:	d049      	beq.n	800852c <AT_ESP8266_ND+0x2030>
 8008498:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800849c:	2b0a      	cmp	r3, #10
 800849e:	d045      	beq.n	800852c <AT_ESP8266_ND+0x2030>
 80084a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084a4:	2b0d      	cmp	r3, #13
 80084a6:	d041      	beq.n	800852c <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 80084a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80084b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 80084c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7f7 fe8c 	bl	80001f4 <strlen>
 80084dc:	4603      	mov	r3, r0
 80084de:	4423      	add	r3, r4
 80084e0:	4941      	ldr	r1, [pc, #260]	; (80085e8 <AT_ESP8266_ND+0x20ec>)
 80084e2:	461a      	mov	r2, r3
 80084e4:	460b      	mov	r3, r1
 80084e6:	cb03      	ldmia	r3!, {r0, r1}
 80084e8:	6010      	str	r0, [r2, #0]
 80084ea:	6051      	str	r1, [r2, #4]
 80084ec:	8819      	ldrh	r1, [r3, #0]
 80084ee:	789b      	ldrb	r3, [r3, #2]
 80084f0:	8111      	strh	r1, [r2, #8]
 80084f2:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80084f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008502:	4618      	mov	r0, r3
 8008504:	f7f7 fe76 	bl	80001f4 <strlen>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008510:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 800851a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800852c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008530:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008540:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800854a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d113      	bne.n	8008584 <AT_ESP8266_ND+0x2088>
 800855c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008560:	2b0a      	cmp	r3, #10
 8008562:	d01b      	beq.n	800859c <AT_ESP8266_ND+0x20a0>
 8008564:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008568:	2b0b      	cmp	r3, #11
 800856a:	d017      	beq.n	800859c <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 800856c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008570:	2b0c      	cmp	r3, #12
 8008572:	d013      	beq.n	800859c <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 8008574:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008578:	2b04      	cmp	r3, #4
 800857a:	d00f      	beq.n	800859c <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 800857c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008580:	2b0d      	cmp	r3, #13
 8008582:	d00b      	beq.n	800859c <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008584:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008588:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008592:	f241 3288 	movw	r2, #5000	; 0x1388
 8008596:	4293      	cmp	r3, r2
 8008598:	f341 822f 	ble.w	80099fa <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800859c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80085aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80085ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80085be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80085ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80085de:	f001 ba0c 	b.w	80099fa <AT_ESP8266_ND+0x34fe>
 80085e2:	bf00      	nop
 80085e4:	0800fad8 	.word	0x0800fad8
 80085e8:	0800fae4 	.word	0x0800fae4
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80085ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 80085fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800860a:	2b01      	cmp	r3, #1
 800860c:	d16b      	bne.n	80086e6 <AT_ESP8266_ND+0x21ea>
 800860e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008612:	2b04      	cmp	r3, #4
 8008614:	d067      	beq.n	80086e6 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 8008616:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800861a:	2b01      	cmp	r3, #1
 800861c:	d063      	beq.n	80086e6 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 800861e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008622:	2b02      	cmp	r3, #2
 8008624:	d05f      	beq.n	80086e6 <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 8008626:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800862a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2200      	movs	r2, #0
 8008632:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008636:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800863a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2201      	movs	r2, #1
 8008642:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008646:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800864a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008654:	2b01      	cmp	r3, #1
 8008656:	d115      	bne.n	8008684 <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800865c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008666:	4620      	mov	r0, r4
 8008668:	f7f7 fdc4 	bl	80001f4 <strlen>
 800866c:	4603      	mov	r3, r0
 800866e:	4423      	add	r3, r4
 8008670:	4a52      	ldr	r2, [pc, #328]	; (80087bc <AT_ESP8266_ND+0x22c0>)
 8008672:	461c      	mov	r4, r3
 8008674:	4613      	mov	r3, r2
 8008676:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008678:	6020      	str	r0, [r4, #0]
 800867a:	6061      	str	r1, [r4, #4]
 800867c:	60a2      	str	r2, [r4, #8]
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	81a3      	strh	r3, [r4, #12]
 8008682:	e014      	b.n	80086ae <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008692:	4620      	mov	r0, r4
 8008694:	f7f7 fdae 	bl	80001f4 <strlen>
 8008698:	4603      	mov	r3, r0
 800869a:	4423      	add	r3, r4
 800869c:	4a48      	ldr	r2, [pc, #288]	; (80087c0 <AT_ESP8266_ND+0x22c4>)
 800869e:	461c      	mov	r4, r3
 80086a0:	4613      	mov	r3, r2
 80086a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086a4:	6020      	str	r0, [r4, #0]
 80086a6:	6061      	str	r1, [r4, #4]
 80086a8:	60a2      	str	r2, [r4, #8]
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 80086ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80086bc:	4618      	mov	r0, r3
 80086be:	f7f7 fd99 	bl	80001f4 <strlen>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 80086d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80086e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80086e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008712:	2b00      	cmp	r3, #0
 8008714:	d123      	bne.n	800875e <AT_ESP8266_ND+0x2262>
 8008716:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d02b      	beq.n	8008776 <AT_ESP8266_ND+0x227a>
 800871e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008722:	2b0b      	cmp	r3, #11
 8008724:	d027      	beq.n	8008776 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 8008726:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800872a:	2b0c      	cmp	r3, #12
 800872c:	d023      	beq.n	8008776 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 800872e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008732:	2b04      	cmp	r3, #4
 8008734:	d01f      	beq.n	8008776 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 8008736:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800873a:	2b02      	cmp	r3, #2
 800873c:	d01b      	beq.n	8008776 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 800873e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008742:	2b07      	cmp	r3, #7
 8008744:	d017      	beq.n	8008776 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008746:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800874a:	2b08      	cmp	r3, #8
 800874c:	d013      	beq.n	8008776 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 800874e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008752:	2b1e      	cmp	r3, #30
 8008754:	d00f      	beq.n	8008776 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008756:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800875a:	2b1f      	cmp	r3, #31
 800875c:	d00b      	beq.n	8008776 <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800875e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008762:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800876c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008770:	4293      	cmp	r3, r2
 8008772:	f341 8144 	ble.w	80099fe <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800877a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2200      	movs	r2, #0
 8008794:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800879c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80087a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80087b8:	f001 b921 	b.w	80099fe <AT_ESP8266_ND+0x3502>
 80087bc:	0800faf0 	.word	0x0800faf0
 80087c0:	0800fb00 	.word	0x0800fb00
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80087c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 80087d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	f040 80f3 	bne.w	80089ce <AT_ESP8266_ND+0x24d2>
 80087e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	f000 80ee 	beq.w	80089ce <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 80087f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	f000 80e9 	beq.w	80089ce <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 80087fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008800:	2b02      	cmp	r3, #2
 8008802:	f000 80e4 	beq.w	80089ce <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 8008806:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800880a:	2b21      	cmp	r3, #33	; 0x21
 800880c:	f000 80df 	beq.w	80089ce <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 8008810:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008814:	2b1b      	cmp	r3, #27
 8008816:	f000 80da 	beq.w	80089ce <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 800881a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800881e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800882a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800882e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2201      	movs	r2, #1
 8008836:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 800883a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008848:	4620      	mov	r0, r4
 800884a:	f7f7 fcd3 	bl	80001f4 <strlen>
 800884e:	4603      	mov	r3, r0
 8008850:	4423      	add	r3, r4
 8008852:	4990      	ldr	r1, [pc, #576]	; (8008a94 <AT_ESP8266_ND+0x2598>)
 8008854:	461a      	mov	r2, r3
 8008856:	460b      	mov	r3, r1
 8008858:	cb03      	ldmia	r3!, {r0, r1}
 800885a:	6010      	str	r0, [r2, #0]
 800885c:	6051      	str	r1, [r2, #4]
 800885e:	8819      	ldrh	r1, [r3, #0]
 8008860:	789b      	ldrb	r3, [r3, #2]
 8008862:	8111      	strh	r1, [r2, #8]
 8008864:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008866:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800886a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008874:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008878:	2201      	movs	r2, #1
 800887a:	4618      	mov	r0, r3
 800887c:	f005 fe2b 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008880:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008884:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800888e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008892:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 800889c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	334c      	adds	r3, #76	; 0x4c
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7f7 fca3 	bl	80001f4 <strlen>
 80088ae:	4603      	mov	r3, r0
 80088b0:	461a      	mov	r2, r3
 80088b2:	4629      	mov	r1, r5
 80088b4:	4620      	mov	r0, r4
 80088b6:	f005 fe0e 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,separador,3);
 80088ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088c8:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80088cc:	2203      	movs	r2, #3
 80088ce:	4618      	mov	r0, r3
 80088d0:	f005 fe01 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 80088d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80088e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f103 0562 	add.w	r5, r3, #98	; 0x62
 80088f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3362      	adds	r3, #98	; 0x62
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7f7 fc79 	bl	80001f4 <strlen>
 8008902:	4603      	mov	r3, r0
 8008904:	461a      	mov	r2, r3
 8008906:	4629      	mov	r1, r5
 8008908:	4620      	mov	r0, r4
 800890a:	f005 fde4 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,separador,3);
 800890e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008912:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800891c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008920:	2203      	movs	r2, #3
 8008922:	4618      	mov	r0, r3
 8008924:	f005 fdd7 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008928:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800892c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008936:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800893a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008944:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008948:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3372      	adds	r3, #114	; 0x72
 8008950:	4618      	mov	r0, r3
 8008952:	f7f7 fc4f 	bl	80001f4 <strlen>
 8008956:	4603      	mov	r3, r0
 8008958:	461a      	mov	r2, r3
 800895a:	4629      	mov	r1, r5
 800895c:	4620      	mov	r0, r4
 800895e:	f005 fdba 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008962:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008966:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008970:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008974:	2201      	movs	r2, #1
 8008976:	4618      	mov	r0, r3
 8008978:	f005 fdad 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800897c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008980:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800898a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800898e:	2202      	movs	r2, #2
 8008990:	4618      	mov	r0, r3
 8008992:	f005 fda0 	bl	800e4d6 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008996:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800899a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7f7 fc25 	bl	80001f4 <strlen>
 80089aa:	4603      	mov	r3, r0
 80089ac:	461a      	mov	r2, r3
 80089ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 80089bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80089ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80089ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 80089ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d11b      	bne.n	8008a36 <AT_ESP8266_ND+0x253a>
 80089fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d023      	beq.n	8008a4e <AT_ESP8266_ND+0x2552>
 8008a06:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a0a:	2b0b      	cmp	r3, #11
 8008a0c:	d01f      	beq.n	8008a4e <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 8008a0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a12:	2b0c      	cmp	r3, #12
 8008a14:	d01b      	beq.n	8008a4e <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 8008a16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a1a:	2b04      	cmp	r3, #4
 8008a1c:	d017      	beq.n	8008a4e <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 8008a1e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d013      	beq.n	8008a4e <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 8008a26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a2a:	2b21      	cmp	r3, #33	; 0x21
 8008a2c:	d00f      	beq.n	8008a4e <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 8008a2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a32:	2b1b      	cmp	r3, #27
 8008a34:	d00b      	beq.n	8008a4e <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	f340 87da 	ble.w	8009a02 <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008a90:	f000 bfb7 	b.w	8009a02 <AT_ESP8266_ND+0x3506>
 8008a94:	0800f9f0 	.word	0x0800f9f0
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	f040 80e2 	bne.w	8008c80 <AT_ESP8266_ND+0x2784>
 8008abc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ac0:	2b0b      	cmp	r3, #11
 8008ac2:	f000 80dd 	beq.w	8008c80 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8008ac6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aca:	2b0c      	cmp	r3, #12
 8008acc:	f000 80d8 	beq.w	8008c80 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008ad0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ad4:	2b0e      	cmp	r3, #14
 8008ad6:	f000 80d3 	beq.w	8008c80 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 8008ada:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ade:	2b0f      	cmp	r3, #15
 8008ae0:	f000 80ce 	beq.w	8008c80 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8008ae4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ae8:	2b10      	cmp	r3, #16
 8008aea:	f000 80c9 	beq.w	8008c80 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 8008aee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	f000 80c4 	beq.w	8008c80 <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8008af8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008afc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008b08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7f7 fb64 	bl	80001f4 <strlen>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	4423      	add	r3, r4
 8008b30:	4aa5      	ldr	r2, [pc, #660]	; (8008dc8 <AT_ESP8266_ND+0x28cc>)
 8008b32:	461c      	mov	r4, r3
 8008b34:	4613      	mov	r3, r2
 8008b36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b38:	6020      	str	r0, [r4, #0]
 8008b3a:	6061      	str	r1, [r4, #4]
 8008b3c:	60a2      	str	r2, [r4, #8]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008b42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b50:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008b54:	2201      	movs	r2, #1
 8008b56:	4618      	mov	r0, r3
 8008b58:	f005 fcbd 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7f7 fb42 	bl	80001f4 <strlen>
 8008b70:	4603      	mov	r3, r0
 8008b72:	4423      	add	r3, r4
 8008b74:	4a95      	ldr	r2, [pc, #596]	; (8008dcc <AT_ESP8266_ND+0x28d0>)
 8008b76:	6810      	ldr	r0, [r2, #0]
 8008b78:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008b7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b88:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f005 fca1 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ba2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3336      	adds	r3, #54	; 0x36
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7f7 fb19 	bl	80001f4 <strlen>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f005 fc84 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008bce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008bdc:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008be0:	2202      	movs	r2, #2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f005 fc77 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008be8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008bf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008c04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3346      	adds	r3, #70	; 0x46
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7f7 faef 	bl	80001f4 <strlen>
 8008c16:	4603      	mov	r3, r0
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f005 fc5a 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008c22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c30:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7f7 fadd 	bl	80001f4 <strlen>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008c40:	4619      	mov	r1, r3
 8008c42:	4620      	mov	r0, r4
 8008c44:	f005 fc47 	bl	800e4d6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008c48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7f7 facc 	bl	80001f4 <strlen>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008c9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d124      	bne.n	8008cfa <AT_ESP8266_ND+0x27fe>
 8008cb0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cb4:	2b0a      	cmp	r3, #10
 8008cb6:	d02c      	beq.n	8008d12 <AT_ESP8266_ND+0x2816>
 8008cb8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cbc:	2b0b      	cmp	r3, #11
 8008cbe:	d028      	beq.n	8008d12 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_fail)
 8008cc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d024      	beq.n	8008d12 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_wifi_gotip)
 8008cc8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ccc:	2b0c      	cmp	r3, #12
 8008cce:	d020      	beq.n	8008d12 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008cd0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cd4:	2b0e      	cmp	r3, #14
 8008cd6:	d01c      	beq.n	8008d12 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_conectado)
 8008cd8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cdc:	2b0f      	cmp	r3, #15
 8008cde:	d018      	beq.n	8008d12 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_desconectado)
 8008ce0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ce4:	2b10      	cmp	r3, #16
 8008ce6:	d014      	beq.n	8008d12 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_error)
 8008ce8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d010      	beq.n	8008d12 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_busy_p)))
 8008cf0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cf8:	d00b      	beq.n	8008d12 <AT_ESP8266_ND+0x2816>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008cfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	f340 867a 	ble.w	8009a06 <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008d12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008d24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008d34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008d54:	f000 be57 	b.w	8009a06 <AT_ESP8266_ND+0x350a>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d5c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	2200      	movs	r2, #0
 8008d66:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8008d68:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d007      	beq.n	8008d80 <AT_ESP8266_ND+0x2884>
 8008d70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d74:	2b0a      	cmp	r3, #10
 8008d76:	d003      	beq.n	8008d80 <AT_ESP8266_ND+0x2884>
 8008d78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d127      	bne.n	8008dd0 <AT_ESP8266_ND+0x28d4>
				{
					a->_estado=AT_decode;
 8008d80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008da2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008dc2:	f000 be22 	b.w	8009a0a <AT_ESP8266_ND+0x350e>
 8008dc6:	bf00      	nop
 8008dc8:	0800fb10 	.word	0x0800fb10
 8008dcc:	0800fb20 	.word	0x0800fb20
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008dd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	f040 80d1 	bne.w	8008f86 <AT_ESP8266_ND+0x2a8a>
 8008de4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f040 80c7 	bne.w	8008f86 <AT_ESP8266_ND+0x2a8a>
										a->_ejecucion=1;
 8008df8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008e08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2218      	movs	r2, #24
 8008e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008e18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008e28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008e56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008e66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e74:	4620      	mov	r0, r4
 8008e76:	f7f7 f9bd 	bl	80001f4 <strlen>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	4423      	add	r3, r4
 8008e7e:	4ac0      	ldr	r2, [pc, #768]	; (8009180 <AT_ESP8266_ND+0x2c84>)
 8008e80:	461c      	mov	r4, r3
 8008e82:	4613      	mov	r3, r2
 8008e84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e86:	6020      	str	r0, [r4, #0]
 8008e88:	6061      	str	r1, [r4, #4]
 8008e8a:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008e8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008e9a:	f107 0214 	add.w	r2, r7, #20
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f005 f8ed 	bl	800e080 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008ea6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008eb4:	f107 0314 	add.w	r3, r7, #20
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7f7 f99b 	bl	80001f4 <strlen>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	f107 0314 	add.w	r3, r7, #20
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f005 fb05 	bl	800e4d6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f005 fbd4 	bl	800e698 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008ef0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008efe:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008f02:	2202      	movs	r2, #2
 8008f04:	4618      	mov	r0, r3
 8008f06:	f005 fae6 	bl	800e4d6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008f0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7f7 f96b 	bl	80001f4 <strlen>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	461a      	mov	r2, r3
 8008f22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008f30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f7f7 f958 	bl	80001f4 <strlen>
 8008f44:	4603      	mov	r3, r0
 8008f46:	4423      	add	r3, r4
 8008f48:	4a8e      	ldr	r2, [pc, #568]	; (8009184 <AT_ESP8266_ND+0x2c88>)
 8008f4a:	461c      	mov	r4, r3
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f50:	6020      	str	r0, [r4, #0]
 8008f52:	6061      	str	r1, [r4, #4]
 8008f54:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8008f74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008f86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8008fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f040 80a6 	bne.w	8009104 <AT_ESP8266_ND+0x2c08>
 8008fb8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fbc:	2b13      	cmp	r3, #19
 8008fbe:	f000 80a1 	beq.w	8009104 <AT_ESP8266_ND+0x2c08>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8008fc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8008fd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	f7f7 f8fd 	bl	80001e0 <strcmp>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01b      	beq.n	8009024 <AT_ESP8266_ND+0x2b28>
 8008fec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d017      	beq.n	8009024 <AT_ESP8266_ND+0x2b28>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8008ff4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ff8:	2b14      	cmp	r3, #20
 8008ffa:	d013      	beq.n	8009024 <AT_ESP8266_ND+0x2b28>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008ffc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009000:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800900a:	f241 3288 	movw	r2, #5000	; 0x1388
 800900e:	4293      	cmp	r3, r2
 8009010:	dd78      	ble.n	8009104 <AT_ESP8266_ND+0x2c08>
 8009012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009020:	2b01      	cmp	r3, #1
 8009022:	d16f      	bne.n	8009104 <AT_ESP8266_ND+0x2c08>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009028:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009032:	f241 3288 	movw	r2, #5000	; 0x1388
 8009036:	4293      	cmp	r3, r2
 8009038:	dd0e      	ble.n	8009058 <AT_ESP8266_ND+0x2b5c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800903a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800903e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009058:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800908a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009094:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009098:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2201      	movs	r2, #1
 80090a0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80090a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80090b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80090c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80090ce:	2361      	movs	r3, #97	; 0x61
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	2301      	movs	r3, #1
 80090d4:	f005 f808 	bl	800e0e8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80090d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80090e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80090f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009112:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009116:	f040 8478 	bne.w	8009a0a <AT_ESP8266_ND+0x350e>
 800911a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800911e:	2b13      	cmp	r3, #19
 8009120:	d032      	beq.n	8009188 <AT_ESP8266_ND+0x2c8c>
 8009122:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009126:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009130:	f241 3288 	movw	r2, #5000	; 0x1388
 8009134:	4293      	cmp	r3, r2
 8009136:	dc27      	bgt.n	8009188 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_disconnect)
 8009138:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800913c:	2b0a      	cmp	r3, #10
 800913e:	d023      	beq.n	8009188 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_fail)
 8009140:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009144:	2b03      	cmp	r3, #3
 8009146:	d01f      	beq.n	8009188 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_connected)
 8009148:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800914c:	2b0b      	cmp	r3, #11
 800914e:	d01b      	beq.n	8009188 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_gotip)
 8009150:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009154:	2b0c      	cmp	r3, #12
 8009156:	d017      	beq.n	8009188 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_desconectado)
 8009158:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800915c:	2b10      	cmp	r3, #16
 800915e:	d013      	beq.n	8009188 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_snd_err)
 8009160:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009164:	2b11      	cmp	r3, #17
 8009166:	d00f      	beq.n	8009188 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_enviado_error)
 8009168:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800916c:	2b12      	cmp	r3, #18
 800916e:	d00b      	beq.n	8009188 <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_busy_p)))
 8009170:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009178:	f040 8447 	bne.w	8009a0a <AT_ESP8266_ND+0x350e>
 800917c:	e004      	b.n	8009188 <AT_ESP8266_ND+0x2c8c>
 800917e:	bf00      	nop
 8009180:	0800fb24 	.word	0x0800fb24
 8009184:	0800fb30 	.word	0x0800fb30
									a->_debug_count5++;
 8009188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80091a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80091b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b8:	4293      	cmp	r3, r2
 80091ba:	dd25      	ble.n	8009208 <AT_ESP8266_ND+0x2d0c>
										a->_debug_count8++;
 80091bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80091da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80091f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2200      	movs	r2, #0
 8009204:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009208:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800920c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009216:	2b02      	cmp	r3, #2
 8009218:	dd10      	ble.n	800923c <AT_ESP8266_ND+0x2d40>
 800921a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800921e:	2b10      	cmp	r3, #16
 8009220:	d00c      	beq.n	800923c <AT_ESP8266_ND+0x2d40>
 8009222:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009226:	2b0a      	cmp	r3, #10
 8009228:	d008      	beq.n	800923c <AT_ESP8266_ND+0x2d40>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800922a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800922e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	220f      	movs	r2, #15
 8009236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800923a:	e008      	b.n	800924e <AT_ESP8266_ND+0x2d52>
										a->_estado=AT_decode;	//Devuelvo el estado
 800923c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009240:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800924a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 800924e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2200      	movs	r2, #0
 800925a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 800925e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 800926e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009272:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 800927e:	e3c4      	b.n	8009a0a <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009280:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009284:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8009290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d16f      	bne.n	8009382 <AT_ESP8266_ND+0x2e86>
						{
						a->_pasos=0;
 80092a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80092b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2201      	movs	r2, #1
 80092be:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80092c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80092d0:	4620      	mov	r0, r4
 80092d2:	f7f6 ff8f 	bl	80001f4 <strlen>
 80092d6:	4603      	mov	r3, r0
 80092d8:	4423      	add	r3, r4
 80092da:	4a7a      	ldr	r2, [pc, #488]	; (80094c4 <AT_ESP8266_ND+0x2fc8>)
 80092dc:	461c      	mov	r4, r3
 80092de:	4615      	mov	r5, r2
 80092e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092e2:	6020      	str	r0, [r4, #0]
 80092e4:	6061      	str	r1, [r4, #4]
 80092e6:	60a2      	str	r2, [r4, #8]
 80092e8:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80092ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80092f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8009306:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800930a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	335c      	adds	r3, #92	; 0x5c
 8009312:	4618      	mov	r0, r3
 8009314:	f7f6 ff6e 	bl	80001f4 <strlen>
 8009318:	4603      	mov	r3, r0
 800931a:	461a      	mov	r2, r3
 800931c:	4629      	mov	r1, r5
 800931e:	4620      	mov	r0, r4
 8009320:	f005 f8d9 	bl	800e4d6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009328:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009332:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009336:	4618      	mov	r0, r3
 8009338:	f7f6 ff5c 	bl	80001f4 <strlen>
 800933c:	4602      	mov	r2, r0
 800933e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009342:	4619      	mov	r1, r3
 8009344:	4620      	mov	r0, r4
 8009346:	f005 f8c6 	bl	800e4d6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800934a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800934e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009358:	4618      	mov	r0, r3
 800935a:	f7f6 ff4b 	bl	80001f4 <strlen>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009366:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8009370:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009374:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800937e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 8009382:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009386:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80093a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d123      	bne.n	80093fa <AT_ESP8266_ND+0x2efe>
 80093b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093b6:	2b0a      	cmp	r3, #10
 80093b8:	d02b      	beq.n	8009412 <AT_ESP8266_ND+0x2f16>
 80093ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093be:	2b0b      	cmp	r3, #11
 80093c0:	d027      	beq.n	8009412 <AT_ESP8266_ND+0x2f16>
 80093c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093c6:	2b0c      	cmp	r3, #12
 80093c8:	d023      	beq.n	8009412 <AT_ESP8266_ND+0x2f16>
 80093ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093ce:	2b0e      	cmp	r3, #14
 80093d0:	d01f      	beq.n	8009412 <AT_ESP8266_ND+0x2f16>
 80093d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093d6:	2b0f      	cmp	r3, #15
 80093d8:	d01b      	beq.n	8009412 <AT_ESP8266_ND+0x2f16>
 80093da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093de:	2b10      	cmp	r3, #16
 80093e0:	d017      	beq.n	8009412 <AT_ESP8266_ND+0x2f16>
 80093e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093e6:	2b15      	cmp	r3, #21
 80093e8:	d013      	beq.n	8009412 <AT_ESP8266_ND+0x2f16>
 80093ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093ee:	2b16      	cmp	r3, #22
 80093f0:	d00f      	beq.n	8009412 <AT_ESP8266_ND+0x2f16>
 80093f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093f6:	2b17      	cmp	r3, #23
 80093f8:	d00b      	beq.n	8009412 <AT_ESP8266_ND+0x2f16>
 80093fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009408:	f241 3288 	movw	r2, #5000	; 0x1388
 800940c:	4293      	cmp	r3, r2
 800940e:	f340 82fe 	ble.w	8009a0e <AT_ESP8266_ND+0x3512>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009412:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009416:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009434:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009438:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2200      	movs	r2, #0
 8009440:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009444:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009448:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2200      	movs	r2, #0
 8009450:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8009454:	e2db      	b.n	8009a0e <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800945a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	2200      	movs	r2, #0
 8009464:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8009466:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800946a:	2b10      	cmp	r3, #16
 800946c:	d007      	beq.n	800947e <AT_ESP8266_ND+0x2f82>
 800946e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009472:	2b0a      	cmp	r3, #10
 8009474:	d003      	beq.n	800947e <AT_ESP8266_ND+0x2f82>
 8009476:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800947a:	2b03      	cmp	r3, #3
 800947c:	d124      	bne.n	80094c8 <AT_ESP8266_ND+0x2fcc>
				{
					a->_estado=AT_decode;
 800947e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800948c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009494:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2200      	movs	r2, #0
 800949c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 80094a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 80094b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80094c0:	e2a7      	b.n	8009a12 <AT_ESP8266_ND+0x3516>
 80094c2:	bf00      	nop
 80094c4:	0800fb3c 	.word	0x0800fb3c
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80094c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	f040 8102 	bne.w	80096e0 <AT_ESP8266_ND+0x31e4>
 80094dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f040 80f8 	bne.w	80096e0 <AT_ESP8266_ND+0x31e4>
										a->_ejecucion=1;
 80094f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009504:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2218      	movs	r2, #24
 800950c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009520:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009524:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009534:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 800953e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009542:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800954e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009552:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 800955e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009562:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800956c:	4620      	mov	r0, r4
 800956e:	f7f6 fe41 	bl	80001f4 <strlen>
 8009572:	4603      	mov	r3, r0
 8009574:	4423      	add	r3, r4
 8009576:	4a83      	ldr	r2, [pc, #524]	; (8009784 <AT_ESP8266_ND+0x3288>)
 8009578:	461c      	mov	r4, r3
 800957a:	4613      	mov	r3, r2
 800957c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800957e:	6020      	str	r0, [r4, #0]
 8009580:	6061      	str	r1, [r4, #4]
 8009582:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009584:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009588:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8009592:	f107 020c 	add.w	r2, r7, #12
 8009596:	4611      	mov	r1, r2
 8009598:	4618      	mov	r0, r3
 800959a:	f004 fd71 	bl	800e080 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 800959e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80095ac:	f107 030c 	add.w	r3, r7, #12
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7f6 fe1f 	bl	80001f4 <strlen>
 80095b6:	4602      	mov	r2, r0
 80095b8:	f107 030c 	add.w	r3, r7, #12
 80095bc:	4619      	mov	r1, r3
 80095be:	4620      	mov	r0, r4
 80095c0:	f004 ff89 	bl	800e4d6 <strncat>
										strncat(a->_uart2snd,",",1);
 80095c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80095d2:	4620      	mov	r0, r4
 80095d4:	f7f6 fe0e 	bl	80001f4 <strlen>
 80095d8:	4603      	mov	r3, r0
 80095da:	4423      	add	r3, r4
 80095dc:	496a      	ldr	r1, [pc, #424]	; (8009788 <AT_ESP8266_ND+0x328c>)
 80095de:	461a      	mov	r2, r3
 80095e0:	460b      	mov	r3, r1
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80095e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 80095f4:	f107 020c 	add.w	r2, r7, #12
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f004 fd40 	bl	800e080 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800960e:	f107 030c 	add.w	r3, r7, #12
 8009612:	4618      	mov	r0, r3
 8009614:	f7f6 fdee 	bl	80001f4 <strlen>
 8009618:	4602      	mov	r2, r0
 800961a:	f107 030c 	add.w	r3, r7, #12
 800961e:	4619      	mov	r1, r3
 8009620:	4620      	mov	r0, r4
 8009622:	f004 ff58 	bl	800e4d6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009626:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800962a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009634:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009638:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f005 f827 	bl	800e698 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800964a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009658:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800965c:	2202      	movs	r2, #2
 800965e:	4618      	mov	r0, r3
 8009660:	f004 ff39 	bl	800e4d6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009672:	4618      	mov	r0, r3
 8009674:	f7f6 fdbe 	bl	80001f4 <strlen>
 8009678:	4603      	mov	r3, r0
 800967a:	461a      	mov	r2, r3
 800967c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 800968a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800968e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009698:	4620      	mov	r0, r4
 800969a:	f7f6 fdab 	bl	80001f4 <strlen>
 800969e:	4603      	mov	r3, r0
 80096a0:	4423      	add	r3, r4
 80096a2:	4a3a      	ldr	r2, [pc, #232]	; (800978c <AT_ESP8266_ND+0x3290>)
 80096a4:	461c      	mov	r4, r3
 80096a6:	4613      	mov	r3, r2
 80096a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80096aa:	6020      	str	r0, [r4, #0]
 80096ac:	6061      	str	r1, [r4, #4]
 80096ae:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80096b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 80096ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f44f 7261 	mov.w	r2, #900	; 0x384
 80096dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80096e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80096fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009702:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800970c:	2b00      	cmp	r3, #0
 800970e:	f040 80b8 	bne.w	8009882 <AT_ESP8266_ND+0x3386>
 8009712:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009716:	2b13      	cmp	r3, #19
 8009718:	f000 80b3 	beq.w	8009882 <AT_ESP8266_ND+0x3386>
 800971c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f203 6294 	addw	r2, r3, #1684	; 0x694
 800972a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800972e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7f6 fd50 	bl	80001e0 <strcmp>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d024      	beq.n	8009790 <AT_ESP8266_ND+0x3294>
 8009746:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800974a:	2b01      	cmp	r3, #1
 800974c:	d020      	beq.n	8009790 <AT_ESP8266_ND+0x3294>
 800974e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009752:	2b14      	cmp	r3, #20
 8009754:	d01c      	beq.n	8009790 <AT_ESP8266_ND+0x3294>
 8009756:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800975a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009764:	f241 3288 	movw	r2, #5000	; 0x1388
 8009768:	4293      	cmp	r3, r2
 800976a:	f340 808a 	ble.w	8009882 <AT_ESP8266_ND+0x3386>
 800976e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009772:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800977c:	2b01      	cmp	r3, #1
 800977e:	f040 8080 	bne.w	8009882 <AT_ESP8266_ND+0x3386>
 8009782:	e005      	b.n	8009790 <AT_ESP8266_ND+0x3294>
 8009784:	0800fb24 	.word	0x0800fb24
 8009788:	0800fb4c 	.word	0x0800fb4c
 800978c:	0800fb30 	.word	0x0800fb30
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009790:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009794:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800979e:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a2:	4293      	cmp	r3, r2
 80097a4:	dd17      	ble.n	80097d6 <AT_ESP8266_ND+0x32da>
 80097a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d10e      	bne.n	80097d6 <AT_ESP8266_ND+0x32da>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80097b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80097d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 80097f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009808:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009812:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009816:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2201      	movs	r2, #1
 800981e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009822:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009826:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009834:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800983e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009842:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800984c:	2361      	movs	r3, #97	; 0x61
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	2301      	movs	r3, #1
 8009852:	f004 fc49 	bl	800e0e8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009856:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800985a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2200      	movs	r2, #0
 800987e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009890:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009894:	f040 80bd 	bne.w	8009a12 <AT_ESP8266_ND+0x3516>
 8009898:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800989c:	2b13      	cmp	r3, #19
 800989e:	d02b      	beq.n	80098f8 <AT_ESP8266_ND+0x33fc>
 80098a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098a4:	2b0b      	cmp	r3, #11
 80098a6:	d027      	beq.n	80098f8 <AT_ESP8266_ND+0x33fc>
 80098a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098ac:	2b0c      	cmp	r3, #12
 80098ae:	d023      	beq.n	80098f8 <AT_ESP8266_ND+0x33fc>
 80098b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80098be:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c2:	4293      	cmp	r3, r2
 80098c4:	dc18      	bgt.n	80098f8 <AT_ESP8266_ND+0x33fc>
 80098c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098ca:	2b0a      	cmp	r3, #10
 80098cc:	d014      	beq.n	80098f8 <AT_ESP8266_ND+0x33fc>
 80098ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098d2:	2b10      	cmp	r3, #16
 80098d4:	d010      	beq.n	80098f8 <AT_ESP8266_ND+0x33fc>
 80098d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098da:	2b11      	cmp	r3, #17
 80098dc:	d00c      	beq.n	80098f8 <AT_ESP8266_ND+0x33fc>
 80098de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098e2:	2b12      	cmp	r3, #18
 80098e4:	d008      	beq.n	80098f8 <AT_ESP8266_ND+0x33fc>
 80098e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098ea:	2b16      	cmp	r3, #22
 80098ec:	d004      	beq.n	80098f8 <AT_ESP8266_ND+0x33fc>
 80098ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098f2:	2b19      	cmp	r3, #25
 80098f4:	f040 808d 	bne.w	8009a12 <AT_ESP8266_ND+0x3516>
									a->_debug_count5++;
 80098f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800990c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009916:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800991a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009924:	f241 3288 	movw	r2, #5000	; 0x1388
 8009928:	4293      	cmp	r3, r2
 800992a:	dd25      	ble.n	8009978 <AT_ESP8266_ND+0x347c>
										a->_debug_count8++;
 800992c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009940:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 800994a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800994e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800995e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009968:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800996c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800997c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009986:	2b02      	cmp	r3, #2
 8009988:	dd07      	ble.n	800999a <AT_ESP8266_ND+0x349e>
 800998a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800998e:	2b10      	cmp	r3, #16
 8009990:	d003      	beq.n	800999a <AT_ESP8266_ND+0x349e>
 8009992:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009996:	2b0a      	cmp	r3, #10
 8009998:	d108      	bne.n	80099ac <AT_ESP8266_ND+0x34b0>
										a->_estado=AT_decode;	//Devuelvo el estado
 800999a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800999e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80099a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80099ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80099bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80099cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 80099dc:	e019      	b.n	8009a12 <AT_ESP8266_ND+0x3516>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 80099de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80099ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 80099f0:	e010      	b.n	8009a14 <AT_ESP8266_ND+0x3518>
			break;
 80099f2:	bf00      	nop
 80099f4:	e00e      	b.n	8009a14 <AT_ESP8266_ND+0x3518>
			break;
 80099f6:	bf00      	nop
 80099f8:	e00c      	b.n	8009a14 <AT_ESP8266_ND+0x3518>
			break;
 80099fa:	bf00      	nop
 80099fc:	e00a      	b.n	8009a14 <AT_ESP8266_ND+0x3518>
			break;
 80099fe:	bf00      	nop
 8009a00:	e008      	b.n	8009a14 <AT_ESP8266_ND+0x3518>
			break;
 8009a02:	bf00      	nop
 8009a04:	e006      	b.n	8009a14 <AT_ESP8266_ND+0x3518>
			break;
 8009a06:	bf00      	nop
 8009a08:	e004      	b.n	8009a14 <AT_ESP8266_ND+0x3518>
			break;
 8009a0a:	bf00      	nop
 8009a0c:	e002      	b.n	8009a14 <AT_ESP8266_ND+0x3518>
			break;
 8009a0e:	bf00      	nop
 8009a10:	e000      	b.n	8009a14 <AT_ESP8266_ND+0x3518>
			break;
 8009a12:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009a24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009a34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009a42:	4618      	mov	r0, r3
 8009a44:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a4c <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a5e:	f240 328d 	movw	r2, #909	; 0x38d
 8009a62:	4293      	cmp	r3, r2
 8009a64:	f001 8430 	beq.w	800b2c8 <WiFi_Conn_ND+0x187c>
 8009a68:	f240 328d 	movw	r2, #909	; 0x38d
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	f301 84c5 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009a72:	f240 3289 	movw	r2, #905	; 0x389
 8009a76:	4293      	cmp	r3, r2
 8009a78:	f001 839d 	beq.w	800b1b6 <WiFi_Conn_ND+0x176a>
 8009a7c:	f240 3289 	movw	r2, #905	; 0x389
 8009a80:	4293      	cmp	r3, r2
 8009a82:	f301 84bb 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009a86:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009a8a:	f001 828c 	beq.w	800afa6 <WiFi_Conn_ND+0x155a>
 8009a8e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009a92:	f301 84b3 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009a96:	f240 3229 	movw	r2, #809	; 0x329
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	f301 84ae 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009aa0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009aa4:	f280 80a5 	bge.w	8009bf2 <WiFi_Conn_ND+0x1a6>
 8009aa8:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009aac:	4293      	cmp	r3, r2
 8009aae:	f000 87c0 	beq.w	800aa32 <WiFi_Conn_ND+0xfe6>
 8009ab2:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	f301 84a0 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009abc:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	f000 8741 	beq.w	800a948 <WiFi_Conn_ND+0xefc>
 8009ac6:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009aca:	4293      	cmp	r3, r2
 8009acc:	f301 8496 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009ad0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009ad4:	f000 866b 	beq.w	800a7ae <WiFi_Conn_ND+0xd62>
 8009ad8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009adc:	f301 848e 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009ae0:	f240 2261 	movw	r2, #609	; 0x261
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	f000 85ec 	beq.w	800a6c2 <WiFi_Conn_ND+0xc76>
 8009aea:	f240 2261 	movw	r2, #609	; 0x261
 8009aee:	4293      	cmp	r3, r2
 8009af0:	f301 8484 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009af4:	f240 225d 	movw	r2, #605	; 0x25d
 8009af8:	4293      	cmp	r3, r2
 8009afa:	f000 8582 	beq.w	800a602 <WiFi_Conn_ND+0xbb6>
 8009afe:	f240 225d 	movw	r2, #605	; 0x25d
 8009b02:	4293      	cmp	r3, r2
 8009b04:	f301 847a 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009b08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009b0c:	f000 8500 	beq.w	800a510 <WiFi_Conn_ND+0xac4>
 8009b10:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009b14:	f301 8472 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009b18:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	f000 8496 	beq.w	800a44e <WiFi_Conn_ND+0xa02>
 8009b22:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009b26:	f281 8469 	bge.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009b2a:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	f000 844c 	beq.w	800a3cc <WiFi_Conn_ND+0x980>
 8009b34:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009b38:	f281 8460 	bge.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009b3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b40:	f000 83d7 	beq.w	800a2f2 <WiFi_Conn_ND+0x8a6>
 8009b44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b48:	f301 8458 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009b4c:	f240 1299 	movw	r2, #409	; 0x199
 8009b50:	4293      	cmp	r3, r2
 8009b52:	f000 8378 	beq.w	800a246 <WiFi_Conn_ND+0x7fa>
 8009b56:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009b5a:	f281 844f 	bge.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009b5e:	f240 1295 	movw	r2, #405	; 0x195
 8009b62:	4293      	cmp	r3, r2
 8009b64:	f000 8333 	beq.w	800a1ce <WiFi_Conn_ND+0x782>
 8009b68:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009b6c:	f281 8446 	bge.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009b70:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009b74:	f000 82aa 	beq.w	800a0cc <WiFi_Conn_ND+0x680>
 8009b78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009b7c:	f301 843e 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009b80:	f240 1235 	movw	r2, #309	; 0x135
 8009b84:	4293      	cmp	r3, r2
 8009b86:	f000 827b 	beq.w	800a080 <WiFi_Conn_ND+0x634>
 8009b8a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009b8e:	f281 8435 	bge.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009b92:	f240 1231 	movw	r2, #305	; 0x131
 8009b96:	4293      	cmp	r3, r2
 8009b98:	f000 826d 	beq.w	800a076 <WiFi_Conn_ND+0x62a>
 8009b9c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009ba0:	f281 842c 	bge.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009ba4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009ba8:	f000 8211 	beq.w	8009fce <WiFi_Conn_ND+0x582>
 8009bac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009bb0:	f301 8424 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009bb4:	2bd1      	cmp	r3, #209	; 0xd1
 8009bb6:	f000 81a5 	beq.w	8009f04 <WiFi_Conn_ND+0x4b8>
 8009bba:	2bd1      	cmp	r3, #209	; 0xd1
 8009bbc:	f301 841e 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009bc0:	2bcd      	cmp	r3, #205	; 0xcd
 8009bc2:	f000 8175 	beq.w	8009eb0 <WiFi_Conn_ND+0x464>
 8009bc6:	2bcd      	cmp	r3, #205	; 0xcd
 8009bc8:	f301 8418 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009bcc:	2bc8      	cmp	r3, #200	; 0xc8
 8009bce:	f000 80f1 	beq.w	8009db4 <WiFi_Conn_ND+0x368>
 8009bd2:	2bc8      	cmp	r3, #200	; 0xc8
 8009bd4:	f301 8412 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009bd8:	2b6d      	cmp	r3, #109	; 0x6d
 8009bda:	f000 80b3 	beq.w	8009d44 <WiFi_Conn_ND+0x2f8>
 8009bde:	2b6d      	cmp	r3, #109	; 0x6d
 8009be0:	f301 840c 	bgt.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009be4:	2b64      	cmp	r3, #100	; 0x64
 8009be6:	d021      	beq.n	8009c2c <WiFi_Conn_ND+0x1e0>
 8009be8:	2b69      	cmp	r3, #105	; 0x69
 8009bea:	f000 8096 	beq.w	8009d1a <WiFi_Conn_ND+0x2ce>
 8009bee:	f001 bc05 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009bf2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009bf6:	2b09      	cmp	r3, #9
 8009bf8:	f201 8400 	bhi.w	800b3fc <WiFi_Conn_ND+0x19b0>
 8009bfc:	a201      	add	r2, pc, #4	; (adr r2, 8009c04 <WiFi_Conn_ND+0x1b8>)
 8009bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c02:	bf00      	nop
 8009c04:	0800ab49 	.word	0x0800ab49
 8009c08:	0800b3fd 	.word	0x0800b3fd
 8009c0c:	0800b3fd 	.word	0x0800b3fd
 8009c10:	0800b3fd 	.word	0x0800b3fd
 8009c14:	0800b3fd 	.word	0x0800b3fd
 8009c18:	0800ac17 	.word	0x0800ac17
 8009c1c:	0800acc1 	.word	0x0800acc1
 8009c20:	0800ad6b 	.word	0x0800ad6b
 8009c24:	0800ae15 	.word	0x0800ae15
 8009c28:	0800aebf 	.word	0x0800aebf
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c32:	2b64      	cmp	r3, #100	; 0x64
 8009c34:	d046      	beq.n	8009cc4 <WiFi_Conn_ND+0x278>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d041      	beq.n	8009cc4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c46:	2b1c      	cmp	r3, #28
 8009c48:	d03c      	beq.n	8009cc4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d037      	beq.n	8009cc4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c5a:	2b04      	cmp	r3, #4
 8009c5c:	d032      	beq.n	8009cc4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c64:	2b13      	cmp	r3, #19
 8009c66:	d02d      	beq.n	8009cc4 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7fc fab1 	bl	80061d0 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d14e      	bne.n	8009d16 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f7fc fc3f 	bl	80064fc <AT_ESP8266_ND>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d109      	bne.n	8009cac <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	f7f7 fb30 	bl	800130c <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	2364      	movs	r3, #100	; 0x64
 8009cbc:	68b8      	ldr	r0, [r7, #8]
 8009cbe:	f7fb fa0b 	bl	80050d8 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009cc2:	e028      	b.n	8009d16 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d004      	beq.n	8009cd8 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009cd4:	2b1c      	cmp	r3, #28
 8009cd6:	d103      	bne.n	8009ce0 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	226d      	movs	r2, #109	; 0x6d
 8009cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d00f      	beq.n	8009d0a <WiFi_Conn_ND+0x2be>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf0:	2b04      	cmp	r3, #4
 8009cf2:	d00a      	beq.n	8009d0a <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cfa:	2b0b      	cmp	r3, #11
 8009cfc:	d005      	beq.n	8009d0a <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d04:	2b0c      	cmp	r3, #12
 8009d06:	f041 834a 	bne.w	800b39e <WiFi_Conn_ND+0x1952>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2269      	movs	r2, #105	; 0x69
 8009d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009d12:	f001 bb44 	b.w	800b39e <WiFi_Conn_ND+0x1952>
 8009d16:	f001 bb42 	b.w	800b39e <WiFi_Conn_ND+0x1952>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7fc fa58 	bl	80061d0 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2264      	movs	r2, #100	; 0x64
 8009d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009d40:	f001 bb5c 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00c      	beq.n	8009d68 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7fc fa6a 	bl	8006228 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009d66:	e00e      	b.n	8009d86 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f7fc fa47 	bl	80061fc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	22c8      	movs	r2, #200	; 0xc8
 8009d72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	f041 8308 	bne.w	800b3a2 <WiFi_Conn_ND+0x1956>
					{
						Cambiar_CWMODE(b);
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f7fc fa1c 	bl	80061d0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2264      	movs	r2, #100	; 0x64
 8009d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009db0:	f001 baf7 	b.w	800b3a2 <WiFi_Conn_ND+0x1956>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dba:	2bc8      	cmp	r3, #200	; 0xc8
 8009dbc:	d04f      	beq.n	8009e5e <WiFi_Conn_ND+0x412>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d04a      	beq.n	8009e5e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d045      	beq.n	8009e5e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d040      	beq.n	8009e5e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	d03b      	beq.n	8009e5e <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dec:	2b0a      	cmp	r3, #10
 8009dee:	d036      	beq.n	8009e5e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df6:	2b0b      	cmp	r3, #11
 8009df8:	d031      	beq.n	8009e5e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e00:	2b0c      	cmp	r3, #12
 8009e02:	d02c      	beq.n	8009e5e <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7fc f9f9 	bl	80061fc <ConectarWIFI>
						if(b->_enviaruart==1)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d124      	bne.n	8009e5e <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f7fc fb71 	bl	80064fc <AT_ESP8266_ND>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d109      	bne.n	8009e48 <WiFi_Conn_ND+0x3fc>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009e40:	4619      	mov	r1, r3
 8009e42:	4610      	mov	r0, r2
 8009e44:	f7f7 fa62 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	2364      	movs	r3, #100	; 0x64
 8009e58:	68b8      	ldr	r0, [r7, #8]
 8009e5a:	f7fb f93d 	bl	80050d8 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d004      	beq.n	8009e72 <WiFi_Conn_ND+0x426>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6e:	2b0c      	cmp	r3, #12
 8009e70:	d103      	bne.n	8009e7a <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	22d1      	movs	r2, #209	; 0xd1
 8009e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d00f      	beq.n	8009ea4 <WiFi_Conn_ND+0x458>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d00a      	beq.n	8009ea4 <WiFi_Conn_ND+0x458>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d005      	beq.n	8009ea4 <WiFi_Conn_ND+0x458>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e9e:	2b0a      	cmp	r3, #10
 8009ea0:	f041 8281 	bne.w	800b3a6 <WiFi_Conn_ND+0x195a>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	22cd      	movs	r2, #205	; 0xcd
 8009ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009eac:	f001 ba7b 	b.w	800b3a6 <WiFi_Conn_ND+0x195a>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009eb0:	f241 3088 	movw	r0, #5000	; 0x1388
 8009eb4:	f7f8 fc5c 	bl	8002770 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7fc f99f 	bl	80061fc <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	22c8      	movs	r2, #200	; 0xc8
 8009ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	f041 8264 	bne.w	800b3aa <WiFi_Conn_ND+0x195e>
					{
						Cambiar_CWMODE(b);
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7fc f974 	bl	80061d0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2264      	movs	r2, #100	; 0x64
 8009eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009f00:	f001 ba53 	b.w	800b3aa <WiFi_Conn_ND+0x195e>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d108      	bne.n	8009f28 <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f240 3229 	movw	r2, #809	; 0x329
 8009f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f2e:	2b0a      	cmp	r3, #10
 8009f30:	d009      	beq.n	8009f46 <WiFi_Conn_ND+0x4fa>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f38:	2b0d      	cmp	r3, #13
 8009f3a:	d004      	beq.n	8009f46 <WiFi_Conn_ND+0x4fa>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d10a      	bne.n	8009f5c <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f7fc f958 	bl	80061fc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	22c8      	movs	r2, #200	; 0xc8
 8009f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f62:	2b04      	cmp	r3, #4
 8009f64:	d10e      	bne.n	8009f84 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f7fc f932 	bl	80061d0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2264      	movs	r2, #100	; 0x64
 8009f70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d011      	beq.n	8009fb2 <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7fc f9a2 	bl	80062d8 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009fae:	f001 ba25 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f7fc f938 	bl	8006228 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009fca:	f001 ba17 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009fd8:	d03b      	beq.n	800a052 <WiFi_Conn_ND+0x606>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d036      	beq.n	800a052 <WiFi_Conn_ND+0x606>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fea:	2b0a      	cmp	r3, #10
 8009fec:	d031      	beq.n	800a052 <WiFi_Conn_ND+0x606>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff4:	2b0d      	cmp	r3, #13
 8009ff6:	d02c      	beq.n	800a052 <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7fc f941 	bl	8006280 <DesconectarWIFI>
						if(b->_enviaruart==1)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a004:	2b01      	cmp	r3, #1
 800a006:	d124      	bne.n	800a052 <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f7fc fa77 	bl	80064fc <AT_ESP8266_ND>
 800a00e:	4602      	mov	r2, r0
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a024:	2b01      	cmp	r3, #1
 800a026:	d109      	bne.n	800a03c <WiFi_Conn_ND+0x5f0>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a034:	4619      	mov	r1, r3
 800a036:	4610      	mov	r0, r2
 800a038:	f7f7 f968 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a048:	b29a      	uxth	r2, r3
 800a04a:	2364      	movs	r3, #100	; 0x64
 800a04c:	68b8      	ldr	r0, [r7, #8]
 800a04e:	f7fb f843 	bl	80050d8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a058:	2b0a      	cmp	r3, #10
 800a05a:	d005      	beq.n	800a068 <WiFi_Conn_ND+0x61c>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a062:	2b0d      	cmp	r3, #13
 800a064:	f041 81a3 	bne.w	800b3ae <WiFi_Conn_ND+0x1962>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f240 1235 	movw	r2, #309	; 0x135
 800a06e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a072:	f001 b99c 	b.w	800b3ae <WiFi_Conn_ND+0x1962>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7fc f894 	bl	80061a4 <NOP>
			}
			break;
 800a07c:	f001 b9be 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7fc f8b7 	bl	80061fc <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	22c8      	movs	r2, #200	; 0xc8
 800a092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	f041 8184 	bne.w	800b3b2 <WiFi_Conn_ND+0x1966>
					{
						Cambiar_CWMODE(b);
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f7fc f890 	bl	80061d0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2264      	movs	r2, #100	; 0x64
 800a0b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a0c8:	f001 b973 	b.w	800b3b2 <WiFi_Conn_ND+0x1966>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a0d6:	d04f      	beq.n	800a178 <WiFi_Conn_ND+0x72c>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d04a      	beq.n	800a178 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d045      	beq.n	800a178 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d040      	beq.n	800a178 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fc:	2b07      	cmp	r3, #7
 800a0fe:	d03b      	beq.n	800a178 <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a106:	2b08      	cmp	r3, #8
 800a108:	d036      	beq.n	800a178 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a110:	2b1e      	cmp	r3, #30
 800a112:	d031      	beq.n	800a178 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a11a:	2b1f      	cmp	r3, #31
 800a11c:	d02c      	beq.n	800a178 <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7fc f882 	bl	8006228 <MUX>
						if(b->_enviaruart==1)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d124      	bne.n	800a178 <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7fc f9e4 	bl	80064fc <AT_ESP8266_ND>
 800a134:	4602      	mov	r2, r0
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d109      	bne.n	800a162 <WiFi_Conn_ND+0x716>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f7f7 f8d5 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a16e:	b29a      	uxth	r2, r3
 800a170:	2364      	movs	r3, #100	; 0x64
 800a172:	68b8      	ldr	r0, [r7, #8]
 800a174:	f7fa ffb0 	bl	80050d8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d009      	beq.n	800a196 <WiFi_Conn_ND+0x74a>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a188:	2b07      	cmp	r3, #7
 800a18a:	d004      	beq.n	800a196 <WiFi_Conn_ND+0x74a>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a192:	2b08      	cmp	r3, #8
 800a194:	d104      	bne.n	800a1a0 <WiFi_Conn_ND+0x754>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f240 1299 	movw	r2, #409	; 0x199
 800a19c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d00a      	beq.n	800a1c0 <WiFi_Conn_ND+0x774>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b0:	2b1e      	cmp	r3, #30
 800a1b2:	d005      	beq.n	800a1c0 <WiFi_Conn_ND+0x774>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ba:	2b1f      	cmp	r3, #31
 800a1bc:	f041 80fb 	bne.w	800b3b6 <WiFi_Conn_ND+0x196a>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f240 1295 	movw	r2, #405	; 0x195
 800a1c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a1ca:	f001 b8f4 	b.w	800b3b6 <WiFi_Conn_ND+0x196a>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7fb ffe8 	bl	80061a4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d112      	bne.n	800a204 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7fb fff6 	bl	80061d0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2264      	movs	r2, #100	; 0x64
 800a1e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20a:	2b0a      	cmp	r3, #10
 800a20c:	d00a      	beq.n	800a224 <WiFi_Conn_ND+0x7d8>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a214:	2b0d      	cmp	r3, #13
 800a216:	d005      	beq.n	800a224 <WiFi_Conn_ND+0x7d8>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21e:	2b03      	cmp	r3, #3
 800a220:	f041 80cb 	bne.w	800b3ba <WiFi_Conn_ND+0x196e>
				{
					ConectarWIFI(b);
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7fb ffe9 	bl	80061fc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	22c8      	movs	r2, #200	; 0xc8
 800a22e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a242:	f001 b8ba 	b.w	800b3ba <WiFi_Conn_ND+0x196e>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7fb ffac 	bl	80061a4 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	d10e      	bne.n	800a27c <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7fb ffb6 	bl	80061d0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2264      	movs	r2, #100	; 0x64
 800a268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a282:	2b0a      	cmp	r3, #10
 800a284:	d009      	beq.n	800a29a <WiFi_Conn_ND+0x84e>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28c:	2b0d      	cmp	r3, #13
 800a28e:	d004      	beq.n	800a29a <WiFi_Conn_ND+0x84e>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a296:	2b03      	cmp	r3, #3
 800a298:	d10a      	bne.n	800a2b0 <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7fb ffae 	bl	80061fc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	22c8      	movs	r2, #200	; 0xc8
 800a2a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10d      	bne.n	800a2d6 <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f7fb ffca 	bl	8006254 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a2d2:	f001 b893 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
						IPDef(b);
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f7fb ffbc 	bl	8006254 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a2e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a2ee:	f001 b885 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a2fc:	d045      	beq.n	800a38a <WiFi_Conn_ND+0x93e>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a304:	2b04      	cmp	r3, #4
 800a306:	d040      	beq.n	800a38a <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d03b      	beq.n	800a38a <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d036      	beq.n	800a38a <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a322:	2b1b      	cmp	r3, #27
 800a324:	d031      	beq.n	800a38a <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32c:	2b21      	cmp	r3, #33	; 0x21
 800a32e:	d02c      	beq.n	800a38a <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7fb ff8f 	bl	8006254 <IPDef>
						if(b->_enviaruart==1)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d124      	bne.n	800a38a <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7fc f8db 	bl	80064fc <AT_ESP8266_ND>
 800a346:	4602      	mov	r2, r0
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d109      	bne.n	800a374 <WiFi_Conn_ND+0x928>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	f7f6 ffcc 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a380:	b29a      	uxth	r2, r3
 800a382:	2364      	movs	r3, #100	; 0x64
 800a384:	68b8      	ldr	r0, [r7, #8]
 800a386:	f7fa fea7 	bl	80050d8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a390:	2b01      	cmp	r3, #1
 800a392:	d004      	beq.n	800a39e <WiFi_Conn_ND+0x952>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39a:	2b1b      	cmp	r3, #27
 800a39c:	d104      	bne.n	800a3a8 <WiFi_Conn_ND+0x95c>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d005      	beq.n	800a3be <WiFi_Conn_ND+0x972>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b8:	2b21      	cmp	r3, #33	; 0x21
 800a3ba:	f041 8000 	bne.w	800b3be <WiFi_Conn_ND+0x1972>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a3c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a3c8:	f000 bff9 	b.w	800b3be <WiFi_Conn_ND+0x1972>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f7fb fee9 	bl	80061a4 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d004      	beq.n	800a3e6 <WiFi_Conn_ND+0x99a>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d112      	bne.n	800a40c <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f7fb fef2 	bl	80061d0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2264      	movs	r2, #100	; 0x64
 800a3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a412:	2b0a      	cmp	r3, #10
 800a414:	d00a      	beq.n	800a42c <WiFi_Conn_ND+0x9e0>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41c:	2b0d      	cmp	r3, #13
 800a41e:	d005      	beq.n	800a42c <WiFi_Conn_ND+0x9e0>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a426:	2b03      	cmp	r3, #3
 800a428:	f040 87cb 	bne.w	800b3c2 <WiFi_Conn_ND+0x1976>
				{
					ConectarWIFI(b);
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7fb fee5 	bl	80061fc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	22c8      	movs	r2, #200	; 0xc8
 800a436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a44a:	f000 bfba 	b.w	800b3c2 <WiFi_Conn_ND+0x1976>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f7fb fea8 	bl	80061a4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d112      	bne.n	800a484 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f7fb feb6 	bl	80061d0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2264      	movs	r2, #100	; 0x64
 800a468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a48a:	2b0a      	cmp	r3, #10
 800a48c:	d009      	beq.n	800a4a2 <WiFi_Conn_ND+0xa56>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a494:	2b0d      	cmp	r3, #13
 800a496:	d004      	beq.n	800a4a2 <WiFi_Conn_ND+0xa56>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d10e      	bne.n	800a4c0 <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7fb feaa 	bl	80061fc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	22c8      	movs	r2, #200	; 0xc8
 800a4ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d111      	bne.n	800a4ee <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7fb feee 	bl	80062ac <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a4d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800a4ea:	f000 bf87 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
						ConectarWIFI(b);//
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f7fb fe84 	bl	80061fc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	22c8      	movs	r2, #200	; 0xc8
 800a4f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a50c:	f000 bf76 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a516:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a51a:	d04a      	beq.n	800a5b2 <WiFi_Conn_ND+0xb66>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a522:	2b02      	cmp	r3, #2
 800a524:	d045      	beq.n	800a5b2 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d040      	beq.n	800a5b2 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a536:	2b0a      	cmp	r3, #10
 800a538:	d03b      	beq.n	800a5b2 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a540:	2b0e      	cmp	r3, #14
 800a542:	d036      	beq.n	800a5b2 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54a:	2b0f      	cmp	r3, #15
 800a54c:	d031      	beq.n	800a5b2 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a554:	2b10      	cmp	r3, #16
 800a556:	d02c      	beq.n	800a5b2 <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f7fb fea7 	bl	80062ac <ConectarTCP>
						if(b->_enviaruart==1)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a564:	2b01      	cmp	r3, #1
 800a566:	d124      	bne.n	800a5b2 <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7fb ffc7 	bl	80064fc <AT_ESP8266_ND>
 800a56e:	4602      	mov	r2, r0
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a584:	2b01      	cmp	r3, #1
 800a586:	d109      	bne.n	800a59c <WiFi_Conn_ND+0xb50>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	f7f6 feb8 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	2364      	movs	r3, #100	; 0x64
 800a5ac:	68b8      	ldr	r0, [r7, #8]
 800a5ae:	f7fa fd93 	bl	80050d8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d009      	beq.n	800a5d0 <WiFi_Conn_ND+0xb84>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c2:	2b0e      	cmp	r3, #14
 800a5c4:	d004      	beq.n	800a5d0 <WiFi_Conn_ND+0xb84>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5cc:	2b0f      	cmp	r3, #15
 800a5ce:	d106      	bne.n	800a5de <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f240 2261 	movw	r2, #609	; 0x261
 800a5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a5da:	f000 bef4 	b.w	800b3c6 <WiFi_Conn_ND+0x197a>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d005      	beq.n	800a5f4 <WiFi_Conn_ND+0xba8>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ee:	2b10      	cmp	r3, #16
 800a5f0:	f040 86e9 	bne.w	800b3c6 <WiFi_Conn_ND+0x197a>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f240 225d 	movw	r2, #605	; 0x25d
 800a5fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a5fe:	f000 bee2 	b.w	800b3c6 <WiFi_Conn_ND+0x197a>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f7fb fdce 	bl	80061a4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60e:	2b04      	cmp	r3, #4
 800a610:	d112      	bne.n	800a638 <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7fb fddc 	bl	80061d0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2264      	movs	r2, #100	; 0x64
 800a61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63e:	2b0a      	cmp	r3, #10
 800a640:	d013      	beq.n	800a66a <WiFi_Conn_ND+0xc1e>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a648:	2b0d      	cmp	r3, #13
 800a64a:	d00e      	beq.n	800a66a <WiFi_Conn_ND+0xc1e>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	2b22      	cmp	r3, #34	; 0x22
 800a654:	d009      	beq.n	800a66a <WiFi_Conn_ND+0xc1e>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d004      	beq.n	800a66a <WiFi_Conn_ND+0xc1e>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a666:	2b03      	cmp	r3, #3
 800a668:	d10e      	bne.n	800a688 <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f7fb fdc6 	bl	80061fc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	22c8      	movs	r2, #200	; 0xc8
 800a674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68e:	2b10      	cmp	r3, #16
 800a690:	d005      	beq.n	800a69e <WiFi_Conn_ND+0xc52>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a698:	2b0e      	cmp	r3, #14
 800a69a:	f040 8696 	bne.w	800b3ca <WiFi_Conn_ND+0x197e>
				{
					ConectarTCP(b);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7fb fe04 	bl	80062ac <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a6be:	f000 be84 	b.w	800b3ca <WiFi_Conn_ND+0x197e>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f7fb fd6e 	bl	80061a4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ce:	2b04      	cmp	r3, #4
 800a6d0:	d112      	bne.n	800a6f8 <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7fb fd7c 	bl	80061d0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2264      	movs	r2, #100	; 0x64
 800a6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fe:	2b0a      	cmp	r3, #10
 800a700:	d009      	beq.n	800a716 <WiFi_Conn_ND+0xcca>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a708:	2b0d      	cmp	r3, #13
 800a70a:	d004      	beq.n	800a716 <WiFi_Conn_ND+0xcca>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a712:	2b03      	cmp	r3, #3
 800a714:	d10e      	bne.n	800a734 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7fb fd70 	bl	80061fc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	22c8      	movs	r2, #200	; 0xc8
 800a720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d004      	beq.n	800a748 <WiFi_Conn_ND+0xcfc>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a744:	2b10      	cmp	r3, #16
 800a746:	d10f      	bne.n	800a768 <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f7fb fdaf 	bl	80062ac <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76e:	2b0e      	cmp	r3, #14
 800a770:	d005      	beq.n	800a77e <WiFi_Conn_ND+0xd32>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a778:	2b0f      	cmp	r3, #15
 800a77a:	f040 8628 	bne.w	800b3ce <WiFi_Conn_ND+0x1982>
					{
						if(b->_automatizacion >= WF_SEND )
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a784:	2b02      	cmp	r3, #2
 800a786:	f240 8622 	bls.w	800b3ce <WiFi_Conn_ND+0x1982>
						{
							EnviarDatos(b);
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f7fb fdd0 	bl	8006330 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a7aa:	f000 be10 	b.w	800b3ce <WiFi_Conn_ND+0x1982>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a7b8:	d054      	beq.n	800a864 <WiFi_Conn_ND+0xe18>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d04f      	beq.n	800a864 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ca:	2b0a      	cmp	r3, #10
 800a7cc:	d04a      	beq.n	800a864 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d4:	2b10      	cmp	r3, #16
 800a7d6:	d045      	beq.n	800a864 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7de:	2b11      	cmp	r3, #17
 800a7e0:	d040      	beq.n	800a864 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e8:	2b14      	cmp	r3, #20
 800a7ea:	d03b      	beq.n	800a864 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f2:	2b12      	cmp	r3, #18
 800a7f4:	d036      	beq.n	800a864 <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d907      	bls.n	800a810 <WiFi_Conn_ND+0xdc4>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7fb fd90 	bl	8006330 <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a816:	2b01      	cmp	r3, #1
 800a818:	d124      	bne.n	800a864 <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7fb fe6e 	bl	80064fc <AT_ESP8266_ND>
 800a820:	4602      	mov	r2, r0
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a836:	2b01      	cmp	r3, #1
 800a838:	d109      	bne.n	800a84e <WiFi_Conn_ND+0xe02>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a846:	4619      	mov	r1, r3
 800a848:	4610      	mov	r0, r2
 800a84a:	f7f6 fd5f 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	2364      	movs	r3, #100	; 0x64
 800a85e:	68b8      	ldr	r0, [r7, #8]
 800a860:	f7fa fc3a 	bl	80050d8 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a86e:	d13b      	bne.n	800a8e8 <WiFi_Conn_ND+0xe9c>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a876:	2b01      	cmp	r3, #1
 800a878:	d136      	bne.n	800a8e8 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_error)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a880:	2b02      	cmp	r3, #2
 800a882:	d031      	beq.n	800a8e8 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_wifi_disconnect)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a88a:	2b0a      	cmp	r3, #10
 800a88c:	d02c      	beq.n	800a8e8 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_desconectado)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a894:	2b10      	cmp	r3, #16
 800a896:	d027      	beq.n	800a8e8 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_snd_err)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89e:	2b11      	cmp	r3, #17
 800a8a0:	d022      	beq.n	800a8e8 <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a8:	2b12      	cmp	r3, #18
 800a8aa:	d01d      	beq.n	800a8e8 <WiFi_Conn_ND+0xe9c>
							{
								b->_enviaruart=0;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d109      	bne.n	800a8d2 <WiFi_Conn_ND+0xe86>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	f7f6 fd1d 	bl	800130c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	2364      	movs	r3, #100	; 0x64
 800a8e2:	68b8      	ldr	r0, [r7, #8]
 800a8e4:	f7fa fbf8 	bl	80050d8 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ee:	2b13      	cmp	r3, #19
 800a8f0:	d104      	bne.n	800a8fc <WiFi_Conn_ND+0xeb0>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a8f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a902:	2b02      	cmp	r3, #2
 800a904:	d019      	beq.n	800a93a <WiFi_Conn_ND+0xeee>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90c:	2b0a      	cmp	r3, #10
 800a90e:	d014      	beq.n	800a93a <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_fail)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a916:	2b03      	cmp	r3, #3
 800a918:	d00f      	beq.n	800a93a <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_desconectado)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a920:	2b10      	cmp	r3, #16
 800a922:	d00a      	beq.n	800a93a <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_snd_err)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92a:	2b11      	cmp	r3, #17
 800a92c:	d005      	beq.n	800a93a <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_enviado_error))
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a934:	2b12      	cmp	r3, #18
 800a936:	f040 854c 	bne.w	800b3d2 <WiFi_Conn_ND+0x1986>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a944:	f000 bd45 	b.w	800b3d2 <WiFi_Conn_ND+0x1986>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f7fb fc2b 	bl	80061a4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a954:	2b04      	cmp	r3, #4
 800a956:	d112      	bne.n	800a97e <WiFi_Conn_ND+0xf32>
				{
					Cambiar_CWMODE(b);
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7fb fc39 	bl	80061d0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2264      	movs	r2, #100	; 0x64
 800a962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a984:	2b0a      	cmp	r3, #10
 800a986:	d009      	beq.n	800a99c <WiFi_Conn_ND+0xf50>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98e:	2b0d      	cmp	r3, #13
 800a990:	d004      	beq.n	800a99c <WiFi_Conn_ND+0xf50>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d10e      	bne.n	800a9ba <WiFi_Conn_ND+0xf6e>
				{
					ConectarWIFI(b);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7fb fc2d 	bl	80061fc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	22c8      	movs	r2, #200	; 0xc8
 800a9a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c0:	2b0c      	cmp	r3, #12
 800a9c2:	d10f      	bne.n	800a9e4 <WiFi_Conn_ND+0xf98>
				{
					ConectarTCP(b);
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f7fb fc71 	bl	80062ac <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a9d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d00f      	beq.n	800aa0e <WiFi_Conn_ND+0xfc2>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f4:	2b10      	cmp	r3, #16
 800a9f6:	d00a      	beq.n	800aa0e <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_snd_err)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fe:	2b11      	cmp	r3, #17
 800aa00:	d005      	beq.n	800aa0e <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa08:	2b12      	cmp	r3, #18
 800aa0a:	f040 84e4 	bne.w	800b3d6 <WiFi_Conn_ND+0x198a>
				{
					ConectarTCP(b);
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f7fb fc4c 	bl	80062ac <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800aa2e:	f000 bcd2 	b.w	800b3d6 <WiFi_Conn_ND+0x198a>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7fb fbb6 	bl	80061a4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	d112      	bne.n	800aa68 <WiFi_Conn_ND+0x101c>
					{
						Cambiar_CWMODE(b);
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f7fb fbc4 	bl	80061d0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2264      	movs	r2, #100	; 0x64
 800aa4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6e:	2b0a      	cmp	r3, #10
 800aa70:	d009      	beq.n	800aa86 <WiFi_Conn_ND+0x103a>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa78:	2b0d      	cmp	r3, #13
 800aa7a:	d004      	beq.n	800aa86 <WiFi_Conn_ND+0x103a>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	d10e      	bne.n	800aaa4 <WiFi_Conn_ND+0x1058>
					{
						ConectarWIFI(b);
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7fb fbb8 	bl	80061fc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	22c8      	movs	r2, #200	; 0xc8
 800aa90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d00e      	beq.n	800aacc <WiFi_Conn_ND+0x1080>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab4:	2b0b      	cmp	r3, #11
 800aab6:	d009      	beq.n	800aacc <WiFi_Conn_ND+0x1080>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabe:	2b0c      	cmp	r3, #12
 800aac0:	d004      	beq.n	800aacc <WiFi_Conn_ND+0x1080>
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac8:	2b10      	cmp	r3, #16
 800aaca:	d10f      	bne.n	800aaec <WiFi_Conn_ND+0x10a0>
					{
						ConectarTCP(b);
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f7fb fbed 	bl	80062ac <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800aaec:	20c8      	movs	r0, #200	; 0xc8
 800aaee:	f7f7 fe3f 	bl	8002770 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d916      	bls.n	800ab2a <WiFi_Conn_ND+0x10de>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d011      	beq.n	800ab2a <WiFi_Conn_ND+0x10de>
					{
							EnviarDatos(b);
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7fb fc12 	bl	8006330 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ab12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800ab26:	f000 bc69 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
							b->_estado_conexion=TCP_CONN_OK;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f240 2261 	movw	r2, #609	; 0x261
 800ab30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800ab44:	f000 bc5a 	b.w	800b3fc <WiFi_Conn_ND+0x19b0>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800ab52:	d045      	beq.n	800abe0 <WiFi_Conn_ND+0x1194>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d040      	beq.n	800abe0 <WiFi_Conn_ND+0x1194>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab64:	2b0a      	cmp	r3, #10
 800ab66:	d03b      	beq.n	800abe0 <WiFi_Conn_ND+0x1194>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6e:	2b15      	cmp	r3, #21
 800ab70:	d036      	beq.n	800abe0 <WiFi_Conn_ND+0x1194>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab78:	2b16      	cmp	r3, #22
 800ab7a:	d031      	beq.n	800abe0 <WiFi_Conn_ND+0x1194>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab82:	2b17      	cmp	r3, #23
 800ab84:	d02c      	beq.n	800abe0 <WiFi_Conn_ND+0x1194>
							{
								CrearServidorTCP(b);
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7fb fba6 	bl	80062d8 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d124      	bne.n	800abe0 <WiFi_Conn_ND+0x1194>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f7fb fcb0 	bl	80064fc <AT_ESP8266_ND>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d109      	bne.n	800abca <WiFi_Conn_ND+0x117e>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800abc2:	4619      	mov	r1, r3
 800abc4:	4610      	mov	r0, r2
 800abc6:	f7f6 fba1 	bl	800130c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	2364      	movs	r3, #100	; 0x64
 800abda:	68b8      	ldr	r0, [r7, #8]
 800abdc:	f7fa fa7c 	bl	80050d8 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe6:	2b15      	cmp	r3, #21
 800abe8:	d004      	beq.n	800abf4 <WiFi_Conn_ND+0x11a8>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf0:	2b17      	cmp	r3, #23
 800abf2:	d104      	bne.n	800abfe <WiFi_Conn_ND+0x11b2>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f240 3229 	movw	r2, #809	; 0x329
 800abfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac04:	2b16      	cmp	r3, #22
 800ac06:	f040 83e8 	bne.w	800b3da <WiFi_Conn_ND+0x198e>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f240 3225 	movw	r2, #805	; 0x325
 800ac10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800ac14:	e3e1      	b.n	800b3da <WiFi_Conn_ND+0x198e>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f7fb fac4 	bl	80061a4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d112      	bne.n	800ac4c <WiFi_Conn_ND+0x1200>
							{
								Cambiar_CWMODE(b);
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f7fb fad2 	bl	80061d0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2264      	movs	r2, #100	; 0x64
 800ac30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac52:	2b0a      	cmp	r3, #10
 800ac54:	d009      	beq.n	800ac6a <WiFi_Conn_ND+0x121e>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5c:	2b0d      	cmp	r3, #13
 800ac5e:	d004      	beq.n	800ac6a <WiFi_Conn_ND+0x121e>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d10e      	bne.n	800ac88 <WiFi_Conn_ND+0x123c>
							{
								ConectarWIFI(b);
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f7fb fac6 	bl	80061fc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	22c8      	movs	r2, #200	; 0xc8
 800ac74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d005      	beq.n	800ac9e <WiFi_Conn_ND+0x1252>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac98:	2b10      	cmp	r3, #16
 800ac9a:	f040 83a0 	bne.w	800b3de <WiFi_Conn_ND+0x1992>
							{
								ConectarTCP(b);
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f7fb fb04 	bl	80062ac <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800acaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800acbe:	e38e      	b.n	800b3de <WiFi_Conn_ND+0x1992>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7fb fa6f 	bl	80061a4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800accc:	2b04      	cmp	r3, #4
 800acce:	d112      	bne.n	800acf6 <WiFi_Conn_ND+0x12aa>
							{
								Cambiar_CWMODE(b);
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f7fb fa7d 	bl	80061d0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2264      	movs	r2, #100	; 0x64
 800acda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acfc:	2b0a      	cmp	r3, #10
 800acfe:	d009      	beq.n	800ad14 <WiFi_Conn_ND+0x12c8>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad06:	2b0d      	cmp	r3, #13
 800ad08:	d004      	beq.n	800ad14 <WiFi_Conn_ND+0x12c8>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	d10e      	bne.n	800ad32 <WiFi_Conn_ND+0x12e6>
							{
								ConectarWIFI(b);
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f7fb fa71 	bl	80061fc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	22c8      	movs	r2, #200	; 0xc8
 800ad1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d005      	beq.n	800ad48 <WiFi_Conn_ND+0x12fc>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad42:	2b10      	cmp	r3, #16
 800ad44:	f040 834d 	bne.w	800b3e2 <WiFi_Conn_ND+0x1996>
							{
								ConectarTCP(b);
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f7fb faaf 	bl	80062ac <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ad68:	e33b      	b.n	800b3e2 <WiFi_Conn_ND+0x1996>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f7fb fa1a 	bl	80061a4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad76:	2b04      	cmp	r3, #4
 800ad78:	d112      	bne.n	800ada0 <WiFi_Conn_ND+0x1354>
							{
								Cambiar_CWMODE(b);
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7fb fa28 	bl	80061d0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2264      	movs	r2, #100	; 0x64
 800ad84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada6:	2b0a      	cmp	r3, #10
 800ada8:	d009      	beq.n	800adbe <WiFi_Conn_ND+0x1372>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb0:	2b0d      	cmp	r3, #13
 800adb2:	d004      	beq.n	800adbe <WiFi_Conn_ND+0x1372>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d10e      	bne.n	800addc <WiFi_Conn_ND+0x1390>
							{
								ConectarWIFI(b);
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f7fb fa1c 	bl	80061fc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	22c8      	movs	r2, #200	; 0xc8
 800adc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d005      	beq.n	800adf2 <WiFi_Conn_ND+0x13a6>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adec:	2b10      	cmp	r3, #16
 800adee:	f040 82fa 	bne.w	800b3e6 <WiFi_Conn_ND+0x199a>
							{
								ConectarTCP(b);
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7fb fa5a 	bl	80062ac <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f44f 7216 	mov.w	r2, #600	; 0x258
 800adfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ae12:	e2e8      	b.n	800b3e6 <WiFi_Conn_ND+0x199a>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7fb f9c5 	bl	80061a4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae20:	2b04      	cmp	r3, #4
 800ae22:	d112      	bne.n	800ae4a <WiFi_Conn_ND+0x13fe>
							{
								Cambiar_CWMODE(b);
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f7fb f9d3 	bl	80061d0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2264      	movs	r2, #100	; 0x64
 800ae2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae50:	2b0a      	cmp	r3, #10
 800ae52:	d009      	beq.n	800ae68 <WiFi_Conn_ND+0x141c>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae5a:	2b0d      	cmp	r3, #13
 800ae5c:	d004      	beq.n	800ae68 <WiFi_Conn_ND+0x141c>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d10e      	bne.n	800ae86 <WiFi_Conn_ND+0x143a>
							{
								ConectarWIFI(b);
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7fb f9c7 	bl	80061fc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	22c8      	movs	r2, #200	; 0xc8
 800ae72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d005      	beq.n	800ae9c <WiFi_Conn_ND+0x1450>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae96:	2b10      	cmp	r3, #16
 800ae98:	f040 82a7 	bne.w	800b3ea <WiFi_Conn_ND+0x199e>
							{
								ConectarTCP(b);
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f7fb fa05 	bl	80062ac <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800aebc:	e295      	b.n	800b3ea <WiFi_Conn_ND+0x199e>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7fb f970 	bl	80061a4 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d112      	bne.n	800aefc <WiFi_Conn_ND+0x14b0>
								{
									Cambiar_CWMODE(b);
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7fb f97a 	bl	80061d0 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2264      	movs	r2, #100	; 0x64
 800aee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af02:	2b0a      	cmp	r3, #10
 800af04:	d009      	beq.n	800af1a <WiFi_Conn_ND+0x14ce>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af0c:	2b0d      	cmp	r3, #13
 800af0e:	d004      	beq.n	800af1a <WiFi_Conn_ND+0x14ce>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af16:	2b03      	cmp	r3, #3
 800af18:	d10e      	bne.n	800af38 <WiFi_Conn_ND+0x14ec>
								{
									ConectarWIFI(b);
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7fb f96e 	bl	80061fc <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	22c8      	movs	r2, #200	; 0xc8
 800af24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d004      	beq.n	800af4c <WiFi_Conn_ND+0x1500>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af48:	2b10      	cmp	r3, #16
 800af4a:	d10f      	bne.n	800af6c <WiFi_Conn_ND+0x1520>
								{
									ConectarTCP(b);
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f7fb f9ad 	bl	80062ac <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800af72:	2b01      	cmp	r3, #1
 800af74:	f040 823b 	bne.w	800b3ee <WiFi_Conn_ND+0x19a2>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 8235 	beq.w	800b3ee <WiFi_Conn_ND+0x19a2>
								{
									EnviarDatosSRVR(b);
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7fb f9bd 	bl	8006304 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800af90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800afa4:	e223      	b.n	800b3ee <WiFi_Conn_ND+0x19a2>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afac:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800afb0:	d063      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d05e      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_disconnect)&&
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800afc2:	2b0a      	cmp	r3, #10
 800afc4:	d059      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_connected)&&
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800afcc:	2b0b      	cmp	r3, #11
 800afce:	d054      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_gotip)&&
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800afd6:	2b0c      	cmp	r3, #12
 800afd8:	d04f      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_desconectado)&&
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800afe0:	2b10      	cmp	r3, #16
 800afe2:	d04a      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_snd_err)&&
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800afea:	2b11      	cmp	r3, #17
 800afec:	d045      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800aff4:	2b12      	cmp	r3, #18
 800aff6:	d040      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800affe:	2b13      	cmp	r3, #19
 800b000:	d03b      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b008:	2b16      	cmp	r3, #22
 800b00a:	d036      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b012:	2b19      	cmp	r3, #25
 800b014:	d031      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d02c      	beq.n	800b07a <WiFi_Conn_ND+0x162e>
								{
								EnviarDatosSRVR(b);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7fb f96f 	bl	8006304 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d124      	bne.n	800b07a <WiFi_Conn_ND+0x162e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7fb fa63 	bl	80064fc <AT_ESP8266_ND>
 800b036:	4602      	mov	r2, r0
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d109      	bne.n	800b064 <WiFi_Conn_ND+0x1618>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b05c:	4619      	mov	r1, r3
 800b05e:	4610      	mov	r0, r2
 800b060:	f7f6 f954 	bl	800130c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b070:	b29a      	uxth	r2, r3
 800b072:	2364      	movs	r3, #100	; 0x64
 800b074:	68b8      	ldr	r0, [r7, #8]
 800b076:	f7fa f82f 	bl	80050d8 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b080:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b084:	d154      	bne.n	800b130 <WiFi_Conn_ND+0x16e4>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d14f      	bne.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_error)&&
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b096:	2b02      	cmp	r3, #2
 800b098:	d04a      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_disconnect)&&
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b0a0:	2b0a      	cmp	r3, #10
 800b0a2:	d045      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_connected)&&
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b0aa:	2b0b      	cmp	r3, #11
 800b0ac:	d040      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_gotip)&&
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b0b4:	2b0c      	cmp	r3, #12
 800b0b6:	d03b      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_desconectado)&&
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b0be:	2b10      	cmp	r3, #16
 800b0c0:	d036      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_snd_err)&&
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b0c8:	2b11      	cmp	r3, #17
 800b0ca:	d031      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b0d2:	2b12      	cmp	r3, #18
 800b0d4:	d02c      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b0dc:	2b13      	cmp	r3, #19
 800b0de:	d027      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b0e6:	2b16      	cmp	r3, #22
 800b0e8:	d022      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f0:	2b19      	cmp	r3, #25
 800b0f2:	d01d      	beq.n	800b130 <WiFi_Conn_ND+0x16e4>
										{
											b->_enviaruart=0;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b102:	2b01      	cmp	r3, #1
 800b104:	d109      	bne.n	800b11a <WiFi_Conn_ND+0x16ce>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b112:	4619      	mov	r1, r3
 800b114:	4610      	mov	r0, r2
 800b116:	f7f6 f8f9 	bl	800130c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b126:	b29a      	uxth	r2, r3
 800b128:	2364      	movs	r3, #100	; 0x64
 800b12a:	68b8      	ldr	r0, [r7, #8]
 800b12c:	f7f9 ffd4 	bl	80050d8 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b136:	2b13      	cmp	r3, #19
 800b138:	d104      	bne.n	800b144 <WiFi_Conn_ND+0x16f8>
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f240 328d 	movw	r2, #909	; 0x38d
 800b140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d02d      	beq.n	800b1aa <WiFi_Conn_ND+0x175e>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b154:	2b04      	cmp	r3, #4
 800b156:	d028      	beq.n	800b1aa <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b15e:	2b0a      	cmp	r3, #10
 800b160:	d023      	beq.n	800b1aa <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b168:	2b0b      	cmp	r3, #11
 800b16a:	d01e      	beq.n	800b1aa <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b172:	2b0c      	cmp	r3, #12
 800b174:	d019      	beq.n	800b1aa <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17c:	2b10      	cmp	r3, #16
 800b17e:	d014      	beq.n	800b1aa <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b186:	2b11      	cmp	r3, #17
 800b188:	d00f      	beq.n	800b1aa <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b190:	2b12      	cmp	r3, #18
 800b192:	d00a      	beq.n	800b1aa <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b19a:	2b16      	cmp	r3, #22
 800b19c:	d005      	beq.n	800b1aa <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a4:	2b19      	cmp	r3, #25
 800b1a6:	f040 8124 	bne.w	800b3f2 <WiFi_Conn_ND+0x19a6>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f240 3289 	movw	r2, #905	; 0x389
 800b1b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b1b4:	e11d      	b.n	800b3f2 <WiFi_Conn_ND+0x19a6>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7fa fff4 	bl	80061a4 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	d009      	beq.n	800b1da <WiFi_Conn_ND+0x178e>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1cc:	2b0b      	cmp	r3, #11
 800b1ce:	d004      	beq.n	800b1da <WiFi_Conn_ND+0x178e>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d6:	2b0c      	cmp	r3, #12
 800b1d8:	d112      	bne.n	800b200 <WiFi_Conn_ND+0x17b4>
							{
								Cambiar_CWMODE(b);
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f7fa fff8 	bl	80061d0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2264      	movs	r2, #100	; 0x64
 800b1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b206:	2b0a      	cmp	r3, #10
 800b208:	d009      	beq.n	800b21e <WiFi_Conn_ND+0x17d2>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b210:	2b0d      	cmp	r3, #13
 800b212:	d004      	beq.n	800b21e <WiFi_Conn_ND+0x17d2>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	d10e      	bne.n	800b23c <WiFi_Conn_ND+0x17f0>
							{
								ConectarWIFI(b);
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7fa ffec 	bl	80061fc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	22c8      	movs	r2, #200	; 0xc8
 800b228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b242:	2b16      	cmp	r3, #22
 800b244:	d10c      	bne.n	800b260 <WiFi_Conn_ND+0x1814>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f240 3225 	movw	r2, #805	; 0x325
 800b24c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b266:	2b18      	cmp	r3, #24
 800b268:	d10c      	bne.n	800b284 <WiFi_Conn_ND+0x1838>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f240 3229 	movw	r2, #809	; 0x329
 800b270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b28a:	2b19      	cmp	r3, #25
 800b28c:	d008      	beq.n	800b2a0 <WiFi_Conn_ND+0x1854>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b294:	2b11      	cmp	r3, #17
 800b296:	d003      	beq.n	800b2a0 <WiFi_Conn_ND+0x1854>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2212      	movs	r2, #18
 800b29c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	f040 80a5 	bne.w	800b3f6 <WiFi_Conn_ND+0x19aa>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b2b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b2c6:	e096      	b.n	800b3f6 <WiFi_Conn_ND+0x19aa>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f7fa ff6b 	bl	80061a4 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	d009      	beq.n	800b2ec <WiFi_Conn_ND+0x18a0>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2de:	2b0b      	cmp	r3, #11
 800b2e0:	d004      	beq.n	800b2ec <WiFi_Conn_ND+0x18a0>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e8:	2b0c      	cmp	r3, #12
 800b2ea:	d112      	bne.n	800b312 <WiFi_Conn_ND+0x18c6>
								{
									Cambiar_CWMODE(b);
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f7fa ff6f 	bl	80061d0 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2264      	movs	r2, #100	; 0x64
 800b2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b318:	2b0a      	cmp	r3, #10
 800b31a:	d009      	beq.n	800b330 <WiFi_Conn_ND+0x18e4>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b322:	2b0d      	cmp	r3, #13
 800b324:	d004      	beq.n	800b330 <WiFi_Conn_ND+0x18e4>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d10e      	bne.n	800b34e <WiFi_Conn_ND+0x1902>
								{
									ConectarWIFI(b);
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f7fa ff63 	bl	80061fc <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	22c8      	movs	r2, #200	; 0xc8
 800b33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b354:	2b01      	cmp	r3, #1
 800b356:	d004      	beq.n	800b362 <WiFi_Conn_ND+0x1916>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d14b      	bne.n	800b3fa <WiFi_Conn_ND+0x19ae>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d046      	beq.n	800b3fa <WiFi_Conn_ND+0x19ae>
								{
									EnviarDatosSRVR(b);
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f7fa ffc9 	bl	8006304 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b39c:	e02d      	b.n	800b3fa <WiFi_Conn_ND+0x19ae>
			break;
 800b39e:	bf00      	nop
 800b3a0:	e02c      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3a2:	bf00      	nop
 800b3a4:	e02a      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3a6:	bf00      	nop
 800b3a8:	e028      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3aa:	bf00      	nop
 800b3ac:	e026      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3ae:	bf00      	nop
 800b3b0:	e024      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3b2:	bf00      	nop
 800b3b4:	e022      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3b6:	bf00      	nop
 800b3b8:	e020      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3ba:	bf00      	nop
 800b3bc:	e01e      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3be:	bf00      	nop
 800b3c0:	e01c      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3c2:	bf00      	nop
 800b3c4:	e01a      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3c6:	bf00      	nop
 800b3c8:	e018      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3ca:	bf00      	nop
 800b3cc:	e016      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3ce:	bf00      	nop
 800b3d0:	e014      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3d2:	bf00      	nop
 800b3d4:	e012      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
			break;
 800b3d6:	bf00      	nop
 800b3d8:	e010      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
						break;
 800b3da:	bf00      	nop
 800b3dc:	e00e      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
						break;
 800b3de:	bf00      	nop
 800b3e0:	e00c      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
						break;
 800b3e2:	bf00      	nop
 800b3e4:	e00a      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
						break;
 800b3e6:	bf00      	nop
 800b3e8:	e008      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
						break;
 800b3ea:	bf00      	nop
 800b3ec:	e006      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
						break;
 800b3ee:	bf00      	nop
 800b3f0:	e004      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
						break;
 800b3f2:	bf00      	nop
 800b3f4:	e002      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
						break;
 800b3f6:	bf00      	nop
 800b3f8:	e000      	b.n	800b3fc <WiFi_Conn_ND+0x19b0>
						break;
 800b3fa:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop

0800b40c <httpPOST>:

char deviceId[]={',','"','d','e','v','I','d','"',':','\0'};


httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b40c:	b5b0      	push	{r4, r5, r7, lr}
 800b40e:	b0a8      	sub	sp, #160	; 0xa0
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b41a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b426:	2200      	movs	r2, #0
 800b428:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b42a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b42e:	f7f4 fee1 	bl	80001f4 <strlen>
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b43a:	4413      	add	r3, r2
 800b43c:	4aed      	ldr	r2, [pc, #948]	; (800b7f4 <httpPOST+0x3e8>)
 800b43e:	6810      	ldr	r0, [r2, #0]
 800b440:	6018      	str	r0, [r3, #0]
 800b442:	8892      	ldrh	r2, [r2, #4]
 800b444:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7f4 fed4 	bl	80001f4 <strlen>
 800b44c:	4603      	mov	r3, r0
 800b44e:	461a      	mov	r2, r3
 800b450:	68f9      	ldr	r1, [r7, #12]
 800b452:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b456:	f003 f83e 	bl	800e4d6 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b45a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b45e:	f7f4 fec9 	bl	80001f4 <strlen>
 800b462:	4603      	mov	r3, r0
 800b464:	461a      	mov	r2, r3
 800b466:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b46a:	4413      	add	r3, r2
 800b46c:	49e2      	ldr	r1, [pc, #904]	; (800b7f8 <httpPOST+0x3ec>)
 800b46e:	461a      	mov	r2, r3
 800b470:	460b      	mov	r3, r1
 800b472:	cb03      	ldmia	r3!, {r0, r1}
 800b474:	6010      	str	r0, [r2, #0]
 800b476:	6051      	str	r1, [r2, #4]
 800b478:	8819      	ldrh	r1, [r3, #0]
 800b47a:	789b      	ldrb	r3, [r3, #2]
 800b47c:	8111      	strh	r1, [r2, #8]
 800b47e:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b480:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b484:	f7f4 feb6 	bl	80001f4 <strlen>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b490:	4413      	add	r3, r2
 800b492:	4ada      	ldr	r2, [pc, #872]	; (800b7fc <httpPOST+0x3f0>)
 800b494:	8811      	ldrh	r1, [r2, #0]
 800b496:	7892      	ldrb	r2, [r2, #2]
 800b498:	8019      	strh	r1, [r3, #0]
 800b49a:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b49c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4a0:	f7f4 fea8 	bl	80001f4 <strlen>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4ac:	4413      	add	r3, r2
 800b4ae:	4ad4      	ldr	r2, [pc, #848]	; (800b800 <httpPOST+0x3f4>)
 800b4b0:	6810      	ldr	r0, [r2, #0]
 800b4b2:	6018      	str	r0, [r3, #0]
 800b4b4:	8891      	ldrh	r1, [r2, #4]
 800b4b6:	7992      	ldrb	r2, [r2, #6]
 800b4b8:	8099      	strh	r1, [r3, #4]
 800b4ba:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b4bc:	68b8      	ldr	r0, [r7, #8]
 800b4be:	f7f4 fe99 	bl	80001f4 <strlen>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4cc:	f003 f803 	bl	800e4d6 <strncat>
	strncat(post,":",1);
 800b4d0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4d4:	f7f4 fe8e 	bl	80001f4 <strlen>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4e0:	4413      	add	r3, r2
 800b4e2:	49c8      	ldr	r1, [pc, #800]	; (800b804 <httpPOST+0x3f8>)
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7f4 fe81 	bl	80001f4 <strlen>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4fc:	f002 ffeb 	bl	800e4d6 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b500:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b504:	f7f4 fe76 	bl	80001f4 <strlen>
 800b508:	4603      	mov	r3, r0
 800b50a:	461a      	mov	r2, r3
 800b50c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b510:	4413      	add	r3, r2
 800b512:	4aba      	ldr	r2, [pc, #744]	; (800b7fc <httpPOST+0x3f0>)
 800b514:	8811      	ldrh	r1, [r2, #0]
 800b516:	7892      	ldrb	r2, [r2, #2]
 800b518:	8019      	strh	r1, [r3, #0]
 800b51a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b51c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b520:	f7f4 fe68 	bl	80001f4 <strlen>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b52c:	4413      	add	r3, r2
 800b52e:	4ab6      	ldr	r2, [pc, #728]	; (800b808 <httpPOST+0x3fc>)
 800b530:	461d      	mov	r5, r3
 800b532:	4614      	mov	r4, r2
 800b534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b536:	6028      	str	r0, [r5, #0]
 800b538:	6069      	str	r1, [r5, #4]
 800b53a:	60aa      	str	r2, [r5, #8]
 800b53c:	60eb      	str	r3, [r5, #12]
 800b53e:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b540:	6128      	str	r0, [r5, #16]
 800b542:	6169      	str	r1, [r5, #20]
 800b544:	61aa      	str	r2, [r5, #24]
 800b546:	8823      	ldrh	r3, [r4, #0]
 800b548:	78a2      	ldrb	r2, [r4, #2]
 800b54a:	83ab      	strh	r3, [r5, #28]
 800b54c:	4613      	mov	r3, r2
 800b54e:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b550:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b554:	f7f4 fe4e 	bl	80001f4 <strlen>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b560:	4413      	add	r3, r2
 800b562:	4aa6      	ldr	r2, [pc, #664]	; (800b7fc <httpPOST+0x3f0>)
 800b564:	8811      	ldrh	r1, [r2, #0]
 800b566:	7892      	ldrb	r2, [r2, #2]
 800b568:	8019      	strh	r1, [r3, #0]
 800b56a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b56c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b570:	f7f4 fe40 	bl	80001f4 <strlen>
 800b574:	4603      	mov	r3, r0
 800b576:	461a      	mov	r2, r3
 800b578:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b57c:	4413      	add	r3, r2
 800b57e:	4aa3      	ldr	r2, [pc, #652]	; (800b80c <httpPOST+0x400>)
 800b580:	461c      	mov	r4, r3
 800b582:	4615      	mov	r5, r2
 800b584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b586:	6020      	str	r0, [r4, #0]
 800b588:	6061      	str	r1, [r4, #4]
 800b58a:	60a2      	str	r2, [r4, #8]
 800b58c:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b58e:	2300      	movs	r3, #0
 800b590:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800b594:	887b      	ldrh	r3, [r7, #2]
 800b596:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b59a:	4611      	mov	r1, r2
 800b59c:	4618      	mov	r0, r3
 800b59e:	f002 fd6f 	bl	800e080 <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800b5a8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800b5ac:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f002 fd64 	bl	800e080 <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800b5be:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b5c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f002 fd59 	bl	800e080 <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800b5d4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800b5d8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f002 fd4e 	bl	800e080 <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800b5ea:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800b5ee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f002 fd43 	bl	800e080 <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800b600:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800b604:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b608:	4611      	mov	r1, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f002 fd38 	bl	800e080 <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800b610:	2300      	movs	r3, #0
 800b612:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800b616:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800b61a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b61e:	4611      	mov	r1, r2
 800b620:	4618      	mov	r0, r3
 800b622:	f002 fd2d 	bl	800e080 <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800b626:	2300      	movs	r3, #0
 800b628:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800b62c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800b630:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f002 fd22 	bl	800e080 <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800b63c:	2300      	movs	r3, #0
 800b63e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800b642:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800b646:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b64a:	4611      	mov	r1, r2
 800b64c:	4618      	mov	r0, r3
 800b64e:	f002 fd17 	bl	800e080 <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800b652:	2300      	movs	r3, #0
 800b654:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800b658:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800b65c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b660:	4611      	mov	r1, r2
 800b662:	4618      	mov	r0, r3
 800b664:	f002 fd0c 	bl	800e080 <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800b668:	2300      	movs	r3, #0
 800b66a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800b66e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800b672:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b676:	4611      	mov	r1, r2
 800b678:	4618      	mov	r0, r3
 800b67a:	f002 fd01 	bl	800e080 <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800b67e:	2300      	movs	r3, #0
 800b680:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800b684:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800b688:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b68c:	4611      	mov	r1, r2
 800b68e:	4618      	mov	r0, r3
 800b690:	f002 fcf6 	bl	800e080 <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800b694:	2300      	movs	r3, #0
 800b696:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800b69a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800b69e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f002 fceb 	bl	800e080 <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800b6b0:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800b6b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f002 fce0 	bl	800e080 <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800b6c6:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800b6ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f002 fcd5 	bl	800e080 <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800b6dc:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800b6e0:	f107 0220 	add.w	r2, r7, #32
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f002 fcca 	bl	800e080 <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b6f0:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800b6f4:	f107 0218 	add.w	r2, r7, #24
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f002 fcc0 	bl	800e080 <INTOA>

	strncat(body,dd1,strlen(dd1));
 800b700:	4843      	ldr	r0, [pc, #268]	; (800b810 <httpPOST+0x404>)
 800b702:	f7f4 fd77 	bl	80001f4 <strlen>
 800b706:	4603      	mov	r3, r0
 800b708:	461a      	mov	r2, r3
 800b70a:	4941      	ldr	r1, [pc, #260]	; (800b810 <httpPOST+0x404>)
 800b70c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b710:	f002 fee1 	bl	800e4d6 <strncat>
	strncat(body,_d1,strlen(_d1));
 800b714:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b718:	4618      	mov	r0, r3
 800b71a:	f7f4 fd6b 	bl	80001f4 <strlen>
 800b71e:	4602      	mov	r2, r0
 800b720:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b724:	4619      	mov	r1, r3
 800b726:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b72a:	f002 fed4 	bl	800e4d6 <strncat>

	strncat(body,dd2,strlen(dd2));
 800b72e:	4839      	ldr	r0, [pc, #228]	; (800b814 <httpPOST+0x408>)
 800b730:	f7f4 fd60 	bl	80001f4 <strlen>
 800b734:	4603      	mov	r3, r0
 800b736:	461a      	mov	r2, r3
 800b738:	4936      	ldr	r1, [pc, #216]	; (800b814 <httpPOST+0x408>)
 800b73a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b73e:	f002 feca 	bl	800e4d6 <strncat>
	strncat(body,_d2,strlen(_d2));
 800b742:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b746:	4618      	mov	r0, r3
 800b748:	f7f4 fd54 	bl	80001f4 <strlen>
 800b74c:	4602      	mov	r2, r0
 800b74e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b752:	4619      	mov	r1, r3
 800b754:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b758:	f002 febd 	bl	800e4d6 <strncat>

	strncat(body,dd3,strlen(dd3));
 800b75c:	482e      	ldr	r0, [pc, #184]	; (800b818 <httpPOST+0x40c>)
 800b75e:	f7f4 fd49 	bl	80001f4 <strlen>
 800b762:	4603      	mov	r3, r0
 800b764:	461a      	mov	r2, r3
 800b766:	492c      	ldr	r1, [pc, #176]	; (800b818 <httpPOST+0x40c>)
 800b768:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b76c:	f002 feb3 	bl	800e4d6 <strncat>
	strncat(body,_d3,strlen(_d3));
 800b770:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b774:	4618      	mov	r0, r3
 800b776:	f7f4 fd3d 	bl	80001f4 <strlen>
 800b77a:	4602      	mov	r2, r0
 800b77c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b780:	4619      	mov	r1, r3
 800b782:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b786:	f002 fea6 	bl	800e4d6 <strncat>

	strncat(body,dd4,strlen(dd4));
 800b78a:	4824      	ldr	r0, [pc, #144]	; (800b81c <httpPOST+0x410>)
 800b78c:	f7f4 fd32 	bl	80001f4 <strlen>
 800b790:	4603      	mov	r3, r0
 800b792:	461a      	mov	r2, r3
 800b794:	4921      	ldr	r1, [pc, #132]	; (800b81c <httpPOST+0x410>)
 800b796:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b79a:	f002 fe9c 	bl	800e4d6 <strncat>
	strncat(body,_d4,strlen(_d4));
 800b79e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7f4 fd26 	bl	80001f4 <strlen>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7b4:	f002 fe8f 	bl	800e4d6 <strncat>

	strncat(body,dd5,strlen(dd5));
 800b7b8:	4819      	ldr	r0, [pc, #100]	; (800b820 <httpPOST+0x414>)
 800b7ba:	f7f4 fd1b 	bl	80001f4 <strlen>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	4917      	ldr	r1, [pc, #92]	; (800b820 <httpPOST+0x414>)
 800b7c4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7c8:	f002 fe85 	bl	800e4d6 <strncat>
	strncat(body,_d5,strlen(_d5));
 800b7cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7f4 fd0f 	bl	80001f4 <strlen>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b7dc:	4619      	mov	r1, r3
 800b7de:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7e2:	f002 fe78 	bl	800e4d6 <strncat>

	strncat(body,dd6,strlen(dd6));
 800b7e6:	480f      	ldr	r0, [pc, #60]	; (800b824 <httpPOST+0x418>)
 800b7e8:	f7f4 fd04 	bl	80001f4 <strlen>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	e01a      	b.n	800b828 <httpPOST+0x41c>
 800b7f2:	bf00      	nop
 800b7f4:	0800fb64 	.word	0x0800fb64
 800b7f8:	0800fb6c 	.word	0x0800fb6c
 800b7fc:	0800fb78 	.word	0x0800fb78
 800b800:	0800fb7c 	.word	0x0800fb7c
 800b804:	0800fb84 	.word	0x0800fb84
 800b808:	0800fb88 	.word	0x0800fb88
 800b80c:	0800fba8 	.word	0x0800fba8
 800b810:	20000098 	.word	0x20000098
 800b814:	200000a0 	.word	0x200000a0
 800b818:	200000a8 	.word	0x200000a8
 800b81c:	200000b0 	.word	0x200000b0
 800b820:	200000b8 	.word	0x200000b8
 800b824:	200000c0 	.word	0x200000c0
 800b828:	49af      	ldr	r1, [pc, #700]	; (800bae8 <httpPOST+0x6dc>)
 800b82a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b82e:	f002 fe52 	bl	800e4d6 <strncat>
	strncat(body,_d6,strlen(_d6));
 800b832:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b836:	4618      	mov	r0, r3
 800b838:	f7f4 fcdc 	bl	80001f4 <strlen>
 800b83c:	4602      	mov	r2, r0
 800b83e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b842:	4619      	mov	r1, r3
 800b844:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b848:	f002 fe45 	bl	800e4d6 <strncat>

	strncat(body,dd7,strlen(dd7));
 800b84c:	48a7      	ldr	r0, [pc, #668]	; (800baec <httpPOST+0x6e0>)
 800b84e:	f7f4 fcd1 	bl	80001f4 <strlen>
 800b852:	4603      	mov	r3, r0
 800b854:	461a      	mov	r2, r3
 800b856:	49a5      	ldr	r1, [pc, #660]	; (800baec <httpPOST+0x6e0>)
 800b858:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b85c:	f002 fe3b 	bl	800e4d6 <strncat>
	strncat(body,_d7,strlen(_d7));
 800b860:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b864:	4618      	mov	r0, r3
 800b866:	f7f4 fcc5 	bl	80001f4 <strlen>
 800b86a:	4602      	mov	r2, r0
 800b86c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b870:	4619      	mov	r1, r3
 800b872:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b876:	f002 fe2e 	bl	800e4d6 <strncat>

	strncat(body,dd8,strlen(dd8));
 800b87a:	489d      	ldr	r0, [pc, #628]	; (800baf0 <httpPOST+0x6e4>)
 800b87c:	f7f4 fcba 	bl	80001f4 <strlen>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	499a      	ldr	r1, [pc, #616]	; (800baf0 <httpPOST+0x6e4>)
 800b886:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b88a:	f002 fe24 	bl	800e4d6 <strncat>
	strncat(body,_d8,strlen(_d8));
 800b88e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b892:	4618      	mov	r0, r3
 800b894:	f7f4 fcae 	bl	80001f4 <strlen>
 800b898:	4602      	mov	r2, r0
 800b89a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b89e:	4619      	mov	r1, r3
 800b8a0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8a4:	f002 fe17 	bl	800e4d6 <strncat>

	strncat(body,dd9,strlen(dd9));
 800b8a8:	4892      	ldr	r0, [pc, #584]	; (800baf4 <httpPOST+0x6e8>)
 800b8aa:	f7f4 fca3 	bl	80001f4 <strlen>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4990      	ldr	r1, [pc, #576]	; (800baf4 <httpPOST+0x6e8>)
 800b8b4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8b8:	f002 fe0d 	bl	800e4d6 <strncat>
	strncat(body,_d9,strlen(_d9));
 800b8bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7f4 fc97 	bl	80001f4 <strlen>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8d2:	f002 fe00 	bl	800e4d6 <strncat>

	strncat(body,dd10,strlen(dd10));
 800b8d6:	4888      	ldr	r0, [pc, #544]	; (800baf8 <httpPOST+0x6ec>)
 800b8d8:	f7f4 fc8c 	bl	80001f4 <strlen>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4985      	ldr	r1, [pc, #532]	; (800baf8 <httpPOST+0x6ec>)
 800b8e2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8e6:	f002 fdf6 	bl	800e4d6 <strncat>
	strncat(body,_d10,strlen(_d10));
 800b8ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7f4 fc80 	bl	80001f4 <strlen>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b900:	f002 fde9 	bl	800e4d6 <strncat>

	strncat(body,dd11,strlen(dd11));
 800b904:	487d      	ldr	r0, [pc, #500]	; (800bafc <httpPOST+0x6f0>)
 800b906:	f7f4 fc75 	bl	80001f4 <strlen>
 800b90a:	4603      	mov	r3, r0
 800b90c:	461a      	mov	r2, r3
 800b90e:	497b      	ldr	r1, [pc, #492]	; (800bafc <httpPOST+0x6f0>)
 800b910:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b914:	f002 fddf 	bl	800e4d6 <strncat>
	strncat(body,_d11,strlen(_d11));
 800b918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7f4 fc69 	bl	80001f4 <strlen>
 800b922:	4602      	mov	r2, r0
 800b924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b928:	4619      	mov	r1, r3
 800b92a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b92e:	f002 fdd2 	bl	800e4d6 <strncat>

	strncat(body,dd12,strlen(dd12));
 800b932:	4873      	ldr	r0, [pc, #460]	; (800bb00 <httpPOST+0x6f4>)
 800b934:	f7f4 fc5e 	bl	80001f4 <strlen>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	4970      	ldr	r1, [pc, #448]	; (800bb00 <httpPOST+0x6f4>)
 800b93e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b942:	f002 fdc8 	bl	800e4d6 <strncat>
	strncat(body,_d12,strlen(_d12));
 800b946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f4 fc52 	bl	80001f4 <strlen>
 800b950:	4602      	mov	r2, r0
 800b952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b956:	4619      	mov	r1, r3
 800b958:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b95c:	f002 fdbb 	bl	800e4d6 <strncat>

	strncat(body,dd13,strlen(dd13));
 800b960:	4868      	ldr	r0, [pc, #416]	; (800bb04 <httpPOST+0x6f8>)
 800b962:	f7f4 fc47 	bl	80001f4 <strlen>
 800b966:	4603      	mov	r3, r0
 800b968:	461a      	mov	r2, r3
 800b96a:	4966      	ldr	r1, [pc, #408]	; (800bb04 <httpPOST+0x6f8>)
 800b96c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b970:	f002 fdb1 	bl	800e4d6 <strncat>
	strncat(body,_d13,strlen(_d13));
 800b974:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b978:	4618      	mov	r0, r3
 800b97a:	f7f4 fc3b 	bl	80001f4 <strlen>
 800b97e:	4602      	mov	r2, r0
 800b980:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b984:	4619      	mov	r1, r3
 800b986:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b98a:	f002 fda4 	bl	800e4d6 <strncat>

	strncat(body,dd14,strlen(dd14));
 800b98e:	485e      	ldr	r0, [pc, #376]	; (800bb08 <httpPOST+0x6fc>)
 800b990:	f7f4 fc30 	bl	80001f4 <strlen>
 800b994:	4603      	mov	r3, r0
 800b996:	461a      	mov	r2, r3
 800b998:	495b      	ldr	r1, [pc, #364]	; (800bb08 <httpPOST+0x6fc>)
 800b99a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b99e:	f002 fd9a 	bl	800e4d6 <strncat>
	strncat(body,_d14,strlen(_d14));
 800b9a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7f4 fc24 	bl	80001f4 <strlen>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9b8:	f002 fd8d 	bl	800e4d6 <strncat>

	strncat(body,dd15,strlen(dd15));
 800b9bc:	4853      	ldr	r0, [pc, #332]	; (800bb0c <httpPOST+0x700>)
 800b9be:	f7f4 fc19 	bl	80001f4 <strlen>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4951      	ldr	r1, [pc, #324]	; (800bb0c <httpPOST+0x700>)
 800b9c8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9cc:	f002 fd83 	bl	800e4d6 <strncat>
	strncat(body,_d15,strlen(_d15));
 800b9d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7f4 fc0d 	bl	80001f4 <strlen>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9e6:	f002 fd76 	bl	800e4d6 <strncat>

	strncat(body,dd16,strlen(dd16));
 800b9ea:	4849      	ldr	r0, [pc, #292]	; (800bb10 <httpPOST+0x704>)
 800b9ec:	f7f4 fc02 	bl	80001f4 <strlen>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	4946      	ldr	r1, [pc, #280]	; (800bb10 <httpPOST+0x704>)
 800b9f6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9fa:	f002 fd6c 	bl	800e4d6 <strncat>
	strncat(body,_d16,strlen(_d16));
 800b9fe:	f107 0320 	add.w	r3, r7, #32
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f4 fbf6 	bl	80001f4 <strlen>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	f107 0320 	add.w	r3, r7, #32
 800ba0e:	4619      	mov	r1, r3
 800ba10:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba14:	f002 fd5f 	bl	800e4d6 <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800ba18:	483e      	ldr	r0, [pc, #248]	; (800bb14 <httpPOST+0x708>)
 800ba1a:	f7f4 fbeb 	bl	80001f4 <strlen>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	461a      	mov	r2, r3
 800ba22:	493c      	ldr	r1, [pc, #240]	; (800bb14 <httpPOST+0x708>)
 800ba24:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba28:	f002 fd55 	bl	800e4d6 <strncat>
	strncat(body,_devId,strlen(_devId));
 800ba2c:	f107 0318 	add.w	r3, r7, #24
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7f4 fbdf 	bl	80001f4 <strlen>
 800ba36:	4602      	mov	r2, r0
 800ba38:	f107 0318 	add.w	r3, r7, #24
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba42:	f002 fd48 	bl	800e4d6 <strncat>

	strncat(body,"}",strlen("}"));
 800ba46:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba4a:	f7f4 fbd3 	bl	80001f4 <strlen>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	461a      	mov	r2, r3
 800ba52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba56:	4413      	add	r3, r2
 800ba58:	492f      	ldr	r1, [pc, #188]	; (800bb18 <httpPOST+0x70c>)
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800ba62:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba66:	f7f4 fbc5 	bl	80001f4 <strlen>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	f107 0310 	add.w	r3, r7, #16
 800ba70:	4619      	mov	r1, r3
 800ba72:	4610      	mov	r0, r2
 800ba74:	f002 fb04 	bl	800e080 <INTOA>
	strncat(post,length,strlen(length));
 800ba78:	f107 0310 	add.w	r3, r7, #16
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f4 fbb9 	bl	80001f4 <strlen>
 800ba82:	4602      	mov	r2, r0
 800ba84:	f107 0310 	add.w	r3, r7, #16
 800ba88:	4619      	mov	r1, r3
 800ba8a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba8e:	f002 fd22 	bl	800e4d6 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800ba92:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba96:	f7f4 fbad 	bl	80001f4 <strlen>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800baa2:	4413      	add	r3, r2
 800baa4:	4a1d      	ldr	r2, [pc, #116]	; (800bb1c <httpPOST+0x710>)
 800baa6:	6810      	ldr	r0, [r2, #0]
 800baa8:	6018      	str	r0, [r3, #0]
 800baaa:	7912      	ldrb	r2, [r2, #4]
 800baac:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800baae:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bab2:	f7f4 fb9f 	bl	80001f4 <strlen>
 800bab6:	4602      	mov	r2, r0
 800bab8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800babc:	429a      	cmp	r2, r3
 800babe:	d20d      	bcs.n	800badc <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800bac0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bac4:	f7f4 fb96 	bl	80001f4 <strlen>
 800bac8:	4603      	mov	r3, r0
 800baca:	461a      	mov	r2, r3
 800bacc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800bad0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bad4:	f002 fcff 	bl	800e4d6 <strncat>
		return 1 ;
 800bad8:	2301      	movs	r3, #1
 800bada:	e000      	b.n	800bade <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800badc:	2300      	movs	r3, #0
		}
}
 800bade:	4618      	mov	r0, r3
 800bae0:	37a0      	adds	r7, #160	; 0xa0
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bdb0      	pop	{r4, r5, r7, pc}
 800bae6:	bf00      	nop
 800bae8:	200000c0 	.word	0x200000c0
 800baec:	200000c8 	.word	0x200000c8
 800baf0:	200000d0 	.word	0x200000d0
 800baf4:	200000d8 	.word	0x200000d8
 800baf8:	200000e0 	.word	0x200000e0
 800bafc:	200000e8 	.word	0x200000e8
 800bb00:	200000f0 	.word	0x200000f0
 800bb04:	200000f8 	.word	0x200000f8
 800bb08:	20000100 	.word	0x20000100
 800bb0c:	20000108 	.word	0x20000108
 800bb10:	20000110 	.word	0x20000110
 800bb14:	20000118 	.word	0x20000118
 800bb18:	0800fbb8 	.word	0x0800fbb8
 800bb1c:	0800fbbc 	.word	0x0800fbbc

0800bb20 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bb3a:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2220      	movs	r2, #32
 800bb46:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a1c      	ldr	r2, [pc, #112]	; (800bbc0 <ModBUS_Config+0xa0>)
 800bb4e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a18      	ldr	r2, [pc, #96]	; (800bbc4 <ModBUS_Config+0xa4>)
 800bb64:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2210      	movs	r2, #16
 800bb72:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2210      	movs	r2, #16
 800bb80:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2220      	movs	r2, #32
 800bb8e:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2220      	movs	r2, #32
 800bba2:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	f0f0af5a 	.word	0xf0f0af5a
 800bbc4:	a5fa0f0f 	.word	0xa5fa0f0f

0800bbc8 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	3305      	adds	r3, #5
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	3306      	adds	r3, #6
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d10b      	bne.n	800bbf8 <ModBUS_Check+0x30>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3302      	adds	r3, #2
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3303      	adds	r3, #3
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	4413      	add	r3, r2
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <ModBUS_Check+0x30>
	{
		return(1);
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e000      	b.n	800bbfa <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800bbf8:	2300      	movs	r3, #0
	}
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7c9b      	ldrb	r3, [r3, #18]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d11d      	bne.n	800bc58 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d116      	bne.n	800bc58 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d10f      	bne.n	800bc58 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d108      	bne.n	800bc58 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d101      	bne.n	800bc58 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800bc54:	2301      	movs	r3, #1
 800bc56:	e000      	b.n	800bc5a <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800bc58:	2300      	movs	r3, #0
	}
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b085      	sub	sp, #20
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	70fb      	strb	r3, [r7, #3]
 800bc72:	4613      	mov	r3, r2
 800bc74:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bc80:	78fa      	ldrb	r2, [r7, #3]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d901      	bls.n	800bc8a <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800bc86:	2301      	movs	r3, #1
 800bc88:	e013      	b.n	800bcb2 <ModBUS_F03_Assign+0x4c>
	}
	else
	{
		m2->_Holding_Registers[(address)+1]=data;
 800bc8a:	78fb      	ldrb	r3, [r7, #3]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	883a      	ldrh	r2, [r7, #0]
 800bc90:	b2d1      	uxtb	r1, r2
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	4413      	add	r3, r2
 800bc96:	460a      	mov	r2, r1
 800bc98:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800bc9c:	883b      	ldrh	r3, [r7, #0]
 800bc9e:	0a1b      	lsrs	r3, r3, #8
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800bca4:	78fb      	ldrb	r3, [r7, #3]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	7bfa      	ldrb	r2, [r7, #15]
 800bcac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800bcb0:	2300      	movs	r3, #0
	}
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b085      	sub	sp, #20
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bcd8:	78fa      	ldrb	r2, [r7, #3]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d901      	bls.n	800bce2 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800bcde:	2301      	movs	r3, #1
 800bce0:	e015      	b.n	800bd0e <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(address*2)];
 800bce2:	78fb      	ldrb	r3, [r7, #3]
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	4413      	add	r3, r2
 800bcea:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bcee:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800bcf0:	89fb      	ldrh	r3, [r7, #14]
 800bcf2:	021b      	lsls	r3, r3, #8
 800bcf4:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address*2)+1];
 800bcf6:	78fb      	ldrb	r3, [r7, #3]
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	4413      	add	r3, r2
 800bd00:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	89fb      	ldrh	r3, [r7, #14]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	81fb      	strh	r3, [r7, #14]
		return(n);
 800bd0c:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	460b      	mov	r3, r1
 800bd24:	807b      	strh	r3, [r7, #2]
 800bd26:	4613      	mov	r3, r2
 800bd28:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800bd2a:	887b      	ldrh	r3, [r7, #2]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	bf14      	ite	ne
 800bd30:	2301      	movne	r3, #1
 800bd32:	2300      	moveq	r3, #0
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	461a      	mov	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800bd3e:	887b      	ldrh	r3, [r7, #2]
 800bd40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd44:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800bd46:	887b      	ldrh	r3, [r7, #2]
 800bd48:	0a1b      	lsrs	r3, r3, #8
 800bd4a:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800bd4c:	887b      	ldrh	r3, [r7, #2]
 800bd4e:	f003 030f 	and.w	r3, r3, #15
 800bd52:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2206      	movs	r2, #6
 800bd80:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	781a      	ldrb	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2203      	movs	r2, #3
 800bd92:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800bd96:	887b      	ldrh	r3, [r7, #2]
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	787a      	ldrb	r2, [r7, #1]
 800bdac:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	220c      	movs	r2, #12
 800bdb4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800bdb8:	bf00      	nop
 800bdba:	4618      	mov	r0, r3
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
	...

0800bdc8 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b09c      	sub	sp, #112	; 0x70
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	791b      	ldrb	r3, [r3, #4]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	f041 813f 	bne.w	800d058 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f103 0212 	add.w	r2, r3, #18
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bde6:	4619      	mov	r1, r3
 800bde8:	4610      	mov	r0, r2
 800bdea:	f7ff feed 	bl	800bbc8 <ModBUS_Check>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f001 812f 	beq.w	800d054 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	7e5b      	ldrb	r3, [r3, #25]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	2b0f      	cmp	r3, #15
 800bdfe:	f201 80f3 	bhi.w	800cfe8 <ModBUS+0x1220>
 800be02:	a201      	add	r2, pc, #4	; (adr r2, 800be08 <ModBUS+0x40>)
 800be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be08:	0800be49 	.word	0x0800be49
 800be0c:	0800c089 	.word	0x0800c089
 800be10:	0800c2c9 	.word	0x0800c2c9
 800be14:	0800c501 	.word	0x0800c501
 800be18:	0800c739 	.word	0x0800c739
 800be1c:	0800c94f 	.word	0x0800c94f
 800be20:	0800cfe9 	.word	0x0800cfe9
 800be24:	0800cfe9 	.word	0x0800cfe9
 800be28:	0800cfe9 	.word	0x0800cfe9
 800be2c:	0800cfe9 	.word	0x0800cfe9
 800be30:	0800cfe9 	.word	0x0800cfe9
 800be34:	0800cfe9 	.word	0x0800cfe9
 800be38:	0800cfe9 	.word	0x0800cfe9
 800be3c:	0800cfe9 	.word	0x0800cfe9
 800be40:	0800cb0b 	.word	0x0800cb0b
 800be44:	0800cd9b 	.word	0x0800cd9b

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	7d9a      	ldrb	r2, [r3, #22]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	7d5a      	ldrb	r2, [r3, #21]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	7d1a      	ldrb	r2, [r3, #20]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	7cda      	ldrb	r2, [r3, #19]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	7c9a      	ldrb	r2, [r3, #18]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800be7a:	2300      	movs	r3, #0
 800be7c:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	7a9b      	ldrb	r3, [r3, #10]
 800be82:	2b01      	cmp	r3, #1
 800be84:	f040 80e6 	bne.w	800c054 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	7e9b      	ldrb	r3, [r3, #26]
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800be9a:	021b      	lsls	r3, r3, #8
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800beaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800beae:	b29a      	uxth	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	7edb      	ldrb	r3, [r3, #27]
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	4313      	orrs	r3, r2
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	7f1b      	ldrb	r3, [r3, #28]
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bede:	021b      	lsls	r3, r3, #8
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800beee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7f5b      	ldrb	r3, [r3, #29]
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	4313      	orrs	r3, r2
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d87e      	bhi.n	800c020 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bf28:	461a      	mov	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bf30:	4413      	add	r3, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	dc57      	bgt.n	800bfec <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	613b      	str	r3, [r7, #16]
 800bf40:	2300      	movs	r3, #0
 800bf42:	60fb      	str	r3, [r7, #12]
 800bf44:	2300      	movs	r3, #0
 800bf46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800bf5c:	40d3      	lsrs	r3, r2
 800bf5e:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bf66:	08db      	lsrs	r3, r3, #3
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bf72:	f003 0307 	and.w	r3, r3, #7
 800bf76:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d102      	bne.n	800bf84 <ModBUS+0x1bc>
									{
										bytes=div;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf82:	e002      	b.n	800bf8a <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	3301      	adds	r3, #1
 800bf88:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800bf8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800bf94:	e00e      	b.n	800bfb4 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bf96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf98:	3308      	adds	r3, #8
 800bf9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf9c:	b2d1      	uxtb	r1, r2
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	460a      	mov	r2, r1
 800bfa4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800bfa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfaa:	0a1b      	lsrs	r3, r3, #8
 800bfac:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800bfae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800bfb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	dced      	bgt.n	800bf96 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bfd0:	3303      	adds	r3, #3
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bfe0:	1d9a      	adds	r2, r3, #6
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bfe8:	f001 b8d4 	b.w	800d194 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2202      	movs	r2, #2
 800bff0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2281      	movs	r2, #129	; 0x81
 800bff8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2203      	movs	r2, #3
 800c008:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c012:	1d9a      	adds	r2, r3, #6
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c01a:	2302      	movs	r3, #2
 800c01c:	f001 b8ba 	b.w	800d194 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2203      	movs	r2, #3
 800c024:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2281      	movs	r2, #129	; 0x81
 800c02c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2203      	movs	r2, #3
 800c03c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c046:	1d9a      	adds	r2, r3, #6
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c04e:	2303      	movs	r3, #3
 800c050:	f001 b8a0 	b.w	800d194 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2281      	movs	r2, #129	; 0x81
 800c060:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2203      	movs	r2, #3
 800c070:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c07a:	1d9a      	adds	r2, r3, #6
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c082:	2301      	movs	r3, #1
 800c084:	f001 b886 	b.w	800d194 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7d9a      	ldrb	r2, [r3, #22]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	7d5a      	ldrb	r2, [r3, #21]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	7d1a      	ldrb	r2, [r3, #20]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	7cda      	ldrb	r2, [r3, #19]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	7c9a      	ldrb	r2, [r3, #18]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	7adb      	ldrb	r3, [r3, #11]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	f040 80e6 	bne.w	800c294 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	7e9b      	ldrb	r3, [r3, #26]
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c0da:	021b      	lsls	r3, r3, #8
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c0ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	7edb      	ldrb	r3, [r3, #27]
 800c100:	b29b      	uxth	r3, r3
 800c102:	4313      	orrs	r3, r2
 800c104:	b29a      	uxth	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	7f1b      	ldrb	r3, [r3, #28]
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c11e:	021b      	lsls	r3, r3, #8
 800c120:	b29a      	uxth	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c12e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c132:	b29a      	uxth	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7f5b      	ldrb	r3, [r3, #29]
 800c144:	b29b      	uxth	r3, r3
 800c146:	4313      	orrs	r3, r2
 800c148:	b29a      	uxth	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	429a      	cmp	r2, r3
 800c160:	d87e      	bhi.n	800c260 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c168:	461a      	mov	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c170:	4413      	add	r3, r2
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800c178:	4293      	cmp	r3, r2
 800c17a:	dc57      	bgt.n	800c22c <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	623b      	str	r3, [r7, #32]
 800c180:	2300      	movs	r3, #0
 800c182:	61fb      	str	r3, [r7, #28]
 800c184:	2300      	movs	r3, #0
 800c186:	667b      	str	r3, [r7, #100]	; 0x64
 800c188:	2300      	movs	r3, #0
 800c18a:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800c18c:	2300      	movs	r3, #0
 800c18e:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800c19c:	40d3      	lsrs	r3, r2
 800c19e:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c1a6:	08db      	lsrs	r3, r3, #3
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c1b2:	f003 0307 	and.w	r3, r3, #7
 800c1b6:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d102      	bne.n	800c1c4 <ModBUS+0x3fc>
									{
										bytes=div;
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	667b      	str	r3, [r7, #100]	; 0x64
 800c1c2:	e002      	b.n	800c1ca <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800c1c4:	6a3b      	ldr	r3, [r7, #32]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800c1ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c1d4:	e00e      	b.n	800c1f4 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c1d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1d8:	3308      	adds	r3, #8
 800c1da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1dc:	b2d1      	uxtb	r1, r2
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	460a      	mov	r2, r1
 800c1e4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c1e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1ea:	0a1b      	lsrs	r3, r3, #8
 800c1ec:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800c1ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800c1f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	dced      	bgt.n	800c1d6 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c210:	3303      	adds	r3, #3
 800c212:	b2da      	uxtb	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c220:	1d9a      	adds	r2, r3, #6
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c228:	f000 bfb4 	b.w	800d194 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2202      	movs	r2, #2
 800c230:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2282      	movs	r2, #130	; 0x82
 800c238:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2203      	movs	r2, #3
 800c248:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c252:	1d9a      	adds	r2, r3, #6
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c25a:	2302      	movs	r3, #2
 800c25c:	f000 bf9a 	b.w	800d194 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2203      	movs	r2, #3
 800c264:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2282      	movs	r2, #130	; 0x82
 800c26c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2203      	movs	r2, #3
 800c27c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c286:	1d9a      	adds	r2, r3, #6
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c28e:	2303      	movs	r3, #3
 800c290:	f000 bf80 	b.w	800d194 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2282      	movs	r2, #130	; 0x82
 800c2a0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2203      	movs	r2, #3
 800c2b0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c2ba:	1d9a      	adds	r2, r3, #6
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	f000 bf66 	b.w	800d194 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7d9a      	ldrb	r2, [r3, #22]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	7d5a      	ldrb	r2, [r3, #21]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	7d1a      	ldrb	r2, [r3, #20]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	7cda      	ldrb	r2, [r3, #19]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	7c9a      	ldrb	r2, [r3, #18]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	7b1b      	ldrb	r3, [r3, #12]
 800c302:	2b01      	cmp	r3, #1
 800c304:	f040 80e2 	bne.w	800c4cc <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	7e9b      	ldrb	r3, [r3, #26]
 800c30c:	b29a      	uxth	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c31a:	021b      	lsls	r3, r3, #8
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c32a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c32e:	b29a      	uxth	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	7edb      	ldrb	r3, [r3, #27]
 800c340:	b29b      	uxth	r3, r3
 800c342:	4313      	orrs	r3, r2
 800c344:	b29a      	uxth	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	7f1b      	ldrb	r3, [r3, #28]
 800c350:	b29a      	uxth	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c35e:	021b      	lsls	r3, r3, #8
 800c360:	b29a      	uxth	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c36e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c372:	b29a      	uxth	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	7f5b      	ldrb	r3, [r3, #29]
 800c384:	b29b      	uxth	r3, r3
 800c386:	4313      	orrs	r3, r2
 800c388:	b29a      	uxth	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d87a      	bhi.n	800c498 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c3b0:	4413      	add	r3, r2
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	dc53      	bgt.n	800c464 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c3bc:	e029      	b.n	800c412 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3c8:	4413      	add	r3, r2
 800c3ca:	005a      	lsls	r2, r3, #1
 800c3cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ce:	005b      	lsls	r3, r3, #1
 800c3d0:	3309      	adds	r3, #9
 800c3d2:	6879      	ldr	r1, [r7, #4]
 800c3d4:	440a      	add	r2, r1
 800c3d6:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	4413      	add	r3, r2
 800c3de:	460a      	mov	r2, r1
 800c3e0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ee:	4413      	add	r3, r2
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	1c5a      	adds	r2, r3, #1
 800c3f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3f6:	3305      	adds	r3, #5
 800c3f8:	005b      	lsls	r3, r3, #1
 800c3fa:	6879      	ldr	r1, [r7, #4]
 800c3fc:	440a      	add	r2, r1
 800c3fe:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	4413      	add	r3, r2
 800c406:	460a      	mov	r2, r1
 800c408:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c40c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c40e:	3301      	adds	r3, #1
 800c410:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c418:	461a      	mov	r2, r3
 800c41a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c41c:	4293      	cmp	r3, r2
 800c41e:	dbce      	blt.n	800c3be <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c426:	b2db      	uxtb	r3, r3
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2203      	movs	r2, #3
 800c436:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c448:	3303      	adds	r3, #3
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c458:	1d9a      	adds	r2, r3, #6
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c460:	f000 be98 	b.w	800d194 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2202      	movs	r2, #2
 800c468:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2283      	movs	r2, #131	; 0x83
 800c470:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2203      	movs	r2, #3
 800c480:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c48a:	1d9a      	adds	r2, r3, #6
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c492:	2302      	movs	r3, #2
 800c494:	f000 be7e 	b.w	800d194 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2203      	movs	r2, #3
 800c49c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2283      	movs	r2, #131	; 0x83
 800c4a4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c4be:	1d9a      	adds	r2, r3, #6
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	f000 be64 	b.w	800d194 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2283      	movs	r2, #131	; 0x83
 800c4d8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2203      	movs	r2, #3
 800c4e8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c4f2:	1d9a      	adds	r2, r3, #6
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	f000 be4a 	b.w	800d194 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	7d9a      	ldrb	r2, [r3, #22]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	7d5a      	ldrb	r2, [r3, #21]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7d1a      	ldrb	r2, [r3, #20]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	7cda      	ldrb	r2, [r3, #19]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	7c9a      	ldrb	r2, [r3, #18]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c532:	2300      	movs	r3, #0
 800c534:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	7b5b      	ldrb	r3, [r3, #13]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	f040 80e2 	bne.w	800c704 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	7e9b      	ldrb	r3, [r3, #26]
 800c544:	b29a      	uxth	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c552:	021b      	lsls	r3, r3, #8
 800c554:	b29a      	uxth	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c562:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c566:	b29a      	uxth	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	7edb      	ldrb	r3, [r3, #27]
 800c578:	b29b      	uxth	r3, r3
 800c57a:	4313      	orrs	r3, r2
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	7f1b      	ldrb	r3, [r3, #28]
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c596:	021b      	lsls	r3, r3, #8
 800c598:	b29a      	uxth	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c5a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	7f5b      	ldrb	r3, [r3, #29]
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d87a      	bhi.n	800c6d0 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c5e8:	4413      	add	r3, r2
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	dc53      	bgt.n	800c69c <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c5f4:	e029      	b.n	800c64a <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c600:	4413      	add	r3, r2
 800c602:	005a      	lsls	r2, r3, #1
 800c604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	3309      	adds	r3, #9
 800c60a:	6879      	ldr	r1, [r7, #4]
 800c60c:	440a      	add	r2, r1
 800c60e:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	4413      	add	r3, r2
 800c616:	460a      	mov	r2, r1
 800c618:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c622:	461a      	mov	r2, r3
 800c624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c626:	4413      	add	r3, r2
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c62e:	3305      	adds	r3, #5
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	6879      	ldr	r1, [r7, #4]
 800c634:	440a      	add	r2, r1
 800c636:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	460a      	mov	r2, r1
 800c640:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c646:	3301      	adds	r3, #1
 800c648:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c650:	461a      	mov	r2, r3
 800c652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c654:	4293      	cmp	r3, r2
 800c656:	dbce      	blt.n	800c5f6 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	b2da      	uxtb	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2204      	movs	r2, #4
 800c66e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c680:	3303      	adds	r3, #3
 800c682:	b2da      	uxtb	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c690:	1d9a      	adds	r2, r3, #6
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c698:	f000 bd7c 	b.w	800d194 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2284      	movs	r2, #132	; 0x84
 800c6a8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2203      	movs	r2, #3
 800c6b8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c6c2:	1d9a      	adds	r2, r3, #6
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c6ca:	2302      	movs	r3, #2
 800c6cc:	f000 bd62 	b.w	800d194 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2203      	movs	r2, #3
 800c6d4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2284      	movs	r2, #132	; 0x84
 800c6dc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c6f6:	1d9a      	adds	r2, r3, #6
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c6fe:	2303      	movs	r3, #3
 800c700:	f000 bd48 	b.w	800d194 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2284      	movs	r2, #132	; 0x84
 800c710:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2203      	movs	r2, #3
 800c720:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c72a:	1d9a      	adds	r2, r3, #6
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c732:	2301      	movs	r3, #1
 800c734:	f000 bd2e 	b.w	800d194 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7d9a      	ldrb	r2, [r3, #22]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	7d5a      	ldrb	r2, [r3, #21]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	7d1a      	ldrb	r2, [r3, #20]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	7cda      	ldrb	r2, [r3, #19]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7c9a      	ldrb	r2, [r3, #18]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	7b9b      	ldrb	r3, [r3, #14]
 800c772:	2b01      	cmp	r3, #1
 800c774:	f040 80d1 	bne.w	800c91a <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	7e9b      	ldrb	r3, [r3, #26]
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c78a:	021b      	lsls	r3, r3, #8
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c79a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7edb      	ldrb	r3, [r3, #27]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	7f1b      	ldrb	r3, [r3, #28]
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7ce:	021b      	lsls	r3, r3, #8
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	7f5b      	ldrb	r3, [r3, #29]
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800c806:	461a      	mov	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c80e:	429a      	cmp	r2, r3
 800c810:	dd69      	ble.n	800c8e6 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d005      	beq.n	800c828 <ModBUS+0xa60>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c822:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c826:	d144      	bne.n	800c8b2 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c82e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c832:	d10d      	bne.n	800c850 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800c840:	4611      	mov	r1, r2
 800c842:	2201      	movs	r2, #1
 800c844:	408a      	lsls	r2, r1
 800c846:	431a      	orrs	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800c84e:	e003      	b.n	800c858 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	7f5a      	ldrb	r2, [r3, #29]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	7f1a      	ldrb	r2, [r3, #28]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	7eda      	ldrb	r2, [r3, #27]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	7e9a      	ldrb	r2, [r3, #26]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2205      	movs	r2, #5
 800c884:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c896:	3306      	adds	r3, #6
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c8a6:	1d9a      	adds	r2, r3, #6
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c8ae:	f000 bc71 	b.w	800d194 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2202      	movs	r2, #2
 800c8b6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2285      	movs	r2, #133	; 0x85
 800c8be:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c8d8:	1d9a      	adds	r2, r3, #6
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	f000 bc57 	b.w	800d194 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2203      	movs	r2, #3
 800c8ea:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2285      	movs	r2, #133	; 0x85
 800c8f2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2203      	movs	r2, #3
 800c902:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c90c:	1d9a      	adds	r2, r3, #6
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800c914:	2303      	movs	r3, #3
 800c916:	f000 bc3d 	b.w	800d194 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2285      	movs	r2, #133	; 0x85
 800c926:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2201      	movs	r2, #1
 800c92e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2203      	movs	r2, #3
 800c936:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c940:	1d9a      	adds	r2, r3, #6
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800c948:	2301      	movs	r3, #1
 800c94a:	f000 bc23 	b.w	800d194 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	7d9a      	ldrb	r2, [r3, #22]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	7d5a      	ldrb	r2, [r3, #21]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	7d1a      	ldrb	r2, [r3, #20]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	7cda      	ldrb	r2, [r3, #19]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	7c9a      	ldrb	r2, [r3, #18]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800c980:	2300      	movs	r3, #0
 800c982:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c984:	2300      	movs	r3, #0
 800c986:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	7bdb      	ldrb	r3, [r3, #15]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	f040 80a3 	bne.w	800cad8 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	7e9b      	ldrb	r3, [r3, #26]
 800c996:	b29a      	uxth	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c9a4:	021b      	lsls	r3, r3, #8
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c9b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7edb      	ldrb	r3, [r3, #27]
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c9dc:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	7f1b      	ldrb	r3, [r3, #28]
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800ca00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca04:	b29a      	uxth	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	7f5b      	ldrb	r3, [r3, #29]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d838      	bhi.n	800caa6 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800ca34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	7f11      	ldrb	r1, [r2, #28]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	460a      	mov	r2, r1
 800ca40:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800ca44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca46:	3301      	adds	r3, #1
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	7f51      	ldrb	r1, [r2, #29]
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	4413      	add	r3, r2
 800ca50:	460a      	mov	r2, r1
 800ca52:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	7f5a      	ldrb	r2, [r3, #29]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	7f1a      	ldrb	r2, [r3, #28]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	7eda      	ldrb	r2, [r3, #27]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	7e9a      	ldrb	r2, [r3, #26]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2206      	movs	r2, #6
 800ca82:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2206      	movs	r2, #6
 800ca92:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca9c:	1d9a      	adds	r2, r3, #6
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800caa4:	e376      	b.n	800d194 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2202      	movs	r2, #2
 800caaa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2286      	movs	r2, #134	; 0x86
 800cab2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2203      	movs	r2, #3
 800cac2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cacc:	1d9a      	adds	r2, r3, #6
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cad4:	2302      	movs	r3, #2
 800cad6:	e35d      	b.n	800d194 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2286      	movs	r2, #134	; 0x86
 800cae4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2203      	movs	r2, #3
 800caf4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cafe:	1d9a      	adds	r2, r3, #6
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cb06:	2301      	movs	r3, #1
 800cb08:	e344      	b.n	800d194 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7d9a      	ldrb	r2, [r3, #22]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	7d5a      	ldrb	r2, [r3, #21]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	7d1a      	ldrb	r2, [r3, #20]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	7cda      	ldrb	r2, [r3, #19]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	7c9a      	ldrb	r2, [r3, #18]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	7c1b      	ldrb	r3, [r3, #16]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	f040 810f 	bne.w	800cd68 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	7e9b      	ldrb	r3, [r3, #26]
 800cb4e:	b29a      	uxth	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb5c:	021b      	lsls	r3, r3, #8
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	7edb      	ldrb	r3, [r3, #27]
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	4313      	orrs	r3, r2
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	7f1b      	ldrb	r3, [r3, #28]
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cba0:	021b      	lsls	r3, r3, #8
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cbb0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	7f5b      	ldrb	r3, [r3, #29]
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	f200 80a8 	bhi.w	800cd36 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cbec:	461a      	mov	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cbf4:	4413      	add	r3, r2
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	f300 8081 	bgt.w	800cd04 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800cc02:	2300      	movs	r3, #0
 800cc04:	657b      	str	r3, [r7, #84]	; 0x54
 800cc06:	2300      	movs	r3, #0
 800cc08:	653b      	str	r3, [r7, #80]	; 0x50
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc0e:	2300      	movs	r3, #0
 800cc10:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7f9b      	ldrb	r3, [r3, #30]
 800cc16:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800cc18:	e00e      	b.n	800cc38 <ModBUS+0xe70>
									{
										data=data<<8;
 800cc1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc1c:	021b      	lsls	r3, r3, #8
 800cc1e:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800cc20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc22:	330c      	adds	r3, #12
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	4413      	add	r3, r2
 800cc28:	7c9b      	ldrb	r3, [r3, #18]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800cc32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc34:	3b01      	subs	r3, #1
 800cc36:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800cc38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1ed      	bne.n	800cc1a <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cc44:	461a      	mov	r2, r3
 800cc46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc48:	4093      	lsls	r3, r2
 800cc4a:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cc4c:	e00f      	b.n	800cc6e <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cc54:	461a      	mov	r2, r3
 800cc56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc58:	4413      	add	r3, r2
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc60:	461a      	mov	r2, r3
 800cc62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc64:	4313      	orrs	r3, r2
 800cc66:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800cc68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cc74:	461a      	mov	r2, r3
 800cc76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d3e8      	bcc.n	800cc4e <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800cc7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc7e:	43db      	mvns	r3, r3
 800cc80:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc8a:	401a      	ands	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800cc92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc94:	43db      	mvns	r3, r3
 800cc96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc98:	4013      	ands	r3, r2
 800cc9a:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cca4:	431a      	orrs	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	7f5a      	ldrb	r2, [r3, #29]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	7f1a      	ldrb	r2, [r3, #28]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	7eda      	ldrb	r2, [r3, #27]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	7e9a      	ldrb	r2, [r3, #26]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	220f      	movs	r2, #15
 800ccd8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800ccea:	3306      	adds	r3, #6
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccfa:	1d9a      	adds	r2, r3, #6
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cd02:	e247      	b.n	800d194 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2202      	movs	r2, #2
 800cd08:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	228f      	movs	r2, #143	; 0x8f
 800cd10:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2203      	movs	r2, #3
 800cd20:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd2a:	1d9a      	adds	r2, r3, #6
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cd32:	2302      	movs	r3, #2
 800cd34:	e22e      	b.n	800d194 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2203      	movs	r2, #3
 800cd3a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	228f      	movs	r2, #143	; 0x8f
 800cd42:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2203      	movs	r2, #3
 800cd52:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd5c:	1d9a      	adds	r2, r3, #6
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cd64:	2303      	movs	r3, #3
 800cd66:	e215      	b.n	800d194 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	228f      	movs	r2, #143	; 0x8f
 800cd74:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2203      	movs	r2, #3
 800cd84:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd8e:	1d9a      	adds	r2, r3, #6
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cd96:	2301      	movs	r3, #1
 800cd98:	e1fc      	b.n	800d194 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	7d9a      	ldrb	r2, [r3, #22]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	7d5a      	ldrb	r2, [r3, #21]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	7d1a      	ldrb	r2, [r3, #20]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	7cda      	ldrb	r2, [r3, #19]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	7c9a      	ldrb	r2, [r3, #18]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	7c5b      	ldrb	r3, [r3, #17]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	f040 80eb 	bne.w	800cfb6 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	7e9b      	ldrb	r3, [r3, #26]
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cdf2:	021b      	lsls	r3, r3, #8
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ce02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7edb      	ldrb	r3, [r3, #27]
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	7f1b      	ldrb	r3, [r3, #28]
 800ce32:	b29a      	uxth	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ce40:	021b      	lsls	r3, r3, #8
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ce50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	7f5b      	ldrb	r3, [r3, #29]
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d87f      	bhi.n	800cf84 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ce92:	4413      	add	r3, r2
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	dc59      	bgt.n	800cf52 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800ce9e:	e029      	b.n	800cef4 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800cea0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cea4:	f103 020d 	add.w	r2, r3, #13
 800cea8:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ceaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ceae:	440b      	add	r3, r1
 800ceb0:	6879      	ldr	r1, [r7, #4]
 800ceb2:	440a      	add	r2, r1
 800ceb4:	7c91      	ldrb	r1, [r2, #18]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	4413      	add	r3, r2
 800ceba:	460a      	mov	r2, r1
 800cebc:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800cec0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cec4:	3301      	adds	r3, #1
 800cec6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ceca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cece:	f103 020d 	add.w	r2, r3, #13
 800ced2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ced4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ced8:	440b      	add	r3, r1
 800ceda:	6879      	ldr	r1, [r7, #4]
 800cedc:	440a      	add	r2, r1
 800cede:	7c91      	ldrb	r1, [r2, #18]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	4413      	add	r3, r2
 800cee4:	460a      	mov	r2, r1
 800cee6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800ceea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ceee:	3301      	adds	r3, #1
 800cef0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7f9b      	ldrb	r3, [r3, #30]
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d3ce      	bcc.n	800cea0 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	7f5a      	ldrb	r2, [r3, #29]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	7f1a      	ldrb	r2, [r3, #28]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	7eda      	ldrb	r2, [r3, #27]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	7e9a      	ldrb	r2, [r3, #26]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2210      	movs	r2, #16
 800cf2e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2206      	movs	r2, #6
 800cf3e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf48:	1d9a      	adds	r2, r3, #6
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cf50:	e120      	b.n	800d194 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2202      	movs	r2, #2
 800cf56:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2290      	movs	r2, #144	; 0x90
 800cf5e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2203      	movs	r2, #3
 800cf6e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf78:	1d9a      	adds	r2, r3, #6
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cf80:	2302      	movs	r3, #2
 800cf82:	e107      	b.n	800d194 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2203      	movs	r2, #3
 800cf88:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2290      	movs	r2, #144	; 0x90
 800cf90:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2203      	movs	r2, #3
 800cfa0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cfaa:	1d9a      	adds	r2, r3, #6
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	e0ee      	b.n	800d194 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2290      	movs	r2, #144	; 0x90
 800cfc2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2203      	movs	r2, #3
 800cfd2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cfdc:	1d9a      	adds	r2, r3, #6
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e0d5      	b.n	800d194 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	7e5b      	ldrb	r3, [r3, #25]
 800cff4:	3b80      	subs	r3, #128	; 0x80
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	7e1a      	ldrb	r2, [r3, #24]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2203      	movs	r2, #3
 800d00c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	7d9a      	ldrb	r2, [r3, #22]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	7d5a      	ldrb	r2, [r3, #21]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	7d1a      	ldrb	r2, [r3, #20]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	7cda      	ldrb	r2, [r3, #19]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	7c9a      	ldrb	r2, [r3, #18]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d048:	1d9a      	adds	r2, r3, #6
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800d050:	2301      	movs	r3, #1
 800d052:	e09f      	b.n	800d194 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800d054:	2301      	movs	r3, #1
 800d056:	e09d      	b.n	800d194 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	791b      	ldrb	r3, [r3, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f040 8099 	bne.w	800d194 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f103 0212 	add.w	r2, r3, #18
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d06e:	4619      	mov	r1, r3
 800d070:	4610      	mov	r0, r2
 800d072:	f7fe fda9 	bl	800bbc8 <ModBUS_Check>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 808b 	beq.w	800d194 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7fe fdc1 	bl	800bc06 <ModBUS_Check_tid>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d04f      	beq.n	800d12a <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7e5b      	ldrb	r3, [r3, #25]
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d143      	bne.n	800d11a <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d092:	2300      	movs	r3, #0
 800d094:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800d096:	2300      	movs	r3, #0
 800d098:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d0a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d0a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0a6:	021b      	lsls	r3, r3, #8
 800d0a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800d0be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	643b      	str	r3, [r7, #64]	; 0x40
 800d0c6:	e022      	b.n	800d10e <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	f103 0209 	add.w	r2, r3, #9
 800d0d0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d4:	440b      	add	r3, r1
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	6879      	ldr	r1, [r7, #4]
 800d0da:	440a      	add	r2, r1
 800d0dc:	7c91      	ldrb	r1, [r2, #18]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	460a      	mov	r2, r1
 800d0e4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800d0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ea:	3305      	adds	r3, #5
 800d0ec:	005a      	lsls	r2, r3, #1
 800d0ee:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0f2:	440b      	add	r3, r1
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	6879      	ldr	r1, [r7, #4]
 800d0fa:	440a      	add	r2, r1
 800d0fc:	7c91      	ldrb	r1, [r2, #18]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	4413      	add	r3, r2
 800d102:	460a      	mov	r2, r1
 800d104:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800d108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d10a:	3301      	adds	r3, #1
 800d10c:	643b      	str	r3, [r7, #64]	; 0x40
 800d10e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d114:	429a      	cmp	r2, r3
 800d116:	dbd7      	blt.n	800d0c8 <ModBUS+0x1300>

						}


					}
					break;
 800d118:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7ddb      	ldrb	r3, [r3, #23]
 800d11e:	461a      	mov	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	7e9b      	ldrb	r3, [r3, #26]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	63bb      	str	r3, [r7, #56]	; 0x38
 800d128:	e034      	b.n	800d194 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	7e5b      	ldrb	r3, [r3, #25]
 800d12e:	3b81      	subs	r3, #129	; 0x81
 800d130:	2b15      	cmp	r3, #21
 800d132:	d82f      	bhi.n	800d194 <ModBUS+0x13cc>
 800d134:	a201      	add	r2, pc, #4	; (adr r2, 800d13c <ModBUS+0x1374>)
 800d136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13a:	bf00      	nop
 800d13c:	0800d195 	.word	0x0800d195
 800d140:	0800d195 	.word	0x0800d195
 800d144:	0800d195 	.word	0x0800d195
 800d148:	0800d195 	.word	0x0800d195
 800d14c:	0800d195 	.word	0x0800d195
 800d150:	0800d195 	.word	0x0800d195
 800d154:	0800d195 	.word	0x0800d195
 800d158:	0800d195 	.word	0x0800d195
 800d15c:	0800d195 	.word	0x0800d195
 800d160:	0800d195 	.word	0x0800d195
 800d164:	0800d195 	.word	0x0800d195
 800d168:	0800d195 	.word	0x0800d195
 800d16c:	0800d195 	.word	0x0800d195
 800d170:	0800d195 	.word	0x0800d195
 800d174:	0800d195 	.word	0x0800d195
 800d178:	0800d195 	.word	0x0800d195
 800d17c:	0800d195 	.word	0x0800d195
 800d180:	0800d195 	.word	0x0800d195
 800d184:	0800d195 	.word	0x0800d195
 800d188:	0800d195 	.word	0x0800d195
 800d18c:	0800d195 	.word	0x0800d195
 800d190:	0800d195 	.word	0x0800d195
			}
		}
	}


}
 800d194:	4618      	mov	r0, r3
 800d196:	3770      	adds	r7, #112	; 0x70
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af02      	add	r7, sp, #8
 800d1a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6858      	ldr	r0, [r3, #4]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	891b      	ldrh	r3, [r3, #8]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	f7f5 ff40 	bl	8003034 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6818      	ldr	r0, [r3, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f103 0114 	add.w	r1, r3, #20
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f103 0218 	add.w	r2, r3, #24
 800d1c4:	2364      	movs	r3, #100	; 0x64
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	2304      	movs	r3, #4
 800d1ca:	f7f6 fc48 	bl	8003a5e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6858      	ldr	r0, [r3, #4]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	891b      	ldrh	r3, [r3, #8]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	4619      	mov	r1, r3
 800d1da:	f7f5 ff2b 	bl	8003034 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	7edb      	ldrb	r3, [r3, #27]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b086      	sub	sp, #24
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	4608      	mov	r0, r1
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	70fb      	strb	r3, [r7, #3]
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	70bb      	strb	r3, [r7, #2]
 800d200:	4613      	mov	r3, r2
 800d202:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800d204:	2300      	movs	r3, #0
 800d206:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	787a      	ldrb	r2, [r7, #1]
 800d20c:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	78fa      	ldrb	r2, [r7, #3]
 800d212:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	78ba      	ldrb	r2, [r7, #2]
 800d218:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800d220:	787b      	ldrb	r3, [r7, #1]
 800d222:	2bf0      	cmp	r3, #240	; 0xf0
 800d224:	d11d      	bne.n	800d262 <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800d226:	2300      	movs	r3, #0
 800d228:	613b      	str	r3, [r7, #16]
 800d22a:	e013      	b.n	800d254 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	6a3a      	ldr	r2, [r7, #32]
 800d230:	4413      	add	r3, r2
 800d232:	781a      	ldrb	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f7ff ffaf 	bl	800d19c <SPI_ETH>
 800d23e:	4603      	mov	r3, r0
 800d240:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	7d9b      	ldrb	r3, [r3, #22]
 800d246:	3301      	adds	r3, #1
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	3301      	adds	r3, #1
 800d252:	613b      	str	r3, [r7, #16]
 800d254:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	dbe6      	blt.n	800d22c <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800d25e:	8afb      	ldrh	r3, [r7, #22]
 800d260:	e037      	b.n	800d2d2 <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800d262:	787b      	ldrb	r3, [r7, #1]
 800d264:	2b0f      	cmp	r3, #15
 800d266:	d134      	bne.n	800d2d2 <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800d26e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d272:	2b02      	cmp	r3, #2
 800d274:	d120      	bne.n	800d2b8 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800d276:	2300      	movs	r3, #0
 800d278:	60fb      	str	r3, [r7, #12]
 800d27a:	e016      	b.n	800d2aa <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f7ff ff8d 	bl	800d19c <SPI_ETH>
 800d282:	4603      	mov	r3, r0
 800d284:	b29a      	uxth	r2, r3
 800d286:	8afb      	ldrh	r3, [r7, #22]
 800d288:	4313      	orrs	r3, r2
 800d28a:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7d9b      	ldrb	r3, [r3, #22]
 800d290:	3301      	adds	r3, #1
 800d292:	b2da      	uxtb	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d102      	bne.n	800d2a4 <SPI_ETH_REG+0xba>
 800d29e:	8afb      	ldrh	r3, [r7, #22]
 800d2a0:	021b      	lsls	r3, r3, #8
 800d2a2:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	60fb      	str	r3, [r7, #12]
 800d2aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	dbe3      	blt.n	800d27c <SPI_ETH_REG+0x92>
			}
		 return(res);
 800d2b4:	8afb      	ldrh	r3, [r7, #22]
 800d2b6:	e00c      	b.n	800d2d2 <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7ff ff6f 	bl	800d19c <SPI_ETH>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7d9b      	ldrb	r3, [r3, #22]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	759a      	strb	r2, [r3, #22]
			return(res);
 800d2ce:	8afb      	ldrh	r3, [r7, #22]
 800d2d0:	e7ff      	b.n	800d2d2 <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3718      	adds	r7, #24
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b086      	sub	sp, #24
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	807b      	strh	r3, [r7, #2]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	22f0      	movs	r2, #240	; 0xf0
 800d2f2:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800d2f4:	883b      	ldrh	r3, [r7, #0]
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800d2fa:	883b      	ldrh	r3, [r7, #0]
 800d2fc:	0a1b      	lsrs	r3, r3, #8
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	b2db      	uxtb	r3, r3
 800d302:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800d304:	2300      	movs	r3, #0
 800d306:	613b      	str	r3, [r7, #16]
 800d308:	e01b      	b.n	800d342 <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800d30a:	887b      	ldrh	r3, [r7, #2]
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800d312:	887b      	ldrh	r3, [r7, #2]
 800d314:	0a1b      	lsrs	r3, r3, #8
 800d316:	b29b      	uxth	r3, r3
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	755a      	strb	r2, [r3, #21]
		addr++;
 800d31e:	887b      	ldrh	r3, [r7, #2]
 800d320:	3301      	adds	r3, #1
 800d322:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800d324:	f107 020c 	add.w	r2, r7, #12
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	4413      	add	r3, r2
 800d32c:	781a      	ldrb	r2, [r3, #0]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff ff32 	bl	800d19c <SPI_ETH>
 800d338:	4603      	mov	r3, r0
 800d33a:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	3301      	adds	r3, #1
 800d340:	613b      	str	r3, [r7, #16]
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	2b01      	cmp	r3, #1
 800d346:	dde0      	ble.n	800d30a <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800d348:	8afb      	ldrh	r3, [r7, #22]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d352:	b590      	push	{r4, r7, lr}
 800d354:	b087      	sub	sp, #28
 800d356:	af00      	add	r7, sp, #0
 800d358:	60f8      	str	r0, [r7, #12]
 800d35a:	607a      	str	r2, [r7, #4]
 800d35c:	461a      	mov	r2, r3
 800d35e:	460b      	mov	r3, r1
 800d360:	817b      	strh	r3, [r7, #10]
 800d362:	4613      	mov	r3, r2
 800d364:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	220f      	movs	r2, #15
 800d36a:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d36c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d36e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d372:	d226      	bcs.n	800d3c2 <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800d37a:	2300      	movs	r3, #0
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	e01a      	b.n	800d3b6 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800d380:	897b      	ldrh	r3, [r7, #10]
 800d382:	b2da      	uxtb	r2, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d388:	897b      	ldrh	r3, [r7, #10]
 800d38a:	0a1b      	lsrs	r3, r3, #8
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800d394:	893a      	ldrh	r2, [r7, #8]
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	4413      	add	r3, r2
 800d39a:	461a      	mov	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	189c      	adds	r4, r3, r2
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f7ff fefb 	bl	800d19c <SPI_ETH>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	7023      	strb	r3, [r4, #0]
				addr++;
 800d3aa:	897b      	ldrh	r3, [r7, #10]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	617b      	str	r3, [r7, #20]
 800d3b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	dbe0      	blt.n	800d380 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e000      	b.n	800d3c4 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800d3c2:	2301      	movs	r3, #1
	}
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	371c      	adds	r7, #28
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd90      	pop	{r4, r7, pc}

0800d3cc <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	607a      	str	r2, [r7, #4]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	460b      	mov	r3, r1
 800d3da:	817b      	strh	r3, [r7, #10]
 800d3dc:	4613      	mov	r3, r2
 800d3de:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	22f0      	movs	r2, #240	; 0xf0
 800d3e4:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d3e6:	8c3b      	ldrh	r3, [r7, #32]
 800d3e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3ec:	d223      	bcs.n	800d436 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	617b      	str	r3, [r7, #20]
 800d3f2:	e01a      	b.n	800d42a <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800d3f4:	897b      	ldrh	r3, [r7, #10]
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d3fc:	897b      	ldrh	r3, [r7, #10]
 800d3fe:	0a1b      	lsrs	r3, r3, #8
 800d400:	b29b      	uxth	r3, r3
 800d402:	b2da      	uxtb	r2, r3
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800d408:	893a      	ldrh	r2, [r7, #8]
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	4413      	add	r3, r2
 800d40e:	68fa      	ldr	r2, [r7, #12]
 800d410:	4413      	add	r3, r2
 800d412:	7f1a      	ldrb	r2, [r3, #28]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f7ff febf 	bl	800d19c <SPI_ETH>
				addr++;
 800d41e:	897b      	ldrh	r3, [r7, #10]
 800d420:	3301      	adds	r3, #1
 800d422:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	3301      	adds	r3, #1
 800d428:	617b      	str	r3, [r7, #20]
 800d42a:	8c3b      	ldrh	r3, [r7, #32]
 800d42c:	697a      	ldr	r2, [r7, #20]
 800d42e:	429a      	cmp	r2, r3
 800d430:	dbe0      	blt.n	800d3f4 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d432:	2300      	movs	r3, #0
 800d434:	e000      	b.n	800d438 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800d436:	2301      	movs	r3, #1
	}
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3718      	adds	r7, #24
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	460b      	mov	r3, r1
 800d44a:	70fb      	strb	r3, [r7, #3]
 800d44c:	4613      	mov	r3, r2
 800d44e:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	22f0      	movs	r2, #240	; 0xf0
 800d454:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800d456:	78fb      	ldrb	r3, [r7, #3]
 800d458:	3304      	adds	r3, #4
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	78ba      	ldrb	r2, [r7, #2]
 800d46a:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff fe95 	bl	800d19c <SPI_ETH>
}
 800d472:	bf00      	nop
 800d474:	4618      	mov	r0, r3
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
 800d488:	4613      	mov	r3, r2
 800d48a:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	22f0      	movs	r2, #240	; 0xf0
 800d490:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800d492:	78fb      	ldrb	r3, [r7, #3]
 800d494:	3304      	adds	r3, #4
 800d496:	b2da      	uxtb	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	78ba      	ldrb	r2, [r7, #2]
 800d4a6:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7ff fe77 	bl	800d19c <SPI_ETH>
}
 800d4ae:	bf00      	nop
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af02      	add	r7, sp, #8
 800d4be:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c6:	331c      	adds	r3, #28
 800d4c8:	2204      	movs	r2, #4
 800d4ca:	9201      	str	r2, [sp, #4]
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	23f0      	movs	r3, #240	; 0xf0
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7ff fe88 	bl	800d1ea <SPI_ETH_REG>
	 // ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4e0:	2204      	movs	r2, #4
 800d4e2:	9201      	str	r2, [sp, #4]
 800d4e4:	9300      	str	r3, [sp, #0]
 800d4e6:	23f0      	movs	r3, #240	; 0xf0
 800d4e8:	2205      	movs	r2, #5
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fe7c 	bl	800d1ea <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	2206      	movs	r2, #6
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	23f0      	movs	r3, #240	; 0xf0
 800d502:	2209      	movs	r2, #9
 800d504:	2100      	movs	r1, #0
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7ff fe6f 	bl	800d1ea <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d512:	330a      	adds	r3, #10
 800d514:	2204      	movs	r2, #4
 800d516:	9201      	str	r2, [sp, #4]
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	23f0      	movs	r3, #240	; 0xf0
 800d51c:	220f      	movs	r2, #15
 800d51e:	2100      	movs	r1, #0
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff fe62 	bl	800d1ea <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d52c:	330e      	adds	r3, #14
 800d52e:	2201      	movs	r2, #1
 800d530:	9201      	str	r2, [sp, #4]
 800d532:	9300      	str	r3, [sp, #0]
 800d534:	23f0      	movs	r3, #240	; 0xf0
 800d536:	221a      	movs	r2, #26
 800d538:	2100      	movs	r1, #0
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7ff fe55 	bl	800d1ea <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d546:	330f      	adds	r3, #15
 800d548:	2201      	movs	r2, #1
 800d54a:	9201      	str	r2, [sp, #4]
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	23f0      	movs	r3, #240	; 0xf0
 800d550:	221b      	movs	r2, #27
 800d552:	2100      	movs	r1, #0
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f7ff fe48 	bl	800d1ea <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client

}
 800d55a:	bf00      	nop
 800d55c:	4618      	mov	r0, r3
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af02      	add	r7, sp, #8
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	2201      	movs	r2, #1
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f7ff ff80 	bl	800d47c <eth_wr_SOCKET_MODE>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d582:	331a      	adds	r3, #26
 800d584:	2202      	movs	r2, #2
 800d586:	9201      	str	r2, [sp, #4]
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	23f0      	movs	r3, #240	; 0xf0
 800d58c:	2204      	movs	r2, #4
 800d58e:	2104      	movs	r1, #4
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7ff fe2a 	bl	800d1ea <SPI_ETH_REG>

	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d59c:	331c      	adds	r3, #28
 800d59e:	2204      	movs	r2, #4
 800d5a0:	9201      	str	r2, [sp, #4]
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	23f0      	movs	r3, #240	; 0xf0
 800d5a6:	220c      	movs	r2, #12
 800d5a8:	2104      	movs	r1, #4
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff fe1d 	bl	800d1ea <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d5b6:	2202      	movs	r2, #2
 800d5b8:	9201      	str	r2, [sp, #4]
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	23f0      	movs	r3, #240	; 0xf0
 800d5be:	2210      	movs	r2, #16
 800d5c0:	2104      	movs	r1, #4
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7ff fe11 	bl	800d1ea <SPI_ETH_REG>


	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800d5c8:	78fb      	ldrb	r3, [r7, #3]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7ff ff36 	bl	800d440 <eth_wr_SOCKET_CMD>
	 //ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client

	 if(ETH->S0_ENserver == 1)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d106      	bne.n	800d5f0 <eth_socket_init+0x8c>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800d5e2:	78fb      	ldrb	r3, [r7, #3]
 800d5e4:	2202      	movs	r2, #2
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff ff29 	bl	800d440 <eth_wr_SOCKET_CMD>
 800d5ee:	e009      	b.n	800d604 <eth_socket_init+0xa0>
		 //ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800d5f0:	78fb      	ldrb	r3, [r7, #3]
 800d5f2:	2204      	movs	r2, #4
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7ff ff22 	bl	800d440 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800d5fc:	2115      	movs	r1, #21
 800d5fe:	4804      	ldr	r0, [pc, #16]	; (800d610 <eth_socket_init+0xac>)
 800d600:	f7f3 fe84 	bl	800130c <ITM0_Write>
	 }
}
 800d604:	bf00      	nop
 800d606:	4618      	mov	r0, r3
 800d608:	3708      	adds	r7, #8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	0800fbc4 	.word	0x0800fbc4

0800d614 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	460b      	mov	r3, r1
 800d61e:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	220f      	movs	r2, #15
 800d624:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800d626:	78fb      	ldrb	r3, [r7, #3]
 800d628:	3304      	adds	r3, #4
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2203      	movs	r2, #3
 800d634:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff fdad 	bl	800d19c <SPI_ETH>
	return(y->RX[3]);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	7edb      	ldrb	r3, [r3, #27]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b082      	sub	sp, #8
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	460b      	mov	r3, r1
 800d658:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	220f      	movs	r2, #15
 800d65e:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800d660:	78fb      	ldrb	r3, [r7, #3]
 800d662:	3304      	adds	r3, #4
 800d664:	b2da      	uxtb	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7ff fd90 	bl	800d19c <SPI_ETH>
	return(y->RX[3]);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	7edb      	ldrb	r3, [r3, #27]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b08c      	sub	sp, #48	; 0x30
 800d68c:	af02      	add	r7, sp, #8
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	607a      	str	r2, [r7, #4]
 800d692:	461a      	mov	r2, r3
 800d694:	460b      	mov	r3, r1
 800d696:	72fb      	strb	r3, [r7, #11]
 800d698:	4613      	mov	r3, r2
 800d69a:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d69c:	2300      	movs	r3, #0
 800d69e:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800d6bc:	2300      	movs	r3, #0
 800d6be:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800d6c4:	7afb      	ldrb	r3, [r7, #11]
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d83e      	bhi.n	800d748 <eth_rd_SOCKET_DATA+0xc0>
 800d6ca:	a201      	add	r2, pc, #4	; (adr r2, 800d6d0 <eth_rd_SOCKET_DATA+0x48>)
 800d6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d0:	0800d6e1 	.word	0x0800d6e1
 800d6d4:	0800d6fb 	.word	0x0800d6fb
 800d6d8:	0800d715 	.word	0x0800d715
 800d6dc:	0800d72f 	.word	0x0800d72f
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d6ea:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d6f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d6f8:	e033      	b.n	800d762 <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d700:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d704:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d70c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d710:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d712:	e026      	b.n	800d762 <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d71a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d71e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d726:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d72a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d72c:	e019      	b.n	800d762 <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d734:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d738:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d740:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d744:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d746:	e00c      	b.n	800d762 <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d74e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d752:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d75a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d75e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d760:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d762:	7afb      	ldrb	r3, [r7, #11]
 800d764:	3304      	adds	r3, #4
 800d766:	b2d9      	uxtb	r1, r3
 800d768:	2302      	movs	r3, #2
 800d76a:	9301      	str	r3, [sp, #4]
 800d76c:	f107 0310 	add.w	r3, r7, #16
 800d770:	9300      	str	r3, [sp, #0]
 800d772:	230f      	movs	r3, #15
 800d774:	2228      	movs	r2, #40	; 0x28
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f7ff fd37 	bl	800d1ea <SPI_ETH_REG>
 800d77c:	4603      	mov	r3, r0
 800d77e:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800d780:	8b7a      	ldrh	r2, [r7, #26]
 800d782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d784:	4013      	ands	r3, r2
 800d786:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800d788:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d78a:	8b3b      	ldrh	r3, [r7, #24]
 800d78c:	4413      	add	r3, r2
 800d78e:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800d790:	8b3a      	ldrh	r2, [r7, #24]
 800d792:	893b      	ldrh	r3, [r7, #8]
 800d794:	441a      	add	r2, r3
 800d796:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d798:	3301      	adds	r3, #1
 800d79a:	429a      	cmp	r2, r3
 800d79c:	dd2c      	ble.n	800d7f8 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800d79e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d7a0:	8b3b      	ldrh	r3, [r7, #24]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f103 021c 	add.w	r2, r3, #28
 800d7b0:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d7b2:	8af9      	ldrh	r1, [r7, #22]
 800d7b4:	8bfb      	ldrh	r3, [r7, #30]
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f7ff fdc9 	bl	800d352 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d7c0:	8bba      	ldrh	r2, [r7, #28]
 800d7c2:	8bfb      	ldrh	r3, [r7, #30]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800d7c8:	893a      	ldrh	r2, [r7, #8]
 800d7ca:	8bfb      	ldrh	r3, [r7, #30]
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800d7d0:	8bfb      	ldrh	r3, [r7, #30]
 800d7d2:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f103 021c 	add.w	r2, r3, #28
 800d7da:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d7dc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800d7de:	8c3b      	ldrh	r3, [r7, #32]
 800d7e0:	9300      	str	r3, [sp, #0]
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f7ff fdb4 	bl	800d352 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800d7ea:	8b7a      	ldrh	r2, [r7, #26]
 800d7ec:	893b      	ldrh	r3, [r7, #8]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	801a      	strh	r2, [r3, #0]
 800d7f6:	e010      	b.n	800d81a <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f103 021c 	add.w	r2, r3, #28
 800d7fe:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d800:	8af9      	ldrh	r1, [r7, #22]
 800d802:	893b      	ldrh	r3, [r7, #8]
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	4603      	mov	r3, r0
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f7ff fda2 	bl	800d352 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800d80e:	8b7a      	ldrh	r2, [r7, #26]
 800d810:	893b      	ldrh	r3, [r7, #8]
 800d812:	4413      	add	r3, r2
 800d814:	b29a      	uxth	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	b29b      	uxth	r3, r3
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3728      	adds	r7, #40	; 0x28
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop

0800d828 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08c      	sub	sp, #48	; 0x30
 800d82c:	af02      	add	r7, sp, #8
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	607a      	str	r2, [r7, #4]
 800d832:	461a      	mov	r2, r3
 800d834:	460b      	mov	r3, r1
 800d836:	72fb      	strb	r3, [r7, #11]
 800d838:	4613      	mov	r3, r2
 800d83a:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d83c:	2300      	movs	r3, #0
 800d83e:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800d840:	2300      	movs	r3, #0
 800d842:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800d844:	2300      	movs	r3, #0
 800d846:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800d848:	2300      	movs	r3, #0
 800d84a:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800d84c:	2300      	movs	r3, #0
 800d84e:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800d850:	2300      	movs	r3, #0
 800d852:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800d854:	2300      	movs	r3, #0
 800d856:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d858:	2300      	movs	r3, #0
 800d85a:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800d85c:	2300      	movs	r3, #0
 800d85e:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800d860:	2300      	movs	r3, #0
 800d862:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800d864:	2300      	movs	r3, #0
 800d866:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800d868:	7afb      	ldrb	r3, [r7, #11]
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d83e      	bhi.n	800d8ec <eth_wr_SOCKET_DATA+0xc4>
 800d86e:	a201      	add	r2, pc, #4	; (adr r2, 800d874 <eth_wr_SOCKET_DATA+0x4c>)
 800d870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d874:	0800d885 	.word	0x0800d885
 800d878:	0800d89f 	.word	0x0800d89f
 800d87c:	0800d8b9 	.word	0x0800d8b9
 800d880:	0800d8d3 	.word	0x0800d8d3
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d88a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d88e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d896:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d89a:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d89c:	e033      	b.n	800d906 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d8a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8b4:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d8b6:	e026      	b.n	800d906 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d8c2:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8ce:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d8d0:	e019      	b.n	800d906 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d8dc:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8e8:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d8ea:	e00c      	b.n	800d906 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d8f6:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d902:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d904:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d906:	e00e      	b.n	800d926 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800d908:	7afb      	ldrb	r3, [r7, #11]
 800d90a:	3304      	adds	r3, #4
 800d90c:	b2d9      	uxtb	r1, r3
 800d90e:	2302      	movs	r3, #2
 800d910:	9301      	str	r3, [sp, #4]
 800d912:	f107 0310 	add.w	r3, r7, #16
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	230f      	movs	r3, #15
 800d91a:	2220      	movs	r2, #32
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f7ff fc64 	bl	800d1ea <SPI_ETH_REG>
 800d922:	4603      	mov	r3, r0
 800d924:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d926:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d928:	893b      	ldrh	r3, [r7, #8]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d3ec      	bcc.n	800d908 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800d92e:	7afb      	ldrb	r3, [r7, #11]
 800d930:	3304      	adds	r3, #4
 800d932:	b2d9      	uxtb	r1, r3
 800d934:	2302      	movs	r3, #2
 800d936:	9301      	str	r3, [sp, #4]
 800d938:	f107 0310 	add.w	r3, r7, #16
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	230f      	movs	r3, #15
 800d940:	2224      	movs	r2, #36	; 0x24
 800d942:	68f8      	ldr	r0, [r7, #12]
 800d944:	f7ff fc51 	bl	800d1ea <SPI_ETH_REG>
 800d948:	4603      	mov	r3, r0
 800d94a:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800d94c:	8b3a      	ldrh	r2, [r7, #24]
 800d94e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d950:	4013      	ands	r3, r2
 800d952:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800d954:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d956:	8afb      	ldrh	r3, [r7, #22]
 800d958:	4413      	add	r3, r2
 800d95a:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800d95c:	8afa      	ldrh	r2, [r7, #22]
 800d95e:	893b      	ldrh	r3, [r7, #8]
 800d960:	441a      	add	r2, r3
 800d962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d964:	3301      	adds	r3, #1
 800d966:	429a      	cmp	r2, r3
 800d968:	dd2c      	ble.n	800d9c4 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800d96a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d96c:	8afb      	ldrh	r3, [r7, #22]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	b29b      	uxth	r3, r3
 800d972:	3301      	adds	r3, #1
 800d974:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f103 021c 	add.w	r2, r3, #28
 800d97c:	8c38      	ldrh	r0, [r7, #32]
 800d97e:	8ab9      	ldrh	r1, [r7, #20]
 800d980:	8bbb      	ldrh	r3, [r7, #28]
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	4603      	mov	r3, r0
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f7ff fd20 	bl	800d3cc <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800d98c:	8b7a      	ldrh	r2, [r7, #26]
 800d98e:	8bbb      	ldrh	r3, [r7, #28]
 800d990:	4413      	add	r3, r2
 800d992:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800d994:	893a      	ldrh	r2, [r7, #8]
 800d996:	8bbb      	ldrh	r3, [r7, #28]
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800d99c:	8bbb      	ldrh	r3, [r7, #28]
 800d99e:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f103 021c 	add.w	r2, r3, #28
 800d9a6:	8c38      	ldrh	r0, [r7, #32]
 800d9a8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800d9aa:	8bfb      	ldrh	r3, [r7, #30]
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f7ff fd0b 	bl	800d3cc <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800d9b6:	8b3a      	ldrh	r2, [r7, #24]
 800d9b8:	893b      	ldrh	r3, [r7, #8]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	801a      	strh	r2, [r3, #0]
 800d9c2:	e010      	b.n	800d9e6 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f103 021c 	add.w	r2, r3, #28
 800d9ca:	8c38      	ldrh	r0, [r7, #32]
 800d9cc:	8ab9      	ldrh	r1, [r7, #20]
 800d9ce:	893b      	ldrh	r3, [r7, #8]
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f7ff fcf9 	bl	800d3cc <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800d9da:	8b3a      	ldrh	r2, [r7, #24]
 800d9dc:	893b      	ldrh	r3, [r7, #8]
 800d9de:	4413      	add	r3, r2
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	801a      	strh	r2, [r3, #0]
					}

}
 800d9e6:	bf00      	nop
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3728      	adds	r7, #40	; 0x28
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b090      	sub	sp, #64	; 0x40
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
 800d9fc:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800d9fe:	2300      	movs	r3, #0
 800da00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da02:	2300      	movs	r3, #0
 800da04:	63bb      	str	r3, [r7, #56]	; 0x38
 800da06:	2300      	movs	r3, #0
 800da08:	637b      	str	r3, [r7, #52]	; 0x34
 800da0a:	2300      	movs	r3, #0
 800da0c:	633b      	str	r3, [r7, #48]	; 0x30
 800da0e:	2300      	movs	r3, #0
 800da10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da12:	2300      	movs	r3, #0
 800da14:	61fb      	str	r3, [r7, #28]
 800da16:	2300      	movs	r3, #0
 800da18:	61bb      	str	r3, [r7, #24]
 800da1a:	2300      	movs	r3, #0
 800da1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800da1e:	2300      	movs	r3, #0
 800da20:	627b      	str	r3, [r7, #36]	; 0x24
 800da22:	2300      	movs	r3, #0
 800da24:	617b      	str	r3, [r7, #20]
 800da26:	2300      	movs	r3, #0
 800da28:	623b      	str	r3, [r7, #32]
 800da2a:	2300      	movs	r3, #0
 800da2c:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800da3a:	69fa      	ldr	r2, [r7, #28]
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	429a      	cmp	r2, r3
 800da40:	f2c0 8315 	blt.w	800e06e <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800da44:	2300      	movs	r3, #0
 800da46:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800da48:	e00c      	b.n	800da64 <FT_String_ND+0x74>
							{
								n++;
 800da4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da4c:	3301      	adds	r3, #1
 800da4e:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800da50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	441a      	add	r2, r3
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	3301      	adds	r3, #1
 800da5a:	429a      	cmp	r2, r3
 800da5c:	dd02      	ble.n	800da64 <FT_String_ND+0x74>
								{
									estado=0;
 800da5e:	2300      	movs	r3, #0
 800da60:	623b      	str	r3, [r7, #32]
									break;
 800da62:	e009      	b.n	800da78 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800da64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	4413      	add	r3, r2
 800da6a:	781a      	ldrb	r2, [r3, #0]
 800da6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6e:	6879      	ldr	r1, [r7, #4]
 800da70:	440b      	add	r3, r1
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	429a      	cmp	r2, r3
 800da76:	d1e8      	bne.n	800da4a <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800da78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da7a:	3301      	adds	r3, #1
 800da7c:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	3301      	adds	r3, #1
 800da82:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800da84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d108      	bne.n	800da9e <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800da8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da96:	601a      	str	r2, [r3, #0]
									estado=1;
 800da98:	2301      	movs	r3, #1
 800da9a:	623b      	str	r3, [r7, #32]
									break;
 800da9c:	e010      	b.n	800dac0 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800da9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	dd02      	ble.n	800daac <FT_String_ND+0xbc>
									 {
									 estado=0;
 800daa6:	2300      	movs	r3, #0
 800daa8:	623b      	str	r3, [r7, #32]
									 break;
 800daaa:	e009      	b.n	800dac0 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800daac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	4413      	add	r3, r2
 800dab2:	781a      	ldrb	r2, [r3, #0]
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	6879      	ldr	r1, [r7, #4]
 800dab8:	440b      	add	r3, r1
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d0db      	beq.n	800da78 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	1e5a      	subs	r2, r3, #1
 800dac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac6:	4413      	add	r3, r2
 800dac8:	69fa      	ldr	r2, [r7, #28]
 800daca:	429a      	cmp	r2, r3
 800dacc:	dd02      	ble.n	800dad4 <FT_String_ND+0xe4>
 800dace:	6a3b      	ldr	r3, [r7, #32]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d1b7      	bne.n	800da44 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800dad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800dada:	6a3b      	ldr	r3, [r7, #32]
 800dadc:	e2c8      	b.n	800e070 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800dade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d12c      	bne.n	800db3e <FT_String_ND+0x14e>
 800dae4:	6a3b      	ldr	r3, [r7, #32]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d129      	bne.n	800db3e <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800daea:	e014      	b.n	800db16 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800daec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	441a      	add	r2, r3
 800daf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf6:	4413      	add	r3, r2
 800daf8:	3b01      	subs	r3, #1
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	441a      	add	r2, r3
 800dafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db00:	6819      	ldr	r1, [r3, #0]
 800db02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db04:	440b      	add	r3, r1
 800db06:	3b01      	subs	r3, #1
 800db08:	68f9      	ldr	r1, [r7, #12]
 800db0a:	440b      	add	r3, r1
 800db0c:	7812      	ldrb	r2, [r2, #0]
 800db0e:	701a      	strb	r2, [r3, #0]
										n3++;
 800db10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db12:	3301      	adds	r3, #1
 800db14:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800db16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1c:	441a      	add	r2, r3
 800db1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db20:	4413      	add	r3, r2
 800db22:	69fa      	ldr	r2, [r7, #28]
 800db24:	429a      	cmp	r2, r3
 800db26:	dae1      	bge.n	800daec <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800db28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2e:	4413      	add	r3, r2
 800db30:	1e5a      	subs	r2, r3, #1
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	601a      	str	r2, [r3, #0]
							estado=3;
 800db36:	2303      	movs	r3, #3
 800db38:	623b      	str	r3, [r7, #32]
							return(estado);
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	e298      	b.n	800e070 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800db3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db40:	2b02      	cmp	r3, #2
 800db42:	f040 80be 	bne.w	800dcc2 <FT_String_ND+0x2d2>
 800db46:	6a3b      	ldr	r3, [r7, #32]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	f040 80ba 	bne.w	800dcc2 <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800db4e:	e012      	b.n	800db76 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800db50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	1ad2      	subs	r2, r2, r3
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	4413      	add	r3, r2
 800db5a:	461a      	mov	r2, r3
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	441a      	add	r2, r3
 800db60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db64:	440b      	add	r3, r1
 800db66:	7812      	ldrb	r2, [r2, #0]
 800db68:	701a      	strb	r2, [r3, #0]
								n4++;
 800db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6c:	3301      	adds	r3, #1
 800db6e:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800db70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db74:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800db76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	1ad2      	subs	r2, r2, r3
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	4413      	add	r3, r2
 800db80:	69fa      	ldr	r2, [r7, #28]
 800db82:	429a      	cmp	r2, r3
 800db84:	dae4      	bge.n	800db50 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800db86:	499d      	ldr	r1, [pc, #628]	; (800ddfc <FT_String_ND+0x40c>)
 800db88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800db8a:	f000 fcb7 	bl	800e4fc <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800db8e:	499c      	ldr	r1, [pc, #624]	; (800de00 <FT_String_ND+0x410>)
 800db90:	2000      	movs	r0, #0
 800db92:	f000 fcb3 	bl	800e4fc <strtok>
 800db96:	4603      	mov	r3, r0
 800db98:	4618      	mov	r0, r3
 800db9a:	f000 faf0 	bl	800e17e <atoi>
 800db9e:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800dba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dba2:	3b01      	subs	r3, #1
 800dba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dba6:	429a      	cmp	r2, r3
 800dba8:	db02      	blt.n	800dbb0 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800dbaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbac:	3b01      	subs	r3, #1
 800dbae:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800dbb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbb2:	3306      	adds	r3, #6
 800dbb4:	222c      	movs	r2, #44	; 0x2c
 800dbb6:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800dbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbba:	2b09      	cmp	r3, #9
 800dbbc:	dc0d      	bgt.n	800dbda <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800dbbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbc0:	3308      	adds	r3, #8
 800dbc2:	223a      	movs	r2, #58	; 0x3a
 800dbc4:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	3309      	adds	r3, #9
 800dbca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbcc:	4413      	add	r3, r2
 800dbce:	2200      	movs	r2, #0
 800dbd0:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800dbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd4:	3309      	adds	r3, #9
 800dbd6:	627b      	str	r3, [r7, #36]	; 0x24
 800dbd8:	e021      	b.n	800dc1e <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbdc:	2b63      	cmp	r3, #99	; 0x63
 800dbde:	dc0d      	bgt.n	800dbfc <FT_String_ND+0x20c>
														{
															c[9]=':';
 800dbe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbe2:	3309      	adds	r3, #9
 800dbe4:	223a      	movs	r2, #58	; 0x3a
 800dbe6:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800dbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbea:	330a      	adds	r3, #10
 800dbec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbee:	4413      	add	r3, r2
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	330a      	adds	r3, #10
 800dbf8:	627b      	str	r3, [r7, #36]	; 0x24
 800dbfa:	e010      	b.n	800dc1e <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800dbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc02:	da0c      	bge.n	800dc1e <FT_String_ND+0x22e>
														{
															c[10]=':';
 800dc04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc06:	330a      	adds	r3, #10
 800dc08:	223a      	movs	r2, #58	; 0x3a
 800dc0a:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	330b      	adds	r3, #11
 800dc10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc12:	4413      	add	r3, r2
 800dc14:	2200      	movs	r2, #0
 800dc16:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	330b      	adds	r3, #11
 800dc1c:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800dc1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc22:	601a      	str	r2, [r3, #0]
							n4=0;
 800dc24:	2300      	movs	r3, #0
 800dc26:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dc28:	e016      	b.n	800dc58 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800dc2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	1ad2      	subs	r2, r2, r3
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	441a      	add	r2, r3
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	4413      	add	r3, r2
 800dc38:	461a      	mov	r2, r3
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	441a      	add	r2, r3
 800dc3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	1ac9      	subs	r1, r1, r3
 800dc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc46:	440b      	add	r3, r1
 800dc48:	4619      	mov	r1, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	440b      	add	r3, r1
 800dc4e:	7812      	ldrb	r2, [r2, #0]
 800dc50:	701a      	strb	r2, [r3, #0]
								n4++;
 800dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc54:	3301      	adds	r3, #1
 800dc56:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dc58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc5a:	69bb      	ldr	r3, [r7, #24]
 800dc5c:	1ad2      	subs	r2, r2, r3
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	441a      	add	r2, r3
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	4413      	add	r3, r2
 800dc66:	69fa      	ldr	r2, [r7, #28]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	dade      	bge.n	800dc2a <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800dc6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc70:	441a      	add	r2, r3
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	1e5a      	subs	r2, r3, #1
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800dc7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	1ad2      	subs	r2, r2, r3
 800dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc84:	441a      	add	r2, r3
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	4413      	add	r3, r2
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	4413      	add	r3, r2
 800dc90:	2200      	movs	r2, #0
 800dc92:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800dc94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	1ad2      	subs	r2, r2, r3
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	4413      	add	r3, r2
 800dc9e:	461a      	mov	r2, r3
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	4413      	add	r3, r2
 800dca4:	2200      	movs	r2, #0
 800dca6:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800dca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	1ad2      	subs	r2, r2, r3
 800dcae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb2:	440b      	add	r3, r1
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d102      	bne.n	800dcbe <FT_String_ND+0x2ce>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	701a      	strb	r2, [r3, #0]
							estado=3;
 800dcbe:	2303      	movs	r3, #3
 800dcc0:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800dcc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcc4:	2b03      	cmp	r3, #3
 800dcc6:	d146      	bne.n	800dd56 <FT_String_ND+0x366>
 800dcc8:	6a3b      	ldr	r3, [r7, #32]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d143      	bne.n	800dd56 <FT_String_ND+0x366>
						{
						n3=0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800dcd2:	e00e      	b.n	800dcf2 <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800dcd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcda:	4413      	add	r3, r2
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	441a      	add	r2, r3
 800dce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dce4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dce6:	440b      	add	r3, r1
 800dce8:	7812      	ldrb	r2, [r2, #0]
 800dcea:	701a      	strb	r2, [r3, #0]
										n3++;
 800dcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcee:	3301      	adds	r3, #1
 800dcf0:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800dcf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	dbec      	blt.n	800dcd4 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800dcfe:	e014      	b.n	800dd2a <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800dd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	441a      	add	r2, r3
 800dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0a:	4413      	add	r3, r2
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	441a      	add	r2, r3
 800dd12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd14:	6819      	ldr	r1, [r3, #0]
 800dd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd18:	440b      	add	r3, r1
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	68f9      	ldr	r1, [r7, #12]
 800dd1e:	440b      	add	r3, r1
 800dd20:	7812      	ldrb	r2, [r2, #0]
 800dd22:	701a      	strb	r2, [r3, #0]
										n5++;
 800dd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd26:	3301      	adds	r3, #1
 800dd28:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800dd2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	441a      	add	r2, r3
 800dd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd34:	441a      	add	r2, r3
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	dde0      	ble.n	800dd00 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800dd3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd44:	4413      	add	r3, r2
 800dd46:	1e5a      	subs	r2, r3, #1
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800dd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd50:	601a      	str	r2, [r3, #0]
							estado=3;
 800dd52:	2303      	movs	r3, #3
 800dd54:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800dd56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd58:	2b04      	cmp	r3, #4
 800dd5a:	f040 80bd 	bne.w	800ded8 <FT_String_ND+0x4e8>
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	f040 80b9 	bne.w	800ded8 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800dd66:	e012      	b.n	800dd8e <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800dd68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	1ad2      	subs	r2, r2, r3
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	4413      	add	r3, r2
 800dd72:	461a      	mov	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	441a      	add	r2, r3
 800dd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd7c:	440b      	add	r3, r1
 800dd7e:	7812      	ldrb	r2, [r2, #0]
 800dd80:	701a      	strb	r2, [r3, #0]
								n4++;
 800dd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd84:	3301      	adds	r3, #1
 800dd86:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800dd88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd8c:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800dd8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	1ad2      	subs	r2, r2, r3
 800dd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd96:	4413      	add	r3, r2
 800dd98:	69fa      	ldr	r2, [r7, #28]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	dae4      	bge.n	800dd68 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800dd9e:	4917      	ldr	r1, [pc, #92]	; (800ddfc <FT_String_ND+0x40c>)
 800dda0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dda2:	f000 fbab 	bl	800e4fc <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800dda6:	4916      	ldr	r1, [pc, #88]	; (800de00 <FT_String_ND+0x410>)
 800dda8:	2000      	movs	r0, #0
 800ddaa:	f000 fba7 	bl	800e4fc <strtok>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f000 f9e4 	bl	800e17e <atoi>
 800ddb6:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800ddb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	db02      	blt.n	800ddc8 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800ddc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ddc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddca:	3306      	adds	r3, #6
 800ddcc:	222c      	movs	r2, #44	; 0x2c
 800ddce:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ddd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd2:	2b09      	cmp	r3, #9
 800ddd4:	dc07      	bgt.n	800dde6 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800ddd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddd8:	3308      	adds	r3, #8
 800ddda:	223a      	movs	r2, #58	; 0x3a
 800dddc:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800ddde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde0:	3309      	adds	r3, #9
 800dde2:	627b      	str	r3, [r7, #36]	; 0x24
 800dde4:	e019      	b.n	800de1a <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800dde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde8:	2b63      	cmp	r3, #99	; 0x63
 800ddea:	dc0b      	bgt.n	800de04 <FT_String_ND+0x414>
														{
															c[9]=':';
 800ddec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddee:	3309      	adds	r3, #9
 800ddf0:	223a      	movs	r2, #58	; 0x3a
 800ddf2:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	330a      	adds	r3, #10
 800ddf8:	627b      	str	r3, [r7, #36]	; 0x24
 800ddfa:	e00e      	b.n	800de1a <FT_String_ND+0x42a>
 800ddfc:	0800fbdc 	.word	0x0800fbdc
 800de00:	0800fbe0 	.word	0x0800fbe0
														}
														else
														{
														if (lngd < 1000)
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de0a:	da06      	bge.n	800de1a <FT_String_ND+0x42a>
														{
															c[10]=':';
 800de0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de0e:	330a      	adds	r3, #10
 800de10:	223a      	movs	r2, #58	; 0x3a
 800de12:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	330b      	adds	r3, #11
 800de18:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800de1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de1e:	601a      	str	r2, [r3, #0]
							n4=0;
 800de20:	2300      	movs	r3, #0
 800de22:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800de24:	e016      	b.n	800de54 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800de26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	1ad2      	subs	r2, r2, r3
 800de2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2e:	441a      	add	r2, r3
 800de30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de32:	4413      	add	r3, r2
 800de34:	461a      	mov	r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	441a      	add	r2, r3
 800de3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	1ac9      	subs	r1, r1, r3
 800de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de42:	440b      	add	r3, r1
 800de44:	4619      	mov	r1, r3
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	440b      	add	r3, r1
 800de4a:	7812      	ldrb	r2, [r2, #0]
 800de4c:	701a      	strb	r2, [r3, #0]
								n4++;
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	3301      	adds	r3, #1
 800de52:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800de54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	1ad2      	subs	r2, r2, r3
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	441a      	add	r2, r3
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	4413      	add	r3, r2
 800de62:	69fa      	ldr	r2, [r7, #28]
 800de64:	429a      	cmp	r2, r3
 800de66:	dade      	bge.n	800de26 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800de68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6c:	441a      	add	r2, r3
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	1e5a      	subs	r2, r3, #1
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	601a      	str	r2, [r3, #0]
							n5=0;
 800de78:	2300      	movs	r3, #0
 800de7a:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800de7c:	e00f      	b.n	800de9e <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800de7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de82:	1ad2      	subs	r2, r2, r3
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	4413      	add	r3, r2
 800de88:	461a      	mov	r2, r3
 800de8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de8c:	441a      	add	r2, r3
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800de92:	440b      	add	r3, r1
 800de94:	7812      	ldrb	r2, [r2, #0]
 800de96:	701a      	strb	r2, [r3, #0]
								n5++;
 800de98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9a:	3301      	adds	r3, #1
 800de9c:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800de9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea2:	1ad2      	subs	r2, r2, r3
 800dea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea6:	441a      	add	r2, r3
 800dea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	429a      	cmp	r2, r3
 800deae:	dbe6      	blt.n	800de7e <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800deb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deb4:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800deb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debc:	441a      	add	r2, r3
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	1ad2      	subs	r2, r2, r3
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4413      	add	r3, r2
 800dec8:	69fa      	ldr	r2, [r7, #28]
 800deca:	429a      	cmp	r2, r3
 800decc:	d102      	bne.n	800ded4 <FT_String_ND+0x4e4>
							{
								estado=4;
 800dece:	2304      	movs	r3, #4
 800ded0:	623b      	str	r3, [r7, #32]
 800ded2:	e001      	b.n	800ded8 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800ded4:	2305      	movs	r3, #5
 800ded6:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ded8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deda:	2b05      	cmp	r3, #5
 800dedc:	f040 80c5 	bne.w	800e06a <FT_String_ND+0x67a>
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	f040 80c1 	bne.w	800e06a <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800dee8:	e012      	b.n	800df10 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800deea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	1ad2      	subs	r2, r2, r3
 800def0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def2:	4413      	add	r3, r2
 800def4:	461a      	mov	r2, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	441a      	add	r2, r3
 800defa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800defe:	440b      	add	r3, r1
 800df00:	7812      	ldrb	r2, [r2, #0]
 800df02:	701a      	strb	r2, [r3, #0]
								n4++;
 800df04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df06:	3301      	adds	r3, #1
 800df08:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800df0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df0e:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800df10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	1ad2      	subs	r2, r2, r3
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	4413      	add	r3, r2
 800df1a:	69fa      	ldr	r2, [r7, #28]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	dae4      	bge.n	800deea <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800df20:	4955      	ldr	r1, [pc, #340]	; (800e078 <FT_String_ND+0x688>)
 800df22:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800df24:	f000 faea 	bl	800e4fc <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800df28:	4954      	ldr	r1, [pc, #336]	; (800e07c <FT_String_ND+0x68c>)
 800df2a:	2000      	movs	r0, #0
 800df2c:	f000 fae6 	bl	800e4fc <strtok>
 800df30:	4603      	mov	r3, r0
 800df32:	4618      	mov	r0, r3
 800df34:	f000 f923 	bl	800e17e <atoi>
 800df38:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800df3a:	4950      	ldr	r1, [pc, #320]	; (800e07c <FT_String_ND+0x68c>)
 800df3c:	2000      	movs	r0, #0
 800df3e:	f000 fadd 	bl	800e4fc <strtok>
 800df42:	4603      	mov	r3, r0
 800df44:	4618      	mov	r0, r3
 800df46:	f000 f91a 	bl	800e17e <atoi>
 800df4a:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800df4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df4e:	3b01      	subs	r3, #1
 800df50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df52:	429a      	cmp	r2, r3
 800df54:	db02      	blt.n	800df5c <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800df56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df58:	3b01      	subs	r3, #1
 800df5a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800df5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df5e:	3306      	adds	r3, #6
 800df60:	222c      	movs	r2, #44	; 0x2c
 800df62:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800df64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df66:	2b09      	cmp	r3, #9
 800df68:	dc07      	bgt.n	800df7a <FT_String_ND+0x58a>
											{
												c[10]=':';
 800df6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df6c:	330a      	adds	r3, #10
 800df6e:	223a      	movs	r2, #58	; 0x3a
 800df70:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800df72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df74:	330b      	adds	r3, #11
 800df76:	627b      	str	r3, [r7, #36]	; 0x24
 800df78:	e015      	b.n	800dfa6 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800df7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7c:	2b63      	cmp	r3, #99	; 0x63
 800df7e:	dc07      	bgt.n	800df90 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800df80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df82:	330b      	adds	r3, #11
 800df84:	223a      	movs	r2, #58	; 0x3a
 800df86:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	330c      	adds	r3, #12
 800df8c:	627b      	str	r3, [r7, #36]	; 0x24
 800df8e:	e00a      	b.n	800dfa6 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800df90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df96:	da06      	bge.n	800dfa6 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800df98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df9a:	330c      	adds	r3, #12
 800df9c:	223a      	movs	r2, #58	; 0x3a
 800df9e:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800dfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa2:	330d      	adds	r3, #13
 800dfa4:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800dfa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfaa:	601a      	str	r2, [r3, #0]
							n4=0;
 800dfac:	2300      	movs	r3, #0
 800dfae:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dfb0:	e016      	b.n	800dfe0 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800dfb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dfb4:	69bb      	ldr	r3, [r7, #24]
 800dfb6:	1ad2      	subs	r2, r2, r3
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfba:	441a      	add	r2, r3
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	4413      	add	r3, r2
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	441a      	add	r2, r3
 800dfc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	1ac9      	subs	r1, r1, r3
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	440b      	add	r3, r1
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	440b      	add	r3, r1
 800dfd6:	7812      	ldrb	r2, [r2, #0]
 800dfd8:	701a      	strb	r2, [r3, #0]
								n4++;
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	3301      	adds	r3, #1
 800dfde:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dfe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	1ad2      	subs	r2, r2, r3
 800dfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe8:	441a      	add	r2, r3
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	4413      	add	r3, r2
 800dfee:	69fa      	ldr	r2, [r7, #28]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	dade      	bge.n	800dfb2 <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800dff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	441a      	add	r2, r3
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	1e5a      	subs	r2, r3, #1
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	601a      	str	r2, [r3, #0]
							n5=0;
 800e004:	2300      	movs	r3, #0
 800e006:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e008:	e00f      	b.n	800e02a <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	1ad2      	subs	r2, r2, r3
 800e010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e012:	4413      	add	r3, r2
 800e014:	461a      	mov	r2, r3
 800e016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e018:	441a      	add	r2, r3
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e01e:	440b      	add	r3, r1
 800e020:	7812      	ldrb	r2, [r2, #0]
 800e022:	701a      	strb	r2, [r3, #0]
								n5++;
 800e024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e026:	3301      	adds	r3, #1
 800e028:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02e:	1ad2      	subs	r2, r2, r3
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	441a      	add	r2, r3
 800e034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	429a      	cmp	r2, r3
 800e03a:	dbe6      	blt.n	800e00a <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e03e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e040:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	441a      	add	r2, r3
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	1ad2      	subs	r2, r2, r3
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4413      	add	r3, r2
 800e054:	69fa      	ldr	r2, [r7, #28]
 800e056:	429a      	cmp	r2, r3
 800e058:	d105      	bne.n	800e066 <FT_String_ND+0x676>
							{
								estado=4;
 800e05a:	2304      	movs	r3, #4
 800e05c:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800e05e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	e001      	b.n	800e06a <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800e066:	2305      	movs	r3, #5
 800e068:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	e000      	b.n	800e070 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800e06e:	2302      	movs	r3, #2
			}
}
 800e070:	4618      	mov	r0, r3
 800e072:	3740      	adds	r7, #64	; 0x40
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	0800fbdc 	.word	0x0800fbdc
 800e07c:	0800fbe0 	.word	0x0800fbe0

0800e080 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b088      	sub	sp, #32
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800e08a:	2330      	movs	r3, #48	; 0x30
 800e08c:	60bb      	str	r3, [r7, #8]
 800e08e:	f107 030c 	add.w	r3, r7, #12
 800e092:	2200      	movs	r2, #0
 800e094:	601a      	str	r2, [r3, #0]
 800e096:	605a      	str	r2, [r3, #4]
 800e098:	609a      	str	r2, [r3, #8]
 800e09a:	60da      	str	r2, [r3, #12]
int i=0;	
 800e09c:	2300      	movs	r3, #0
 800e09e:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800e0a0:	f107 0308 	add.w	r3, r7, #8
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	490f      	ldr	r1, [pc, #60]	; (800e0e4 <INTOA+0x64>)
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 f9a9 	bl	800e400 <siprintf>
		while(i<=strlen(origbuff))
 800e0ae:	e00b      	b.n	800e0c8 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	1c5a      	adds	r2, r3, #1
 800e0b4:	603a      	str	r2, [r7, #0]
 800e0b6:	f107 0108 	add.w	r1, r7, #8
 800e0ba:	69fa      	ldr	r2, [r7, #28]
 800e0bc:	440a      	add	r2, r1
 800e0be:	7812      	ldrb	r2, [r2, #0]
 800e0c0:	701a      	strb	r2, [r3, #0]
		i++;
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800e0c8:	f107 0308 	add.w	r3, r7, #8
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7f2 f891 	bl	80001f4 <strlen>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d2ea      	bcs.n	800e0b0 <INTOA+0x30>
		}
		return(i);
 800e0da:	69fb      	ldr	r3, [r7, #28]
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3720      	adds	r7, #32
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	0800fbe4 	.word	0x0800fbe4

0800e0e8 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
 800e0f4:	603b      	str	r3, [r7, #0]
int x =0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800e0fe:	f107 0310 	add.w	r3, r7, #16
 800e102:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d105      	bne.n	800e116 <CopiaVector+0x2e>
 800e10a:	68b8      	ldr	r0, [r7, #8]
 800e10c:	f7f2 f872 	bl	80001f4 <strlen>
 800e110:	4603      	mov	r3, r0
 800e112:	61bb      	str	r3, [r7, #24]
 800e114:	e02e      	b.n	800e174 <CopiaVector+0x8c>
else
	{
		x=c;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e120:	dd01      	ble.n	800e126 <CopiaVector+0x3e>
			{
				return(1);
 800e122:	2301      	movs	r3, #1
 800e124:	e027      	b.n	800e176 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800e126:	2300      	movs	r3, #0
 800e128:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e12a:	e00a      	b.n	800e142 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	1c53      	adds	r3, r2, #1
 800e130:	60bb      	str	r3, [r7, #8]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	1c59      	adds	r1, r3, #1
 800e136:	60f9      	str	r1, [r7, #12]
 800e138:	7812      	ldrb	r2, [r2, #0]
 800e13a:	701a      	strb	r2, [r3, #0]
					p++;
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	3301      	adds	r3, #1
 800e140:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e142:	69fa      	ldr	r2, [r7, #28]
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	429a      	cmp	r2, r3
 800e148:	dbf0      	blt.n	800e12c <CopiaVector+0x44>
				}
				if (d==1)
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d111      	bne.n	800e174 <CopiaVector+0x8c>
				{
				  p=c;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e154:	e008      	b.n	800e168 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	1c5a      	adds	r2, r3, #1
 800e15a:	60fa      	str	r2, [r7, #12]
 800e15c:	697a      	ldr	r2, [r7, #20]
 800e15e:	7812      	ldrb	r2, [r2, #0]
 800e160:	701a      	strb	r2, [r3, #0]
					  p++;
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	3301      	adds	r3, #1
 800e166:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	daf2      	bge.n	800e156 <CopiaVector+0x6e>
				  }
				return (0);
 800e170:	2300      	movs	r3, #0
 800e172:	e000      	b.n	800e176 <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800e174:	2301      	movs	r3, #1
}
 800e176:	4618      	mov	r0, r3
 800e178:	3720      	adds	r7, #32
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <atoi>:
 800e17e:	220a      	movs	r2, #10
 800e180:	2100      	movs	r1, #0
 800e182:	f000 b883 	b.w	800e28c <strtol>
	...

0800e188 <_strtol_l.constprop.0>:
 800e188:	2b01      	cmp	r3, #1
 800e18a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e18e:	d001      	beq.n	800e194 <_strtol_l.constprop.0+0xc>
 800e190:	2b24      	cmp	r3, #36	; 0x24
 800e192:	d906      	bls.n	800e1a2 <_strtol_l.constprop.0+0x1a>
 800e194:	f000 fa54 	bl	800e640 <__errno>
 800e198:	2316      	movs	r3, #22
 800e19a:	6003      	str	r3, [r0, #0]
 800e19c:	2000      	movs	r0, #0
 800e19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e288 <_strtol_l.constprop.0+0x100>
 800e1a6:	460d      	mov	r5, r1
 800e1a8:	462e      	mov	r6, r5
 800e1aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1ae:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e1b2:	f017 0708 	ands.w	r7, r7, #8
 800e1b6:	d1f7      	bne.n	800e1a8 <_strtol_l.constprop.0+0x20>
 800e1b8:	2c2d      	cmp	r4, #45	; 0x2d
 800e1ba:	d132      	bne.n	800e222 <_strtol_l.constprop.0+0x9a>
 800e1bc:	782c      	ldrb	r4, [r5, #0]
 800e1be:	2701      	movs	r7, #1
 800e1c0:	1cb5      	adds	r5, r6, #2
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d05b      	beq.n	800e27e <_strtol_l.constprop.0+0xf6>
 800e1c6:	2b10      	cmp	r3, #16
 800e1c8:	d109      	bne.n	800e1de <_strtol_l.constprop.0+0x56>
 800e1ca:	2c30      	cmp	r4, #48	; 0x30
 800e1cc:	d107      	bne.n	800e1de <_strtol_l.constprop.0+0x56>
 800e1ce:	782c      	ldrb	r4, [r5, #0]
 800e1d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e1d4:	2c58      	cmp	r4, #88	; 0x58
 800e1d6:	d14d      	bne.n	800e274 <_strtol_l.constprop.0+0xec>
 800e1d8:	786c      	ldrb	r4, [r5, #1]
 800e1da:	2310      	movs	r3, #16
 800e1dc:	3502      	adds	r5, #2
 800e1de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e1e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e1e6:	f04f 0e00 	mov.w	lr, #0
 800e1ea:	fbb8 f9f3 	udiv	r9, r8, r3
 800e1ee:	4676      	mov	r6, lr
 800e1f0:	fb03 8a19 	mls	sl, r3, r9, r8
 800e1f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e1f8:	f1bc 0f09 	cmp.w	ip, #9
 800e1fc:	d816      	bhi.n	800e22c <_strtol_l.constprop.0+0xa4>
 800e1fe:	4664      	mov	r4, ip
 800e200:	42a3      	cmp	r3, r4
 800e202:	dd24      	ble.n	800e24e <_strtol_l.constprop.0+0xc6>
 800e204:	f1be 3fff 	cmp.w	lr, #4294967295
 800e208:	d008      	beq.n	800e21c <_strtol_l.constprop.0+0x94>
 800e20a:	45b1      	cmp	r9, r6
 800e20c:	d31c      	bcc.n	800e248 <_strtol_l.constprop.0+0xc0>
 800e20e:	d101      	bne.n	800e214 <_strtol_l.constprop.0+0x8c>
 800e210:	45a2      	cmp	sl, r4
 800e212:	db19      	blt.n	800e248 <_strtol_l.constprop.0+0xc0>
 800e214:	fb06 4603 	mla	r6, r6, r3, r4
 800e218:	f04f 0e01 	mov.w	lr, #1
 800e21c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e220:	e7e8      	b.n	800e1f4 <_strtol_l.constprop.0+0x6c>
 800e222:	2c2b      	cmp	r4, #43	; 0x2b
 800e224:	bf04      	itt	eq
 800e226:	782c      	ldrbeq	r4, [r5, #0]
 800e228:	1cb5      	addeq	r5, r6, #2
 800e22a:	e7ca      	b.n	800e1c2 <_strtol_l.constprop.0+0x3a>
 800e22c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e230:	f1bc 0f19 	cmp.w	ip, #25
 800e234:	d801      	bhi.n	800e23a <_strtol_l.constprop.0+0xb2>
 800e236:	3c37      	subs	r4, #55	; 0x37
 800e238:	e7e2      	b.n	800e200 <_strtol_l.constprop.0+0x78>
 800e23a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e23e:	f1bc 0f19 	cmp.w	ip, #25
 800e242:	d804      	bhi.n	800e24e <_strtol_l.constprop.0+0xc6>
 800e244:	3c57      	subs	r4, #87	; 0x57
 800e246:	e7db      	b.n	800e200 <_strtol_l.constprop.0+0x78>
 800e248:	f04f 3eff 	mov.w	lr, #4294967295
 800e24c:	e7e6      	b.n	800e21c <_strtol_l.constprop.0+0x94>
 800e24e:	f1be 3fff 	cmp.w	lr, #4294967295
 800e252:	d105      	bne.n	800e260 <_strtol_l.constprop.0+0xd8>
 800e254:	2322      	movs	r3, #34	; 0x22
 800e256:	6003      	str	r3, [r0, #0]
 800e258:	4646      	mov	r6, r8
 800e25a:	b942      	cbnz	r2, 800e26e <_strtol_l.constprop.0+0xe6>
 800e25c:	4630      	mov	r0, r6
 800e25e:	e79e      	b.n	800e19e <_strtol_l.constprop.0+0x16>
 800e260:	b107      	cbz	r7, 800e264 <_strtol_l.constprop.0+0xdc>
 800e262:	4276      	negs	r6, r6
 800e264:	2a00      	cmp	r2, #0
 800e266:	d0f9      	beq.n	800e25c <_strtol_l.constprop.0+0xd4>
 800e268:	f1be 0f00 	cmp.w	lr, #0
 800e26c:	d000      	beq.n	800e270 <_strtol_l.constprop.0+0xe8>
 800e26e:	1e69      	subs	r1, r5, #1
 800e270:	6011      	str	r1, [r2, #0]
 800e272:	e7f3      	b.n	800e25c <_strtol_l.constprop.0+0xd4>
 800e274:	2430      	movs	r4, #48	; 0x30
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1b1      	bne.n	800e1de <_strtol_l.constprop.0+0x56>
 800e27a:	2308      	movs	r3, #8
 800e27c:	e7af      	b.n	800e1de <_strtol_l.constprop.0+0x56>
 800e27e:	2c30      	cmp	r4, #48	; 0x30
 800e280:	d0a5      	beq.n	800e1ce <_strtol_l.constprop.0+0x46>
 800e282:	230a      	movs	r3, #10
 800e284:	e7ab      	b.n	800e1de <_strtol_l.constprop.0+0x56>
 800e286:	bf00      	nop
 800e288:	0800fc01 	.word	0x0800fc01

0800e28c <strtol>:
 800e28c:	4613      	mov	r3, r2
 800e28e:	460a      	mov	r2, r1
 800e290:	4601      	mov	r1, r0
 800e292:	4802      	ldr	r0, [pc, #8]	; (800e29c <strtol+0x10>)
 800e294:	6800      	ldr	r0, [r0, #0]
 800e296:	f7ff bf77 	b.w	800e188 <_strtol_l.constprop.0>
 800e29a:	bf00      	nop
 800e29c:	2000017c 	.word	0x2000017c

0800e2a0 <std>:
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	b510      	push	{r4, lr}
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	e9c0 3300 	strd	r3, r3, [r0]
 800e2aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2ae:	6083      	str	r3, [r0, #8]
 800e2b0:	8181      	strh	r1, [r0, #12]
 800e2b2:	6643      	str	r3, [r0, #100]	; 0x64
 800e2b4:	81c2      	strh	r2, [r0, #14]
 800e2b6:	6183      	str	r3, [r0, #24]
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	2208      	movs	r2, #8
 800e2bc:	305c      	adds	r0, #92	; 0x5c
 800e2be:	f000 f902 	bl	800e4c6 <memset>
 800e2c2:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <std+0x38>)
 800e2c4:	6263      	str	r3, [r4, #36]	; 0x24
 800e2c6:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <std+0x3c>)
 800e2c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2ca:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <std+0x40>)
 800e2cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2ce:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <std+0x44>)
 800e2d0:	6224      	str	r4, [r4, #32]
 800e2d2:	6323      	str	r3, [r4, #48]	; 0x30
 800e2d4:	bd10      	pop	{r4, pc}
 800e2d6:	bf00      	nop
 800e2d8:	0800e441 	.word	0x0800e441
 800e2dc:	0800e463 	.word	0x0800e463
 800e2e0:	0800e49b 	.word	0x0800e49b
 800e2e4:	0800e4bf 	.word	0x0800e4bf

0800e2e8 <stdio_exit_handler>:
 800e2e8:	4a02      	ldr	r2, [pc, #8]	; (800e2f4 <stdio_exit_handler+0xc>)
 800e2ea:	4903      	ldr	r1, [pc, #12]	; (800e2f8 <stdio_exit_handler+0x10>)
 800e2ec:	4803      	ldr	r0, [pc, #12]	; (800e2fc <stdio_exit_handler+0x14>)
 800e2ee:	f000 b869 	b.w	800e3c4 <_fwalk_sglue>
 800e2f2:	bf00      	nop
 800e2f4:	20000124 	.word	0x20000124
 800e2f8:	0800efc1 	.word	0x0800efc1
 800e2fc:	20000130 	.word	0x20000130

0800e300 <cleanup_stdio>:
 800e300:	6841      	ldr	r1, [r0, #4]
 800e302:	4b0c      	ldr	r3, [pc, #48]	; (800e334 <cleanup_stdio+0x34>)
 800e304:	4299      	cmp	r1, r3
 800e306:	b510      	push	{r4, lr}
 800e308:	4604      	mov	r4, r0
 800e30a:	d001      	beq.n	800e310 <cleanup_stdio+0x10>
 800e30c:	f000 fe58 	bl	800efc0 <_fflush_r>
 800e310:	68a1      	ldr	r1, [r4, #8]
 800e312:	4b09      	ldr	r3, [pc, #36]	; (800e338 <cleanup_stdio+0x38>)
 800e314:	4299      	cmp	r1, r3
 800e316:	d002      	beq.n	800e31e <cleanup_stdio+0x1e>
 800e318:	4620      	mov	r0, r4
 800e31a:	f000 fe51 	bl	800efc0 <_fflush_r>
 800e31e:	68e1      	ldr	r1, [r4, #12]
 800e320:	4b06      	ldr	r3, [pc, #24]	; (800e33c <cleanup_stdio+0x3c>)
 800e322:	4299      	cmp	r1, r3
 800e324:	d004      	beq.n	800e330 <cleanup_stdio+0x30>
 800e326:	4620      	mov	r0, r4
 800e328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e32c:	f000 be48 	b.w	800efc0 <_fflush_r>
 800e330:	bd10      	pop	{r4, pc}
 800e332:	bf00      	nop
 800e334:	200035c0 	.word	0x200035c0
 800e338:	20003628 	.word	0x20003628
 800e33c:	20003690 	.word	0x20003690

0800e340 <global_stdio_init.part.0>:
 800e340:	b510      	push	{r4, lr}
 800e342:	4b0b      	ldr	r3, [pc, #44]	; (800e370 <global_stdio_init.part.0+0x30>)
 800e344:	4c0b      	ldr	r4, [pc, #44]	; (800e374 <global_stdio_init.part.0+0x34>)
 800e346:	4a0c      	ldr	r2, [pc, #48]	; (800e378 <global_stdio_init.part.0+0x38>)
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	4620      	mov	r0, r4
 800e34c:	2200      	movs	r2, #0
 800e34e:	2104      	movs	r1, #4
 800e350:	f7ff ffa6 	bl	800e2a0 <std>
 800e354:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e358:	2201      	movs	r2, #1
 800e35a:	2109      	movs	r1, #9
 800e35c:	f7ff ffa0 	bl	800e2a0 <std>
 800e360:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e364:	2202      	movs	r2, #2
 800e366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e36a:	2112      	movs	r1, #18
 800e36c:	f7ff bf98 	b.w	800e2a0 <std>
 800e370:	200036f8 	.word	0x200036f8
 800e374:	200035c0 	.word	0x200035c0
 800e378:	0800e2e9 	.word	0x0800e2e9

0800e37c <__sfp_lock_acquire>:
 800e37c:	4801      	ldr	r0, [pc, #4]	; (800e384 <__sfp_lock_acquire+0x8>)
 800e37e:	f000 b989 	b.w	800e694 <__retarget_lock_acquire_recursive>
 800e382:	bf00      	nop
 800e384:	20003701 	.word	0x20003701

0800e388 <__sfp_lock_release>:
 800e388:	4801      	ldr	r0, [pc, #4]	; (800e390 <__sfp_lock_release+0x8>)
 800e38a:	f000 b984 	b.w	800e696 <__retarget_lock_release_recursive>
 800e38e:	bf00      	nop
 800e390:	20003701 	.word	0x20003701

0800e394 <__sinit>:
 800e394:	b510      	push	{r4, lr}
 800e396:	4604      	mov	r4, r0
 800e398:	f7ff fff0 	bl	800e37c <__sfp_lock_acquire>
 800e39c:	6a23      	ldr	r3, [r4, #32]
 800e39e:	b11b      	cbz	r3, 800e3a8 <__sinit+0x14>
 800e3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3a4:	f7ff bff0 	b.w	800e388 <__sfp_lock_release>
 800e3a8:	4b04      	ldr	r3, [pc, #16]	; (800e3bc <__sinit+0x28>)
 800e3aa:	6223      	str	r3, [r4, #32]
 800e3ac:	4b04      	ldr	r3, [pc, #16]	; (800e3c0 <__sinit+0x2c>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d1f5      	bne.n	800e3a0 <__sinit+0xc>
 800e3b4:	f7ff ffc4 	bl	800e340 <global_stdio_init.part.0>
 800e3b8:	e7f2      	b.n	800e3a0 <__sinit+0xc>
 800e3ba:	bf00      	nop
 800e3bc:	0800e301 	.word	0x0800e301
 800e3c0:	200036f8 	.word	0x200036f8

0800e3c4 <_fwalk_sglue>:
 800e3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c8:	4607      	mov	r7, r0
 800e3ca:	4688      	mov	r8, r1
 800e3cc:	4614      	mov	r4, r2
 800e3ce:	2600      	movs	r6, #0
 800e3d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3d4:	f1b9 0901 	subs.w	r9, r9, #1
 800e3d8:	d505      	bpl.n	800e3e6 <_fwalk_sglue+0x22>
 800e3da:	6824      	ldr	r4, [r4, #0]
 800e3dc:	2c00      	cmp	r4, #0
 800e3de:	d1f7      	bne.n	800e3d0 <_fwalk_sglue+0xc>
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e6:	89ab      	ldrh	r3, [r5, #12]
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d907      	bls.n	800e3fc <_fwalk_sglue+0x38>
 800e3ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	d003      	beq.n	800e3fc <_fwalk_sglue+0x38>
 800e3f4:	4629      	mov	r1, r5
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	47c0      	blx	r8
 800e3fa:	4306      	orrs	r6, r0
 800e3fc:	3568      	adds	r5, #104	; 0x68
 800e3fe:	e7e9      	b.n	800e3d4 <_fwalk_sglue+0x10>

0800e400 <siprintf>:
 800e400:	b40e      	push	{r1, r2, r3}
 800e402:	b500      	push	{lr}
 800e404:	b09c      	sub	sp, #112	; 0x70
 800e406:	ab1d      	add	r3, sp, #116	; 0x74
 800e408:	9002      	str	r0, [sp, #8]
 800e40a:	9006      	str	r0, [sp, #24]
 800e40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e410:	4809      	ldr	r0, [pc, #36]	; (800e438 <siprintf+0x38>)
 800e412:	9107      	str	r1, [sp, #28]
 800e414:	9104      	str	r1, [sp, #16]
 800e416:	4909      	ldr	r1, [pc, #36]	; (800e43c <siprintf+0x3c>)
 800e418:	f853 2b04 	ldr.w	r2, [r3], #4
 800e41c:	9105      	str	r1, [sp, #20]
 800e41e:	6800      	ldr	r0, [r0, #0]
 800e420:	9301      	str	r3, [sp, #4]
 800e422:	a902      	add	r1, sp, #8
 800e424:	f000 fab8 	bl	800e998 <_svfiprintf_r>
 800e428:	9b02      	ldr	r3, [sp, #8]
 800e42a:	2200      	movs	r2, #0
 800e42c:	701a      	strb	r2, [r3, #0]
 800e42e:	b01c      	add	sp, #112	; 0x70
 800e430:	f85d eb04 	ldr.w	lr, [sp], #4
 800e434:	b003      	add	sp, #12
 800e436:	4770      	bx	lr
 800e438:	2000017c 	.word	0x2000017c
 800e43c:	ffff0208 	.word	0xffff0208

0800e440 <__sread>:
 800e440:	b510      	push	{r4, lr}
 800e442:	460c      	mov	r4, r1
 800e444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e448:	f000 f8d6 	bl	800e5f8 <_read_r>
 800e44c:	2800      	cmp	r0, #0
 800e44e:	bfab      	itete	ge
 800e450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e452:	89a3      	ldrhlt	r3, [r4, #12]
 800e454:	181b      	addge	r3, r3, r0
 800e456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e45a:	bfac      	ite	ge
 800e45c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e45e:	81a3      	strhlt	r3, [r4, #12]
 800e460:	bd10      	pop	{r4, pc}

0800e462 <__swrite>:
 800e462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e466:	461f      	mov	r7, r3
 800e468:	898b      	ldrh	r3, [r1, #12]
 800e46a:	05db      	lsls	r3, r3, #23
 800e46c:	4605      	mov	r5, r0
 800e46e:	460c      	mov	r4, r1
 800e470:	4616      	mov	r6, r2
 800e472:	d505      	bpl.n	800e480 <__swrite+0x1e>
 800e474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e478:	2302      	movs	r3, #2
 800e47a:	2200      	movs	r2, #0
 800e47c:	f000 f8aa 	bl	800e5d4 <_lseek_r>
 800e480:	89a3      	ldrh	r3, [r4, #12]
 800e482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e48a:	81a3      	strh	r3, [r4, #12]
 800e48c:	4632      	mov	r2, r6
 800e48e:	463b      	mov	r3, r7
 800e490:	4628      	mov	r0, r5
 800e492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e496:	f000 b8c1 	b.w	800e61c <_write_r>

0800e49a <__sseek>:
 800e49a:	b510      	push	{r4, lr}
 800e49c:	460c      	mov	r4, r1
 800e49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4a2:	f000 f897 	bl	800e5d4 <_lseek_r>
 800e4a6:	1c43      	adds	r3, r0, #1
 800e4a8:	89a3      	ldrh	r3, [r4, #12]
 800e4aa:	bf15      	itete	ne
 800e4ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4b6:	81a3      	strheq	r3, [r4, #12]
 800e4b8:	bf18      	it	ne
 800e4ba:	81a3      	strhne	r3, [r4, #12]
 800e4bc:	bd10      	pop	{r4, pc}

0800e4be <__sclose>:
 800e4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c2:	f000 b877 	b.w	800e5b4 <_close_r>

0800e4c6 <memset>:
 800e4c6:	4402      	add	r2, r0
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d100      	bne.n	800e4d0 <memset+0xa>
 800e4ce:	4770      	bx	lr
 800e4d0:	f803 1b01 	strb.w	r1, [r3], #1
 800e4d4:	e7f9      	b.n	800e4ca <memset+0x4>

0800e4d6 <strncat>:
 800e4d6:	b530      	push	{r4, r5, lr}
 800e4d8:	4604      	mov	r4, r0
 800e4da:	7825      	ldrb	r5, [r4, #0]
 800e4dc:	4623      	mov	r3, r4
 800e4de:	3401      	adds	r4, #1
 800e4e0:	2d00      	cmp	r5, #0
 800e4e2:	d1fa      	bne.n	800e4da <strncat+0x4>
 800e4e4:	3a01      	subs	r2, #1
 800e4e6:	d304      	bcc.n	800e4f2 <strncat+0x1c>
 800e4e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4ec:	f803 4b01 	strb.w	r4, [r3], #1
 800e4f0:	b904      	cbnz	r4, 800e4f4 <strncat+0x1e>
 800e4f2:	bd30      	pop	{r4, r5, pc}
 800e4f4:	2a00      	cmp	r2, #0
 800e4f6:	d1f5      	bne.n	800e4e4 <strncat+0xe>
 800e4f8:	701a      	strb	r2, [r3, #0]
 800e4fa:	e7f3      	b.n	800e4e4 <strncat+0xe>

0800e4fc <strtok>:
 800e4fc:	4b16      	ldr	r3, [pc, #88]	; (800e558 <strtok+0x5c>)
 800e4fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e500:	681e      	ldr	r6, [r3, #0]
 800e502:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800e504:	4605      	mov	r5, r0
 800e506:	b9fc      	cbnz	r4, 800e548 <strtok+0x4c>
 800e508:	2050      	movs	r0, #80	; 0x50
 800e50a:	9101      	str	r1, [sp, #4]
 800e50c:	f000 f936 	bl	800e77c <malloc>
 800e510:	9901      	ldr	r1, [sp, #4]
 800e512:	6470      	str	r0, [r6, #68]	; 0x44
 800e514:	4602      	mov	r2, r0
 800e516:	b920      	cbnz	r0, 800e522 <strtok+0x26>
 800e518:	4b10      	ldr	r3, [pc, #64]	; (800e55c <strtok+0x60>)
 800e51a:	4811      	ldr	r0, [pc, #68]	; (800e560 <strtok+0x64>)
 800e51c:	215b      	movs	r1, #91	; 0x5b
 800e51e:	f000 f8c3 	bl	800e6a8 <__assert_func>
 800e522:	e9c0 4400 	strd	r4, r4, [r0]
 800e526:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e52a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e52e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e532:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e536:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e53a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e53e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e542:	6184      	str	r4, [r0, #24]
 800e544:	7704      	strb	r4, [r0, #28]
 800e546:	6244      	str	r4, [r0, #36]	; 0x24
 800e548:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800e54a:	2301      	movs	r3, #1
 800e54c:	4628      	mov	r0, r5
 800e54e:	b002      	add	sp, #8
 800e550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e554:	f000 b806 	b.w	800e564 <__strtok_r>
 800e558:	2000017c 	.word	0x2000017c
 800e55c:	0800fd01 	.word	0x0800fd01
 800e560:	0800fd18 	.word	0x0800fd18

0800e564 <__strtok_r>:
 800e564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e566:	b908      	cbnz	r0, 800e56c <__strtok_r+0x8>
 800e568:	6810      	ldr	r0, [r2, #0]
 800e56a:	b188      	cbz	r0, 800e590 <__strtok_r+0x2c>
 800e56c:	4604      	mov	r4, r0
 800e56e:	4620      	mov	r0, r4
 800e570:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e574:	460f      	mov	r7, r1
 800e576:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e57a:	b91e      	cbnz	r6, 800e584 <__strtok_r+0x20>
 800e57c:	b965      	cbnz	r5, 800e598 <__strtok_r+0x34>
 800e57e:	6015      	str	r5, [r2, #0]
 800e580:	4628      	mov	r0, r5
 800e582:	e005      	b.n	800e590 <__strtok_r+0x2c>
 800e584:	42b5      	cmp	r5, r6
 800e586:	d1f6      	bne.n	800e576 <__strtok_r+0x12>
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1f0      	bne.n	800e56e <__strtok_r+0xa>
 800e58c:	6014      	str	r4, [r2, #0]
 800e58e:	7003      	strb	r3, [r0, #0]
 800e590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e592:	461c      	mov	r4, r3
 800e594:	e00c      	b.n	800e5b0 <__strtok_r+0x4c>
 800e596:	b915      	cbnz	r5, 800e59e <__strtok_r+0x3a>
 800e598:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e59c:	460e      	mov	r6, r1
 800e59e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e5a2:	42ab      	cmp	r3, r5
 800e5a4:	d1f7      	bne.n	800e596 <__strtok_r+0x32>
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d0f3      	beq.n	800e592 <__strtok_r+0x2e>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e5b0:	6014      	str	r4, [r2, #0]
 800e5b2:	e7ed      	b.n	800e590 <__strtok_r+0x2c>

0800e5b4 <_close_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4d06      	ldr	r5, [pc, #24]	; (800e5d0 <_close_r+0x1c>)
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	4608      	mov	r0, r1
 800e5be:	602b      	str	r3, [r5, #0]
 800e5c0:	f7f3 ffbd 	bl	800253e <_close>
 800e5c4:	1c43      	adds	r3, r0, #1
 800e5c6:	d102      	bne.n	800e5ce <_close_r+0x1a>
 800e5c8:	682b      	ldr	r3, [r5, #0]
 800e5ca:	b103      	cbz	r3, 800e5ce <_close_r+0x1a>
 800e5cc:	6023      	str	r3, [r4, #0]
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	200036fc 	.word	0x200036fc

0800e5d4 <_lseek_r>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4d07      	ldr	r5, [pc, #28]	; (800e5f4 <_lseek_r+0x20>)
 800e5d8:	4604      	mov	r4, r0
 800e5da:	4608      	mov	r0, r1
 800e5dc:	4611      	mov	r1, r2
 800e5de:	2200      	movs	r2, #0
 800e5e0:	602a      	str	r2, [r5, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	f7f3 ffd2 	bl	800258c <_lseek>
 800e5e8:	1c43      	adds	r3, r0, #1
 800e5ea:	d102      	bne.n	800e5f2 <_lseek_r+0x1e>
 800e5ec:	682b      	ldr	r3, [r5, #0]
 800e5ee:	b103      	cbz	r3, 800e5f2 <_lseek_r+0x1e>
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	bd38      	pop	{r3, r4, r5, pc}
 800e5f4:	200036fc 	.word	0x200036fc

0800e5f8 <_read_r>:
 800e5f8:	b538      	push	{r3, r4, r5, lr}
 800e5fa:	4d07      	ldr	r5, [pc, #28]	; (800e618 <_read_r+0x20>)
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	4608      	mov	r0, r1
 800e600:	4611      	mov	r1, r2
 800e602:	2200      	movs	r2, #0
 800e604:	602a      	str	r2, [r5, #0]
 800e606:	461a      	mov	r2, r3
 800e608:	f7f3 ff60 	bl	80024cc <_read>
 800e60c:	1c43      	adds	r3, r0, #1
 800e60e:	d102      	bne.n	800e616 <_read_r+0x1e>
 800e610:	682b      	ldr	r3, [r5, #0]
 800e612:	b103      	cbz	r3, 800e616 <_read_r+0x1e>
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	bd38      	pop	{r3, r4, r5, pc}
 800e618:	200036fc 	.word	0x200036fc

0800e61c <_write_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	4d07      	ldr	r5, [pc, #28]	; (800e63c <_write_r+0x20>)
 800e620:	4604      	mov	r4, r0
 800e622:	4608      	mov	r0, r1
 800e624:	4611      	mov	r1, r2
 800e626:	2200      	movs	r2, #0
 800e628:	602a      	str	r2, [r5, #0]
 800e62a:	461a      	mov	r2, r3
 800e62c:	f7f3 ff6b 	bl	8002506 <_write>
 800e630:	1c43      	adds	r3, r0, #1
 800e632:	d102      	bne.n	800e63a <_write_r+0x1e>
 800e634:	682b      	ldr	r3, [r5, #0]
 800e636:	b103      	cbz	r3, 800e63a <_write_r+0x1e>
 800e638:	6023      	str	r3, [r4, #0]
 800e63a:	bd38      	pop	{r3, r4, r5, pc}
 800e63c:	200036fc 	.word	0x200036fc

0800e640 <__errno>:
 800e640:	4b01      	ldr	r3, [pc, #4]	; (800e648 <__errno+0x8>)
 800e642:	6818      	ldr	r0, [r3, #0]
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	2000017c 	.word	0x2000017c

0800e64c <__libc_init_array>:
 800e64c:	b570      	push	{r4, r5, r6, lr}
 800e64e:	4d0d      	ldr	r5, [pc, #52]	; (800e684 <__libc_init_array+0x38>)
 800e650:	4c0d      	ldr	r4, [pc, #52]	; (800e688 <__libc_init_array+0x3c>)
 800e652:	1b64      	subs	r4, r4, r5
 800e654:	10a4      	asrs	r4, r4, #2
 800e656:	2600      	movs	r6, #0
 800e658:	42a6      	cmp	r6, r4
 800e65a:	d109      	bne.n	800e670 <__libc_init_array+0x24>
 800e65c:	4d0b      	ldr	r5, [pc, #44]	; (800e68c <__libc_init_array+0x40>)
 800e65e:	4c0c      	ldr	r4, [pc, #48]	; (800e690 <__libc_init_array+0x44>)
 800e660:	f001 f800 	bl	800f664 <_init>
 800e664:	1b64      	subs	r4, r4, r5
 800e666:	10a4      	asrs	r4, r4, #2
 800e668:	2600      	movs	r6, #0
 800e66a:	42a6      	cmp	r6, r4
 800e66c:	d105      	bne.n	800e67a <__libc_init_array+0x2e>
 800e66e:	bd70      	pop	{r4, r5, r6, pc}
 800e670:	f855 3b04 	ldr.w	r3, [r5], #4
 800e674:	4798      	blx	r3
 800e676:	3601      	adds	r6, #1
 800e678:	e7ee      	b.n	800e658 <__libc_init_array+0xc>
 800e67a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e67e:	4798      	blx	r3
 800e680:	3601      	adds	r6, #1
 800e682:	e7f2      	b.n	800e66a <__libc_init_array+0x1e>
 800e684:	0800fdec 	.word	0x0800fdec
 800e688:	0800fdec 	.word	0x0800fdec
 800e68c:	0800fdec 	.word	0x0800fdec
 800e690:	0800fdf0 	.word	0x0800fdf0

0800e694 <__retarget_lock_acquire_recursive>:
 800e694:	4770      	bx	lr

0800e696 <__retarget_lock_release_recursive>:
 800e696:	4770      	bx	lr

0800e698 <strcpy>:
 800e698:	4603      	mov	r3, r0
 800e69a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e69e:	f803 2b01 	strb.w	r2, [r3], #1
 800e6a2:	2a00      	cmp	r2, #0
 800e6a4:	d1f9      	bne.n	800e69a <strcpy+0x2>
 800e6a6:	4770      	bx	lr

0800e6a8 <__assert_func>:
 800e6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6aa:	4614      	mov	r4, r2
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	4b09      	ldr	r3, [pc, #36]	; (800e6d4 <__assert_func+0x2c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4605      	mov	r5, r0
 800e6b4:	68d8      	ldr	r0, [r3, #12]
 800e6b6:	b14c      	cbz	r4, 800e6cc <__assert_func+0x24>
 800e6b8:	4b07      	ldr	r3, [pc, #28]	; (800e6d8 <__assert_func+0x30>)
 800e6ba:	9100      	str	r1, [sp, #0]
 800e6bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6c0:	4906      	ldr	r1, [pc, #24]	; (800e6dc <__assert_func+0x34>)
 800e6c2:	462b      	mov	r3, r5
 800e6c4:	f000 fca4 	bl	800f010 <fiprintf>
 800e6c8:	f000 fcec 	bl	800f0a4 <abort>
 800e6cc:	4b04      	ldr	r3, [pc, #16]	; (800e6e0 <__assert_func+0x38>)
 800e6ce:	461c      	mov	r4, r3
 800e6d0:	e7f3      	b.n	800e6ba <__assert_func+0x12>
 800e6d2:	bf00      	nop
 800e6d4:	2000017c 	.word	0x2000017c
 800e6d8:	0800fd72 	.word	0x0800fd72
 800e6dc:	0800fd7f 	.word	0x0800fd7f
 800e6e0:	0800fdad 	.word	0x0800fdad

0800e6e4 <_free_r>:
 800e6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6e6:	2900      	cmp	r1, #0
 800e6e8:	d044      	beq.n	800e774 <_free_r+0x90>
 800e6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ee:	9001      	str	r0, [sp, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f1a1 0404 	sub.w	r4, r1, #4
 800e6f6:	bfb8      	it	lt
 800e6f8:	18e4      	addlt	r4, r4, r3
 800e6fa:	f000 f8e7 	bl	800e8cc <__malloc_lock>
 800e6fe:	4a1e      	ldr	r2, [pc, #120]	; (800e778 <_free_r+0x94>)
 800e700:	9801      	ldr	r0, [sp, #4]
 800e702:	6813      	ldr	r3, [r2, #0]
 800e704:	b933      	cbnz	r3, 800e714 <_free_r+0x30>
 800e706:	6063      	str	r3, [r4, #4]
 800e708:	6014      	str	r4, [r2, #0]
 800e70a:	b003      	add	sp, #12
 800e70c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e710:	f000 b8e2 	b.w	800e8d8 <__malloc_unlock>
 800e714:	42a3      	cmp	r3, r4
 800e716:	d908      	bls.n	800e72a <_free_r+0x46>
 800e718:	6825      	ldr	r5, [r4, #0]
 800e71a:	1961      	adds	r1, r4, r5
 800e71c:	428b      	cmp	r3, r1
 800e71e:	bf01      	itttt	eq
 800e720:	6819      	ldreq	r1, [r3, #0]
 800e722:	685b      	ldreq	r3, [r3, #4]
 800e724:	1949      	addeq	r1, r1, r5
 800e726:	6021      	streq	r1, [r4, #0]
 800e728:	e7ed      	b.n	800e706 <_free_r+0x22>
 800e72a:	461a      	mov	r2, r3
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	b10b      	cbz	r3, 800e734 <_free_r+0x50>
 800e730:	42a3      	cmp	r3, r4
 800e732:	d9fa      	bls.n	800e72a <_free_r+0x46>
 800e734:	6811      	ldr	r1, [r2, #0]
 800e736:	1855      	adds	r5, r2, r1
 800e738:	42a5      	cmp	r5, r4
 800e73a:	d10b      	bne.n	800e754 <_free_r+0x70>
 800e73c:	6824      	ldr	r4, [r4, #0]
 800e73e:	4421      	add	r1, r4
 800e740:	1854      	adds	r4, r2, r1
 800e742:	42a3      	cmp	r3, r4
 800e744:	6011      	str	r1, [r2, #0]
 800e746:	d1e0      	bne.n	800e70a <_free_r+0x26>
 800e748:	681c      	ldr	r4, [r3, #0]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	6053      	str	r3, [r2, #4]
 800e74e:	440c      	add	r4, r1
 800e750:	6014      	str	r4, [r2, #0]
 800e752:	e7da      	b.n	800e70a <_free_r+0x26>
 800e754:	d902      	bls.n	800e75c <_free_r+0x78>
 800e756:	230c      	movs	r3, #12
 800e758:	6003      	str	r3, [r0, #0]
 800e75a:	e7d6      	b.n	800e70a <_free_r+0x26>
 800e75c:	6825      	ldr	r5, [r4, #0]
 800e75e:	1961      	adds	r1, r4, r5
 800e760:	428b      	cmp	r3, r1
 800e762:	bf04      	itt	eq
 800e764:	6819      	ldreq	r1, [r3, #0]
 800e766:	685b      	ldreq	r3, [r3, #4]
 800e768:	6063      	str	r3, [r4, #4]
 800e76a:	bf04      	itt	eq
 800e76c:	1949      	addeq	r1, r1, r5
 800e76e:	6021      	streq	r1, [r4, #0]
 800e770:	6054      	str	r4, [r2, #4]
 800e772:	e7ca      	b.n	800e70a <_free_r+0x26>
 800e774:	b003      	add	sp, #12
 800e776:	bd30      	pop	{r4, r5, pc}
 800e778:	20003704 	.word	0x20003704

0800e77c <malloc>:
 800e77c:	4b02      	ldr	r3, [pc, #8]	; (800e788 <malloc+0xc>)
 800e77e:	4601      	mov	r1, r0
 800e780:	6818      	ldr	r0, [r3, #0]
 800e782:	f000 b823 	b.w	800e7cc <_malloc_r>
 800e786:	bf00      	nop
 800e788:	2000017c 	.word	0x2000017c

0800e78c <sbrk_aligned>:
 800e78c:	b570      	push	{r4, r5, r6, lr}
 800e78e:	4e0e      	ldr	r6, [pc, #56]	; (800e7c8 <sbrk_aligned+0x3c>)
 800e790:	460c      	mov	r4, r1
 800e792:	6831      	ldr	r1, [r6, #0]
 800e794:	4605      	mov	r5, r0
 800e796:	b911      	cbnz	r1, 800e79e <sbrk_aligned+0x12>
 800e798:	f000 fc66 	bl	800f068 <_sbrk_r>
 800e79c:	6030      	str	r0, [r6, #0]
 800e79e:	4621      	mov	r1, r4
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f000 fc61 	bl	800f068 <_sbrk_r>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	d00a      	beq.n	800e7c0 <sbrk_aligned+0x34>
 800e7aa:	1cc4      	adds	r4, r0, #3
 800e7ac:	f024 0403 	bic.w	r4, r4, #3
 800e7b0:	42a0      	cmp	r0, r4
 800e7b2:	d007      	beq.n	800e7c4 <sbrk_aligned+0x38>
 800e7b4:	1a21      	subs	r1, r4, r0
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f000 fc56 	bl	800f068 <_sbrk_r>
 800e7bc:	3001      	adds	r0, #1
 800e7be:	d101      	bne.n	800e7c4 <sbrk_aligned+0x38>
 800e7c0:	f04f 34ff 	mov.w	r4, #4294967295
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
 800e7c8:	20003708 	.word	0x20003708

0800e7cc <_malloc_r>:
 800e7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7d0:	1ccd      	adds	r5, r1, #3
 800e7d2:	f025 0503 	bic.w	r5, r5, #3
 800e7d6:	3508      	adds	r5, #8
 800e7d8:	2d0c      	cmp	r5, #12
 800e7da:	bf38      	it	cc
 800e7dc:	250c      	movcc	r5, #12
 800e7de:	2d00      	cmp	r5, #0
 800e7e0:	4607      	mov	r7, r0
 800e7e2:	db01      	blt.n	800e7e8 <_malloc_r+0x1c>
 800e7e4:	42a9      	cmp	r1, r5
 800e7e6:	d905      	bls.n	800e7f4 <_malloc_r+0x28>
 800e7e8:	230c      	movs	r3, #12
 800e7ea:	603b      	str	r3, [r7, #0]
 800e7ec:	2600      	movs	r6, #0
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e8c8 <_malloc_r+0xfc>
 800e7f8:	f000 f868 	bl	800e8cc <__malloc_lock>
 800e7fc:	f8d8 3000 	ldr.w	r3, [r8]
 800e800:	461c      	mov	r4, r3
 800e802:	bb5c      	cbnz	r4, 800e85c <_malloc_r+0x90>
 800e804:	4629      	mov	r1, r5
 800e806:	4638      	mov	r0, r7
 800e808:	f7ff ffc0 	bl	800e78c <sbrk_aligned>
 800e80c:	1c43      	adds	r3, r0, #1
 800e80e:	4604      	mov	r4, r0
 800e810:	d155      	bne.n	800e8be <_malloc_r+0xf2>
 800e812:	f8d8 4000 	ldr.w	r4, [r8]
 800e816:	4626      	mov	r6, r4
 800e818:	2e00      	cmp	r6, #0
 800e81a:	d145      	bne.n	800e8a8 <_malloc_r+0xdc>
 800e81c:	2c00      	cmp	r4, #0
 800e81e:	d048      	beq.n	800e8b2 <_malloc_r+0xe6>
 800e820:	6823      	ldr	r3, [r4, #0]
 800e822:	4631      	mov	r1, r6
 800e824:	4638      	mov	r0, r7
 800e826:	eb04 0903 	add.w	r9, r4, r3
 800e82a:	f000 fc1d 	bl	800f068 <_sbrk_r>
 800e82e:	4581      	cmp	r9, r0
 800e830:	d13f      	bne.n	800e8b2 <_malloc_r+0xe6>
 800e832:	6821      	ldr	r1, [r4, #0]
 800e834:	1a6d      	subs	r5, r5, r1
 800e836:	4629      	mov	r1, r5
 800e838:	4638      	mov	r0, r7
 800e83a:	f7ff ffa7 	bl	800e78c <sbrk_aligned>
 800e83e:	3001      	adds	r0, #1
 800e840:	d037      	beq.n	800e8b2 <_malloc_r+0xe6>
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	442b      	add	r3, r5
 800e846:	6023      	str	r3, [r4, #0]
 800e848:	f8d8 3000 	ldr.w	r3, [r8]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d038      	beq.n	800e8c2 <_malloc_r+0xf6>
 800e850:	685a      	ldr	r2, [r3, #4]
 800e852:	42a2      	cmp	r2, r4
 800e854:	d12b      	bne.n	800e8ae <_malloc_r+0xe2>
 800e856:	2200      	movs	r2, #0
 800e858:	605a      	str	r2, [r3, #4]
 800e85a:	e00f      	b.n	800e87c <_malloc_r+0xb0>
 800e85c:	6822      	ldr	r2, [r4, #0]
 800e85e:	1b52      	subs	r2, r2, r5
 800e860:	d41f      	bmi.n	800e8a2 <_malloc_r+0xd6>
 800e862:	2a0b      	cmp	r2, #11
 800e864:	d917      	bls.n	800e896 <_malloc_r+0xca>
 800e866:	1961      	adds	r1, r4, r5
 800e868:	42a3      	cmp	r3, r4
 800e86a:	6025      	str	r5, [r4, #0]
 800e86c:	bf18      	it	ne
 800e86e:	6059      	strne	r1, [r3, #4]
 800e870:	6863      	ldr	r3, [r4, #4]
 800e872:	bf08      	it	eq
 800e874:	f8c8 1000 	streq.w	r1, [r8]
 800e878:	5162      	str	r2, [r4, r5]
 800e87a:	604b      	str	r3, [r1, #4]
 800e87c:	4638      	mov	r0, r7
 800e87e:	f104 060b 	add.w	r6, r4, #11
 800e882:	f000 f829 	bl	800e8d8 <__malloc_unlock>
 800e886:	f026 0607 	bic.w	r6, r6, #7
 800e88a:	1d23      	adds	r3, r4, #4
 800e88c:	1af2      	subs	r2, r6, r3
 800e88e:	d0ae      	beq.n	800e7ee <_malloc_r+0x22>
 800e890:	1b9b      	subs	r3, r3, r6
 800e892:	50a3      	str	r3, [r4, r2]
 800e894:	e7ab      	b.n	800e7ee <_malloc_r+0x22>
 800e896:	42a3      	cmp	r3, r4
 800e898:	6862      	ldr	r2, [r4, #4]
 800e89a:	d1dd      	bne.n	800e858 <_malloc_r+0x8c>
 800e89c:	f8c8 2000 	str.w	r2, [r8]
 800e8a0:	e7ec      	b.n	800e87c <_malloc_r+0xb0>
 800e8a2:	4623      	mov	r3, r4
 800e8a4:	6864      	ldr	r4, [r4, #4]
 800e8a6:	e7ac      	b.n	800e802 <_malloc_r+0x36>
 800e8a8:	4634      	mov	r4, r6
 800e8aa:	6876      	ldr	r6, [r6, #4]
 800e8ac:	e7b4      	b.n	800e818 <_malloc_r+0x4c>
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	e7cc      	b.n	800e84c <_malloc_r+0x80>
 800e8b2:	230c      	movs	r3, #12
 800e8b4:	603b      	str	r3, [r7, #0]
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	f000 f80e 	bl	800e8d8 <__malloc_unlock>
 800e8bc:	e797      	b.n	800e7ee <_malloc_r+0x22>
 800e8be:	6025      	str	r5, [r4, #0]
 800e8c0:	e7dc      	b.n	800e87c <_malloc_r+0xb0>
 800e8c2:	605b      	str	r3, [r3, #4]
 800e8c4:	deff      	udf	#255	; 0xff
 800e8c6:	bf00      	nop
 800e8c8:	20003704 	.word	0x20003704

0800e8cc <__malloc_lock>:
 800e8cc:	4801      	ldr	r0, [pc, #4]	; (800e8d4 <__malloc_lock+0x8>)
 800e8ce:	f7ff bee1 	b.w	800e694 <__retarget_lock_acquire_recursive>
 800e8d2:	bf00      	nop
 800e8d4:	20003700 	.word	0x20003700

0800e8d8 <__malloc_unlock>:
 800e8d8:	4801      	ldr	r0, [pc, #4]	; (800e8e0 <__malloc_unlock+0x8>)
 800e8da:	f7ff bedc 	b.w	800e696 <__retarget_lock_release_recursive>
 800e8de:	bf00      	nop
 800e8e0:	20003700 	.word	0x20003700

0800e8e4 <__ssputs_r>:
 800e8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e8:	688e      	ldr	r6, [r1, #8]
 800e8ea:	461f      	mov	r7, r3
 800e8ec:	42be      	cmp	r6, r7
 800e8ee:	680b      	ldr	r3, [r1, #0]
 800e8f0:	4682      	mov	sl, r0
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	4690      	mov	r8, r2
 800e8f6:	d82c      	bhi.n	800e952 <__ssputs_r+0x6e>
 800e8f8:	898a      	ldrh	r2, [r1, #12]
 800e8fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8fe:	d026      	beq.n	800e94e <__ssputs_r+0x6a>
 800e900:	6965      	ldr	r5, [r4, #20]
 800e902:	6909      	ldr	r1, [r1, #16]
 800e904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e908:	eba3 0901 	sub.w	r9, r3, r1
 800e90c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e910:	1c7b      	adds	r3, r7, #1
 800e912:	444b      	add	r3, r9
 800e914:	106d      	asrs	r5, r5, #1
 800e916:	429d      	cmp	r5, r3
 800e918:	bf38      	it	cc
 800e91a:	461d      	movcc	r5, r3
 800e91c:	0553      	lsls	r3, r2, #21
 800e91e:	d527      	bpl.n	800e970 <__ssputs_r+0x8c>
 800e920:	4629      	mov	r1, r5
 800e922:	f7ff ff53 	bl	800e7cc <_malloc_r>
 800e926:	4606      	mov	r6, r0
 800e928:	b360      	cbz	r0, 800e984 <__ssputs_r+0xa0>
 800e92a:	6921      	ldr	r1, [r4, #16]
 800e92c:	464a      	mov	r2, r9
 800e92e:	f000 fbab 	bl	800f088 <memcpy>
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e93c:	81a3      	strh	r3, [r4, #12]
 800e93e:	6126      	str	r6, [r4, #16]
 800e940:	6165      	str	r5, [r4, #20]
 800e942:	444e      	add	r6, r9
 800e944:	eba5 0509 	sub.w	r5, r5, r9
 800e948:	6026      	str	r6, [r4, #0]
 800e94a:	60a5      	str	r5, [r4, #8]
 800e94c:	463e      	mov	r6, r7
 800e94e:	42be      	cmp	r6, r7
 800e950:	d900      	bls.n	800e954 <__ssputs_r+0x70>
 800e952:	463e      	mov	r6, r7
 800e954:	6820      	ldr	r0, [r4, #0]
 800e956:	4632      	mov	r2, r6
 800e958:	4641      	mov	r1, r8
 800e95a:	f000 fb6b 	bl	800f034 <memmove>
 800e95e:	68a3      	ldr	r3, [r4, #8]
 800e960:	1b9b      	subs	r3, r3, r6
 800e962:	60a3      	str	r3, [r4, #8]
 800e964:	6823      	ldr	r3, [r4, #0]
 800e966:	4433      	add	r3, r6
 800e968:	6023      	str	r3, [r4, #0]
 800e96a:	2000      	movs	r0, #0
 800e96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e970:	462a      	mov	r2, r5
 800e972:	f000 fb9e 	bl	800f0b2 <_realloc_r>
 800e976:	4606      	mov	r6, r0
 800e978:	2800      	cmp	r0, #0
 800e97a:	d1e0      	bne.n	800e93e <__ssputs_r+0x5a>
 800e97c:	6921      	ldr	r1, [r4, #16]
 800e97e:	4650      	mov	r0, sl
 800e980:	f7ff feb0 	bl	800e6e4 <_free_r>
 800e984:	230c      	movs	r3, #12
 800e986:	f8ca 3000 	str.w	r3, [sl]
 800e98a:	89a3      	ldrh	r3, [r4, #12]
 800e98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e990:	81a3      	strh	r3, [r4, #12]
 800e992:	f04f 30ff 	mov.w	r0, #4294967295
 800e996:	e7e9      	b.n	800e96c <__ssputs_r+0x88>

0800e998 <_svfiprintf_r>:
 800e998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99c:	4698      	mov	r8, r3
 800e99e:	898b      	ldrh	r3, [r1, #12]
 800e9a0:	061b      	lsls	r3, r3, #24
 800e9a2:	b09d      	sub	sp, #116	; 0x74
 800e9a4:	4607      	mov	r7, r0
 800e9a6:	460d      	mov	r5, r1
 800e9a8:	4614      	mov	r4, r2
 800e9aa:	d50e      	bpl.n	800e9ca <_svfiprintf_r+0x32>
 800e9ac:	690b      	ldr	r3, [r1, #16]
 800e9ae:	b963      	cbnz	r3, 800e9ca <_svfiprintf_r+0x32>
 800e9b0:	2140      	movs	r1, #64	; 0x40
 800e9b2:	f7ff ff0b 	bl	800e7cc <_malloc_r>
 800e9b6:	6028      	str	r0, [r5, #0]
 800e9b8:	6128      	str	r0, [r5, #16]
 800e9ba:	b920      	cbnz	r0, 800e9c6 <_svfiprintf_r+0x2e>
 800e9bc:	230c      	movs	r3, #12
 800e9be:	603b      	str	r3, [r7, #0]
 800e9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c4:	e0d0      	b.n	800eb68 <_svfiprintf_r+0x1d0>
 800e9c6:	2340      	movs	r3, #64	; 0x40
 800e9c8:	616b      	str	r3, [r5, #20]
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ce:	2320      	movs	r3, #32
 800e9d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9d8:	2330      	movs	r3, #48	; 0x30
 800e9da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eb80 <_svfiprintf_r+0x1e8>
 800e9de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9e2:	f04f 0901 	mov.w	r9, #1
 800e9e6:	4623      	mov	r3, r4
 800e9e8:	469a      	mov	sl, r3
 800e9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9ee:	b10a      	cbz	r2, 800e9f4 <_svfiprintf_r+0x5c>
 800e9f0:	2a25      	cmp	r2, #37	; 0x25
 800e9f2:	d1f9      	bne.n	800e9e8 <_svfiprintf_r+0x50>
 800e9f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e9f8:	d00b      	beq.n	800ea12 <_svfiprintf_r+0x7a>
 800e9fa:	465b      	mov	r3, fp
 800e9fc:	4622      	mov	r2, r4
 800e9fe:	4629      	mov	r1, r5
 800ea00:	4638      	mov	r0, r7
 800ea02:	f7ff ff6f 	bl	800e8e4 <__ssputs_r>
 800ea06:	3001      	adds	r0, #1
 800ea08:	f000 80a9 	beq.w	800eb5e <_svfiprintf_r+0x1c6>
 800ea0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea0e:	445a      	add	r2, fp
 800ea10:	9209      	str	r2, [sp, #36]	; 0x24
 800ea12:	f89a 3000 	ldrb.w	r3, [sl]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f000 80a1 	beq.w	800eb5e <_svfiprintf_r+0x1c6>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea26:	f10a 0a01 	add.w	sl, sl, #1
 800ea2a:	9304      	str	r3, [sp, #16]
 800ea2c:	9307      	str	r3, [sp, #28]
 800ea2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea32:	931a      	str	r3, [sp, #104]	; 0x68
 800ea34:	4654      	mov	r4, sl
 800ea36:	2205      	movs	r2, #5
 800ea38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea3c:	4850      	ldr	r0, [pc, #320]	; (800eb80 <_svfiprintf_r+0x1e8>)
 800ea3e:	f7f1 fbe7 	bl	8000210 <memchr>
 800ea42:	9a04      	ldr	r2, [sp, #16]
 800ea44:	b9d8      	cbnz	r0, 800ea7e <_svfiprintf_r+0xe6>
 800ea46:	06d0      	lsls	r0, r2, #27
 800ea48:	bf44      	itt	mi
 800ea4a:	2320      	movmi	r3, #32
 800ea4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea50:	0711      	lsls	r1, r2, #28
 800ea52:	bf44      	itt	mi
 800ea54:	232b      	movmi	r3, #43	; 0x2b
 800ea56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ea60:	d015      	beq.n	800ea8e <_svfiprintf_r+0xf6>
 800ea62:	9a07      	ldr	r2, [sp, #28]
 800ea64:	4654      	mov	r4, sl
 800ea66:	2000      	movs	r0, #0
 800ea68:	f04f 0c0a 	mov.w	ip, #10
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea72:	3b30      	subs	r3, #48	; 0x30
 800ea74:	2b09      	cmp	r3, #9
 800ea76:	d94d      	bls.n	800eb14 <_svfiprintf_r+0x17c>
 800ea78:	b1b0      	cbz	r0, 800eaa8 <_svfiprintf_r+0x110>
 800ea7a:	9207      	str	r2, [sp, #28]
 800ea7c:	e014      	b.n	800eaa8 <_svfiprintf_r+0x110>
 800ea7e:	eba0 0308 	sub.w	r3, r0, r8
 800ea82:	fa09 f303 	lsl.w	r3, r9, r3
 800ea86:	4313      	orrs	r3, r2
 800ea88:	9304      	str	r3, [sp, #16]
 800ea8a:	46a2      	mov	sl, r4
 800ea8c:	e7d2      	b.n	800ea34 <_svfiprintf_r+0x9c>
 800ea8e:	9b03      	ldr	r3, [sp, #12]
 800ea90:	1d19      	adds	r1, r3, #4
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	9103      	str	r1, [sp, #12]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	bfbb      	ittet	lt
 800ea9a:	425b      	neglt	r3, r3
 800ea9c:	f042 0202 	orrlt.w	r2, r2, #2
 800eaa0:	9307      	strge	r3, [sp, #28]
 800eaa2:	9307      	strlt	r3, [sp, #28]
 800eaa4:	bfb8      	it	lt
 800eaa6:	9204      	strlt	r2, [sp, #16]
 800eaa8:	7823      	ldrb	r3, [r4, #0]
 800eaaa:	2b2e      	cmp	r3, #46	; 0x2e
 800eaac:	d10c      	bne.n	800eac8 <_svfiprintf_r+0x130>
 800eaae:	7863      	ldrb	r3, [r4, #1]
 800eab0:	2b2a      	cmp	r3, #42	; 0x2a
 800eab2:	d134      	bne.n	800eb1e <_svfiprintf_r+0x186>
 800eab4:	9b03      	ldr	r3, [sp, #12]
 800eab6:	1d1a      	adds	r2, r3, #4
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	9203      	str	r2, [sp, #12]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	bfb8      	it	lt
 800eac0:	f04f 33ff 	movlt.w	r3, #4294967295
 800eac4:	3402      	adds	r4, #2
 800eac6:	9305      	str	r3, [sp, #20]
 800eac8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eb90 <_svfiprintf_r+0x1f8>
 800eacc:	7821      	ldrb	r1, [r4, #0]
 800eace:	2203      	movs	r2, #3
 800ead0:	4650      	mov	r0, sl
 800ead2:	f7f1 fb9d 	bl	8000210 <memchr>
 800ead6:	b138      	cbz	r0, 800eae8 <_svfiprintf_r+0x150>
 800ead8:	9b04      	ldr	r3, [sp, #16]
 800eada:	eba0 000a 	sub.w	r0, r0, sl
 800eade:	2240      	movs	r2, #64	; 0x40
 800eae0:	4082      	lsls	r2, r0
 800eae2:	4313      	orrs	r3, r2
 800eae4:	3401      	adds	r4, #1
 800eae6:	9304      	str	r3, [sp, #16]
 800eae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaec:	4825      	ldr	r0, [pc, #148]	; (800eb84 <_svfiprintf_r+0x1ec>)
 800eaee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eaf2:	2206      	movs	r2, #6
 800eaf4:	f7f1 fb8c 	bl	8000210 <memchr>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d038      	beq.n	800eb6e <_svfiprintf_r+0x1d6>
 800eafc:	4b22      	ldr	r3, [pc, #136]	; (800eb88 <_svfiprintf_r+0x1f0>)
 800eafe:	bb1b      	cbnz	r3, 800eb48 <_svfiprintf_r+0x1b0>
 800eb00:	9b03      	ldr	r3, [sp, #12]
 800eb02:	3307      	adds	r3, #7
 800eb04:	f023 0307 	bic.w	r3, r3, #7
 800eb08:	3308      	adds	r3, #8
 800eb0a:	9303      	str	r3, [sp, #12]
 800eb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb0e:	4433      	add	r3, r6
 800eb10:	9309      	str	r3, [sp, #36]	; 0x24
 800eb12:	e768      	b.n	800e9e6 <_svfiprintf_r+0x4e>
 800eb14:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb18:	460c      	mov	r4, r1
 800eb1a:	2001      	movs	r0, #1
 800eb1c:	e7a6      	b.n	800ea6c <_svfiprintf_r+0xd4>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	3401      	adds	r4, #1
 800eb22:	9305      	str	r3, [sp, #20]
 800eb24:	4619      	mov	r1, r3
 800eb26:	f04f 0c0a 	mov.w	ip, #10
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb30:	3a30      	subs	r2, #48	; 0x30
 800eb32:	2a09      	cmp	r2, #9
 800eb34:	d903      	bls.n	800eb3e <_svfiprintf_r+0x1a6>
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d0c6      	beq.n	800eac8 <_svfiprintf_r+0x130>
 800eb3a:	9105      	str	r1, [sp, #20]
 800eb3c:	e7c4      	b.n	800eac8 <_svfiprintf_r+0x130>
 800eb3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb42:	4604      	mov	r4, r0
 800eb44:	2301      	movs	r3, #1
 800eb46:	e7f0      	b.n	800eb2a <_svfiprintf_r+0x192>
 800eb48:	ab03      	add	r3, sp, #12
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	462a      	mov	r2, r5
 800eb4e:	4b0f      	ldr	r3, [pc, #60]	; (800eb8c <_svfiprintf_r+0x1f4>)
 800eb50:	a904      	add	r1, sp, #16
 800eb52:	4638      	mov	r0, r7
 800eb54:	f3af 8000 	nop.w
 800eb58:	1c42      	adds	r2, r0, #1
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	d1d6      	bne.n	800eb0c <_svfiprintf_r+0x174>
 800eb5e:	89ab      	ldrh	r3, [r5, #12]
 800eb60:	065b      	lsls	r3, r3, #25
 800eb62:	f53f af2d 	bmi.w	800e9c0 <_svfiprintf_r+0x28>
 800eb66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb68:	b01d      	add	sp, #116	; 0x74
 800eb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb6e:	ab03      	add	r3, sp, #12
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	462a      	mov	r2, r5
 800eb74:	4b05      	ldr	r3, [pc, #20]	; (800eb8c <_svfiprintf_r+0x1f4>)
 800eb76:	a904      	add	r1, sp, #16
 800eb78:	4638      	mov	r0, r7
 800eb7a:	f000 f879 	bl	800ec70 <_printf_i>
 800eb7e:	e7eb      	b.n	800eb58 <_svfiprintf_r+0x1c0>
 800eb80:	0800fdae 	.word	0x0800fdae
 800eb84:	0800fdb8 	.word	0x0800fdb8
 800eb88:	00000000 	.word	0x00000000
 800eb8c:	0800e8e5 	.word	0x0800e8e5
 800eb90:	0800fdb4 	.word	0x0800fdb4

0800eb94 <_printf_common>:
 800eb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb98:	4616      	mov	r6, r2
 800eb9a:	4699      	mov	r9, r3
 800eb9c:	688a      	ldr	r2, [r1, #8]
 800eb9e:	690b      	ldr	r3, [r1, #16]
 800eba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eba4:	4293      	cmp	r3, r2
 800eba6:	bfb8      	it	lt
 800eba8:	4613      	movlt	r3, r2
 800ebaa:	6033      	str	r3, [r6, #0]
 800ebac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebb0:	4607      	mov	r7, r0
 800ebb2:	460c      	mov	r4, r1
 800ebb4:	b10a      	cbz	r2, 800ebba <_printf_common+0x26>
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	6033      	str	r3, [r6, #0]
 800ebba:	6823      	ldr	r3, [r4, #0]
 800ebbc:	0699      	lsls	r1, r3, #26
 800ebbe:	bf42      	ittt	mi
 800ebc0:	6833      	ldrmi	r3, [r6, #0]
 800ebc2:	3302      	addmi	r3, #2
 800ebc4:	6033      	strmi	r3, [r6, #0]
 800ebc6:	6825      	ldr	r5, [r4, #0]
 800ebc8:	f015 0506 	ands.w	r5, r5, #6
 800ebcc:	d106      	bne.n	800ebdc <_printf_common+0x48>
 800ebce:	f104 0a19 	add.w	sl, r4, #25
 800ebd2:	68e3      	ldr	r3, [r4, #12]
 800ebd4:	6832      	ldr	r2, [r6, #0]
 800ebd6:	1a9b      	subs	r3, r3, r2
 800ebd8:	42ab      	cmp	r3, r5
 800ebda:	dc26      	bgt.n	800ec2a <_printf_common+0x96>
 800ebdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebe0:	1e13      	subs	r3, r2, #0
 800ebe2:	6822      	ldr	r2, [r4, #0]
 800ebe4:	bf18      	it	ne
 800ebe6:	2301      	movne	r3, #1
 800ebe8:	0692      	lsls	r2, r2, #26
 800ebea:	d42b      	bmi.n	800ec44 <_printf_common+0xb0>
 800ebec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebf0:	4649      	mov	r1, r9
 800ebf2:	4638      	mov	r0, r7
 800ebf4:	47c0      	blx	r8
 800ebf6:	3001      	adds	r0, #1
 800ebf8:	d01e      	beq.n	800ec38 <_printf_common+0xa4>
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	6922      	ldr	r2, [r4, #16]
 800ebfe:	f003 0306 	and.w	r3, r3, #6
 800ec02:	2b04      	cmp	r3, #4
 800ec04:	bf02      	ittt	eq
 800ec06:	68e5      	ldreq	r5, [r4, #12]
 800ec08:	6833      	ldreq	r3, [r6, #0]
 800ec0a:	1aed      	subeq	r5, r5, r3
 800ec0c:	68a3      	ldr	r3, [r4, #8]
 800ec0e:	bf0c      	ite	eq
 800ec10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec14:	2500      	movne	r5, #0
 800ec16:	4293      	cmp	r3, r2
 800ec18:	bfc4      	itt	gt
 800ec1a:	1a9b      	subgt	r3, r3, r2
 800ec1c:	18ed      	addgt	r5, r5, r3
 800ec1e:	2600      	movs	r6, #0
 800ec20:	341a      	adds	r4, #26
 800ec22:	42b5      	cmp	r5, r6
 800ec24:	d11a      	bne.n	800ec5c <_printf_common+0xc8>
 800ec26:	2000      	movs	r0, #0
 800ec28:	e008      	b.n	800ec3c <_printf_common+0xa8>
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	4652      	mov	r2, sl
 800ec2e:	4649      	mov	r1, r9
 800ec30:	4638      	mov	r0, r7
 800ec32:	47c0      	blx	r8
 800ec34:	3001      	adds	r0, #1
 800ec36:	d103      	bne.n	800ec40 <_printf_common+0xac>
 800ec38:	f04f 30ff 	mov.w	r0, #4294967295
 800ec3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec40:	3501      	adds	r5, #1
 800ec42:	e7c6      	b.n	800ebd2 <_printf_common+0x3e>
 800ec44:	18e1      	adds	r1, r4, r3
 800ec46:	1c5a      	adds	r2, r3, #1
 800ec48:	2030      	movs	r0, #48	; 0x30
 800ec4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec4e:	4422      	add	r2, r4
 800ec50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec58:	3302      	adds	r3, #2
 800ec5a:	e7c7      	b.n	800ebec <_printf_common+0x58>
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	4622      	mov	r2, r4
 800ec60:	4649      	mov	r1, r9
 800ec62:	4638      	mov	r0, r7
 800ec64:	47c0      	blx	r8
 800ec66:	3001      	adds	r0, #1
 800ec68:	d0e6      	beq.n	800ec38 <_printf_common+0xa4>
 800ec6a:	3601      	adds	r6, #1
 800ec6c:	e7d9      	b.n	800ec22 <_printf_common+0x8e>
	...

0800ec70 <_printf_i>:
 800ec70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec74:	7e0f      	ldrb	r7, [r1, #24]
 800ec76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec78:	2f78      	cmp	r7, #120	; 0x78
 800ec7a:	4691      	mov	r9, r2
 800ec7c:	4680      	mov	r8, r0
 800ec7e:	460c      	mov	r4, r1
 800ec80:	469a      	mov	sl, r3
 800ec82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec86:	d807      	bhi.n	800ec98 <_printf_i+0x28>
 800ec88:	2f62      	cmp	r7, #98	; 0x62
 800ec8a:	d80a      	bhi.n	800eca2 <_printf_i+0x32>
 800ec8c:	2f00      	cmp	r7, #0
 800ec8e:	f000 80d4 	beq.w	800ee3a <_printf_i+0x1ca>
 800ec92:	2f58      	cmp	r7, #88	; 0x58
 800ec94:	f000 80c0 	beq.w	800ee18 <_printf_i+0x1a8>
 800ec98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eca0:	e03a      	b.n	800ed18 <_printf_i+0xa8>
 800eca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eca6:	2b15      	cmp	r3, #21
 800eca8:	d8f6      	bhi.n	800ec98 <_printf_i+0x28>
 800ecaa:	a101      	add	r1, pc, #4	; (adr r1, 800ecb0 <_printf_i+0x40>)
 800ecac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecb0:	0800ed09 	.word	0x0800ed09
 800ecb4:	0800ed1d 	.word	0x0800ed1d
 800ecb8:	0800ec99 	.word	0x0800ec99
 800ecbc:	0800ec99 	.word	0x0800ec99
 800ecc0:	0800ec99 	.word	0x0800ec99
 800ecc4:	0800ec99 	.word	0x0800ec99
 800ecc8:	0800ed1d 	.word	0x0800ed1d
 800eccc:	0800ec99 	.word	0x0800ec99
 800ecd0:	0800ec99 	.word	0x0800ec99
 800ecd4:	0800ec99 	.word	0x0800ec99
 800ecd8:	0800ec99 	.word	0x0800ec99
 800ecdc:	0800ee21 	.word	0x0800ee21
 800ece0:	0800ed49 	.word	0x0800ed49
 800ece4:	0800eddb 	.word	0x0800eddb
 800ece8:	0800ec99 	.word	0x0800ec99
 800ecec:	0800ec99 	.word	0x0800ec99
 800ecf0:	0800ee43 	.word	0x0800ee43
 800ecf4:	0800ec99 	.word	0x0800ec99
 800ecf8:	0800ed49 	.word	0x0800ed49
 800ecfc:	0800ec99 	.word	0x0800ec99
 800ed00:	0800ec99 	.word	0x0800ec99
 800ed04:	0800ede3 	.word	0x0800ede3
 800ed08:	682b      	ldr	r3, [r5, #0]
 800ed0a:	1d1a      	adds	r2, r3, #4
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	602a      	str	r2, [r5, #0]
 800ed10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e09f      	b.n	800ee5c <_printf_i+0x1ec>
 800ed1c:	6820      	ldr	r0, [r4, #0]
 800ed1e:	682b      	ldr	r3, [r5, #0]
 800ed20:	0607      	lsls	r7, r0, #24
 800ed22:	f103 0104 	add.w	r1, r3, #4
 800ed26:	6029      	str	r1, [r5, #0]
 800ed28:	d501      	bpl.n	800ed2e <_printf_i+0xbe>
 800ed2a:	681e      	ldr	r6, [r3, #0]
 800ed2c:	e003      	b.n	800ed36 <_printf_i+0xc6>
 800ed2e:	0646      	lsls	r6, r0, #25
 800ed30:	d5fb      	bpl.n	800ed2a <_printf_i+0xba>
 800ed32:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ed36:	2e00      	cmp	r6, #0
 800ed38:	da03      	bge.n	800ed42 <_printf_i+0xd2>
 800ed3a:	232d      	movs	r3, #45	; 0x2d
 800ed3c:	4276      	negs	r6, r6
 800ed3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed42:	485a      	ldr	r0, [pc, #360]	; (800eeac <_printf_i+0x23c>)
 800ed44:	230a      	movs	r3, #10
 800ed46:	e012      	b.n	800ed6e <_printf_i+0xfe>
 800ed48:	682b      	ldr	r3, [r5, #0]
 800ed4a:	6820      	ldr	r0, [r4, #0]
 800ed4c:	1d19      	adds	r1, r3, #4
 800ed4e:	6029      	str	r1, [r5, #0]
 800ed50:	0605      	lsls	r5, r0, #24
 800ed52:	d501      	bpl.n	800ed58 <_printf_i+0xe8>
 800ed54:	681e      	ldr	r6, [r3, #0]
 800ed56:	e002      	b.n	800ed5e <_printf_i+0xee>
 800ed58:	0641      	lsls	r1, r0, #25
 800ed5a:	d5fb      	bpl.n	800ed54 <_printf_i+0xe4>
 800ed5c:	881e      	ldrh	r6, [r3, #0]
 800ed5e:	4853      	ldr	r0, [pc, #332]	; (800eeac <_printf_i+0x23c>)
 800ed60:	2f6f      	cmp	r7, #111	; 0x6f
 800ed62:	bf0c      	ite	eq
 800ed64:	2308      	moveq	r3, #8
 800ed66:	230a      	movne	r3, #10
 800ed68:	2100      	movs	r1, #0
 800ed6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed6e:	6865      	ldr	r5, [r4, #4]
 800ed70:	60a5      	str	r5, [r4, #8]
 800ed72:	2d00      	cmp	r5, #0
 800ed74:	bfa2      	ittt	ge
 800ed76:	6821      	ldrge	r1, [r4, #0]
 800ed78:	f021 0104 	bicge.w	r1, r1, #4
 800ed7c:	6021      	strge	r1, [r4, #0]
 800ed7e:	b90e      	cbnz	r6, 800ed84 <_printf_i+0x114>
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	d04b      	beq.n	800ee1c <_printf_i+0x1ac>
 800ed84:	4615      	mov	r5, r2
 800ed86:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed8a:	fb03 6711 	mls	r7, r3, r1, r6
 800ed8e:	5dc7      	ldrb	r7, [r0, r7]
 800ed90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed94:	4637      	mov	r7, r6
 800ed96:	42bb      	cmp	r3, r7
 800ed98:	460e      	mov	r6, r1
 800ed9a:	d9f4      	bls.n	800ed86 <_printf_i+0x116>
 800ed9c:	2b08      	cmp	r3, #8
 800ed9e:	d10b      	bne.n	800edb8 <_printf_i+0x148>
 800eda0:	6823      	ldr	r3, [r4, #0]
 800eda2:	07de      	lsls	r6, r3, #31
 800eda4:	d508      	bpl.n	800edb8 <_printf_i+0x148>
 800eda6:	6923      	ldr	r3, [r4, #16]
 800eda8:	6861      	ldr	r1, [r4, #4]
 800edaa:	4299      	cmp	r1, r3
 800edac:	bfde      	ittt	le
 800edae:	2330      	movle	r3, #48	; 0x30
 800edb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800edb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800edb8:	1b52      	subs	r2, r2, r5
 800edba:	6122      	str	r2, [r4, #16]
 800edbc:	f8cd a000 	str.w	sl, [sp]
 800edc0:	464b      	mov	r3, r9
 800edc2:	aa03      	add	r2, sp, #12
 800edc4:	4621      	mov	r1, r4
 800edc6:	4640      	mov	r0, r8
 800edc8:	f7ff fee4 	bl	800eb94 <_printf_common>
 800edcc:	3001      	adds	r0, #1
 800edce:	d14a      	bne.n	800ee66 <_printf_i+0x1f6>
 800edd0:	f04f 30ff 	mov.w	r0, #4294967295
 800edd4:	b004      	add	sp, #16
 800edd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edda:	6823      	ldr	r3, [r4, #0]
 800eddc:	f043 0320 	orr.w	r3, r3, #32
 800ede0:	6023      	str	r3, [r4, #0]
 800ede2:	4833      	ldr	r0, [pc, #204]	; (800eeb0 <_printf_i+0x240>)
 800ede4:	2778      	movs	r7, #120	; 0x78
 800ede6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800edea:	6823      	ldr	r3, [r4, #0]
 800edec:	6829      	ldr	r1, [r5, #0]
 800edee:	061f      	lsls	r7, r3, #24
 800edf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800edf4:	d402      	bmi.n	800edfc <_printf_i+0x18c>
 800edf6:	065f      	lsls	r7, r3, #25
 800edf8:	bf48      	it	mi
 800edfa:	b2b6      	uxthmi	r6, r6
 800edfc:	07df      	lsls	r7, r3, #31
 800edfe:	bf48      	it	mi
 800ee00:	f043 0320 	orrmi.w	r3, r3, #32
 800ee04:	6029      	str	r1, [r5, #0]
 800ee06:	bf48      	it	mi
 800ee08:	6023      	strmi	r3, [r4, #0]
 800ee0a:	b91e      	cbnz	r6, 800ee14 <_printf_i+0x1a4>
 800ee0c:	6823      	ldr	r3, [r4, #0]
 800ee0e:	f023 0320 	bic.w	r3, r3, #32
 800ee12:	6023      	str	r3, [r4, #0]
 800ee14:	2310      	movs	r3, #16
 800ee16:	e7a7      	b.n	800ed68 <_printf_i+0xf8>
 800ee18:	4824      	ldr	r0, [pc, #144]	; (800eeac <_printf_i+0x23c>)
 800ee1a:	e7e4      	b.n	800ede6 <_printf_i+0x176>
 800ee1c:	4615      	mov	r5, r2
 800ee1e:	e7bd      	b.n	800ed9c <_printf_i+0x12c>
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	6826      	ldr	r6, [r4, #0]
 800ee24:	6961      	ldr	r1, [r4, #20]
 800ee26:	1d18      	adds	r0, r3, #4
 800ee28:	6028      	str	r0, [r5, #0]
 800ee2a:	0635      	lsls	r5, r6, #24
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	d501      	bpl.n	800ee34 <_printf_i+0x1c4>
 800ee30:	6019      	str	r1, [r3, #0]
 800ee32:	e002      	b.n	800ee3a <_printf_i+0x1ca>
 800ee34:	0670      	lsls	r0, r6, #25
 800ee36:	d5fb      	bpl.n	800ee30 <_printf_i+0x1c0>
 800ee38:	8019      	strh	r1, [r3, #0]
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	6123      	str	r3, [r4, #16]
 800ee3e:	4615      	mov	r5, r2
 800ee40:	e7bc      	b.n	800edbc <_printf_i+0x14c>
 800ee42:	682b      	ldr	r3, [r5, #0]
 800ee44:	1d1a      	adds	r2, r3, #4
 800ee46:	602a      	str	r2, [r5, #0]
 800ee48:	681d      	ldr	r5, [r3, #0]
 800ee4a:	6862      	ldr	r2, [r4, #4]
 800ee4c:	2100      	movs	r1, #0
 800ee4e:	4628      	mov	r0, r5
 800ee50:	f7f1 f9de 	bl	8000210 <memchr>
 800ee54:	b108      	cbz	r0, 800ee5a <_printf_i+0x1ea>
 800ee56:	1b40      	subs	r0, r0, r5
 800ee58:	6060      	str	r0, [r4, #4]
 800ee5a:	6863      	ldr	r3, [r4, #4]
 800ee5c:	6123      	str	r3, [r4, #16]
 800ee5e:	2300      	movs	r3, #0
 800ee60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee64:	e7aa      	b.n	800edbc <_printf_i+0x14c>
 800ee66:	6923      	ldr	r3, [r4, #16]
 800ee68:	462a      	mov	r2, r5
 800ee6a:	4649      	mov	r1, r9
 800ee6c:	4640      	mov	r0, r8
 800ee6e:	47d0      	blx	sl
 800ee70:	3001      	adds	r0, #1
 800ee72:	d0ad      	beq.n	800edd0 <_printf_i+0x160>
 800ee74:	6823      	ldr	r3, [r4, #0]
 800ee76:	079b      	lsls	r3, r3, #30
 800ee78:	d413      	bmi.n	800eea2 <_printf_i+0x232>
 800ee7a:	68e0      	ldr	r0, [r4, #12]
 800ee7c:	9b03      	ldr	r3, [sp, #12]
 800ee7e:	4298      	cmp	r0, r3
 800ee80:	bfb8      	it	lt
 800ee82:	4618      	movlt	r0, r3
 800ee84:	e7a6      	b.n	800edd4 <_printf_i+0x164>
 800ee86:	2301      	movs	r3, #1
 800ee88:	4632      	mov	r2, r6
 800ee8a:	4649      	mov	r1, r9
 800ee8c:	4640      	mov	r0, r8
 800ee8e:	47d0      	blx	sl
 800ee90:	3001      	adds	r0, #1
 800ee92:	d09d      	beq.n	800edd0 <_printf_i+0x160>
 800ee94:	3501      	adds	r5, #1
 800ee96:	68e3      	ldr	r3, [r4, #12]
 800ee98:	9903      	ldr	r1, [sp, #12]
 800ee9a:	1a5b      	subs	r3, r3, r1
 800ee9c:	42ab      	cmp	r3, r5
 800ee9e:	dcf2      	bgt.n	800ee86 <_printf_i+0x216>
 800eea0:	e7eb      	b.n	800ee7a <_printf_i+0x20a>
 800eea2:	2500      	movs	r5, #0
 800eea4:	f104 0619 	add.w	r6, r4, #25
 800eea8:	e7f5      	b.n	800ee96 <_printf_i+0x226>
 800eeaa:	bf00      	nop
 800eeac:	0800fdbf 	.word	0x0800fdbf
 800eeb0:	0800fdd0 	.word	0x0800fdd0

0800eeb4 <__sflush_r>:
 800eeb4:	898a      	ldrh	r2, [r1, #12]
 800eeb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeba:	4605      	mov	r5, r0
 800eebc:	0710      	lsls	r0, r2, #28
 800eebe:	460c      	mov	r4, r1
 800eec0:	d458      	bmi.n	800ef74 <__sflush_r+0xc0>
 800eec2:	684b      	ldr	r3, [r1, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	dc05      	bgt.n	800eed4 <__sflush_r+0x20>
 800eec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	dc02      	bgt.n	800eed4 <__sflush_r+0x20>
 800eece:	2000      	movs	r0, #0
 800eed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eed6:	2e00      	cmp	r6, #0
 800eed8:	d0f9      	beq.n	800eece <__sflush_r+0x1a>
 800eeda:	2300      	movs	r3, #0
 800eedc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eee0:	682f      	ldr	r7, [r5, #0]
 800eee2:	6a21      	ldr	r1, [r4, #32]
 800eee4:	602b      	str	r3, [r5, #0]
 800eee6:	d032      	beq.n	800ef4e <__sflush_r+0x9a>
 800eee8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eeea:	89a3      	ldrh	r3, [r4, #12]
 800eeec:	075a      	lsls	r2, r3, #29
 800eeee:	d505      	bpl.n	800eefc <__sflush_r+0x48>
 800eef0:	6863      	ldr	r3, [r4, #4]
 800eef2:	1ac0      	subs	r0, r0, r3
 800eef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eef6:	b10b      	cbz	r3, 800eefc <__sflush_r+0x48>
 800eef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eefa:	1ac0      	subs	r0, r0, r3
 800eefc:	2300      	movs	r3, #0
 800eefe:	4602      	mov	r2, r0
 800ef00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef02:	6a21      	ldr	r1, [r4, #32]
 800ef04:	4628      	mov	r0, r5
 800ef06:	47b0      	blx	r6
 800ef08:	1c43      	adds	r3, r0, #1
 800ef0a:	89a3      	ldrh	r3, [r4, #12]
 800ef0c:	d106      	bne.n	800ef1c <__sflush_r+0x68>
 800ef0e:	6829      	ldr	r1, [r5, #0]
 800ef10:	291d      	cmp	r1, #29
 800ef12:	d82b      	bhi.n	800ef6c <__sflush_r+0xb8>
 800ef14:	4a29      	ldr	r2, [pc, #164]	; (800efbc <__sflush_r+0x108>)
 800ef16:	410a      	asrs	r2, r1
 800ef18:	07d6      	lsls	r6, r2, #31
 800ef1a:	d427      	bmi.n	800ef6c <__sflush_r+0xb8>
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	6062      	str	r2, [r4, #4]
 800ef20:	04d9      	lsls	r1, r3, #19
 800ef22:	6922      	ldr	r2, [r4, #16]
 800ef24:	6022      	str	r2, [r4, #0]
 800ef26:	d504      	bpl.n	800ef32 <__sflush_r+0x7e>
 800ef28:	1c42      	adds	r2, r0, #1
 800ef2a:	d101      	bne.n	800ef30 <__sflush_r+0x7c>
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	b903      	cbnz	r3, 800ef32 <__sflush_r+0x7e>
 800ef30:	6560      	str	r0, [r4, #84]	; 0x54
 800ef32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef34:	602f      	str	r7, [r5, #0]
 800ef36:	2900      	cmp	r1, #0
 800ef38:	d0c9      	beq.n	800eece <__sflush_r+0x1a>
 800ef3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef3e:	4299      	cmp	r1, r3
 800ef40:	d002      	beq.n	800ef48 <__sflush_r+0x94>
 800ef42:	4628      	mov	r0, r5
 800ef44:	f7ff fbce 	bl	800e6e4 <_free_r>
 800ef48:	2000      	movs	r0, #0
 800ef4a:	6360      	str	r0, [r4, #52]	; 0x34
 800ef4c:	e7c0      	b.n	800eed0 <__sflush_r+0x1c>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	4628      	mov	r0, r5
 800ef52:	47b0      	blx	r6
 800ef54:	1c41      	adds	r1, r0, #1
 800ef56:	d1c8      	bne.n	800eeea <__sflush_r+0x36>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d0c5      	beq.n	800eeea <__sflush_r+0x36>
 800ef5e:	2b1d      	cmp	r3, #29
 800ef60:	d001      	beq.n	800ef66 <__sflush_r+0xb2>
 800ef62:	2b16      	cmp	r3, #22
 800ef64:	d101      	bne.n	800ef6a <__sflush_r+0xb6>
 800ef66:	602f      	str	r7, [r5, #0]
 800ef68:	e7b1      	b.n	800eece <__sflush_r+0x1a>
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef70:	81a3      	strh	r3, [r4, #12]
 800ef72:	e7ad      	b.n	800eed0 <__sflush_r+0x1c>
 800ef74:	690f      	ldr	r7, [r1, #16]
 800ef76:	2f00      	cmp	r7, #0
 800ef78:	d0a9      	beq.n	800eece <__sflush_r+0x1a>
 800ef7a:	0793      	lsls	r3, r2, #30
 800ef7c:	680e      	ldr	r6, [r1, #0]
 800ef7e:	bf08      	it	eq
 800ef80:	694b      	ldreq	r3, [r1, #20]
 800ef82:	600f      	str	r7, [r1, #0]
 800ef84:	bf18      	it	ne
 800ef86:	2300      	movne	r3, #0
 800ef88:	eba6 0807 	sub.w	r8, r6, r7
 800ef8c:	608b      	str	r3, [r1, #8]
 800ef8e:	f1b8 0f00 	cmp.w	r8, #0
 800ef92:	dd9c      	ble.n	800eece <__sflush_r+0x1a>
 800ef94:	6a21      	ldr	r1, [r4, #32]
 800ef96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef98:	4643      	mov	r3, r8
 800ef9a:	463a      	mov	r2, r7
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	47b0      	blx	r6
 800efa0:	2800      	cmp	r0, #0
 800efa2:	dc06      	bgt.n	800efb2 <__sflush_r+0xfe>
 800efa4:	89a3      	ldrh	r3, [r4, #12]
 800efa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efaa:	81a3      	strh	r3, [r4, #12]
 800efac:	f04f 30ff 	mov.w	r0, #4294967295
 800efb0:	e78e      	b.n	800eed0 <__sflush_r+0x1c>
 800efb2:	4407      	add	r7, r0
 800efb4:	eba8 0800 	sub.w	r8, r8, r0
 800efb8:	e7e9      	b.n	800ef8e <__sflush_r+0xda>
 800efba:	bf00      	nop
 800efbc:	dfbffffe 	.word	0xdfbffffe

0800efc0 <_fflush_r>:
 800efc0:	b538      	push	{r3, r4, r5, lr}
 800efc2:	690b      	ldr	r3, [r1, #16]
 800efc4:	4605      	mov	r5, r0
 800efc6:	460c      	mov	r4, r1
 800efc8:	b913      	cbnz	r3, 800efd0 <_fflush_r+0x10>
 800efca:	2500      	movs	r5, #0
 800efcc:	4628      	mov	r0, r5
 800efce:	bd38      	pop	{r3, r4, r5, pc}
 800efd0:	b118      	cbz	r0, 800efda <_fflush_r+0x1a>
 800efd2:	6a03      	ldr	r3, [r0, #32]
 800efd4:	b90b      	cbnz	r3, 800efda <_fflush_r+0x1a>
 800efd6:	f7ff f9dd 	bl	800e394 <__sinit>
 800efda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d0f3      	beq.n	800efca <_fflush_r+0xa>
 800efe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efe4:	07d0      	lsls	r0, r2, #31
 800efe6:	d404      	bmi.n	800eff2 <_fflush_r+0x32>
 800efe8:	0599      	lsls	r1, r3, #22
 800efea:	d402      	bmi.n	800eff2 <_fflush_r+0x32>
 800efec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efee:	f7ff fb51 	bl	800e694 <__retarget_lock_acquire_recursive>
 800eff2:	4628      	mov	r0, r5
 800eff4:	4621      	mov	r1, r4
 800eff6:	f7ff ff5d 	bl	800eeb4 <__sflush_r>
 800effa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800effc:	07da      	lsls	r2, r3, #31
 800effe:	4605      	mov	r5, r0
 800f000:	d4e4      	bmi.n	800efcc <_fflush_r+0xc>
 800f002:	89a3      	ldrh	r3, [r4, #12]
 800f004:	059b      	lsls	r3, r3, #22
 800f006:	d4e1      	bmi.n	800efcc <_fflush_r+0xc>
 800f008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f00a:	f7ff fb44 	bl	800e696 <__retarget_lock_release_recursive>
 800f00e:	e7dd      	b.n	800efcc <_fflush_r+0xc>

0800f010 <fiprintf>:
 800f010:	b40e      	push	{r1, r2, r3}
 800f012:	b503      	push	{r0, r1, lr}
 800f014:	4601      	mov	r1, r0
 800f016:	ab03      	add	r3, sp, #12
 800f018:	4805      	ldr	r0, [pc, #20]	; (800f030 <fiprintf+0x20>)
 800f01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f01e:	6800      	ldr	r0, [r0, #0]
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	f000 f89f 	bl	800f164 <_vfiprintf_r>
 800f026:	b002      	add	sp, #8
 800f028:	f85d eb04 	ldr.w	lr, [sp], #4
 800f02c:	b003      	add	sp, #12
 800f02e:	4770      	bx	lr
 800f030:	2000017c 	.word	0x2000017c

0800f034 <memmove>:
 800f034:	4288      	cmp	r0, r1
 800f036:	b510      	push	{r4, lr}
 800f038:	eb01 0402 	add.w	r4, r1, r2
 800f03c:	d902      	bls.n	800f044 <memmove+0x10>
 800f03e:	4284      	cmp	r4, r0
 800f040:	4623      	mov	r3, r4
 800f042:	d807      	bhi.n	800f054 <memmove+0x20>
 800f044:	1e43      	subs	r3, r0, #1
 800f046:	42a1      	cmp	r1, r4
 800f048:	d008      	beq.n	800f05c <memmove+0x28>
 800f04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f04e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f052:	e7f8      	b.n	800f046 <memmove+0x12>
 800f054:	4402      	add	r2, r0
 800f056:	4601      	mov	r1, r0
 800f058:	428a      	cmp	r2, r1
 800f05a:	d100      	bne.n	800f05e <memmove+0x2a>
 800f05c:	bd10      	pop	{r4, pc}
 800f05e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f066:	e7f7      	b.n	800f058 <memmove+0x24>

0800f068 <_sbrk_r>:
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	4d06      	ldr	r5, [pc, #24]	; (800f084 <_sbrk_r+0x1c>)
 800f06c:	2300      	movs	r3, #0
 800f06e:	4604      	mov	r4, r0
 800f070:	4608      	mov	r0, r1
 800f072:	602b      	str	r3, [r5, #0]
 800f074:	f7f3 fa98 	bl	80025a8 <_sbrk>
 800f078:	1c43      	adds	r3, r0, #1
 800f07a:	d102      	bne.n	800f082 <_sbrk_r+0x1a>
 800f07c:	682b      	ldr	r3, [r5, #0]
 800f07e:	b103      	cbz	r3, 800f082 <_sbrk_r+0x1a>
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	bd38      	pop	{r3, r4, r5, pc}
 800f084:	200036fc 	.word	0x200036fc

0800f088 <memcpy>:
 800f088:	440a      	add	r2, r1
 800f08a:	4291      	cmp	r1, r2
 800f08c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f090:	d100      	bne.n	800f094 <memcpy+0xc>
 800f092:	4770      	bx	lr
 800f094:	b510      	push	{r4, lr}
 800f096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f09a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f09e:	4291      	cmp	r1, r2
 800f0a0:	d1f9      	bne.n	800f096 <memcpy+0xe>
 800f0a2:	bd10      	pop	{r4, pc}

0800f0a4 <abort>:
 800f0a4:	b508      	push	{r3, lr}
 800f0a6:	2006      	movs	r0, #6
 800f0a8:	f000 fa34 	bl	800f514 <raise>
 800f0ac:	2001      	movs	r0, #1
 800f0ae:	f7f3 fa03 	bl	80024b8 <_exit>

0800f0b2 <_realloc_r>:
 800f0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b6:	4680      	mov	r8, r0
 800f0b8:	4614      	mov	r4, r2
 800f0ba:	460e      	mov	r6, r1
 800f0bc:	b921      	cbnz	r1, 800f0c8 <_realloc_r+0x16>
 800f0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c2:	4611      	mov	r1, r2
 800f0c4:	f7ff bb82 	b.w	800e7cc <_malloc_r>
 800f0c8:	b92a      	cbnz	r2, 800f0d6 <_realloc_r+0x24>
 800f0ca:	f7ff fb0b 	bl	800e6e4 <_free_r>
 800f0ce:	4625      	mov	r5, r4
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d6:	f000 fa39 	bl	800f54c <_malloc_usable_size_r>
 800f0da:	4284      	cmp	r4, r0
 800f0dc:	4607      	mov	r7, r0
 800f0de:	d802      	bhi.n	800f0e6 <_realloc_r+0x34>
 800f0e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0e4:	d812      	bhi.n	800f10c <_realloc_r+0x5a>
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	f7ff fb6f 	bl	800e7cc <_malloc_r>
 800f0ee:	4605      	mov	r5, r0
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	d0ed      	beq.n	800f0d0 <_realloc_r+0x1e>
 800f0f4:	42bc      	cmp	r4, r7
 800f0f6:	4622      	mov	r2, r4
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	bf28      	it	cs
 800f0fc:	463a      	movcs	r2, r7
 800f0fe:	f7ff ffc3 	bl	800f088 <memcpy>
 800f102:	4631      	mov	r1, r6
 800f104:	4640      	mov	r0, r8
 800f106:	f7ff faed 	bl	800e6e4 <_free_r>
 800f10a:	e7e1      	b.n	800f0d0 <_realloc_r+0x1e>
 800f10c:	4635      	mov	r5, r6
 800f10e:	e7df      	b.n	800f0d0 <_realloc_r+0x1e>

0800f110 <__sfputc_r>:
 800f110:	6893      	ldr	r3, [r2, #8]
 800f112:	3b01      	subs	r3, #1
 800f114:	2b00      	cmp	r3, #0
 800f116:	b410      	push	{r4}
 800f118:	6093      	str	r3, [r2, #8]
 800f11a:	da08      	bge.n	800f12e <__sfputc_r+0x1e>
 800f11c:	6994      	ldr	r4, [r2, #24]
 800f11e:	42a3      	cmp	r3, r4
 800f120:	db01      	blt.n	800f126 <__sfputc_r+0x16>
 800f122:	290a      	cmp	r1, #10
 800f124:	d103      	bne.n	800f12e <__sfputc_r+0x1e>
 800f126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f12a:	f000 b935 	b.w	800f398 <__swbuf_r>
 800f12e:	6813      	ldr	r3, [r2, #0]
 800f130:	1c58      	adds	r0, r3, #1
 800f132:	6010      	str	r0, [r2, #0]
 800f134:	7019      	strb	r1, [r3, #0]
 800f136:	4608      	mov	r0, r1
 800f138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f13c:	4770      	bx	lr

0800f13e <__sfputs_r>:
 800f13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f140:	4606      	mov	r6, r0
 800f142:	460f      	mov	r7, r1
 800f144:	4614      	mov	r4, r2
 800f146:	18d5      	adds	r5, r2, r3
 800f148:	42ac      	cmp	r4, r5
 800f14a:	d101      	bne.n	800f150 <__sfputs_r+0x12>
 800f14c:	2000      	movs	r0, #0
 800f14e:	e007      	b.n	800f160 <__sfputs_r+0x22>
 800f150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f154:	463a      	mov	r2, r7
 800f156:	4630      	mov	r0, r6
 800f158:	f7ff ffda 	bl	800f110 <__sfputc_r>
 800f15c:	1c43      	adds	r3, r0, #1
 800f15e:	d1f3      	bne.n	800f148 <__sfputs_r+0xa>
 800f160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f164 <_vfiprintf_r>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	460d      	mov	r5, r1
 800f16a:	b09d      	sub	sp, #116	; 0x74
 800f16c:	4614      	mov	r4, r2
 800f16e:	4698      	mov	r8, r3
 800f170:	4606      	mov	r6, r0
 800f172:	b118      	cbz	r0, 800f17c <_vfiprintf_r+0x18>
 800f174:	6a03      	ldr	r3, [r0, #32]
 800f176:	b90b      	cbnz	r3, 800f17c <_vfiprintf_r+0x18>
 800f178:	f7ff f90c 	bl	800e394 <__sinit>
 800f17c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f17e:	07d9      	lsls	r1, r3, #31
 800f180:	d405      	bmi.n	800f18e <_vfiprintf_r+0x2a>
 800f182:	89ab      	ldrh	r3, [r5, #12]
 800f184:	059a      	lsls	r2, r3, #22
 800f186:	d402      	bmi.n	800f18e <_vfiprintf_r+0x2a>
 800f188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f18a:	f7ff fa83 	bl	800e694 <__retarget_lock_acquire_recursive>
 800f18e:	89ab      	ldrh	r3, [r5, #12]
 800f190:	071b      	lsls	r3, r3, #28
 800f192:	d501      	bpl.n	800f198 <_vfiprintf_r+0x34>
 800f194:	692b      	ldr	r3, [r5, #16]
 800f196:	b99b      	cbnz	r3, 800f1c0 <_vfiprintf_r+0x5c>
 800f198:	4629      	mov	r1, r5
 800f19a:	4630      	mov	r0, r6
 800f19c:	f000 f93a 	bl	800f414 <__swsetup_r>
 800f1a0:	b170      	cbz	r0, 800f1c0 <_vfiprintf_r+0x5c>
 800f1a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1a4:	07dc      	lsls	r4, r3, #31
 800f1a6:	d504      	bpl.n	800f1b2 <_vfiprintf_r+0x4e>
 800f1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ac:	b01d      	add	sp, #116	; 0x74
 800f1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b2:	89ab      	ldrh	r3, [r5, #12]
 800f1b4:	0598      	lsls	r0, r3, #22
 800f1b6:	d4f7      	bmi.n	800f1a8 <_vfiprintf_r+0x44>
 800f1b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1ba:	f7ff fa6c 	bl	800e696 <__retarget_lock_release_recursive>
 800f1be:	e7f3      	b.n	800f1a8 <_vfiprintf_r+0x44>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f1c4:	2320      	movs	r3, #32
 800f1c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1ce:	2330      	movs	r3, #48	; 0x30
 800f1d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f384 <_vfiprintf_r+0x220>
 800f1d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1d8:	f04f 0901 	mov.w	r9, #1
 800f1dc:	4623      	mov	r3, r4
 800f1de:	469a      	mov	sl, r3
 800f1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1e4:	b10a      	cbz	r2, 800f1ea <_vfiprintf_r+0x86>
 800f1e6:	2a25      	cmp	r2, #37	; 0x25
 800f1e8:	d1f9      	bne.n	800f1de <_vfiprintf_r+0x7a>
 800f1ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f1ee:	d00b      	beq.n	800f208 <_vfiprintf_r+0xa4>
 800f1f0:	465b      	mov	r3, fp
 800f1f2:	4622      	mov	r2, r4
 800f1f4:	4629      	mov	r1, r5
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f7ff ffa1 	bl	800f13e <__sfputs_r>
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	f000 80a9 	beq.w	800f354 <_vfiprintf_r+0x1f0>
 800f202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f204:	445a      	add	r2, fp
 800f206:	9209      	str	r2, [sp, #36]	; 0x24
 800f208:	f89a 3000 	ldrb.w	r3, [sl]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f000 80a1 	beq.w	800f354 <_vfiprintf_r+0x1f0>
 800f212:	2300      	movs	r3, #0
 800f214:	f04f 32ff 	mov.w	r2, #4294967295
 800f218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f21c:	f10a 0a01 	add.w	sl, sl, #1
 800f220:	9304      	str	r3, [sp, #16]
 800f222:	9307      	str	r3, [sp, #28]
 800f224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f228:	931a      	str	r3, [sp, #104]	; 0x68
 800f22a:	4654      	mov	r4, sl
 800f22c:	2205      	movs	r2, #5
 800f22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f232:	4854      	ldr	r0, [pc, #336]	; (800f384 <_vfiprintf_r+0x220>)
 800f234:	f7f0 ffec 	bl	8000210 <memchr>
 800f238:	9a04      	ldr	r2, [sp, #16]
 800f23a:	b9d8      	cbnz	r0, 800f274 <_vfiprintf_r+0x110>
 800f23c:	06d1      	lsls	r1, r2, #27
 800f23e:	bf44      	itt	mi
 800f240:	2320      	movmi	r3, #32
 800f242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f246:	0713      	lsls	r3, r2, #28
 800f248:	bf44      	itt	mi
 800f24a:	232b      	movmi	r3, #43	; 0x2b
 800f24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f250:	f89a 3000 	ldrb.w	r3, [sl]
 800f254:	2b2a      	cmp	r3, #42	; 0x2a
 800f256:	d015      	beq.n	800f284 <_vfiprintf_r+0x120>
 800f258:	9a07      	ldr	r2, [sp, #28]
 800f25a:	4654      	mov	r4, sl
 800f25c:	2000      	movs	r0, #0
 800f25e:	f04f 0c0a 	mov.w	ip, #10
 800f262:	4621      	mov	r1, r4
 800f264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f268:	3b30      	subs	r3, #48	; 0x30
 800f26a:	2b09      	cmp	r3, #9
 800f26c:	d94d      	bls.n	800f30a <_vfiprintf_r+0x1a6>
 800f26e:	b1b0      	cbz	r0, 800f29e <_vfiprintf_r+0x13a>
 800f270:	9207      	str	r2, [sp, #28]
 800f272:	e014      	b.n	800f29e <_vfiprintf_r+0x13a>
 800f274:	eba0 0308 	sub.w	r3, r0, r8
 800f278:	fa09 f303 	lsl.w	r3, r9, r3
 800f27c:	4313      	orrs	r3, r2
 800f27e:	9304      	str	r3, [sp, #16]
 800f280:	46a2      	mov	sl, r4
 800f282:	e7d2      	b.n	800f22a <_vfiprintf_r+0xc6>
 800f284:	9b03      	ldr	r3, [sp, #12]
 800f286:	1d19      	adds	r1, r3, #4
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	9103      	str	r1, [sp, #12]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	bfbb      	ittet	lt
 800f290:	425b      	neglt	r3, r3
 800f292:	f042 0202 	orrlt.w	r2, r2, #2
 800f296:	9307      	strge	r3, [sp, #28]
 800f298:	9307      	strlt	r3, [sp, #28]
 800f29a:	bfb8      	it	lt
 800f29c:	9204      	strlt	r2, [sp, #16]
 800f29e:	7823      	ldrb	r3, [r4, #0]
 800f2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800f2a2:	d10c      	bne.n	800f2be <_vfiprintf_r+0x15a>
 800f2a4:	7863      	ldrb	r3, [r4, #1]
 800f2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a8:	d134      	bne.n	800f314 <_vfiprintf_r+0x1b0>
 800f2aa:	9b03      	ldr	r3, [sp, #12]
 800f2ac:	1d1a      	adds	r2, r3, #4
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	9203      	str	r2, [sp, #12]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	bfb8      	it	lt
 800f2b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2ba:	3402      	adds	r4, #2
 800f2bc:	9305      	str	r3, [sp, #20]
 800f2be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f394 <_vfiprintf_r+0x230>
 800f2c2:	7821      	ldrb	r1, [r4, #0]
 800f2c4:	2203      	movs	r2, #3
 800f2c6:	4650      	mov	r0, sl
 800f2c8:	f7f0 ffa2 	bl	8000210 <memchr>
 800f2cc:	b138      	cbz	r0, 800f2de <_vfiprintf_r+0x17a>
 800f2ce:	9b04      	ldr	r3, [sp, #16]
 800f2d0:	eba0 000a 	sub.w	r0, r0, sl
 800f2d4:	2240      	movs	r2, #64	; 0x40
 800f2d6:	4082      	lsls	r2, r0
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	3401      	adds	r4, #1
 800f2dc:	9304      	str	r3, [sp, #16]
 800f2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e2:	4829      	ldr	r0, [pc, #164]	; (800f388 <_vfiprintf_r+0x224>)
 800f2e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2e8:	2206      	movs	r2, #6
 800f2ea:	f7f0 ff91 	bl	8000210 <memchr>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d03f      	beq.n	800f372 <_vfiprintf_r+0x20e>
 800f2f2:	4b26      	ldr	r3, [pc, #152]	; (800f38c <_vfiprintf_r+0x228>)
 800f2f4:	bb1b      	cbnz	r3, 800f33e <_vfiprintf_r+0x1da>
 800f2f6:	9b03      	ldr	r3, [sp, #12]
 800f2f8:	3307      	adds	r3, #7
 800f2fa:	f023 0307 	bic.w	r3, r3, #7
 800f2fe:	3308      	adds	r3, #8
 800f300:	9303      	str	r3, [sp, #12]
 800f302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f304:	443b      	add	r3, r7
 800f306:	9309      	str	r3, [sp, #36]	; 0x24
 800f308:	e768      	b.n	800f1dc <_vfiprintf_r+0x78>
 800f30a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f30e:	460c      	mov	r4, r1
 800f310:	2001      	movs	r0, #1
 800f312:	e7a6      	b.n	800f262 <_vfiprintf_r+0xfe>
 800f314:	2300      	movs	r3, #0
 800f316:	3401      	adds	r4, #1
 800f318:	9305      	str	r3, [sp, #20]
 800f31a:	4619      	mov	r1, r3
 800f31c:	f04f 0c0a 	mov.w	ip, #10
 800f320:	4620      	mov	r0, r4
 800f322:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f326:	3a30      	subs	r2, #48	; 0x30
 800f328:	2a09      	cmp	r2, #9
 800f32a:	d903      	bls.n	800f334 <_vfiprintf_r+0x1d0>
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d0c6      	beq.n	800f2be <_vfiprintf_r+0x15a>
 800f330:	9105      	str	r1, [sp, #20]
 800f332:	e7c4      	b.n	800f2be <_vfiprintf_r+0x15a>
 800f334:	fb0c 2101 	mla	r1, ip, r1, r2
 800f338:	4604      	mov	r4, r0
 800f33a:	2301      	movs	r3, #1
 800f33c:	e7f0      	b.n	800f320 <_vfiprintf_r+0x1bc>
 800f33e:	ab03      	add	r3, sp, #12
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	462a      	mov	r2, r5
 800f344:	4b12      	ldr	r3, [pc, #72]	; (800f390 <_vfiprintf_r+0x22c>)
 800f346:	a904      	add	r1, sp, #16
 800f348:	4630      	mov	r0, r6
 800f34a:	f3af 8000 	nop.w
 800f34e:	4607      	mov	r7, r0
 800f350:	1c78      	adds	r0, r7, #1
 800f352:	d1d6      	bne.n	800f302 <_vfiprintf_r+0x19e>
 800f354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f356:	07d9      	lsls	r1, r3, #31
 800f358:	d405      	bmi.n	800f366 <_vfiprintf_r+0x202>
 800f35a:	89ab      	ldrh	r3, [r5, #12]
 800f35c:	059a      	lsls	r2, r3, #22
 800f35e:	d402      	bmi.n	800f366 <_vfiprintf_r+0x202>
 800f360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f362:	f7ff f998 	bl	800e696 <__retarget_lock_release_recursive>
 800f366:	89ab      	ldrh	r3, [r5, #12]
 800f368:	065b      	lsls	r3, r3, #25
 800f36a:	f53f af1d 	bmi.w	800f1a8 <_vfiprintf_r+0x44>
 800f36e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f370:	e71c      	b.n	800f1ac <_vfiprintf_r+0x48>
 800f372:	ab03      	add	r3, sp, #12
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	462a      	mov	r2, r5
 800f378:	4b05      	ldr	r3, [pc, #20]	; (800f390 <_vfiprintf_r+0x22c>)
 800f37a:	a904      	add	r1, sp, #16
 800f37c:	4630      	mov	r0, r6
 800f37e:	f7ff fc77 	bl	800ec70 <_printf_i>
 800f382:	e7e4      	b.n	800f34e <_vfiprintf_r+0x1ea>
 800f384:	0800fdae 	.word	0x0800fdae
 800f388:	0800fdb8 	.word	0x0800fdb8
 800f38c:	00000000 	.word	0x00000000
 800f390:	0800f13f 	.word	0x0800f13f
 800f394:	0800fdb4 	.word	0x0800fdb4

0800f398 <__swbuf_r>:
 800f398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39a:	460e      	mov	r6, r1
 800f39c:	4614      	mov	r4, r2
 800f39e:	4605      	mov	r5, r0
 800f3a0:	b118      	cbz	r0, 800f3aa <__swbuf_r+0x12>
 800f3a2:	6a03      	ldr	r3, [r0, #32]
 800f3a4:	b90b      	cbnz	r3, 800f3aa <__swbuf_r+0x12>
 800f3a6:	f7fe fff5 	bl	800e394 <__sinit>
 800f3aa:	69a3      	ldr	r3, [r4, #24]
 800f3ac:	60a3      	str	r3, [r4, #8]
 800f3ae:	89a3      	ldrh	r3, [r4, #12]
 800f3b0:	071a      	lsls	r2, r3, #28
 800f3b2:	d525      	bpl.n	800f400 <__swbuf_r+0x68>
 800f3b4:	6923      	ldr	r3, [r4, #16]
 800f3b6:	b31b      	cbz	r3, 800f400 <__swbuf_r+0x68>
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	6922      	ldr	r2, [r4, #16]
 800f3bc:	1a98      	subs	r0, r3, r2
 800f3be:	6963      	ldr	r3, [r4, #20]
 800f3c0:	b2f6      	uxtb	r6, r6
 800f3c2:	4283      	cmp	r3, r0
 800f3c4:	4637      	mov	r7, r6
 800f3c6:	dc04      	bgt.n	800f3d2 <__swbuf_r+0x3a>
 800f3c8:	4621      	mov	r1, r4
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f7ff fdf8 	bl	800efc0 <_fflush_r>
 800f3d0:	b9e0      	cbnz	r0, 800f40c <__swbuf_r+0x74>
 800f3d2:	68a3      	ldr	r3, [r4, #8]
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	60a3      	str	r3, [r4, #8]
 800f3d8:	6823      	ldr	r3, [r4, #0]
 800f3da:	1c5a      	adds	r2, r3, #1
 800f3dc:	6022      	str	r2, [r4, #0]
 800f3de:	701e      	strb	r6, [r3, #0]
 800f3e0:	6962      	ldr	r2, [r4, #20]
 800f3e2:	1c43      	adds	r3, r0, #1
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d004      	beq.n	800f3f2 <__swbuf_r+0x5a>
 800f3e8:	89a3      	ldrh	r3, [r4, #12]
 800f3ea:	07db      	lsls	r3, r3, #31
 800f3ec:	d506      	bpl.n	800f3fc <__swbuf_r+0x64>
 800f3ee:	2e0a      	cmp	r6, #10
 800f3f0:	d104      	bne.n	800f3fc <__swbuf_r+0x64>
 800f3f2:	4621      	mov	r1, r4
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	f7ff fde3 	bl	800efc0 <_fflush_r>
 800f3fa:	b938      	cbnz	r0, 800f40c <__swbuf_r+0x74>
 800f3fc:	4638      	mov	r0, r7
 800f3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f400:	4621      	mov	r1, r4
 800f402:	4628      	mov	r0, r5
 800f404:	f000 f806 	bl	800f414 <__swsetup_r>
 800f408:	2800      	cmp	r0, #0
 800f40a:	d0d5      	beq.n	800f3b8 <__swbuf_r+0x20>
 800f40c:	f04f 37ff 	mov.w	r7, #4294967295
 800f410:	e7f4      	b.n	800f3fc <__swbuf_r+0x64>
	...

0800f414 <__swsetup_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4b2a      	ldr	r3, [pc, #168]	; (800f4c0 <__swsetup_r+0xac>)
 800f418:	4605      	mov	r5, r0
 800f41a:	6818      	ldr	r0, [r3, #0]
 800f41c:	460c      	mov	r4, r1
 800f41e:	b118      	cbz	r0, 800f428 <__swsetup_r+0x14>
 800f420:	6a03      	ldr	r3, [r0, #32]
 800f422:	b90b      	cbnz	r3, 800f428 <__swsetup_r+0x14>
 800f424:	f7fe ffb6 	bl	800e394 <__sinit>
 800f428:	89a3      	ldrh	r3, [r4, #12]
 800f42a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f42e:	0718      	lsls	r0, r3, #28
 800f430:	d422      	bmi.n	800f478 <__swsetup_r+0x64>
 800f432:	06d9      	lsls	r1, r3, #27
 800f434:	d407      	bmi.n	800f446 <__swsetup_r+0x32>
 800f436:	2309      	movs	r3, #9
 800f438:	602b      	str	r3, [r5, #0]
 800f43a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f43e:	81a3      	strh	r3, [r4, #12]
 800f440:	f04f 30ff 	mov.w	r0, #4294967295
 800f444:	e034      	b.n	800f4b0 <__swsetup_r+0x9c>
 800f446:	0758      	lsls	r0, r3, #29
 800f448:	d512      	bpl.n	800f470 <__swsetup_r+0x5c>
 800f44a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f44c:	b141      	cbz	r1, 800f460 <__swsetup_r+0x4c>
 800f44e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f452:	4299      	cmp	r1, r3
 800f454:	d002      	beq.n	800f45c <__swsetup_r+0x48>
 800f456:	4628      	mov	r0, r5
 800f458:	f7ff f944 	bl	800e6e4 <_free_r>
 800f45c:	2300      	movs	r3, #0
 800f45e:	6363      	str	r3, [r4, #52]	; 0x34
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f466:	81a3      	strh	r3, [r4, #12]
 800f468:	2300      	movs	r3, #0
 800f46a:	6063      	str	r3, [r4, #4]
 800f46c:	6923      	ldr	r3, [r4, #16]
 800f46e:	6023      	str	r3, [r4, #0]
 800f470:	89a3      	ldrh	r3, [r4, #12]
 800f472:	f043 0308 	orr.w	r3, r3, #8
 800f476:	81a3      	strh	r3, [r4, #12]
 800f478:	6923      	ldr	r3, [r4, #16]
 800f47a:	b94b      	cbnz	r3, 800f490 <__swsetup_r+0x7c>
 800f47c:	89a3      	ldrh	r3, [r4, #12]
 800f47e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f486:	d003      	beq.n	800f490 <__swsetup_r+0x7c>
 800f488:	4621      	mov	r1, r4
 800f48a:	4628      	mov	r0, r5
 800f48c:	f000 f88c 	bl	800f5a8 <__smakebuf_r>
 800f490:	89a0      	ldrh	r0, [r4, #12]
 800f492:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f496:	f010 0301 	ands.w	r3, r0, #1
 800f49a:	d00a      	beq.n	800f4b2 <__swsetup_r+0x9e>
 800f49c:	2300      	movs	r3, #0
 800f49e:	60a3      	str	r3, [r4, #8]
 800f4a0:	6963      	ldr	r3, [r4, #20]
 800f4a2:	425b      	negs	r3, r3
 800f4a4:	61a3      	str	r3, [r4, #24]
 800f4a6:	6923      	ldr	r3, [r4, #16]
 800f4a8:	b943      	cbnz	r3, 800f4bc <__swsetup_r+0xa8>
 800f4aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4ae:	d1c4      	bne.n	800f43a <__swsetup_r+0x26>
 800f4b0:	bd38      	pop	{r3, r4, r5, pc}
 800f4b2:	0781      	lsls	r1, r0, #30
 800f4b4:	bf58      	it	pl
 800f4b6:	6963      	ldrpl	r3, [r4, #20]
 800f4b8:	60a3      	str	r3, [r4, #8]
 800f4ba:	e7f4      	b.n	800f4a6 <__swsetup_r+0x92>
 800f4bc:	2000      	movs	r0, #0
 800f4be:	e7f7      	b.n	800f4b0 <__swsetup_r+0x9c>
 800f4c0:	2000017c 	.word	0x2000017c

0800f4c4 <_raise_r>:
 800f4c4:	291f      	cmp	r1, #31
 800f4c6:	b538      	push	{r3, r4, r5, lr}
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	460d      	mov	r5, r1
 800f4cc:	d904      	bls.n	800f4d8 <_raise_r+0x14>
 800f4ce:	2316      	movs	r3, #22
 800f4d0:	6003      	str	r3, [r0, #0]
 800f4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d6:	bd38      	pop	{r3, r4, r5, pc}
 800f4d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f4da:	b112      	cbz	r2, 800f4e2 <_raise_r+0x1e>
 800f4dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4e0:	b94b      	cbnz	r3, 800f4f6 <_raise_r+0x32>
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f000 f830 	bl	800f548 <_getpid_r>
 800f4e8:	462a      	mov	r2, r5
 800f4ea:	4601      	mov	r1, r0
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4f2:	f000 b817 	b.w	800f524 <_kill_r>
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d00a      	beq.n	800f510 <_raise_r+0x4c>
 800f4fa:	1c59      	adds	r1, r3, #1
 800f4fc:	d103      	bne.n	800f506 <_raise_r+0x42>
 800f4fe:	2316      	movs	r3, #22
 800f500:	6003      	str	r3, [r0, #0]
 800f502:	2001      	movs	r0, #1
 800f504:	e7e7      	b.n	800f4d6 <_raise_r+0x12>
 800f506:	2400      	movs	r4, #0
 800f508:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f50c:	4628      	mov	r0, r5
 800f50e:	4798      	blx	r3
 800f510:	2000      	movs	r0, #0
 800f512:	e7e0      	b.n	800f4d6 <_raise_r+0x12>

0800f514 <raise>:
 800f514:	4b02      	ldr	r3, [pc, #8]	; (800f520 <raise+0xc>)
 800f516:	4601      	mov	r1, r0
 800f518:	6818      	ldr	r0, [r3, #0]
 800f51a:	f7ff bfd3 	b.w	800f4c4 <_raise_r>
 800f51e:	bf00      	nop
 800f520:	2000017c 	.word	0x2000017c

0800f524 <_kill_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d07      	ldr	r5, [pc, #28]	; (800f544 <_kill_r+0x20>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	4611      	mov	r1, r2
 800f530:	602b      	str	r3, [r5, #0]
 800f532:	f7f2 ffb1 	bl	8002498 <_kill>
 800f536:	1c43      	adds	r3, r0, #1
 800f538:	d102      	bne.n	800f540 <_kill_r+0x1c>
 800f53a:	682b      	ldr	r3, [r5, #0]
 800f53c:	b103      	cbz	r3, 800f540 <_kill_r+0x1c>
 800f53e:	6023      	str	r3, [r4, #0]
 800f540:	bd38      	pop	{r3, r4, r5, pc}
 800f542:	bf00      	nop
 800f544:	200036fc 	.word	0x200036fc

0800f548 <_getpid_r>:
 800f548:	f7f2 bf9e 	b.w	8002488 <_getpid>

0800f54c <_malloc_usable_size_r>:
 800f54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f550:	1f18      	subs	r0, r3, #4
 800f552:	2b00      	cmp	r3, #0
 800f554:	bfbc      	itt	lt
 800f556:	580b      	ldrlt	r3, [r1, r0]
 800f558:	18c0      	addlt	r0, r0, r3
 800f55a:	4770      	bx	lr

0800f55c <__swhatbuf_r>:
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	460c      	mov	r4, r1
 800f560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f564:	2900      	cmp	r1, #0
 800f566:	b096      	sub	sp, #88	; 0x58
 800f568:	4615      	mov	r5, r2
 800f56a:	461e      	mov	r6, r3
 800f56c:	da0d      	bge.n	800f58a <__swhatbuf_r+0x2e>
 800f56e:	89a3      	ldrh	r3, [r4, #12]
 800f570:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f574:	f04f 0100 	mov.w	r1, #0
 800f578:	bf0c      	ite	eq
 800f57a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f57e:	2340      	movne	r3, #64	; 0x40
 800f580:	2000      	movs	r0, #0
 800f582:	6031      	str	r1, [r6, #0]
 800f584:	602b      	str	r3, [r5, #0]
 800f586:	b016      	add	sp, #88	; 0x58
 800f588:	bd70      	pop	{r4, r5, r6, pc}
 800f58a:	466a      	mov	r2, sp
 800f58c:	f000 f848 	bl	800f620 <_fstat_r>
 800f590:	2800      	cmp	r0, #0
 800f592:	dbec      	blt.n	800f56e <__swhatbuf_r+0x12>
 800f594:	9901      	ldr	r1, [sp, #4]
 800f596:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f59a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f59e:	4259      	negs	r1, r3
 800f5a0:	4159      	adcs	r1, r3
 800f5a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5a6:	e7eb      	b.n	800f580 <__swhatbuf_r+0x24>

0800f5a8 <__smakebuf_r>:
 800f5a8:	898b      	ldrh	r3, [r1, #12]
 800f5aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5ac:	079d      	lsls	r5, r3, #30
 800f5ae:	4606      	mov	r6, r0
 800f5b0:	460c      	mov	r4, r1
 800f5b2:	d507      	bpl.n	800f5c4 <__smakebuf_r+0x1c>
 800f5b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5b8:	6023      	str	r3, [r4, #0]
 800f5ba:	6123      	str	r3, [r4, #16]
 800f5bc:	2301      	movs	r3, #1
 800f5be:	6163      	str	r3, [r4, #20]
 800f5c0:	b002      	add	sp, #8
 800f5c2:	bd70      	pop	{r4, r5, r6, pc}
 800f5c4:	ab01      	add	r3, sp, #4
 800f5c6:	466a      	mov	r2, sp
 800f5c8:	f7ff ffc8 	bl	800f55c <__swhatbuf_r>
 800f5cc:	9900      	ldr	r1, [sp, #0]
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	4630      	mov	r0, r6
 800f5d2:	f7ff f8fb 	bl	800e7cc <_malloc_r>
 800f5d6:	b948      	cbnz	r0, 800f5ec <__smakebuf_r+0x44>
 800f5d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5dc:	059a      	lsls	r2, r3, #22
 800f5de:	d4ef      	bmi.n	800f5c0 <__smakebuf_r+0x18>
 800f5e0:	f023 0303 	bic.w	r3, r3, #3
 800f5e4:	f043 0302 	orr.w	r3, r3, #2
 800f5e8:	81a3      	strh	r3, [r4, #12]
 800f5ea:	e7e3      	b.n	800f5b4 <__smakebuf_r+0xc>
 800f5ec:	89a3      	ldrh	r3, [r4, #12]
 800f5ee:	6020      	str	r0, [r4, #0]
 800f5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5f4:	81a3      	strh	r3, [r4, #12]
 800f5f6:	9b00      	ldr	r3, [sp, #0]
 800f5f8:	6163      	str	r3, [r4, #20]
 800f5fa:	9b01      	ldr	r3, [sp, #4]
 800f5fc:	6120      	str	r0, [r4, #16]
 800f5fe:	b15b      	cbz	r3, 800f618 <__smakebuf_r+0x70>
 800f600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f604:	4630      	mov	r0, r6
 800f606:	f000 f81d 	bl	800f644 <_isatty_r>
 800f60a:	b128      	cbz	r0, 800f618 <__smakebuf_r+0x70>
 800f60c:	89a3      	ldrh	r3, [r4, #12]
 800f60e:	f023 0303 	bic.w	r3, r3, #3
 800f612:	f043 0301 	orr.w	r3, r3, #1
 800f616:	81a3      	strh	r3, [r4, #12]
 800f618:	89a3      	ldrh	r3, [r4, #12]
 800f61a:	431d      	orrs	r5, r3
 800f61c:	81a5      	strh	r5, [r4, #12]
 800f61e:	e7cf      	b.n	800f5c0 <__smakebuf_r+0x18>

0800f620 <_fstat_r>:
 800f620:	b538      	push	{r3, r4, r5, lr}
 800f622:	4d07      	ldr	r5, [pc, #28]	; (800f640 <_fstat_r+0x20>)
 800f624:	2300      	movs	r3, #0
 800f626:	4604      	mov	r4, r0
 800f628:	4608      	mov	r0, r1
 800f62a:	4611      	mov	r1, r2
 800f62c:	602b      	str	r3, [r5, #0]
 800f62e:	f7f2 ff92 	bl	8002556 <_fstat>
 800f632:	1c43      	adds	r3, r0, #1
 800f634:	d102      	bne.n	800f63c <_fstat_r+0x1c>
 800f636:	682b      	ldr	r3, [r5, #0]
 800f638:	b103      	cbz	r3, 800f63c <_fstat_r+0x1c>
 800f63a:	6023      	str	r3, [r4, #0]
 800f63c:	bd38      	pop	{r3, r4, r5, pc}
 800f63e:	bf00      	nop
 800f640:	200036fc 	.word	0x200036fc

0800f644 <_isatty_r>:
 800f644:	b538      	push	{r3, r4, r5, lr}
 800f646:	4d06      	ldr	r5, [pc, #24]	; (800f660 <_isatty_r+0x1c>)
 800f648:	2300      	movs	r3, #0
 800f64a:	4604      	mov	r4, r0
 800f64c:	4608      	mov	r0, r1
 800f64e:	602b      	str	r3, [r5, #0]
 800f650:	f7f2 ff91 	bl	8002576 <_isatty>
 800f654:	1c43      	adds	r3, r0, #1
 800f656:	d102      	bne.n	800f65e <_isatty_r+0x1a>
 800f658:	682b      	ldr	r3, [r5, #0]
 800f65a:	b103      	cbz	r3, 800f65e <_isatty_r+0x1a>
 800f65c:	6023      	str	r3, [r4, #0]
 800f65e:	bd38      	pop	{r3, r4, r5, pc}
 800f660:	200036fc 	.word	0x200036fc

0800f664 <_init>:
 800f664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f666:	bf00      	nop
 800f668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f66a:	bc08      	pop	{r3}
 800f66c:	469e      	mov	lr, r3
 800f66e:	4770      	bx	lr

0800f670 <_fini>:
 800f670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f672:	bf00      	nop
 800f674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f676:	bc08      	pop	{r3}
 800f678:	469e      	mov	lr, r3
 800f67a:	4770      	bx	lr
